{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum\n"
        },
        {
            "id": "chunk_1_VehicleSize_1",
            "code": "class VehicleSize(Enum):\n"
        },
        {
            "id": "chunk_1_VehicleSize_2",
            "code": "    MOTORCYCLE = 0\n    COMPACT = 1\n    LARGE = 2\n"
        },
        {
            "id": "chunk_2_Vehicle_1",
            "code": "class Vehicle(metaclass=ABCMeta):\n\n"
        },
        {
            "id": "chunk_2_Vehicle_2",
            "code": "    def __init__(self, vehicle_size, license_plate, spot_size):\n        self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []\n"
        },
        {
            "id": "chunk_2_Vehicle_3",
            "code": "    def clear_spots(self):\n        for spot in self.spots_taken:\n            spot.remove_vehicle(self)\n        self.spots_taken = []\n"
        },
        {
            "id": "chunk_2_Vehicle_4",
            "code": "    def take_spot(self, spot):\n        self.spots_taken.append(spot)\n"
        },
        {
            "id": "chunk_2_Vehicle_5",
            "code": "    @abstractmethod\n    def can_fit_in_spot(self, spot):\n        pass\n"
        },
        {
            "id": "chunk_3___init___1",
            "code": "    def __init__(self, vehicle_size, license_plate, spot_size):\n        self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []\n"
        },
        {
            "id": "chunk_4_clear_spots_1",
            "code": "    def clear_spots(self):\n"
        },
        {
            "id": "chunk_4_clear_spots_2",
            "code": "        for spot in self.spots_taken:\n            spot.remove_vehicle(self)\n"
        },
        {
            "id": "chunk_4_clear_spots_3",
            "code": "        self.spots_taken = []\n"
        },
        {
            "id": "chunk_5_take_spot_1",
            "code": "    def take_spot(self, spot):\n        self.spots_taken.append(spot)\n"
        },
        {
            "id": "chunk_6_can_fit_in_spot_1",
            "code": "    def can_fit_in_spot(self, spot):\n        pass\n"
        },
        {
            "id": "chunk_7_Motorcycle_1",
            "code": "class Motorcycle(Vehicle):\n"
        },
        {
            "id": "chunk_7_Motorcycle_2",
            "code": "    def __init__(self, license_plate):\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)\n"
        },
        {
            "id": "chunk_7_Motorcycle_3",
            "code": "    def can_fit_in_spot(self, spot):\n        return True\n"
        },
        {
            "id": "chunk_8___init___1",
            "code": "    def __init__(self, license_plate):\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)\n"
        },
        {
            "id": "chunk_9_can_fit_in_spot_1",
            "code": "    def can_fit_in_spot(self, spot):\n        return True\n"
        },
        {
            "id": "chunk_10_Car_1",
            "code": "class Car(Vehicle):\n"
        },
        {
            "id": "chunk_10_Car_2",
            "code": "    def __init__(self, license_plate):\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)\n"
        },
        {
            "id": "chunk_10_Car_3",
            "code": "    def can_fit_in_spot(self, spot):\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)\n"
        },
        {
            "id": "chunk_11___init___1",
            "code": "    def __init__(self, license_plate):\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)\n"
        },
        {
            "id": "chunk_12_can_fit_in_spot_1",
            "code": "    def can_fit_in_spot(self, spot):\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)\n"
        },
        {
            "id": "chunk_13_Bus_1",
            "code": "class Bus(Vehicle):\n"
        },
        {
            "id": "chunk_13_Bus_2",
            "code": "    def __init__(self, license_plate):\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)\n"
        },
        {
            "id": "chunk_13_Bus_3",
            "code": "    def can_fit_in_spot(self, spot):\n        return spot.size == VehicleSize.LARGE\n"
        },
        {
            "id": "chunk_14___init___1",
            "code": "    def __init__(self, license_plate):\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)\n"
        },
        {
            "id": "chunk_15_can_fit_in_spot_1",
            "code": "    def can_fit_in_spot(self, spot):\n        return spot.size == VehicleSize.LARGE\n"
        },
        {
            "id": "chunk_16_ParkingLot_1",
            "code": "class ParkingLot(object):\n\n"
        },
        {
            "id": "chunk_16_ParkingLot_2",
            "code": "    def __init__(self, num_levels):\n        self.num_levels = num_levels\n        self.levels = []  # List of Levels\n\n"
        },
        {
            "id": "chunk_16_ParkingLot_3",
            "code": "    def park_vehicle(self, vehicle):\n        for level in self.levels:\n            if level.park_vehicle(vehicle):\n                return True\n        return False\n"
        },
        {
            "id": "chunk_16_ParkingLot_4",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_17___init___1",
            "code": "    def __init__(self, num_levels):\n        self.num_levels = num_levels\n        self.levels = []  # List of Levels\n"
        },
        {
            "id": "chunk_18_park_vehicle_1",
            "code": "    def park_vehicle(self, vehicle):\n"
        },
        {
            "id": "chunk_18_park_vehicle_2",
            "code": "        for level in self.levels:\n            if level.park_vehicle(vehicle):\n"
        },
        {
            "id": "chunk_18_park_vehicle_3",
            "code": "                return True\n"
        },
        {
            "id": "chunk_18_park_vehicle_4",
            "code": "        return False\n"
        },
        {
            "id": "chunk_19_Level_1",
            "code": "class Level(object):\n"
        },
        {
            "id": "chunk_19_Level_2",
            "code": "    SPOTS_PER_ROW = 10\n"
        },
        {
            "id": "chunk_19_Level_3",
            "code": "    def __init__(self, floor, total_spots):\n        self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []  # List of ParkingSpots\n"
        },
        {
            "id": "chunk_19_Level_4",
            "code": "    def spot_freed(self):\n        self.available_spots += 1\n"
        },
        {
            "id": "chunk_19_Level_5",
            "code": "    def park_vehicle(self, vehicle):\n        spot = self._find_available_spot(vehicle)\n        if spot is None:\n            return None\n        else:\n            spot.park_vehicle(vehicle)\n            return spot\n"
        },
        {
            "id": "chunk_19_Level_6",
            "code": "    def _find_available_spot(self, vehicle):\n        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass\n"
        },
        {
            "id": "chunk_19_Level_7",
            "code": "    def _park_starting_at_spot(self, spot, vehicle):\n        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass\n"
        },
        {
            "id": "chunk_20___init___1",
            "code": "    def __init__(self, floor, total_spots):\n        self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []  # List of ParkingSpots\n"
        },
        {
            "id": "chunk_21_spot_freed_1",
            "code": "    def spot_freed(self):\n        self.available_spots += 1\n"
        },
        {
            "id": "chunk_22_park_vehicle_1",
            "code": "    def park_vehicle(self, vehicle):\n        spot = self._find_available_spot(vehicle)\n"
        },
        {
            "id": "chunk_22_park_vehicle_2",
            "code": "        if spot is None:\n            return None\n"
        },
        {
            "id": "chunk_22_park_vehicle_3",
            "code": "        else:\n            spot.park_vehicle(vehicle)\n            return spot\n"
        },
        {
            "id": "chunk_23__find_available_spot_1",
            "code": "    def _find_available_spot(self, vehicle):\n        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass\n"
        },
        {
            "id": "chunk_24__park_starting_at_spot_1",
            "code": "    def _park_starting_at_spot(self, spot, vehicle):\n        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass\n"
        },
        {
            "id": "chunk_25_ParkingSpot_1",
            "code": "class ParkingSpot(object):\n\n"
        },
        {
            "id": "chunk_25_ParkingSpot_2",
            "code": "    def __init__(self, level, row, spot_number, spot_size, vehicle_size):\n        self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None\n"
        },
        {
            "id": "chunk_25_ParkingSpot_3",
            "code": "    def is_available(self):\n        return True if self.vehicle is None else False\n"
        },
        {
            "id": "chunk_25_ParkingSpot_4",
            "code": "    def can_fit_vehicle(self, vehicle):\n        if self.vehicle is not None:\n            return False\n        return vehicle.can_fit_in_spot(self)\n"
        },
        {
            "id": "chunk_25_ParkingSpot_5",
            "code": "    def park_vehicle(self, vehicle):\n        pass\n"
        },
        {
            "id": "chunk_25_ParkingSpot_6",
            "code": "    def remove_vehicle(self):\n        pass\n"
        },
        {
            "id": "chunk_26___init___1",
            "code": "    def __init__(self, level, row, spot_number, spot_size, vehicle_size):\n        self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None\n"
        },
        {
            "id": "chunk_27_is_available_1",
            "code": "    def is_available(self):\n        return True if self.vehicle is None else False\n"
        },
        {
            "id": "chunk_28_can_fit_vehicle_1",
            "code": "    def can_fit_vehicle(self, vehicle):\n"
        },
        {
            "id": "chunk_28_can_fit_vehicle_2",
            "code": "        if self.vehicle is not None:\n            return False\n"
        },
        {
            "id": "chunk_28_can_fit_vehicle_3",
            "code": "        return vehicle.can_fit_in_spot(self)\n"
        },
        {
            "id": "chunk_29_park_vehicle_1",
            "code": "    def park_vehicle(self, vehicle):\n        pass\n"
        },
        {
            "id": "chunk_30_remove_vehicle_1",
            "code": "    def remove_vehicle(self):\n        pass\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_1_VehicleSize_1",
            "to": "chunk_1_VehicleSize_2"
        },
        {
            "from": "chunk_4_clear_spots_1",
            "to": "chunk_4_clear_spots_2"
        },
        {
            "from": "chunk_4_clear_spots_2",
            "to": "chunk_4_clear_spots_3"
        },
        {
            "from": "chunk_16_ParkingLot_1",
            "to": "chunk_16_ParkingLot_2"
        },
        {
            "from": "chunk_16_ParkingLot_2",
            "to": "chunk_16_ParkingLot_3"
        },
        {
            "from": "chunk_18_park_vehicle_1",
            "to": "chunk_18_park_vehicle_2"
        },
        {
            "from": "chunk_18_park_vehicle_2",
            "to": "chunk_18_park_vehicle_3"
        },
        {
            "from": "chunk_18_park_vehicle_2",
            "to": "chunk_18_park_vehicle_4"
        },
        {
            "from": "chunk_19_Level_1",
            "to": "chunk_19_Level_2"
        },
        {
            "from": "chunk_19_Level_2",
            "to": "chunk_19_Level_3"
        },
        {
            "from": "chunk_19_Level_3",
            "to": "chunk_19_Level_4"
        },
        {
            "from": "chunk_19_Level_3",
            "to": "chunk_19_Level_5"
        },
        {
            "from": "chunk_19_Level_5",
            "to": "chunk_19_Level_6"
        },
        {
            "from": "chunk_22_park_vehicle_1",
            "to": "chunk_22_park_vehicle_2"
        },
        {
            "from": "chunk_22_park_vehicle_1",
            "to": "chunk_22_park_vehicle_3"
        },
        {
            "from": "chunk_28_can_fit_vehicle_1",
            "to": "chunk_28_can_fit_vehicle_2"
        },
        {
            "from": "chunk_28_can_fit_vehicle_2",
            "to": "chunk_28_can_fit_vehicle_3"
        }
    ]
}