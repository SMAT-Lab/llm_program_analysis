{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from typing import Dict, Set\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from fastapi import WebSocket\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data import execution\nfrom backend.server.model import Methods, WsMessage\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_ConnectionManager_1",
            "code": "class ConnectionManager:\n    def __init__(self):\n        self.active_connections: Set[WebSocket] = set()\n        self.subscriptions: Dict[str, Set[WebSocket]] = {}\n\n"
        },
        {
            "id": "chunk_1_ConnectionManager_2",
            "code": "    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.add(websocket)\n\n"
        },
        {
            "id": "chunk_1_ConnectionManager_3",
            "code": "    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n        for subscribers in self.subscriptions.values():\n            subscribers.discard(websocket)\n\n"
        },
        {
            "id": "chunk_1_ConnectionManager_4",
            "code": "    async def subscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id not in self.subscriptions:\n            self.subscriptions[graph_id] = set()\n        self.subscriptions[graph_id].add(websocket)\n\n"
        },
        {
            "id": "chunk_1_ConnectionManager_5",
            "code": "    async def unsubscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id in self.subscriptions:\n            self.subscriptions[graph_id].discard(websocket)\n            if not self.subscriptions[graph_id]:\n                del self.subscriptions[graph_id]\n\n"
        },
        {
            "id": "chunk_1_ConnectionManager_6",
            "code": "    async def send_execution_result(self, result: execution.ExecutionResult):\n        graph_id = result.graph_id\n        if graph_id in self.subscriptions:\n            message = WsMessage(\n                method=Methods.EXECUTION_EVENT,\n                channel=graph_id,\n                data=result.model_dump(),\n            ).model_dump_json()\n            for connection in self.subscriptions[graph_id]:\n                await connection.send_text(message)\n\n"
        },
        {
            "id": "chunk_2___init___1",
            "code": "    def __init__(self):\n        self.active_connections: Set[WebSocket] = set()\n        self.subscriptions: Dict[str, Set[WebSocket]] = {}\n"
        },
        {
            "id": "chunk_3_connect_1",
            "code": "    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.add(websocket)\n"
        },
        {
            "id": "chunk_4_disconnect_1",
            "code": "    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n"
        },
        {
            "id": "chunk_4_disconnect_2",
            "code": "        for subscribers in self.subscriptions.values():\n            subscribers.discard(websocket)\n"
        },
        {
            "id": "chunk_5_subscribe_1",
            "code": "    async def subscribe(self, graph_id: str, websocket: WebSocket):\n"
        },
        {
            "id": "chunk_5_subscribe_2",
            "code": "        if graph_id not in self.subscriptions:\n"
        },
        {
            "id": "chunk_5_subscribe_3",
            "code": "            self.subscriptions[graph_id] = set()\n        self.subscriptions[graph_id].add(websocket)\n"
        },
        {
            "id": "chunk_6_unsubscribe_1",
            "code": "    async def unsubscribe(self, graph_id: str, websocket: WebSocket):\n"
        },
        {
            "id": "chunk_6_unsubscribe_2",
            "code": "        if graph_id in self.subscriptions:\n"
        },
        {
            "id": "chunk_6_unsubscribe_3",
            "code": "            self.subscriptions[graph_id].discard(websocket)\n"
        },
        {
            "id": "chunk_6_unsubscribe_4",
            "code": "            if not self.subscriptions[graph_id]:\n                del self.subscriptions[graph_id]\n"
        },
        {
            "id": "chunk_7_send_execution_result_1",
            "code": "    async def send_execution_result(self, result: execution.ExecutionResult):\n        graph_id = result.graph_id\n"
        },
        {
            "id": "chunk_7_send_execution_result_2",
            "code": "        if graph_id in self.subscriptions:\n"
        },
        {
            "id": "chunk_7_send_execution_result_3",
            "code": "            message = WsMessage(\n                method=Methods.EXECUTION_EVENT,\n                channel=graph_id,\n                data=result.model_dump(),\n            ).model_dump_json()\n"
        },
        {
            "id": "chunk_7_send_execution_result_4",
            "code": "            for connection in self.subscriptions[graph_id]:\n                await connection.send_text(message)\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_4_disconnect_1",
            "to": "chunk_4_disconnect_2"
        },
        {
            "from": "chunk_5_subscribe_1",
            "to": "chunk_5_subscribe_2"
        },
        {
            "from": "chunk_5_subscribe_2",
            "to": "chunk_5_subscribe_3"
        },
        {
            "from": "chunk_6_unsubscribe_1",
            "to": "chunk_6_unsubscribe_2"
        },
        {
            "from": "chunk_6_unsubscribe_2",
            "to": "chunk_6_unsubscribe_3"
        },
        {
            "from": "chunk_6_unsubscribe_3",
            "to": "chunk_6_unsubscribe_4"
        },
        {
            "from": "chunk_7_send_execution_result_1",
            "to": "chunk_7_send_execution_result_2"
        },
        {
            "from": "chunk_7_send_execution_result_2",
            "to": "chunk_7_send_execution_result_3"
        },
        {
            "from": "chunk_7_send_execution_result_3",
            "to": "chunk_7_send_execution_result_4"
        }
    ]
}