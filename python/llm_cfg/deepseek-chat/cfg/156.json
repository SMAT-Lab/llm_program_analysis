{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from fastapi import HTTPException, Request\nfrom starlette.middleware.base import RequestResponseEndpoint\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from .limiter import RateLimiter\n"
        },
        {
            "id": "chunk_1_rate_limit_middleware_1",
            "code": "async def rate_limit_middleware(request: Request, call_next: RequestResponseEndpoint):\n    \"\"\"FastAPI middleware for rate limiting API requests.\"\"\"\n    limiter = RateLimiter()\n"
        },
        {
            "id": "chunk_1_rate_limit_middleware_2",
            "code": "    if not request.url.path.startswith(\"/api\"):\n        return await call_next(request)\n"
        },
        {
            "id": "chunk_1_rate_limit_middleware_3",
            "code": "    api_key = request.headers.get(\"Authorization\")\n    if not api_key:\n        return await call_next(request)\n"
        },
        {
            "id": "chunk_1_rate_limit_middleware_4",
            "code": "    api_key = api_key.replace(\"Bearer \", \"\")\n"
        },
        {
            "id": "chunk_1_rate_limit_middleware_5",
            "code": "    is_allowed, remaining, reset_time = await limiter.check_rate_limit(api_key)\n"
        },
        {
            "id": "chunk_1_rate_limit_middleware_6",
            "code": "    if not is_allowed:\n        raise HTTPException(\n            status_code=429, detail=\"Rate limit exceeded. Please try again later.\"\n        )\n"
        },
        {
            "id": "chunk_1_rate_limit_middleware_7",
            "code": "    response = await call_next(request)\n    response.headers[\"X-RateLimit-Limit\"] = str(limiter.max_requests)\n    response.headers[\"X-RateLimit-Remaining\"] = str(remaining)\n    response.headers[\"X-RateLimit-Reset\"] = str(reset_time)\n"
        },
        {
            "id": "chunk_1_rate_limit_middleware_8",
            "code": "    return response\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_rate_limit_middleware_1",
            "to": "chunk_1_rate_limit_middleware_2"
        },
        {
            "from": "chunk_1_rate_limit_middleware_2",
            "to": "chunk_1_rate_limit_middleware_3"
        },
        {
            "from": "chunk_1_rate_limit_middleware_2",
            "to": "chunk_1_rate_limit_middleware_8"
        },
        {
            "from": "chunk_1_rate_limit_middleware_3",
            "to": "chunk_1_rate_limit_middleware_4"
        },
        {
            "from": "chunk_1_rate_limit_middleware_3",
            "to": "chunk_1_rate_limit_middleware_8"
        },
        {
            "from": "chunk_1_rate_limit_middleware_4",
            "to": "chunk_1_rate_limit_middleware_5"
        },
        {
            "from": "chunk_1_rate_limit_middleware_5",
            "to": "chunk_1_rate_limit_middleware_6"
        },
        {
            "from": "chunk_1_rate_limit_middleware_6",
            "to": "chunk_1_rate_limit_middleware_7"
        },
        {
            "from": "chunk_1_rate_limit_middleware_6",
            "to": "chunk_1_rate_limit_middleware_8"
        },
        {
            "from": "chunk_1_rate_limit_middleware_7",
            "to": "chunk_1_rate_limit_middleware_8"
        }
    ]
}