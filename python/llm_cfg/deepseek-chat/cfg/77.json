{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from math import cos, sin, sqrt, tau\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from audio_filters.iir_filter import IIRFilter\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "\"\"\"\nCreate 2nd-order IIR filters with Butterworth design.\n\nCode based on https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html\nAlternatively you can use scipy.signal.butter, which should yield the same results.\n\"\"\"\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_make_lowpass_1",
            "code": "def make_lowpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n"
        },
        {
            "id": "chunk_1_make_lowpass_2",
            "code": "    \"\"\"\n    Creates a low-pass filter\n\n    >>> filter = make_lowpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,\n     0.008555138626189618, 0.004277569313094809]\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_make_lowpass_3",
            "code": "    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n"
        },
        {
            "id": "chunk_1_make_lowpass_4",
            "code": "    b0 = (1 - _cos) / 2\n    b1 = 1 - _cos\n"
        },
        {
            "id": "chunk_1_make_lowpass_5",
            "code": "    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n"
        },
        {
            "id": "chunk_1_make_lowpass_6",
            "code": "    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt\n"
        },
        {
            "id": "chunk_2_make_highpass_1",
            "code": "def make_highpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n"
        },
        {
            "id": "chunk_2_make_highpass_2",
            "code": "    \"\"\"\n    Creates a high-pass filter\n\n    >>> filter = make_highpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,\n     -1.9914448613738105, 0.9957224306869052]\n    \"\"\"\n"
        },
        {
            "id": "chunk_2_make_highpass_3",
            "code": "    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n"
        },
        {
            "id": "chunk_2_make_highpass_4",
            "code": "    b0 = (1 + _cos) / 2\n    b1 = -1 - _cos\n"
        },
        {
            "id": "chunk_2_make_highpass_5",
            "code": "    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n"
        },
        {
            "id": "chunk_2_make_highpass_6",
            "code": "    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt\n"
        },
        {
            "id": "chunk_3_make_bandpass_1",
            "code": "def make_bandpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n"
        },
        {
            "id": "chunk_3_make_bandpass_2",
            "code": "    \"\"\"\n    Creates a band-pass filter\n\n    >>> filter = make_bandpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,\n     0, -0.06526309611002579]\n    \"\"\"\n"
        },
        {
            "id": "chunk_3_make_bandpass_3",
            "code": "    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n"
        },
        {
            "id": "chunk_3_make_bandpass_4",
            "code": "    b0 = _sin / 2\n    b1 = 0\n    b2 = -b0\n"
        },
        {
            "id": "chunk_3_make_bandpass_5",
            "code": "    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n"
        },
        {
            "id": "chunk_3_make_bandpass_6",
            "code": "    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n"
        },
        {
            "id": "chunk_4_make_allpass_1",
            "code": "def make_allpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n"
        },
        {
            "id": "chunk_4_make_allpass_2",
            "code": "    \"\"\"\n    Creates an all-pass filter\n\n    >>> filter = make_allpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,\n     -1.9828897227476208, 1.0922959556412573]\n    \"\"\"\n"
        },
        {
            "id": "chunk_4_make_allpass_3",
            "code": "    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n"
        },
        {
            "id": "chunk_4_make_allpass_4",
            "code": "    b0 = 1 - alpha\n    b1 = -2 * _cos\n    b2 = 1 + alpha\n"
        },
        {
            "id": "chunk_4_make_allpass_5",
            "code": "    filt = IIRFilter(2)\n    filt.set_coefficients([b2, b1, b0], [b0, b1, b2])\n    return filt\n"
        },
        {
            "id": "chunk_5_make_peak_1",
            "code": "def make_peak(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n"
        },
        {
            "id": "chunk_5_make_peak_2",
            "code": "    \"\"\"\n    Creates a peak filter\n\n    >>> filter = make_peak(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,\n     -1.9828897227476208, 0.8696284974398878]\n    \"\"\"\n"
        },
        {
            "id": "chunk_5_make_peak_3",
            "code": "    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n"
        },
        {
            "id": "chunk_5_make_peak_4",
            "code": "    b0 = 1 + alpha * big_a\n    b1 = -2 * _cos\n    b2 = 1 - alpha * big_a\n    a0 = 1 + alpha / big_a\n    a1 = -2 * _cos\n    a2 = 1 - alpha / big_a\n"
        },
        {
            "id": "chunk_5_make_peak_5",
            "code": "    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n"
        },
        {
            "id": "chunk_6_make_lowshelf_1",
            "code": "def make_lowshelf(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n"
        },
        {
            "id": "chunk_6_make_lowshelf_2",
            "code": "    \"\"\"\n    Creates a low-shelf filter\n\n    >>> filter = make_lowshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,\n     -5.591841778072785, 2.5201667380627257]\n    \"\"\"\n"
        },
        {
            "id": "chunk_6_make_lowshelf_3",
            "code": "    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n"
        },
        {
            "id": "chunk_6_make_lowshelf_4",
            "code": "    b0 = big_a * (pmc + aa2)\n    b1 = 2 * big_a * mpc\n    b2 = big_a * (pmc - aa2)\n    a0 = ppmc + aa2\n    a1 = -2 * pmpc\n    a2 = ppmc - aa2\n"
        },
        {
            "id": "chunk_6_make_lowshelf_5",
            "code": "    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n"
        },
        {
            "id": "chunk_7_make_highshelf_1",
            "code": "def make_highshelf(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n"
        },
        {
            "id": "chunk_7_make_highshelf_2",
            "code": "    \"\"\"\n    Creates a high-shelf filter\n\n    >>> filter = make_highshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,\n     -7.922740859457287, 3.6756456963725253]\n    \"\"\"\n"
        },
        {
            "id": "chunk_7_make_highshelf_3",
            "code": "    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n"
        },
        {
            "id": "chunk_7_make_highshelf_4",
            "code": "    b0 = big_a * (ppmc + aa2)\n    b1 = -2 * big_a * pmpc\n    b2 = big_a * (ppmc - aa2)\n    a0 = pmc + aa2\n    a1 = 2 * mpc\n    a2 = pmc - aa2\n"
        },
        {
            "id": "chunk_7_make_highshelf_5",
            "code": "    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_1_make_lowpass_1",
            "to": "chunk_1_make_lowpass_2"
        },
        {
            "from": "chunk_1_make_lowpass_2",
            "to": "chunk_1_make_lowpass_3"
        },
        {
            "from": "chunk_1_make_lowpass_3",
            "to": "chunk_1_make_lowpass_4"
        },
        {
            "from": "chunk_1_make_lowpass_4",
            "to": "chunk_1_make_lowpass_5"
        },
        {
            "from": "chunk_1_make_lowpass_5",
            "to": "chunk_1_make_lowpass_6"
        },
        {
            "from": "chunk_2_make_highpass_1",
            "to": "chunk_2_make_highpass_2"
        },
        {
            "from": "chunk_2_make_highpass_2",
            "to": "chunk_2_make_highpass_3"
        },
        {
            "from": "chunk_2_make_highpass_3",
            "to": "chunk_2_make_highpass_4"
        },
        {
            "from": "chunk_2_make_highpass_4",
            "to": "chunk_2_make_highpass_5"
        },
        {
            "from": "chunk_2_make_highpass_5",
            "to": "chunk_2_make_highpass_6"
        },
        {
            "from": "chunk_3_make_bandpass_1",
            "to": "chunk_3_make_bandpass_2"
        },
        {
            "from": "chunk_3_make_bandpass_2",
            "to": "chunk_3_make_bandpass_3"
        },
        {
            "from": "chunk_3_make_bandpass_3",
            "to": "chunk_3_make_bandpass_4"
        },
        {
            "from": "chunk_3_make_bandpass_4",
            "to": "chunk_3_make_bandpass_5"
        },
        {
            "from": "chunk_3_make_bandpass_5",
            "to": "chunk_3_make_bandpass_6"
        },
        {
            "from": "chunk_4_make_allpass_1",
            "to": "chunk_4_make_allpass_2"
        },
        {
            "from": "chunk_4_make_allpass_2",
            "to": "chunk_4_make_allpass_3"
        },
        {
            "from": "chunk_4_make_allpass_3",
            "to": "chunk_4_make_allpass_4"
        },
        {
            "from": "chunk_4_make_allpass_4",
            "to": "chunk_4_make_allpass_5"
        },
        {
            "from": "chunk_5_make_peak_1",
            "to": "chunk_5_make_peak_2"
        },
        {
            "from": "chunk_5_make_peak_2",
            "to": "chunk_5_make_peak_3"
        },
        {
            "from": "chunk_5_make_peak_3",
            "to": "chunk_5_make_peak_4"
        },
        {
            "from": "chunk_5_make_peak_4",
            "to": "chunk_5_make_peak_5"
        },
        {
            "from": "chunk_6_make_lowshelf_1",
            "to": "chunk_6_make_lowshelf_2"
        },
        {
            "from": "chunk_6_make_lowshelf_2",
            "to": "chunk_6_make_lowshelf_3"
        },
        {
            "from": "chunk_6_make_lowshelf_3",
            "to": "chunk_6_make_lowshelf_4"
        },
        {
            "from": "chunk_6_make_lowshelf_4",
            "to": "chunk_6_make_lowshelf_5"
        },
        {
            "from": "chunk_7_make_highshelf_1",
            "to": "chunk_7_make_highshelf_2"
        },
        {
            "from": "chunk_7_make_highshelf_2",
            "to": "chunk_7_make_highshelf_3"
        },
        {
            "from": "chunk_7_make_highshelf_3",
            "to": "chunk_7_make_highshelf_4"
        },
        {
            "from": "chunk_7_make_highshelf_4",
            "to": "chunk_7_make_highshelf_5"
        }
    ]
}