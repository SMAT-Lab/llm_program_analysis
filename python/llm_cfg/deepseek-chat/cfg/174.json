{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "# -*- coding: utf-8 -*-\nfrom collections import deque\nfrom enum import Enum\n"
        },
        {
            "id": "chunk_1_State_1",
            "code": "class State(Enum):\n    unvisited = 0\n    visited = 1\n"
        },
        {
            "id": "chunk_2_Graph_1",
            "code": "class Graph(object):\n\n"
        },
        {
            "id": "chunk_2_Graph_2",
            "code": "    def bfs(self, source, dest):\n        if source is None:\n            return False\n"
        },
        {
            "id": "chunk_2_Graph_3",
            "code": "        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n"
        },
        {
            "id": "chunk_2_Graph_4",
            "code": "        while queue:\n            node = queue.popleft()\n            print(node)\n"
        },
        {
            "id": "chunk_2_Graph_5",
            "code": "            if dest is node:\n                return True\n"
        },
        {
            "id": "chunk_2_Graph_6",
            "code": "            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n"
        },
        {
            "id": "chunk_2_Graph_7",
            "code": "        return False\n"
        },
        {
            "id": "chunk_3_bfs_1",
            "code": "    def bfs(self, source, dest):\n        if source is None:\n            return False\n"
        },
        {
            "id": "chunk_3_bfs_2",
            "code": "        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n"
        },
        {
            "id": "chunk_3_bfs_3",
            "code": "        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n"
        },
        {
            "id": "chunk_3_bfs_4",
            "code": "            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n"
        },
        {
            "id": "chunk_3_bfs_5",
            "code": "        return False\n"
        },
        {
            "id": "chunk_4_Person_1",
            "code": "class Person(object):\n\n"
        },
        {
            "id": "chunk_4_Person_2",
            "code": "    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []\n\n"
        },
        {
            "id": "chunk_5___init___1",
            "code": "    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []\n"
        },
        {
            "id": "chunk_6_LookupService_1",
            "code": "class LookupService(object):\n\n"
        },
        {
            "id": "chunk_6_LookupService_2",
            "code": "    def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n\n"
        },
        {
            "id": "chunk_6_LookupService_3",
            "code": "    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]\n\n"
        },
        {
            "id": "chunk_7___init___1",
            "code": "    def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n"
        },
        {
            "id": "chunk_8_get_person_1",
            "code": "    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]\n"
        },
        {
            "id": "chunk_9_PersonServer_1",
            "code": "class PersonServer(object):\n\n"
        },
        {
            "id": "chunk_9_PersonServer_2",
            "code": "    def __init__(self):\n        self.people = {}  # key: person_id, value: person\n\n"
        },
        {
            "id": "chunk_9_PersonServer_3",
            "code": "    def get_people(self, ids):\n        results = []\n"
        },
        {
            "id": "chunk_9_PersonServer_4",
            "code": "        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results\n"
        },
        {
            "id": "chunk_10___init___1",
            "code": "    def __init__(self):\n        self.people = {}  # key: person_id, value: person\n"
        },
        {
            "id": "chunk_11_get_people_1",
            "code": "    def get_people(self, ids):\n        results = []\n"
        },
        {
            "id": "chunk_11_get_people_2",
            "code": "        for id in ids:\n"
        },
        {
            "id": "chunk_11_get_people_3",
            "code": "            if id in self.people:\n                results.append(self.people[id])\n"
        },
        {
            "id": "chunk_11_get_people_4",
            "code": "        return results\n"
        },
        {
            "id": "chunk_12_UserGraphService_1",
            "code": "class UserGraphService(object):\n\n"
        },
        {
            "id": "chunk_12_UserGraphService_2",
            "code": "    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n"
        },
        {
            "id": "chunk_12_UserGraphService_3",
            "code": "    def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass\n\n"
        },
        {
            "id": "chunk_13___init___1",
            "code": "    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n"
        },
        {
            "id": "chunk_14_bfs_1",
            "code": "    def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_2_Graph_2",
            "to": "chunk_2_Graph_3"
        },
        {
            "from": "chunk_2_Graph_3",
            "to": "chunk_2_Graph_4"
        },
        {
            "from": "chunk_2_Graph_4",
            "to": "chunk_2_Graph_5"
        },
        {
            "from": "chunk_2_Graph_4",
            "to": "chunk_2_Graph_7"
        },
        {
            "from": "chunk_2_Graph_5",
            "to": "chunk_2_Graph_6"
        },
        {
            "from": "chunk_2_Graph_5",
            "to": "chunk_2_Graph_7"
        },
        {
            "from": "chunk_2_Graph_6",
            "to": "chunk_2_Graph_4"
        },
        {
            "from": "chunk_3_bfs_1",
            "to": "chunk_3_bfs_2"
        },
        {
            "from": "chunk_3_bfs_1",
            "to": "chunk_3_bfs_5"
        },
        {
            "from": "chunk_3_bfs_2",
            "to": "chunk_3_bfs_3"
        },
        {
            "from": "chunk_3_bfs_3",
            "to": "chunk_3_bfs_4"
        },
        {
            "from": "chunk_3_bfs_3",
            "to": "chunk_3_bfs_5"
        },
        {
            "from": "chunk_3_bfs_4",
            "to": "chunk_3_bfs_3"
        },
        {
            "from": "chunk_9_PersonServer_1",
            "to": "chunk_9_PersonServer_2"
        },
        {
            "from": "chunk_9_PersonServer_3",
            "to": "chunk_9_PersonServer_4"
        },
        {
            "from": "chunk_11_get_people_1",
            "to": "chunk_11_get_people_2"
        },
        {
            "from": "chunk_11_get_people_2",
            "to": "chunk_11_get_people_3"
        },
        {
            "from": "chunk_11_get_people_2",
            "to": "chunk_11_get_people_4"
        },
        {
            "from": "chunk_11_get_people_3",
            "to": "chunk_11_get_people_2"
        },
        {
            "from": "chunk_12_UserGraphService_1",
            "to": "chunk_12_UserGraphService_2"
        }
    ]
}