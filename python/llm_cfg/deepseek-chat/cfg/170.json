{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "# -*- coding: utf-8 -*-\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from mrjob.job import MRJob\n"
        },
        {
            "id": "chunk_1_SpendingByCategory_1",
            "code": "class SpendingByCategory(MRJob):\n\n"
        },
        {
            "id": "chunk_1_SpendingByCategory_2",
            "code": "    def __init__(self, categorizer):\n        self.categorizer = categorizer\n        ...\n"
        },
        {
            "id": "chunk_1_SpendingByCategory_3",
            "code": "    def current_year_month(self):\n        \"\"\"Return the current year and month.\"\"\"\n        ...\n"
        },
        {
            "id": "chunk_1_SpendingByCategory_4",
            "code": "    def extract_year_month(self, timestamp):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        ...\n"
        },
        {
            "id": "chunk_1_SpendingByCategory_5",
            "code": "    def handle_budget_notifications(self, key, total):\n        \"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n        ...\n"
        },
        {
            "id": "chunk_1_SpendingByCategory_6",
            "code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n"
        },
        {
            "id": "chunk_1_SpendingByCategory_7",
            "code": "        timestamp, category, amount = line.split('\\t')\n        period = self. extract_year_month(timestamp)\n        if period == self.current_year_month():\n            yield (period, category), amount\n"
        },
        {
            "id": "chunk_1_SpendingByCategory_8",
            "code": "    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n"
        },
        {
            "id": "chunk_1_SpendingByCategory_9",
            "code": "        total = sum(values)\n        self.handle_budget_notifications(key, total)\n        yield key, sum(values)\n"
        },
        {
            "id": "chunk_1_SpendingByCategory_10",
            "code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]\n"
        },
        {
            "id": "chunk_2___init___1",
            "code": "    def __init__(self, categorizer):\n        self.categorizer = categorizer\n"
        },
        {
            "id": "chunk_3_current_year_month_1",
            "code": "    def current_year_month(self):\n        \"\"\"Return the current year and month.\"\"\"\n        ...\n"
        },
        {
            "id": "chunk_4_extract_year_month_1",
            "code": "    def extract_year_month(self, timestamp):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n"
        },
        {
            "id": "chunk_4_extract_year_month_2",
            "code": "        ...\n"
        },
        {
            "id": "chunk_5_handle_budget_notifications_1",
            "code": "    def handle_budget_notifications(self, key, total):\n        \"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n"
        },
        {
            "id": "chunk_5_handle_budget_notifications_2",
            "code": "        ...\n"
        },
        {
            "id": "chunk_6_mapper_1",
            "code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n"
        },
        {
            "id": "chunk_6_mapper_2",
            "code": "        timestamp, category, amount = line.split('\\t')\n        period = self. extract_year_month(timestamp)\n"
        },
        {
            "id": "chunk_6_mapper_3",
            "code": "        if period == self.current_year_month():\n            yield (period, category), amount\n"
        },
        {
            "id": "chunk_7_reducer_1",
            "code": "    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n"
        },
        {
            "id": "chunk_7_reducer_2",
            "code": "        total = sum(values)\n        self.handle_budget_notifications(key, total)\n"
        },
        {
            "id": "chunk_7_reducer_3",
            "code": "        yield key, sum(values)\n"
        },
        {
            "id": "chunk_8_steps_1",
            "code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n"
        },
        {
            "id": "chunk_8_steps_2",
            "code": "        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]\n"
        },
        {
            "id": "chunk_9_GlobalBlock_1",
            "code": "if __name__ == '__main__':\n    SpendingByCategory.run()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_SpendingByCategory_1",
            "to": "chunk_1_SpendingByCategory_2"
        },
        {
            "from": "chunk_1_SpendingByCategory_6",
            "to": "chunk_1_SpendingByCategory_7"
        },
        {
            "from": "chunk_1_SpendingByCategory_8",
            "to": "chunk_1_SpendingByCategory_9"
        },
        {
            "from": "chunk_4_extract_year_month_1",
            "to": "chunk_4_extract_year_month_2"
        },
        {
            "from": "chunk_5_handle_budget_notifications_1",
            "to": "chunk_5_handle_budget_notifications_2"
        },
        {
            "from": "chunk_6_mapper_1",
            "to": "chunk_6_mapper_2"
        },
        {
            "from": "chunk_6_mapper_2",
            "to": "chunk_6_mapper_3"
        },
        {
            "from": "chunk_7_reducer_1",
            "to": "chunk_7_reducer_2"
        },
        {
            "from": "chunk_7_reducer_2",
            "to": "chunk_7_reducer_3"
        },
        {
            "from": "chunk_8_steps_1",
            "to": "chunk_8_steps_2"
        }
    ]
}