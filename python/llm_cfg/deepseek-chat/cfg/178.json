{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import os\nfrom enum import Enum\nfrom typing import Literal\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import replicate\nfrom pydantic import SecretStr\nfrom replicate.helpers import FileOutput\n\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from backend.integrations.providers import ProviderName\n\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_6",
            "code": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n"
        },
        {
            "id": "chunk_0_GlobalBlock_7",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_ReplicateFluxModelName_1",
            "code": "class ReplicateFluxModelName(str, Enum):\n    FLUX_SCHNELL = (\"Flux Schnell\",)\n    FLUX_PRO = (\"Flux Pro\",)\n    FLUX_PRO1_1 = (\"Flux Pro 1.1\",)\n\n"
        },
        {
            "id": "chunk_1_ReplicateFluxModelName_2",
            "code": "    @property\n    def api_name(self):\n        api_names = {\n            ReplicateFluxModelName.FLUX_SCHNELL: \"black-forest-labs/flux-schnell\",\n            ReplicateFluxModelName.FLUX_PRO: \"black-forest-labs/flux-pro\",\n            ReplicateFluxModelName.FLUX_PRO1_1: \"black-forest-labs/flux-1.1-pro\",\n        }\n        return api_names[self]\n"
        },
        {
            "id": "chunk_2_ImageType_1",
            "code": "class ImageType(str, Enum):\n    WEBP = \"webp\"\n    JPG = \"jpg\"\n    PNG = \"png\"\n"
        },
        {
            "id": "chunk_3_ReplicateFluxAdvancedModelBlock_1",
            "code": "class ReplicateFluxAdvancedModelBlock(Block):\n"
        },
        {
            "id": "chunk_3_ReplicateFluxAdvancedModelBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Replicate integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A futuristic cityscape at sunset'\",\n            title=\"Prompt\",\n        )\n        replicate_model_name: ReplicateFluxModelName = SchemaField(\n            description=\"The name of the Image Generation Model, i.e Flux Schnell\",\n            default=ReplicateFluxModelName.FLUX_SCHNELL,\n            title=\"Image Generation Model\",\n            advanced=False,\n        )\n        seed: int | None = SchemaField(\n            description=\"Random seed. Set for reproducible generation\",\n            default=None,\n            title=\"Seed\",\n        )\n        steps: int = SchemaField(\n            description=\"Number of diffusion steps\",\n            default=25,\n            title=\"Steps\",\n        )\n        guidance: float = SchemaField(\n            description=(\n                \"Controls the balance between adherence to the text prompt and image quality/diversity. \"\n                \"Higher values make the output more closely match the prompt but may reduce overall image quality.\"\n            ),\n            default=3,\n            title=\"Guidance\",\n        )\n        interval: float = SchemaField(\n            description=(\n                \"Interval is a setting that increases the variance in possible outputs. \"\n                \"Setting this value low will ensure strong prompt following with more consistent outputs.\"\n            ),\n            default=2,\n            title=\"Interval\",\n        )\n        aspect_ratio: str = SchemaField(\n            description=\"Aspect ratio for the generated image\",\n            default=\"1:1\",\n            title=\"Aspect Ratio\",\n            placeholder=\"Choose from: 1:1, 16:9, 2:3, 3:2, 4:5, 5:4, 9:16\",\n        )\n        output_format: ImageType = SchemaField(\n            description=\"File format of the output image\",\n            default=ImageType.WEBP,\n            title=\"Output Format\",\n        )\n        output_quality: int = SchemaField(\n            description=(\n                \"Quality when saving the output images, from 0 to 100. \"\n                \"Not relevant for .png outputs\"\n            ),\n            default=80,\n            title=\"Output Quality\",\n        )\n        safety_tolerance: int = SchemaField(\n            description=\"Safety tolerance, 1 is most strict and 5 is most permissive\",\n            default=2,\n            title=\"Safety Tolerance\",\n        )\n"
        },
        {
            "id": "chunk_3_ReplicateFluxAdvancedModelBlock_3",
            "code": "    class Output(BlockSchema):\n        result: str = SchemaField(description=\"Generated output\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")\n"
        },
        {
            "id": "chunk_3_ReplicateFluxAdvancedModelBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"90f8c45e-e983-4644-aa0b-b4ebe2f531bc\",\n            description=\"This block runs Flux models on Replicate with advanced settings.\",\n            categories={BlockCategory.AI},\n            input_schema=ReplicateFluxAdvancedModelBlock.Input,\n            output_schema=ReplicateFluxAdvancedModelBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"replicate_model_name\": ReplicateFluxModelName.FLUX_SCHNELL,\n                \"prompt\": \"A beautiful landscape painting of a serene lake at sunrise\",\n                \"seed\": None,\n                \"steps\": 25,\n                \"guidance\": 3.0,\n                \"interval\": 2.0,\n                \"aspect_ratio\": \"1:1\",\n                \"output_format\": ImageType.PNG,\n                \"output_quality\": 80,\n                \"safety_tolerance\": 2,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://replicate.com/output/generated-image-url.jpg\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, model_name, prompt, seed, steps, guidance, interval, aspect_ratio, output_format, output_quality, safety_tolerance: \"https://replicate.com/output/generated-image-url.jpg\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n"
        },
        {
            "id": "chunk_3_ReplicateFluxAdvancedModelBlock_5",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_3_ReplicateFluxAdvancedModelBlock_6",
            "code": "        # If the seed is not provided, generate a random seed\n        seed = input_data.seed\n        if seed is None:\n            seed = int.from_bytes(os.urandom(4), \"big\")\n"
        },
        {
            "id": "chunk_3_ReplicateFluxAdvancedModelBlock_7",
            "code": "        # Run the model using the provided inputs\n        result = self.run_model(\n            api_key=credentials.api_key,\n            model_name=input_data.replicate_model_name.api_name,\n            prompt=input_data.prompt,\n            seed=seed,\n            steps=input_data.steps,\n            guidance=input_data.guidance,\n            interval=input_data.interval,\n            aspect_ratio=input_data.aspect_ratio,\n            output_format=input_data.output_format,\n            output_quality=input_data.output_quality,\n            safety_tolerance=input_data.safety_tolerance,\n        )\n"
        },
        {
            "id": "chunk_3_ReplicateFluxAdvancedModelBlock_8",
            "code": "        yield \"result\", result\n"
        },
        {
            "id": "chunk_3_ReplicateFluxAdvancedModelBlock_9",
            "code": "    def run_model(\n        self,\n        api_key: SecretStr,\n        model_name,\n        prompt,\n        seed,\n        steps,\n        guidance,\n        interval,\n        aspect_ratio,\n        output_format,\n        output_quality,\n        safety_tolerance,\n    ):\n"
        },
        {
            "id": "chunk_3_ReplicateFluxAdvancedModelBlock_10",
            "code": "        # Initialize Replicate client with the API key\n        client = replicate.Client(api_token=api_key.get_secret_value())\n\n"
        },
        {
            "id": "chunk_3_ReplicateFluxAdvancedModelBlock_11",
            "code": "        # Run the model with additional parameters\n        output: FileOutput | list[FileOutput] = client.run(  # type: ignore This is because they changed the return type, and didn't update the type hint! It should be overloaded depending on the value of `use_file_output` to `FileOutput | list[FileOutput]` but it's `Any | Iterator[Any]`\n            f\"{model_name}\",\n            input={\n                \"prompt\": prompt,\n                \"seed\": seed,\n                \"steps\": steps,\n                \"guidance\": guidance,\n                \"interval\": interval,\n                \"aspect_ratio\": aspect_ratio,\n                \"output_format\": output_format,\n                \"output_quality\": output_quality,\n                \"safety_tolerance\": safety_tolerance,\n            },\n            wait=False,  # don't arbitrarily return data:octect/stream or sometimes url depending on the model???? what is this api\n        )\n"
        },
        {
            "id": "chunk_3_ReplicateFluxAdvancedModelBlock_12",
            "code": "        # Check if output is a list or a string and extract accordingly; otherwise, assign a default message\n        if isinstance(output, list) and len(output) > 0:\n            if isinstance(output[0], FileOutput):\n                result_url = output[0].url  # If output is a list, get the first element\n            else:\n                result_url = output[\n                    0\n                ]  # If output is a list and not a FileOutput, get the first element. Should never happen, but just in case.\n        elif isinstance(output, FileOutput):\n            result_url = output.url  # If output is a FileOutput, use the url\n        elif isinstance(output, str):\n            result_url = output  # If output is a string (for some reason due to their janky type hinting), use it directly\n        else:\n            result_url = (\n                \"No output received\"  # Fallback message if output is not as expected\n            )\n"
        },
        {
            "id": "chunk_3_ReplicateFluxAdvancedModelBlock_13",
            "code": "        return result_url\n"
        },
        {
            "id": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]\n"
        },
        {
            "id": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_2",
            "code": "        ] = CredentialsField(\n            description=\"The Replicate integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n"
        },
        {
            "id": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_3",
            "code": "        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A futuristic cityscape at sunset'\",\n            title=\"Prompt\",\n        )\n"
        },
        {
            "id": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_4",
            "code": "        replicate_model_name: ReplicateFluxModelName = SchemaField(\n            description=\"The name of the Image Generation Model, i.e Flux Schnell\",\n            default=ReplicateFluxModelName.FLUX_SCHNELL,\n            title=\"Image Generation Model\",\n            advanced=False,\n        )\n"
        },
        {
            "id": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_5",
            "code": "        seed: int | None = SchemaField(\n            description=\"Random seed. Set for reproducible generation\",\n            default=None,\n            title=\"Seed\",\n        )\n"
        },
        {
            "id": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_6",
            "code": "        steps: int = SchemaField(\n            description=\"Number of diffusion steps\",\n            default=25,\n            title=\"Steps\",\n        )\n"
        },
        {
            "id": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_7",
            "code": "        guidance: float = SchemaField(\n            description=(\n                \"Controls the balance between adherence to the text prompt and image quality/diversity. \"\n                \"Higher values make the output more closely match the prompt but may reduce overall image quality.\"\n            ),\n            default=3,\n            title=\"Guidance\",\n        )\n"
        },
        {
            "id": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_8",
            "code": "        interval: float = SchemaField(\n            description=(\n                \"Interval is a setting that increases the variance in possible outputs. \"\n                \"Setting this value low will ensure strong prompt following with more consistent outputs.\"\n            ),\n            default=2,\n            title=\"Interval\",\n        )\n"
        },
        {
            "id": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_9",
            "code": "        aspect_ratio: str = SchemaField(\n            description=\"Aspect ratio for the generated image\",\n            default=\"1:1\",\n            title=\"Aspect Ratio\",\n            placeholder=\"Choose from: 1:1, 16:9, 2:3, 3:2, 4:5, 5:4, 9:16\",\n        )\n"
        },
        {
            "id": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_10",
            "code": "        output_format: ImageType = SchemaField(\n            description=\"File format of the output image\",\n            default=ImageType.WEBP,\n            title=\"Output Format\",\n        )\n"
        },
        {
            "id": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_11",
            "code": "        output_quality: int = SchemaField(\n            description=(\n                \"Quality when saving the output images, from 0 to 100. \"\n                \"Not relevant for .png outputs\"\n            ),\n            default=80,\n            title=\"Output Quality\",\n        )\n"
        },
        {
            "id": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_12",
            "code": "        safety_tolerance: int = SchemaField(\n            description=\"Safety tolerance, 1 is most strict and 5 is most permissive\",\n            default=2,\n            title=\"Safety Tolerance\",\n        )\n"
        },
        {
            "id": "chunk_5_ReplicateFluxAdvancedModelBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        result: str = SchemaField(description=\"Generated output\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")\n"
        },
        {
            "id": "chunk_6_ReplicateFluxAdvancedModelBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"90f8c45e-e983-4644-aa0b-b4ebe2f531bc\",\n            description=\"This block runs Flux models on Replicate with advanced settings.\",\n            categories={BlockCategory.AI},\n            input_schema=ReplicateFluxAdvancedModelBlock.Input,\n            output_schema=ReplicateFluxAdvancedModelBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"replicate_model_name\": ReplicateFluxModelName.FLUX_SCHNELL,\n                \"prompt\": \"A beautiful landscape painting of a serene lake at sunrise\",\n                \"seed\": None,\n                \"steps\": 25,\n                \"guidance\": 3.0,\n                \"interval\": 2.0,\n                \"aspect_ratio\": \"1:1\",\n                \"output_format\": ImageType.PNG,\n                \"output_quality\": 80,\n                \"safety_tolerance\": 2,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://replicate.com/output/generated-image-url.jpg\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, model_name, prompt, seed, steps, guidance, interval, aspect_ratio, output_format, output_quality, safety_tolerance: \"https://replicate.com/output/generated-image-url.jpg\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n"
        },
        {
            "id": "chunk_7_ReplicateFluxAdvancedModelBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_7_ReplicateFluxAdvancedModelBlock.run_2",
            "code": "        # If the seed is not provided, generate a random seed\n        seed = input_data.seed\n"
        },
        {
            "id": "chunk_7_ReplicateFluxAdvancedModelBlock.run_3",
            "code": "        if seed is None:\n            seed = int.from_bytes(os.urandom(4), \"big\")\n"
        },
        {
            "id": "chunk_7_ReplicateFluxAdvancedModelBlock.run_4",
            "code": "        # Run the model using the provided inputs\n        result = self.run_model(\n            api_key=credentials.api_key,\n            model_name=input_data.replicate_model_name.api_name,\n            prompt=input_data.prompt,\n            seed=seed,\n            steps=input_data.steps,\n            guidance=input_data.guidance,\n            interval=input_data.interval,\n            aspect_ratio=input_data.aspect_ratio,\n            output_format=input_data.output_format,\n            output_quality=input_data.output_quality,\n            safety_tolerance=input_data.safety_tolerance,\n        )\n"
        },
        {
            "id": "chunk_7_ReplicateFluxAdvancedModelBlock.run_5",
            "code": "        yield \"result\", result\n"
        },
        {
            "id": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_1",
            "code": "    def run_model(\n        self,\n        api_key: SecretStr,\n        model_name,\n        prompt,\n        seed,\n        steps,\n        guidance,\n        interval,\n        aspect_ratio,\n        output_format,\n        output_quality,\n        safety_tolerance,\n    ):\n"
        },
        {
            "id": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_2",
            "code": "        # Initialize Replicate client with the API key\n        client = replicate.Client(api_token=api_key.get_secret_value())\n"
        },
        {
            "id": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_3",
            "code": "        # Run the model with additional parameters\n        output: FileOutput | list[FileOutput] = client.run(  # type: ignore This is because they changed the return type, and didn't update the type hint! It should be overloaded depending on the value of `use_file_output` to `FileOutput | list[FileOutput]` but it's `Any | Iterator[Any]`\n            f\"{model_name}\",\n            input={\n                \"prompt\": prompt,\n                \"seed\": seed,\n                \"steps\": steps,\n                \"guidance\": guidance,\n                \"interval\": interval,\n                \"aspect_ratio\": aspect_ratio,\n                \"output_format\": output_format,\n                \"output_quality\": output_quality,\n                \"safety_tolerance\": safety_tolerance,\n            },\n            wait=False,  # don't arbitrarily return data:octect/stream or sometimes url depending on the model???? what is this api\n        )\n"
        },
        {
            "id": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_4",
            "code": "        # Check if output is a list or a string and extract accordingly; otherwise, assign a default message\n        if isinstance(output, list) and len(output) > 0:\n            if isinstance(output[0], FileOutput):\n                result_url = output[0].url  # If output is a list, get the first element\n            else:\n                result_url = output[\n                    0\n                ]  # If output is a list and not a FileOutput, get the first element. Should never happen, but just in case.\n"
        },
        {
            "id": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_5",
            "code": "        elif isinstance(output, FileOutput):\n            result_url = output.url  # If output is a FileOutput, use the url\n"
        },
        {
            "id": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_6",
            "code": "        elif isinstance(output, str):\n            result_url = output  # If output is a string (for some reason due to their janky type hinting), use it directly\n"
        },
        {
            "id": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_7",
            "code": "        else:\n            result_url = (\n                \"No output received\"  # Fallback message if output is not as expected\n            )\n"
        },
        {
            "id": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_8",
            "code": "        return result_url\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_0_GlobalBlock_5",
            "to": "chunk_0_GlobalBlock_6"
        },
        {
            "from": "chunk_0_GlobalBlock_6",
            "to": "chunk_0_GlobalBlock_7"
        },
        {
            "from": "chunk_3_ReplicateFluxAdvancedModelBlock_1",
            "to": "chunk_3_ReplicateFluxAdvancedModelBlock_2"
        },
        {
            "from": "chunk_3_ReplicateFluxAdvancedModelBlock_2",
            "to": "chunk_3_ReplicateFluxAdvancedModelBlock_3"
        },
        {
            "from": "chunk_3_ReplicateFluxAdvancedModelBlock_3",
            "to": "chunk_3_ReplicateFluxAdvancedModelBlock_4"
        },
        {
            "from": "chunk_3_ReplicateFluxAdvancedModelBlock_4",
            "to": "chunk_3_ReplicateFluxAdvancedModelBlock_5"
        },
        {
            "from": "chunk_3_ReplicateFluxAdvancedModelBlock_5",
            "to": "chunk_3_ReplicateFluxAdvancedModelBlock_6"
        },
        {
            "from": "chunk_3_ReplicateFluxAdvancedModelBlock_6",
            "to": "chunk_3_ReplicateFluxAdvancedModelBlock_7"
        },
        {
            "from": "chunk_3_ReplicateFluxAdvancedModelBlock_7",
            "to": "chunk_3_ReplicateFluxAdvancedModelBlock_8"
        },
        {
            "from": "chunk_3_ReplicateFluxAdvancedModelBlock_9",
            "to": "chunk_3_ReplicateFluxAdvancedModelBlock_10"
        },
        {
            "from": "chunk_3_ReplicateFluxAdvancedModelBlock_10",
            "to": "chunk_3_ReplicateFluxAdvancedModelBlock_11"
        },
        {
            "from": "chunk_3_ReplicateFluxAdvancedModelBlock_11",
            "to": "chunk_3_ReplicateFluxAdvancedModelBlock_12"
        },
        {
            "from": "chunk_3_ReplicateFluxAdvancedModelBlock_12",
            "to": "chunk_3_ReplicateFluxAdvancedModelBlock_13"
        },
        {
            "from": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_1",
            "to": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_2"
        },
        {
            "from": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_2",
            "to": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_3"
        },
        {
            "from": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_3",
            "to": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_4"
        },
        {
            "from": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_4",
            "to": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_5"
        },
        {
            "from": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_5",
            "to": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_6"
        },
        {
            "from": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_6",
            "to": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_7"
        },
        {
            "from": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_7",
            "to": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_8"
        },
        {
            "from": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_8",
            "to": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_9"
        },
        {
            "from": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_9",
            "to": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_10"
        },
        {
            "from": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_10",
            "to": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_11"
        },
        {
            "from": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_11",
            "to": "chunk_4_ReplicateFluxAdvancedModelBlock.Input_12"
        },
        {
            "from": "chunk_7_ReplicateFluxAdvancedModelBlock.run_1",
            "to": "chunk_7_ReplicateFluxAdvancedModelBlock.run_2"
        },
        {
            "from": "chunk_7_ReplicateFluxAdvancedModelBlock.run_2",
            "to": "chunk_7_ReplicateFluxAdvancedModelBlock.run_3"
        },
        {
            "from": "chunk_7_ReplicateFluxAdvancedModelBlock.run_2",
            "to": "chunk_7_ReplicateFluxAdvancedModelBlock.run_4"
        },
        {
            "from": "chunk_7_ReplicateFluxAdvancedModelBlock.run_3",
            "to": "chunk_7_ReplicateFluxAdvancedModelBlock.run_4"
        },
        {
            "from": "chunk_7_ReplicateFluxAdvancedModelBlock.run_4",
            "to": "chunk_7_ReplicateFluxAdvancedModelBlock.run_5"
        },
        {
            "from": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_1",
            "to": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_2"
        },
        {
            "from": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_2",
            "to": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_3"
        },
        {
            "from": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_3",
            "to": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_4"
        },
        {
            "from": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_4",
            "to": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_5"
        },
        {
            "from": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_4",
            "to": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_6"
        },
        {
            "from": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_4",
            "to": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_7"
        },
        {
            "from": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_5",
            "to": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_8"
        },
        {
            "from": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_6",
            "to": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_8"
        },
        {
            "from": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_7",
            "to": "chunk_8_ReplicateFluxAdvancedModelBlock.run_model_8"
        }
    ]
}