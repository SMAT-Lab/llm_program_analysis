{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import datetime\nimport typing\nfrom enum import Enum\nfrom typing import Generic, Literal, TypeVar, Union\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import prisma.enums\nimport pydantic\n"
        },
        {
            "id": "chunk_1_InstallationLocation_1",
            "code": "class InstallationLocation(str, Enum):\n    LOCAL = \"local\"\n    CLOUD = \"cloud\"\n"
        },
        {
            "id": "chunk_2_AgentInstalledFromMarketplaceEventData_1",
            "code": "class AgentInstalledFromMarketplaceEventData(pydantic.BaseModel):\n    marketplace_agent_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation\n"
        },
        {
            "id": "chunk_3_AgentInstalledFromTemplateEventData_1",
            "code": "class AgentInstalledFromTemplateEventData(pydantic.BaseModel):\n    template_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation\n"
        },
        {
            "id": "chunk_4_AgentInstalledFromMarketplaceEvent_1",
            "code": "class AgentInstalledFromMarketplaceEvent(pydantic.BaseModel):\n    event_name: Literal[\"agent_installed_from_marketplace\"]\n    event_data: AgentInstalledFromMarketplaceEventData\n"
        },
        {
            "id": "chunk_5_AgentInstalledFromTemplateEvent_1",
            "code": "class AgentInstalledFromTemplateEvent(pydantic.BaseModel):\n    event_name: Literal[\"agent_installed_from_template\"]\n    event_data: AgentInstalledFromTemplateEventData\n"
        },
        {
            "id": "chunk_6_GlobalBlock_1",
            "code": "AnalyticsEvent = Union[\n    AgentInstalledFromMarketplaceEvent, AgentInstalledFromTemplateEvent\n]\n"
        },
        {
            "id": "chunk_7_AnalyticsRequest_1",
            "code": "class AnalyticsRequest(pydantic.BaseModel):\n    event: AnalyticsEvent\n"
        },
        {
            "id": "chunk_8_AddAgentRequest_1",
            "code": "class AddAgentRequest(pydantic.BaseModel):\n    graph: dict[str, typing.Any]\n    author: str\n    keywords: list[str]\n    categories: list[str]\n"
        },
        {
            "id": "chunk_9_SubmissionReviewRequest_1",
            "code": "class SubmissionReviewRequest(pydantic.BaseModel):\n    agent_id: str\n    version: int\n    status: prisma.enums.SubmissionStatus\n    comments: str | None\n"
        },
        {
            "id": "chunk_10_AgentResponse_1",
            "code": "class AgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response from an agent.\n\n    Attributes:\n        id (str): The ID of the agent.\n        name (str, optional): The name of the agent.\n        description (str, optional): The description of the agent.\n        author (str, optional): The author of the agent.\n        keywords (list[str]): The keywords associated with the agent.\n        categories (list[str]): The categories the agent belongs to.\n        version (int): The version of the agent.\n        createdAt (str): The creation date of the agent.\n        updatedAt (str): The last update date of the agent.\n    \"\"\"\n"
        },
        {
            "id": "chunk_10_AgentResponse_2",
            "code": "    id: str\n    name: typing.Optional[str]\n    description: typing.Optional[str]\n    author: typing.Optional[str]\n    keywords: list[str]\n    categories: list[str]\n    version: int\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    submissionStatus: str\n    views: int = 0\n    downloads: int = 0\n"
        },
        {
            "id": "chunk_11_AgentDetailResponse_1",
            "code": "class AgentDetailResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for an agent detail.\n\n    Attributes:\n        id (str): The ID of the agent.\n        name (Optional[str]): The name of the agent.\n        description (Optional[str]): The description of the agent.\n        author (Optional[str]): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories the agent belongs to.\n        version (int): The version of the agent.\n        createdAt (str): The creation date of the agent.\n        updatedAt (str): The last update date of the agent.\n        graph (Dict[str, Any]): The graph data of the agent.\n    \"\"\"\n"
        },
        {
            "id": "chunk_11_AgentDetailResponse_2",
            "code": "    id: str\n    name: typing.Optional[str]\n    description: typing.Optional[str]\n    author: typing.Optional[str]\n    keywords: list[str]\n    categories: list[str]\n    version: int\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    graph: dict[str, typing.Any]\n"
        },
        {
            "id": "chunk_12_FeaturedAgentResponse_1",
            "code": "class FeaturedAgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for an agent detail.\n    \"\"\"\n\n    agentId: str\n    featuredCategories: list[str]\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    isActive: bool\n\n"
        },
        {
            "id": "chunk_13_CategoriesResponse_1",
            "code": "class CategoriesResponse(pydantic.BaseModel):\n"
        },
        {
            "id": "chunk_13_CategoriesResponse_2",
            "code": "    \"\"\"\n    Represents the response data for a list of categories.\n\n    Attributes:\n        unique_categories (list[str]): The list of unique categories.\n    \"\"\"\n"
        },
        {
            "id": "chunk_13_CategoriesResponse_3",
            "code": "\n"
        },
        {
            "id": "chunk_13_CategoriesResponse_4",
            "code": "    unique_categories: list[str]\n"
        },
        {
            "id": "chunk_13_CategoriesResponse_5",
            "code": "\n"
        },
        {
            "id": "chunk_14_GlobalBlock_1",
            "code": "T = TypeVar(\"T\")\n"
        },
        {
            "id": "chunk_15_ListResponse_1",
            "code": "class ListResponse(pydantic.BaseModel, Generic[T]):\n    \"\"\"\n    Represents a list response.\n\n    Attributes:\n        items (list[T]): The list of items.\n        total_count (int): The total count of items.\n        page (int): The current page number.\n        page_size (int): The number of items per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n"
        },
        {
            "id": "chunk_15_ListResponse_2",
            "code": "    items: list[T]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_10_AgentResponse_1",
            "to": "chunk_10_AgentResponse_2"
        },
        {
            "from": "chunk_11_AgentDetailResponse_1",
            "to": "chunk_11_AgentDetailResponse_2"
        },
        {
            "from": "chunk_13_CategoriesResponse_1",
            "to": "chunk_13_CategoriesResponse_2"
        },
        {
            "from": "chunk_13_CategoriesResponse_2",
            "to": "chunk_13_CategoriesResponse_3"
        },
        {
            "from": "chunk_13_CategoriesResponse_3",
            "to": "chunk_13_CategoriesResponse_4"
        },
        {
            "from": "chunk_13_CategoriesResponse_4",
            "to": "chunk_13_CategoriesResponse_5"
        },
        {
            "from": "chunk_15_ListResponse_1",
            "to": "chunk_15_ListResponse_2"
        }
    ]
}