{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "# -*- coding: utf-8 -*-\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from mrjob.job import MRJob\n"
        },
        {
            "id": "chunk_1_SalesRanker_1",
            "code": "class SalesRanker(MRJob):\n\n"
        },
        {
            "id": "chunk_1_SalesRanker_2",
            "code": "    def within_past_week(self, timestamp):\n        \"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n        ...\n\n"
        },
        {
            "id": "chunk_1_SalesRanker_3",
            "code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n"
        },
        {
            "id": "chunk_1_SalesRanker_4",
            "code": "        timestamp, product_id, category, quantity = line.split('\\t')\n        if self.within_past_week(timestamp):\n            yield (category, product_id), quantity\n"
        },
        {
            "id": "chunk_1_SalesRanker_5",
            "code": "    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n"
        },
        {
            "id": "chunk_1_SalesRanker_6",
            "code": "        yield key, sum(values)\n"
        },
        {
            "id": "chunk_1_SalesRanker_7",
            "code": "    def mapper_sort(self, key, value):\n        \"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\n"
        },
        {
            "id": "chunk_1_SalesRanker_8",
            "code": "        category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id\n"
        },
        {
            "id": "chunk_1_SalesRanker_9",
            "code": "    def reducer_identity(self, key, value):\n        yield key, value\n"
        },
        {
            "id": "chunk_1_SalesRanker_10",
            "code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]\n"
        },
        {
            "id": "chunk_2_within_past_week_1",
            "code": "    def within_past_week(self, timestamp):\n        \"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n"
        },
        {
            "id": "chunk_2_within_past_week_2",
            "code": "        ...\n"
        },
        {
            "id": "chunk_3_mapper_1",
            "code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n"
        },
        {
            "id": "chunk_3_mapper_2",
            "code": "        timestamp, product_id, category, quantity = line.split('\\t')\n"
        },
        {
            "id": "chunk_3_mapper_3",
            "code": "        if self.within_past_week(timestamp):\n            yield (category, product_id), quantity\n"
        },
        {
            "id": "chunk_4_reducer_1",
            "code": "    def reducer(self, key, values):\n"
        },
        {
            "id": "chunk_4_reducer_2",
            "code": "        \"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n"
        },
        {
            "id": "chunk_4_reducer_3",
            "code": "        yield key, sum(values)\n"
        },
        {
            "id": "chunk_5_mapper_sort_1",
            "code": "    def mapper_sort(self, key, value):\n        \"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\n"
        },
        {
            "id": "chunk_5_mapper_sort_2",
            "code": "        category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id\n"
        },
        {
            "id": "chunk_6_reducer_identity_1",
            "code": "    def reducer_identity(self, key, value):\n        yield key, value\n"
        },
        {
            "id": "chunk_7_steps_1",
            "code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n"
        },
        {
            "id": "chunk_7_steps_2",
            "code": "        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]\n"
        },
        {
            "id": "chunk_8_GlobalBlock_1",
            "code": "if __name__ == '__main__':\n    SalesRanker.run()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_SalesRanker_1",
            "to": "chunk_1_SalesRanker_2"
        },
        {
            "from": "chunk_1_SalesRanker_1",
            "to": "chunk_1_SalesRanker_3"
        },
        {
            "from": "chunk_1_SalesRanker_1",
            "to": "chunk_1_SalesRanker_5"
        },
        {
            "from": "chunk_1_SalesRanker_1",
            "to": "chunk_1_SalesRanker_7"
        },
        {
            "from": "chunk_1_SalesRanker_1",
            "to": "chunk_1_SalesRanker_9"
        },
        {
            "from": "chunk_1_SalesRanker_1",
            "to": "chunk_1_SalesRanker_10"
        },
        {
            "from": "chunk_1_SalesRanker_3",
            "to": "chunk_1_SalesRanker_4"
        },
        {
            "from": "chunk_1_SalesRanker_5",
            "to": "chunk_1_SalesRanker_6"
        },
        {
            "from": "chunk_1_SalesRanker_7",
            "to": "chunk_1_SalesRanker_8"
        },
        {
            "from": "chunk_2_within_past_week_1",
            "to": "chunk_2_within_past_week_2"
        },
        {
            "from": "chunk_3_mapper_1",
            "to": "chunk_3_mapper_2"
        },
        {
            "from": "chunk_3_mapper_2",
            "to": "chunk_3_mapper_3"
        },
        {
            "from": "chunk_4_reducer_1",
            "to": "chunk_4_reducer_2"
        },
        {
            "from": "chunk_4_reducer_2",
            "to": "chunk_4_reducer_3"
        },
        {
            "from": "chunk_5_mapper_sort_1",
            "to": "chunk_5_mapper_sort_2"
        },
        {
            "from": "chunk_7_steps_1",
            "to": "chunk_7_steps_2"
        }
    ]
}