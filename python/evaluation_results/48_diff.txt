--- ground_truth
+++ llm_generated
@@ -27,34 +27,37 @@
         >>> backtrack(0, 4)
         False
         """
+
         if pattern_index == len(pattern) and str_index == len(input_string):
             return True
-        if pattern_index == len(pattern) or str_index == len(input_string):
+if pattern_index == len(pattern) or str_index == len(input_string):
             return False
-        char = pattern[pattern_index]
+char = pattern[pattern_index]
         if char in pattern_map:
-            mapped_str = pattern_map[char]
+mapped_str = pattern_map[char]
             if input_string.startswith(mapped_str, str_index):
                 return backtrack(pattern_index + 1, str_index + len(mapped_str))
+
             else:
                 return False
-        for end in range(str_index + 1, len(input_string) + 1):
+for end in range(str_index + 1, len(input_string) + 1):
             substr = input_string[str_index:end]
             if substr in str_map:
                 continue
-            pattern_map[char] = substr
+pattern_map[char] = substr
             str_map[substr] = char
             if backtrack(pattern_index + 1, end):
                 return True
+
             del pattern_map[char]
             del str_map[substr]
-        return False
-    pattern_map: dict[str, str] = {}
+return False
+pattern_map: dict[str, str] = {}
     str_map: dict[str, str] = {}
+
     return backtrack(0, 0)
-'\n    Determine if a given pattern matches a string using backtracking.\n\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n\n    >>> match_word_pattern("aba", "GraphTreesGraph")\n    True\n\n    >>> match_word_pattern("xyx", "PythonRubyPython")\n    True\n\n    >>> match_word_pattern("GG", "PythonJavaPython")\n    False\n    '
 def backtrack(pattern_index: int, str_index: int) -> bool:
-    """
+        """
         >>> backtrack(0, 0)
         True
 
@@ -64,49 +67,33 @@
         >>> backtrack(0, 4)
         False
         """
-    if pattern_index == len(pattern) and str_index == len(input_string):
-        return True
-    if pattern_index == len(pattern) or str_index == len(input_string):
-        return False
-    char = pattern[pattern_index]
-    if char in pattern_map:
-        mapped_str = pattern_map[char]
-        if input_string.startswith(mapped_str, str_index):
-            return backtrack(pattern_index + 1, str_index + len(mapped_str))
-        else:
+
+        if pattern_index == len(pattern) and str_index == len(input_string):
+            return True
+if pattern_index == len(pattern) or str_index == len(input_string):
             return False
-    for end in range(str_index + 1, len(input_string) + 1):
-        substr = input_string[str_index:end]
-        if substr in str_map:
-            continue
-        pattern_map[char] = substr
-        str_map[substr] = char
-        if backtrack(pattern_index + 1, end):
-            return True
-        del pattern_map[char]
-        del str_map[substr]
-    return False
-'\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        '
-pattern_index == len(pattern) and str_index == len(input_string)
-return True
-return False
+char = pattern[pattern_index]
+        if char in pattern_map:
 mapped_str = pattern_map[char]
-input_string.startswith(mapped_str, str_index)
-return backtrack(pattern_index + 1, str_index + len(mapped_str))
-return False
-end
-range(str_index Add 1, len(input_string) Add 1)
-substr = input_string[str_index:end]
-substr In str_map
-return False
+            if input_string.startswith(mapped_str, str_index):
+                return backtrack(pattern_index + 1, str_index + len(mapped_str))
+
+            else:
+                return False
+for end in range(str_index + 1, len(input_string) + 1):
+            substr = input_string[str_index:end]
+            if substr in str_map:
 continue
 pattern_map[char] = substr
-str_map[substr] = char
-backtrack(pattern_index Add 1, end)
-return True
-pattern_map: dict[str, str] = {}
-str_map: dict[str, str] = {}
-return backtrack(0, 0)
-__name__ Eq '__main__'
-import doctest
-doctest.testmod()+            str_map[substr] = char
+
+            if backtrack(pattern_index + 1, end):
+                return True
+del pattern_map[char]
+            del str_map[substr]
+return False
+if __name__ == "__main__":
+
+    import doctest
+
+    doctest.testmod()