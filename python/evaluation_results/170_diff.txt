--- ground_truth
+++ llm_generated
@@ -1,23 +1,22 @@
+# -*- coding: utf-8 -*-
+
 from mrjob.job import MRJob
 class SpendingByCategory(MRJob):
+
 
     def __init__(self, categorizer):
         self.categorizer = categorizer
         ...
-
-    def current_year_month(self):
+def current_year_month(self):
         """Return the current year and month."""
         ...
-
-    def extract_year_month(self, timestamp):
+def extract_year_month(self, timestamp):
         """Return the year and month portions of the timestamp."""
         ...
-
-    def handle_budget_notifications(self, key, total):
+def handle_budget_notifications(self, key, total):
         """Call notification API if nearing or exceeded budget."""
         ...
-
-    def mapper(self, _, line):
+def mapper(self, _, line):
         """Parse each log line, extract and transform relevant lines.
 
         Emit key value pairs of the form:
@@ -26,46 +25,42 @@
         (2016-01, shopping), 100
         (2016-01, gas), 50
         """
-        (timestamp, category, amount) = line.split('\t')
-        period = self.extract_year_month(timestamp)
+
+        timestamp, category, amount = line.split('\t')
+        period = self. extract_year_month(timestamp)
         if period == self.current_year_month():
-            yield ((period, category), amount)
-
-    def reducer(self, key, values):
+            yield (period, category), amount
+def reducer(self, key, values):
         """Sum values for each key.
 
         (2016-01, shopping), 125
         (2016-01, gas), 50
         """
+
         total = sum(values)
         self.handle_budget_notifications(key, total)
-        yield (key, sum(values))
+        yield key, sum(values)
+def steps(self):
+        """Run the map and reduce steps."""
+        return [
+            self.mr(mapper=self.mapper,
+                    reducer=self.reducer)
+        ]
+def __init__(self, categorizer):
+        self.categorizer = categorizer
+def current_year_month(self):
+        """Return the current year and month."""
+        ...
+def extract_year_month(self, timestamp):
+        """Return the year and month portions of the timestamp."""
 
-    def steps(self):
-        """Run the map and reduce steps."""
-        return [self.mr(mapper=self.mapper, reducer=self.reducer)]
-def __init__(self, categorizer):
-    self.categorizer = categorizer
-    ...
-self.categorizer = categorizer
-Ellipsis
-def current_year_month(self):
-    """Return the current year and month."""
-    ...
-'Return the current year and month.'
-Ellipsis
-def extract_year_month(self, timestamp):
-    """Return the year and month portions of the timestamp."""
-    ...
-'Return the year and month portions of the timestamp.'
-Ellipsis
+        ...
 def handle_budget_notifications(self, key, total):
-    """Call notification API if nearing or exceeded budget."""
-    ...
-'Call notification API if nearing or exceeded budget.'
-Ellipsis
+        """Call notification API if nearing or exceeded budget."""
+
+        ...
 def mapper(self, _, line):
-    """Parse each log line, extract and transform relevant lines.
+        """Parse each log line, extract and transform relevant lines.
 
         Emit key value pairs of the form:
 
@@ -73,32 +68,29 @@
         (2016-01, shopping), 100
         (2016-01, gas), 50
         """
-    (timestamp, category, amount) = line.split('\t')
-    period = self.extract_year_month(timestamp)
-    if period == self.current_year_month():
-        yield ((period, category), amount)
-'Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        '
-(timestamp, category, amount) = line.split('\t')
-period = self.extract_year_month(timestamp)
-period Eq self.current_year_month()
-__name__ Eq '__main__'
-(yield ((period, category), amount))
-SpendingByCategory.run()
+
+        timestamp, category, amount = line.split('\t')
+        period = self. extract_year_month(timestamp)
+
+        if period == self.current_year_month():
+            yield (period, category), amount
 def reducer(self, key, values):
-    """Sum values for each key.
+        """Sum values for each key.
 
         (2016-01, shopping), 125
         (2016-01, gas), 50
         """
-    total = sum(values)
-    self.handle_budget_notifications(key, total)
-    yield (key, sum(values))
-'Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        '
-total = sum(values)
-self.handle_budget_notifications(key, total)
-(yield (key, sum(values)))
+
+        total = sum(values)
+        self.handle_budget_notifications(key, total)
+
+        yield key, sum(values)
 def steps(self):
-    """Run the map and reduce steps."""
-    return [self.mr(mapper=self.mapper, reducer=self.reducer)]
-'Run the map and reduce steps.'
-return [self.mr(mapper=self.mapper, reducer=self.reducer)]+        """Run the map and reduce steps."""
+
+        return [
+            self.mr(mapper=self.mapper,
+                    reducer=self.reducer)
+        ]
+if __name__ == '__main__':
+    SpendingByCategory.run()