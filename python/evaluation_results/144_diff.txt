--- ground_truth
+++ llm_generated
@@ -1,23 +1,18 @@
 from __future__ import annotations
+
 import json
 import logging
 class JsonFileHandler(logging.FileHandler):
-
-    def format(self, record: logging.LogRecord) -> str:
+def format(self, record: logging.LogRecord) -> str:
         record.json_data = json.loads(record.getMessage())
-        return json.dumps(getattr(record, 'json_data'), ensure_ascii=False, indent=4)
-
-    def emit(self, record: logging.LogRecord) -> None:
-        with open(self.baseFilename, 'w', encoding='utf-8') as f:
+        return json.dumps(getattr(record, "json_data"), ensure_ascii=False, indent=4)
+def emit(self, record: logging.LogRecord) -> None:
+        with open(self.baseFilename, "w", encoding="utf-8") as f:
             f.write(self.format(record))
 def format(self, record: logging.LogRecord) -> str:
-    record.json_data = json.loads(record.getMessage())
-    return json.dumps(getattr(record, 'json_data'), ensure_ascii=False, indent=4)
-record.json_data = json.loads(record.getMessage())
-return json.dumps(getattr(record, 'json_data'), ensure_ascii=False, indent=4)
+        record.json_data = json.loads(record.getMessage())
+        return json.dumps(getattr(record, "json_data"), ensure_ascii=False, indent=4)
 def emit(self, record: logging.LogRecord) -> None:
-    with open(self.baseFilename, 'w', encoding='utf-8') as f:
-        f.write(self.format(record))
-with open(self.baseFilename, 'w', encoding='utf-8') as f:
-    f.write(self.format(record))
-f.write(self.format(record))+
+        with open(self.baseFilename, "w", encoding="utf-8") as f:
+            f.write(self.format(record))