2025-01-08 10:27:27,479 - INFO - Processing sample 177
2025-01-08 10:27:27,486 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 10:27:33,672 - INFO - Successfully split code into 3 top-level declarations
2025-01-08 10:27:33,684 - INFO - Processing chunk #0 (size=143 chars, start_index=0)
2025-01-08 10:27:33,685 - INFO - Processing chunk with 143 chars starting at index 0
2025-01-08 10:27:33,685 - INFO - Starting main AST analysis flow
2025-01-08 10:27:33,685 - INFO - Tokenized code into 24 tokens
2025-01-08 10:27:33,685 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:33,698 - INFO - Processing chunk #1 (size=92 chars, start_index=24)
2025-01-08 10:27:33,705 - INFO - Processing chunk with 92 chars starting at index 24
2025-01-08 10:27:33,705 - INFO - Starting main AST analysis flow
2025-01-08 10:27:33,705 - INFO - Tokenized code into 19 tokens
2025-01-08 10:27:33,705 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:33,706 - INFO - Processing chunk #2 (size=1633 chars, start_index=43)
2025-01-08 10:27:33,706 - INFO - Processing chunk with 1633 chars starting at index 43
2025-01-08 10:27:33,706 - INFO - Starting main AST analysis flow
2025-01-08 10:27:33,707 - INFO - Tokenized code into 303 tokens
2025-01-08 10:27:33,707 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:37,571 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [24, 42], 'children': []}
2025-01-08 10:27:38,017 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:41,147 - INFO - Step 1 result: {'type': 'Program', 'name': 'RedisKeyedMutex', 'range': [43, 345], 'children': [{'type': 'FunctionDeclaration', 'name': '__init__', 'range': [52, 116], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'locked', 'range': [121, 162], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'acquire', 'range': [164, 243], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'release', 'range': [245, 289], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'release_all_locks', 'range': [291, 344], 'children': []}]}
2025-01-08 10:27:41,207 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:41,208 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 23], 'children': [{'type': 'ImportDeclaration', 'name': 'contextmanager', 'range': [0, 4], 'children': []}, {'type': 'ImportDeclaration', 'name': 'Lock', 'range': [5, 9], 'children': []}, {'type': 'ImportDeclaration', 'name': 'TYPE_CHECKING, Any', 'range': [10, 16], 'children': []}, {'type': 'ImportDeclaration', 'name': 'ExpiringDict', 'range': [18, 22], 'children': []}]}
2025-01-08 10:27:41,271 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:50,248 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [24, 42], 'children': [{'type': 'IfStatement', 'name': '', 'range': [24, 27], 'children': [{'type': 'Identifier', 'name': 'TYPE_CHECKING', 'range': [25, 25], 'children': []}]}, {'type': 'ImportStatement', 'name': '', 'range': [28, 32], 'children': [{'type': 'FromImport', 'name': 'redis', 'range': [28, 29], 'children': [{'type': 'Import', 'name': 'Redis', 'range': [30, 31], 'children': []}]}]}, {'type': 'ImportStatement', 'name': '', 'range': [33, 41], 'children': [{'type': 'FromImport', 'name': 'redis.lock', 'range': [33, 36], 'children': [{'type': 'Import', 'name': 'Lock', 'range': [37, 38], 'children': []}, {'type': 'AsAlias', 'name': 'RedisLock', 'range': [39, 40], 'children': []}]}]}]}
2025-01-08 10:27:50,248 - INFO - Starting Step 3: AST simplification
2025-01-08 10:28:07,809 - INFO - Step 2 result: {'nodes': [{'type': 'ImportDeclaration', 'name': 'contextmanager', 'range': [0, 4], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [0, 0], 'children': []}, {'type': 'Module', 'name': 'contextlib', 'range': [1, 1], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [2, 2], 'children': []}, {'type': 'ImportedItem', 'name': 'contextmanager', 'range': [3, 3], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'Lock', 'range': [5, 9], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [5, 5], 'children': []}, {'type': 'Module', 'name': 'threading', 'range': [6, 6], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [7, 7], 'children': []}, {'type': 'ImportedItem', 'name': 'Lock', 'range': [8, 8], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'TYPE_CHECKING, Any', 'range': [10, 16], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [10, 10], 'children': []}, {'type': 'Module', 'name': 'typing', 'range': [11, 11], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [12, 12], 'children': []}, {'type': 'ImportedItem', 'name': 'TYPE_CHECKING', 'range': [13, 13], 'children': []}, {'type': 'ImportedItem', 'name': 'Any', 'range': [15, 15], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'ExpiringDict', 'range': [18, 22], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [18, 18], 'children': []}, {'type': 'Module', 'name': 'expiringdict', 'range': [19, 19], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [20, 20], 'children': []}, {'type': 'ImportedItem', 'name': 'ExpiringDict', 'range': [21, 21], 'children': []}]}]}
2025-01-08 10:28:07,865 - INFO - Starting Step 3: AST simplification
2025-01-08 10:28:08,558 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [24, 42], 'children': [{'type': 'IfStatement', 'name': '', 'range': [24, 27], 'children': [{'type': 'Identifier', 'name': 'TYPE_CHECKING', 'range': [25, 25], 'children': []}]}, {'type': 'ImportStatement', 'name': '', 'range': [28, 32], 'children': [{'type': 'FromImport', 'name': 'redis', 'range': [28, 29], 'children': [{'type': 'Import', 'name': 'Redis', 'range': [30, 31], 'children': []}]}]}, {'type': 'ImportStatement', 'name': '', 'range': [33, 41], 'children': [{'type': 'FromImport', 'name': 'redis.lock', 'range': [33, 36], 'children': [{'type': 'Import', 'name': 'Lock', 'range': [37, 38], 'children': []}, {'type': 'AsAlias', 'name': 'RedisLock', 'range': [39, 40], 'children': []}]}]}]}
2025-01-08 10:28:08,598 - INFO - Starting Step 4: AST normalization
2025-01-08 10:28:21,064 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [24, 42], 'children': [{'type': 'IfStatement', 'name': '', 'range': [24, 27], 'children': [{'type': 'Identifier', 'name': 'TYPE_CHECKING', 'range': [25, 25], 'children': []}]}, {'type': 'ImportStatement', 'name': '', 'range': [28, 32], 'children': [{'type': 'FromImport', 'name': 'redis', 'range': [28, 29], 'children': [{'type': 'Import', 'name': 'Redis', 'range': [30, 31], 'children': []}]}]}, {'type': 'ImportStatement', 'name': '', 'range': [33, 41], 'children': [{'type': 'FromImport', 'name': 'redis.lock', 'range': [33, 36], 'children': [{'type': 'Import', 'name': 'Lock', 'range': [37, 38], 'children': []}, {'type': 'AsAlias', 'name': 'RedisLock', 'range': [39, 40], 'children': []}]}]}]}
2025-01-08 10:28:21,064 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:28:22,993 - INFO - Step 2 result: {'type': 'Program', 'name': 'RedisKeyedMutex', 'range': [43, 345], 'children': [{'type': 'FunctionDeclaration', 'name': '__init__', 'range': [52, 116], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [55, 55], 'children': []}, {'type': 'Parameter', 'name': 'redis', 'range': [57, 57], 'children': []}, {'type': 'Parameter', 'name': 'timeout', 'range': [61, 61], 'children': []}, {'type': 'Assignment', 'name': 'self.redis', 'range': [71, 75], 'children': []}, {'type': 'Assignment', 'name': 'self.timeout', 'range': [77, 81], 'children': []}, {'type': 'Assignment', 'name': 'self.locks', 'range': [83, 94], 'children': []}, {'type': 'Assignment', 'name': 'self.locks_lock', 'range': [109, 113], 'children': []}]}, {'type': 'FunctionDeclaration', 'name': 'locked', 'range': [121, 162], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [124, 124], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [126, 126], 'children': []}, {'type': 'Assignment', 'name': 'lock', 'range': [132, 134], 'children': []}, {'type': 'TryStatement', 'name': 'try', 'range': [141, 162], 'children': [{'type': 'YieldStatement', 'name': 'yield', 'range': [144, 144], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [149, 162], 'children': [{'type': 'MethodCall', 'name': 'lock.locked', 'range': [150, 154], 'children': []}, {'type': 'MethodCall', 'name': 'lock.release', 'range': [157, 161], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'acquire', 'range': [164, 243], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [167, 167], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [169, 169], 'children': []}, {'type': 'WithStatement', 'name': 'with', 'range': [182, 243], 'children': [{'type': 'Assignment', 'name': 'self.locks_lock', 'range': [183, 185], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [188, 243], 'children': [{'type': 'Expression', 'name': 'key not in self.locks', 'range': [189, 195], 'children': []}, {'type': 'Assignment', 'name': 'self.locks[key]', 'range': [197, 204], 'children': []}, {'type': 'MethodCall', 'name': 'self.redis.lock', 'range': [206, 224], 'children': []}, {'type': 'Assignment', 'name': 'lock', 'range': [226, 228], 'children': []}, {'type': 'MethodCall', 'name': 'lock.acquire', 'range': [235, 239], 'children': []}, {'type': 'ReturnStatement', 'name': 'return lock', 'range': [241, 242], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'release', 'range': [245, 289], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [248, 248], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [250, 250], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [256, 289], 'children': [{'type': 'Expression', 'name': 'lock := self.locks.get(key)', 'range': [258, 269], 'children': []}, {'type': 'LogicalExpression', 'name': 'and', 'range': [270, 282], 'children': [{'type': 'MethodCall', 'name': 'lock.locked', 'range': [271, 275], 'children': []}, {'type': 'MethodCall', 'name': 'lock.owned', 'range': [277, 281], 'children': []}]}, {'type': 'MethodCall', 'name': 'lock.release', 'range': [284, 288], 'children': []}]}]}, {'type': 'FunctionDeclaration', 'name': 'release_all_locks', 'range': [291, 344], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [294, 294], 'children': []}, {'type': 'MethodCall', 'name': 'self.locks_lock.acquire', 'range': [302, 311], 'children': []}, {'type': 'ForStatement', 'name': 'for', 'range': [313, 344], 'children': [{'type': 'VariableDeclaration', 'name': 'lock', 'range': [314, 314], 'children': []}, {'type': 'Expression', 'name': 'lock in self.locks.values()', 'range': [315, 323], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [325, 344], 'children': [{'type': 'LogicalExpression', 'name': 'and', 'range': [331, 337], 'children': [{'type': 'MethodCall', 'name': 'lock.locked', 'range': [326, 330], 'children': []}, {'type': 'MethodCall', 'name': 'lock.owned', 'range': [332, 336], 'children': []}]}, {'type': 'MethodCall', 'name': 'lock.release', 'range': [339, 343], 'children': []}]}]}]}]}
2025-01-08 10:28:22,993 - INFO - Starting Step 3: AST simplification
2025-01-08 10:28:28,140 - INFO - Step 3 result: {'nodes': [{'type': 'ImportDeclaration', 'name': 'contextmanager', 'range': [0, 3], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [0, 0], 'children': []}, {'type': 'Module', 'name': 'contextlib', 'range': [1, 1], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [2, 2], 'children': []}, {'type': 'ImportedItem', 'name': 'contextmanager', 'range': [3, 3], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'Lock', 'range': [5, 8], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [5, 5], 'children': []}, {'type': 'Module', 'name': 'threading', 'range': [6, 6], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [7, 7], 'children': []}, {'type': 'ImportedItem', 'name': 'Lock', 'range': [8, 8], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'TYPE_CHECKING, Any', 'range': [10, 15], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [10, 10], 'children': []}, {'type': 'Module', 'name': 'typing', 'range': [11, 11], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [12, 12], 'children': []}, {'type': 'ImportedItem', 'name': 'TYPE_CHECKING', 'range': [13, 13], 'children': []}, {'type': 'ImportedItem', 'name': 'Any', 'range': [15, 15], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'ExpiringDict', 'range': [18, 21], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [18, 18], 'children': []}, {'type': 'Module', 'name': 'expiringdict', 'range': [19, 19], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [20, 20], 'children': []}, {'type': 'ImportedItem', 'name': 'ExpiringDict', 'range': [21, 21], 'children': []}]}]}
2025-01-08 10:28:28,141 - INFO - Starting Step 4: AST normalization
2025-01-08 10:28:29,326 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [24, 42], 'children': [{'type': 'IfStatement', 'name': '', 'range': [24, 27], 'children': [{'type': 'Identifier', 'name': 'TYPE_CHECKING', 'range': [25, 25], 'children': []}]}, {'type': 'ImportStatement', 'name': '', 'range': [28, 32], 'children': [{'type': 'FromImport', 'name': 'redis', 'range': [28, 29], 'children': [{'type': 'Import', 'name': 'Redis', 'range': [30, 31], 'children': []}]}]}, {'type': 'ImportStatement', 'name': '', 'range': [33, 41], 'children': [{'type': 'FromImport', 'name': 'redis.lock', 'range': [33, 36], 'children': [{'type': 'Import', 'name': 'Lock', 'range': [37, 38], 'children': []}, {'type': 'AsAlias', 'name': 'RedisLock', 'range': [39, 40], 'children': []}]}]}]}
2025-01-08 10:28:29,327 - INFO - Completed main AST analysis flow
2025-01-08 10:28:29,328 - INFO - Successfully processed chunk
2025-01-08 10:28:42,798 - INFO - Step 4 result: {'nodes': [{'type': 'ImportDeclaration', 'name': 'contextmanager', 'range': [0, 3], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [0, 0], 'children': []}, {'type': 'Module', 'name': 'contextlib', 'range': [1, 1], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [2, 2], 'children': []}, {'type': 'ImportedItem', 'name': 'contextmanager', 'range': [3, 3], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'Lock', 'range': [5, 8], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [5, 5], 'children': []}, {'type': 'Module', 'name': 'threading', 'range': [6, 6], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [7, 7], 'children': []}, {'type': 'ImportedItem', 'name': 'Lock', 'range': [8, 8], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'TYPE_CHECKING, Any', 'range': [10, 15], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [10, 10], 'children': []}, {'type': 'Module', 'name': 'typing', 'range': [11, 11], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [12, 12], 'children': []}, {'type': 'ImportedItem', 'name': 'TYPE_CHECKING', 'range': [13, 13], 'children': []}, {'type': 'ImportedItem', 'name': 'Any', 'range': [15, 15], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'ExpiringDict', 'range': [18, 21], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [18, 18], 'children': []}, {'type': 'Module', 'name': 'expiringdict', 'range': [19, 19], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [20, 20], 'children': []}, {'type': 'ImportedItem', 'name': 'ExpiringDict', 'range': [21, 21], 'children': []}]}]}
2025-01-08 10:28:42,798 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:28:56,968 - INFO - Step 3 result: {'type': 'Program', 'name': 'RedisKeyedMutex', 'range': [43, 345], 'children': [{'type': 'FunctionDeclaration', 'name': '__init__', 'range': [52, 116], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [55, 55], 'children': []}, {'type': 'Parameter', 'name': 'redis', 'range': [57, 57], 'children': []}, {'type': 'Parameter', 'name': 'timeout', 'range': [61, 61], 'children': []}, {'type': 'Assignment', 'name': 'self.redis', 'range': [71, 75], 'children': []}, {'type': 'Assignment', 'name': 'self.timeout', 'range': [77, 81], 'children': []}, {'type': 'Assignment', 'name': 'self.locks', 'range': [83, 94], 'children': []}, {'type': 'Assignment', 'name': 'self.locks_lock', 'range': [109, 113], 'children': []}]}, {'type': 'FunctionDeclaration', 'name': 'locked', 'range': [121, 162], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [124, 124], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [126, 126], 'children': []}, {'type': 'Assignment', 'name': 'lock', 'range': [132, 134], 'children': []}, {'type': 'TryStatement', 'name': 'try', 'range': [141, 162], 'children': [{'type': 'YieldStatement', 'name': 'yield', 'range': [144, 144], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [149, 162], 'children': [{'type': 'MethodCall', 'name': 'lock.locked', 'range': [150, 154], 'children': []}, {'type': 'MethodCall', 'name': 'lock.release', 'range': [157, 161], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'acquire', 'range': [164, 243], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [167, 167], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [169, 169], 'children': []}, {'type': 'WithStatement', 'name': 'with', 'range': [182, 243], 'children': [{'type': 'Assignment', 'name': 'self.locks_lock', 'range': [183, 185], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [188, 243], 'children': [{'type': 'Expression', 'name': 'key not in self.locks', 'range': [189, 195], 'children': []}, {'type': 'Assignment', 'name': 'self.locks[key]', 'range': [197, 204], 'children': []}, {'type': 'MethodCall', 'name': 'self.redis.lock', 'range': [206, 224], 'children': []}, {'type': 'Assignment', 'name': 'lock', 'range': [226, 228], 'children': []}, {'type': 'MethodCall', 'name': 'lock.acquire', 'range': [235, 239], 'children': []}, {'type': 'ReturnStatement', 'name': 'return lock', 'range': [241, 242], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'release', 'range': [245, 289], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [248, 248], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [250, 250], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [256, 289], 'children': [{'type': 'Expression', 'name': 'lock := self.locks.get(key)', 'range': [258, 269], 'children': []}, {'type': 'LogicalExpression', 'name': 'and', 'range': [270, 282], 'children': [{'type': 'MethodCall', 'name': 'lock.locked', 'range': [271, 275], 'children': []}, {'type': 'MethodCall', 'name': 'lock.owned', 'range': [277, 281], 'children': []}]}, {'type': 'MethodCall', 'name': 'lock.release', 'range': [284, 288], 'children': []}]}]}, {'type': 'FunctionDeclaration', 'name': 'release_all_locks', 'range': [291, 344], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [294, 294], 'children': []}, {'type': 'MethodCall', 'name': 'self.locks_lock.acquire', 'range': [302, 311], 'children': []}, {'type': 'ForStatement', 'name': 'for', 'range': [313, 344], 'children': [{'type': 'VariableDeclaration', 'name': 'lock', 'range': [314, 314], 'children': []}, {'type': 'Expression', 'name': 'lock in self.locks.values()', 'range': [315, 323], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [325, 344], 'children': [{'type': 'LogicalExpression', 'name': 'and', 'range': [331, 337], 'children': [{'type': 'MethodCall', 'name': 'lock.locked', 'range': [326, 330], 'children': []}, {'type': 'MethodCall', 'name': 'lock.owned', 'range': [332, 336], 'children': []}]}, {'type': 'MethodCall', 'name': 'lock.release', 'range': [339, 343], 'children': []}]}]}]}]}
2025-01-08 10:28:56,968 - INFO - Starting Step 4: AST normalization
2025-01-08 10:28:58,275 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainOrSomething', 'range': [0, 21], 'children': [{'type': 'ImportDeclaration', 'name': 'contextmanager', 'range': [0, 3], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [0, 0], 'children': []}, {'type': 'Module', 'name': 'contextlib', 'range': [1, 1], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [2, 2], 'children': []}, {'type': 'ImportedItem', 'name': 'contextmanager', 'range': [3, 3], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'Lock', 'range': [5, 8], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [5, 5], 'children': []}, {'type': 'Module', 'name': 'threading', 'range': [6, 6], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [7, 7], 'children': []}, {'type': 'ImportedItem', 'name': 'Lock', 'range': [8, 8], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'TYPE_CHECKING, Any', 'range': [10, 15], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [10, 10], 'children': []}, {'type': 'Module', 'name': 'typing', 'range': [11, 11], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [12, 12], 'children': []}, {'type': 'ImportedItem', 'name': 'TYPE_CHECKING', 'range': [13, 13], 'children': []}, {'type': 'ImportedItem', 'name': 'Any', 'range': [15, 15], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'ExpiringDict', 'range': [18, 21], 'children': [{'type': 'FromImport', 'name': 'from', 'range': [18, 18], 'children': []}, {'type': 'Module', 'name': 'expiringdict', 'range': [19, 19], 'children': []}, {'type': 'Import', 'name': 'import', 'range': [20, 20], 'children': []}, {'type': 'ImportedItem', 'name': 'ExpiringDict', 'range': [21, 21], 'children': []}]}]}]}
2025-01-08 10:28:58,275 - INFO - Completed main AST analysis flow
2025-01-08 10:28:58,275 - INFO - Successfully processed chunk
2025-01-08 10:29:30,120 - INFO - Step 4 result: {'type': 'Program', 'name': 'RedisKeyedMutex', 'range': [43, 345], 'children': [{'type': 'FunctionDecl', 'name': '__init__', 'range': [52, 116], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [55, 55], 'children': []}, {'type': 'Parameter', 'name': 'redis', 'range': [57, 57], 'children': []}, {'type': 'Parameter', 'name': 'timeout', 'range': [61, 61], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.redis', 'range': [71, 75], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.timeout', 'range': [77, 81], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.locks', 'range': [83, 94], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.locks_lock', 'range': [109, 113], 'children': []}]}, {'type': 'FunctionDecl', 'name': 'locked', 'range': [121, 162], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [124, 124], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [126, 126], 'children': []}, {'type': 'AssignmentExpression', 'name': 'lock', 'range': [132, 134], 'children': []}, {'type': 'TryStatement', 'name': 'try', 'range': [141, 162], 'children': [{'type': 'YieldExpression', 'name': 'yield', 'range': [144, 144], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [149, 162], 'children': [{'type': 'CallExpression', 'name': 'lock.locked', 'range': [150, 154], 'children': []}, {'type': 'CallExpression', 'name': 'lock.release', 'range': [157, 161], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': 'acquire', 'range': [164, 243], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [167, 167], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [169, 169], 'children': []}, {'type': 'WithStatement', 'name': 'with', 'range': [182, 243], 'children': [{'type': 'AssignmentExpression', 'name': 'self.locks_lock', 'range': [183, 185], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [188, 243], 'children': [{'type': 'BinaryExpression', 'name': 'key not in self.locks', 'range': [189, 195], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.locks[key]', 'range': [197, 204], 'children': []}, {'type': 'CallExpression', 'name': 'self.redis.lock', 'range': [206, 224], 'children': []}, {'type': 'AssignmentExpression', 'name': 'lock', 'range': [226, 228], 'children': []}, {'type': 'CallExpression', 'name': 'lock.acquire', 'range': [235, 239], 'children': []}, {'type': 'ReturnStatement', 'name': 'return lock', 'range': [241, 242], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': 'release', 'range': [245, 289], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [248, 248], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [250, 250], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [256, 289], 'children': [{'type': 'AssignmentExpression', 'name': 'lock := self.locks.get(key)', 'range': [258, 269], 'children': []}, {'type': 'LogicalExpression', 'name': 'and', 'range': [270, 282], 'children': [{'type': 'CallExpression', 'name': 'lock.locked', 'range': [271, 275], 'children': []}, {'type': 'CallExpression', 'name': 'lock.owned', 'range': [277, 281], 'children': []}]}, {'type': 'CallExpression', 'name': 'lock.release', 'range': [284, 288], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'release_all_locks', 'range': [291, 344], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [294, 294], 'children': []}, {'type': 'CallExpression', 'name': 'self.locks_lock.acquire', 'range': [302, 311], 'children': []}, {'type': 'ForStatement', 'name': 'for', 'range': [313, 344], 'children': [{'type': 'VariableDeclaration', 'name': 'lock', 'range': [314, 314], 'children': []}, {'type': 'BinaryExpression', 'name': 'lock in self.locks.values()', 'range': [315, 323], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [325, 344], 'children': [{'type': 'LogicalExpression', 'name': 'and', 'range': [331, 337], 'children': [{'type': 'CallExpression', 'name': 'lock.locked', 'range': [326, 330], 'children': []}, {'type': 'CallExpression', 'name': 'lock.owned', 'range': [332, 336], 'children': []}]}, {'type': 'CallExpression', 'name': 'lock.release', 'range': [339, 343], 'children': []}]}]}]}]}
2025-01-08 10:29:30,122 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:30:02,475 - INFO - Step 5 result: {'type': 'Program', 'name': 'RedisKeyedMutex', 'range': [43, 345], 'children': [{'type': 'FunctionDecl', 'name': '__init__', 'range': [52, 116], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [55, 55], 'children': []}, {'type': 'Parameter', 'name': 'redis', 'range': [57, 57], 'children': []}, {'type': 'Parameter', 'name': 'timeout', 'range': [61, 61], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.redis', 'range': [71, 75], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.timeout', 'range': [77, 81], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.locks', 'range': [83, 94], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.locks_lock', 'range': [109, 113], 'children': []}]}, {'type': 'FunctionDecl', 'name': 'locked', 'range': [121, 162], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [124, 124], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [126, 126], 'children': []}, {'type': 'AssignmentExpression', 'name': 'lock', 'range': [132, 134], 'children': []}, {'type': 'TryStatement', 'name': 'try', 'range': [141, 162], 'children': [{'type': 'YieldExpression', 'name': 'yield', 'range': [144, 144], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [149, 162], 'children': [{'type': 'CallExpression', 'name': 'lock.locked', 'range': [150, 154], 'children': []}, {'type': 'CallExpression', 'name': 'lock.release', 'range': [157, 161], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': 'acquire', 'range': [164, 243], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [167, 167], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [169, 169], 'children': []}, {'type': 'WithStatement', 'name': 'with', 'range': [182, 243], 'children': [{'type': 'AssignmentExpression', 'name': 'self.locks_lock', 'range': [183, 185], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [188, 243], 'children': [{'type': 'BinaryExpression', 'name': 'key not in self.locks', 'range': [189, 195], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.locks[key]', 'range': [197, 204], 'children': []}, {'type': 'CallExpression', 'name': 'self.redis.lock', 'range': [206, 224], 'children': []}, {'type': 'AssignmentExpression', 'name': 'lock', 'range': [226, 228], 'children': []}, {'type': 'CallExpression', 'name': 'lock.acquire', 'range': [235, 239], 'children': []}, {'type': 'ReturnStatement', 'name': 'return lock', 'range': [241, 242], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': 'release', 'range': [245, 289], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [248, 248], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [250, 250], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [256, 289], 'children': [{'type': 'AssignmentExpression', 'name': 'lock := self.locks.get(key)', 'range': [258, 269], 'children': []}, {'type': 'LogicalExpression', 'name': 'and', 'range': [270, 282], 'children': [{'type': 'CallExpression', 'name': 'lock.locked', 'range': [271, 275], 'children': []}, {'type': 'CallExpression', 'name': 'lock.owned', 'range': [277, 281], 'children': []}]}, {'type': 'CallExpression', 'name': 'lock.release', 'range': [284, 288], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'release_all_locks', 'range': [291, 344], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [294, 294], 'children': []}, {'type': 'CallExpression', 'name': 'self.locks_lock.acquire', 'range': [302, 311], 'children': []}, {'type': 'ForStatement', 'name': 'for', 'range': [313, 344], 'children': [{'type': 'VariableDeclaration', 'name': 'lock', 'range': [314, 314], 'children': []}, {'type': 'BinaryExpression', 'name': 'lock in self.locks.values()', 'range': [315, 323], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [325, 344], 'children': [{'type': 'LogicalExpression', 'name': 'and', 'range': [331, 337], 'children': [{'type': 'CallExpression', 'name': 'lock.locked', 'range': [326, 330], 'children': []}, {'type': 'CallExpression', 'name': 'lock.owned', 'range': [332, 336], 'children': []}]}, {'type': 'CallExpression', 'name': 'lock.release', 'range': [339, 343], 'children': []}]}]}]}]}
2025-01-08 10:30:02,475 - INFO - Completed main AST analysis flow
2025-01-08 10:30:02,476 - INFO - Successfully processed chunk
2025-01-08 10:30:02,495 - INFO - Starting code generation from AST
2025-01-08 10:30:10,376 - INFO - Successfully generated code from AST
2025-01-08 10:30:10,377 - INFO - Starting static code similarity comparison
2025-01-08 10:30:10,382 - INFO - Static similarity result: {'final_score': 94.13, 'length_similarity': 92.84, 'token_similarity': 94.44, 'structure_similarity': 87.5, 'function_similarity': 100, 'complexity_similarity': 100.0, 'variable_similarity': 100}
