2025-01-08 10:24:36,795 - INFO - Processing sample 167
2025-01-08 10:24:36,796 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 10:24:39,655 - INFO - Successfully split code into 2 top-level declarations
2025-01-08 10:24:39,659 - INFO - Processing chunk #0 (size=178 chars, start_index=0)
2025-01-08 10:24:39,662 - INFO - Processing chunk with 178 chars starting at index 0
2025-01-08 10:24:39,663 - INFO - Starting main AST analysis flow
2025-01-08 10:24:39,663 - INFO - Tokenized code into 39 tokens
2025-01-08 10:24:39,663 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:24:39,662 - INFO - Processing chunk #1 (size=918 chars, start_index=39)
2025-01-08 10:24:39,670 - INFO - Processing chunk with 918 chars starting at index 39
2025-01-08 10:24:39,670 - INFO - Starting main AST analysis flow
2025-01-08 10:24:39,670 - INFO - Tokenized code into 188 tokens
2025-01-08 10:24:39,671 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:24:43,811 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 38], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 15], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [17, 25], 'children': []}, {'type': 'VariableDeclaration', 'name': 'ENCRYPTION_KEY', 'range': [27, 36], 'children': []}]}
2025-01-08 10:24:43,813 - INFO - Step 1 result: {'type': 'Program', 'name': 'JSONCryptor', 'range': [39, 226], 'children': [{'type': 'FunctionDeclaration', 'name': '__init__', 'range': [43, 120], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'encrypt', 'range': [122, 170], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'decrypt', 'range': [172, 225], 'children': []}]}
2025-01-08 10:24:43,821 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:24:43,820 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:24:53,607 - INFO - Step 2 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'json', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': [{'type': 'ImportSpecifier', 'name': 'Optional', 'range': [4, 6], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 15], 'children': [{'type': 'ImportSpecifier', 'name': 'Fernet', 'range': [10, 14], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [17, 25], 'children': [{'type': 'ImportSpecifier', 'name': 'Settings', 'range': [18, 24], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'ENCRYPTION_KEY', 'range': [27, 36], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [28, 36], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [29, 35], 'children': [{'type': 'CallExpression', 'name': 'Settings', 'range': [29, 31], 'children': []}, {'type': 'Property', 'name': 'secrets', 'range': [32, 33], 'children': []}, {'type': 'Property', 'name': 'encryption_key', 'range': [34, 35], 'children': []}]}]}]}]}
2025-01-08 10:24:53,607 - INFO - Starting Step 3: AST simplification
2025-01-08 10:25:03,612 - INFO - Step 3 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'json', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': [{'type': 'ImportSpecifier', 'name': 'Optional', 'range': [4, 6], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 15], 'children': [{'type': 'ImportSpecifier', 'name': 'Fernet', 'range': [10, 14], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [17, 25], 'children': [{'type': 'ImportSpecifier', 'name': 'Settings', 'range': [18, 24], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'ENCRYPTION_KEY', 'range': [27, 36], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [28, 36], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [29, 35], 'children': [{'type': 'CallExpression', 'name': 'Settings', 'range': [29, 31], 'children': []}, {'type': 'Property', 'name': 'secrets', 'range': [32, 33], 'children': []}, {'type': 'Property', 'name': 'encryption_key', 'range': [34, 35], 'children': []}]}]}]}]}
2025-01-08 10:25:03,612 - INFO - Starting Step 4: AST normalization
2025-01-08 10:25:13,363 - INFO - Step 2 result: {'type': 'Program', 'name': 'JSONCryptor', 'range': [39, 226], 'children': [{'type': 'FunctionDeclaration', 'name': '__init__', 'range': [43, 120], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [46, 46], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [48, 48], 'children': [{'type': 'TypeAnnotation', 'name': 'Optional[str]', 'range': [50, 53], 'children': []}]}, {'type': 'Assignment', 'name': 'self.key', 'range': [68, 74], 'children': [{'type': 'Identifier', 'name': 'key', 'range': [72, 72], 'children': []}, {'type': 'Identifier', 'name': 'ENCRYPTION_KEY', 'range': [74, 74], 'children': []}]}, {'type': 'IfStatement', 'name': 'if not self.key', 'range': [76, 89], 'children': [{'type': 'RaiseStatement', 'name': 'raise ValueError', 'range': [83, 89], 'children': [{'type': 'StringLiteral', 'name': '"Encryption key must be provided or set in ENCRYPTION_KEY environment variable"', 'range': [87, 87], 'children': []}]}]}, {'type': 'Assignment', 'name': 'self.fernet', 'range': [91, 119], 'children': [{'type': 'CallExpression', 'name': 'Fernet', 'range': [95, 119], 'children': [{'type': 'ConditionalExpression', 'name': 'self.key.encode() if isinstance(self.key, str) else self.key', 'range': [98, 118], 'children': [{'type': 'CallExpression', 'name': 'self.key.encode', 'range': [98, 104], 'children': []}, {'type': 'CallExpression', 'name': 'isinstance', 'range': [106, 113], 'children': [{'type': 'Identifier', 'name': 'self.key', 'range': [108, 108], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [112, 112], 'children': []}]}, {'type': 'Identifier', 'name': 'self.key', 'range': [115, 115], 'children': []}]}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'encrypt', 'range': [122, 170], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [125, 125], 'children': []}, {'type': 'Parameter', 'name': 'data', 'range': [127, 127], 'children': [{'type': 'TypeAnnotation', 'name': 'dict', 'range': [129, 129], 'children': []}]}, {'type': 'ReturnTypeAnnotation', 'name': 'str', 'range': [133, 133], 'children': []}, {'type': 'Assignment', 'name': 'json_str', 'range': [140, 147], 'children': [{'type': 'CallExpression', 'name': 'json.dumps', 'range': [142, 147], 'children': [{'type': 'Identifier', 'name': 'data', 'range': [146, 146], 'children': []}]}]}, {'type': 'Assignment', 'name': 'encrypted', 'range': [149, 162], 'children': [{'type': 'CallExpression', 'name': 'self.fernet.encrypt', 'range': [151, 162], 'children': [{'type': 'CallExpression', 'name': 'json_str.encode', 'range': [157, 161], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return encrypted.decode()', 'range': [164, 169], 'children': [{'type': 'CallExpression', 'name': 'encrypted.decode', 'range': [166, 169], 'children': []}]}]}, {'type': 'FunctionDeclaration', 'name': 'decrypt', 'range': [172, 225], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [175, 175], 'children': []}, {'type': 'Parameter', 'name': 'encrypted_str', 'range': [177, 177], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [179, 179], 'children': []}]}, {'type': 'ReturnTypeAnnotation', 'name': 'dict', 'range': [183, 183], 'children': []}, {'type': 'IfStatement', 'name': 'if not encrypted_str', 'range': [190, 198], 'children': [{'type': 'ReturnStatement', 'name': 'return {}', 'range': [195, 197], 'children': []}]}, {'type': 'Assignment', 'name': 'decrypted', 'range': [199, 212], 'children': [{'type': 'CallExpression', 'name': 'self.fernet.decrypt', 'range': [201, 212], 'children': [{'type': 'CallExpression', 'name': 'encrypted_str.encode', 'range': [207, 211], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return json.loads(decrypted.decode())', 'range': [214, 224], 'children': [{'type': 'CallExpression', 'name': 'json.loads', 'range': [215, 224], 'children': [{'type': 'CallExpression', 'name': 'decrypted.decode', 'range': [219, 223], 'children': []}]}]}]}]}
2025-01-08 10:25:13,363 - INFO - Starting Step 3: AST simplification
2025-01-08 10:25:13,494 - INFO - Step 4 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'json', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': [{'type': 'ImportSpecifier', 'name': 'Optional', 'range': [4, 6], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 15], 'children': [{'type': 'ImportSpecifier', 'name': 'Fernet', 'range': [10, 14], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [17, 25], 'children': [{'type': 'ImportSpecifier', 'name': 'Settings', 'range': [18, 24], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'ENCRYPTION_KEY', 'range': [27, 36], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [28, 36], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [29, 35], 'children': [{'type': 'CallExpression', 'name': 'Settings', 'range': [29, 31], 'children': []}, {'type': 'Identifier', 'name': 'secrets', 'range': [32, 33], 'children': []}, {'type': 'Identifier', 'name': 'encryption_key', 'range': [34, 35], 'children': []}]}]}]}]}
2025-01-08 10:25:13,494 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:25:23,610 - INFO - Step 5 result: {'type': 'Program', 'name': 'MainProgram', 'range': [0, 36], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'json', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': [{'type': 'ImportSpecifier', 'name': 'Optional', 'range': [4, 6], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 15], 'children': [{'type': 'ImportSpecifier', 'name': 'Fernet', 'range': [10, 14], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [17, 25], 'children': [{'type': 'ImportSpecifier', 'name': 'Settings', 'range': [18, 24], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'ENCRYPTION_KEY', 'range': [27, 36], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [28, 36], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [29, 35], 'children': [{'type': 'CallExpression', 'name': 'Settings', 'range': [29, 31], 'children': []}, {'type': 'Identifier', 'name': 'secrets', 'range': [32, 33], 'children': []}, {'type': 'Identifier', 'name': 'encryption_key', 'range': [34, 35], 'children': []}]}]}]}]}
2025-01-08 10:25:23,610 - INFO - Completed main AST analysis flow
2025-01-08 10:25:23,610 - INFO - Successfully processed chunk
2025-01-08 10:25:42,394 - INFO - Step 3 result: {'type': 'Program', 'name': 'JSONCryptor', 'range': [39, 226], 'children': [{'type': 'FunctionDeclaration', 'name': '__init__', 'range': [43, 120], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [46, 46], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [48, 48], 'children': [{'type': 'TypeAnnotation', 'name': 'Optional[str]', 'range': [50, 53], 'children': []}]}, {'type': 'Assignment', 'name': 'self.key', 'range': [68, 74], 'children': [{'type': 'Identifier', 'name': 'key', 'range': [72, 72], 'children': []}, {'type': 'Identifier', 'name': 'ENCRYPTION_KEY', 'range': [74, 74], 'children': []}]}, {'type': 'IfStatement', 'name': 'if not self.key', 'range': [76, 89], 'children': [{'type': 'RaiseStatement', 'name': 'raise ValueError', 'range': [83, 89], 'children': [{'type': 'StringLiteral', 'name': '"Encryption key must be provided or set in ENCRYPTION_KEY environment variable"', 'range': [87, 87], 'children': []}]}]}, {'type': 'Assignment', 'name': 'self.fernet', 'range': [91, 119], 'children': [{'type': 'CallExpression', 'name': 'Fernet', 'range': [95, 119], 'children': [{'type': 'ConditionalExpression', 'name': 'self.key.encode() if isinstance(self.key, str) else self.key', 'range': [98, 118], 'children': [{'type': 'CallExpression', 'name': 'self.key.encode', 'range': [98, 104], 'children': []}, {'type': 'CallExpression', 'name': 'isinstance', 'range': [106, 113], 'children': [{'type': 'Identifier', 'name': 'self.key', 'range': [108, 108], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [112, 112], 'children': []}]}, {'type': 'Identifier', 'name': 'self.key', 'range': [115, 115], 'children': []}]}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'encrypt', 'range': [122, 170], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [125, 125], 'children': []}, {'type': 'Parameter', 'name': 'data', 'range': [127, 127], 'children': [{'type': 'TypeAnnotation', 'name': 'dict', 'range': [129, 129], 'children': []}]}, {'type': 'ReturnTypeAnnotation', 'name': 'str', 'range': [133, 133], 'children': []}, {'type': 'Assignment', 'name': 'json_str', 'range': [140, 147], 'children': [{'type': 'CallExpression', 'name': 'json.dumps', 'range': [142, 147], 'children': [{'type': 'Identifier', 'name': 'data', 'range': [146, 146], 'children': []}]}]}, {'type': 'Assignment', 'name': 'encrypted', 'range': [149, 162], 'children': [{'type': 'CallExpression', 'name': 'self.fernet.encrypt', 'range': [151, 162], 'children': [{'type': 'CallExpression', 'name': 'json_str.encode', 'range': [157, 161], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return encrypted.decode()', 'range': [164, 169], 'children': [{'type': 'CallExpression', 'name': 'encrypted.decode', 'range': [166, 169], 'children': []}]}]}, {'type': 'FunctionDeclaration', 'name': 'decrypt', 'range': [172, 225], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [175, 175], 'children': []}, {'type': 'Parameter', 'name': 'encrypted_str', 'range': [177, 177], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [179, 179], 'children': []}]}, {'type': 'ReturnTypeAnnotation', 'name': 'dict', 'range': [183, 183], 'children': []}, {'type': 'IfStatement', 'name': 'if not encrypted_str', 'range': [190, 198], 'children': [{'type': 'ReturnStatement', 'name': 'return {}', 'range': [195, 197], 'children': []}]}, {'type': 'Assignment', 'name': 'decrypted', 'range': [199, 212], 'children': [{'type': 'CallExpression', 'name': 'self.fernet.decrypt', 'range': [201, 212], 'children': [{'type': 'CallExpression', 'name': 'encrypted_str.encode', 'range': [207, 211], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return json.loads(decrypted.decode())', 'range': [214, 224], 'children': [{'type': 'CallExpression', 'name': 'json.loads', 'range': [215, 224], 'children': [{'type': 'CallExpression', 'name': 'decrypted.decode', 'range': [219, 223], 'children': []}]}]}]}]}
2025-01-08 10:25:42,395 - INFO - Starting Step 4: AST normalization
2025-01-08 10:26:14,490 - INFO - Step 4 result: {'type': 'Program', 'name': 'JSONCryptor', 'range': [39, 226], 'children': [{'type': 'FunctionDecl', 'name': '__init__', 'range': [43, 120], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [46, 46], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [48, 48], 'children': [{'type': 'TypeAnnotation', 'name': 'Optional[str]', 'range': [50, 53], 'children': []}]}, {'type': 'Assignment', 'name': 'self.key', 'range': [68, 74], 'children': [{'type': 'Identifier', 'name': 'key', 'range': [72, 72], 'children': []}, {'type': 'Identifier', 'name': 'ENCRYPTION_KEY', 'range': [74, 74], 'children': []}]}, {'type': 'IfStatement', 'name': 'if not self.key', 'range': [76, 89], 'children': [{'type': 'RaiseStatement', 'name': 'raise ValueError', 'range': [83, 89], 'children': [{'type': 'StringLiteral', 'name': '"Encryption key must be provided or set in ENCRYPTION_KEY environment variable"', 'range': [87, 87], 'children': []}]}]}, {'type': 'Assignment', 'name': 'self.fernet', 'range': [91, 119], 'children': [{'type': 'CallExpression', 'name': 'Fernet', 'range': [95, 119], 'children': [{'type': 'ConditionalExpression', 'name': 'self.key.encode() if isinstance(self.key, str) else self.key', 'range': [98, 118], 'children': [{'type': 'CallExpression', 'name': 'self.key.encode', 'range': [98, 104], 'children': []}, {'type': 'CallExpression', 'name': 'isinstance', 'range': [106, 113], 'children': [{'type': 'Identifier', 'name': 'self.key', 'range': [108, 108], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [112, 112], 'children': []}]}, {'type': 'Identifier', 'name': 'self.key', 'range': [115, 115], 'children': []}]}]}]}]}, {'type': 'FunctionDecl', 'name': 'encrypt', 'range': [122, 170], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [125, 125], 'children': []}, {'type': 'Parameter', 'name': 'data', 'range': [127, 127], 'children': [{'type': 'TypeAnnotation', 'name': 'dict', 'range': [129, 129], 'children': []}]}, {'type': 'ReturnTypeAnnotation', 'name': 'str', 'range': [133, 133], 'children': []}, {'type': 'Assignment', 'name': 'json_str', 'range': [140, 147], 'children': [{'type': 'CallExpression', 'name': 'json.dumps', 'range': [142, 147], 'children': [{'type': 'Identifier', 'name': 'data', 'range': [146, 146], 'children': []}]}]}, {'type': 'Assignment', 'name': 'encrypted', 'range': [149, 162], 'children': [{'type': 'CallExpression', 'name': 'self.fernet.encrypt', 'range': [151, 162], 'children': [{'type': 'CallExpression', 'name': 'json_str.encode', 'range': [157, 161], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return encrypted.decode()', 'range': [164, 169], 'children': [{'type': 'CallExpression', 'name': 'encrypted.decode', 'range': [166, 169], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'decrypt', 'range': [172, 225], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [175, 175], 'children': []}, {'type': 'Parameter', 'name': 'encrypted_str', 'range': [177, 177], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [179, 179], 'children': []}]}, {'type': 'ReturnTypeAnnotation', 'name': 'dict', 'range': [183, 183], 'children': []}, {'type': 'IfStatement', 'name': 'if not encrypted_str', 'range': [190, 198], 'children': [{'type': 'ReturnStatement', 'name': 'return {}', 'range': [195, 197], 'children': []}]}, {'type': 'Assignment', 'name': 'decrypted', 'range': [199, 212], 'children': [{'type': 'CallExpression', 'name': 'self.fernet.decrypt', 'range': [201, 212], 'children': [{'type': 'CallExpression', 'name': 'encrypted_str.encode', 'range': [207, 211], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return json.loads(decrypted.decode())', 'range': [214, 224], 'children': [{'type': 'CallExpression', 'name': 'json.loads', 'range': [215, 224], 'children': [{'type': 'CallExpression', 'name': 'decrypted.decode', 'range': [219, 223], 'children': []}]}]}]}]}
2025-01-08 10:26:14,490 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:26:46,392 - INFO - Step 5 result: {'type': 'Program', 'name': 'JSONCryptor', 'range': [39, 226], 'children': [{'type': 'FunctionDecl', 'name': '__init__', 'range': [43, 120], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [46, 46], 'children': []}, {'type': 'Parameter', 'name': 'key', 'range': [48, 48], 'children': [{'type': 'TypeAnnotation', 'name': 'Optional[str]', 'range': [50, 53], 'children': []}]}, {'type': 'Assignment', 'name': 'self.key', 'range': [68, 74], 'children': [{'type': 'Identifier', 'name': 'key', 'range': [72, 72], 'children': []}, {'type': 'Identifier', 'name': 'ENCRYPTION_KEY', 'range': [74, 74], 'children': []}]}, {'type': 'IfStatement', 'name': 'if not self.key', 'range': [76, 89], 'children': [{'type': 'RaiseStatement', 'name': 'raise ValueError', 'range': [83, 89], 'children': [{'type': 'StringLiteral', 'name': '"Encryption key must be provided or set in ENCRYPTION_KEY environment variable"', 'range': [87, 87], 'children': []}]}]}, {'type': 'Assignment', 'name': 'self.fernet', 'range': [91, 119], 'children': [{'type': 'CallExpression', 'name': 'Fernet', 'range': [95, 119], 'children': [{'type': 'ConditionalExpression', 'name': 'self.key.encode() if isinstance(self.key, str) else self.key', 'range': [98, 118], 'children': [{'type': 'CallExpression', 'name': 'self.key.encode', 'range': [98, 104], 'children': []}, {'type': 'CallExpression', 'name': 'isinstance', 'range': [106, 113], 'children': [{'type': 'Identifier', 'name': 'self.key', 'range': [108, 108], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [112, 112], 'children': []}]}, {'type': 'Identifier', 'name': 'self.key', 'range': [115, 115], 'children': []}]}]}]}]}, {'type': 'FunctionDecl', 'name': 'encrypt', 'range': [122, 170], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [125, 125], 'children': []}, {'type': 'Parameter', 'name': 'data', 'range': [127, 127], 'children': [{'type': 'TypeAnnotation', 'name': 'dict', 'range': [129, 129], 'children': []}]}, {'type': 'ReturnTypeAnnotation', 'name': 'str', 'range': [133, 133], 'children': []}, {'type': 'Assignment', 'name': 'json_str', 'range': [140, 147], 'children': [{'type': 'CallExpression', 'name': 'json.dumps', 'range': [142, 147], 'children': [{'type': 'Identifier', 'name': 'data', 'range': [146, 146], 'children': []}]}]}, {'type': 'Assignment', 'name': 'encrypted', 'range': [149, 162], 'children': [{'type': 'CallExpression', 'name': 'self.fernet.encrypt', 'range': [151, 162], 'children': [{'type': 'CallExpression', 'name': 'json_str.encode', 'range': [157, 161], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return encrypted.decode()', 'range': [164, 169], 'children': [{'type': 'CallExpression', 'name': 'encrypted.decode', 'range': [166, 169], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'decrypt', 'range': [172, 225], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [175, 175], 'children': []}, {'type': 'Parameter', 'name': 'encrypted_str', 'range': [177, 177], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [179, 179], 'children': []}]}, {'type': 'ReturnTypeAnnotation', 'name': 'dict', 'range': [183, 183], 'children': []}, {'type': 'IfStatement', 'name': 'if not encrypted_str', 'range': [190, 198], 'children': [{'type': 'ReturnStatement', 'name': 'return {}', 'range': [195, 197], 'children': []}]}, {'type': 'Assignment', 'name': 'decrypted', 'range': [199, 212], 'children': [{'type': 'CallExpression', 'name': 'self.fernet.decrypt', 'range': [201, 212], 'children': [{'type': 'CallExpression', 'name': 'encrypted_str.encode', 'range': [207, 211], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return json.loads(decrypted.decode())', 'range': [214, 224], 'children': [{'type': 'CallExpression', 'name': 'json.loads', 'range': [215, 224], 'children': [{'type': 'CallExpression', 'name': 'decrypted.decode', 'range': [219, 223], 'children': []}]}]}]}]}
2025-01-08 10:26:46,393 - INFO - Completed main AST analysis flow
2025-01-08 10:26:46,393 - INFO - Successfully processed chunk
2025-01-08 10:26:46,407 - INFO - Starting code generation from AST
2025-01-08 10:26:52,038 - INFO - Successfully generated code from AST
2025-01-08 10:26:52,039 - INFO - Starting static code similarity comparison
2025-01-08 10:26:52,042 - INFO - Static similarity result: {'final_score': 100.0, 'length_similarity': 100.0, 'token_similarity': 100.0, 'structure_similarity': 100.0, 'function_similarity': 100, 'complexity_similarity': 100.0, 'variable_similarity': 100}
