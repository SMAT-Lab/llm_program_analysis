2025-01-08 09:16:34,988 - INFO - Processing sample 17
2025-01-08 09:16:34,988 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:16:45,302 - INFO - Successfully split code into 5 top-level declarations
2025-01-08 09:16:45,304 - INFO - Processing chunk #0 (size=648 chars, start_index=0)
2025-01-08 09:16:45,305 - INFO - Processing chunk #1 (size=249 chars, start_index=6)
2025-01-08 09:16:45,305 - INFO - Processing chunk with 648 chars starting at index 0
2025-01-08 09:16:45,305 - INFO - Processing chunk #2 (size=1132 chars, start_index=44)
2025-01-08 09:16:45,306 - INFO - Processing chunk with 249 chars starting at index 6
2025-01-08 09:16:45,306 - INFO - Processing chunk #3 (size=2320 chars, start_index=294)
2025-01-08 09:16:45,306 - INFO - Starting main AST analysis flow
2025-01-08 09:16:45,307 - INFO - Processing chunk #4 (size=70 chars, start_index=639)
2025-01-08 09:16:45,307 - INFO - Processing chunk with 1132 chars starting at index 44
2025-01-08 09:16:45,307 - INFO - Starting main AST analysis flow
2025-01-08 09:16:45,307 - INFO - Processing chunk with 2320 chars starting at index 294
2025-01-08 09:16:45,307 - INFO - Tokenized code into 6 tokens
2025-01-08 09:16:45,307 - INFO - Processing chunk with 70 chars starting at index 639
2025-01-08 09:16:45,308 - INFO - Starting main AST analysis flow
2025-01-08 09:16:45,308 - INFO - Tokenized code into 38 tokens
2025-01-08 09:16:45,308 - INFO - Starting main AST analysis flow
2025-01-08 09:16:45,308 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:45,308 - INFO - Starting main AST analysis flow
2025-01-08 09:16:45,309 - INFO - Tokenized code into 250 tokens
2025-01-08 09:16:45,309 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:45,309 - INFO - Tokenized code into 345 tokens
2025-01-08 09:16:45,310 - INFO - Tokenized code into 18 tokens
2025-01-08 09:16:45,310 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:45,314 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:45,314 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:50,323 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 5], 'children': []}
2025-01-08 09:16:50,324 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:51,476 - INFO - Step 1 result: {'type': 'Program', 'name': 'word_exists', 'range': [294, 638], 'children': []}
2025-01-08 09:16:51,476 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:51,595 - INFO - Step 1 result: {'type': 'Program', 'name': 'get_point_key', 'range': [6, 43], 'children': []}
2025-01-08 09:16:51,595 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:52,161 - INFO - Step 1 result: {'type': 'Program', 'name': 'exits_word', 'range': [44, 293], 'children': []}
2025-01-08 09:16:52,162 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:56,152 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [639, 656], 'children': [{'type': 'IfStatement', 'name': '', 'range': [639, 645], 'children': []}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [646, 648], 'children': []}, {'type': 'ExpressionStatement', 'name': '', 'range': [650, 655], 'children': []}]}
2025-01-08 09:16:56,152 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:03,449 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [0, 5], 'children': [{'type': 'Comment', 'name': '', 'range': [0, 1], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [1, 2], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [2, 3], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [3, 4], 'children': []}, {'type': 'Comment', 'name': '', 'range': [4, 5], 'children': []}]}
2025-01-08 09:17:03,449 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:16,258 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [0, 5], 'children': [{'type': 'Comment', 'name': '', 'range': [0, 1], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [1, 2], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [2, 3], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [3, 4], 'children': []}, {'type': 'Comment', 'name': '', 'range': [4, 5], 'children': []}]}
2025-01-08 09:17:16,259 - INFO - Starting Step 4: AST normalization
2025-01-08 09:17:16,935 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [639, 656], 'children': [{'type': 'IfStatement', 'name': '', 'range': [639, 645], 'children': [{'type': 'Condition', 'name': '', 'range': [640, 643], 'children': [{'type': 'Variable', 'name': '__name__', 'range': [640, 640], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [641, 642], 'children': []}, {'type': 'String', 'name': '"__main__"', 'range': [643, 643], 'children': []}]}]}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [646, 648], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [647, 647], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [650, 655], 'children': [{'type': 'CallExpression', 'name': '', 'range': [650, 654], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [650, 652], 'children': [{'type': 'Variable', 'name': 'doctest', 'range': [650, 650], 'children': []}, {'type': 'Operator', 'name': '.', 'range': [651, 651], 'children': []}, {'type': 'Function', 'name': 'testmod', 'range': [652, 652], 'children': []}]}, {'type': 'Arguments', 'name': '', 'range': [653, 654], 'children': []}]}]}]}
2025-01-08 09:17:16,935 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:19,318 - INFO - Step 2 result: {'type': 'Program', 'name': 'get_point_key', 'range': [6, 43], 'children': [{'type': 'FunctionDeclaration', 'name': 'get_point_key', 'range': [6, 43], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [8, 24], 'children': [{'type': 'Parameter', 'name': 'len_board', 'range': [9, 11], 'children': []}, {'type': 'Parameter', 'name': 'len_board_column', 'range': [13, 15], 'children': []}, {'type': 'Parameter', 'name': 'row', 'range': [17, 19], 'children': []}, {'type': 'Parameter', 'name': 'column', 'range': [21, 23], 'children': []}]}, {'type': 'ReturnType', 'name': 'int', 'range': [25, 27], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [28, 43], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [30, 32], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [35, 43], 'children': [{'type': 'BinaryExpression', 'name': 'expression', 'range': [36, 42], 'children': [{'type': 'BinaryExpression', 'name': 'left', 'range': [36, 40], 'children': [{'type': 'Identifier', 'name': 'len_board', 'range': [36, 36], 'children': []}, {'type': 'Identifier', 'name': 'len_board_column', 'range': [38, 38], 'children': []}, {'type': 'Identifier', 'name': 'row', 'range': [40, 40], 'children': []}]}, {'type': 'Identifier', 'name': 'column', 'range': [42, 42], 'children': []}]}]}]}]}]}
2025-01-08 09:17:19,318 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:25,202 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [0, 5], 'children': [{'type': 'Comment', 'name': '', 'range': [0, 1], 'children': []}, {'type': 'Literal', 'name': '', 'range': [1, 2], 'children': []}, {'type': 'Literal', 'name': '', 'range': [2, 3], 'children': []}, {'type': 'Literal', 'name': '', 'range': [3, 4], 'children': []}, {'type': 'Comment', 'name': '', 'range': [4, 5], 'children': []}]}
2025-01-08 09:17:25,202 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:17:36,650 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [639, 656], 'children': [{'type': 'IfStatement', 'name': '', 'range': [639, 645], 'children': [{'type': 'Condition', 'name': '', 'range': [640, 643], 'children': [{'type': 'Variable', 'name': '__name__', 'range': [640, 640], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [641, 642], 'children': []}, {'type': 'String', 'name': '"__main__"', 'range': [643, 643], 'children': []}]}]}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [646, 648], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [647, 647], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [650, 655], 'children': [{'type': 'CallExpression', 'name': '', 'range': [650, 654], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [650, 652], 'children': [{'type': 'Variable', 'name': 'doctest', 'range': [650, 650], 'children': []}, {'type': 'Function', 'name': 'testmod', 'range': [652, 652], 'children': []}]}]}]}]}
2025-01-08 09:17:36,651 - INFO - Starting Step 4: AST normalization
2025-01-08 09:17:37,742 - INFO - Step 5 result: {'type': 'Program', 'name': 'CombinedProgram', 'range': [0, 5], 'children': [{'type': 'Comment', 'name': '', 'range': [0, 1], 'children': []}, {'type': 'Literal', 'name': '', 'range': [1, 2], 'children': []}, {'type': 'Literal', 'name': '', 'range': [2, 3], 'children': []}, {'type': 'Literal', 'name': '', 'range': [3, 4], 'children': []}, {'type': 'Comment', 'name': '', 'range': [4, 5], 'children': []}]}
2025-01-08 09:17:37,742 - INFO - Completed main AST analysis flow
2025-01-08 09:17:37,742 - INFO - Successfully processed chunk
2025-01-08 09:17:39,777 - INFO - Step 2 result: {'type': 'Program', 'name': 'exits_word', 'range': [44, 293], 'children': [{'type': 'FunctionDeclaration', 'name': 'exits_word', 'range': [44, 293], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [46, 86], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [48, 56], 'children': []}, {'type': 'Parameter', 'name': 'word', 'range': [59, 61], 'children': []}, {'type': 'Parameter', 'name': 'row', 'range': [64, 66], 'children': []}, {'type': 'Parameter', 'name': 'column', 'range': [69, 71], 'children': []}, {'type': 'Parameter', 'name': 'word_index', 'range': [74, 76], 'children': []}, {'type': 'Parameter', 'name': 'visited_points_set', 'range': [79, 84], 'children': []}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [88, 90], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [92, 293], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [93, 99], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [102, 120], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [103, 116], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_false', 'range': [118, 119], 'children': []}]}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [122, 136], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [123, 132], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_true', 'range': [134, 135], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'traverts_directions', 'range': [138, 166], 'children': []}, {'type': 'VariableDeclaration', 'name': 'len_board', 'range': [168, 174], 'children': []}, {'type': 'VariableDeclaration', 'name': 'len_board_column', 'range': [175, 184], 'children': []}, {'type': 'ForLoop', 'name': 'for_loop', 'range': [185, 289], 'children': [{'type': 'Initialization', 'name': 'initialization', 'range': [186, 188], 'children': []}, {'type': 'Condition', 'name': 'condition', 'range': [189, 225], 'children': []}, {'type': 'Update', 'name': 'update', 'range': [226, 228], 'children': []}, {'type': 'Block', 'name': 'block', 'range': [230, 289], 'children': [{'type': 'VariableDeclaration', 'name': 'key', 'range': [231, 242], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [244, 251], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [245, 248], 'children': []}, {'type': 'ContinueStatement', 'name': 'continue', 'range': [250, 250], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'add_to_visited', 'range': [253, 259], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [260, 281], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [261, 277], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_true', 'range': [279, 280], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'remove_from_visited', 'range': [283, 289], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return_false', 'range': [291, 292], 'children': []}]}]}]}
2025-01-08 09:17:39,777 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:41,256 - INFO - Step 3 result: {'type': 'Program', 'name': 'get_point_key', 'range': [6, 43], 'children': [{'type': 'FunctionDeclaration', 'name': 'get_point_key', 'range': [6, 43], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [8, 24], 'children': [{'type': 'Parameter', 'name': 'len_board', 'range': [9, 11], 'children': []}, {'type': 'Parameter', 'name': 'len_board_column', 'range': [13, 15], 'children': []}, {'type': 'Parameter', 'name': 'row', 'range': [17, 19], 'children': []}, {'type': 'Parameter', 'name': 'column', 'range': [21, 23], 'children': []}]}, {'type': 'ReturnType', 'name': 'int', 'range': [25, 27], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [28, 43], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [30, 32], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [35, 43], 'children': [{'type': 'BinaryExpression', 'name': 'expression', 'range': [36, 42], 'children': [{'type': 'BinaryExpression', 'name': 'left', 'range': [36, 40], 'children': [{'type': 'Identifier', 'name': 'len_board', 'range': [36, 36], 'children': []}, {'type': 'Identifier', 'name': 'len_board_column', 'range': [38, 38], 'children': []}, {'type': 'Identifier', 'name': 'row', 'range': [40, 40], 'children': []}]}, {'type': 'Identifier', 'name': 'column', 'range': [42, 42], 'children': []}]}]}]}]}]}
2025-01-08 09:17:41,256 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:01,013 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [639, 656], 'children': [{'type': 'IfStatement', 'name': '', 'range': [639, 645], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [640, 643], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [640, 640], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [641, 642], 'children': []}, {'type': 'Literal', 'name': '"__main__"', 'range': [643, 643], 'children': []}]}]}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [646, 648], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [647, 647], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [650, 655], 'children': [{'type': 'CallExpression', 'name': '', 'range': [650, 654], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [650, 652], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [650, 650], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [652, 652], 'children': []}]}]}]}]}
2025-01-08 09:18:01,013 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:06,317 - INFO - Step 4 result: {'type': 'Program', 'name': 'get_point_key', 'range': [6, 43], 'children': [{'type': 'FunctionDecl', 'name': 'get_point_key', 'range': [6, 43], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [8, 24], 'children': [{'type': 'Parameter', 'name': 'len_board', 'range': [9, 11], 'children': []}, {'type': 'Parameter', 'name': 'len_board_column', 'range': [13, 15], 'children': []}, {'type': 'Parameter', 'name': 'row', 'range': [17, 19], 'children': []}, {'type': 'Parameter', 'name': 'column', 'range': [21, 23], 'children': []}]}, {'type': 'ReturnType', 'name': 'int', 'range': [25, 27], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [28, 43], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [30, 32], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [35, 43], 'children': [{'type': 'BinaryExpression', 'name': 'expression', 'range': [36, 42], 'children': [{'type': 'BinaryExpression', 'name': 'left', 'range': [36, 40], 'children': [{'type': 'Identifier', 'name': 'len_board', 'range': [36, 36], 'children': []}, {'type': 'Identifier', 'name': 'len_board_column', 'range': [38, 38], 'children': []}, {'type': 'Identifier', 'name': 'row', 'range': [40, 40], 'children': []}]}, {'type': 'Identifier', 'name': 'column', 'range': [42, 42], 'children': []}]}]}]}]}]}
2025-01-08 09:18:06,317 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:22,206 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [639, 656], 'children': [{'type': 'IfStatement', 'name': '', 'range': [639, 645], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [640, 643], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [640, 640], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [641, 642], 'children': []}, {'type': 'Literal', 'name': '"__main__"', 'range': [643, 643], 'children': []}]}]}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [646, 648], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [647, 647], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [650, 655], 'children': [{'type': 'CallExpression', 'name': '', 'range': [650, 654], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [650, 652], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [650, 650], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [652, 652], 'children': []}]}]}]}]}
2025-01-08 09:18:22,207 - INFO - Completed main AST analysis flow
2025-01-08 09:18:22,207 - INFO - Successfully processed chunk
2025-01-08 09:18:28,673 - INFO - Step 3 result: {'type': 'Program', 'name': 'exits_word', 'range': [44, 293], 'children': [{'type': 'FunctionDeclaration', 'name': 'exits_word', 'range': [44, 293], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [46, 86], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [48, 56], 'children': []}, {'type': 'Parameter', 'name': 'word', 'range': [59, 61], 'children': []}, {'type': 'Parameter', 'name': 'row', 'range': [64, 66], 'children': []}, {'type': 'Parameter', 'name': 'column', 'range': [69, 71], 'children': []}, {'type': 'Parameter', 'name': 'word_index', 'range': [74, 76], 'children': []}, {'type': 'Parameter', 'name': 'visited_points_set', 'range': [79, 84], 'children': []}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [88, 90], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [92, 293], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [93, 99], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [102, 120], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [103, 116], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_false', 'range': [118, 119], 'children': []}]}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [122, 136], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [123, 132], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_true', 'range': [134, 135], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'traverts_directions', 'range': [138, 166], 'children': []}, {'type': 'VariableDeclaration', 'name': 'len_board', 'range': [168, 174], 'children': []}, {'type': 'VariableDeclaration', 'name': 'len_board_column', 'range': [175, 184], 'children': []}, {'type': 'ForLoop', 'name': 'for_loop', 'range': [185, 289], 'children': [{'type': 'Initialization', 'name': 'initialization', 'range': [186, 188], 'children': []}, {'type': 'Condition', 'name': 'condition', 'range': [189, 225], 'children': []}, {'type': 'Block', 'name': 'block', 'range': [230, 289], 'children': [{'type': 'VariableDeclaration', 'name': 'key', 'range': [231, 242], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [244, 251], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [245, 248], 'children': []}, {'type': 'ContinueStatement', 'name': 'continue', 'range': [250, 250], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'add_to_visited', 'range': [253, 259], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [260, 281], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [261, 277], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_true', 'range': [279, 280], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'remove_from_visited', 'range': [283, 289], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return_false', 'range': [291, 292], 'children': []}]}]}]}
2025-01-08 09:18:28,673 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:34,597 - INFO - Step 5 result: {'type': 'Program', 'name': 'get_point_key', 'range': [6, 43], 'children': [{'type': 'FunctionDecl', 'name': 'get_point_key', 'range': [6, 43], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [8, 24], 'children': [{'type': 'Parameter', 'name': 'len_board', 'range': [9, 11], 'children': []}, {'type': 'Parameter', 'name': 'len_board_column', 'range': [13, 15], 'children': []}, {'type': 'Parameter', 'name': 'row', 'range': [17, 19], 'children': []}, {'type': 'Parameter', 'name': 'column', 'range': [21, 23], 'children': []}]}, {'type': 'ReturnType', 'name': 'int', 'range': [25, 27], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [28, 43], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [30, 32], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [35, 43], 'children': [{'type': 'BinaryExpression', 'name': 'expression', 'range': [36, 42], 'children': [{'type': 'BinaryExpression', 'name': 'left', 'range': [36, 40], 'children': [{'type': 'Identifier', 'name': 'len_board', 'range': [36, 36], 'children': []}, {'type': 'Identifier', 'name': 'len_board_column', 'range': [38, 38], 'children': []}, {'type': 'Identifier', 'name': 'row', 'range': [40, 40], 'children': []}]}, {'type': 'Identifier', 'name': 'column', 'range': [42, 42], 'children': []}]}]}]}]}]}
2025-01-08 09:18:34,597 - INFO - Completed main AST analysis flow
2025-01-08 09:18:34,597 - INFO - Successfully processed chunk
2025-01-08 09:19:05,438 - INFO - Step 2 result: {'type': 'Program', 'name': 'word_exists', 'range': [294, 638], 'children': [{'type': 'FunctionDeclaration', 'name': 'word_exists', 'range': [294, 638], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [296, 310], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [297, 305], 'children': [{'type': 'TypeAnnotation', 'name': 'list[list[str]]', 'range': [298, 305], 'children': []}]}, {'type': 'Parameter', 'name': 'word', 'range': [307, 309], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [308, 309], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [311, 313], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [314, 638], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [316, 433], 'children': []}, {'type': 'Comment', 'name': 'Validate board', 'range': [436, 439], 'children': []}, {'type': 'VariableDeclaration', 'name': 'board_error_message', 'range': [440, 446], 'children': [{'type': 'StringLiteral', 'name': 'The board should be a non empty matrix of single chars strings.', 'range': [444, 445], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'len_board', 'range': [449, 455], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [451, 454], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [453, 454], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [456, 479], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [457, 471], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [458, 463], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [460, 461], 'children': []}, {'type': 'Identifier', 'name': 'list', 'range': [462, 463], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [465, 471], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [465, 468], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [467, 468], 'children': []}]}, {'type': 'NumericLiteral', 'name': '0', 'range': [470, 471], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [472, 479], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [474, 478], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [475, 476], 'children': []}, {'type': 'Identifier', 'name': 'board_error_message', 'range': [477, 478], 'children': []}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [481, 510], 'children': [{'type': 'VariableDeclaration', 'name': 'row', 'range': [482, 484], 'children': []}, {'type': 'Identifier', 'name': 'board', 'range': [484, 485], 'children': []}, {'type': 'BlockStatement', 'name': 'block', 'range': [485, 510], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [487, 509], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [488, 502], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [489, 494], 'children': [{'type': 'Identifier', 'name': 'row', 'range': [491, 492], 'children': []}, {'type': 'Identifier', 'name': 'list', 'range': [493, 494], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [496, 502], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [496, 499], 'children': [{'type': 'Identifier', 'name': 'row', 'range': [498, 499], 'children': []}]}, {'type': 'NumericLiteral', 'name': '0', 'range': [501, 502], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [503, 509], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [505, 509], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [506, 507], 'children': []}, {'type': 'Identifier', 'name': 'board_error_message', 'range': [508, 509], 'children': []}]}]}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [512, 540], 'children': [{'type': 'VariableDeclaration', 'name': 'item', 'range': [513, 515], 'children': []}, {'type': 'Identifier', 'name': 'row', 'range': [515, 516], 'children': []}, {'type': 'BlockStatement', 'name': 'block', 'range': [516, 540], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [518, 540], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [519, 533], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [520, 525], 'children': [{'type': 'Identifier', 'name': 'item', 'range': [522, 523], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [524, 525], 'children': []}]}, {'type': 'BinaryExpression', 'name': '!=', 'range': [527, 533], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [527, 530], 'children': [{'type': 'Identifier', 'name': 'item', 'range': [529, 530], 'children': []}]}, {'type': 'NumericLiteral', 'name': '1', 'range': [532, 533], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [534, 540], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [536, 540], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [537, 538], 'children': []}, {'type': 'Identifier', 'name': 'board_error_message', 'range': [539, 540], 'children': []}]}]}]}]}]}, {'type': 'Comment', 'name': 'Validate word', 'range': [543, 546], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [547, 572], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [548, 562], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [549, 554], 'children': [{'type': 'Identifier', 'name': 'word', 'range': [551, 552], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [553, 554], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [556, 562], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [556, 559], 'children': [{'type': 'Identifier', 'name': 'word', 'range': [558, 559], 'children': []}]}, {'type': 'NumericLiteral', 'name': '0', 'range': [561, 562], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [563, 572], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [565, 571], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [566, 567], 'children': []}, {'type': 'StringLiteral', 'name': 'The word parameter should be a string of length greater than 0.', 'range': [569, 570], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'len_board_column', 'range': [574, 583], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [576, 582], 'children': [{'type': 'MemberExpression', 'name': 'board[0]', 'range': [578, 581], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [578, 579], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [580, 581], 'children': []}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [584, 634], 'children': [{'type': 'VariableDeclaration', 'name': 'i', 'range': [585, 587], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [587, 590], 'children': [{'type': 'Identifier', 'name': 'len_board', 'range': [589, 590], 'children': []}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [591, 634], 'children': [{'type': 'ForStatement', 'name': 'for', 'range': [593, 634], 'children': [{'type': 'VariableDeclaration', 'name': 'j', 'range': [594, 596], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [596, 599], 'children': [{'type': 'Identifier', 'name': 'len_board_column', 'range': [598, 599], 'children': []}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [600, 634], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [602, 634], 'children': [{'type': 'CallExpression', 'name': 'exits_word', 'range': [603, 629], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [606, 607], 'children': []}, {'type': 'Identifier', 'name': 'word', 'range': [608, 609], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [610, 611], 'children': []}, {'type': 'Identifier', 'name': 'j', 'range': [612, 613], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [614, 615], 'children': []}, {'type': 'ObjectExpression', 'name': '{}', 'range': [616, 627], 'children': [{'type': 'CallExpression', 'name': 'get_point_key', 'range': [617, 626], 'children': [{'type': 'Identifier', 'name': 'len_board', 'range': [619, 620], 'children': []}, {'type': 'Identifier', 'name': 'len_board_column', 'range': [621, 622], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [623, 624], 'children': []}, {'type': 'Identifier', 'name': 'j', 'range': [625, 626], 'children': []}]}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [630, 634], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [632, 633], 'children': [{'type': 'BooleanLiteral', 'name': 'True', 'range': [633, 634], 'children': []}]}]}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [636, 637], 'children': [{'type': 'BooleanLiteral', 'name': 'False', 'range': [637, 638], 'children': []}]}]}]}]}
2025-01-08 09:19:05,438 - INFO - Starting Step 3: AST simplification
2025-01-08 09:19:14,635 - INFO - Step 4 result: {'type': 'Program', 'name': 'exits_word', 'range': [44, 293], 'children': [{'type': 'FunctionDecl', 'name': 'exits_word', 'range': [44, 293], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [46, 86], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [48, 56], 'children': []}, {'type': 'Parameter', 'name': 'word', 'range': [59, 61], 'children': []}, {'type': 'Parameter', 'name': 'row', 'range': [64, 66], 'children': []}, {'type': 'Parameter', 'name': 'column', 'range': [69, 71], 'children': []}, {'type': 'Parameter', 'name': 'word_index', 'range': [74, 76], 'children': []}, {'type': 'Parameter', 'name': 'visited_points_set', 'range': [79, 84], 'children': []}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [88, 90], 'children': []}, {'type': 'BlockStatement', 'name': 'body', 'range': [92, 293], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [93, 99], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [102, 120], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [103, 116], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_false', 'range': [118, 119], 'children': []}]}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [122, 136], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [123, 132], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_true', 'range': [134, 135], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'traverts_directions', 'range': [138, 166], 'children': []}, {'type': 'VariableDeclaration', 'name': 'len_board', 'range': [168, 174], 'children': []}, {'type': 'VariableDeclaration', 'name': 'len_board_column', 'range': [175, 184], 'children': []}, {'type': 'ForStatement', 'name': 'for_loop', 'range': [185, 289], 'children': [{'type': 'Initialization', 'name': 'initialization', 'range': [186, 188], 'children': []}, {'type': 'Condition', 'name': 'condition', 'range': [189, 225], 'children': []}, {'type': 'BlockStatement', 'name': 'block', 'range': [230, 289], 'children': [{'type': 'VariableDeclaration', 'name': 'key', 'range': [231, 242], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [244, 251], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [245, 248], 'children': []}, {'type': 'ContinueStatement', 'name': 'continue', 'range': [250, 250], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'add_to_visited', 'range': [253, 259], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [260, 281], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [261, 277], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_true', 'range': [279, 280], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'remove_from_visited', 'range': [283, 289], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return_false', 'range': [291, 292], 'children': []}]}]}]}
2025-01-08 09:19:14,636 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:19:57,913 - INFO - Step 5 result: {'type': 'Program', 'name': 'exits_word', 'range': [44, 293], 'children': [{'type': 'FunctionDecl', 'name': 'exits_word', 'range': [44, 293], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [46, 86], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [48, 56], 'children': []}, {'type': 'Parameter', 'name': 'word', 'range': [59, 61], 'children': []}, {'type': 'Parameter', 'name': 'row', 'range': [64, 66], 'children': []}, {'type': 'Parameter', 'name': 'column', 'range': [69, 71], 'children': []}, {'type': 'Parameter', 'name': 'word_index', 'range': [74, 76], 'children': []}, {'type': 'Parameter', 'name': 'visited_points_set', 'range': [79, 84], 'children': []}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [88, 90], 'children': []}, {'type': 'BlockStatement', 'name': 'body', 'range': [92, 293], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [93, 99], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [102, 120], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [103, 116], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_false', 'range': [118, 119], 'children': []}]}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [122, 136], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [123, 132], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_true', 'range': [134, 135], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'traverts_directions', 'range': [138, 166], 'children': []}, {'type': 'VariableDeclaration', 'name': 'len_board', 'range': [168, 174], 'children': []}, {'type': 'VariableDeclaration', 'name': 'len_board_column', 'range': [175, 184], 'children': []}, {'type': 'ForStatement', 'name': 'for_loop', 'range': [185, 289], 'children': [{'type': 'Initialization', 'name': 'initialization', 'range': [186, 188], 'children': []}, {'type': 'Condition', 'name': 'condition', 'range': [189, 225], 'children': []}, {'type': 'BlockStatement', 'name': 'block', 'range': [230, 289], 'children': [{'type': 'VariableDeclaration', 'name': 'key', 'range': [231, 242], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [244, 251], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [245, 248], 'children': []}, {'type': 'ContinueStatement', 'name': 'continue', 'range': [250, 250], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'add_to_visited', 'range': [253, 259], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [260, 281], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [261, 277], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_true', 'range': [279, 280], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'remove_from_visited', 'range': [283, 289], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return_false', 'range': [291, 292], 'children': []}]}]}]}
2025-01-08 09:19:57,914 - INFO - Completed main AST analysis flow
2025-01-08 09:19:57,915 - INFO - Successfully processed chunk
2025-01-08 09:21:15,795 - INFO - Step 3 result: {'type': 'Program', 'name': 'word_exists', 'range': [294, 638], 'children': [{'type': 'FunctionDeclaration', 'name': 'word_exists', 'range': [294, 638], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [296, 310], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [297, 305], 'children': [{'type': 'TypeAnnotation', 'name': 'list[list[str]]', 'range': [298, 305], 'children': []}]}, {'type': 'Parameter', 'name': 'word', 'range': [307, 309], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [308, 309], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [311, 313], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [314, 638], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [316, 433], 'children': []}, {'type': 'VariableDeclaration', 'name': 'board_error_message', 'range': [440, 446], 'children': [{'type': 'StringLiteral', 'name': 'The board should be a non empty matrix of single chars strings.', 'range': [444, 445], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'len_board', 'range': [449, 455], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [451, 454], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [453, 454], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [456, 479], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [457, 471], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [458, 463], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [460, 461], 'children': []}, {'type': 'Identifier', 'name': 'list', 'range': [462, 463], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [465, 471], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [465, 468], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [467, 468], 'children': []}]}, {'type': 'NumericLiteral', 'name': '0', 'range': [470, 471], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [472, 479], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [474, 478], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [475, 476], 'children': []}, {'type': 'Identifier', 'name': 'board_error_message', 'range': [477, 478], 'children': []}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [481, 510], 'children': [{'type': 'VariableDeclaration', 'name': 'row', 'range': [482, 484], 'children': []}, {'type': 'Identifier', 'name': 'board', 'range': [484, 485], 'children': []}, {'type': 'BlockStatement', 'name': 'block', 'range': [485, 510], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [487, 509], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [488, 502], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [489, 494], 'children': [{'type': 'Identifier', 'name': 'row', 'range': [491, 492], 'children': []}, {'type': 'Identifier', 'name': 'list', 'range': [493, 494], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [496, 502], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [496, 499], 'children': [{'type': 'Identifier', 'name': 'row', 'range': [498, 499], 'children': []}]}, {'type': 'NumericLiteral', 'name': '0', 'range': [501, 502], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [503, 509], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [505, 509], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [506, 507], 'children': []}, {'type': 'Identifier', 'name': 'board_error_message', 'range': [508, 509], 'children': []}]}]}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [512, 540], 'children': [{'type': 'VariableDeclaration', 'name': 'item', 'range': [513, 515], 'children': []}, {'type': 'Identifier', 'name': 'row', 'range': [515, 516], 'children': []}, {'type': 'BlockStatement', 'name': 'block', 'range': [516, 540], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [518, 540], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [519, 533], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [520, 525], 'children': [{'type': 'Identifier', 'name': 'item', 'range': [522, 523], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [524, 525], 'children': []}]}, {'type': 'BinaryExpression', 'name': '!=', 'range': [527, 533], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [527, 530], 'children': [{'type': 'Identifier', 'name': 'item', 'range': [529, 530], 'children': []}]}, {'type': 'NumericLiteral', 'name': '1', 'range': [532, 533], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [534, 540], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [536, 540], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [537, 538], 'children': []}, {'type': 'Identifier', 'name': 'board_error_message', 'range': [539, 540], 'children': []}]}]}]}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [547, 572], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [548, 562], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [549, 554], 'children': [{'type': 'Identifier', 'name': 'word', 'range': [551, 552], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [553, 554], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [556, 562], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [556, 559], 'children': [{'type': 'Identifier', 'name': 'word', 'range': [558, 559], 'children': []}]}, {'type': 'NumericLiteral', 'name': '0', 'range': [561, 562], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [563, 572], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [565, 571], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [566, 567], 'children': []}, {'type': 'StringLiteral', 'name': 'The word parameter should be a string of length greater than 0.', 'range': [569, 570], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'len_board_column', 'range': [574, 583], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [576, 582], 'children': [{'type': 'MemberExpression', 'name': 'board[0]', 'range': [578, 581], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [578, 579], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [580, 581], 'children': []}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [584, 634], 'children': [{'type': 'VariableDeclaration', 'name': 'i', 'range': [585, 587], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [587, 590], 'children': [{'type': 'Identifier', 'name': 'len_board', 'range': [589, 590], 'children': []}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [591, 634], 'children': [{'type': 'ForStatement', 'name': 'for', 'range': [593, 634], 'children': [{'type': 'VariableDeclaration', 'name': 'j', 'range': [594, 596], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [596, 599], 'children': [{'type': 'Identifier', 'name': 'len_board_column', 'range': [598, 599], 'children': []}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [600, 634], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [602, 634], 'children': [{'type': 'CallExpression', 'name': 'exits_word', 'range': [603, 629], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [606, 607], 'children': []}, {'type': 'Identifier', 'name': 'word', 'range': [608, 609], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [610, 611], 'children': []}, {'type': 'Identifier', 'name': 'j', 'range': [612, 613], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [614, 615], 'children': []}, {'type': 'ObjectExpression', 'name': '{}', 'range': [616, 627], 'children': [{'type': 'CallExpression', 'name': 'get_point_key', 'range': [617, 626], 'children': [{'type': 'Identifier', 'name': 'len_board', 'range': [619, 620], 'children': []}, {'type': 'Identifier', 'name': 'len_board_column', 'range': [621, 622], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [623, 624], 'children': []}, {'type': 'Identifier', 'name': 'j', 'range': [625, 626], 'children': []}]}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [630, 634], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [632, 633], 'children': [{'type': 'BooleanLiteral', 'name': 'True', 'range': [633, 634], 'children': []}]}]}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [636, 637], 'children': [{'type': 'BooleanLiteral', 'name': 'False', 'range': [637, 638], 'children': []}]}]}]}]}
2025-01-08 09:21:15,795 - INFO - Starting Step 4: AST normalization
2025-01-08 09:23:17,819 - INFO - Step 4 result: {'type': 'Program', 'name': 'word_exists', 'range': [294, 638], 'children': [{'type': 'FunctionDecl', 'name': 'word_exists', 'range': [294, 638], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [296, 310], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [297, 305], 'children': [{'type': 'TypeAnnotation', 'name': 'list[list[str]]', 'range': [298, 305], 'children': []}]}, {'type': 'Parameter', 'name': 'word', 'range': [307, 309], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [308, 309], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [311, 313], 'children': []}, {'type': 'BlockStatement', 'name': 'body', 'range': [314, 638], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [316, 433], 'children': []}, {'type': 'VariableDecl', 'name': 'board_error_message', 'range': [440, 446], 'children': [{'type': 'Literal', 'name': 'The board should be a non empty matrix of single chars strings.', 'range': [444, 445], 'children': []}]}, {'type': 'VariableDecl', 'name': 'len_board', 'range': [449, 455], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [451, 454], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [453, 454], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [456, 479], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [457, 471], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [458, 463], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [460, 461], 'children': []}, {'type': 'Identifier', 'name': 'list', 'range': [462, 463], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [465, 471], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [465, 468], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [467, 468], 'children': []}]}, {'type': 'Literal', 'name': '0', 'range': [470, 471], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [472, 479], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [474, 478], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [475, 476], 'children': []}, {'type': 'Identifier', 'name': 'board_error_message', 'range': [477, 478], 'children': []}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [481, 510], 'children': [{'type': 'VariableDecl', 'name': 'row', 'range': [482, 484], 'children': []}, {'type': 'Identifier', 'name': 'board', 'range': [484, 485], 'children': []}, {'type': 'BlockStatement', 'name': 'block', 'range': [485, 510], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [487, 509], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [488, 502], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [489, 494], 'children': [{'type': 'Identifier', 'name': 'row', 'range': [491, 492], 'children': []}, {'type': 'Identifier', 'name': 'list', 'range': [493, 494], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [496, 502], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [496, 499], 'children': [{'type': 'Identifier', 'name': 'row', 'range': [498, 499], 'children': []}]}, {'type': 'Literal', 'name': '0', 'range': [501, 502], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [503, 509], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [505, 509], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [506, 507], 'children': []}, {'type': 'Identifier', 'name': 'board_error_message', 'range': [508, 509], 'children': []}]}]}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [512, 540], 'children': [{'type': 'VariableDecl', 'name': 'item', 'range': [513, 515], 'children': []}, {'type': 'Identifier', 'name': 'row', 'range': [515, 516], 'children': []}, {'type': 'BlockStatement', 'name': 'block', 'range': [516, 540], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [518, 540], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [519, 533], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [520, 525], 'children': [{'type': 'Identifier', 'name': 'item', 'range': [522, 523], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [524, 525], 'children': []}]}, {'type': 'BinaryExpression', 'name': '!=', 'range': [527, 533], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [527, 530], 'children': [{'type': 'Identifier', 'name': 'item', 'range': [529, 530], 'children': []}]}, {'type': 'Literal', 'name': '1', 'range': [532, 533], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [534, 540], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [536, 540], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [537, 538], 'children': []}, {'type': 'Identifier', 'name': 'board_error_message', 'range': [539, 540], 'children': []}]}]}]}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [547, 572], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [548, 562], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [549, 554], 'children': [{'type': 'Identifier', 'name': 'word', 'range': [551, 552], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [553, 554], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [556, 562], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [556, 559], 'children': [{'type': 'Identifier', 'name': 'word', 'range': [558, 559], 'children': []}]}, {'type': 'Literal', 'name': '0', 'range': [561, 562], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [563, 572], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [565, 571], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [566, 567], 'children': []}, {'type': 'Literal', 'name': 'The word parameter should be a string of length greater than 0.', 'range': [569, 570], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'len_board_column', 'range': [574, 583], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [576, 582], 'children': [{'type': 'MemberExpression', 'name': 'board[0]', 'range': [578, 581], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [578, 579], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [580, 581], 'children': []}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [584, 634], 'children': [{'type': 'VariableDecl', 'name': 'i', 'range': [585, 587], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [587, 590], 'children': [{'type': 'Identifier', 'name': 'len_board', 'range': [589, 590], 'children': []}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [591, 634], 'children': [{'type': 'ForStatement', 'name': 'for', 'range': [593, 634], 'children': [{'type': 'VariableDecl', 'name': 'j', 'range': [594, 596], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [596, 599], 'children': [{'type': 'Identifier', 'name': 'len_board_column', 'range': [598, 599], 'children': []}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [600, 634], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [602, 634], 'children': [{'type': 'CallExpression', 'name': 'exits_word', 'range': [603, 629], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [606, 607], 'children': []}, {'type': 'Identifier', 'name': 'word', 'range': [608, 609], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [610, 611], 'children': []}, {'type': 'Identifier', 'name': 'j', 'range': [612, 613], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [614, 615], 'children': []}, {'type': 'ObjectExpression', 'name': '{}', 'range': [616, 627], 'children': [{'type': 'CallExpression', 'name': 'get_point_key', 'range': [617, 626], 'children': [{'type': 'Identifier', 'name': 'len_board', 'range': [619, 620], 'children': []}, {'type': 'Identifier', 'name': 'len_board_column', 'range': [621, 622], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [623, 624], 'children': []}, {'type': 'Identifier', 'name': 'j', 'range': [625, 626], 'children': []}]}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [630, 634], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [632, 633], 'children': [{'type': 'Literal', 'name': 'True', 'range': [633, 634], 'children': []}]}]}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [636, 637], 'children': [{'type': 'Literal', 'name': 'False', 'range': [637, 638], 'children': []}]}]}]}]}
2025-01-08 09:23:17,820 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:25:46,442 - INFO - Step 5 result: {'type': 'Program', 'name': 'word_exists', 'range': [294, 638], 'children': [{'type': 'FunctionDecl', 'name': 'word_exists', 'range': [294, 638], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [296, 310], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [297, 305], 'children': [{'type': 'TypeAnnotation', 'name': 'list[list[str]]', 'range': [298, 305], 'children': []}]}, {'type': 'Parameter', 'name': 'word', 'range': [307, 309], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [308, 309], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [311, 313], 'children': []}, {'type': 'BlockStatement', 'name': 'body', 'range': [314, 638], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [316, 433], 'children': []}, {'type': 'VariableDecl', 'name': 'board_error_message', 'range': [440, 446], 'children': [{'type': 'Literal', 'name': 'The board should be a non empty matrix of single chars strings.', 'range': [444, 445], 'children': []}]}, {'type': 'VariableDecl', 'name': 'len_board', 'range': [449, 455], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [451, 454], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [453, 454], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [456, 479], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [457, 471], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [458, 463], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [460, 461], 'children': []}, {'type': 'Identifier', 'name': 'list', 'range': [462, 463], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [465, 471], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [465, 468], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [467, 468], 'children': []}]}, {'type': 'Literal', 'name': '0', 'range': [470, 471], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [472, 479], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [474, 478], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [475, 476], 'children': []}, {'type': 'Identifier', 'name': 'board_error_message', 'range': [477, 478], 'children': []}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [481, 510], 'children': [{'type': 'VariableDecl', 'name': 'row', 'range': [482, 484], 'children': []}, {'type': 'Identifier', 'name': 'board', 'range': [484, 485], 'children': []}, {'type': 'BlockStatement', 'name': 'block', 'range': [485, 510], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [487, 509], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [488, 502], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [489, 494], 'children': [{'type': 'Identifier', 'name': 'row', 'range': [491, 492], 'children': []}, {'type': 'Identifier', 'name': 'list', 'range': [493, 494], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [496, 502], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [496, 499], 'children': [{'type': 'Identifier', 'name': 'row', 'range': [498, 499], 'children': []}]}, {'type': 'Literal', 'name': '0', 'range': [501, 502], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [503, 509], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [505, 509], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [506, 507], 'children': []}, {'type': 'Identifier', 'name': 'board_error_message', 'range': [508, 509], 'children': []}]}]}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [512, 540], 'children': [{'type': 'VariableDecl', 'name': 'item', 'range': [513, 515], 'children': []}, {'type': 'Identifier', 'name': 'row', 'range': [515, 516], 'children': []}, {'type': 'BlockStatement', 'name': 'block', 'range': [516, 540], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [518, 540], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [519, 533], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [520, 525], 'children': [{'type': 'Identifier', 'name': 'item', 'range': [522, 523], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [524, 525], 'children': []}]}, {'type': 'BinaryExpression', 'name': '!=', 'range': [527, 533], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [527, 530], 'children': [{'type': 'Identifier', 'name': 'item', 'range': [529, 530], 'children': []}]}, {'type': 'Literal', 'name': '1', 'range': [532, 533], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [534, 540], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [536, 540], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [537, 538], 'children': []}, {'type': 'Identifier', 'name': 'board_error_message', 'range': [539, 540], 'children': []}]}]}]}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [547, 572], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [548, 562], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [549, 554], 'children': [{'type': 'Identifier', 'name': 'word', 'range': [551, 552], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [553, 554], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [556, 562], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [556, 559], 'children': [{'type': 'Identifier', 'name': 'word', 'range': [558, 559], 'children': []}]}, {'type': 'Literal', 'name': '0', 'range': [561, 562], 'children': []}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [563, 572], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [565, 571], 'children': [{'type': 'Identifier', 'name': 'ValueError', 'range': [566, 567], 'children': []}, {'type': 'Literal', 'name': 'The word parameter should be a string of length greater than 0.', 'range': [569, 570], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'len_board_column', 'range': [574, 583], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [576, 582], 'children': [{'type': 'MemberExpression', 'name': 'board[0]', 'range': [578, 581], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [578, 579], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [580, 581], 'children': []}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [584, 634], 'children': [{'type': 'VariableDecl', 'name': 'i', 'range': [585, 587], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [587, 590], 'children': [{'type': 'Identifier', 'name': 'len_board', 'range': [589, 590], 'children': []}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [591, 634], 'children': [{'type': 'ForStatement', 'name': 'for', 'range': [593, 634], 'children': [{'type': 'VariableDecl', 'name': 'j', 'range': [594, 596], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [596, 599], 'children': [{'type': 'Identifier', 'name': 'len_board_column', 'range': [598, 599], 'children': []}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [600, 634], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [602, 634], 'children': [{'type': 'CallExpression', 'name': 'exits_word', 'range': [603, 629], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [606, 607], 'children': []}, {'type': 'Identifier', 'name': 'word', 'range': [608, 609], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [610, 611], 'children': []}, {'type': 'Identifier', 'name': 'j', 'range': [612, 613], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [614, 615], 'children': []}, {'type': 'ObjectExpression', 'name': '{}', 'range': [616, 627], 'children': [{'type': 'CallExpression', 'name': 'get_point_key', 'range': [617, 626], 'children': [{'type': 'Identifier', 'name': 'len_board', 'range': [619, 620], 'children': []}, {'type': 'Identifier', 'name': 'len_board_column', 'range': [621, 622], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [623, 624], 'children': []}, {'type': 'Identifier', 'name': 'j', 'range': [625, 626], 'children': []}]}]}]}, {'type': 'BlockStatement', 'name': 'block', 'range': [630, 634], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [632, 633], 'children': [{'type': 'Literal', 'name': 'True', 'range': [633, 634], 'children': []}]}]}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [636, 637], 'children': [{'type': 'Literal', 'name': 'False', 'range': [637, 638], 'children': []}]}]}]}]}
2025-01-08 09:25:46,443 - INFO - Completed main AST analysis flow
2025-01-08 09:25:46,444 - INFO - Successfully processed chunk
2025-01-08 09:25:46,481 - INFO - Starting code generation from AST
2025-01-08 09:55:47,989 - ERROR - Error in get_code_from_ast: Expecting value: line 30 column 1 (char 29)
2025-01-08 09:55:47,990 - INFO - Starting static code similarity comparison
2025-01-08 09:55:47,993 - INFO - Static similarity result: {'final_score': 20.53, 'length_similarity': 0.0, 'token_similarity': 0.0, 'structure_similarity': 0.0, 'function_similarity': 100, 'complexity_similarity': 5.26, 'variable_similarity': 100}
