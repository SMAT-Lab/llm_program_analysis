2025-01-08 09:34:43,313 - INFO - Processing sample 64
2025-01-08 09:34:43,313 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:35:50,989 - INFO - Successfully split code into 5 top-level declarations
2025-01-08 09:35:50,990 - INFO - Processing chunk #0 (size=214 chars, start_index=0)
2025-01-08 09:35:50,991 - INFO - Processing chunk with 214 chars starting at index 0
2025-01-08 09:35:50,991 - INFO - Starting main AST analysis flow
2025-01-08 09:35:50,991 - INFO - Tokenized code into 4 tokens
2025-01-08 09:35:50,991 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:35:50,992 - INFO - Processing chunk #1 (size=59 chars, start_index=4)
2025-01-08 09:35:50,992 - INFO - Processing chunk with 59 chars starting at index 4
2025-01-08 09:35:50,992 - INFO - Starting main AST analysis flow
2025-01-08 09:35:50,992 - INFO - Tokenized code into 11 tokens
2025-01-08 09:35:50,993 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:35:50,994 - INFO - Processing chunk #2 (size=106 chars, start_index=15)
2025-01-08 09:35:50,994 - INFO - Processing chunk with 106 chars starting at index 15
2025-01-08 09:35:50,994 - INFO - Starting main AST analysis flow
2025-01-08 09:35:50,994 - INFO - Tokenized code into 26 tokens
2025-01-08 09:35:50,994 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:35:50,995 - INFO - Processing chunk #3 (size=1650 chars, start_index=41)
2025-01-08 09:35:50,997 - INFO - Processing chunk #4 (size=178 chars, start_index=135)
2025-01-08 09:35:50,997 - INFO - Processing chunk with 178 chars starting at index 135
2025-01-08 09:35:50,997 - INFO - Processing chunk with 1650 chars starting at index 41
2025-01-08 09:35:50,998 - INFO - Starting main AST analysis flow
2025-01-08 09:35:51,006 - INFO - Starting main AST analysis flow
2025-01-08 09:35:51,010 - INFO - Tokenized code into 53 tokens
2025-01-08 09:35:51,011 - INFO - Tokenized code into 94 tokens
2025-01-08 09:35:51,011 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:35:51,012 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:36:00,802 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 3], 'children': []}
2025-01-08 09:36:00,802 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:36:01,015 - INFO - Step 1 result: {'type': 'Program', 'name': 'generate_all_subsequences', 'range': [15, 40], 'children': []}
2025-01-08 09:36:01,015 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:36:01,047 - INFO - Step 1 result: {'type': 'Program', 'name': 'create_state_space_tree', 'range': [41, 134], 'children': []}
2025-01-08 09:36:01,047 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:36:02,038 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [4, 14], 'children': []}
2025-01-08 09:36:02,038 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:36:03,559 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [0, 3], 'children': [{'type': 'Comment', 'name': '', 'range': [1, 1], 'children': []}]}
2025-01-08 09:36:03,559 - INFO - Starting Step 3: AST simplification
2025-01-08 09:36:07,657 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [4, 14], 'children': [{'type': 'ImportFrom', 'name': '__future__', 'range': [4, 8], 'children': [{'type': 'Import', 'name': 'annotations', 'range': [6, 7], 'children': []}]}, {'type': 'ImportFrom', 'name': 'typing', 'range': [10, 14], 'children': [{'type': 'Import', 'name': 'Any', 'range': [12, 13], 'children': []}]}]}
2025-01-08 09:36:07,657 - INFO - Starting Step 3: AST simplification
2025-01-08 09:36:09,997 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [135, 187], 'children': [{'type': 'IfStatement', 'name': '', 'range': [135, 141], 'children': []}, {'type': 'VariableDeclaration', 'name': 'seq', 'range': [142, 156], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'generate_all_subsequences', 'range': [157, 161], 'children': []}, {'type': 'ExpressionStatement', 'name': '', 'range': [163, 168], 'children': []}, {'type': 'ExpressionStatement', 'name': '', 'range': [169, 181], 'children': []}, {'type': 'ExpressionStatement', 'name': '', 'range': [182, 186], 'children': []}]}
2025-01-08 09:36:09,998 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:36:11,978 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [0, 3], 'children': [{'type': 'Comment', 'name': '', 'range': [1, 1], 'children': [{'type': 'Literal', 'name': '\\n In this problem, we want to determine all possible subsequences \\n of the given sequence. We use backtracking to solve this problem. \\n  \\n Time complexity: O(2^n), \\n where n denotes the length of the given sequence. \\n', 'range': [1, 1], 'children': []}]}]}
2025-01-08 09:36:11,978 - INFO - Starting Step 4: AST normalization
2025-01-08 09:36:15,699 - INFO - Step 2 result: {'type': 'Program', 'name': 'generate_all_subsequences', 'range': [15, 40], 'children': [{'type': 'FunctionDeclaration', 'name': 'generate_all_subsequences', 'range': [15, 28], 'children': [{'type': 'Parameter', 'name': 'sequence', 'range': [18, 23], 'children': [{'type': 'TypeAnnotation', 'name': 'list[Any]', 'range': [20, 23], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [25, 27], 'children': []}]}, {'type': 'FunctionCall', 'name': 'create_state_space_tree', 'range': [30, 38], 'children': [{'type': 'Argument', 'name': 'sequence', 'range': [32, 32], 'children': []}, {'type': 'Argument', 'name': '[]', 'range': [34, 35], 'children': []}, {'type': 'Argument', 'name': '0', 'range': [37, 37], 'children': []}]}]}
2025-01-08 09:36:15,699 - INFO - Starting Step 3: AST simplification
2025-01-08 09:36:17,474 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [4, 14], 'children': [{'type': 'ImportFrom', 'name': '__future__', 'range': [4, 8], 'children': [{'type': 'Import', 'name': 'annotations', 'range': [6, 7], 'children': []}]}, {'type': 'ImportFrom', 'name': 'typing', 'range': [10, 14], 'children': [{'type': 'Import', 'name': 'Any', 'range': [12, 13], 'children': []}]}]}
2025-01-08 09:36:17,474 - INFO - Starting Step 4: AST normalization
2025-01-08 09:36:18,418 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [0, 3], 'children': [{'type': 'Comment', 'name': '', 'range': [1, 1], 'children': [{'type': 'Literal', 'name': '\\n In this problem, we want to determine all possible subsequences \\n of the given sequence. We use backtracking to solve this problem. \\n  \\n Time complexity: O(2^n), \\n where n denotes the length of the given sequence. \\n', 'range': [1, 1], 'children': []}]}]}
2025-01-08 09:36:18,418 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:36:23,170 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [4, 14], 'children': [{'type': 'ImportFromStatement', 'name': '__future__', 'range': [4, 8], 'children': [{'type': 'ImportSpecifier', 'name': 'annotations', 'range': [6, 7], 'children': []}]}, {'type': 'ImportFromStatement', 'name': 'typing', 'range': [10, 14], 'children': [{'type': 'ImportSpecifier', 'name': 'Any', 'range': [12, 13], 'children': []}]}]}
2025-01-08 09:36:23,171 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:36:23,409 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [0, 3], 'children': [{'type': 'Comment', 'name': '', 'range': [1, 1], 'children': [{'type': 'Literal', 'name': '\\n In this problem, we want to determine all possible subsequences \\n of the given sequence. We use backtracking to solve this problem. \\n  \\n Time complexity: O(2^n), \\n where n denotes the length of the given sequence. \\n', 'range': [1, 1], 'children': []}]}]}
2025-01-08 09:36:23,409 - INFO - Completed main AST analysis flow
2025-01-08 09:36:23,410 - INFO - Successfully processed chunk
2025-01-08 09:36:27,727 - INFO - Step 3 result: {'type': 'Program', 'name': 'generate_all_subsequences', 'range': [15, 40], 'children': [{'type': 'FunctionDeclaration', 'name': 'generate_all_subsequences', 'range': [15, 28], 'children': [{'type': 'Parameter', 'name': 'sequence', 'range': [18, 23], 'children': [{'type': 'TypeAnnotation', 'name': 'list[Any]', 'range': [20, 23], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [25, 27], 'children': []}]}, {'type': 'FunctionCall', 'name': 'create_state_space_tree', 'range': [30, 38], 'children': [{'type': 'Argument', 'name': 'sequence', 'range': [32, 32], 'children': []}, {'type': 'Argument', 'name': '[]', 'range': [34, 35], 'children': []}, {'type': 'Argument', 'name': '0', 'range': [37, 37], 'children': []}]}]}
2025-01-08 09:36:27,728 - INFO - Starting Step 4: AST normalization
2025-01-08 09:36:29,844 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [4, 14], 'children': [{'type': 'ImportFromStatement', 'name': '__future__', 'range': [4, 8], 'children': [{'type': 'ImportSpecifier', 'name': 'annotations', 'range': [6, 7], 'children': []}]}, {'type': 'ImportFromStatement', 'name': 'typing', 'range': [10, 14], 'children': [{'type': 'ImportSpecifier', 'name': 'Any', 'range': [12, 13], 'children': []}]}]}
2025-01-08 09:36:29,844 - INFO - Completed main AST analysis flow
2025-01-08 09:36:29,844 - INFO - Successfully processed chunk
2025-01-08 09:36:31,278 - INFO - Step 2 result: {'type': 'Program', 'name': 'create_state_space_tree', 'range': [41, 134], 'children': [{'type': 'FunctionDeclaration', 'name': 'create_state_space_tree', 'range': [41, 134], 'children': [{'type': 'Parameters', 'name': 'parameters', 'range': [43, 63], 'children': [{'type': 'Parameter', 'name': 'sequence', 'range': [45, 50], 'children': []}, {'type': 'Parameter', 'name': 'current_subsequence', 'range': [52, 57], 'children': []}, {'type': 'Parameter', 'name': 'index', 'range': [59, 61], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [64, 66], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [68, 134], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [69, 75], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [78, 94], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [79, 85], 'children': []}, {'type': 'Body', 'name': 'body', 'range': [87, 94], 'children': [{'type': 'PrintStatement', 'name': 'print_statement', 'range': [88, 91], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_statement', 'range': [93, 94], 'children': []}]}]}, {'type': 'FunctionCall', 'name': 'create_state_space_tree', 'range': [96, 105], 'children': [{'type': 'Arguments', 'name': 'arguments', 'range': [98, 104], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'expression_statement', 'range': [107, 116], 'children': [{'type': 'MethodCall', 'name': 'append', 'range': [109, 115], 'children': []}]}, {'type': 'FunctionCall', 'name': 'create_state_space_tree', 'range': [117, 126], 'children': [{'type': 'Arguments', 'name': 'arguments', 'range': [119, 125], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'expression_statement', 'range': [128, 133], 'children': [{'type': 'MethodCall', 'name': 'pop', 'range': [130, 132], 'children': []}]}]}]}]}
2025-01-08 09:36:31,278 - INFO - Starting Step 3: AST simplification
2025-01-08 09:36:38,928 - INFO - Step 4 result: {'type': 'Program', 'name': 'generate_all_subsequences', 'range': [15, 40], 'children': [{'type': 'FunctionDecl', 'name': 'generate_all_subsequences', 'range': [15, 28], 'children': [{'type': 'Parameter', 'name': 'sequence', 'range': [18, 23], 'children': [{'type': 'TypeAnnotation', 'name': 'list[Any]', 'range': [20, 23], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [25, 27], 'children': []}]}, {'type': 'CallExpression', 'name': 'create_state_space_tree', 'range': [30, 38], 'children': [{'type': 'Argument', 'name': 'sequence', 'range': [32, 32], 'children': []}, {'type': 'Argument', 'name': '[]', 'range': [34, 35], 'children': []}, {'type': 'Argument', 'name': '0', 'range': [37, 37], 'children': []}]}]}
2025-01-08 09:36:38,928 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:36:40,669 - INFO - Step 2 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [135, 141], 'children': [{'type': 'Condition', 'name': '', 'range': [135, 140], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [135, 139], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [136, 136], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [137, 138], 'children': []}, {'type': 'StringLiteral', 'name': '__main__', 'range': [139, 139], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'seq', 'range': [142, 156], 'children': [{'type': 'TypeAnnotation', 'name': '', 'range': [143, 147], 'children': [{'type': 'ListType', 'name': '', 'range': [144, 147], 'children': [{'type': 'Type', 'name': 'Any', 'range': [146, 146], 'children': []}]}]}, {'type': 'Assignment', 'name': '', 'range': [148, 155], 'children': [{'type': 'ArrayLiteral', 'name': '', 'range': [149, 155], 'children': [{'type': 'NumberLiteral', 'name': '1', 'range': [150, 150], 'children': []}, {'type': 'NumberLiteral', 'name': '2', 'range': [152, 152], 'children': []}, {'type': 'NumberLiteral', 'name': '3', 'range': [154, 154], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'generate_all_subsequences', 'range': [157, 161], 'children': [{'type': 'Parameter', 'name': 'seq', 'range': [159, 159], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [163, 168], 'children': [{'type': 'CallExpression', 'name': '', 'range': [163, 167], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [163, 165], 'children': [{'type': 'Identifier', 'name': 'seq', 'range': [163, 163], 'children': []}, {'type': 'Property', 'name': 'clear', 'range': [165, 165], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [169, 181], 'children': [{'type': 'CallExpression', 'name': '', 'range': [169, 180], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [169, 171], 'children': [{'type': 'Identifier', 'name': 'seq', 'range': [169, 169], 'children': []}, {'type': 'Property', 'name': 'extend', 'range': [171, 171], 'children': []}]}, {'type': 'ArrayLiteral', 'name': '', 'range': [173, 179], 'children': [{'type': 'StringLiteral', 'name': 'A', 'range': [174, 174], 'children': []}, {'type': 'StringLiteral', 'name': 'B', 'range': [176, 176], 'children': []}, {'type': 'StringLiteral', 'name': 'C', 'range': [178, 178], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [182, 186], 'children': [{'type': 'CallExpression', 'name': '', 'range': [182, 185], 'children': [{'type': 'Identifier', 'name': 'generate_all_subsequences', 'range': [182, 182], 'children': []}, {'type': 'Identifier', 'name': 'seq', 'range': [184, 184], 'children': []}]}]}]}
2025-01-08 09:36:40,669 - INFO - Starting Step 3: AST simplification
2025-01-08 09:36:47,654 - INFO - Step 5 result: {'type': 'Program', 'name': 'generate_all_subsequences', 'range': [15, 40], 'children': [{'type': 'FunctionDecl', 'name': 'generate_all_subsequences', 'range': [15, 28], 'children': [{'type': 'Parameter', 'name': 'sequence', 'range': [18, 23], 'children': [{'type': 'TypeAnnotation', 'name': 'list[Any]', 'range': [20, 23], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [25, 27], 'children': []}]}, {'type': 'CallExpression', 'name': 'create_state_space_tree', 'range': [30, 38], 'children': [{'type': 'Argument', 'name': 'sequence', 'range': [32, 32], 'children': []}, {'type': 'Argument', 'name': '[]', 'range': [34, 35], 'children': []}, {'type': 'Argument', 'name': '0', 'range': [37, 37], 'children': []}]}]}
2025-01-08 09:36:47,655 - INFO - Completed main AST analysis flow
2025-01-08 09:36:47,655 - INFO - Successfully processed chunk
2025-01-08 09:36:50,979 - INFO - Step 3 result: {'type': 'Program', 'name': 'create_state_space_tree', 'range': [41, 134], 'children': [{'type': 'FunctionDeclaration', 'name': 'create_state_space_tree', 'range': [41, 134], 'children': [{'type': 'Parameters', 'name': 'parameters', 'range': [43, 63], 'children': [{'type': 'Parameter', 'name': 'sequence', 'range': [45, 50], 'children': []}, {'type': 'Parameter', 'name': 'current_subsequence', 'range': [52, 57], 'children': []}, {'type': 'Parameter', 'name': 'index', 'range': [59, 61], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [64, 66], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [68, 134], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [69, 75], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [78, 94], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [79, 85], 'children': []}, {'type': 'Body', 'name': 'body', 'range': [87, 94], 'children': [{'type': 'PrintStatement', 'name': 'print_statement', 'range': [88, 91], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_statement', 'range': [93, 94], 'children': []}]}]}, {'type': 'FunctionCall', 'name': 'create_state_space_tree', 'range': [96, 105], 'children': [{'type': 'Arguments', 'name': 'arguments', 'range': [98, 104], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'expression_statement', 'range': [107, 116], 'children': [{'type': 'MethodCall', 'name': 'append', 'range': [109, 115], 'children': []}]}, {'type': 'FunctionCall', 'name': 'create_state_space_tree', 'range': [117, 126], 'children': [{'type': 'Arguments', 'name': 'arguments', 'range': [119, 125], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'expression_statement', 'range': [128, 133], 'children': [{'type': 'MethodCall', 'name': 'pop', 'range': [130, 132], 'children': []}]}]}]}]}
2025-01-08 09:36:50,979 - INFO - Starting Step 4: AST normalization
2025-01-08 09:37:13,556 - INFO - Step 4 result: {'type': 'Program', 'name': 'create_state_space_tree', 'range': [41, 134], 'children': [{'type': 'FunctionDecl', 'name': 'create_state_space_tree', 'range': [41, 134], 'children': [{'type': 'Parameters', 'name': 'parameters', 'range': [43, 63], 'children': [{'type': 'Parameter', 'name': 'sequence', 'range': [45, 50], 'children': []}, {'type': 'Parameter', 'name': 'current_subsequence', 'range': [52, 57], 'children': []}, {'type': 'Parameter', 'name': 'index', 'range': [59, 61], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [64, 66], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [68, 134], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [69, 75], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [78, 94], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [79, 85], 'children': []}, {'type': 'Body', 'name': 'body', 'range': [87, 94], 'children': [{'type': 'CallExpression', 'name': 'print_statement', 'range': [88, 91], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_statement', 'range': [93, 94], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'create_state_space_tree', 'range': [96, 105], 'children': [{'type': 'Arguments', 'name': 'arguments', 'range': [98, 104], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'expression_statement', 'range': [107, 116], 'children': [{'type': 'CallExpression', 'name': 'append', 'range': [109, 115], 'children': []}]}, {'type': 'CallExpression', 'name': 'create_state_space_tree', 'range': [117, 126], 'children': [{'type': 'Arguments', 'name': 'arguments', 'range': [119, 125], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'expression_statement', 'range': [128, 133], 'children': [{'type': 'CallExpression', 'name': 'pop', 'range': [130, 132], 'children': []}]}]}]}]}
2025-01-08 09:37:13,557 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:37:15,537 - INFO - Step 3 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [135, 141], 'children': [{'type': 'Condition', 'name': '', 'range': [135, 140], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [135, 139], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [136, 136], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [137, 138], 'children': []}, {'type': 'StringLiteral', 'name': '__main__', 'range': [139, 139], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'seq', 'range': [142, 156], 'children': [{'type': 'TypeAnnotation', 'name': '', 'range': [143, 147], 'children': [{'type': 'ListType', 'name': '', 'range': [144, 147], 'children': [{'type': 'Type', 'name': 'Any', 'range': [146, 146], 'children': []}]}]}, {'type': 'Assignment', 'name': '', 'range': [148, 155], 'children': [{'type': 'ArrayLiteral', 'name': '', 'range': [149, 155], 'children': [{'type': 'NumberLiteral', 'name': '1', 'range': [150, 150], 'children': []}, {'type': 'NumberLiteral', 'name': '2', 'range': [152, 152], 'children': []}, {'type': 'NumberLiteral', 'name': '3', 'range': [154, 154], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'generate_all_subsequences', 'range': [157, 161], 'children': [{'type': 'Parameter', 'name': 'seq', 'range': [159, 159], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [163, 168], 'children': [{'type': 'CallExpression', 'name': '', 'range': [163, 167], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [163, 165], 'children': [{'type': 'Identifier', 'name': 'seq', 'range': [163, 163], 'children': []}, {'type': 'Property', 'name': 'clear', 'range': [165, 165], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [169, 181], 'children': [{'type': 'CallExpression', 'name': '', 'range': [169, 180], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [169, 171], 'children': [{'type': 'Identifier', 'name': 'seq', 'range': [169, 169], 'children': []}, {'type': 'Property', 'name': 'extend', 'range': [171, 171], 'children': []}]}, {'type': 'ArrayLiteral', 'name': '', 'range': [173, 179], 'children': [{'type': 'StringLiteral', 'name': 'A', 'range': [174, 174], 'children': []}, {'type': 'StringLiteral', 'name': 'B', 'range': [176, 176], 'children': []}, {'type': 'StringLiteral', 'name': 'C', 'range': [178, 178], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [182, 186], 'children': [{'type': 'CallExpression', 'name': '', 'range': [182, 185], 'children': [{'type': 'Identifier', 'name': 'generate_all_subsequences', 'range': [182, 182], 'children': []}, {'type': 'Identifier', 'name': 'seq', 'range': [184, 184], 'children': []}]}]}]}
2025-01-08 09:37:15,537 - INFO - Starting Step 4: AST normalization
2025-01-08 09:37:33,632 - INFO - Step 5 result: {'type': 'Program', 'name': 'create_state_space_tree', 'range': [41, 134], 'children': [{'type': 'FunctionDecl', 'name': 'create_state_space_tree', 'range': [41, 134], 'children': [{'type': 'Parameters', 'name': 'parameters', 'range': [43, 63], 'children': [{'type': 'Parameter', 'name': 'sequence', 'range': [45, 50], 'children': []}, {'type': 'Parameter', 'name': 'current_subsequence', 'range': [52, 57], 'children': []}, {'type': 'Parameter', 'name': 'index', 'range': [59, 61], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [64, 66], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [68, 134], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [69, 75], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [78, 94], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [79, 85], 'children': []}, {'type': 'Body', 'name': 'body', 'range': [87, 94], 'children': [{'type': 'CallExpression', 'name': 'print_statement', 'range': [88, 91], 'children': []}, {'type': 'ReturnStatement', 'name': 'return_statement', 'range': [93, 94], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'create_state_space_tree', 'range': [96, 105], 'children': [{'type': 'Arguments', 'name': 'arguments', 'range': [98, 104], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'expression_statement', 'range': [107, 116], 'children': [{'type': 'CallExpression', 'name': 'append', 'range': [109, 115], 'children': []}]}, {'type': 'CallExpression', 'name': 'create_state_space_tree', 'range': [117, 126], 'children': [{'type': 'Arguments', 'name': 'arguments', 'range': [119, 125], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'expression_statement', 'range': [128, 133], 'children': [{'type': 'CallExpression', 'name': 'pop', 'range': [130, 132], 'children': []}]}]}]}]}
2025-01-08 09:37:33,632 - INFO - Completed main AST analysis flow
2025-01-08 09:37:33,633 - INFO - Successfully processed chunk
2025-01-08 09:37:51,851 - INFO - Step 4 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [135, 141], 'children': [{'type': 'Condition', 'name': '', 'range': [135, 140], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [135, 139], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [136, 136], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [137, 138], 'children': []}, {'type': 'StringLiteral', 'name': '__main__', 'range': [139, 139], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'seq', 'range': [142, 156], 'children': [{'type': 'TypeAnnotation', 'name': '', 'range': [143, 147], 'children': [{'type': 'ListType', 'name': '', 'range': [144, 147], 'children': [{'type': 'Type', 'name': 'Any', 'range': [146, 146], 'children': []}]}]}, {'type': 'Assignment', 'name': '', 'range': [148, 155], 'children': [{'type': 'ArrayLiteral', 'name': '', 'range': [149, 155], 'children': [{'type': 'NumberLiteral', 'name': '1', 'range': [150, 150], 'children': []}, {'type': 'NumberLiteral', 'name': '2', 'range': [152, 152], 'children': []}, {'type': 'NumberLiteral', 'name': '3', 'range': [154, 154], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': 'generate_all_subsequences', 'range': [157, 161], 'children': [{'type': 'Parameter', 'name': 'seq', 'range': [159, 159], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [163, 168], 'children': [{'type': 'CallExpression', 'name': '', 'range': [163, 167], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [163, 165], 'children': [{'type': 'Identifier', 'name': 'seq', 'range': [163, 163], 'children': []}, {'type': 'Property', 'name': 'clear', 'range': [165, 165], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [169, 181], 'children': [{'type': 'CallExpression', 'name': '', 'range': [169, 180], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [169, 171], 'children': [{'type': 'Identifier', 'name': 'seq', 'range': [169, 169], 'children': []}, {'type': 'Property', 'name': 'extend', 'range': [171, 171], 'children': []}]}, {'type': 'ArrayLiteral', 'name': '', 'range': [173, 179], 'children': [{'type': 'StringLiteral', 'name': 'A', 'range': [174, 174], 'children': []}, {'type': 'StringLiteral', 'name': 'B', 'range': [176, 176], 'children': []}, {'type': 'StringLiteral', 'name': 'C', 'range': [178, 178], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [182, 186], 'children': [{'type': 'CallExpression', 'name': '', 'range': [182, 185], 'children': [{'type': 'Identifier', 'name': 'generate_all_subsequences', 'range': [182, 182], 'children': []}, {'type': 'Identifier', 'name': 'seq', 'range': [184, 184], 'children': []}]}]}]}
2025-01-08 09:37:51,851 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:38:29,790 - INFO - Step 5 result: {'type': 'Program', 'name': 'MainOrSomething', 'range': [135, 186], 'children': [{'type': 'IfStatement', 'name': '', 'range': [135, 141], 'children': [{'type': 'Condition', 'name': '', 'range': [135, 140], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [135, 139], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [136, 136], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [137, 138], 'children': []}, {'type': 'StringLiteral', 'name': '__main__', 'range': [139, 139], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'seq', 'range': [142, 156], 'children': [{'type': 'TypeAnnotation', 'name': '', 'range': [143, 147], 'children': [{'type': 'ListType', 'name': '', 'range': [144, 147], 'children': [{'type': 'Type', 'name': 'Any', 'range': [146, 146], 'children': []}]}]}, {'type': 'Assignment', 'name': '', 'range': [148, 155], 'children': [{'type': 'ArrayLiteral', 'name': '', 'range': [149, 155], 'children': [{'type': 'NumberLiteral', 'name': '1', 'range': [150, 150], 'children': []}, {'type': 'NumberLiteral', 'name': '2', 'range': [152, 152], 'children': []}, {'type': 'NumberLiteral', 'name': '3', 'range': [154, 154], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': 'generate_all_subsequences', 'range': [157, 161], 'children': [{'type': 'Parameter', 'name': 'seq', 'range': [159, 159], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [163, 168], 'children': [{'type': 'CallExpression', 'name': '', 'range': [163, 167], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [163, 165], 'children': [{'type': 'Identifier', 'name': 'seq', 'range': [163, 163], 'children': []}, {'type': 'Property', 'name': 'clear', 'range': [165, 165], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [169, 181], 'children': [{'type': 'CallExpression', 'name': '', 'range': [169, 180], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [169, 171], 'children': [{'type': 'Identifier', 'name': 'seq', 'range': [169, 169], 'children': []}, {'type': 'Property', 'name': 'extend', 'range': [171, 171], 'children': []}]}, {'type': 'ArrayLiteral', 'name': '', 'range': [173, 179], 'children': [{'type': 'StringLiteral', 'name': 'A', 'range': [174, 174], 'children': []}, {'type': 'StringLiteral', 'name': 'B', 'range': [176, 176], 'children': []}, {'type': 'StringLiteral', 'name': 'C', 'range': [178, 178], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [182, 186], 'children': [{'type': 'CallExpression', 'name': '', 'range': [182, 185], 'children': [{'type': 'Identifier', 'name': 'generate_all_subsequences', 'range': [182, 182], 'children': []}, {'type': 'Identifier', 'name': 'seq', 'range': [184, 184], 'children': []}]}]}]}
2025-01-08 09:38:29,790 - INFO - Completed main AST analysis flow
2025-01-08 09:38:29,790 - INFO - Successfully processed chunk
2025-01-08 09:38:29,799 - INFO - Starting code generation from AST
2025-01-08 09:38:52,012 - INFO - Successfully generated code from AST
2025-01-08 09:38:52,012 - INFO - Starting static code similarity comparison
2025-01-08 09:38:52,016 - INFO - Static similarity result: {'final_score': 67.04, 'length_similarity': 80.07, 'token_similarity': 32.76, 'structure_similarity': 90.79, 'function_similarity': 100, 'complexity_similarity': 25.0, 'variable_similarity': 100}
