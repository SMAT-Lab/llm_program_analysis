2025-01-08 09:52:35,118 - INFO - Processing sample 88
2025-01-08 09:52:35,118 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:52:37,494 - INFO - Successfully split code into 2 top-level declarations
2025-01-08 09:52:37,495 - INFO - Processing chunk #0 (size=1039 chars, start_index=0)
2025-01-08 09:52:37,496 - INFO - Processing chunk #1 (size=72 chars, start_index=56)
2025-01-08 09:52:37,496 - INFO - Processing chunk with 1039 chars starting at index 0
2025-01-08 09:52:37,497 - INFO - Processing chunk with 72 chars starting at index 56
2025-01-08 09:52:37,497 - INFO - Starting main AST analysis flow
2025-01-08 09:52:37,497 - INFO - Starting main AST analysis flow
2025-01-08 09:52:37,498 - INFO - Tokenized code into 56 tokens
2025-01-08 09:52:37,498 - INFO - Tokenized code into 20 tokens
2025-01-08 09:52:37,499 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:52:37,499 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:52:39,641 - INFO - Step 1 result: {'type': 'Program', 'name': 'binary_count_setbits', 'range': [0, 55], 'children': []}
2025-01-08 09:52:39,641 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:52:45,891 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [56, 75], 'children': [{'type': 'IfStatement', 'name': '', 'range': [58, 63], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [59, 62], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [59, 59], 'children': []}, {'type': 'Literal', 'name': '__main__', 'range': [62, 62], 'children': []}]}]}, {'type': 'ImportStatement', 'name': '', 'range': [65, 66], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [66, 66], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [69, 73], 'children': [{'type': 'CallExpression', 'name': '', 'range': [69, 73], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [69, 71], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [69, 69], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [71, 71], 'children': []}]}]}]}]}
2025-01-08 09:52:45,891 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:52:50,899 - INFO - Step 2 result: {'type': 'Program', 'name': 'binary_count_setbits', 'range': [0, 55], 'children': [{'type': 'FunctionDeclaration', 'name': 'binary_count_setbits', 'range': [0, 55], 'children': [{'type': 'Parameter', 'name': 'a', 'range': [3, 5], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [9, 9], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [12, 16], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [18, 29], 'children': [{'type': 'Condition', 'name': 'a < 0', 'range': [19, 21], 'children': []}, {'type': 'RaiseStatement', 'name': 'ValueError', 'range': [24, 28], 'children': [{'type': 'Message', 'name': 'Input value must be a positive integer', 'range': [27, 27], 'children': []}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [30, 44], 'children': [{'type': 'Condition', 'name': 'isinstance(a, float)', 'range': [31, 36], 'children': []}, {'type': 'RaiseStatement', 'name': 'TypeError', 'range': [39, 43], 'children': [{'type': 'Message', 'name': "Input value must be a 'int' type", 'range': [42, 42], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [45, 55], 'children': [{'type': 'Expression', 'name': 'bin(a).count("1")', 'range': [46, 54], 'children': []}]}]}]}
2025-01-08 09:52:50,899 - INFO - Starting Step 3: AST simplification
2025-01-08 09:52:56,895 - INFO - Step 2 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [58, 63], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [59, 62], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [59, 59], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [60, 61], 'children': []}, {'type': 'Literal', 'name': '__main__', 'range': [62, 62], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [64, 75], 'children': [{'type': 'ImportStatement', 'name': '', 'range': [65, 66], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [66, 66], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [69, 73], 'children': [{'type': 'CallExpression', 'name': '', 'range': [69, 73], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [69, 71], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [69, 69], 'children': []}, {'type': 'Operator', 'name': '.', 'range': [70, 70], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [71, 71], 'children': []}]}, {'type': 'Arguments', 'name': '', 'range': [72, 73], 'children': []}]}]}]}]}]}
2025-01-08 09:52:56,895 - INFO - Starting Step 3: AST simplification
2025-01-08 09:53:03,556 - INFO - Step 3 result: {'type': 'Program', 'name': 'binary_count_setbits', 'range': [0, 55], 'children': [{'type': 'FunctionDeclaration', 'name': 'binary_count_setbits', 'range': [0, 55], 'children': [{'type': 'Parameter', 'name': 'a', 'range': [3, 5], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [9, 9], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [12, 16], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [18, 29], 'children': [{'type': 'Condition', 'name': 'a < 0', 'range': [19, 21], 'children': []}, {'type': 'RaiseStatement', 'name': 'ValueError', 'range': [24, 28], 'children': [{'type': 'Message', 'name': 'Input value must be a positive integer', 'range': [27, 27], 'children': []}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [30, 44], 'children': [{'type': 'Condition', 'name': 'isinstance(a, float)', 'range': [31, 36], 'children': []}, {'type': 'RaiseStatement', 'name': 'TypeError', 'range': [39, 43], 'children': [{'type': 'Message', 'name': "Input value must be a 'int' type", 'range': [42, 42], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [45, 55], 'children': [{'type': 'Expression', 'name': 'bin(a).count("1")', 'range': [46, 54], 'children': []}]}]}]}
2025-01-08 09:53:03,556 - INFO - Starting Step 4: AST normalization
2025-01-08 09:53:06,322 - INFO - Step 3 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [58, 63], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [59, 62], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [59, 59], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [60, 61], 'children': []}, {'type': 'Literal', 'name': '__main__', 'range': [62, 62], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [64, 75], 'children': [{'type': 'ImportStatement', 'name': '', 'range': [65, 66], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [66, 66], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [69, 73], 'children': [{'type': 'CallExpression', 'name': '', 'range': [69, 73], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [69, 71], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [69, 69], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [71, 71], 'children': []}]}]}]}]}]}]}
2025-01-08 09:53:06,322 - INFO - Starting Step 4: AST normalization
2025-01-08 09:53:15,058 - INFO - Step 4 result: {'type': 'Program', 'name': 'binary_count_setbits', 'range': [0, 55], 'children': [{'type': 'FunctionDecl', 'name': 'binary_count_setbits', 'range': [0, 55], 'children': [{'type': 'Parameter', 'name': 'a', 'range': [3, 5], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [9, 9], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [12, 16], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [18, 29], 'children': [{'type': 'Condition', 'name': 'a < 0', 'range': [19, 21], 'children': []}, {'type': 'RaiseStatement', 'name': 'ValueError', 'range': [24, 28], 'children': [{'type': 'Message', 'name': 'Input value must be a positive integer', 'range': [27, 27], 'children': []}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [30, 44], 'children': [{'type': 'Condition', 'name': 'isinstance(a, float)', 'range': [31, 36], 'children': []}, {'type': 'RaiseStatement', 'name': 'TypeError', 'range': [39, 43], 'children': [{'type': 'Message', 'name': "Input value must be a 'int' type", 'range': [42, 42], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [45, 55], 'children': [{'type': 'CallExpression', 'name': 'bin(a).count("1")', 'range': [46, 54], 'children': []}]}]}]}
2025-01-08 09:53:15,059 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:53:16,288 - INFO - Step 4 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [58, 63], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [59, 62], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [59, 59], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [60, 61], 'children': []}, {'type': 'Literal', 'name': '__main__', 'range': [62, 62], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [64, 75], 'children': [{'type': 'ImportStatement', 'name': '', 'range': [65, 66], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [66, 66], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [69, 73], 'children': [{'type': 'CallExpression', 'name': '', 'range': [69, 73], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [69, 71], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [69, 69], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [71, 71], 'children': []}]}]}]}]}]}]}
2025-01-08 09:53:16,288 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:53:27,116 - INFO - Step 5 result: {'type': 'Program', 'name': 'binary_count_setbits', 'range': [0, 55], 'children': [{'type': 'FunctionDecl', 'name': 'binary_count_setbits', 'range': [0, 55], 'children': [{'type': 'Parameter', 'name': 'a', 'range': [3, 5], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [9, 9], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [12, 16], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [18, 29], 'children': [{'type': 'Condition', 'name': 'a < 0', 'range': [19, 21], 'children': []}, {'type': 'RaiseStatement', 'name': 'ValueError', 'range': [24, 28], 'children': [{'type': 'Message', 'name': 'Input value must be a positive integer', 'range': [27, 27], 'children': []}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [30, 44], 'children': [{'type': 'Condition', 'name': 'isinstance(a, float)', 'range': [31, 36], 'children': []}, {'type': 'RaiseStatement', 'name': 'TypeError', 'range': [39, 43], 'children': [{'type': 'Message', 'name': "Input value must be a 'int' type", 'range': [42, 42], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [45, 55], 'children': [{'type': 'CallExpression', 'name': 'bin(a).count("1")', 'range': [46, 54], 'children': []}]}]}]}
2025-01-08 09:53:27,116 - INFO - Completed main AST analysis flow
2025-01-08 09:53:27,117 - INFO - Successfully processed chunk
2025-01-08 09:53:27,513 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainOrSomething', 'range': [58, 75], 'children': [{'type': 'IfStatement', 'name': '', 'range': [58, 63], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [59, 62], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [59, 59], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [60, 61], 'children': []}, {'type': 'Literal', 'name': '__main__', 'range': [62, 62], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [64, 75], 'children': [{'type': 'ImportStatement', 'name': '', 'range': [65, 66], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [66, 66], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [69, 73], 'children': [{'type': 'CallExpression', 'name': '', 'range': [69, 73], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [69, 71], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [69, 69], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [71, 71], 'children': []}]}]}]}]}]}]}]}
2025-01-08 09:53:27,513 - INFO - Completed main AST analysis flow
2025-01-08 09:53:27,514 - INFO - Successfully processed chunk
2025-01-08 09:53:27,518 - INFO - Starting code generation from AST
2025-01-08 09:53:34,479 - INFO - Successfully generated code from AST
2025-01-08 09:53:34,480 - INFO - Starting static code similarity comparison
2025-01-08 09:53:34,483 - INFO - Static similarity result: {'final_score': 60.5, 'length_similarity': 60.9, 'token_similarity': 19.12, 'structure_similarity': 89.19, 'function_similarity': 100, 'complexity_similarity': 33.33, 'variable_similarity': 100}
