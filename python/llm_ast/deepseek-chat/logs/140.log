2025-01-08 10:17:00,011 - INFO - Processing sample 140
2025-01-08 10:17:00,012 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 10:17:07,862 - INFO - Successfully split code into 14 top-level declarations
2025-01-08 10:17:07,866 - INFO - Processing chunk #0 (size=80 chars, start_index=0)
2025-01-08 10:17:07,867 - INFO - Processing chunk with 80 chars starting at index 0
2025-01-08 10:17:07,867 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,867 - INFO - Tokenized code into 20 tokens
2025-01-08 10:17:07,867 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:07,868 - INFO - Processing chunk #1 (size=45 chars, start_index=20)
2025-01-08 10:17:07,869 - INFO - Processing chunk with 45 chars starting at index 20
2025-01-08 10:17:07,869 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,869 - INFO - Tokenized code into 10 tokens
2025-01-08 10:17:07,869 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:07,871 - INFO - Processing chunk #2 (size=508 chars, start_index=30)
2025-01-08 10:17:07,871 - INFO - Processing chunk with 508 chars starting at index 30
2025-01-08 10:17:07,871 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,871 - INFO - Tokenized code into 124 tokens
2025-01-08 10:17:07,871 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:07,877 - INFO - Processing chunk #3 (size=628 chars, start_index=154)
2025-01-08 10:17:07,877 - INFO - Processing chunk with 628 chars starting at index 154
2025-01-08 10:17:07,877 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,878 - INFO - Tokenized code into 152 tokens
2025-01-08 10:17:07,878 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:07,883 - INFO - Processing chunk #4 (size=347 chars, start_index=306)
2025-01-08 10:17:07,883 - INFO - Processing chunk with 347 chars starting at index 306
2025-01-08 10:17:07,883 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,885 - INFO - Processing chunk #5 (size=266 chars, start_index=401)
2025-01-08 10:17:07,889 - INFO - Tokenized code into 95 tokens
2025-01-08 10:17:07,894 - INFO - Processing chunk #6 (size=134 chars, start_index=474)
2025-01-08 10:17:07,894 - INFO - Processing chunk with 266 chars starting at index 401
2025-01-08 10:17:07,896 - INFO - Processing chunk #7 (size=35 chars, start_index=510)
2025-01-08 10:17:07,896 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:07,897 - INFO - Processing chunk with 134 chars starting at index 474
2025-01-08 10:17:07,897 - INFO - Processing chunk #8 (size=366 chars, start_index=523)
2025-01-08 10:17:07,897 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,898 - INFO - Processing chunk with 35 chars starting at index 510
2025-01-08 10:17:07,899 - INFO - Processing chunk #9 (size=270 chars, start_index=613)
2025-01-08 10:17:07,900 - INFO - Processing chunk #10 (size=2762 chars, start_index=679)
2025-01-08 10:17:07,901 - INFO - Processing chunk #11 (size=19 chars, start_index=1245)
2025-01-08 10:17:07,902 - INFO - Processing chunk #12 (size=133 chars, start_index=1254)
2025-01-08 10:17:07,906 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,907 - INFO - Processing chunk with 366 chars starting at index 523
2025-01-08 10:17:07,907 - INFO - Processing chunk #13 (size=255 chars, start_index=1291)
2025-01-08 10:17:07,908 - INFO - Tokenized code into 73 tokens
2025-01-08 10:17:07,909 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,909 - INFO - Processing chunk with 270 chars starting at index 613
2025-01-08 10:17:07,918 - INFO - Processing chunk with 2762 chars starting at index 679
2025-01-08 10:17:07,920 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,918 - INFO - Processing chunk with 133 chars starting at index 1254
2025-01-08 10:17:07,919 - INFO - Tokenized code into 36 tokens
2025-01-08 10:17:07,919 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,919 - INFO - Processing chunk with 255 chars starting at index 1291
2025-01-08 10:17:07,920 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:07,920 - INFO - Tokenized code into 13 tokens
2025-01-08 10:17:07,920 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,918 - INFO - Processing chunk with 19 chars starting at index 1245
2025-01-08 10:17:07,921 - INFO - Tokenized code into 566 tokens
2025-01-08 10:17:07,922 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,922 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:07,922 - INFO - Tokenized code into 90 tokens
2025-01-08 10:17:07,923 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,927 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:07,928 - INFO - Tokenized code into 66 tokens
2025-01-08 10:17:07,928 - INFO - Starting main AST analysis flow
2025-01-08 10:17:07,928 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:07,929 - INFO - Tokenized code into 37 tokens
2025-01-08 10:17:07,933 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:07,934 - INFO - Tokenized code into 55 tokens
2025-01-08 10:17:07,935 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:07,935 - INFO - Tokenized code into 9 tokens
2025-01-08 10:17:07,945 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:07,950 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:07,955 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:17:09,968 - INFO - Step 1 result: {'type': 'Program', 'name': '__convert_list', 'range': [30, 153], 'children': []}
2025-01-08 10:17:09,970 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:10,118 - INFO - Step 1 result: {'type': 'Program', 'name': 'ConversionError', 'range': [20, 29], 'children': []}
2025-01-08 10:17:10,118 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:10,192 - INFO - Step 1 result: {'type': 'Program', 'name': '__convert_str', 'range': [474, 509], 'children': []}
2025-01-08 10:17:10,192 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:10,198 - INFO - Step 1 result: {'type': 'Program', 'name': '__convert_tuple', 'range': [306, 400], 'children': []}
2025-01-08 10:17:10,198 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:10,209 - INFO - Step 1 result: {'type': 'Program', 'name': '__convert_num', 'range': [523, 612], 'children': []}
2025-01-08 10:17:10,209 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:10,290 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [1245, 1253], 'children': []}
2025-01-08 10:17:10,290 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:10,326 - INFO - Step 1 result: {'type': 'Program', 'name': '__convert_dict', 'range': [154, 305], 'children': []}
2025-01-08 10:17:10,326 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:10,376 - INFO - Step 1 result: {'type': 'Program', 'name': '__convert_set', 'range': [401, 473], 'children': []}
2025-01-08 10:17:10,376 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:10,445 - INFO - Step 1 result: {'type': 'Program', 'name': '__convert_bool', 'range': [613, 677], 'children': []}
2025-01-08 10:17:10,445 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:10,452 - INFO - Step 1 result: {'type': 'Program', 'name': 'convert', 'range': [1291, 1345], 'children': []}
2025-01-08 10:17:10,452 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:10,833 - INFO - Step 1 result: {'type': 'Program', 'name': '_try_convert', 'range': [679, 1244], 'children': []}
2025-01-08 10:17:10,833 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:11,109 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 19], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 1], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 16], 'children': []}]}
2025-01-08 10:17:11,109 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:13,820 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [510, 522], 'children': [{'type': 'VariableDeclaration', 'name': 'NUM', 'range': [510, 519], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [511, 519], 'children': [{'type': 'CallExpression', 'name': 'TypeVar', 'range': [512, 519], 'children': [{'type': 'Literal', 'name': '"NUM"', 'range': [514, 514], 'children': []}, {'type': 'Literal', 'name': 'int', 'range': [516, 516], 'children': []}, {'type': 'Literal', 'name': 'float', 'range': [518, 518], 'children': []}]}]}]}]}
2025-01-08 10:17:13,820 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:14,037 - INFO - Step 2 result: {'type': 'Program', 'name': 'ConversionError', 'range': [20, 29], 'children': [{'type': 'ClassDeclaration', 'name': 'ConversionError', 'range': [20, 29], 'children': [{'type': 'Inheritance', 'name': 'ValueError', 'range': [22, 24], 'children': []}, {'type': 'Block', 'name': '', 'range': [25, 29], 'children': [{'type': 'PassStatement', 'name': '', 'range': [27, 27], 'children': []}]}]}]}
2025-01-08 10:17:14,037 - INFO - Starting Step 3: AST simplification
2025-01-08 10:17:14,186 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [1245, 1253], 'children': [{'type': 'TypeVarDeclaration', 'name': 'T', 'range': [1245, 1250], 'children': [{'type': 'TypeVar', 'name': 'TypeVar', 'range': [1247, 1247], 'children': []}, {'type': 'Literal', 'name': '"T"', 'range': [1249, 1249], 'children': []}]}]}
2025-01-08 10:17:14,186 - INFO - Starting Step 3: AST simplification
2025-01-08 10:17:16,552 - INFO - Step 1 result: {'type': 'Program', 'name': 'type_match', 'range': [1254, 1290], 'children': [{'type': 'FunctionDeclaration', 'name': 'type_match', 'range': [1254, 1290], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [1257, 1259]}, {'type': 'Parameter', 'name': 'target_type', 'range': [1261, 1263]}, {'type': 'ReturnType', 'name': 'T', 'range': [1270, 1270]}, {'type': 'ReturnStatement', 'name': '', 'range': [1273, 1288], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [1274, 1288], 'children': [{'type': 'Argument', 'name': 'T', 'range': [1276, 1276]}, {'type': 'CallExpression', 'name': '_try_convert', 'range': [1278, 1287], 'children': [{'type': 'Argument', 'name': 'value', 'range': [1280, 1280]}, {'type': 'Argument', 'name': 'target_type', 'range': [1282, 1282]}, {'type': 'Argument', 'name': 'raise_on_mismatch', 'range': [1284, 1286]}]}]}]}]}]}
2025-01-08 10:17:16,553 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:17:17,731 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [1245, 1253], 'children': [{'type': 'TypeVarDeclaration', 'name': 'T', 'range': [1245, 1250], 'children': [{'type': 'TypeVar', 'name': 'TypeVar', 'range': [1247, 1247], 'children': []}, {'type': 'Literal', 'name': '"T"', 'range': [1249, 1249], 'children': []}]}]}
2025-01-08 10:17:17,732 - INFO - Starting Step 4: AST normalization
2025-01-08 10:17:17,933 - INFO - Step 3 result: {'type': 'Program', 'name': 'ConversionError', 'range': [20, 29], 'children': [{'type': 'ClassDeclaration', 'name': 'ConversionError', 'range': [20, 29], 'children': [{'type': 'Inheritance', 'name': 'ValueError', 'range': [22, 24], 'children': []}, {'type': 'Block', 'name': '', 'range': [25, 29], 'children': [{'type': 'PassStatement', 'name': '', 'range': [27, 27], 'children': []}]}]}]}
2025-01-08 10:17:17,933 - INFO - Starting Step 4: AST normalization
2025-01-08 10:17:18,737 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [510, 522], 'children': [{'type': 'VariableDeclaration', 'name': 'NUM', 'range': [510, 519], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [511, 519], 'children': [{'type': 'CallExpression', 'name': 'TypeVar', 'range': [512, 519], 'children': [{'type': 'Literal', 'name': '"NUM"', 'range': [514, 514], 'children': []}, {'type': 'Literal', 'name': 'int', 'range': [516, 516], 'children': []}, {'type': 'Literal', 'name': 'float', 'range': [518, 518], 'children': []}]}]}]}]}
2025-01-08 10:17:18,738 - INFO - Starting Step 3: AST simplification
2025-01-08 10:17:19,000 - INFO - Step 2 result: {'nodes': [{'type': 'Program', 'name': '', 'range': [0, 19], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 1], 'children': [{'type': 'ImportClause', 'name': 'json', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 16], 'children': [{'type': 'FromClause', 'name': 'typing', 'range': [3, 4], 'children': []}, {'type': 'ImportClause', 'name': 'Any', 'range': [5, 6], 'children': []}, {'type': 'ImportClause', 'name': 'Type', 'range': [8, 9], 'children': []}, {'type': 'ImportClause', 'name': 'TypeVar', 'range': [10, 11], 'children': []}, {'type': 'ImportClause', 'name': 'cast', 'range': [12, 13], 'children': []}, {'type': 'ImportClause', 'name': 'get_args', 'range': [14, 15], 'children': []}, {'type': 'ImportClause', 'name': 'get_origin', 'range': [16, 17], 'children': []}]}]}]}
2025-01-08 10:17:19,000 - INFO - Starting Step 3: AST simplification
2025-01-08 10:17:21,023 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [1245, 1253], 'children': [{'type': 'TypeVarDeclaration', 'name': 'T', 'range': [1245, 1250], 'children': [{'type': 'TypeVar', 'name': 'TypeVar', 'range': [1247, 1247], 'children': []}, {'type': 'Literal', 'name': '"T"', 'range': [1249, 1249], 'children': []}]}]}
2025-01-08 10:17:21,023 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:17:21,864 - INFO - Step 4 result: {'type': 'Program', 'name': 'ConversionError', 'range': [20, 29], 'children': [{'type': 'ClassDecl', 'name': 'ConversionError', 'range': [20, 29], 'children': [{'type': 'Inheritance', 'name': 'ValueError', 'range': [22, 24], 'children': []}, {'type': 'Block', 'name': '', 'range': [25, 29], 'children': [{'type': 'PassStatement', 'name': '', 'range': [27, 27], 'children': []}]}]}]}
2025-01-08 10:17:21,864 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:17:22,182 - INFO - Step 2 result: {'type': 'Program', 'name': '__convert_str', 'range': [474, 509], 'children': [{'type': 'FunctionDeclaration', 'name': '__convert_str', 'range': [474, 509], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [477, 479], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [483, 483], 'children': []}, {'type': 'Block', 'name': '', 'range': [485, 509], 'children': [{'type': 'IfStatement', 'name': '', 'range': [486, 497], 'children': [{'type': 'Condition', 'name': '', 'range': [487, 492], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [487, 492], 'children': [{'type': 'Argument', 'name': 'value', 'range': [489, 489], 'children': []}, {'type': 'Argument', 'name': 'str', 'range': [491, 491], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [494, 497], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [495, 496], 'children': [{'type': 'ReturnValue', 'name': 'value', 'range': [496, 496], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [498, 508], 'children': [{'type': 'Block', 'name': '', 'range': [500, 508], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [501, 507], 'children': [{'type': 'ReturnValue', 'name': 'json.dumps(value)', 'range': [502, 507], 'children': [{'type': 'FunctionCall', 'name': 'dumps', 'range': [504, 507], 'children': [{'type': 'Argument', 'name': 'value', 'range': [506, 506], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:17:22,182 - INFO - Starting Step 3: AST simplification
2025-01-08 10:17:23,837 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [510, 522], 'children': [{'type': 'VariableDeclaration', 'name': 'NUM', 'range': [510, 519], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [511, 519], 'children': [{'type': 'CallExpression', 'name': 'TypeVar', 'range': [512, 519], 'children': [{'type': 'Literal', 'name': '"NUM"', 'range': [514, 514], 'children': []}, {'type': 'Literal', 'name': 'int', 'range': [516, 516], 'children': []}, {'type': 'Literal', 'name': 'float', 'range': [518, 518], 'children': []}]}]}]}]}
2025-01-08 10:17:23,837 - INFO - Starting Step 4: AST normalization
2025-01-08 10:17:24,665 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [1245, 1253], 'children': [{'type': 'TypeVarDeclaration', 'name': 'T', 'range': [1245, 1250], 'children': [{'type': 'TypeVar', 'name': 'TypeVar', 'range': [1247, 1247], 'children': []}, {'type': 'Literal', 'name': '"T"', 'range': [1249, 1249], 'children': []}]}]}
2025-01-08 10:17:24,666 - INFO - Completed main AST analysis flow
2025-01-08 10:17:24,666 - INFO - Successfully processed chunk
2025-01-08 10:17:25,476 - INFO - Step 2 result: {'type': 'Program', 'name': 'convert', 'range': [1291, 1345], 'children': [{'type': 'FunctionDef', 'name': 'convert', 'range': [1291, 1345], 'children': [{'type': 'Parameters', 'name': 'parameters', 'range': [1293, 1304], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [1294, 1296], 'children': []}, {'type': 'Parameter', 'name': 'target_type', 'range': [1298, 1300], 'children': []}]}, {'type': 'ReturnType', 'name': 'return_type', 'range': [1305, 1307], 'children': []}, {'type': 'Block', 'name': 'body', 'range': [1309, 1345], 'children': [{'type': 'TryStatement', 'name': 'try_statement', 'range': [1310, 1344], 'children': [{'type': 'Block', 'name': 'try_block', 'range': [1312, 1329], 'children': [{'type': 'ReturnStatement', 'name': 'return_statement', 'range': [1313, 1328], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [1314, 1328], 'children': [{'type': 'Argument', 'name': 'T', 'range': [1316, 1317], 'children': []}, {'type': 'CallExpression', 'name': '_try_convert', 'range': [1318, 1327], 'children': [{'type': 'Argument', 'name': 'value', 'range': [1320, 1321], 'children': []}, {'type': 'Argument', 'name': 'target_type', 'range': [1322, 1323], 'children': []}, {'type': 'Argument', 'name': 'raise_on_mismatch', 'range': [1324, 1326], 'children': []}]}]}]}]}, {'type': 'CatchClause', 'name': 'catch_clause', 'range': [1330, 1344], 'children': [{'type': 'Parameter', 'name': 'e', 'range': [1333, 1334], 'children': []}, {'type': 'Block', 'name': 'catch_block', 'range': [1335, 1344], 'children': [{'type': 'RaiseStatement', 'name': 'raise_statement', 'range': [1336, 1343], 'children': [{'type': 'CallExpression', 'name': 'ConversionError', 'range': [1337, 1341], 'children': [{'type': 'Argument', 'name': 'error_message', 'range': [1339, 1340], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:17:25,477 - INFO - Starting Step 3: AST simplification
2025-01-08 10:17:25,916 - INFO - Step 5 result: {'type': 'Program', 'name': 'ConversionError', 'range': [20, 29], 'children': [{'type': 'ClassDecl', 'name': 'ConversionError', 'range': [20, 29], 'children': [{'type': 'Inheritance', 'name': 'ValueError', 'range': [22, 24], 'children': []}, {'type': 'Block', 'name': '', 'range': [25, 29], 'children': [{'type': 'PassStatement', 'name': '', 'range': [27, 27], 'children': []}]}]}]}
2025-01-08 10:17:25,916 - INFO - Completed main AST analysis flow
2025-01-08 10:17:25,916 - INFO - Successfully processed chunk
2025-01-08 10:17:26,839 - INFO - Step 2 result: {'type': 'Program', 'name': 'type_match', 'range': [1254, 1290], 'children': [{'type': 'FunctionDeclaration', 'name': 'type_match', 'range': [1254, 1290], 'children': [{'type': 'ParameterList', 'name': '', 'range': [1256, 1267], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [1257, 1259], 'children': [{'type': 'TypeAnnotation', 'name': 'Any', 'range': [1258, 1259]}]}, {'type': 'Parameter', 'name': 'target_type', 'range': [1261, 1263], 'children': [{'type': 'TypeAnnotation', 'name': 'Type[T]', 'range': [1262, 1266]}]}]}, {'type': 'ReturnType', 'name': 'T', 'range': [1268, 1270]}, {'type': 'FunctionBody', 'name': '', 'range': [1272, 1289], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [1273, 1288], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [1274, 1288], 'children': [{'type': 'Argument', 'name': 'T', 'range': [1276, 1276]}, {'type': 'CallExpression', 'name': '_try_convert', 'range': [1278, 1287], 'children': [{'type': 'Argument', 'name': 'value', 'range': [1280, 1280]}, {'type': 'Argument', 'name': 'target_type', 'range': [1282, 1282]}, {'type': 'Argument', 'name': 'raise_on_mismatch', 'range': [1284, 1286]}]}]}]}]}]}]}
2025-01-08 10:17:26,840 - INFO - Starting Step 3: AST simplification
2025-01-08 10:17:26,843 - INFO - Step 3 result: {'nodes': [{'type': 'Program', 'name': '', 'range': [0, 19], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 1], 'children': [{'type': 'ImportClause', 'name': 'json', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 16], 'children': [{'type': 'FromClause', 'name': 'typing', 'range': [3, 4], 'children': []}, {'type': 'ImportClause', 'name': 'Any', 'range': [5, 6], 'children': []}, {'type': 'ImportClause', 'name': 'Type', 'range': [8, 9], 'children': []}, {'type': 'ImportClause', 'name': 'TypeVar', 'range': [10, 11], 'children': []}, {'type': 'ImportClause', 'name': 'cast', 'range': [12, 13], 'children': []}, {'type': 'ImportClause', 'name': 'get_args', 'range': [14, 15], 'children': []}, {'type': 'ImportClause', 'name': 'get_origin', 'range': [16, 17], 'children': []}]}]}]}
2025-01-08 10:17:26,843 - INFO - Starting Step 4: AST normalization
2025-01-08 10:17:29,036 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [510, 522], 'children': [{'type': 'VariableDeclaration', 'name': 'NUM', 'range': [510, 519], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [511, 519], 'children': [{'type': 'CallExpression', 'name': 'TypeVar', 'range': [512, 519], 'children': [{'type': 'Literal', 'name': '"NUM"', 'range': [514, 514], 'children': []}, {'type': 'Literal', 'name': 'int', 'range': [516, 516], 'children': []}, {'type': 'Literal', 'name': 'float', 'range': [518, 518], 'children': []}]}]}]}]}
2025-01-08 10:17:29,036 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:17:31,451 - INFO - Step 2 result: {'type': 'Program', 'name': '__convert_num', 'range': [523, 612], 'children': [{'type': 'FunctionDeclaration', 'name': '__convert_num', 'range': [523, 612], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [525, 536], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [526, 528], 'children': []}, {'type': 'Parameter', 'name': 'num_type', 'range': [530, 535], 'children': []}]}, {'type': 'ReturnType', 'name': 'NUM', 'range': [539, 539], 'children': []}, {'type': 'Block', 'name': 'function_body', 'range': [541, 612], 'children': [{'type': 'IfStatement', 'name': 'if_statement', 'range': [542, 567], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [543, 556], 'children': [{'type': 'Value', 'name': 'value', 'range': [545, 545], 'children': []}, {'type': 'TypeCheck', 'name': 'list, dict, tuple, set', 'range': [547, 555], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [559, 566], 'children': [{'type': 'FunctionCall', 'name': 'num_type', 'range': [560, 566], 'children': [{'type': 'FunctionCall', 'name': 'len', 'range': [562, 565], 'children': [{'type': 'Value', 'name': 'value', 'range': [564, 564], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': 'elif_statement', 'range': [568, 579], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [569, 574], 'children': [{'type': 'Value', 'name': 'value', 'range': [571, 571], 'children': []}, {'type': 'TypeCheck', 'name': 'num_type', 'range': [573, 573], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [577, 578], 'children': [{'type': 'Value', 'name': 'value', 'range': [578, 578], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'else_statement', 'range': [580, 611], 'children': [{'type': 'TryStatement', 'name': 'try_statement', 'range': [583, 607], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [586, 593], 'children': [{'type': 'FunctionCall', 'name': 'num_type', 'range': [587, 593], 'children': [{'type': 'FunctionCall', 'name': 'float', 'range': [589, 592], 'children': [{'type': 'Value', 'name': 'value', 'range': [591, 591], 'children': []}]}]}]}, {'type': 'ExceptStatement', 'name': 'except_statement', 'range': [595, 607], 'children': [{'type': 'ExceptionTypes', 'name': 'ValueError, TypeError', 'range': [597, 600], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [603, 607], 'children': [{'type': 'FunctionCall', 'name': 'num_type', 'range': [604, 607], 'children': [{'type': 'Value', 'name': '0', 'range': [606, 606], 'children': []}]}]}]}]}, {'type': 'Comment', 'name': 'Fallback conversion', 'range': [608, 610], 'children': []}]}]}]}]}
2025-01-08 10:17:31,452 - INFO - Starting Step 3: AST simplification
2025-01-08 10:17:32,131 - INFO - Step 2 result: {'type': 'Program', 'name': '__convert_tuple', 'range': [306, 400], 'children': [{'type': 'FunctionDeclaration', 'name': '__convert_tuple', 'range': [306, 400], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [309, 311], 'children': []}, {'type': 'ReturnType', 'name': 'tuple', 'range': [315, 316], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [318, 338], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [319, 330], 'children': [{'type': 'Variable', 'name': 'value', 'range': [321, 321], 'children': []}, {'type': 'TypeCheck', 'name': 'str, list, set', 'range': [324, 328], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [333, 337], 'children': [{'type': 'FunctionCall', 'name': 'tuple', 'range': [334, 337], 'children': [{'type': 'Variable', 'name': 'value', 'range': [336, 336], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [339, 357], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [340, 345], 'children': [{'type': 'Variable', 'name': 'value', 'range': [342, 342], 'children': []}, {'type': 'TypeCheck', 'name': 'dict', 'range': [344, 344], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [348, 356], 'children': [{'type': 'FunctionCall', 'name': 'tuple', 'range': [349, 356], 'children': [{'type': 'MethodCall', 'name': 'items', 'range': [353, 355], 'children': [{'type': 'Variable', 'name': 'value', 'range': [351, 351], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [358, 378], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [359, 370], 'children': [{'type': 'Variable', 'name': 'value', 'range': [361, 361], 'children': []}, {'type': 'TypeCheck', 'name': 'int, float, bool', 'range': [364, 368], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [373, 377], 'children': [{'type': 'Tuple', 'name': '', 'range': [374, 377], 'children': [{'type': 'Variable', 'name': 'value', 'range': [375, 375], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [379, 390], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [380, 385], 'children': [{'type': 'Variable', 'name': 'value', 'range': [382, 382], 'children': []}, {'type': 'TypeCheck', 'name': 'tuple', 'range': [384, 384], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [388, 389], 'children': [{'type': 'Variable', 'name': 'value', 'range': [389, 389], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [391, 399], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [394, 398], 'children': [{'type': 'Tuple', 'name': '', 'range': [395, 398], 'children': [{'type': 'Variable', 'name': 'value', 'range': [396, 396], 'children': []}]}]}]}]}]}
2025-01-08 10:17:32,131 - INFO - Starting Step 3: AST simplification
2025-01-08 10:17:34,149 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [510, 522], 'children': [{'type': 'VariableDeclaration', 'name': 'NUM', 'range': [510, 519], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [511, 519], 'children': [{'type': 'CallExpression', 'name': 'TypeVar', 'range': [512, 519], 'children': [{'type': 'Literal', 'name': '"NUM"', 'range': [514, 514], 'children': []}, {'type': 'Literal', 'name': 'int', 'range': [516, 516], 'children': []}, {'type': 'Literal', 'name': 'float', 'range': [518, 518], 'children': []}]}]}]}]}
2025-01-08 10:17:34,149 - INFO - Completed main AST analysis flow
2025-01-08 10:17:34,149 - INFO - Successfully processed chunk
2025-01-08 10:17:34,533 - INFO - Step 3 result: {'type': 'Program', 'name': '__convert_str', 'range': [474, 509], 'children': [{'type': 'FunctionDeclaration', 'name': '__convert_str', 'range': [474, 509], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [477, 479], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [483, 483], 'children': []}, {'type': 'Block', 'name': '', 'range': [485, 509], 'children': [{'type': 'IfStatement', 'name': '', 'range': [486, 497], 'children': [{'type': 'Condition', 'name': '', 'range': [487, 492], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [487, 492], 'children': [{'type': 'Argument', 'name': 'value', 'range': [489, 489], 'children': []}, {'type': 'Argument', 'name': 'str', 'range': [491, 491], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [494, 497], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [495, 496], 'children': [{'type': 'ReturnValue', 'name': 'value', 'range': [496, 496], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [498, 508], 'children': [{'type': 'Block', 'name': '', 'range': [500, 508], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [501, 507], 'children': [{'type': 'ReturnValue', 'name': 'json.dumps(value)', 'range': [502, 507], 'children': [{'type': 'FunctionCall', 'name': 'dumps', 'range': [504, 507], 'children': [{'type': 'Argument', 'name': 'value', 'range': [506, 506], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:17:34,533 - INFO - Starting Step 4: AST normalization
2025-01-08 10:17:34,632 - INFO - Step 4 result: {'nodes': [{'type': 'Program', 'name': '', 'range': [0, 19], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 1], 'children': [{'type': 'ImportClause', 'name': 'json', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 16], 'children': [{'type': 'FromClause', 'name': 'typing', 'range': [3, 4], 'children': []}, {'type': 'ImportClause', 'name': 'Any', 'range': [5, 6], 'children': []}, {'type': 'ImportClause', 'name': 'Type', 'range': [8, 9], 'children': []}, {'type': 'ImportClause', 'name': 'TypeVar', 'range': [10, 11], 'children': []}, {'type': 'ImportClause', 'name': 'cast', 'range': [12, 13], 'children': []}, {'type': 'ImportClause', 'name': 'get_args', 'range': [14, 15], 'children': []}, {'type': 'ImportClause', 'name': 'get_origin', 'range': [16, 17], 'children': []}]}]}]}
2025-01-08 10:17:34,633 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:17:35,091 - INFO - Step 2 result: {'type': 'Program', 'name': '__convert_bool', 'range': [613, 677], 'children': [{'type': 'FunctionDef', 'name': '__convert_bool', 'range': [613, 677], 'children': [{'type': 'Parameters', 'name': 'value', 'range': [615, 619], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [616, 618], 'children': []}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [620, 622], 'children': []}, {'type': 'Block', 'name': '', 'range': [623, 677], 'children': [{'type': 'IfStatement', 'name': '', 'range': [625, 636], 'children': [{'type': 'Condition', 'name': '', 'range': [626, 631], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [626, 631], 'children': [{'type': 'Argument', 'name': 'value', 'range': [628, 628], 'children': []}, {'type': 'Argument', 'name': 'bool', 'range': [630, 630], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [632, 636], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [634, 635], 'children': [{'type': 'Expression', 'name': 'value', 'range': [635, 635], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [637, 668], 'children': [{'type': 'Condition', 'name': '', 'range': [638, 643], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [638, 643], 'children': [{'type': 'Argument', 'name': 'value', 'range': [640, 640], 'children': []}, {'type': 'Argument', 'name': 'str', 'range': [642, 642], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [644, 668], 'children': [{'type': 'IfStatement', 'name': '', 'range': [646, 662], 'children': [{'type': 'Condition', 'name': '', 'range': [647, 657], 'children': [{'type': 'Expression', 'name': '', 'range': [647, 657], 'children': [{'type': 'FunctionCall', 'name': 'lower', 'range': [649, 651], 'children': []}, {'type': 'In', 'name': '', 'range': [652, 657], 'children': [{'type': 'List', 'name': '', 'range': [653, 657], 'children': [{'type': 'String', 'name': '"true"', 'range': [654, 654], 'children': []}, {'type': 'String', 'name': '"1"', 'range': [656, 656], 'children': []}]}]}]}]}, {'type': 'Block', 'name': '', 'range': [658, 662], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [660, 661], 'children': [{'type': 'Expression', 'name': 'True', 'range': [661, 661], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [663, 668], 'children': [{'type': 'Block', 'name': '', 'range': [664, 668], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [666, 667], 'children': [{'type': 'Expression', 'name': 'False', 'range': [667, 667], 'children': []}]}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [669, 677], 'children': [{'type': 'Block', 'name': '', 'range': [670, 677], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [672, 676], 'children': [{'type': 'FunctionCall', 'name': 'bool', 'range': [673, 676], 'children': [{'type': 'Argument', 'name': 'value', 'range': [675, 675], 'children': []}]}]}]}]}]}]}]}
2025-01-08 10:17:35,092 - INFO - Starting Step 3: AST simplification
2025-01-08 10:17:36,756 - INFO - Step 3 result: {'type': 'Program', 'name': 'type_match', 'range': [1254, 1290], 'children': [{'type': 'FunctionDeclaration', 'name': 'type_match', 'range': [1254, 1290], 'children': [{'type': 'ParameterList', 'name': '', 'range': [1256, 1267], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [1257, 1259], 'children': [{'type': 'TypeAnnotation', 'name': 'Any', 'range': [1258, 1259]}]}, {'type': 'Parameter', 'name': 'target_type', 'range': [1261, 1263], 'children': [{'type': 'TypeAnnotation', 'name': 'Type[T]', 'range': [1262, 1266]}]}]}, {'type': 'ReturnType', 'name': 'T', 'range': [1268, 1270]}, {'type': 'FunctionBody', 'name': '', 'range': [1272, 1289], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [1273, 1288], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [1274, 1288], 'children': [{'type': 'Argument', 'name': 'T', 'range': [1276, 1276]}, {'type': 'CallExpression', 'name': '_try_convert', 'range': [1278, 1287], 'children': [{'type': 'Argument', 'name': 'value', 'range': [1280, 1280]}, {'type': 'Argument', 'name': 'target_type', 'range': [1282, 1282]}, {'type': 'Argument', 'name': 'raise_on_mismatch', 'range': [1284, 1286]}]}]}]}]}]}]}
2025-01-08 10:17:36,756 - INFO - Starting Step 4: AST normalization
2025-01-08 10:17:37,578 - INFO - Step 2 result: {'type': 'Program', 'name': '__convert_set', 'range': [401, 473], 'children': [{'type': 'FunctionDef', 'name': '__convert_set', 'range': [401, 473], 'children': [{'type': 'Parameters', 'name': 'value', 'range': [403, 407], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [404, 406], 'children': []}]}, {'type': 'ReturnType', 'name': 'set', 'range': [408, 410], 'children': []}, {'type': 'Block', 'name': '', 'range': [412, 473], 'children': [{'type': 'IfStatement', 'name': '', 'range': [413, 433], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [414, 425], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [414, 425], 'children': [{'type': 'Arguments', 'name': '', 'range': [415, 425], 'children': [{'type': 'Argument', 'name': 'value', 'range': [416, 416], 'children': []}, {'type': 'Argument', 'name': '', 'range': [418, 424], 'children': [{'type': 'Tuple', 'name': '', 'range': [418, 424], 'children': [{'type': 'Type', 'name': 'str', 'range': [419, 419], 'children': []}, {'type': 'Type', 'name': 'list', 'range': [421, 421], 'children': []}, {'type': 'Type', 'name': 'tuple', 'range': [423, 423], 'children': []}]}]}]}]}]}, {'type': 'Block', 'name': '', 'range': [427, 433], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [428, 433], 'children': [{'type': 'FunctionCall', 'name': 'set', 'range': [429, 432], 'children': [{'type': 'Arguments', 'name': '', 'range': [430, 432], 'children': [{'type': 'Argument', 'name': 'value', 'range': [431, 431], 'children': []}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [434, 452], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [435, 440], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [435, 440], 'children': [{'type': 'Arguments', 'name': '', 'range': [436, 440], 'children': [{'type': 'Argument', 'name': 'value', 'range': [437, 437], 'children': []}, {'type': 'Argument', 'name': 'dict', 'range': [439, 439], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [442, 452], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [443, 452], 'children': [{'type': 'FunctionCall', 'name': 'set', 'range': [444, 451], 'children': [{'type': 'Arguments', 'name': '', 'range': [445, 451], 'children': [{'type': 'MethodCall', 'name': 'items', 'range': [447, 450], 'children': [{'type': 'Object', 'name': 'value', 'range': [446, 446], 'children': []}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [453, 464], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [454, 459], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [454, 459], 'children': [{'type': 'Arguments', 'name': '', 'range': [455, 459], 'children': [{'type': 'Argument', 'name': 'value', 'range': [456, 456], 'children': []}, {'type': 'Argument', 'name': 'set', 'range': [458, 458], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [461, 464], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [462, 464], 'children': [{'type': 'Variable', 'name': 'value', 'range': [463, 463], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [465, 472], 'children': [{'type': 'Block', 'name': '', 'range': [467, 472], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [468, 472], 'children': [{'type': 'Set', 'name': '', 'range': [469, 471], 'children': [{'type': 'Element', 'name': 'value', 'range': [470, 470], 'children': []}]}]}]}]}]}]}]}
2025-01-08 10:17:37,579 - INFO - Starting Step 3: AST simplification
2025-01-08 10:17:39,919 - INFO - Step 3 result: {'type': 'Program', 'name': 'convert', 'range': [1291, 1345], 'children': [{'type': 'FunctionDef', 'name': 'convert', 'range': [1291, 1345], 'children': [{'type': 'Parameters', 'name': 'parameters', 'range': [1293, 1304], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [1294, 1296], 'children': []}, {'type': 'Parameter', 'name': 'target_type', 'range': [1298, 1300], 'children': []}]}, {'type': 'ReturnType', 'name': 'return_type', 'range': [1305, 1307], 'children': []}, {'type': 'Block', 'name': 'body', 'range': [1309, 1345], 'children': [{'type': 'TryStatement', 'name': 'try_statement', 'range': [1310, 1344], 'children': [{'type': 'Block', 'name': 'try_block', 'range': [1312, 1329], 'children': [{'type': 'ReturnStatement', 'name': 'return_statement', 'range': [1313, 1328], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [1314, 1328], 'children': [{'type': 'Argument', 'name': 'T', 'range': [1316, 1317], 'children': []}, {'type': 'CallExpression', 'name': '_try_convert', 'range': [1318, 1327], 'children': [{'type': 'Argument', 'name': 'value', 'range': [1320, 1321], 'children': []}, {'type': 'Argument', 'name': 'target_type', 'range': [1322, 1323], 'children': []}, {'type': 'Argument', 'name': 'raise_on_mismatch', 'range': [1324, 1326], 'children': []}]}]}]}]}, {'type': 'CatchClause', 'name': 'catch_clause', 'range': [1330, 1344], 'children': [{'type': 'Parameter', 'name': 'e', 'range': [1333, 1334], 'children': []}, {'type': 'Block', 'name': 'catch_block', 'range': [1335, 1344], 'children': [{'type': 'RaiseStatement', 'name': 'raise_statement', 'range': [1336, 1343], 'children': [{'type': 'CallExpression', 'name': 'ConversionError', 'range': [1337, 1341], 'children': [{'type': 'Argument', 'name': 'error_message', 'range': [1339, 1340], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:17:39,920 - INFO - Starting Step 4: AST normalization
2025-01-08 10:17:41,406 - INFO - Step 2 result: {'type': 'Program', 'name': '__convert_list', 'range': [30, 153], 'children': [{'type': 'FunctionDeclaration', 'name': '__convert_list', 'range': [30, 153], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [33, 35], 'children': []}, {'type': 'ReturnType', 'name': 'list', 'range': [39, 39], 'children': []}, {'type': 'IfStatement', 'name': 'isinstance', 'range': [42, 62], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [43, 54], 'children': [{'type': 'Variable', 'name': 'value', 'range': [45, 45], 'children': []}, {'type': 'TypeCheck', 'name': 'list, tuple, set', 'range': [47, 53], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [57, 61], 'children': [{'type': 'FunctionCall', 'name': 'list', 'range': [58, 61], 'children': [{'type': 'Variable', 'name': 'value', 'range': [60, 60], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': 'isinstance', 'range': [63, 81], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [64, 69], 'children': [{'type': 'Variable', 'name': 'value', 'range': [66, 66], 'children': []}, {'type': 'TypeCheck', 'name': 'dict', 'range': [68, 68], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [72, 80], 'children': [{'type': 'FunctionCall', 'name': 'list', 'range': [73, 80], 'children': [{'type': 'MethodCall', 'name': 'items', 'range': [75, 79], 'children': [{'type': 'Variable', 'name': 'value', 'range': [75, 75], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': 'isinstance', 'range': [82, 144], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [83, 88], 'children': [{'type': 'Variable', 'name': 'value', 'range': [85, 85], 'children': []}, {'type': 'TypeCheck', 'name': 'str', 'range': [87, 87], 'children': []}]}, {'type': 'Assignment', 'name': 'value', 'range': [91, 97], 'children': [{'type': 'MethodCall', 'name': 'strip', 'range': [94, 97], 'children': [{'type': 'Variable', 'name': 'value', 'range': [93, 93], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'startswith', 'range': [99, 136], 'children': [{'type': 'Condition', 'name': 'startswith', 'range': [100, 112], 'children': [{'type': 'Variable', 'name': 'value', 'range': [100, 100], 'children': []}, {'type': 'String', 'name': '"["', 'range': [104, 104], 'children': []}, {'type': 'LogicalOperator', 'name': 'and', 'range': [106, 106], 'children': []}, {'type': 'MethodCall', 'name': 'endswith', 'range': [107, 111], 'children': [{'type': 'Variable', 'name': 'value', 'range': [107, 107], 'children': []}, {'type': 'String', 'name': '"]"', 'range': [111, 111], 'children': []}]}]}, {'type': 'TryStatement', 'name': 'try', 'range': [115, 131], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [118, 125], 'children': [{'type': 'FunctionCall', 'name': 'json.loads', 'range': [119, 124], 'children': [{'type': 'Variable', 'name': 'value', 'range': [123, 123], 'children': []}]}]}, {'type': 'ExceptStatement', 'name': 'except', 'range': [126, 131], 'children': [{'type': 'Exception', 'name': 'JSONDecodeError', 'range': [129, 129], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [132, 136], 'children': [{'type': 'List', 'name': '[value]', 'range': [133, 135], 'children': [{'type': 'Variable', 'name': 'value', 'range': [134, 134], 'children': []}]}]}]}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [137, 144], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [140, 144], 'children': [{'type': 'List', 'name': '[value]', 'range': [141, 143], 'children': [{'type': 'Variable', 'name': 'value', 'range': [142, 142], 'children': []}]}]}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [145, 152], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [148, 152], 'children': [{'type': 'List', 'name': '[value]', 'range': [149, 151], 'children': [{'type': 'Variable', 'name': 'value', 'range': [150, 150], 'children': []}]}]}]}]}]}
2025-01-08 10:17:41,406 - INFO - Starting Step 3: AST simplification
2025-01-08 10:17:42,244 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': '', 'range': [0, 19], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 1], 'children': [{'type': 'ImportClause', 'name': 'json', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 16], 'children': [{'type': 'FromClause', 'name': 'typing', 'range': [3, 4], 'children': []}, {'type': 'ImportClause', 'name': 'Any', 'range': [5, 6], 'children': []}, {'type': 'ImportClause', 'name': 'Type', 'range': [8, 9], 'children': []}, {'type': 'ImportClause', 'name': 'TypeVar', 'range': [10, 11], 'children': []}, {'type': 'ImportClause', 'name': 'cast', 'range': [12, 13], 'children': []}, {'type': 'ImportClause', 'name': 'get_args', 'range': [14, 15], 'children': []}, {'type': 'ImportClause', 'name': 'get_origin', 'range': [16, 17], 'children': []}]}]}]}
2025-01-08 10:17:42,245 - INFO - Completed main AST analysis flow
2025-01-08 10:17:42,245 - INFO - Successfully processed chunk
2025-01-08 10:17:46,670 - INFO - Step 4 result: {'type': 'Program', 'name': '__convert_str', 'range': [474, 509], 'children': [{'type': 'FunctionDecl', 'name': '__convert_str', 'range': [474, 509], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [477, 479], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [483, 483], 'children': []}, {'type': 'Block', 'name': '', 'range': [485, 509], 'children': [{'type': 'IfStatement', 'name': '', 'range': [486, 497], 'children': [{'type': 'Condition', 'name': '', 'range': [487, 492], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [487, 492], 'children': [{'type': 'Argument', 'name': 'value', 'range': [489, 489], 'children': []}, {'type': 'Argument', 'name': 'str', 'range': [491, 491], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [494, 497], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [495, 496], 'children': [{'type': 'ReturnValue', 'name': 'value', 'range': [496, 496], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [498, 508], 'children': [{'type': 'Block', 'name': '', 'range': [500, 508], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [501, 507], 'children': [{'type': 'ReturnValue', 'name': 'json.dumps(value)', 'range': [502, 507], 'children': [{'type': 'CallExpression', 'name': 'dumps', 'range': [504, 507], 'children': [{'type': 'Argument', 'name': 'value', 'range': [506, 506], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:17:46,670 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:17:47,536 - INFO - Step 4 result: {'type': 'Program', 'name': 'type_match', 'range': [1254, 1290], 'children': [{'type': 'FunctionDecl', 'name': 'type_match', 'range': [1254, 1290], 'children': [{'type': 'ParameterList', 'name': '', 'range': [1256, 1267], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [1257, 1259], 'children': [{'type': 'TypeAnnotation', 'name': 'Any', 'range': [1258, 1259]}]}, {'type': 'Parameter', 'name': 'target_type', 'range': [1261, 1263], 'children': [{'type': 'TypeAnnotation', 'name': 'Type[T]', 'range': [1262, 1266]}]}]}, {'type': 'ReturnType', 'name': 'T', 'range': [1268, 1270]}, {'type': 'FunctionBody', 'name': '', 'range': [1272, 1289], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [1273, 1288], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [1274, 1288], 'children': [{'type': 'Identifier', 'name': 'T', 'range': [1276, 1276]}, {'type': 'CallExpression', 'name': '_try_convert', 'range': [1278, 1287], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [1280, 1280]}, {'type': 'Identifier', 'name': 'target_type', 'range': [1282, 1282]}, {'type': 'Identifier', 'name': 'raise_on_mismatch', 'range': [1284, 1286]}]}]}]}]}]}]}
2025-01-08 10:17:47,536 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:17:52,346 - INFO - Step 2 result: {'type': 'Program', 'name': '__convert_dict', 'range': [154, 305], 'children': [{'type': 'FunctionDeclaration', 'name': '__convert_dict', 'range': [154, 305], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [157, 159], 'children': []}, {'type': 'ReturnType', 'name': 'dict', 'range': [163, 163], 'children': []}, {'type': 'Block', 'name': '', 'range': [165, 305], 'children': [{'type': 'IfStatement', 'name': '', 'range': [166, 224], 'children': [{'type': 'Condition', 'name': '', 'range': [167, 172], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [167, 172], 'children': [{'type': 'Argument', 'name': 'value', 'range': [169, 169], 'children': []}, {'type': 'Argument', 'name': 'str', 'range': [171, 171], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [174, 224], 'children': [{'type': 'TryStatement', 'name': '', 'range': [175, 224], 'children': [{'type': 'Block', 'name': '', 'range': [177, 208], 'children': [{'type': 'Assignment', 'name': 'result', 'range': [178, 185], 'children': [{'type': 'FunctionCall', 'name': 'json.loads', 'range': [180, 185], 'children': [{'type': 'Argument', 'name': 'value', 'range': [184, 184], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [187, 208], 'children': [{'type': 'Condition', 'name': '', 'range': [188, 193], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [188, 193], 'children': [{'type': 'Argument', 'name': 'result', 'range': [190, 190], 'children': []}, {'type': 'Argument', 'name': 'dict', 'range': [192, 192], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [195, 198], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [196, 197], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [197, 197], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [199, 208], 'children': [{'type': 'Block', 'name': '', 'range': [201, 208], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [202, 207], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [203, 207], 'children': [{'type': 'Property', 'name': 'value', 'range': [204, 206], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [206, 206], 'children': []}]}]}]}]}]}]}]}, {'type': 'CatchStatement', 'name': '', 'range': [209, 224], 'children': [{'type': 'Block', 'name': '', 'range': [214, 224], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [215, 220], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [216, 220], 'children': [{'type': 'Property', 'name': 'value', 'range': [217, 219], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [219, 219], 'children': []}]}]}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [225, 253], 'children': [{'type': 'Condition', 'name': '', 'range': [226, 231], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [226, 231], 'children': [{'type': 'Argument', 'name': 'value', 'range': [228, 228], 'children': []}, {'type': 'Argument', 'name': 'list', 'range': [230, 230], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [233, 253], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [234, 252], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [235, 252], 'children': [{'type': 'Property', 'name': 'i', 'range': [236, 238], 'children': [{'type': 'ArrayAccess', 'name': '', 'range': [239, 241], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [239, 239], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [240, 240], 'children': []}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [254, 282], 'children': [{'type': 'Condition', 'name': '', 'range': [255, 260], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [255, 260], 'children': [{'type': 'Argument', 'name': 'value', 'range': [257, 257], 'children': []}, {'type': 'Argument', 'name': 'tuple', 'range': [259, 259], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [262, 282], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [263, 281], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [264, 281], 'children': [{'type': 'Property', 'name': 'i', 'range': [265, 267], 'children': [{'type': 'ArrayAccess', 'name': '', 'range': [268, 270], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [268, 268], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [269, 269], 'children': []}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [283, 294], 'children': [{'type': 'Condition', 'name': '', 'range': [284, 289], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [284, 289], 'children': [{'type': 'Argument', 'name': 'value', 'range': [286, 286], 'children': []}, {'type': 'Argument', 'name': 'dict', 'range': [288, 288], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [291, 294], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [292, 293], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [293, 293], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [295, 304], 'children': [{'type': 'Block', 'name': '', 'range': [297, 304], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [298, 303], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [299, 303], 'children': [{'type': 'Property', 'name': 'value', 'range': [300, 302], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [302, 302], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:17:52,346 - INFO - Starting Step 3: AST simplification
2025-01-08 10:17:53,491 - INFO - Step 3 result: {'type': 'Program', 'name': '__convert_num', 'range': [523, 612], 'children': [{'type': 'FunctionDeclaration', 'name': '__convert_num', 'range': [523, 612], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [525, 536], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [526, 528], 'children': []}, {'type': 'Parameter', 'name': 'num_type', 'range': [530, 535], 'children': []}]}, {'type': 'ReturnType', 'name': 'NUM', 'range': [539, 539], 'children': []}, {'type': 'Block', 'name': 'function_body', 'range': [541, 612], 'children': [{'type': 'IfStatement', 'name': 'if_statement', 'range': [542, 567], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [543, 556], 'children': [{'type': 'Value', 'name': 'value', 'range': [545, 545], 'children': []}, {'type': 'TypeCheck', 'name': 'list, dict, tuple, set', 'range': [547, 555], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [559, 566], 'children': [{'type': 'FunctionCall', 'name': 'num_type', 'range': [560, 566], 'children': [{'type': 'FunctionCall', 'name': 'len', 'range': [562, 565], 'children': [{'type': 'Value', 'name': 'value', 'range': [564, 564], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': 'elif_statement', 'range': [568, 579], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [569, 574], 'children': [{'type': 'Value', 'name': 'value', 'range': [571, 571], 'children': []}, {'type': 'TypeCheck', 'name': 'num_type', 'range': [573, 573], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [577, 578], 'children': [{'type': 'Value', 'name': 'value', 'range': [578, 578], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'else_statement', 'range': [580, 611], 'children': [{'type': 'TryStatement', 'name': 'try_statement', 'range': [583, 607], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [586, 593], 'children': [{'type': 'FunctionCall', 'name': 'num_type', 'range': [587, 593], 'children': [{'type': 'FunctionCall', 'name': 'float', 'range': [589, 592], 'children': [{'type': 'Value', 'name': 'value', 'range': [591, 591], 'children': []}]}]}]}, {'type': 'ExceptStatement', 'name': 'except_statement', 'range': [595, 607], 'children': [{'type': 'ExceptionTypes', 'name': 'ValueError, TypeError', 'range': [597, 600], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [603, 607], 'children': [{'type': 'FunctionCall', 'name': 'num_type', 'range': [604, 607], 'children': [{'type': 'Value', 'name': '0', 'range': [606, 606], 'children': []}]}]}]}]}, {'type': 'Comment', 'name': 'Fallback conversion', 'range': [608, 610], 'children': []}]}]}]}]}
2025-01-08 10:17:53,491 - INFO - Starting Step 4: AST normalization
2025-01-08 10:17:54,595 - INFO - Step 4 result: {'type': 'Program', 'name': 'convert', 'range': [1291, 1345], 'children': [{'type': 'FunctionDecl', 'name': 'convert', 'range': [1291, 1345], 'children': [{'type': 'Parameters', 'name': 'parameters', 'range': [1293, 1304], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [1294, 1296], 'children': []}, {'type': 'Parameter', 'name': 'target_type', 'range': [1298, 1300], 'children': []}]}, {'type': 'ReturnType', 'name': 'return_type', 'range': [1305, 1307], 'children': []}, {'type': 'Block', 'name': 'body', 'range': [1309, 1345], 'children': [{'type': 'TryStatement', 'name': 'try_statement', 'range': [1310, 1344], 'children': [{'type': 'Block', 'name': 'try_block', 'range': [1312, 1329], 'children': [{'type': 'ReturnStatement', 'name': 'return_statement', 'range': [1313, 1328], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [1314, 1328], 'children': [{'type': 'Identifier', 'name': 'T', 'range': [1316, 1317], 'children': []}, {'type': 'CallExpression', 'name': '_try_convert', 'range': [1318, 1327], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [1320, 1321], 'children': []}, {'type': 'Identifier', 'name': 'target_type', 'range': [1322, 1323], 'children': []}, {'type': 'Identifier', 'name': 'raise_on_mismatch', 'range': [1324, 1326], 'children': []}]}]}]}]}, {'type': 'CatchClause', 'name': 'catch_clause', 'range': [1330, 1344], 'children': [{'type': 'Parameter', 'name': 'e', 'range': [1333, 1334], 'children': []}, {'type': 'Block', 'name': 'catch_block', 'range': [1335, 1344], 'children': [{'type': 'RaiseStatement', 'name': 'raise_statement', 'range': [1336, 1343], 'children': [{'type': 'CallExpression', 'name': 'ConversionError', 'range': [1337, 1341], 'children': [{'type': 'Identifier', 'name': 'error_message', 'range': [1339, 1340], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:17:54,595 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:17:55,225 - INFO - Step 3 result: {'type': 'Program', 'name': '__convert_tuple', 'range': [306, 400], 'children': [{'type': 'FunctionDeclaration', 'name': '__convert_tuple', 'range': [306, 400], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [309, 311], 'children': []}, {'type': 'ReturnType', 'name': 'tuple', 'range': [315, 316], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [318, 338], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [319, 330], 'children': [{'type': 'Variable', 'name': 'value', 'range': [321, 321], 'children': []}, {'type': 'TypeCheck', 'name': 'str, list, set', 'range': [324, 328], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [333, 337], 'children': [{'type': 'FunctionCall', 'name': 'tuple', 'range': [334, 337], 'children': [{'type': 'Variable', 'name': 'value', 'range': [336, 336], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [339, 357], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [340, 345], 'children': [{'type': 'Variable', 'name': 'value', 'range': [342, 342], 'children': []}, {'type': 'TypeCheck', 'name': 'dict', 'range': [344, 344], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [348, 356], 'children': [{'type': 'FunctionCall', 'name': 'tuple', 'range': [349, 356], 'children': [{'type': 'MethodCall', 'name': 'items', 'range': [353, 355], 'children': [{'type': 'Variable', 'name': 'value', 'range': [351, 351], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [358, 378], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [359, 370], 'children': [{'type': 'Variable', 'name': 'value', 'range': [361, 361], 'children': []}, {'type': 'TypeCheck', 'name': 'int, float, bool', 'range': [364, 368], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [373, 377], 'children': [{'type': 'Tuple', 'name': '', 'range': [374, 377], 'children': [{'type': 'Variable', 'name': 'value', 'range': [375, 375], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [379, 390], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [380, 385], 'children': [{'type': 'Variable', 'name': 'value', 'range': [382, 382], 'children': []}, {'type': 'TypeCheck', 'name': 'tuple', 'range': [384, 384], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [388, 389], 'children': [{'type': 'Variable', 'name': 'value', 'range': [389, 389], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [391, 399], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [394, 398], 'children': [{'type': 'Tuple', 'name': '', 'range': [395, 398], 'children': [{'type': 'Variable', 'name': 'value', 'range': [396, 396], 'children': []}]}]}]}]}]}
2025-01-08 10:17:55,225 - INFO - Starting Step 4: AST normalization
2025-01-08 10:17:58,055 - INFO - Step 3 result: {'type': 'Program', 'name': '__convert_bool', 'range': [613, 677], 'children': [{'type': 'FunctionDef', 'name': '__convert_bool', 'range': [613, 677], 'children': [{'type': 'Parameters', 'name': 'value', 'range': [615, 619], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [616, 618], 'children': []}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [620, 622], 'children': []}, {'type': 'Block', 'name': '', 'range': [623, 677], 'children': [{'type': 'IfStatement', 'name': '', 'range': [625, 636], 'children': [{'type': 'Condition', 'name': '', 'range': [626, 631], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [626, 631], 'children': [{'type': 'Argument', 'name': 'value', 'range': [628, 628], 'children': []}, {'type': 'Argument', 'name': 'bool', 'range': [630, 630], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [632, 636], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [634, 635], 'children': [{'type': 'Expression', 'name': 'value', 'range': [635, 635], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [637, 668], 'children': [{'type': 'Condition', 'name': '', 'range': [638, 643], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [638, 643], 'children': [{'type': 'Argument', 'name': 'value', 'range': [640, 640], 'children': []}, {'type': 'Argument', 'name': 'str', 'range': [642, 642], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [644, 668], 'children': [{'type': 'IfStatement', 'name': '', 'range': [646, 662], 'children': [{'type': 'Condition', 'name': '', 'range': [647, 657], 'children': [{'type': 'Expression', 'name': '', 'range': [647, 657], 'children': [{'type': 'FunctionCall', 'name': 'lower', 'range': [649, 651], 'children': []}, {'type': 'In', 'name': '', 'range': [652, 657], 'children': [{'type': 'List', 'name': '', 'range': [653, 657], 'children': [{'type': 'String', 'name': '"true"', 'range': [654, 654], 'children': []}, {'type': 'String', 'name': '"1"', 'range': [656, 656], 'children': []}]}]}]}]}, {'type': 'Block', 'name': '', 'range': [658, 662], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [660, 661], 'children': [{'type': 'Expression', 'name': 'True', 'range': [661, 661], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [663, 668], 'children': [{'type': 'Block', 'name': '', 'range': [664, 668], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [666, 667], 'children': [{'type': 'Expression', 'name': 'False', 'range': [667, 667], 'children': []}]}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [669, 677], 'children': [{'type': 'Block', 'name': '', 'range': [670, 677], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [672, 676], 'children': [{'type': 'FunctionCall', 'name': 'bool', 'range': [673, 676], 'children': [{'type': 'Argument', 'name': 'value', 'range': [675, 675], 'children': []}]}]}]}]}]}]}]}
2025-01-08 10:17:58,055 - INFO - Starting Step 4: AST normalization
2025-01-08 10:17:58,078 - INFO - Step 5 result: {'type': 'Program', 'name': 'type_match', 'range': [1254, 1290], 'children': [{'type': 'FunctionDecl', 'name': 'type_match', 'range': [1254, 1290], 'children': [{'type': 'ParameterList', 'name': '', 'range': [1256, 1267], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [1257, 1259], 'children': [{'type': 'TypeAnnotation', 'name': 'Any', 'range': [1258, 1259]}]}, {'type': 'Parameter', 'name': 'target_type', 'range': [1261, 1263], 'children': [{'type': 'TypeAnnotation', 'name': 'Type[T]', 'range': [1262, 1266]}]}]}, {'type': 'ReturnType', 'name': 'T', 'range': [1268, 1270]}, {'type': 'FunctionBody', 'name': '', 'range': [1272, 1289], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [1273, 1288], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [1274, 1288], 'children': [{'type': 'Identifier', 'name': 'T', 'range': [1276, 1276]}, {'type': 'CallExpression', 'name': '_try_convert', 'range': [1278, 1287], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [1280, 1280]}, {'type': 'Identifier', 'name': 'target_type', 'range': [1282, 1282]}, {'type': 'Identifier', 'name': 'raise_on_mismatch', 'range': [1284, 1286]}]}]}]}]}]}]}
2025-01-08 10:17:58,078 - INFO - Completed main AST analysis flow
2025-01-08 10:17:58,078 - INFO - Successfully processed chunk
2025-01-08 10:17:58,959 - INFO - Step 5 result: {'type': 'Program', 'name': '__convert_str', 'range': [474, 509], 'children': [{'type': 'FunctionDecl', 'name': '__convert_str', 'range': [474, 509], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [477, 479], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [483, 483], 'children': []}, {'type': 'Block', 'name': '', 'range': [485, 509], 'children': [{'type': 'IfStatement', 'name': '', 'range': [486, 497], 'children': [{'type': 'Condition', 'name': '', 'range': [487, 492], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [487, 492], 'children': [{'type': 'Argument', 'name': 'value', 'range': [489, 489], 'children': []}, {'type': 'Argument', 'name': 'str', 'range': [491, 491], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [494, 497], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [495, 496], 'children': [{'type': 'ReturnValue', 'name': 'value', 'range': [496, 496], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [498, 508], 'children': [{'type': 'Block', 'name': '', 'range': [500, 508], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [501, 507], 'children': [{'type': 'ReturnValue', 'name': 'json.dumps(value)', 'range': [502, 507], 'children': [{'type': 'CallExpression', 'name': 'dumps', 'range': [504, 507], 'children': [{'type': 'Argument', 'name': 'value', 'range': [506, 506], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:17:58,960 - INFO - Completed main AST analysis flow
2025-01-08 10:17:58,960 - INFO - Successfully processed chunk
2025-01-08 10:18:06,150 - INFO - Step 3 result: {'type': 'Program', 'name': '__convert_set', 'range': [401, 473], 'children': [{'type': 'FunctionDef', 'name': '__convert_set', 'range': [401, 473], 'children': [{'type': 'Parameters', 'name': 'value', 'range': [403, 407], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [404, 406], 'children': []}]}, {'type': 'ReturnType', 'name': 'set', 'range': [408, 410], 'children': []}, {'type': 'Block', 'name': '', 'range': [412, 473], 'children': [{'type': 'IfStatement', 'name': '', 'range': [413, 433], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [414, 425], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [414, 425], 'children': [{'type': 'Arguments', 'name': '', 'range': [415, 425], 'children': [{'type': 'Argument', 'name': 'value', 'range': [416, 416], 'children': []}, {'type': 'Argument', 'name': '', 'range': [418, 424], 'children': [{'type': 'Tuple', 'name': '', 'range': [418, 424], 'children': [{'type': 'Type', 'name': 'str', 'range': [419, 419], 'children': []}, {'type': 'Type', 'name': 'list', 'range': [421, 421], 'children': []}, {'type': 'Type', 'name': 'tuple', 'range': [423, 423], 'children': []}]}]}]}]}]}, {'type': 'Block', 'name': '', 'range': [427, 433], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [428, 433], 'children': [{'type': 'FunctionCall', 'name': 'set', 'range': [429, 432], 'children': [{'type': 'Arguments', 'name': '', 'range': [430, 432], 'children': [{'type': 'Argument', 'name': 'value', 'range': [431, 431], 'children': []}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [434, 452], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [435, 440], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [435, 440], 'children': [{'type': 'Arguments', 'name': '', 'range': [436, 440], 'children': [{'type': 'Argument', 'name': 'value', 'range': [437, 437], 'children': []}, {'type': 'Argument', 'name': 'dict', 'range': [439, 439], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [442, 452], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [443, 452], 'children': [{'type': 'FunctionCall', 'name': 'set', 'range': [444, 451], 'children': [{'type': 'Arguments', 'name': '', 'range': [445, 451], 'children': [{'type': 'MethodCall', 'name': 'items', 'range': [447, 450], 'children': [{'type': 'Object', 'name': 'value', 'range': [446, 446], 'children': []}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [453, 464], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [454, 459], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [454, 459], 'children': [{'type': 'Arguments', 'name': '', 'range': [455, 459], 'children': [{'type': 'Argument', 'name': 'value', 'range': [456, 456], 'children': []}, {'type': 'Argument', 'name': 'set', 'range': [458, 458], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [461, 464], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [462, 464], 'children': [{'type': 'Variable', 'name': 'value', 'range': [463, 463], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [465, 472], 'children': [{'type': 'Block', 'name': '', 'range': [467, 472], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [468, 472], 'children': [{'type': 'Set', 'name': '', 'range': [469, 471], 'children': [{'type': 'Element', 'name': 'value', 'range': [470, 470], 'children': []}]}]}]}]}]}]}]}
2025-01-08 10:18:06,151 - INFO - Starting Step 4: AST normalization
2025-01-08 10:18:10,548 - INFO - Step 5 result: {'type': 'Program', 'name': 'convert', 'range': [1291, 1345], 'children': [{'type': 'FunctionDecl', 'name': 'convert', 'range': [1291, 1345], 'children': [{'type': 'Parameters', 'name': 'parameters', 'range': [1293, 1304], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [1294, 1296], 'children': []}, {'type': 'Parameter', 'name': 'target_type', 'range': [1298, 1300], 'children': []}]}, {'type': 'ReturnType', 'name': 'return_type', 'range': [1305, 1307], 'children': []}, {'type': 'Block', 'name': 'body', 'range': [1309, 1345], 'children': [{'type': 'TryStatement', 'name': 'try_statement', 'range': [1310, 1344], 'children': [{'type': 'Block', 'name': 'try_block', 'range': [1312, 1329], 'children': [{'type': 'ReturnStatement', 'name': 'return_statement', 'range': [1313, 1328], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [1314, 1328], 'children': [{'type': 'Identifier', 'name': 'T', 'range': [1316, 1317], 'children': []}, {'type': 'CallExpression', 'name': '_try_convert', 'range': [1318, 1327], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [1320, 1321], 'children': []}, {'type': 'Identifier', 'name': 'target_type', 'range': [1322, 1323], 'children': []}, {'type': 'Identifier', 'name': 'raise_on_mismatch', 'range': [1324, 1326], 'children': []}]}]}]}]}, {'type': 'CatchClause', 'name': 'catch_clause', 'range': [1330, 1344], 'children': [{'type': 'Parameter', 'name': 'e', 'range': [1333, 1334], 'children': []}, {'type': 'Block', 'name': 'catch_block', 'range': [1335, 1344], 'children': [{'type': 'RaiseStatement', 'name': 'raise_statement', 'range': [1336, 1343], 'children': [{'type': 'CallExpression', 'name': 'ConversionError', 'range': [1337, 1341], 'children': [{'type': 'Identifier', 'name': 'error_message', 'range': [1339, 1340], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:18:10,549 - INFO - Completed main AST analysis flow
2025-01-08 10:18:10,549 - INFO - Successfully processed chunk
2025-01-08 10:18:13,714 - INFO - Step 3 result: {'type': 'Program', 'name': '__convert_list', 'range': [30, 153], 'children': [{'type': 'FunctionDeclaration', 'name': '__convert_list', 'range': [30, 153], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [33, 35], 'children': []}, {'type': 'ReturnType', 'name': 'list', 'range': [39, 39], 'children': []}, {'type': 'IfStatement', 'name': 'isinstance', 'range': [42, 62], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [43, 54], 'children': [{'type': 'Variable', 'name': 'value', 'range': [45, 45], 'children': []}, {'type': 'TypeCheck', 'name': 'list, tuple, set', 'range': [47, 53], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [57, 61], 'children': [{'type': 'FunctionCall', 'name': 'list', 'range': [58, 61], 'children': [{'type': 'Variable', 'name': 'value', 'range': [60, 60], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': 'isinstance', 'range': [63, 81], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [64, 69], 'children': [{'type': 'Variable', 'name': 'value', 'range': [66, 66], 'children': []}, {'type': 'TypeCheck', 'name': 'dict', 'range': [68, 68], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [72, 80], 'children': [{'type': 'FunctionCall', 'name': 'list', 'range': [73, 80], 'children': [{'type': 'MethodCall', 'name': 'items', 'range': [75, 79], 'children': [{'type': 'Variable', 'name': 'value', 'range': [75, 75], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': 'isinstance', 'range': [82, 144], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [83, 88], 'children': [{'type': 'Variable', 'name': 'value', 'range': [85, 85], 'children': []}, {'type': 'TypeCheck', 'name': 'str', 'range': [87, 87], 'children': []}]}, {'type': 'Assignment', 'name': 'value', 'range': [91, 97], 'children': [{'type': 'MethodCall', 'name': 'strip', 'range': [94, 97], 'children': [{'type': 'Variable', 'name': 'value', 'range': [93, 93], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'startswith', 'range': [99, 136], 'children': [{'type': 'Condition', 'name': 'startswith', 'range': [100, 112], 'children': [{'type': 'Variable', 'name': 'value', 'range': [100, 100], 'children': []}, {'type': 'String', 'name': '"["', 'range': [104, 104], 'children': []}, {'type': 'LogicalOperator', 'name': 'and', 'range': [106, 106], 'children': []}, {'type': 'MethodCall', 'name': 'endswith', 'range': [107, 111], 'children': [{'type': 'Variable', 'name': 'value', 'range': [107, 107], 'children': []}, {'type': 'String', 'name': '"]"', 'range': [111, 111], 'children': []}]}]}, {'type': 'TryStatement', 'name': 'try', 'range': [115, 131], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [118, 125], 'children': [{'type': 'FunctionCall', 'name': 'json.loads', 'range': [119, 124], 'children': [{'type': 'Variable', 'name': 'value', 'range': [123, 123], 'children': []}]}]}, {'type': 'ExceptStatement', 'name': 'except', 'range': [126, 131], 'children': [{'type': 'Exception', 'name': 'JSONDecodeError', 'range': [129, 129], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [132, 136], 'children': [{'type': 'List', 'name': '[value]', 'range': [133, 135], 'children': [{'type': 'Variable', 'name': 'value', 'range': [134, 134], 'children': []}]}]}]}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [137, 144], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [140, 144], 'children': [{'type': 'List', 'name': '[value]', 'range': [141, 143], 'children': [{'type': 'Variable', 'name': 'value', 'range': [142, 142], 'children': []}]}]}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [145, 152], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [148, 152], 'children': [{'type': 'List', 'name': '[value]', 'range': [149, 151], 'children': [{'type': 'Variable', 'name': 'value', 'range': [150, 150], 'children': []}]}]}]}]}]}
2025-01-08 10:18:13,714 - INFO - Starting Step 4: AST normalization
2025-01-08 10:18:15,049 - INFO - Step 4 result: {'type': 'Program', 'name': '__convert_num', 'range': [523, 612], 'children': [{'type': 'FunctionDecl', 'name': '__convert_num', 'range': [523, 612], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [525, 536], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [526, 528], 'children': []}, {'type': 'Parameter', 'name': 'num_type', 'range': [530, 535], 'children': []}]}, {'type': 'ReturnType', 'name': 'NUM', 'range': [539, 539], 'children': []}, {'type': 'Block', 'name': 'function_body', 'range': [541, 612], 'children': [{'type': 'IfStatement', 'name': 'if_statement', 'range': [542, 567], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [543, 556], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [545, 545], 'children': []}, {'type': 'TypeCheck', 'name': 'list, dict, tuple, set', 'range': [547, 555], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [559, 566], 'children': [{'type': 'CallExpression', 'name': 'num_type', 'range': [560, 566], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [562, 565], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [564, 564], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': 'elif_statement', 'range': [568, 579], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [569, 574], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [571, 571], 'children': []}, {'type': 'TypeCheck', 'name': 'num_type', 'range': [573, 573], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [577, 578], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [578, 578], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'else_statement', 'range': [580, 611], 'children': [{'type': 'TryStatement', 'name': 'try_statement', 'range': [583, 607], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [586, 593], 'children': [{'type': 'CallExpression', 'name': 'num_type', 'range': [587, 593], 'children': [{'type': 'CallExpression', 'name': 'float', 'range': [589, 592], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [591, 591], 'children': []}]}]}]}, {'type': 'ExceptStatement', 'name': 'except_statement', 'range': [595, 607], 'children': [{'type': 'ExceptionTypes', 'name': 'ValueError, TypeError', 'range': [597, 600], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [603, 607], 'children': [{'type': 'CallExpression', 'name': 'num_type', 'range': [604, 607], 'children': [{'type': 'Literal', 'name': '0', 'range': [606, 606], 'children': []}]}]}]}]}, {'type': 'Comment', 'name': 'Fallback conversion', 'range': [608, 610], 'children': []}]}]}]}]}
2025-01-08 10:18:15,049 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:18:19,886 - INFO - Step 4 result: {'type': 'Program', 'name': '__convert_tuple', 'range': [306, 400], 'children': [{'type': 'FunctionDecl', 'name': '__convert_tuple', 'range': [306, 400], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [309, 311], 'children': []}, {'type': 'ReturnType', 'name': 'tuple', 'range': [315, 316], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [318, 338], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [319, 330], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [321, 321], 'children': []}, {'type': 'TypeCheck', 'name': 'str, list, set', 'range': [324, 328], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [333, 337], 'children': [{'type': 'CallExpression', 'name': 'tuple', 'range': [334, 337], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [336, 336], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [339, 357], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [340, 345], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [342, 342], 'children': []}, {'type': 'TypeCheck', 'name': 'dict', 'range': [344, 344], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [348, 356], 'children': [{'type': 'CallExpression', 'name': 'tuple', 'range': [349, 356], 'children': [{'type': 'CallExpression', 'name': 'items', 'range': [353, 355], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [351, 351], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [358, 378], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [359, 370], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [361, 361], 'children': []}, {'type': 'TypeCheck', 'name': 'int, float, bool', 'range': [364, 368], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [373, 377], 'children': [{'type': 'Tuple', 'name': '', 'range': [374, 377], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [375, 375], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [379, 390], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [380, 385], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [382, 382], 'children': []}, {'type': 'TypeCheck', 'name': 'tuple', 'range': [384, 384], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [388, 389], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [389, 389], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [391, 399], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [394, 398], 'children': [{'type': 'Tuple', 'name': '', 'range': [395, 398], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [396, 396], 'children': []}]}]}]}]}]}
2025-01-08 10:18:19,887 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:18:23,005 - INFO - Step 4 result: {'type': 'Program', 'name': '__convert_bool', 'range': [613, 677], 'children': [{'type': 'FunctionDecl', 'name': '__convert_bool', 'range': [613, 677], 'children': [{'type': 'Parameters', 'name': 'value', 'range': [615, 619], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [616, 618], 'children': []}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [620, 622], 'children': []}, {'type': 'Block', 'name': '', 'range': [623, 677], 'children': [{'type': 'IfStatement', 'name': '', 'range': [625, 636], 'children': [{'type': 'Condition', 'name': '', 'range': [626, 631], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [626, 631], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [628, 628], 'children': []}, {'type': 'Identifier', 'name': 'bool', 'range': [630, 630], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [632, 636], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [634, 635], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [635, 635], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [637, 668], 'children': [{'type': 'Condition', 'name': '', 'range': [638, 643], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [638, 643], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [640, 640], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [642, 642], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [644, 668], 'children': [{'type': 'IfStatement', 'name': '', 'range': [646, 662], 'children': [{'type': 'Condition', 'name': '', 'range': [647, 657], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [647, 657], 'children': [{'type': 'CallExpression', 'name': 'lower', 'range': [649, 651], 'children': []}, {'type': 'In', 'name': '', 'range': [652, 657], 'children': [{'type': 'List', 'name': '', 'range': [653, 657], 'children': [{'type': 'Literal', 'name': '"true"', 'range': [654, 654], 'children': []}, {'type': 'Literal', 'name': '"1"', 'range': [656, 656], 'children': []}]}]}]}]}, {'type': 'Block', 'name': '', 'range': [658, 662], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [660, 661], 'children': [{'type': 'Literal', 'name': 'True', 'range': [661, 661], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [663, 668], 'children': [{'type': 'Block', 'name': '', 'range': [664, 668], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [666, 667], 'children': [{'type': 'Literal', 'name': 'False', 'range': [667, 667], 'children': []}]}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [669, 677], 'children': [{'type': 'Block', 'name': '', 'range': [670, 677], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [672, 676], 'children': [{'type': 'CallExpression', 'name': 'bool', 'range': [673, 676], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [675, 675], 'children': []}]}]}]}]}]}]}]}
2025-01-08 10:18:23,010 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:18:33,667 - INFO - Step 4 result: {'type': 'Program', 'name': '__convert_set', 'range': [401, 473], 'children': [{'type': 'FunctionDecl', 'name': '__convert_set', 'range': [401, 473], 'children': [{'type': 'Parameters', 'name': 'value', 'range': [403, 407], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [404, 406], 'children': []}]}, {'type': 'ReturnType', 'name': 'set', 'range': [408, 410], 'children': []}, {'type': 'Block', 'name': '', 'range': [412, 473], 'children': [{'type': 'IfStatement', 'name': '', 'range': [413, 433], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [414, 425], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [414, 425], 'children': [{'type': 'Arguments', 'name': '', 'range': [415, 425], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [416, 416], 'children': []}, {'type': 'Tuple', 'name': '', 'range': [418, 424], 'children': [{'type': 'Type', 'name': 'str', 'range': [419, 419], 'children': []}, {'type': 'Type', 'name': 'list', 'range': [421, 421], 'children': []}, {'type': 'Type', 'name': 'tuple', 'range': [423, 423], 'children': []}]}]}]}]}, {'type': 'Block', 'name': '', 'range': [427, 433], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [428, 433], 'children': [{'type': 'CallExpression', 'name': 'set', 'range': [429, 432], 'children': [{'type': 'Arguments', 'name': '', 'range': [430, 432], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [431, 431], 'children': []}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [434, 452], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [435, 440], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [435, 440], 'children': [{'type': 'Arguments', 'name': '', 'range': [436, 440], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [437, 437], 'children': []}, {'type': 'Type', 'name': 'dict', 'range': [439, 439], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [442, 452], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [443, 452], 'children': [{'type': 'CallExpression', 'name': 'set', 'range': [444, 451], 'children': [{'type': 'Arguments', 'name': '', 'range': [445, 451], 'children': [{'type': 'CallExpression', 'name': 'items', 'range': [447, 450], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [446, 446], 'children': []}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [453, 464], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [454, 459], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [454, 459], 'children': [{'type': 'Arguments', 'name': '', 'range': [455, 459], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [456, 456], 'children': []}, {'type': 'Type', 'name': 'set', 'range': [458, 458], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [461, 464], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [462, 464], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [463, 463], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [465, 472], 'children': [{'type': 'Block', 'name': '', 'range': [467, 472], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [468, 472], 'children': [{'type': 'Set', 'name': '', 'range': [469, 471], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [470, 470], 'children': []}]}]}]}]}]}]}]}
2025-01-08 10:18:33,667 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:18:36,230 - INFO - Step 3 result: {'type': 'Program', 'name': '__convert_dict', 'range': [154, 305], 'children': [{'type': 'FunctionDeclaration', 'name': '__convert_dict', 'range': [154, 305], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [157, 159], 'children': []}, {'type': 'ReturnType', 'name': 'dict', 'range': [163, 163], 'children': []}, {'type': 'Block', 'name': '', 'range': [165, 305], 'children': [{'type': 'IfStatement', 'name': '', 'range': [166, 224], 'children': [{'type': 'Condition', 'name': '', 'range': [167, 172], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [167, 172], 'children': [{'type': 'Argument', 'name': 'value', 'range': [169, 169], 'children': []}, {'type': 'Argument', 'name': 'str', 'range': [171, 171], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [174, 224], 'children': [{'type': 'TryStatement', 'name': '', 'range': [175, 224], 'children': [{'type': 'Block', 'name': '', 'range': [177, 208], 'children': [{'type': 'Assignment', 'name': 'result', 'range': [178, 185], 'children': [{'type': 'FunctionCall', 'name': 'json.loads', 'range': [180, 185], 'children': [{'type': 'Argument', 'name': 'value', 'range': [184, 184], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [187, 208], 'children': [{'type': 'Condition', 'name': '', 'range': [188, 193], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [188, 193], 'children': [{'type': 'Argument', 'name': 'result', 'range': [190, 190], 'children': []}, {'type': 'Argument', 'name': 'dict', 'range': [192, 192], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [195, 198], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [196, 197], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [197, 197], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [199, 208], 'children': [{'type': 'Block', 'name': '', 'range': [201, 208], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [202, 207], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [203, 207], 'children': [{'type': 'Property', 'name': 'value', 'range': [204, 206], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [206, 206], 'children': []}]}]}]}]}]}]}]}, {'type': 'CatchStatement', 'name': '', 'range': [209, 224], 'children': [{'type': 'Block', 'name': '', 'range': [214, 224], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [215, 220], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [216, 220], 'children': [{'type': 'Property', 'name': 'value', 'range': [217, 219], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [219, 219], 'children': []}]}]}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [225, 253], 'children': [{'type': 'Condition', 'name': '', 'range': [226, 231], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [226, 231], 'children': [{'type': 'Argument', 'name': 'value', 'range': [228, 228], 'children': []}, {'type': 'Argument', 'name': 'list', 'range': [230, 230], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [233, 253], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [234, 252], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [235, 252], 'children': [{'type': 'Property', 'name': 'i', 'range': [236, 238], 'children': [{'type': 'ArrayAccess', 'name': '', 'range': [239, 241], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [239, 239], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [240, 240], 'children': []}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [254, 282], 'children': [{'type': 'Condition', 'name': '', 'range': [255, 260], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [255, 260], 'children': [{'type': 'Argument', 'name': 'value', 'range': [257, 257], 'children': []}, {'type': 'Argument', 'name': 'tuple', 'range': [259, 259], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [262, 282], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [263, 281], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [264, 281], 'children': [{'type': 'Property', 'name': 'i', 'range': [265, 267], 'children': [{'type': 'ArrayAccess', 'name': '', 'range': [268, 270], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [268, 268], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [269, 269], 'children': []}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [283, 294], 'children': [{'type': 'Condition', 'name': '', 'range': [284, 289], 'children': [{'type': 'FunctionCall', 'name': 'isinstance', 'range': [284, 289], 'children': [{'type': 'Argument', 'name': 'value', 'range': [286, 286], 'children': []}, {'type': 'Argument', 'name': 'dict', 'range': [288, 288], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [291, 294], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [292, 293], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [293, 293], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [295, 304], 'children': [{'type': 'Block', 'name': '', 'range': [297, 304], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [298, 303], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [299, 303], 'children': [{'type': 'Property', 'name': 'value', 'range': [300, 302], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [302, 302], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:18:36,231 - INFO - Starting Step 4: AST normalization
2025-01-08 10:18:36,394 - INFO - Step 5 result: {'type': 'Program', 'name': '__convert_num', 'range': [523, 612], 'children': [{'type': 'FunctionDecl', 'name': '__convert_num', 'range': [523, 612], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [525, 536], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [526, 528], 'children': []}, {'type': 'Parameter', 'name': 'num_type', 'range': [530, 535], 'children': []}]}, {'type': 'ReturnType', 'name': 'NUM', 'range': [539, 539], 'children': []}, {'type': 'Block', 'name': 'function_body', 'range': [541, 612], 'children': [{'type': 'IfStatement', 'name': 'if_statement', 'range': [542, 567], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [543, 556], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [545, 545], 'children': []}, {'type': 'TypeCheck', 'name': 'list, dict, tuple, set', 'range': [547, 555], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [559, 566], 'children': [{'type': 'CallExpression', 'name': 'num_type', 'range': [560, 566], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [562, 565], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [564, 564], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': 'elif_statement', 'range': [568, 579], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [569, 574], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [571, 571], 'children': []}, {'type': 'TypeCheck', 'name': 'num_type', 'range': [573, 573], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [577, 578], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [578, 578], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'else_statement', 'range': [580, 611], 'children': [{'type': 'TryStatement', 'name': 'try_statement', 'range': [583, 607], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [586, 593], 'children': [{'type': 'CallExpression', 'name': 'num_type', 'range': [587, 593], 'children': [{'type': 'CallExpression', 'name': 'float', 'range': [589, 592], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [591, 591], 'children': []}]}]}]}, {'type': 'ExceptStatement', 'name': 'except_statement', 'range': [595, 607], 'children': [{'type': 'ExceptionTypes', 'name': 'ValueError, TypeError', 'range': [597, 600], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [603, 607], 'children': [{'type': 'CallExpression', 'name': 'num_type', 'range': [604, 607], 'children': [{'type': 'Literal', 'name': '0', 'range': [606, 606], 'children': []}]}]}]}]}, {'type': 'Comment', 'name': 'Fallback conversion', 'range': [608, 610], 'children': []}]}]}]}]}
2025-01-08 10:18:36,394 - INFO - Completed main AST analysis flow
2025-01-08 10:18:36,395 - INFO - Successfully processed chunk
2025-01-08 10:18:42,025 - INFO - Step 5 result: {'type': 'Program', 'name': '__convert_tuple', 'range': [306, 400], 'children': [{'type': 'FunctionDecl', 'name': '__convert_tuple', 'range': [306, 400], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [309, 311], 'children': []}, {'type': 'ReturnType', 'name': 'tuple', 'range': [315, 316], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [318, 338], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [319, 330], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [321, 321], 'children': []}, {'type': 'TypeCheck', 'name': 'str, list, set', 'range': [324, 328], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [333, 337], 'children': [{'type': 'CallExpression', 'name': 'tuple', 'range': [334, 337], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [336, 336], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [339, 357], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [340, 345], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [342, 342], 'children': []}, {'type': 'TypeCheck', 'name': 'dict', 'range': [344, 344], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [348, 356], 'children': [{'type': 'CallExpression', 'name': 'tuple', 'range': [349, 356], 'children': [{'type': 'CallExpression', 'name': 'items', 'range': [353, 355], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [351, 351], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [358, 378], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [359, 370], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [361, 361], 'children': []}, {'type': 'TypeCheck', 'name': 'int, float, bool', 'range': [364, 368], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [373, 377], 'children': [{'type': 'Tuple', 'name': '', 'range': [374, 377], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [375, 375], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [379, 390], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [380, 385], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [382, 382], 'children': []}, {'type': 'TypeCheck', 'name': 'tuple', 'range': [384, 384], 'children': []}]}, {'type': 'ReturnStatement', 'name': '', 'range': [388, 389], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [389, 389], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [391, 399], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [394, 398], 'children': [{'type': 'Tuple', 'name': '', 'range': [395, 398], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [396, 396], 'children': []}]}]}]}]}]}
2025-01-08 10:18:42,025 - INFO - Completed main AST analysis flow
2025-01-08 10:18:42,026 - INFO - Successfully processed chunk
2025-01-08 10:18:45,807 - INFO - Step 4 result: {'type': 'Program', 'name': '__convert_list', 'range': [30, 153], 'children': [{'type': 'FunctionDecl', 'name': '__convert_list', 'range': [30, 153], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [33, 35], 'children': []}, {'type': 'ReturnType', 'name': 'list', 'range': [39, 39], 'children': []}, {'type': 'IfStatement', 'name': 'isinstance', 'range': [42, 62], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [43, 54], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [45, 45], 'children': []}, {'type': 'TypeCheck', 'name': 'list, tuple, set', 'range': [47, 53], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [57, 61], 'children': [{'type': 'CallExpression', 'name': 'list', 'range': [58, 61], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [60, 60], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': 'isinstance', 'range': [63, 81], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [64, 69], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [66, 66], 'children': []}, {'type': 'TypeCheck', 'name': 'dict', 'range': [68, 68], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [72, 80], 'children': [{'type': 'CallExpression', 'name': 'list', 'range': [73, 80], 'children': [{'type': 'CallExpression', 'name': 'items', 'range': [75, 79], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [75, 75], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': 'isinstance', 'range': [82, 144], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [83, 88], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [85, 85], 'children': []}, {'type': 'TypeCheck', 'name': 'str', 'range': [87, 87], 'children': []}]}, {'type': 'Assignment', 'name': 'value', 'range': [91, 97], 'children': [{'type': 'CallExpression', 'name': 'strip', 'range': [94, 97], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [93, 93], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'startswith', 'range': [99, 136], 'children': [{'type': 'Condition', 'name': 'startswith', 'range': [100, 112], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [100, 100], 'children': []}, {'type': 'Literal', 'name': '"["', 'range': [104, 104], 'children': []}, {'type': 'LogicalOperator', 'name': 'and', 'range': [106, 106], 'children': []}, {'type': 'CallExpression', 'name': 'endswith', 'range': [107, 111], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [107, 107], 'children': []}, {'type': 'Literal', 'name': '"]"', 'range': [111, 111], 'children': []}]}]}, {'type': 'TryStatement', 'name': 'try', 'range': [115, 131], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [118, 125], 'children': [{'type': 'CallExpression', 'name': 'json.loads', 'range': [119, 124], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [123, 123], 'children': []}]}]}, {'type': 'ExceptStatement', 'name': 'except', 'range': [126, 131], 'children': [{'type': 'Exception', 'name': 'JSONDecodeError', 'range': [129, 129], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [132, 136], 'children': [{'type': 'ArrayExpression', 'name': '[value]', 'range': [133, 135], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [134, 134], 'children': []}]}]}]}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [137, 144], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [140, 144], 'children': [{'type': 'ArrayExpression', 'name': '[value]', 'range': [141, 143], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [142, 142], 'children': []}]}]}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [145, 152], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [148, 152], 'children': [{'type': 'ArrayExpression', 'name': '[value]', 'range': [149, 151], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [150, 150], 'children': []}]}]}]}]}]}
2025-01-08 10:18:45,808 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:18:47,087 - INFO - Step 5 result: {'type': 'Program', 'name': '__convert_bool', 'range': [613, 677], 'children': [{'type': 'FunctionDecl', 'name': '__convert_bool', 'range': [613, 677], 'children': [{'type': 'Parameters', 'name': 'value', 'range': [615, 619], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [616, 618], 'children': []}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [620, 622], 'children': []}, {'type': 'Block', 'name': '', 'range': [623, 677], 'children': [{'type': 'IfStatement', 'name': '', 'range': [625, 636], 'children': [{'type': 'Condition', 'name': '', 'range': [626, 631], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [626, 631], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [628, 628], 'children': []}, {'type': 'Identifier', 'name': 'bool', 'range': [630, 630], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [632, 636], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [634, 635], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [635, 635], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [637, 668], 'children': [{'type': 'Condition', 'name': '', 'range': [638, 643], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [638, 643], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [640, 640], 'children': []}, {'type': 'Identifier', 'name': 'str', 'range': [642, 642], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [644, 668], 'children': [{'type': 'IfStatement', 'name': '', 'range': [646, 662], 'children': [{'type': 'Condition', 'name': '', 'range': [647, 657], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [647, 657], 'children': [{'type': 'CallExpression', 'name': 'lower', 'range': [649, 651], 'children': []}, {'type': 'In', 'name': '', 'range': [652, 657], 'children': [{'type': 'List', 'name': '', 'range': [653, 657], 'children': [{'type': 'Literal', 'name': '"true"', 'range': [654, 654], 'children': []}, {'type': 'Literal', 'name': '"1"', 'range': [656, 656], 'children': []}]}]}]}]}, {'type': 'Block', 'name': '', 'range': [658, 662], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [660, 661], 'children': [{'type': 'Literal', 'name': 'True', 'range': [661, 661], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [663, 668], 'children': [{'type': 'Block', 'name': '', 'range': [664, 668], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [666, 667], 'children': [{'type': 'Literal', 'name': 'False', 'range': [667, 667], 'children': []}]}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [669, 677], 'children': [{'type': 'Block', 'name': '', 'range': [670, 677], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [672, 676], 'children': [{'type': 'CallExpression', 'name': 'bool', 'range': [673, 676], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [675, 675], 'children': []}]}]}]}]}]}]}]}
2025-01-08 10:18:47,088 - INFO - Completed main AST analysis flow
2025-01-08 10:18:47,088 - INFO - Successfully processed chunk
2025-01-08 10:19:01,704 - INFO - Step 5 result: {'type': 'Program', 'name': '__convert_set', 'range': [401, 473], 'children': [{'type': 'FunctionDecl', 'name': '__convert_set', 'range': [401, 473], 'children': [{'type': 'Parameters', 'name': 'value', 'range': [403, 407], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [404, 406], 'children': []}]}, {'type': 'ReturnType', 'name': 'set', 'range': [408, 410], 'children': []}, {'type': 'Block', 'name': '', 'range': [412, 473], 'children': [{'type': 'IfStatement', 'name': '', 'range': [413, 433], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [414, 425], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [414, 425], 'children': [{'type': 'Arguments', 'name': '', 'range': [415, 425], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [416, 416], 'children': []}, {'type': 'Tuple', 'name': '', 'range': [418, 424], 'children': [{'type': 'Type', 'name': 'str', 'range': [419, 419], 'children': []}, {'type': 'Type', 'name': 'list', 'range': [421, 421], 'children': []}, {'type': 'Type', 'name': 'tuple', 'range': [423, 423], 'children': []}]}]}]}]}, {'type': 'Block', 'name': '', 'range': [427, 433], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [428, 433], 'children': [{'type': 'CallExpression', 'name': 'set', 'range': [429, 432], 'children': [{'type': 'Arguments', 'name': '', 'range': [430, 432], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [431, 431], 'children': []}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [434, 452], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [435, 440], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [435, 440], 'children': [{'type': 'Arguments', 'name': '', 'range': [436, 440], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [437, 437], 'children': []}, {'type': 'Type', 'name': 'dict', 'range': [439, 439], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [442, 452], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [443, 452], 'children': [{'type': 'CallExpression', 'name': 'set', 'range': [444, 451], 'children': [{'type': 'Arguments', 'name': '', 'range': [445, 451], 'children': [{'type': 'CallExpression', 'name': 'items', 'range': [447, 450], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [446, 446], 'children': []}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [453, 464], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [454, 459], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [454, 459], 'children': [{'type': 'Arguments', 'name': '', 'range': [455, 459], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [456, 456], 'children': []}, {'type': 'Type', 'name': 'set', 'range': [458, 458], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [461, 464], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [462, 464], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [463, 463], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [465, 472], 'children': [{'type': 'Block', 'name': '', 'range': [467, 472], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [468, 472], 'children': [{'type': 'Set', 'name': '', 'range': [469, 471], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [470, 470], 'children': []}]}]}]}]}]}]}]}
2025-01-08 10:19:01,705 - INFO - Completed main AST analysis flow
2025-01-08 10:19:01,705 - INFO - Successfully processed chunk
2025-01-08 10:19:17,886 - INFO - Step 5 result: {'type': 'Program', 'name': '__convert_list', 'range': [30, 153], 'children': [{'type': 'FunctionDecl', 'name': '__convert_list', 'range': [30, 153], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [33, 35], 'children': []}, {'type': 'ReturnType', 'name': 'list', 'range': [39, 39], 'children': []}, {'type': 'IfStatement', 'name': 'isinstance', 'range': [42, 62], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [43, 54], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [45, 45], 'children': []}, {'type': 'TypeCheck', 'name': 'list, tuple, set', 'range': [47, 53], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [57, 61], 'children': [{'type': 'CallExpression', 'name': 'list', 'range': [58, 61], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [60, 60], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': 'isinstance', 'range': [63, 81], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [64, 69], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [66, 66], 'children': []}, {'type': 'TypeCheck', 'name': 'dict', 'range': [68, 68], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [72, 80], 'children': [{'type': 'CallExpression', 'name': 'list', 'range': [73, 80], 'children': [{'type': 'CallExpression', 'name': 'items', 'range': [75, 79], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [75, 75], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': 'isinstance', 'range': [82, 144], 'children': [{'type': 'Condition', 'name': 'isinstance', 'range': [83, 88], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [85, 85], 'children': []}, {'type': 'TypeCheck', 'name': 'str', 'range': [87, 87], 'children': []}]}, {'type': 'Assignment', 'name': 'value', 'range': [91, 97], 'children': [{'type': 'CallExpression', 'name': 'strip', 'range': [94, 97], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [93, 93], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'startswith', 'range': [99, 136], 'children': [{'type': 'Condition', 'name': 'startswith', 'range': [100, 112], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [100, 100], 'children': []}, {'type': 'Literal', 'name': '"["', 'range': [104, 104], 'children': []}, {'type': 'LogicalOperator', 'name': 'and', 'range': [106, 106], 'children': []}, {'type': 'CallExpression', 'name': 'endswith', 'range': [107, 111], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [107, 107], 'children': []}, {'type': 'Literal', 'name': '"]"', 'range': [111, 111], 'children': []}]}]}, {'type': 'TryStatement', 'name': 'try', 'range': [115, 131], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [118, 125], 'children': [{'type': 'CallExpression', 'name': 'json.loads', 'range': [119, 124], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [123, 123], 'children': []}]}]}, {'type': 'ExceptStatement', 'name': 'except', 'range': [126, 131], 'children': [{'type': 'Exception', 'name': 'JSONDecodeError', 'range': [129, 129], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [132, 136], 'children': [{'type': 'ArrayExpression', 'name': '[value]', 'range': [133, 135], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [134, 134], 'children': []}]}]}]}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [137, 144], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [140, 144], 'children': [{'type': 'ArrayExpression', 'name': '[value]', 'range': [141, 143], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [142, 142], 'children': []}]}]}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [145, 152], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [148, 152], 'children': [{'type': 'ArrayExpression', 'name': '[value]', 'range': [149, 151], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [150, 150], 'children': []}]}]}]}]}]}
2025-01-08 10:19:17,886 - INFO - Completed main AST analysis flow
2025-01-08 10:19:17,888 - INFO - Successfully processed chunk
2025-01-08 10:19:19,529 - INFO - Step 4 result: {'type': 'Program', 'name': '__convert_dict', 'range': [154, 305], 'children': [{'type': 'FunctionDecl', 'name': '__convert_dict', 'range': [154, 305], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [157, 159], 'children': []}, {'type': 'ReturnType', 'name': 'dict', 'range': [163, 163], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [165, 305], 'children': [{'type': 'IfStatement', 'name': '', 'range': [166, 224], 'children': [{'type': 'Condition', 'name': '', 'range': [167, 172], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [167, 172], 'children': [{'type': 'Argument', 'name': 'value', 'range': [169, 169], 'children': []}, {'type': 'Argument', 'name': 'str', 'range': [171, 171], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [174, 224], 'children': [{'type': 'TryStatement', 'name': '', 'range': [175, 224], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [177, 208], 'children': [{'type': 'AssignmentExpression', 'name': 'result', 'range': [178, 185], 'children': [{'type': 'CallExpression', 'name': 'json.loads', 'range': [180, 185], 'children': [{'type': 'Argument', 'name': 'value', 'range': [184, 184], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [187, 208], 'children': [{'type': 'Condition', 'name': '', 'range': [188, 193], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [188, 193], 'children': [{'type': 'Argument', 'name': 'result', 'range': [190, 190], 'children': []}, {'type': 'Argument', 'name': 'dict', 'range': [192, 192], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [195, 198], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [196, 197], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [197, 197], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [199, 208], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [201, 208], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [202, 207], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [203, 207], 'children': [{'type': 'Property', 'name': 'value', 'range': [204, 206], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [206, 206], 'children': []}]}]}]}]}]}]}]}, {'type': 'CatchStatement', 'name': '', 'range': [209, 224], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [214, 224], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [215, 220], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [216, 220], 'children': [{'type': 'Property', 'name': 'value', 'range': [217, 219], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [219, 219], 'children': []}]}]}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [225, 253], 'children': [{'type': 'Condition', 'name': '', 'range': [226, 231], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [226, 231], 'children': [{'type': 'Argument', 'name': 'value', 'range': [228, 228], 'children': []}, {'type': 'Argument', 'name': 'list', 'range': [230, 230], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [233, 253], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [234, 252], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [235, 252], 'children': [{'type': 'Property', 'name': 'i', 'range': [236, 238], 'children': [{'type': 'ArrayAccess', 'name': '', 'range': [239, 241], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [239, 239], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [240, 240], 'children': []}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [254, 282], 'children': [{'type': 'Condition', 'name': '', 'range': [255, 260], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [255, 260], 'children': [{'type': 'Argument', 'name': 'value', 'range': [257, 257], 'children': []}, {'type': 'Argument', 'name': 'tuple', 'range': [259, 259], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [262, 282], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [263, 281], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [264, 281], 'children': [{'type': 'Property', 'name': 'i', 'range': [265, 267], 'children': [{'type': 'ArrayAccess', 'name': '', 'range': [268, 270], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [268, 268], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [269, 269], 'children': []}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [283, 294], 'children': [{'type': 'Condition', 'name': '', 'range': [284, 289], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [284, 289], 'children': [{'type': 'Argument', 'name': 'value', 'range': [286, 286], 'children': []}, {'type': 'Argument', 'name': 'dict', 'range': [288, 288], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [291, 294], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [292, 293], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [293, 293], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [295, 304], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [297, 304], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [298, 303], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [299, 303], 'children': [{'type': 'Property', 'name': 'value', 'range': [300, 302], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [302, 302], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:19:19,529 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:19:22,905 - ERROR - Failed to parse Step 2 result
2025-01-08 10:19:22,906 - INFO - Starting Step 3: AST simplification
2025-01-08 10:20:04,705 - INFO - Step 5 result: {'type': 'Program', 'name': '__convert_dict', 'range': [154, 305], 'children': [{'type': 'FunctionDecl', 'name': '__convert_dict', 'range': [154, 305], 'children': [{'type': 'Parameter', 'name': 'value', 'range': [157, 159], 'children': []}, {'type': 'ReturnType', 'name': 'dict', 'range': [163, 163], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [165, 305], 'children': [{'type': 'IfStatement', 'name': '', 'range': [166, 224], 'children': [{'type': 'Condition', 'name': '', 'range': [167, 172], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [167, 172], 'children': [{'type': 'Argument', 'name': 'value', 'range': [169, 169], 'children': []}, {'type': 'Argument', 'name': 'str', 'range': [171, 171], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [174, 224], 'children': [{'type': 'TryStatement', 'name': '', 'range': [175, 224], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [177, 208], 'children': [{'type': 'AssignmentExpression', 'name': 'result', 'range': [178, 185], 'children': [{'type': 'CallExpression', 'name': 'json.loads', 'range': [180, 185], 'children': [{'type': 'Argument', 'name': 'value', 'range': [184, 184], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [187, 208], 'children': [{'type': 'Condition', 'name': '', 'range': [188, 193], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [188, 193], 'children': [{'type': 'Argument', 'name': 'result', 'range': [190, 190], 'children': []}, {'type': 'Argument', 'name': 'dict', 'range': [192, 192], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [195, 198], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [196, 197], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [197, 197], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [199, 208], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [201, 208], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [202, 207], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [203, 207], 'children': [{'type': 'Property', 'name': 'value', 'range': [204, 206], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [206, 206], 'children': []}]}]}]}]}]}]}]}, {'type': 'CatchStatement', 'name': '', 'range': [209, 224], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [214, 224], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [215, 220], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [216, 220], 'children': [{'type': 'Property', 'name': 'value', 'range': [217, 219], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [219, 219], 'children': []}]}]}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [225, 253], 'children': [{'type': 'Condition', 'name': '', 'range': [226, 231], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [226, 231], 'children': [{'type': 'Argument', 'name': 'value', 'range': [228, 228], 'children': []}, {'type': 'Argument', 'name': 'list', 'range': [230, 230], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [233, 253], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [234, 252], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [235, 252], 'children': [{'type': 'Property', 'name': 'i', 'range': [236, 238], 'children': [{'type': 'ArrayAccess', 'name': '', 'range': [239, 241], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [239, 239], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [240, 240], 'children': []}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [254, 282], 'children': [{'type': 'Condition', 'name': '', 'range': [255, 260], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [255, 260], 'children': [{'type': 'Argument', 'name': 'value', 'range': [257, 257], 'children': []}, {'type': 'Argument', 'name': 'tuple', 'range': [259, 259], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [262, 282], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [263, 281], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [264, 281], 'children': [{'type': 'Property', 'name': 'i', 'range': [265, 267], 'children': [{'type': 'ArrayAccess', 'name': '', 'range': [268, 270], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [268, 268], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [269, 269], 'children': []}]}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [283, 294], 'children': [{'type': 'Condition', 'name': '', 'range': [284, 289], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [284, 289], 'children': [{'type': 'Argument', 'name': 'value', 'range': [286, 286], 'children': []}, {'type': 'Argument', 'name': 'dict', 'range': [288, 288], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [291, 294], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [292, 293], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [293, 293], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [295, 304], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [297, 304], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [298, 303], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [299, 303], 'children': [{'type': 'Property', 'name': 'value', 'range': [300, 302], 'children': [{'type': 'Identifier', 'name': 'value', 'range': [302, 302], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:20:04,705 - INFO - Completed main AST analysis flow
2025-01-08 10:20:04,706 - INFO - Successfully processed chunk
2025-01-08 10:21:35,783 - ERROR - Failed to parse Step 3 result
2025-01-08 10:21:35,783 - INFO - Starting Step 4: AST normalization
2025-01-08 10:21:37,473 - INFO - Step 4 result: {'type': 'Program', 'name': 'Program', 'range': [0, 0], 'children': []}
2025-01-08 10:21:37,473 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:21:39,041 - INFO - Step 5 result: {'type': 'Program', 'name': 'Program', 'range': [0, 0], 'children': []}
2025-01-08 10:21:39,041 - INFO - Completed main AST analysis flow
2025-01-08 10:21:39,041 - INFO - Successfully processed chunk
2025-01-08 10:21:39,105 - INFO - Starting code generation from AST
2025-01-08 10:22:05,085 - INFO - Successfully generated code from AST
2025-01-08 10:22:05,085 - INFO - Starting static code similarity comparison
2025-01-08 10:22:05,124 - INFO - Static similarity result: {'final_score': 98.71, 'length_similarity': 98.66, 'token_similarity': 98.39, 'structure_similarity': 97.59, 'function_similarity': 100, 'complexity_similarity': 100.0, 'variable_similarity': 100}
