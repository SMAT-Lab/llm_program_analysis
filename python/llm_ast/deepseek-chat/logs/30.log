2025-01-08 09:16:35,150 - INFO - Processing sample 30
2025-01-08 09:16:35,161 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:16:52,267 - INFO - Successfully split code into 13 top-level declarations
2025-01-08 09:16:52,269 - INFO - Processing chunk #0 (size=146 chars, start_index=0)
2025-01-08 09:16:52,270 - INFO - Processing chunk with 146 chars starting at index 0
2025-01-08 09:16:52,270 - INFO - Starting main AST analysis flow
2025-01-08 09:16:52,270 - INFO - Tokenized code into 42 tokens
2025-01-08 09:16:52,270 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:52,270 - INFO - Processing chunk #1 (size=458 chars, start_index=42)
2025-01-08 09:16:52,270 - INFO - Processing chunk with 458 chars starting at index 42
2025-01-08 09:16:52,270 - INFO - Starting main AST analysis flow
2025-01-08 09:16:52,270 - INFO - Tokenized code into 83 tokens
2025-01-08 09:16:52,270 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:52,271 - INFO - Processing chunk #2 (size=427 chars, start_index=125)
2025-01-08 09:16:52,271 - INFO - Processing chunk with 427 chars starting at index 125
2025-01-08 09:16:52,271 - INFO - Starting main AST analysis flow
2025-01-08 09:16:52,271 - INFO - Tokenized code into 87 tokens
2025-01-08 09:16:52,271 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:52,275 - INFO - Processing chunk #3 (size=518 chars, start_index=212)
2025-01-08 09:16:52,276 - INFO - Processing chunk with 518 chars starting at index 212
2025-01-08 09:16:52,276 - INFO - Starting main AST analysis flow
2025-01-08 09:16:52,277 - INFO - Tokenized code into 107 tokens
2025-01-08 09:16:52,277 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:52,283 - INFO - Processing chunk #4 (size=642 chars, start_index=319)
2025-01-08 09:16:52,283 - INFO - Processing chunk with 642 chars starting at index 319
2025-01-08 09:16:52,285 - INFO - Starting main AST analysis flow
2025-01-08 09:16:52,285 - INFO - Processing chunk #5 (size=345 chars, start_index=362)
2025-01-08 09:16:52,286 - INFO - Tokenized code into 43 tokens
2025-01-08 09:16:52,287 - INFO - Processing chunk #6 (size=2000 chars, start_index=472)
2025-01-08 09:16:52,287 - INFO - Processing chunk with 345 chars starting at index 362
2025-01-08 09:16:52,287 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:52,287 - INFO - Processing chunk #7 (size=1540 chars, start_index=633)
2025-01-08 09:16:52,288 - INFO - Processing chunk with 2000 chars starting at index 472
2025-01-08 09:16:52,288 - INFO - Processing chunk #8 (size=301 chars, start_index=846)
2025-01-08 09:16:52,288 - INFO - Starting main AST analysis flow
2025-01-08 09:16:52,289 - INFO - Processing chunk #9 (size=402 chars, start_index=902)
2025-01-08 09:16:52,289 - INFO - Processing chunk #10 (size=401 chars, start_index=974)
2025-01-08 09:16:52,289 - INFO - Processing chunk with 1540 chars starting at index 633
2025-01-08 09:16:52,289 - INFO - Processing chunk #11 (size=240 chars, start_index=1044)
2025-01-08 09:16:52,290 - INFO - Starting main AST analysis flow
2025-01-08 09:16:52,292 - INFO - Processing chunk with 301 chars starting at index 846
2025-01-08 09:16:52,293 - INFO - Tokenized code into 110 tokens
2025-01-08 09:16:52,293 - INFO - Processing chunk #12 (size=599 chars, start_index=1087)
2025-01-08 09:16:52,293 - INFO - Processing chunk with 402 chars starting at index 902
2025-01-08 09:16:52,294 - INFO - Processing chunk with 401 chars starting at index 974
2025-01-08 09:16:52,294 - INFO - Starting main AST analysis flow
2025-01-08 09:16:52,294 - INFO - Processing chunk with 240 chars starting at index 1044
2025-01-08 09:16:52,294 - INFO - Tokenized code into 161 tokens
2025-01-08 09:16:52,294 - INFO - Starting main AST analysis flow
2025-01-08 09:16:52,295 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:52,295 - INFO - Processing chunk with 599 chars starting at index 1087
2025-01-08 09:16:52,296 - INFO - Starting main AST analysis flow
2025-01-08 09:16:52,295 - INFO - Starting main AST analysis flow
2025-01-08 09:16:52,295 - INFO - Tokenized code into 213 tokens
2025-01-08 09:16:52,295 - INFO - Starting main AST analysis flow
2025-01-08 09:16:52,295 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:52,296 - INFO - Tokenized code into 56 tokens
2025-01-08 09:16:52,295 - INFO - Starting main AST analysis flow
2025-01-08 09:16:52,296 - INFO - Tokenized code into 111 tokens
2025-01-08 09:16:52,296 - INFO - Tokenized code into 72 tokens
2025-01-08 09:16:52,303 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:52,297 - INFO - Tokenized code into 43 tokens
2025-01-08 09:16:52,302 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:52,302 - INFO - Tokenized code into 70 tokens
2025-01-08 09:16:52,303 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:52,297 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:52,303 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:52,304 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:17:00,954 - INFO - Step 1 result: {'type': 'Program', 'name': 'check_duplicate_links', 'range': [212, 318], 'children': []}
2025-01-08 09:17:00,954 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:01,016 - INFO - Step 1 result: {'type': 'Program', 'name': 'get_host_from_link', 'range': [362, 471], 'children': []}
2025-01-08 09:17:01,016 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:01,240 - INFO - Step 1 result: {'type': 'Program', 'name': 'start_links_working_checker', 'range': [974, 1043], 'children': []}
2025-01-08 09:17:01,240 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:01,299 - INFO - Step 1 result: {'type': 'Program', 'name': 'has_cloudflare_protection', 'range': [472, 630], 'children': []}
2025-01-08 09:17:01,299 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:01,646 - INFO - Step 1 result: {'type': 'Program', 'name': 'check_if_list_of_links_are_working', 'range': [846, 899], 'children': []}
2025-01-08 09:17:01,646 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:02,165 - INFO - Step 1 result: {'type': 'Program', 'name': 'find_links_in_text', 'range': [42, 123], 'children': []}
2025-01-08 09:17:02,165 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:02,336 - INFO - Step 1 result: {'type': 'Program', 'name': 'find_links_in_file', 'range': [125, 210], 'children': []}
2025-01-08 09:17:02,337 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:02,872 - INFO - Step 1 result: {'type': 'Program', 'name': 'check_if_link_is_working', 'range': [633, 844], 'children': []}
2025-01-08 09:17:02,872 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:07,669 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [1087, 1197], 'children': [{'type': 'VariableDeclaration', 'name': 'num_args', 'range': [1094, 1102], 'children': []}, {'type': 'VariableDeclaration', 'name': 'only_duplicate_links_checker', 'range': [1103, 1106], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [1108, 1125], 'children': []}, {'type': 'ElifStatement', 'name': '', 'range': [1126, 1178], 'children': []}, {'type': 'VariableDeclaration', 'name': 'filename', 'range': [1180, 1188], 'children': []}, {'type': 'FunctionCall', 'name': 'main', 'range': [1190, 1196], 'children': []}]}
2025-01-08 09:17:07,669 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:08,135 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 41], 'children': [{'type': 'ImportDeclaration', 'name': 're', 'range': [14, 16], 'children': []}, {'type': 'ImportDeclaration', 'name': 'sys', 'range': [17, 19], 'children': []}, {'type': 'ImportDeclaration', 'name': 'random', 'range': [20, 22], 'children': []}, {'type': 'ImportDeclaration', 'name': 'List, Tuple', 'range': [23, 29], 'children': []}, {'type': 'ImportDeclaration', 'name': 'requests', 'range': [31, 33], 'children': []}, {'type': 'ImportDeclaration', 'name': 'Response', 'range': [34, 40], 'children': []}]}
2025-01-08 09:17:08,135 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:08,936 - INFO - Step 1 result: {'type': 'Program', 'name': 'main', 'range': [1044, 1086], 'children': [{'type': 'FunctionDeclaration', 'name': 'main', 'range': [1044, 1086], 'children': [{'type': 'Parameter', 'name': 'filename', 'range': [1047, 1049]}, {'type': 'Parameter', 'name': 'only_duplicate_links_checker', 'range': [1051, 1053]}, {'type': 'BlockStatement', 'range': [1058, 1086], 'children': [{'type': 'VariableDeclaration', 'name': 'links', 'range': [1061, 1066]}, {'type': 'ExpressionStatement', 'range': [1069, 1072]}, {'type': 'IfStatement', 'range': [1075, 1084], 'children': [{'type': 'ExpressionStatement', 'range': [1080, 1083]}]}]}]}]}
2025-01-08 09:17:08,937 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:15,637 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [319, 361], 'children': [{'type': 'FunctionDeclaration', 'name': 'fake_user_agent', 'range': [319, 359], 'children': [{'type': 'ParameterList', 'name': '', 'range': [321, 322], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [323, 325], 'children': []}, {'type': 'FunctionBody', 'name': '', 'range': [326, 359], 'children': [{'type': 'VariableDeclaration', 'name': 'user_agents', 'range': [333, 349], 'children': [{'type': 'ArrayLiteral', 'name': '', 'range': [335, 349], 'children': [{'type': 'StringLiteral', 'name': '', 'range': [337, 337], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [340, 340], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [343, 343], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [346, 346], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [352, 358], 'children': [{'type': 'CallExpression', 'name': 'random.choice', 'range': [353, 358], 'children': [{'type': 'Identifier', 'name': 'user_agents', 'range': [357, 357], 'children': []}]}]}]}]}]}
2025-01-08 09:17:15,637 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:28,272 - INFO - Step 2 result: {'type': 'Program', 'name': 'check_duplicate_links', 'range': [212, 318], 'children': [{'type': 'FunctionDeclaration', 'name': 'check_duplicate_links', 'range': [212, 318], 'children': [{'type': 'Parameter', 'name': 'links', 'range': [215, 220], 'children': [{'type': 'TypeAnnotation', 'name': 'List[str]', 'range': [217, 220], 'children': []}]}, {'type': 'ReturnType', 'name': 'Tuple[bool, List]', 'range': [224, 229], 'children': []}, {'type': 'Docstring', 'name': '"Check for duplicated links. \\n  \\n     Returns a tuple with True or False and duplicate list. \\n     "', 'range': [232, 234], 'children': []}, {'type': 'VariableDeclaration', 'name': 'seen', 'range': [237, 240], 'children': []}, {'type': 'VariableDeclaration', 'name': 'duplicates', 'range': [242, 245], 'children': []}, {'type': 'VariableDeclaration', 'name': 'has_duplicate', 'range': [247, 249], 'children': []}, {'type': 'ForLoop', 'name': 'for link in links', 'range': [252, 301], 'children': [{'type': 'Assignment', 'name': "link = link.rstrip('/')", 'range': [258, 266], 'children': []}, {'type': 'IfStatement', 'name': 'if link not in seen', 'range': [267, 280], 'children': [{'type': 'Assignment', 'name': 'seen[link] = 1', 'range': [274, 279], 'children': []}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [281, 301], 'children': [{'type': 'IfStatement', 'name': 'if seen[link] == 1', 'range': [284, 300], 'children': [{'type': 'MethodCall', 'name': 'duplicates.append(link)', 'range': [294, 299], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if duplicates', 'range': [302, 309], 'children': [{'type': 'Assignment', 'name': 'has_duplicate = True', 'range': [306, 308], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return (has_duplicate, duplicates)', 'range': [311, 316], 'children': []}]}]}
2025-01-08 09:17:28,272 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:30,538 - INFO - Step 2 result: {'nodes': [{'type': 'ImportDeclaration', 'name': 're', 'range': [14, 16], 'children': [{'type': 'ImportSpecifier', 'name': 're', 'range': [14, 16], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'sys', 'range': [17, 19], 'children': [{'type': 'ImportSpecifier', 'name': 'sys', 'range': [17, 19], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'random', 'range': [20, 22], 'children': [{'type': 'ImportSpecifier', 'name': 'random', 'range': [20, 22], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'List, Tuple', 'range': [23, 29], 'children': [{'type': 'ImportSpecifier', 'name': 'List', 'range': [26, 26], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Tuple', 'range': [28, 28], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'requests', 'range': [31, 33], 'children': [{'type': 'ImportSpecifier', 'name': 'requests', 'range': [31, 33], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'Response', 'range': [34, 40], 'children': [{'type': 'ImportSpecifier', 'name': 'Response', 'range': [39, 39], 'children': []}]}]}
2025-01-08 09:17:30,538 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:32,748 - INFO - Step 2 result: {'type': 'Program', 'name': 'start_links_working_checker', 'range': [974, 1043], 'children': [{'type': 'FunctionDeclaration', 'name': 'start_links_working_checker', 'range': [974, 987], 'children': [{'type': 'Parameter', 'name': 'links', 'range': [977, 982], 'children': []}, {'type': 'ReturnType', 'name': 'None', 'range': [984, 986], 'children': []}]}, {'type': 'PrintStatement', 'name': 'print', 'range': [990, 994], 'children': [{'type': 'StringLiteral', 'name': "'Checking if {len(links)} links are working...'", 'range': [993, 993], 'children': []}]}, {'type': 'Assignment', 'name': 'errors', 'range': [997, 1002], 'children': [{'type': 'FunctionCall', 'name': 'check_if_list_of_links_are_working', 'range': [999, 1002], 'children': [{'type': 'Argument', 'name': 'links', 'range': [1001, 1001], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [1004, 1022], 'children': [{'type': 'Condition', 'name': 'errors', 'range': [1005, 1005], 'children': []}, {'type': 'Assignment', 'name': 'num_errors', 'range': [1009, 1014], 'children': [{'type': 'FunctionCall', 'name': 'len', 'range': [1011, 1014], 'children': [{'type': 'Argument', 'name': 'errors', 'range': [1013, 1013], 'children': []}]}]}, {'type': 'PrintStatement', 'name': 'print', 'range': [1016, 1020], 'children': [{'type': 'StringLiteral', 'name': "'Apparently {num_errors} links are not working properly. See in:'", 'range': [1019, 1019], 'children': []}]}, {'type': 'ForStatement', 'name': 'for', 'range': [1023, 1033], 'children': [{'type': 'VariableDeclaration', 'name': 'error_message', 'range': [1024, 1024], 'children': []}, {'type': 'Collection', 'name': 'errors', 'range': [1026, 1026], 'children': []}, {'type': 'PrintStatement', 'name': 'print', 'range': [1029, 1032], 'children': [{'type': 'Variable', 'name': 'error_message', 'range': [1031, 1031], 'children': []}]}]}, {'type': 'FunctionCall', 'name': 'sys.exit', 'range': [1035, 1040], 'children': [{'type': 'Argument', 'name': '1', 'range': [1039, 1039], 'children': []}]}]}]}
2025-01-08 09:17:32,749 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:36,135 - INFO - Step 1 result: {'type': 'Program', 'name': 'start_duplicate_links_checker', 'range': [902, 973], 'children': [{'type': 'FunctionDeclaration', 'name': 'start_duplicate_links_checker', 'range': [902, 973], 'children': [{'type': 'Parameter', 'name': 'links', 'range': [905, 910], 'children': []}, {'type': 'ReturnType', 'name': 'None', 'range': [912, 914], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [916, 973], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [918, 922], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [918, 921], 'children': [{'type': 'Literal', 'name': "'Checking for duplicate links...'", 'range': [920, 920], 'children': []}]}]}, {'type': 'VariableDeclaration', 'name': '', 'range': [924, 932], 'children': [{'type': 'VariableDeclarator', 'name': 'has_duplicate_link', 'range': [924, 924], 'children': []}, {'type': 'VariableDeclarator', 'name': 'duplicates_links', 'range': [926, 926], 'children': []}, {'type': 'CallExpression', 'name': 'check_duplicate_links', 'range': [928, 931], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [930, 930], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [934, 971], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [938, 943], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [938, 942], 'children': [{'type': 'Literal', 'name': "'Found duplicate links:'", 'range': [941, 941], 'children': []}]}]}, {'type': 'ForStatement', 'name': '', 'range': [945, 955], 'children': [{'type': 'VariableDeclaration', 'name': 'duplicate_link', 'range': [946, 946], 'children': []}, {'type': 'Identifier', 'name': 'duplicates_links', 'range': [948, 948], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [950, 955], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [951, 954], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [951, 953], 'children': [{'type': 'Identifier', 'name': 'duplicate_link', 'range': [953, 953], 'children': []}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [957, 963], 'children': [{'type': 'CallExpression', 'name': 'sys.exit', 'range': [957, 962], 'children': [{'type': 'Literal', 'name': '1', 'range': [961, 961], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [964, 971], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [967, 970], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [967, 969], 'children': [{'type': 'Literal', 'name': "'No duplicate links.'", 'range': [969, 969], 'children': []}]}]}]}]}]}]}]}
2025-01-08 09:17:36,135 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:37,498 - INFO - Step 2 result: {'type': 'Program', 'name': 'check_if_list_of_links_are_working', 'range': [846, 899], 'children': [{'type': 'FunctionDeclaration', 'name': 'check_if_list_of_links_are_working', 'range': [846, 899], 'children': [{'type': 'Parameter', 'name': 'list_of_links', 'range': [849, 854], 'children': [{'type': 'TypeAnnotation', 'name': 'List[str]', 'range': [851, 854], 'children': []}]}, {'type': 'ReturnType', 'name': 'List[str]', 'range': [858, 861], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [863, 899], 'children': [{'type': 'VariableDeclaration', 'name': 'error_messages', 'range': [864, 867], 'children': [{'type': 'Assignment', 'name': '=', 'range': [865, 867], 'children': [{'type': 'ArrayLiteral', 'name': '[]', 'range': [866, 867], 'children': []}]}]}, {'type': 'ForStatement', 'name': '', 'range': [869, 895], 'children': [{'type': 'VariableDeclaration', 'name': 'link', 'range': [870, 870], 'children': []}, {'type': 'Expression', 'name': 'list_of_links', 'range': [872, 872], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [874, 895], 'children': [{'type': 'VariableDeclaration', 'name': 'has_error, error_message', 'range': [875, 882], 'children': [{'type': 'Assignment', 'name': '=', 'range': [878, 882], 'children': [{'type': 'CallExpression', 'name': 'check_if_link_is_working', 'range': [879, 882], 'children': [{'type': 'Argument', 'name': 'link', 'range': [881, 881], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [885, 895], 'children': [{'type': 'Condition', 'name': 'has_error', 'range': [886, 886], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [888, 895], 'children': [{'type': 'ExpressionStatement', 'name': 'error_messages.append(error_message)', 'range': [889, 894], 'children': [{'type': 'CallExpression', 'name': 'append', 'range': [891, 894], 'children': [{'type': 'Argument', 'name': 'error_message', 'range': [893, 893], 'children': []}]}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'return error_messages', 'range': [897, 898], 'children': [{'type': 'Expression', 'name': 'error_messages', 'range': [898, 898], 'children': []}]}]}]}]}
2025-01-08 09:17:37,498 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:37,789 - INFO - Step 2 result: {'type': 'Program', 'name': 'main', 'range': [1044, 1086], 'children': [{'type': 'FunctionDeclaration', 'name': 'main', 'range': [1044, 1086], 'children': [{'type': 'Parameter', 'name': 'filename', 'range': [1047, 1049]}, {'type': 'Parameter', 'name': 'only_duplicate_links_checker', 'range': [1051, 1053]}, {'type': 'BlockStatement', 'range': [1058, 1086], 'children': [{'type': 'VariableDeclaration', 'name': 'links', 'range': [1061, 1066], 'children': [{'type': 'AssignmentExpression', 'range': [1062, 1066], 'children': [{'type': 'CallExpression', 'name': 'find_links_in_file', 'range': [1063, 1066], 'children': [{'type': 'Identifier', 'name': 'filename', 'range': [1065, 1065]}]}]}]}, {'type': 'ExpressionStatement', 'range': [1069, 1072], 'children': [{'type': 'CallExpression', 'name': 'start_duplicate_links_checker', 'range': [1069, 1072], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [1071, 1071]}]}]}, {'type': 'IfStatement', 'range': [1075, 1084], 'children': [{'type': 'UnaryExpression', 'operator': 'not', 'range': [1076, 1077], 'children': [{'type': 'Identifier', 'name': 'only_duplicate_links_checker', 'range': [1077, 1077]}]}, {'type': 'BlockStatement', 'range': [1078, 1084], 'children': [{'type': 'ExpressionStatement', 'range': [1080, 1083], 'children': [{'type': 'CallExpression', 'name': 'start_links_working_checker', 'range': [1080, 1083], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [1082, 1082]}]}]}]}]}]}]}]}
2025-01-08 09:17:37,789 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:40,179 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [319, 361], 'children': [{'type': 'FunctionDeclaration', 'name': 'fake_user_agent', 'range': [319, 359], 'children': [{'type': 'ParameterList', 'name': '', 'range': [321, 322], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [323, 325], 'children': []}, {'type': 'FunctionBody', 'name': '', 'range': [326, 359], 'children': [{'type': 'Docstring', 'name': '', 'range': [328, 330], 'children': [{'type': 'StringLiteral', 'name': '', 'range': [329, 329], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'user_agents', 'range': [333, 349], 'children': [{'type': 'ArrayLiteral', 'name': '', 'range': [335, 349], 'children': [{'type': 'StringLiteral', 'name': '', 'range': [337, 337], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [340, 340], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [343, 343], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [346, 346], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [352, 358], 'children': [{'type': 'CallExpression', 'name': 'random.choice', 'range': [353, 358], 'children': [{'type': 'MemberExpression', 'name': 'random.choice', 'range': [353, 355], 'children': [{'type': 'Identifier', 'name': 'random', 'range': [353, 353], 'children': []}, {'type': 'Identifier', 'name': 'choice', 'range': [355, 355], 'children': []}]}, {'type': 'Identifier', 'name': 'user_agents', 'range': [357, 357], 'children': []}]}]}]}]}]}
2025-01-08 09:17:40,179 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:44,896 - INFO - Step 3 result: {'nodes': [{'type': 'ImportDeclaration', 'name': 're', 'range': [14, 16], 'children': []}, {'type': 'ImportDeclaration', 'name': 'sys', 'range': [17, 19], 'children': []}, {'type': 'ImportDeclaration', 'name': 'random', 'range': [20, 22], 'children': []}, {'type': 'ImportDeclaration', 'name': 'List, Tuple', 'range': [23, 29], 'children': [{'type': 'ImportSpecifier', 'name': 'List', 'range': [26, 26], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Tuple', 'range': [28, 28], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'requests', 'range': [31, 33], 'children': []}, {'type': 'ImportDeclaration', 'name': 'Response', 'range': [34, 40], 'children': []}]}
2025-01-08 09:17:44,896 - INFO - Starting Step 4: AST normalization
2025-01-08 09:17:51,086 - INFO - Step 2 result: {'type': 'Program', 'name': 'find_links_in_text', 'range': [42, 123], 'children': [{'type': 'FunctionDeclaration', 'name': 'find_links_in_text', 'range': [42, 123], 'children': [{'type': 'FunctionSignature', 'name': 'find_links_in_text', 'range': [42, 55], 'children': [{'type': 'Keyword', 'name': 'def', 'range': [42, 45], 'children': []}, {'type': 'FunctionName', 'name': 'find_links_in_text', 'range': [43, 58], 'children': []}, {'type': 'ParameterList', 'name': 'text', 'range': [44, 48], 'children': [{'type': 'Parameter', 'name': 'text', 'range': [45, 48], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [46, 48], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'List[str]', 'range': [49, 55], 'children': [{'type': 'Type', 'name': 'List', 'range': [51, 55], 'children': [{'type': 'TypeArgument', 'name': 'str', 'range': [53, 55], 'children': []}]}]}]}, {'type': 'FunctionBody', 'name': 'find_links_in_text', 'range': [56, 123], 'children': [{'type': 'Docstring', 'name': 'Find links in a text and return a list of URLs.', 'range': [57, 59], 'children': []}, {'type': 'VariableDeclaration', 'name': 'link_pattern', 'range': [62, 87], 'children': [{'type': 'Assignment', 'name': '=', 'range': [63, 87], 'children': [{'type': 'Expression', 'name': 're.compile', 'range': [64, 87], 'children': [{'type': 'CallExpression', 'name': 'compile', 'range': [66, 87], 'children': [{'type': 'Argument', 'name': 'r\'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\\'\\".,<>?«»“”‘’]))\'', 'range': [68, 86], 'children': []}]}]}]}]}, {'type': 'VariableDeclaration', 'name': 'raw_links', 'range': [90, 99], 'children': [{'type': 'Assignment', 'name': '=', 'range': [91, 99], 'children': [{'type': 'Expression', 'name': 're.findall', 'range': [92, 99], 'children': [{'type': 'CallExpression', 'name': 'findall', 'range': [94, 99], 'children': [{'type': 'Argument', 'name': 'link_pattern', 'range': [96, 97], 'children': []}, {'type': 'Argument', 'name': 'text', 'range': [98, 99], 'children': []}]}]}]}]}, {'type': 'VariableDeclaration', 'name': 'links', 'range': [102, 118], 'children': [{'type': 'Assignment', 'name': '=', 'range': [103, 118], 'children': [{'type': 'Expression', 'name': '[str(raw_link[0]) for raw_link in raw_links]', 'range': [104, 118], 'children': [{'type': 'ListComprehension', 'name': 'for', 'range': [113, 118], 'children': [{'type': 'Expression', 'name': 'str(raw_link[0])', 'range': [106, 112], 'children': [{'type': 'CallExpression', 'name': 'str', 'range': [107, 112], 'children': [{'type': 'Argument', 'name': 'raw_link[0]', 'range': [108, 112], 'children': []}]}]}, {'type': 'Iteration', 'name': 'raw_link in raw_links', 'range': [114, 118], 'children': []}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [121, 123], 'children': [{'type': 'Expression', 'name': 'links', 'range': [122, 123], 'children': []}]}]}]}]}
2025-01-08 09:17:51,086 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:55,268 - INFO - Step 3 result: {'type': 'Program', 'name': 'check_duplicate_links', 'range': [212, 318], 'children': [{'type': 'FunctionDeclaration', 'name': 'check_duplicate_links', 'range': [212, 318], 'children': [{'type': 'Parameter', 'name': 'links', 'range': [215, 220], 'children': [{'type': 'TypeAnnotation', 'name': 'List[str]', 'range': [217, 220], 'children': []}]}, {'type': 'ReturnType', 'name': 'Tuple[bool, List]', 'range': [224, 229], 'children': []}, {'type': 'Docstring', 'name': '"Check for duplicated links. \\n  \\n     Returns a tuple with True or False and duplicate list. \\n     "', 'range': [232, 234], 'children': []}, {'type': 'VariableDeclaration', 'name': 'seen', 'range': [237, 240], 'children': []}, {'type': 'VariableDeclaration', 'name': 'duplicates', 'range': [242, 245], 'children': []}, {'type': 'VariableDeclaration', 'name': 'has_duplicate', 'range': [247, 249], 'children': []}, {'type': 'ForLoop', 'name': 'for link in links', 'range': [252, 301], 'children': [{'type': 'Assignment', 'name': "link = link.rstrip('/')", 'range': [258, 266], 'children': []}, {'type': 'IfStatement', 'name': 'if link not in seen', 'range': [267, 280], 'children': [{'type': 'Assignment', 'name': 'seen[link] = 1', 'range': [274, 279], 'children': []}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [281, 301], 'children': [{'type': 'IfStatement', 'name': 'if seen[link] == 1', 'range': [284, 300], 'children': [{'type': 'MethodCall', 'name': 'duplicates.append(link)', 'range': [294, 299], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if duplicates', 'range': [302, 309], 'children': [{'type': 'Assignment', 'name': 'has_duplicate = True', 'range': [306, 308], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return (has_duplicate, duplicates)', 'range': [311, 316], 'children': []}]}]}
2025-01-08 09:17:55,268 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:01,133 - INFO - Step 4 result: {'nodes': [{'type': 'ImportDeclaration', 'name': 're', 'range': [14, 16], 'children': []}, {'type': 'ImportDeclaration', 'name': 'sys', 'range': [17, 19], 'children': []}, {'type': 'ImportDeclaration', 'name': 'random', 'range': [20, 22], 'children': []}, {'type': 'ImportDeclaration', 'name': 'List, Tuple', 'range': [23, 29], 'children': [{'type': 'ImportSpecifier', 'name': 'List', 'range': [26, 26], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Tuple', 'range': [28, 28], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'requests', 'range': [31, 33], 'children': []}, {'type': 'ImportDeclaration', 'name': 'Response', 'range': [34, 40], 'children': []}]}
2025-01-08 09:18:01,133 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:01,727 - INFO - Step 2 result: {'type': 'Program', 'name': 'check_if_link_is_working', 'range': [633, 844], 'children': [{'type': 'FunctionDeclaration', 'name': 'check_if_link_is_working', 'range': [633, 844], 'children': [{'type': 'Parameter', 'name': 'link', 'range': [636, 638], 'children': []}, {'type': 'ReturnType', 'name': 'Tuple[bool, str]', 'range': [642, 647], 'children': []}, {'type': 'Docstring', 'name': 'Docstring', 'range': [650, 652], 'children': []}, {'type': 'VariableDeclaration', 'name': 'has_error', 'range': [655, 657], 'children': []}, {'type': 'VariableDeclaration', 'name': 'error_message', 'range': [659, 661], 'children': []}, {'type': 'TryBlock', 'name': 'TryBlock', 'range': [664, 835], 'children': [{'type': 'FunctionCall', 'name': 'requests.get', 'range': [669, 698], 'children': [{'type': 'Argument', 'name': 'link', 'range': [673, 673], 'children': []}, {'type': 'KeywordArgument', 'name': 'timeout', 'range': [675, 677], 'children': []}, {'type': 'KeywordArgument', 'name': 'headers', 'range': [679, 697], 'children': [{'type': 'Dictionary', 'name': 'headers', 'range': [681, 697], 'children': [{'type': 'KeyValuePair', 'name': "'User-Agent'", 'range': [683, 687], 'children': []}, {'type': 'KeyValuePair', 'name': "'host'", 'range': [690, 696], 'children': []}]}]}]}, {'type': 'VariableAssignment', 'name': 'code', 'range': [701, 706], 'children': []}, {'type': 'IfStatement', 'name': 'IfStatement', 'range': [708, 729], 'children': [{'type': 'Condition', 'name': 'Condition', 'range': [709, 719], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [721, 723], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [725, 729], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [731, 749], 'children': [{'type': 'Exception', 'name': 'SSLError', 'range': [736, 736], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [741, 743], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [745, 749], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [751, 769], 'children': [{'type': 'Exception', 'name': 'ConnectionError', 'range': [756, 756], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [761, 763], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [765, 769], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [771, 791], 'children': [{'type': 'Exception', 'name': 'TimeoutError', 'range': [773, 773], 'children': []}, {'type': 'Exception', 'name': 'ConnectTimeout', 'range': [779, 779], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [783, 785], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [787, 791], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [793, 811], 'children': [{'type': 'Exception', 'name': 'TooManyRedirects', 'range': [798, 798], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [803, 805], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [807, 811], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [813, 835], 'children': [{'type': 'Exception', 'name': 'Exception', 'range': [815, 815], 'children': []}, {'type': 'Exception', 'name': 'RequestException', 'range': [821, 821], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [827, 829], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [831, 835], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'ReturnStatement', 'range': [837, 843], 'children': [{'type': 'Tuple', 'name': 'Tuple', 'range': [838, 842], 'children': [{'type': 'Variable', 'name': 'has_error', 'range': [839, 839], 'children': []}, {'type': 'Variable', 'name': 'error_message', 'range': [841, 841], 'children': []}]}]}]}]}
2025-01-08 09:18:01,728 - INFO - Starting Step 3: AST simplification
2025-01-08 09:18:06,932 - INFO - Step 3 result: {'type': 'Program', 'name': 'main', 'range': [1044, 1086], 'children': [{'type': 'FunctionDeclaration', 'name': 'main', 'range': [1044, 1086], 'children': [{'type': 'Parameter', 'name': 'filename', 'range': [1047, 1049]}, {'type': 'Parameter', 'name': 'only_duplicate_links_checker', 'range': [1051, 1053]}, {'type': 'BlockStatement', 'range': [1058, 1086], 'children': [{'type': 'VariableDeclaration', 'name': 'links', 'range': [1061, 1066], 'children': [{'type': 'AssignmentExpression', 'range': [1062, 1066], 'children': [{'type': 'CallExpression', 'name': 'find_links_in_file', 'range': [1063, 1066], 'children': [{'type': 'Identifier', 'name': 'filename', 'range': [1065, 1065]}]}]}]}, {'type': 'ExpressionStatement', 'range': [1069, 1072], 'children': [{'type': 'CallExpression', 'name': 'start_duplicate_links_checker', 'range': [1069, 1072], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [1071, 1071]}]}]}, {'type': 'IfStatement', 'range': [1075, 1084], 'children': [{'type': 'UnaryExpression', 'operator': 'not', 'range': [1076, 1077], 'children': [{'type': 'Identifier', 'name': 'only_duplicate_links_checker', 'range': [1077, 1077]}]}, {'type': 'BlockStatement', 'range': [1078, 1084], 'children': [{'type': 'ExpressionStatement', 'range': [1080, 1083], 'children': [{'type': 'CallExpression', 'name': 'start_links_working_checker', 'range': [1080, 1083], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [1082, 1082]}]}]}]}]}]}]}]}
2025-01-08 09:18:06,932 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:09,356 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [319, 361], 'children': [{'type': 'FunctionDeclaration', 'name': 'fake_user_agent', 'range': [319, 359], 'children': [{'type': 'ParameterList', 'name': '', 'range': [321, 322], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [323, 325], 'children': []}, {'type': 'FunctionBody', 'name': '', 'range': [326, 359], 'children': [{'type': 'Docstring', 'name': '', 'range': [328, 330], 'children': [{'type': 'StringLiteral', 'name': '', 'range': [329, 329], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'user_agents', 'range': [333, 349], 'children': [{'type': 'ArrayLiteral', 'name': '', 'range': [335, 349], 'children': [{'type': 'StringLiteral', 'name': '', 'range': [337, 337], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [340, 340], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [343, 343], 'children': []}, {'type': 'StringLiteral', 'name': '', 'range': [346, 346], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [352, 358], 'children': [{'type': 'CallExpression', 'name': 'random.choice', 'range': [353, 358], 'children': [{'type': 'MemberExpression', 'name': 'random.choice', 'range': [353, 355], 'children': [{'type': 'Identifier', 'name': 'random', 'range': [353, 353], 'children': []}, {'type': 'Identifier', 'name': 'choice', 'range': [355, 355], 'children': []}]}, {'type': 'Identifier', 'name': 'user_agents', 'range': [357, 357], 'children': []}]}]}]}]}]}
2025-01-08 09:18:09,357 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:10,651 - INFO - Step 2 result: {'type': 'Program', 'name': 'get_host_from_link', 'range': [362, 471], 'children': [{'type': 'FunctionDeclaration', 'name': 'get_host_from_link', 'range': [362, 471], 'children': [{'type': 'Parameter', 'name': 'link', 'range': [365, 367], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [371, 371], 'children': []}, {'type': 'Block', 'name': '', 'range': [373, 471], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [375, 387], 'children': [{'type': 'Expression', 'name': '', 'range': [377, 387], 'children': [{'type': 'MethodCall', 'name': 'split', 'range': [377, 384], 'children': [{'type': 'Argument', 'name': "'://'", 'range': [381, 381], 'children': []}, {'type': 'Argument', 'name': '1', 'range': [383, 383], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [385, 387], 'children': [{'type': 'Index', 'name': '1', 'range': [386, 386], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [388, 394], 'children': [{'type': 'Condition', 'name': '', 'range': [389, 391], 'children': [{'type': 'InExpression', 'name': '', 'range': [389, 391], 'children': [{'type': 'Left', 'name': "'://'", 'range': [389, 389], 'children': []}, {'type': 'Right', 'name': 'link', 'range': [391, 391], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [392, 394], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [393, 393], 'children': [{'type': 'Expression', 'name': '', 'range': [393, 393], 'children': []}]}]}]}, {'type': 'Comment', 'name': '# Remove routes, arguments and anchors', 'range': [396, 403], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [404, 423], 'children': [{'type': 'Condition', 'name': '', 'range': [405, 407], 'children': [{'type': 'InExpression', 'name': '', 'range': [405, 407], 'children': [{'type': 'Left', 'name': "'/'", 'range': [405, 405], 'children': []}, {'type': 'Right', 'name': 'host', 'range': [407, 407], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [409, 423], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [410, 422], 'children': [{'type': 'Expression', 'name': '', 'range': [412, 422], 'children': [{'type': 'MethodCall', 'name': 'split', 'range': [412, 419], 'children': [{'type': 'Argument', 'name': "'/'", 'range': [416, 416], 'children': []}, {'type': 'Argument', 'name': '1', 'range': [418, 418], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [420, 422], 'children': [{'type': 'Index', 'name': '0', 'range': [421, 421], 'children': []}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [425, 444], 'children': [{'type': 'Condition', 'name': '', 'range': [426, 428], 'children': [{'type': 'InExpression', 'name': '', 'range': [426, 428], 'children': [{'type': 'Left', 'name': "'?'", 'range': [426, 426], 'children': []}, {'type': 'Right', 'name': 'host', 'range': [428, 428], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [430, 444], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [431, 443], 'children': [{'type': 'Expression', 'name': '', 'range': [433, 443], 'children': [{'type': 'MethodCall', 'name': 'split', 'range': [433, 440], 'children': [{'type': 'Argument', 'name': "'?'", 'range': [437, 437], 'children': []}, {'type': 'Argument', 'name': '1', 'range': [439, 439], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [441, 443], 'children': [{'type': 'Index', 'name': '0', 'range': [442, 442], 'children': []}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [446, 465], 'children': [{'type': 'Condition', 'name': '', 'range': [447, 449], 'children': [{'type': 'InExpression', 'name': '', 'range': [447, 449], 'children': [{'type': 'Left', 'name': "'#'", 'range': [447, 447], 'children': []}, {'type': 'Right', 'name': 'host', 'range': [449, 449], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [451, 465], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [452, 464], 'children': [{'type': 'Expression', 'name': '', 'range': [454, 464], 'children': [{'type': 'MethodCall', 'name': 'split', 'range': [454, 461], 'children': [{'type': 'Argument', 'name': "'#'", 'range': [458, 458], 'children': []}, {'type': 'Argument', 'name': '1', 'range': [460, 460], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [462, 464], 'children': [{'type': 'Index', 'name': '0', 'range': [463, 463], 'children': []}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [467, 469], 'children': [{'type': 'Expression', 'name': '', 'range': [468, 468], 'children': []}]}]}]}]}
2025-01-08 09:18:10,651 - INFO - Starting Step 3: AST simplification
2025-01-08 09:18:11,241 - INFO - Step 2 result: {'type': 'Program', 'name': 'find_links_in_file', 'range': [125, 210], 'children': [{'type': 'FunctionDeclaration', 'name': 'find_links_in_file', 'range': [125, 210], 'children': [{'type': 'FunctionSignature', 'name': 'find_links_in_file', 'range': [125, 138], 'children': [{'type': 'Keyword', 'name': 'def', 'range': [125, 128], 'children': []}, {'type': 'FunctionName', 'name': 'find_links_in_file', 'range': [126, 142], 'children': []}, {'type': 'ParameterList', 'name': 'filename', 'range': [127, 131], 'children': [{'type': 'Parameter', 'name': 'filename', 'range': [128, 131], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [129, 131], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'List[str]', 'range': [132, 138], 'children': [{'type': 'Keyword', 'name': '->', 'range': [132, 134], 'children': []}, {'type': 'Type', 'name': 'List[str]', 'range': [134, 138], 'children': []}]}]}, {'type': 'FunctionBody', 'name': 'find_links_in_file', 'range': [139, 210], 'children': [{'type': 'Docstring', 'name': 'Find links in a file and return a list of URLs from text file.', 'range': [140, 142], 'children': []}, {'type': 'WithStatement', 'name': "with open(filename, mode='r', encoding='utf-8') as file:", 'range': [145, 160], 'children': [{'type': 'Keyword', 'name': 'with', 'range': [145, 149], 'children': []}, {'type': 'CallExpression', 'name': 'open', 'range': [146, 157], 'children': [{'type': 'FunctionName', 'name': 'open', 'range': [146, 150], 'children': []}, {'type': 'ArgumentList', 'name': "filename, mode='r', encoding='utf-8'", 'range': [147, 157], 'children': [{'type': 'Argument', 'name': 'filename', 'range': [148, 149], 'children': []}, {'type': 'Argument', 'name': "mode='r'", 'range': [150, 153], 'children': []}, {'type': 'Argument', 'name': "encoding='utf-8'", 'range': [154, 157], 'children': []}]}]}, {'type': 'Keyword', 'name': 'as', 'range': [158, 160], 'children': []}, {'type': 'Variable', 'name': 'file', 'range': [159, 160], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'readme = file.read()', 'range': [162, 169], 'children': [{'type': 'Variable', 'name': 'readme', 'range': [162, 168], 'children': []}, {'type': 'CallExpression', 'name': 'file.read', 'range': [164, 168], 'children': [{'type': 'FunctionName', 'name': 'read', 'range': [166, 168], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': "index_section = readme.find('## Index')", 'range': [170, 178], 'children': [{'type': 'Variable', 'name': 'index_section', 'range': [170, 183], 'children': []}, {'type': 'CallExpression', 'name': 'readme.find', 'range': [172, 177], 'children': [{'type': 'FunctionName', 'name': 'find', 'range': [174, 177], 'children': []}, {'type': 'Argument', 'name': "'## Index'", 'range': [176, 177], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if index_section == -1:', 'range': [179, 185], 'children': [{'type': 'Keyword', 'name': 'if', 'range': [179, 181], 'children': []}, {'type': 'BinaryExpression', 'name': 'index_section == -1', 'range': [180, 184], 'children': [{'type': 'Variable', 'name': 'index_section', 'range': [180, 183], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [181, 183], 'children': []}, {'type': 'Literal', 'name': '-1', 'range': [183, 184], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': 'index_section = 0', 'range': [187, 190], 'children': [{'type': 'Variable', 'name': 'index_section', 'range': [187, 190], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [189, 190], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'content = readme[index_section:]', 'range': [191, 198], 'children': [{'type': 'Variable', 'name': 'content', 'range': [191, 198], 'children': []}, {'type': 'SliceExpression', 'name': 'readme[index_section:]', 'range': [193, 197], 'children': [{'type': 'Variable', 'name': 'readme', 'range': [193, 194], 'children': []}, {'type': 'Slice', 'name': 'index_section:', 'range': [195, 197], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': 'links = find_links_in_text(content)', 'range': [200, 206], 'children': [{'type': 'Variable', 'name': 'links', 'range': [200, 206], 'children': []}, {'type': 'CallExpression', 'name': 'find_links_in_text', 'range': [202, 205], 'children': [{'type': 'FunctionName', 'name': 'find_links_in_text', 'range': [202, 205], 'children': []}, {'type': 'Argument', 'name': 'content', 'range': [204, 205], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return links', 'range': [208, 210], 'children': [{'type': 'Keyword', 'name': 'return', 'range': [208, 210], 'children': []}, {'type': 'Variable', 'name': 'links', 'range': [209, 210], 'children': []}]}]}]}]}
2025-01-08 09:18:11,242 - INFO - Starting Step 3: AST simplification
2025-01-08 09:18:13,589 - INFO - Step 3 result: {'type': 'Program', 'name': 'start_links_working_checker', 'range': [974, 1043], 'children': [{'type': 'FunctionDeclaration', 'name': 'start_links_working_checker', 'range': [974, 987], 'children': [{'type': 'Parameter', 'name': 'links', 'range': [977, 982], 'children': []}, {'type': 'ReturnType', 'name': 'None', 'range': [984, 986], 'children': []}]}, {'type': 'PrintStatement', 'name': 'print', 'range': [990, 994], 'children': [{'type': 'StringLiteral', 'name': "'Checking if {len(links)} links are working...'", 'range': [993, 993], 'children': []}]}, {'type': 'Assignment', 'name': 'errors', 'range': [997, 1002], 'children': [{'type': 'FunctionCall', 'name': 'check_if_list_of_links_are_working', 'range': [999, 1002], 'children': [{'type': 'Argument', 'name': 'links', 'range': [1001, 1001], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [1004, 1022], 'children': [{'type': 'Condition', 'name': 'errors', 'range': [1005, 1005], 'children': []}, {'type': 'Assignment', 'name': 'num_errors', 'range': [1009, 1014], 'children': [{'type': 'FunctionCall', 'name': 'len', 'range': [1011, 1014], 'children': [{'type': 'Argument', 'name': 'errors', 'range': [1013, 1013], 'children': []}]}]}, {'type': 'PrintStatement', 'name': 'print', 'range': [1016, 1020], 'children': [{'type': 'StringLiteral', 'name': "'Apparently {num_errors} links are not working properly. See in:'", 'range': [1019, 1019], 'children': []}]}, {'type': 'ForStatement', 'name': 'for', 'range': [1023, 1033], 'children': [{'type': 'VariableDeclaration', 'name': 'error_message', 'range': [1024, 1024], 'children': []}, {'type': 'Collection', 'name': 'errors', 'range': [1026, 1026], 'children': []}, {'type': 'PrintStatement', 'name': 'print', 'range': [1029, 1032], 'children': [{'type': 'Variable', 'name': 'error_message', 'range': [1031, 1031], 'children': []}]}]}, {'type': 'FunctionCall', 'name': 'sys.exit', 'range': [1035, 1040], 'children': [{'type': 'Argument', 'name': '1', 'range': [1039, 1039], 'children': []}]}]}]}
2025-01-08 09:18:13,589 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:15,141 - INFO - Step 3 result: {'type': 'Program', 'name': 'check_if_list_of_links_are_working', 'range': [846, 899], 'children': [{'type': 'FunctionDeclaration', 'name': 'check_if_list_of_links_are_working', 'range': [846, 899], 'children': [{'type': 'Parameter', 'name': 'list_of_links', 'range': [849, 854], 'children': [{'type': 'TypeAnnotation', 'name': 'List[str]', 'range': [851, 854]}]}, {'type': 'ReturnType', 'name': 'List[str]', 'range': [858, 861]}, {'type': 'BlockStatement', 'range': [863, 899], 'children': [{'type': 'VariableDeclaration', 'name': 'error_messages', 'range': [864, 867], 'children': [{'type': 'Assignment', 'name': '=', 'range': [865, 867], 'children': [{'type': 'ArrayLiteral', 'name': '[]', 'range': [866, 867]}]}]}, {'type': 'ForStatement', 'range': [869, 895], 'children': [{'type': 'VariableDeclaration', 'name': 'link', 'range': [870, 870]}, {'type': 'Expression', 'name': 'list_of_links', 'range': [872, 872]}, {'type': 'BlockStatement', 'range': [874, 895], 'children': [{'type': 'VariableDeclaration', 'name': 'has_error, error_message', 'range': [875, 882], 'children': [{'type': 'Assignment', 'name': '=', 'range': [878, 882], 'children': [{'type': 'CallExpression', 'name': 'check_if_link_is_working', 'range': [879, 882], 'children': [{'type': 'Argument', 'name': 'link', 'range': [881, 881]}]}]}]}, {'type': 'IfStatement', 'range': [885, 895], 'children': [{'type': 'Condition', 'name': 'has_error', 'range': [886, 886]}, {'type': 'BlockStatement', 'range': [888, 895], 'children': [{'type': 'ExpressionStatement', 'name': 'error_messages.append(error_message)', 'range': [889, 894], 'children': [{'type': 'CallExpression', 'name': 'append', 'range': [891, 894], 'children': [{'type': 'Argument', 'name': 'error_message', 'range': [893, 893]}]}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'return error_messages', 'range': [897, 898], 'children': [{'type': 'Expression', 'name': 'error_messages', 'range': [898, 898]}]}]}]}]}
2025-01-08 09:18:15,141 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:15,341 - INFO - Step 2 result: {'nodes': [{'type': 'VariableDeclaration', 'name': 'num_args', 'range': [1094, 1102], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1095, 1101], 'children': [{'type': 'FunctionCall', 'name': 'len', 'range': [1096, 1101], 'children': [{'type': 'MemberExpression', 'name': 'sys.argv', 'range': [1098, 1100], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'only_duplicate_links_checker', 'range': [1103, 1106], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1104, 1105], 'children': [{'type': 'Literal', 'name': 'False', 'range': [1105, 1105], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1108, 1125], 'children': [{'type': 'BinaryExpression', 'name': '<', 'range': [1110, 1111], 'children': [{'type': 'Identifier', 'name': 'num_args', 'range': [1109, 1109], 'children': []}, {'type': 'Literal', 'name': '2', 'range': [1111, 1111], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [1112, 1125], 'children': [{'type': 'FunctionCall', 'name': 'print', 'range': [1114, 1117], 'children': [{'type': 'Literal', 'name': "'No .md file passed'", 'range': [1116, 1116], 'children': []}]}, {'type': 'FunctionCall', 'name': 'sys.exit', 'range': [1119, 1124], 'children': [{'type': 'Literal', 'name': '1', 'range': [1123, 1123], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [1126, 1178], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [1128, 1129], 'children': [{'type': 'Identifier', 'name': 'num_args', 'range': [1127, 1127], 'children': []}, {'type': 'Literal', 'name': '3', 'range': [1130, 1130], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [1131, 1178], 'children': [{'type': 'VariableDeclaration', 'name': 'third_arg', 'range': [1133, 1145], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1134, 1144], 'children': [{'type': 'FunctionCall', 'name': 'lower', 'range': [1142, 1144], 'children': [{'type': 'MemberExpression', 'name': 'sys.argv[2]', 'range': [1135, 1140], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1147, 1177], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [1152, 1155], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [1149, 1150], 'children': [{'type': 'Identifier', 'name': 'third_arg', 'range': [1148, 1148], 'children': []}, {'type': 'Literal', 'name': "'-odlc'", 'range': [1151, 1151], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [1154, 1155], 'children': [{'type': 'Identifier', 'name': 'third_arg', 'range': [1153, 1153], 'children': []}, {'type': 'Literal', 'name': "'--only_duplicate_links_checker'", 'range': [1156, 1156], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [1157, 1177], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1160, 1161], 'children': [{'type': 'Identifier', 'name': 'only_duplicate_links_checker', 'range': [1159, 1159], 'children': []}, {'type': 'Literal', 'name': 'True', 'range': [1161, 1161], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [1163, 1177], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [1165, 1177], 'children': [{'type': 'FunctionCall', 'name': 'print', 'range': [1166, 1170], 'children': [{'type': 'Literal', 'name': "f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]'", 'range': [1168, 1169], 'children': []}]}, {'type': 'FunctionCall', 'name': 'sys.exit', 'range': [1172, 1176], 'children': [{'type': 'Literal', 'name': '1', 'range': [1175, 1175], 'children': []}]}]}]}]}]}]}, {'type': 'VariableDeclaration', 'name': 'filename', 'range': [1180, 1188], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1181, 1187], 'children': [{'type': 'MemberExpression', 'name': 'sys.argv[1]', 'range': [1182, 1186], 'children': []}]}]}, {'type': 'FunctionCall', 'name': 'main', 'range': [1190, 1196], 'children': [{'type': 'Identifier', 'name': 'filename', 'range': [1192, 1192], 'children': []}, {'type': 'Identifier', 'name': 'only_duplicate_links_checker', 'range': [1194, 1194], 'children': []}]}]}
2025-01-08 09:18:15,341 - INFO - Starting Step 3: AST simplification
2025-01-08 09:18:16,366 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainProgram', 'range': [14, 40], 'children': [{'type': 'ImportDeclaration', 'name': 're', 'range': [14, 16], 'children': []}, {'type': 'ImportDeclaration', 'name': 'sys', 'range': [17, 19], 'children': []}, {'type': 'ImportDeclaration', 'name': 'random', 'range': [20, 22], 'children': []}, {'type': 'ImportDeclaration', 'name': 'List, Tuple', 'range': [23, 29], 'children': [{'type': 'ImportSpecifier', 'name': 'List', 'range': [26, 26], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Tuple', 'range': [28, 28], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'requests', 'range': [31, 33], 'children': []}, {'type': 'ImportDeclaration', 'name': 'Response', 'range': [34, 40], 'children': []}]}]}
2025-01-08 09:18:16,366 - INFO - Completed main AST analysis flow
2025-01-08 09:18:16,367 - INFO - Successfully processed chunk
2025-01-08 09:18:21,681 - INFO - Step 2 result: {'type': 'Program', 'name': 'start_duplicate_links_checker', 'range': [902, 973], 'children': [{'type': 'FunctionDeclaration', 'name': 'start_duplicate_links_checker', 'range': [902, 973], 'children': [{'type': 'Parameter', 'name': 'links', 'range': [905, 910], 'children': [{'type': 'TypeAnnotation', 'name': 'List[str]', 'range': [906, 910], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [912, 914], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [916, 973], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [918, 922], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [918, 921], 'children': [{'type': 'Literal', 'name': "'Checking for duplicate links...'", 'range': [920, 920], 'children': []}]}]}, {'type': 'VariableDeclaration', 'name': '', 'range': [924, 932], 'children': [{'type': 'VariableDeclarator', 'name': 'has_duplicate_link', 'range': [924, 924], 'children': []}, {'type': 'VariableDeclarator', 'name': 'duplicates_links', 'range': [926, 926], 'children': []}, {'type': 'CallExpression', 'name': 'check_duplicate_links', 'range': [928, 931], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [930, 930], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [934, 971], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [938, 943], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [938, 942], 'children': [{'type': 'Literal', 'name': "'Found duplicate links:'", 'range': [941, 941], 'children': []}]}]}, {'type': 'ForStatement', 'name': '', 'range': [945, 955], 'children': [{'type': 'VariableDeclaration', 'name': 'duplicate_link', 'range': [946, 946], 'children': []}, {'type': 'Identifier', 'name': 'duplicates_links', 'range': [948, 948], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [950, 955], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [951, 954], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [951, 953], 'children': [{'type': 'Identifier', 'name': 'duplicate_link', 'range': [953, 953], 'children': []}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [957, 963], 'children': [{'type': 'CallExpression', 'name': 'sys.exit', 'range': [957, 962], 'children': [{'type': 'Literal', 'name': '1', 'range': [961, 961], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [964, 971], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [967, 970], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [967, 969], 'children': [{'type': 'Literal', 'name': "'No duplicate links.'", 'range': [969, 969], 'children': []}]}]}]}]}]}]}]}
2025-01-08 09:18:21,681 - INFO - Starting Step 3: AST simplification
2025-01-08 09:18:27,585 - INFO - Step 4 result: {'type': 'Program', 'name': 'check_duplicate_links', 'range': [212, 318], 'children': [{'type': 'FunctionDecl', 'name': 'check_duplicate_links', 'range': [212, 318], 'children': [{'type': 'Parameter', 'name': 'links', 'range': [215, 220], 'children': [{'type': 'TypeAnnotation', 'name': 'List[str]', 'range': [217, 220], 'children': []}]}, {'type': 'ReturnType', 'name': 'Tuple[bool, List]', 'range': [224, 229], 'children': []}, {'type': 'Docstring', 'name': '"Check for duplicated links. \\n  \\n     Returns a tuple with True or False and duplicate list. \\n     "', 'range': [232, 234], 'children': []}, {'type': 'VariableDecl', 'name': 'seen', 'range': [237, 240], 'children': []}, {'type': 'VariableDecl', 'name': 'duplicates', 'range': [242, 245], 'children': []}, {'type': 'VariableDecl', 'name': 'has_duplicate', 'range': [247, 249], 'children': []}, {'type': 'ForStatement', 'name': 'for link in links', 'range': [252, 301], 'children': [{'type': 'Assignment', 'name': "link = link.rstrip('/')", 'range': [258, 266], 'children': []}, {'type': 'IfStatement', 'name': 'if link not in seen', 'range': [267, 280], 'children': [{'type': 'Assignment', 'name': 'seen[link] = 1', 'range': [274, 279], 'children': []}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [281, 301], 'children': [{'type': 'IfStatement', 'name': 'if seen[link] == 1', 'range': [284, 300], 'children': [{'type': 'CallExpression', 'name': 'duplicates.append(link)', 'range': [294, 299], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if duplicates', 'range': [302, 309], 'children': [{'type': 'Assignment', 'name': 'has_duplicate = True', 'range': [306, 308], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return (has_duplicate, duplicates)', 'range': [311, 316], 'children': []}]}]}
2025-01-08 09:18:27,585 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:29,807 - INFO - Step 2 result: {'type': 'Program', 'name': 'has_cloudflare_protection', 'range': [472, 630], 'children': [{'type': 'FunctionDeclaration', 'name': 'has_cloudflare_protection', 'range': [472, 630], 'children': [{'type': 'Parameter', 'name': 'resp', 'range': [475, 477], 'children': []}, {'type': 'ReturnType', 'name': 'bool', 'range': [481, 481], 'children': []}, {'type': 'Docstring', 'name': 'Docstring', 'range': [484, 486], 'children': []}, {'type': 'Assignment', 'name': 'code', 'range': [489, 494], 'children': [{'type': 'Variable', 'name': 'resp', 'range': [491, 491], 'children': []}, {'type': 'PropertyAccess', 'name': 'status_code', 'range': [492, 493], 'children': []}]}, {'type': 'Assignment', 'name': 'server', 'range': [495, 514], 'children': [{'type': 'Variable', 'name': 'resp', 'range': [497, 497], 'children': []}, {'type': 'PropertyAccess', 'name': 'headers', 'range': [498, 499], 'children': []}, {'type': 'MethodCall', 'name': 'get', 'range': [500, 504], 'children': [{'type': 'StringLiteral', 'name': "'Server'", 'range': [503, 503], 'children': []}]}, {'type': 'LogicalOr', 'name': 'or', 'range': [505, 505], 'children': [{'type': 'Variable', 'name': 'resp', 'range': [506, 506], 'children': []}, {'type': 'PropertyAccess', 'name': 'headers', 'range': [507, 508], 'children': []}, {'type': 'MethodCall', 'name': 'get', 'range': [509, 513], 'children': [{'type': 'StringLiteral', 'name': "'server'", 'range': [512, 512], 'children': []}]}]}]}, {'type': 'Assignment', 'name': 'cloudflare_flags', 'range': [515, 575], 'children': [{'type': 'ArrayLiteral', 'name': 'ArrayLiteral', 'range': [517, 575], 'children': [{'type': 'StringLiteral', 'name': "'403 Forbidden'", 'range': [519, 519], 'children': []}, {'type': 'StringLiteral', 'name': "'cloudflare'", 'range': [522, 522], 'children': []}, {'type': 'StringLiteral', 'name': "'Cloudflare'", 'range': [525, 525], 'children': []}, {'type': 'StringLiteral', 'name': "'Security check'", 'range': [528, 528], 'children': []}, {'type': 'StringLiteral', 'name': "'Please Wait... | Cloudflare'", 'range': [531, 531], 'children': []}, {'type': 'StringLiteral', 'name': "'We are checking your browser...'", 'range': [534, 534], 'children': []}, {'type': 'StringLiteral', 'name': "'Please stand by, while we are checking your browser...'", 'range': [537, 537], 'children': []}, {'type': 'StringLiteral', 'name': "'Checking your browser before accessing'", 'range': [540, 540], 'children': []}, {'type': 'StringLiteral', 'name': "'This process is automatic.'", 'range': [543, 543], 'children': []}, {'type': 'StringLiteral', 'name': "'Your browser will redirect to your requested content shortly.'", 'range': [546, 546], 'children': []}, {'type': 'StringLiteral', 'name': "'Please allow up to 5 seconds'", 'range': [549, 549], 'children': []}, {'type': 'StringLiteral', 'name': "'DDoS protection by'", 'range': [552, 552], 'children': []}, {'type': 'StringLiteral', 'name': "'Ray ID:'", 'range': [555, 555], 'children': []}, {'type': 'StringLiteral', 'name': "'Cloudflare Ray ID:'", 'range': [558, 558], 'children': []}, {'type': 'StringLiteral', 'name': "'_cf_chl'", 'range': [561, 561], 'children': []}, {'type': 'StringLiteral', 'name': "'_cf_chl_opt'", 'range': [564, 564], 'children': []}, {'type': 'StringLiteral', 'name': "'__cf_chl_rt_tk'", 'range': [567, 567], 'children': []}, {'type': 'StringLiteral', 'name': "'cf-spinner-please-wait'", 'range': [570, 570], 'children': []}, {'type': 'StringLiteral', 'name': "'cf-spinner-redirecting'", 'range': [573, 573], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfStatement', 'range': [578, 626], 'children': [{'type': 'Condition', 'name': 'Condition', 'range': [579, 591], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [580, 585], 'children': [{'type': 'Variable', 'name': 'code', 'range': [579, 579], 'children': []}, {'type': 'ArrayLiteral', 'name': 'ArrayLiteral', 'range': [581, 585], 'children': [{'type': 'NumericLiteral', 'name': '403', 'range': [582, 582], 'children': []}, {'type': 'NumericLiteral', 'name': '503', 'range': [584, 584], 'children': []}]}]}, {'type': 'LogicalAnd', 'name': 'and', 'range': [586, 586], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [587, 590], 'children': [{'type': 'Variable', 'name': 'server', 'range': [587, 587], 'children': []}, {'type': 'StringLiteral', 'name': "'cloudflare'", 'range': [590, 590], 'children': []}]}]}]}, {'type': 'Block', 'name': 'Block', 'range': [592, 626], 'children': [{'type': 'Assignment', 'name': 'html', 'range': [593, 598], 'children': [{'type': 'Variable', 'name': 'resp', 'range': [595, 595], 'children': []}, {'type': 'PropertyAccess', 'name': 'text', 'range': [596, 597], 'children': []}]}, {'type': 'Assignment', 'name': 'flags_found', 'range': [600, 610], 'children': [{'type': 'ListComprehension', 'name': 'ListComprehension', 'range': [602, 610], 'children': [{'type': 'Variable', 'name': 'flag', 'range': [603, 603], 'children': []}, {'type': 'InKeyword', 'name': 'in', 'range': [604, 604], 'children': [{'type': 'Variable', 'name': 'html', 'range': [605, 605], 'children': []}]}, {'type': 'ForKeyword', 'name': 'for', 'range': [606, 606], 'children': [{'type': 'Variable', 'name': 'flag', 'range': [607, 607], 'children': []}, {'type': 'InKeyword', 'name': 'in', 'range': [608, 608], 'children': [{'type': 'Variable', 'name': 'cloudflare_flags', 'range': [609, 609], 'children': []}]}]}]}]}, {'type': 'Assignment', 'name': 'any_flag_found', 'range': [612, 618], 'children': [{'type': 'FunctionCall', 'name': 'any', 'range': [614, 617], 'children': [{'type': 'Variable', 'name': 'flags_found', 'range': [616, 616], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfStatement', 'range': [620, 626], 'children': [{'type': 'Condition', 'name': 'Condition', 'range': [621, 621], 'children': [{'type': 'Variable', 'name': 'any_flag_found', 'range': [621, 621], 'children': []}]}, {'type': 'Block', 'name': 'Block', 'range': [622, 626], 'children': [{'type': 'ReturnStatement', 'name': 'ReturnStatement', 'range': [624, 625], 'children': [{'type': 'BooleanLiteral', 'name': 'True', 'range': [625, 625], 'children': []}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'ReturnStatement', 'range': [628, 629], 'children': [{'type': 'BooleanLiteral', 'name': 'False', 'range': [629, 629], 'children': []}]}]}]}
2025-01-08 09:18:29,807 - INFO - Starting Step 3: AST simplification
2025-01-08 09:18:36,459 - INFO - Step 4 result: {'type': 'Program', 'name': 'main', 'range': [1044, 1086], 'children': [{'type': 'FunctionDecl', 'name': 'main', 'range': [1044, 1086], 'children': [{'type': 'Parameter', 'name': 'filename', 'range': [1047, 1049]}, {'type': 'Parameter', 'name': 'only_duplicate_links_checker', 'range': [1051, 1053]}, {'type': 'BlockStatement', 'range': [1058, 1086], 'children': [{'type': 'VariableDeclaration', 'name': 'links', 'range': [1061, 1066], 'children': [{'type': 'AssignmentExpression', 'range': [1062, 1066], 'children': [{'type': 'CallExpression', 'name': 'find_links_in_file', 'range': [1063, 1066], 'children': [{'type': 'Identifier', 'name': 'filename', 'range': [1065, 1065]}]}]}]}, {'type': 'ExpressionStatement', 'range': [1069, 1072], 'children': [{'type': 'CallExpression', 'name': 'start_duplicate_links_checker', 'range': [1069, 1072], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [1071, 1071]}]}]}, {'type': 'IfStatement', 'range': [1075, 1084], 'children': [{'type': 'UnaryExpression', 'operator': 'not', 'range': [1076, 1077], 'children': [{'type': 'Identifier', 'name': 'only_duplicate_links_checker', 'range': [1077, 1077]}]}, {'type': 'BlockStatement', 'range': [1078, 1084], 'children': [{'type': 'ExpressionStatement', 'range': [1080, 1083], 'children': [{'type': 'CallExpression', 'name': 'start_links_working_checker', 'range': [1080, 1083], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [1082, 1082]}]}]}]}]}]}]}]}
2025-01-08 09:18:36,459 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:38,400 - INFO - Step 3 result: {'type': 'Program', 'name': 'find_links_in_text', 'range': [42, 123], 'children': [{'type': 'FunctionDeclaration', 'name': 'find_links_in_text', 'range': [42, 123], 'children': [{'type': 'FunctionSignature', 'name': 'find_links_in_text', 'range': [42, 55], 'children': [{'type': 'Keyword', 'name': 'def', 'range': [42, 45], 'children': []}, {'type': 'FunctionName', 'name': 'find_links_in_text', 'range': [43, 58], 'children': []}, {'type': 'ParameterList', 'name': 'text', 'range': [44, 48], 'children': [{'type': 'Parameter', 'name': 'text', 'range': [45, 48], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [46, 48], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'List[str]', 'range': [49, 55], 'children': [{'type': 'Type', 'name': 'List', 'range': [51, 55], 'children': [{'type': 'TypeArgument', 'name': 'str', 'range': [53, 55], 'children': []}]}]}]}, {'type': 'FunctionBody', 'name': 'find_links_in_text', 'range': [56, 123], 'children': [{'type': 'Docstring', 'name': 'Find links in a text and return a list of URLs.', 'range': [57, 59], 'children': []}, {'type': 'VariableDeclaration', 'name': 'link_pattern', 'range': [62, 87], 'children': [{'type': 'Assignment', 'name': '=', 'range': [63, 87], 'children': [{'type': 'Expression', 'name': 're.compile', 'range': [64, 87], 'children': [{'type': 'CallExpression', 'name': 'compile', 'range': [66, 87], 'children': [{'type': 'Argument', 'name': 'r\'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\\'\\".,<>?«»“”‘’]))\'', 'range': [68, 86], 'children': []}]}]}]}]}, {'type': 'VariableDeclaration', 'name': 'raw_links', 'range': [90, 99], 'children': [{'type': 'Assignment', 'name': '=', 'range': [91, 99], 'children': [{'type': 'Expression', 'name': 're.findall', 'range': [92, 99], 'children': [{'type': 'CallExpression', 'name': 'findall', 'range': [94, 99], 'children': [{'type': 'Argument', 'name': 'link_pattern', 'range': [96, 97], 'children': []}, {'type': 'Argument', 'name': 'text', 'range': [98, 99], 'children': []}]}]}]}]}, {'type': 'VariableDeclaration', 'name': 'links', 'range': [102, 118], 'children': [{'type': 'Assignment', 'name': '=', 'range': [103, 118], 'children': [{'type': 'Expression', 'name': '[str(raw_link[0]) for raw_link in raw_links]', 'range': [104, 118], 'children': [{'type': 'ListComprehension', 'name': 'for', 'range': [113, 118], 'children': [{'type': 'Expression', 'name': 'str(raw_link[0])', 'range': [106, 112], 'children': [{'type': 'CallExpression', 'name': 'str', 'range': [107, 112], 'children': [{'type': 'Argument', 'name': 'raw_link[0]', 'range': [108, 112], 'children': []}]}]}, {'type': 'Iteration', 'name': 'raw_link in raw_links', 'range': [114, 118], 'children': []}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [121, 123], 'children': [{'type': 'Expression', 'name': 'links', 'range': [122, 123], 'children': []}]}]}]}]}
2025-01-08 09:18:38,401 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:40,124 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [319, 361], 'children': [{'type': 'FunctionDecl', 'name': 'fake_user_agent', 'range': [319, 359], 'children': [{'type': 'ParameterList', 'name': '', 'range': [321, 322], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [323, 325], 'children': []}, {'type': 'FunctionBody', 'name': '', 'range': [326, 359], 'children': [{'type': 'Docstring', 'name': '', 'range': [328, 330], 'children': [{'type': 'Literal', 'name': '', 'range': [329, 329], 'children': []}]}, {'type': 'VariableDecl', 'name': 'user_agents', 'range': [333, 349], 'children': [{'type': 'ArrayLiteral', 'name': '', 'range': [335, 349], 'children': [{'type': 'Literal', 'name': '', 'range': [337, 337], 'children': []}, {'type': 'Literal', 'name': '', 'range': [340, 340], 'children': []}, {'type': 'Literal', 'name': '', 'range': [343, 343], 'children': []}, {'type': 'Literal', 'name': '', 'range': [346, 346], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [352, 358], 'children': [{'type': 'CallExpression', 'name': 'random.choice', 'range': [353, 358], 'children': [{'type': 'MemberExpression', 'name': 'random.choice', 'range': [353, 355], 'children': [{'type': 'Identifier', 'name': 'random', 'range': [353, 353], 'children': []}, {'type': 'Identifier', 'name': 'choice', 'range': [355, 355], 'children': []}]}, {'type': 'Identifier', 'name': 'user_agents', 'range': [357, 357], 'children': []}]}]}]}]}]}
2025-01-08 09:18:40,124 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:50,334 - INFO - Step 4 result: {'type': 'Program', 'name': 'check_if_list_of_links_are_working', 'range': [846, 899], 'children': [{'type': 'FunctionDecl', 'name': 'check_if_list_of_links_are_working', 'range': [846, 899], 'children': [{'type': 'Parameter', 'name': 'list_of_links', 'range': [849, 854], 'children': [{'type': 'TypeAnnotation', 'name': 'List[str]', 'range': [851, 854]}]}, {'type': 'ReturnType', 'name': 'List[str]', 'range': [858, 861]}, {'type': 'BlockStatement', 'range': [863, 899], 'children': [{'type': 'VariableDecl', 'name': 'error_messages', 'range': [864, 867], 'children': [{'type': 'Assignment', 'name': '=', 'range': [865, 867], 'children': [{'type': 'ArrayLiteral', 'name': '[]', 'range': [866, 867]}]}]}, {'type': 'ForStatement', 'range': [869, 895], 'children': [{'type': 'VariableDecl', 'name': 'link', 'range': [870, 870]}, {'type': 'Identifier', 'name': 'list_of_links', 'range': [872, 872]}, {'type': 'BlockStatement', 'range': [874, 895], 'children': [{'type': 'VariableDecl', 'name': 'has_error, error_message', 'range': [875, 882], 'children': [{'type': 'Assignment', 'name': '=', 'range': [878, 882], 'children': [{'type': 'CallExpression', 'name': 'check_if_link_is_working', 'range': [879, 882], 'children': [{'type': 'Argument', 'name': 'link', 'range': [881, 881]}]}]}]}, {'type': 'IfStatement', 'range': [885, 895], 'children': [{'type': 'Condition', 'name': 'has_error', 'range': [886, 886]}, {'type': 'BlockStatement', 'range': [888, 895], 'children': [{'type': 'ExpressionStatement', 'name': 'error_messages.append(error_message)', 'range': [889, 894], 'children': [{'type': 'CallExpression', 'name': 'append', 'range': [891, 894], 'children': [{'type': 'Argument', 'name': 'error_message', 'range': [893, 893]}]}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'return error_messages', 'range': [897, 898], 'children': [{'type': 'Identifier', 'name': 'error_messages', 'range': [898, 898]}]}]}]}]}
2025-01-08 09:18:50,335 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:51,020 - INFO - Step 4 result: {'type': 'Program', 'name': 'start_links_working_checker', 'range': [974, 1043], 'children': [{'type': 'FunctionDecl', 'name': 'start_links_working_checker', 'range': [974, 987], 'children': [{'type': 'Parameter', 'name': 'links', 'range': [977, 982], 'children': []}, {'type': 'ReturnType', 'name': 'None', 'range': [984, 986], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'print', 'range': [990, 994], 'children': [{'type': 'Literal', 'name': "'Checking if {len(links)} links are working...'", 'range': [993, 993], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'errors', 'range': [997, 1002], 'children': [{'type': 'CallExpression', 'name': 'check_if_list_of_links_are_working', 'range': [999, 1002], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [1001, 1001], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [1004, 1022], 'children': [{'type': 'Identifier', 'name': 'errors', 'range': [1005, 1005], 'children': []}, {'type': 'AssignmentExpression', 'name': 'num_errors', 'range': [1009, 1014], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [1011, 1014], 'children': [{'type': 'Identifier', 'name': 'errors', 'range': [1013, 1013], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'print', 'range': [1016, 1020], 'children': [{'type': 'Literal', 'name': "'Apparently {num_errors} links are not working properly. See in:'", 'range': [1019, 1019], 'children': []}]}, {'type': 'ForStatement', 'name': 'for', 'range': [1023, 1033], 'children': [{'type': 'VariableDeclarator', 'name': 'error_message', 'range': [1024, 1024], 'children': []}, {'type': 'Identifier', 'name': 'errors', 'range': [1026, 1026], 'children': []}, {'type': 'ExpressionStatement', 'name': 'print', 'range': [1029, 1032], 'children': [{'type': 'Identifier', 'name': 'error_message', 'range': [1031, 1031], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'sys.exit', 'range': [1035, 1040], 'children': [{'type': 'Literal', 'name': '1', 'range': [1039, 1039], 'children': []}]}]}]}
2025-01-08 09:18:51,020 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:58,014 - INFO - Step 5 result: {'type': 'Program', 'name': 'check_duplicate_links', 'range': [212, 318], 'children': [{'type': 'FunctionDecl', 'name': 'check_duplicate_links', 'range': [212, 318], 'children': [{'type': 'Parameter', 'name': 'links', 'range': [215, 220], 'children': [{'type': 'TypeAnnotation', 'name': 'List[str]', 'range': [217, 220], 'children': []}]}, {'type': 'ReturnType', 'name': 'Tuple[bool, List]', 'range': [224, 229], 'children': []}, {'type': 'Docstring', 'name': '"Check for duplicated links. \\n  \\n     Returns a tuple with True or False and duplicate list. \\n     "', 'range': [232, 234], 'children': []}, {'type': 'VariableDecl', 'name': 'seen', 'range': [237, 240], 'children': []}, {'type': 'VariableDecl', 'name': 'duplicates', 'range': [242, 245], 'children': []}, {'type': 'VariableDecl', 'name': 'has_duplicate', 'range': [247, 249], 'children': []}, {'type': 'ForStatement', 'name': 'for link in links', 'range': [252, 301], 'children': [{'type': 'Assignment', 'name': "link = link.rstrip('/')", 'range': [258, 266], 'children': []}, {'type': 'IfStatement', 'name': 'if link not in seen', 'range': [267, 280], 'children': [{'type': 'Assignment', 'name': 'seen[link] = 1', 'range': [274, 279], 'children': []}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [281, 301], 'children': [{'type': 'IfStatement', 'name': 'if seen[link] == 1', 'range': [284, 300], 'children': [{'type': 'CallExpression', 'name': 'duplicates.append(link)', 'range': [294, 299], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if duplicates', 'range': [302, 309], 'children': [{'type': 'Assignment', 'name': 'has_duplicate = True', 'range': [306, 308], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return (has_duplicate, duplicates)', 'range': [311, 316], 'children': []}]}]}
2025-01-08 09:18:58,014 - INFO - Completed main AST analysis flow
2025-01-08 09:18:58,014 - INFO - Successfully processed chunk
2025-01-08 09:19:00,642 - INFO - Step 3 result: {'type': 'Program', 'name': 'check_if_link_is_working', 'range': [633, 844], 'children': [{'type': 'FunctionDeclaration', 'name': 'check_if_link_is_working', 'range': [633, 844], 'children': [{'type': 'Parameter', 'name': 'link', 'range': [636, 638], 'children': []}, {'type': 'ReturnType', 'name': 'Tuple[bool, str]', 'range': [642, 647], 'children': []}, {'type': 'Docstring', 'name': 'Docstring', 'range': [650, 652], 'children': []}, {'type': 'VariableDeclaration', 'name': 'has_error', 'range': [655, 657], 'children': []}, {'type': 'VariableDeclaration', 'name': 'error_message', 'range': [659, 661], 'children': []}, {'type': 'TryBlock', 'name': 'TryBlock', 'range': [664, 835], 'children': [{'type': 'FunctionCall', 'name': 'requests.get', 'range': [669, 698], 'children': [{'type': 'Argument', 'name': 'link', 'range': [673, 673], 'children': []}, {'type': 'KeywordArgument', 'name': 'timeout', 'range': [675, 677], 'children': []}, {'type': 'KeywordArgument', 'name': 'headers', 'range': [679, 697], 'children': [{'type': 'Dictionary', 'name': 'headers', 'range': [681, 697], 'children': [{'type': 'KeyValuePair', 'name': "'User-Agent'", 'range': [683, 687], 'children': []}, {'type': 'KeyValuePair', 'name': "'host'", 'range': [690, 696], 'children': []}]}]}]}, {'type': 'VariableAssignment', 'name': 'code', 'range': [701, 706], 'children': []}, {'type': 'IfStatement', 'name': 'IfStatement', 'range': [708, 729], 'children': [{'type': 'Condition', 'name': 'Condition', 'range': [709, 719], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [721, 723], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [725, 729], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [731, 749], 'children': [{'type': 'Exception', 'name': 'SSLError', 'range': [736, 736], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [741, 743], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [745, 749], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [751, 769], 'children': [{'type': 'Exception', 'name': 'ConnectionError', 'range': [756, 756], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [761, 763], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [765, 769], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [771, 791], 'children': [{'type': 'Exception', 'name': 'TimeoutError', 'range': [773, 773], 'children': []}, {'type': 'Exception', 'name': 'ConnectTimeout', 'range': [779, 779], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [783, 785], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [787, 791], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [793, 811], 'children': [{'type': 'Exception', 'name': 'TooManyRedirects', 'range': [798, 798], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [803, 805], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [807, 811], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [813, 835], 'children': [{'type': 'Exception', 'name': 'Exception', 'range': [815, 815], 'children': []}, {'type': 'Exception', 'name': 'RequestException', 'range': [821, 821], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [827, 829], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [831, 835], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'ReturnStatement', 'range': [837, 843], 'children': [{'type': 'Tuple', 'name': 'Tuple', 'range': [838, 842], 'children': [{'type': 'Variable', 'name': 'has_error', 'range': [839, 839], 'children': []}, {'type': 'Variable', 'name': 'error_message', 'range': [841, 841], 'children': []}]}]}]}]}
2025-01-08 09:19:00,642 - INFO - Starting Step 4: AST normalization
2025-01-08 09:19:02,909 - INFO - Step 3 result: {'type': 'Program', 'name': 'start_duplicate_links_checker', 'range': [902, 973], 'children': [{'type': 'FunctionDeclaration', 'name': 'start_duplicate_links_checker', 'range': [902, 973], 'children': [{'type': 'Parameter', 'name': 'links', 'range': [905, 910], 'children': [{'type': 'TypeAnnotation', 'name': 'List[str]', 'range': [906, 910], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [912, 914], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [916, 973], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [918, 922], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [918, 921], 'children': [{'type': 'Literal', 'name': "'Checking for duplicate links...'", 'range': [920, 920], 'children': []}]}]}, {'type': 'VariableDeclaration', 'name': '', 'range': [924, 932], 'children': [{'type': 'VariableDeclarator', 'name': 'has_duplicate_link', 'range': [924, 924], 'children': []}, {'type': 'VariableDeclarator', 'name': 'duplicates_links', 'range': [926, 926], 'children': []}, {'type': 'CallExpression', 'name': 'check_duplicate_links', 'range': [928, 931], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [930, 930], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [934, 971], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [938, 943], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [938, 942], 'children': [{'type': 'Literal', 'name': "'Found duplicate links:'", 'range': [941, 941], 'children': []}]}]}, {'type': 'ForStatement', 'name': '', 'range': [945, 955], 'children': [{'type': 'VariableDeclaration', 'name': 'duplicate_link', 'range': [946, 946], 'children': []}, {'type': 'Identifier', 'name': 'duplicates_links', 'range': [948, 948], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [950, 955], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [951, 954], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [951, 953], 'children': [{'type': 'Identifier', 'name': 'duplicate_link', 'range': [953, 953], 'children': []}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [957, 963], 'children': [{'type': 'CallExpression', 'name': 'sys.exit', 'range': [957, 962], 'children': [{'type': 'Literal', 'name': '1', 'range': [961, 961], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [964, 971], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [967, 970], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [967, 969], 'children': [{'type': 'Literal', 'name': "'No duplicate links.'", 'range': [969, 969], 'children': []}]}]}]}]}]}]}]}
2025-01-08 09:19:02,910 - INFO - Starting Step 4: AST normalization
2025-01-08 09:19:04,350 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [319, 361], 'children': [{'type': 'FunctionDecl', 'name': 'fake_user_agent', 'range': [319, 359], 'children': [{'type': 'ParameterList', 'name': '', 'range': [321, 322], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [323, 325], 'children': []}, {'type': 'FunctionBody', 'name': '', 'range': [326, 359], 'children': [{'type': 'Docstring', 'name': '', 'range': [328, 330], 'children': [{'type': 'Literal', 'name': '', 'range': [329, 329], 'children': []}]}, {'type': 'VariableDecl', 'name': 'user_agents', 'range': [333, 349], 'children': [{'type': 'ArrayLiteral', 'name': '', 'range': [335, 349], 'children': [{'type': 'Literal', 'name': '', 'range': [337, 337], 'children': []}, {'type': 'Literal', 'name': '', 'range': [340, 340], 'children': []}, {'type': 'Literal', 'name': '', 'range': [343, 343], 'children': []}, {'type': 'Literal', 'name': '', 'range': [346, 346], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [352, 358], 'children': [{'type': 'CallExpression', 'name': 'random.choice', 'range': [353, 358], 'children': [{'type': 'MemberExpression', 'name': 'random.choice', 'range': [353, 355], 'children': [{'type': 'Identifier', 'name': 'random', 'range': [353, 353], 'children': []}, {'type': 'Identifier', 'name': 'choice', 'range': [355, 355], 'children': []}]}, {'type': 'Identifier', 'name': 'user_agents', 'range': [357, 357], 'children': []}]}]}]}]}]}
2025-01-08 09:19:04,350 - INFO - Completed main AST analysis flow
2025-01-08 09:19:04,350 - INFO - Successfully processed chunk
2025-01-08 09:19:05,924 - INFO - Step 5 result: {'type': 'Program', 'name': 'main', 'range': [1044, 1086], 'children': [{'type': 'FunctionDecl', 'name': 'main', 'range': [1044, 1086], 'children': [{'type': 'Parameter', 'name': 'filename', 'range': [1047, 1049]}, {'type': 'Parameter', 'name': 'only_duplicate_links_checker', 'range': [1051, 1053]}, {'type': 'BlockStatement', 'range': [1058, 1086], 'children': [{'type': 'VariableDeclaration', 'name': 'links', 'range': [1061, 1066], 'children': [{'type': 'AssignmentExpression', 'range': [1062, 1066], 'children': [{'type': 'CallExpression', 'name': 'find_links_in_file', 'range': [1063, 1066], 'children': [{'type': 'Identifier', 'name': 'filename', 'range': [1065, 1065]}]}]}]}, {'type': 'ExpressionStatement', 'range': [1069, 1072], 'children': [{'type': 'CallExpression', 'name': 'start_duplicate_links_checker', 'range': [1069, 1072], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [1071, 1071]}]}]}, {'type': 'IfStatement', 'range': [1075, 1084], 'children': [{'type': 'UnaryExpression', 'operator': 'not', 'range': [1076, 1077], 'children': [{'type': 'Identifier', 'name': 'only_duplicate_links_checker', 'range': [1077, 1077]}]}, {'type': 'BlockStatement', 'range': [1078, 1084], 'children': [{'type': 'ExpressionStatement', 'range': [1080, 1083], 'children': [{'type': 'CallExpression', 'name': 'start_links_working_checker', 'range': [1080, 1083], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [1082, 1082]}]}]}]}]}]}]}]}
2025-01-08 09:19:05,924 - INFO - Completed main AST analysis flow
2025-01-08 09:19:05,924 - INFO - Successfully processed chunk
2025-01-08 09:19:21,958 - INFO - Step 5 result: {'type': 'Program', 'name': 'check_if_list_of_links_are_working', 'range': [846, 899], 'children': [{'type': 'FunctionDecl', 'name': 'check_if_list_of_links_are_working', 'range': [846, 899], 'children': [{'type': 'Parameter', 'name': 'list_of_links', 'range': [849, 854], 'children': [{'type': 'TypeAnnotation', 'name': 'List[str]', 'range': [851, 854]}]}, {'type': 'ReturnType', 'name': 'List[str]', 'range': [858, 861]}, {'type': 'BlockStatement', 'range': [863, 899], 'children': [{'type': 'VariableDecl', 'name': 'error_messages', 'range': [864, 867], 'children': [{'type': 'Assignment', 'name': '=', 'range': [865, 867], 'children': [{'type': 'ArrayLiteral', 'name': '[]', 'range': [866, 867]}]}]}, {'type': 'ForStatement', 'range': [869, 895], 'children': [{'type': 'VariableDecl', 'name': 'link', 'range': [870, 870]}, {'type': 'Identifier', 'name': 'list_of_links', 'range': [872, 872]}, {'type': 'BlockStatement', 'range': [874, 895], 'children': [{'type': 'VariableDecl', 'name': 'has_error, error_message', 'range': [875, 882], 'children': [{'type': 'Assignment', 'name': '=', 'range': [878, 882], 'children': [{'type': 'CallExpression', 'name': 'check_if_link_is_working', 'range': [879, 882], 'children': [{'type': 'Argument', 'name': 'link', 'range': [881, 881]}]}]}]}, {'type': 'IfStatement', 'range': [885, 895], 'children': [{'type': 'Condition', 'name': 'has_error', 'range': [886, 886]}, {'type': 'BlockStatement', 'range': [888, 895], 'children': [{'type': 'ExpressionStatement', 'name': 'error_messages.append(error_message)', 'range': [889, 894], 'children': [{'type': 'CallExpression', 'name': 'append', 'range': [891, 894], 'children': [{'type': 'Argument', 'name': 'error_message', 'range': [893, 893]}]}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'return error_messages', 'range': [897, 898], 'children': [{'type': 'Identifier', 'name': 'error_messages', 'range': [898, 898]}]}]}]}]}
2025-01-08 09:19:21,958 - INFO - Completed main AST analysis flow
2025-01-08 09:19:21,958 - INFO - Successfully processed chunk
2025-01-08 09:19:22,151 - INFO - Step 5 result: {'type': 'Program', 'name': 'start_links_working_checker', 'range': [974, 1043], 'children': [{'type': 'FunctionDecl', 'name': 'start_links_working_checker', 'range': [974, 987], 'children': [{'type': 'Parameter', 'name': 'links', 'range': [977, 982], 'children': []}, {'type': 'ReturnType', 'name': 'None', 'range': [984, 986], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'print', 'range': [990, 994], 'children': [{'type': 'Literal', 'name': "'Checking if {len(links)} links are working...'", 'range': [993, 993], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'errors', 'range': [997, 1002], 'children': [{'type': 'CallExpression', 'name': 'check_if_list_of_links_are_working', 'range': [999, 1002], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [1001, 1001], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [1004, 1022], 'children': [{'type': 'Identifier', 'name': 'errors', 'range': [1005, 1005], 'children': []}, {'type': 'AssignmentExpression', 'name': 'num_errors', 'range': [1009, 1014], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [1011, 1014], 'children': [{'type': 'Identifier', 'name': 'errors', 'range': [1013, 1013], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'print', 'range': [1016, 1020], 'children': [{'type': 'Literal', 'name': "'Apparently {num_errors} links are not working properly. See in:'", 'range': [1019, 1019], 'children': []}]}, {'type': 'ForStatement', 'name': 'for', 'range': [1023, 1033], 'children': [{'type': 'VariableDeclarator', 'name': 'error_message', 'range': [1024, 1024], 'children': []}, {'type': 'Identifier', 'name': 'errors', 'range': [1026, 1026], 'children': []}, {'type': 'ExpressionStatement', 'name': 'print', 'range': [1029, 1032], 'children': [{'type': 'Identifier', 'name': 'error_message', 'range': [1031, 1031], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'sys.exit', 'range': [1035, 1040], 'children': [{'type': 'Literal', 'name': '1', 'range': [1039, 1039], 'children': []}]}]}]}
2025-01-08 09:19:22,151 - INFO - Completed main AST analysis flow
2025-01-08 09:19:22,152 - INFO - Successfully processed chunk
2025-01-08 09:19:22,644 - INFO - Step 3 result: {'nodes': [{'type': 'VariableDeclaration', 'name': 'num_args', 'range': [1094, 1102], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1095, 1101], 'children': [{'type': 'FunctionCall', 'name': 'len', 'range': [1096, 1101], 'children': [{'type': 'MemberExpression', 'name': 'sys.argv', 'range': [1098, 1100], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'only_duplicate_links_checker', 'range': [1103, 1106], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1104, 1105], 'children': [{'type': 'Literal', 'name': 'False', 'range': [1105, 1105], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1108, 1125], 'children': [{'type': 'BinaryExpression', 'name': '<', 'range': [1110, 1111], 'children': [{'type': 'Identifier', 'name': 'num_args', 'range': [1109, 1109], 'children': []}, {'type': 'Literal', 'name': '2', 'range': [1111, 1111], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [1112, 1125], 'children': [{'type': 'FunctionCall', 'name': 'print', 'range': [1114, 1117], 'children': [{'type': 'Literal', 'name': "'No .md file passed'", 'range': [1116, 1116], 'children': []}]}, {'type': 'FunctionCall', 'name': 'sys.exit', 'range': [1119, 1124], 'children': [{'type': 'Literal', 'name': '1', 'range': [1123, 1123], 'children': []}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [1126, 1178], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [1128, 1129], 'children': [{'type': 'Identifier', 'name': 'num_args', 'range': [1127, 1127], 'children': []}, {'type': 'Literal', 'name': '3', 'range': [1130, 1130], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [1131, 1178], 'children': [{'type': 'VariableDeclaration', 'name': 'third_arg', 'range': [1133, 1145], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1134, 1144], 'children': [{'type': 'FunctionCall', 'name': 'lower', 'range': [1142, 1144], 'children': [{'type': 'MemberExpression', 'name': 'sys.argv[2]', 'range': [1135, 1140], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1147, 1177], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [1152, 1155], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [1149, 1150], 'children': [{'type': 'Identifier', 'name': 'third_arg', 'range': [1148, 1148], 'children': []}, {'type': 'Literal', 'name': "'-odlc'", 'range': [1151, 1151], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [1154, 1155], 'children': [{'type': 'Identifier', 'name': 'third_arg', 'range': [1153, 1153], 'children': []}, {'type': 'Literal', 'name': "'--only_duplicate_links_checker'", 'range': [1156, 1156], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [1157, 1177], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1160, 1161], 'children': [{'type': 'Identifier', 'name': 'only_duplicate_links_checker', 'range': [1159, 1159], 'children': []}, {'type': 'Literal', 'name': 'True', 'range': [1161, 1161], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [1163, 1177], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [1165, 1177], 'children': [{'type': 'FunctionCall', 'name': 'print', 'range': [1166, 1170], 'children': [{'type': 'Literal', 'name': "f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]'", 'range': [1168, 1169], 'children': []}]}, {'type': 'FunctionCall', 'name': 'sys.exit', 'range': [1172, 1176], 'children': [{'type': 'Literal', 'name': '1', 'range': [1175, 1175], 'children': []}]}]}]}]}]}]}, {'type': 'VariableDeclaration', 'name': 'filename', 'range': [1180, 1188], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1181, 1187], 'children': [{'type': 'MemberExpression', 'name': 'sys.argv[1]', 'range': [1182, 1186], 'children': []}]}]}, {'type': 'FunctionCall', 'name': 'main', 'range': [1190, 1196], 'children': [{'type': 'Identifier', 'name': 'filename', 'range': [1192, 1192], 'children': []}, {'type': 'Identifier', 'name': 'only_duplicate_links_checker', 'range': [1194, 1194], 'children': []}]}]}
2025-01-08 09:19:22,644 - INFO - Starting Step 4: AST normalization
2025-01-08 09:19:23,198 - INFO - Step 4 result: {'type': 'Program', 'name': 'find_links_in_text', 'range': [42, 123], 'children': [{'type': 'FunctionDecl', 'name': 'find_links_in_text', 'range': [42, 123], 'children': [{'type': 'FunctionSignature', 'name': 'find_links_in_text', 'range': [42, 55], 'children': [{'type': 'Keyword', 'name': 'def', 'range': [42, 45], 'children': []}, {'type': 'FunctionName', 'name': 'find_links_in_text', 'range': [43, 58], 'children': []}, {'type': 'ParameterList', 'name': 'text', 'range': [44, 48], 'children': [{'type': 'Parameter', 'name': 'text', 'range': [45, 48], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [46, 48], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'List[str]', 'range': [49, 55], 'children': [{'type': 'Type', 'name': 'List', 'range': [51, 55], 'children': [{'type': 'TypeArgument', 'name': 'str', 'range': [53, 55], 'children': []}]}]}]}, {'type': 'FunctionBody', 'name': 'find_links_in_text', 'range': [56, 123], 'children': [{'type': 'Docstring', 'name': 'Find links in a text and return a list of URLs.', 'range': [57, 59], 'children': []}, {'type': 'VariableDecl', 'name': 'link_pattern', 'range': [62, 87], 'children': [{'type': 'Assignment', 'name': '=', 'range': [63, 87], 'children': [{'type': 'CallExpression', 'name': 're.compile', 'range': [64, 87], 'children': [{'type': 'Argument', 'name': 'r\'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\\'\\".,<>?«»“”‘’]))\'', 'range': [68, 86], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'raw_links', 'range': [90, 99], 'children': [{'type': 'Assignment', 'name': '=', 'range': [91, 99], 'children': [{'type': 'CallExpression', 'name': 're.findall', 'range': [92, 99], 'children': [{'type': 'Argument', 'name': 'link_pattern', 'range': [96, 97], 'children': []}, {'type': 'Argument', 'name': 'text', 'range': [98, 99], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'links', 'range': [102, 118], 'children': [{'type': 'Assignment', 'name': '=', 'range': [103, 118], 'children': [{'type': 'ListComprehension', 'name': '[str(raw_link[0]) for raw_link in raw_links]', 'range': [104, 118], 'children': [{'type': 'CallExpression', 'name': 'str', 'range': [106, 112], 'children': [{'type': 'Argument', 'name': 'raw_link[0]', 'range': [108, 112], 'children': []}]}, {'type': 'Iteration', 'name': 'raw_link in raw_links', 'range': [114, 118], 'children': []}]}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [121, 123], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [122, 123], 'children': []}]}]}]}]}
2025-01-08 09:19:23,198 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:19:24,921 - INFO - Step 3 result: {'type': 'Program', 'name': 'find_links_in_file', 'range': [125, 210], 'children': [{'type': 'FunctionDeclaration', 'name': 'find_links_in_file', 'range': [125, 210], 'children': [{'type': 'FunctionSignature', 'name': 'find_links_in_file', 'range': [125, 138], 'children': [{'type': 'Keyword', 'name': 'def', 'range': [125, 128], 'children': []}, {'type': 'FunctionName', 'name': 'find_links_in_file', 'range': [126, 142], 'children': []}, {'type': 'ParameterList', 'name': 'filename', 'range': [127, 131], 'children': [{'type': 'Parameter', 'name': 'filename', 'range': [128, 131], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [129, 131], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'List[str]', 'range': [132, 138], 'children': [{'type': 'Keyword', 'name': '->', 'range': [132, 134], 'children': []}, {'type': 'Type', 'name': 'List[str]', 'range': [134, 138], 'children': []}]}]}, {'type': 'FunctionBody', 'name': 'find_links_in_file', 'range': [139, 210], 'children': [{'type': 'Docstring', 'name': 'Find links in a file and return a list of URLs from text file.', 'range': [140, 142], 'children': []}, {'type': 'WithStatement', 'name': "with open(filename, mode='r', encoding='utf-8') as file:", 'range': [145, 160], 'children': [{'type': 'Keyword', 'name': 'with', 'range': [145, 149], 'children': []}, {'type': 'CallExpression', 'name': 'open', 'range': [146, 157], 'children': [{'type': 'FunctionName', 'name': 'open', 'range': [146, 150], 'children': []}, {'type': 'ArgumentList', 'name': "filename, mode='r', encoding='utf-8'", 'range': [147, 157], 'children': [{'type': 'Argument', 'name': 'filename', 'range': [148, 149], 'children': []}, {'type': 'Argument', 'name': "mode='r'", 'range': [150, 153], 'children': []}, {'type': 'Argument', 'name': "encoding='utf-8'", 'range': [154, 157], 'children': []}]}]}, {'type': 'Keyword', 'name': 'as', 'range': [158, 160], 'children': []}, {'type': 'Variable', 'name': 'file', 'range': [159, 160], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'readme = file.read()', 'range': [162, 169], 'children': [{'type': 'Variable', 'name': 'readme', 'range': [162, 168], 'children': []}, {'type': 'CallExpression', 'name': 'file.read', 'range': [164, 168], 'children': [{'type': 'FunctionName', 'name': 'read', 'range': [166, 168], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': "index_section = readme.find('## Index')", 'range': [170, 178], 'children': [{'type': 'Variable', 'name': 'index_section', 'range': [170, 183], 'children': []}, {'type': 'CallExpression', 'name': 'readme.find', 'range': [172, 177], 'children': [{'type': 'FunctionName', 'name': 'find', 'range': [174, 177], 'children': []}, {'type': 'Argument', 'name': "'## Index'", 'range': [176, 177], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if index_section == -1:', 'range': [179, 185], 'children': [{'type': 'Keyword', 'name': 'if', 'range': [179, 181], 'children': []}, {'type': 'BinaryExpression', 'name': 'index_section == -1', 'range': [180, 184], 'children': [{'type': 'Variable', 'name': 'index_section', 'range': [180, 183], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [181, 183], 'children': []}, {'type': 'Literal', 'name': '-1', 'range': [183, 184], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': 'index_section = 0', 'range': [187, 190], 'children': [{'type': 'Variable', 'name': 'index_section', 'range': [187, 190], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [189, 190], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'content = readme[index_section:]', 'range': [191, 198], 'children': [{'type': 'Variable', 'name': 'content', 'range': [191, 198], 'children': []}, {'type': 'SliceExpression', 'name': 'readme[index_section:]', 'range': [193, 197], 'children': [{'type': 'Variable', 'name': 'readme', 'range': [193, 194], 'children': []}, {'type': 'Slice', 'name': 'index_section:', 'range': [195, 197], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': 'links = find_links_in_text(content)', 'range': [200, 206], 'children': [{'type': 'Variable', 'name': 'links', 'range': [200, 206], 'children': []}, {'type': 'CallExpression', 'name': 'find_links_in_text', 'range': [202, 205], 'children': [{'type': 'FunctionName', 'name': 'find_links_in_text', 'range': [202, 205], 'children': []}, {'type': 'Argument', 'name': 'content', 'range': [204, 205], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return links', 'range': [208, 210], 'children': [{'type': 'Keyword', 'name': 'return', 'range': [208, 210], 'children': []}, {'type': 'Variable', 'name': 'links', 'range': [209, 210], 'children': []}]}]}]}]}
2025-01-08 09:19:24,921 - INFO - Starting Step 4: AST normalization
2025-01-08 09:19:25,438 - INFO - Step 3 result: {'type': 'Program', 'name': 'get_host_from_link', 'range': [362, 471], 'children': [{'type': 'FunctionDeclaration', 'name': 'get_host_from_link', 'range': [362, 471], 'children': [{'type': 'Parameter', 'name': 'link', 'range': [365, 367], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [371, 371], 'children': []}, {'type': 'Block', 'name': '', 'range': [373, 471], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [375, 387], 'children': [{'type': 'Expression', 'name': '', 'range': [377, 387], 'children': [{'type': 'MethodCall', 'name': 'split', 'range': [377, 384], 'children': [{'type': 'Argument', 'name': "'://'", 'range': [381, 381], 'children': []}, {'type': 'Argument', 'name': '1', 'range': [383, 383], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [385, 387], 'children': [{'type': 'Index', 'name': '1', 'range': [386, 386], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [388, 394], 'children': [{'type': 'Condition', 'name': '', 'range': [389, 391], 'children': [{'type': 'InExpression', 'name': '', 'range': [389, 391], 'children': [{'type': 'Left', 'name': "'://'", 'range': [389, 389], 'children': []}, {'type': 'Right', 'name': 'link', 'range': [391, 391], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [392, 394], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [393, 393], 'children': [{'type': 'Expression', 'name': '', 'range': [393, 393], 'children': []}]}]}]}, {'type': 'Comment', 'name': '# Remove routes, arguments and anchors', 'range': [396, 403], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [404, 423], 'children': [{'type': 'Condition', 'name': '', 'range': [405, 407], 'children': [{'type': 'InExpression', 'name': '', 'range': [405, 407], 'children': [{'type': 'Left', 'name': "'/'", 'range': [405, 405], 'children': []}, {'type': 'Right', 'name': 'host', 'range': [407, 407], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [409, 423], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [410, 422], 'children': [{'type': 'Expression', 'name': '', 'range': [412, 422], 'children': [{'type': 'MethodCall', 'name': 'split', 'range': [412, 419], 'children': [{'type': 'Argument', 'name': "'/'", 'range': [416, 416], 'children': []}, {'type': 'Argument', 'name': '1', 'range': [418, 418], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [420, 422], 'children': [{'type': 'Index', 'name': '0', 'range': [421, 421], 'children': []}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [425, 444], 'children': [{'type': 'Condition', 'name': '', 'range': [426, 428], 'children': [{'type': 'InExpression', 'name': '', 'range': [426, 428], 'children': [{'type': 'Left', 'name': "'?'", 'range': [426, 426], 'children': []}, {'type': 'Right', 'name': 'host', 'range': [428, 428], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [430, 444], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [431, 443], 'children': [{'type': 'Expression', 'name': '', 'range': [433, 443], 'children': [{'type': 'MethodCall', 'name': 'split', 'range': [433, 440], 'children': [{'type': 'Argument', 'name': "'?'", 'range': [437, 437], 'children': []}, {'type': 'Argument', 'name': '1', 'range': [439, 439], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [441, 443], 'children': [{'type': 'Index', 'name': '0', 'range': [442, 442], 'children': []}]}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [446, 465], 'children': [{'type': 'Condition', 'name': '', 'range': [447, 449], 'children': [{'type': 'InExpression', 'name': '', 'range': [447, 449], 'children': [{'type': 'Left', 'name': "'#'", 'range': [447, 447], 'children': []}, {'type': 'Right', 'name': 'host', 'range': [449, 449], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [451, 465], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [452, 464], 'children': [{'type': 'Expression', 'name': '', 'range': [454, 464], 'children': [{'type': 'MethodCall', 'name': 'split', 'range': [454, 461], 'children': [{'type': 'Argument', 'name': "'#'", 'range': [458, 458], 'children': []}, {'type': 'Argument', 'name': '1', 'range': [460, 460], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [462, 464], 'children': [{'type': 'Index', 'name': '0', 'range': [463, 463], 'children': []}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [467, 469], 'children': [{'type': 'Expression', 'name': '', 'range': [468, 468], 'children': []}]}]}]}]}
2025-01-08 09:19:25,438 - INFO - Starting Step 4: AST normalization
2025-01-08 09:19:42,383 - INFO - Step 4 result: {'type': 'Program', 'name': 'start_duplicate_links_checker', 'range': [902, 973], 'children': [{'type': 'FunctionDecl', 'name': 'start_duplicate_links_checker', 'range': [902, 973], 'children': [{'type': 'Parameter', 'name': 'links', 'range': [905, 910], 'children': [{'type': 'TypeAnnotation', 'name': 'List[str]', 'range': [906, 910], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [912, 914], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [916, 973], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [918, 922], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [918, 921], 'children': [{'type': 'Literal', 'name': "'Checking for duplicate links...'", 'range': [920, 920], 'children': []}]}]}, {'type': 'VariableDeclaration', 'name': '', 'range': [924, 932], 'children': [{'type': 'VariableDeclarator', 'name': 'has_duplicate_link', 'range': [924, 924], 'children': []}, {'type': 'VariableDeclarator', 'name': 'duplicates_links', 'range': [926, 926], 'children': []}, {'type': 'CallExpression', 'name': 'check_duplicate_links', 'range': [928, 931], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [930, 930], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [934, 971], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [938, 943], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [938, 942], 'children': [{'type': 'Literal', 'name': "'Found duplicate links:'", 'range': [941, 941], 'children': []}]}]}, {'type': 'ForStatement', 'name': '', 'range': [945, 955], 'children': [{'type': 'VariableDeclaration', 'name': 'duplicate_link', 'range': [946, 946], 'children': []}, {'type': 'Identifier', 'name': 'duplicates_links', 'range': [948, 948], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [950, 955], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [951, 954], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [951, 953], 'children': [{'type': 'Identifier', 'name': 'duplicate_link', 'range': [953, 953], 'children': []}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [957, 963], 'children': [{'type': 'CallExpression', 'name': 'sys.exit', 'range': [957, 962], 'children': [{'type': 'Literal', 'name': '1', 'range': [961, 961], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [964, 971], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [967, 970], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [967, 969], 'children': [{'type': 'Literal', 'name': "'No duplicate links.'", 'range': [969, 969], 'children': []}]}]}]}]}]}]}]}
2025-01-08 09:19:42,384 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:19:58,069 - INFO - Step 4 result: {'type': 'Program', 'name': 'check_if_link_is_working', 'range': [633, 844], 'children': [{'type': 'FunctionDecl', 'name': 'check_if_link_is_working', 'range': [633, 844], 'children': [{'type': 'Parameter', 'name': 'link', 'range': [636, 638], 'children': []}, {'type': 'ReturnType', 'name': 'Tuple[bool, str]', 'range': [642, 647], 'children': []}, {'type': 'Docstring', 'name': 'Docstring', 'range': [650, 652], 'children': []}, {'type': 'VariableDecl', 'name': 'has_error', 'range': [655, 657], 'children': []}, {'type': 'VariableDecl', 'name': 'error_message', 'range': [659, 661], 'children': []}, {'type': 'TryBlock', 'name': 'TryBlock', 'range': [664, 835], 'children': [{'type': 'CallExpression', 'name': 'requests.get', 'range': [669, 698], 'children': [{'type': 'Argument', 'name': 'link', 'range': [673, 673], 'children': []}, {'type': 'KeywordArgument', 'name': 'timeout', 'range': [675, 677], 'children': []}, {'type': 'KeywordArgument', 'name': 'headers', 'range': [679, 697], 'children': [{'type': 'Dictionary', 'name': 'headers', 'range': [681, 697], 'children': [{'type': 'KeyValuePair', 'name': "'User-Agent'", 'range': [683, 687], 'children': []}, {'type': 'KeyValuePair', 'name': "'host'", 'range': [690, 696], 'children': []}]}]}]}, {'type': 'VariableAssignment', 'name': 'code', 'range': [701, 706], 'children': []}, {'type': 'IfStatement', 'name': 'IfStatement', 'range': [708, 729], 'children': [{'type': 'Condition', 'name': 'Condition', 'range': [709, 719], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [721, 723], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [725, 729], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [731, 749], 'children': [{'type': 'Exception', 'name': 'SSLError', 'range': [736, 736], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [741, 743], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [745, 749], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [751, 769], 'children': [{'type': 'Exception', 'name': 'ConnectionError', 'range': [756, 756], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [761, 763], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [765, 769], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [771, 791], 'children': [{'type': 'Exception', 'name': 'TimeoutError', 'range': [773, 773], 'children': []}, {'type': 'Exception', 'name': 'ConnectTimeout', 'range': [779, 779], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [783, 785], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [787, 791], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [793, 811], 'children': [{'type': 'Exception', 'name': 'TooManyRedirects', 'range': [798, 798], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [803, 805], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [807, 811], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [813, 835], 'children': [{'type': 'Exception', 'name': 'Exception', 'range': [815, 815], 'children': []}, {'type': 'Exception', 'name': 'RequestException', 'range': [821, 821], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [827, 829], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [831, 835], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'ReturnStatement', 'range': [837, 843], 'children': [{'type': 'Tuple', 'name': 'Tuple', 'range': [838, 842], 'children': [{'type': 'Identifier', 'name': 'has_error', 'range': [839, 839], 'children': []}, {'type': 'Identifier', 'name': 'error_message', 'range': [841, 841], 'children': []}]}]}]}]}
2025-01-08 09:19:58,069 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:20:05,419 - INFO - Step 5 result: {'type': 'Program', 'name': 'find_links_in_text', 'range': [42, 123], 'children': [{'type': 'FunctionDecl', 'name': 'find_links_in_text', 'range': [42, 123], 'children': [{'type': 'FunctionSignature', 'name': 'find_links_in_text', 'range': [42, 55], 'children': [{'type': 'Keyword', 'name': 'def', 'range': [42, 45], 'children': []}, {'type': 'FunctionName', 'name': 'find_links_in_text', 'range': [43, 58], 'children': []}, {'type': 'ParameterList', 'name': 'text', 'range': [44, 48], 'children': [{'type': 'Parameter', 'name': 'text', 'range': [45, 48], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [46, 48], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'List[str]', 'range': [49, 55], 'children': [{'type': 'Type', 'name': 'List', 'range': [51, 55], 'children': [{'type': 'TypeArgument', 'name': 'str', 'range': [53, 55], 'children': []}]}]}]}, {'type': 'FunctionBody', 'name': 'find_links_in_text', 'range': [56, 123], 'children': [{'type': 'Docstring', 'name': 'Find links in a text and return a list of URLs.', 'range': [57, 59], 'children': []}, {'type': 'VariableDecl', 'name': 'link_pattern', 'range': [62, 87], 'children': [{'type': 'Assignment', 'name': '=', 'range': [63, 87], 'children': [{'type': 'CallExpression', 'name': 're.compile', 'range': [64, 87], 'children': [{'type': 'Argument', 'name': 'r\'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\\'\\".,<>?«»“”‘’]))\'', 'range': [68, 86], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'raw_links', 'range': [90, 99], 'children': [{'type': 'Assignment', 'name': '=', 'range': [91, 99], 'children': [{'type': 'CallExpression', 'name': 're.findall', 'range': [92, 99], 'children': [{'type': 'Argument', 'name': 'link_pattern', 'range': [96, 97], 'children': []}, {'type': 'Argument', 'name': 'text', 'range': [98, 99], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'links', 'range': [102, 118], 'children': [{'type': 'Assignment', 'name': '=', 'range': [103, 118], 'children': [{'type': 'ListComprehension', 'name': '[str(raw_link[0]) for raw_link in raw_links]', 'range': [104, 118], 'children': [{'type': 'CallExpression', 'name': 'str', 'range': [106, 112], 'children': [{'type': 'Argument', 'name': 'raw_link[0]', 'range': [108, 112], 'children': []}]}, {'type': 'Iteration', 'name': 'raw_link in raw_links', 'range': [114, 118], 'children': []}]}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [121, 123], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [122, 123], 'children': []}]}]}]}]}
2025-01-08 09:20:05,419 - INFO - Completed main AST analysis flow
2025-01-08 09:20:05,420 - INFO - Successfully processed chunk
2025-01-08 09:20:05,503 - INFO - Step 3 result: {'type': 'Program', 'name': 'has_cloudflare_protection', 'range': [472, 630], 'children': [{'type': 'FunctionDeclaration', 'name': 'has_cloudflare_protection', 'range': [472, 630], 'children': [{'type': 'Parameter', 'name': 'resp', 'range': [475, 477], 'children': []}, {'type': 'ReturnType', 'name': 'bool', 'range': [481, 481], 'children': []}, {'type': 'Docstring', 'name': 'Docstring', 'range': [484, 486], 'children': []}, {'type': 'Assignment', 'name': 'code', 'range': [489, 494], 'children': [{'type': 'Variable', 'name': 'resp', 'range': [491, 491], 'children': []}, {'type': 'PropertyAccess', 'name': 'status_code', 'range': [492, 493], 'children': []}]}, {'type': 'Assignment', 'name': 'server', 'range': [495, 514], 'children': [{'type': 'Variable', 'name': 'resp', 'range': [497, 497], 'children': []}, {'type': 'PropertyAccess', 'name': 'headers', 'range': [498, 499], 'children': []}, {'type': 'MethodCall', 'name': 'get', 'range': [500, 504], 'children': [{'type': 'StringLiteral', 'name': "'Server'", 'range': [503, 503], 'children': []}]}, {'type': 'LogicalOr', 'name': 'or', 'range': [505, 505], 'children': [{'type': 'Variable', 'name': 'resp', 'range': [506, 506], 'children': []}, {'type': 'PropertyAccess', 'name': 'headers', 'range': [507, 508], 'children': []}, {'type': 'MethodCall', 'name': 'get', 'range': [509, 513], 'children': [{'type': 'StringLiteral', 'name': "'server'", 'range': [512, 512], 'children': []}]}]}]}, {'type': 'Assignment', 'name': 'cloudflare_flags', 'range': [515, 575], 'children': [{'type': 'ArrayLiteral', 'name': 'ArrayLiteral', 'range': [517, 575], 'children': [{'type': 'StringLiteral', 'name': "'403 Forbidden'", 'range': [519, 519], 'children': []}, {'type': 'StringLiteral', 'name': "'cloudflare'", 'range': [522, 522], 'children': []}, {'type': 'StringLiteral', 'name': "'Cloudflare'", 'range': [525, 525], 'children': []}, {'type': 'StringLiteral', 'name': "'Security check'", 'range': [528, 528], 'children': []}, {'type': 'StringLiteral', 'name': "'Please Wait... | Cloudflare'", 'range': [531, 531], 'children': []}, {'type': 'StringLiteral', 'name': "'We are checking your browser...'", 'range': [534, 534], 'children': []}, {'type': 'StringLiteral', 'name': "'Please stand by, while we are checking your browser...'", 'range': [537, 537], 'children': []}, {'type': 'StringLiteral', 'name': "'Checking your browser before accessing'", 'range': [540, 540], 'children': []}, {'type': 'StringLiteral', 'name': "'This process is automatic.'", 'range': [543, 543], 'children': []}, {'type': 'StringLiteral', 'name': "'Your browser will redirect to your requested content shortly.'", 'range': [546, 546], 'children': []}, {'type': 'StringLiteral', 'name': "'Please allow up to 5 seconds'", 'range': [549, 549], 'children': []}, {'type': 'StringLiteral', 'name': "'DDoS protection by'", 'range': [552, 552], 'children': []}, {'type': 'StringLiteral', 'name': "'Ray ID:'", 'range': [555, 555], 'children': []}, {'type': 'StringLiteral', 'name': "'Cloudflare Ray ID:'", 'range': [558, 558], 'children': []}, {'type': 'StringLiteral', 'name': "'_cf_chl'", 'range': [561, 561], 'children': []}, {'type': 'StringLiteral', 'name': "'_cf_chl_opt'", 'range': [564, 564], 'children': []}, {'type': 'StringLiteral', 'name': "'__cf_chl_rt_tk'", 'range': [567, 567], 'children': []}, {'type': 'StringLiteral', 'name': "'cf-spinner-please-wait'", 'range': [570, 570], 'children': []}, {'type': 'StringLiteral', 'name': "'cf-spinner-redirecting'", 'range': [573, 573], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfStatement', 'range': [578, 626], 'children': [{'type': 'Condition', 'name': 'Condition', 'range': [579, 591], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [580, 585], 'children': [{'type': 'Variable', 'name': 'code', 'range': [579, 579], 'children': []}, {'type': 'ArrayLiteral', 'name': 'ArrayLiteral', 'range': [581, 585], 'children': [{'type': 'NumericLiteral', 'name': '403', 'range': [582, 582], 'children': []}, {'type': 'NumericLiteral', 'name': '503', 'range': [584, 584], 'children': []}]}]}, {'type': 'LogicalAnd', 'name': 'and', 'range': [586, 586], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [587, 590], 'children': [{'type': 'Variable', 'name': 'server', 'range': [587, 587], 'children': []}, {'type': 'StringLiteral', 'name': "'cloudflare'", 'range': [590, 590], 'children': []}]}]}]}, {'type': 'Block', 'name': 'Block', 'range': [592, 626], 'children': [{'type': 'Assignment', 'name': 'html', 'range': [593, 598], 'children': [{'type': 'Variable', 'name': 'resp', 'range': [595, 595], 'children': []}, {'type': 'PropertyAccess', 'name': 'text', 'range': [596, 597], 'children': []}]}, {'type': 'Assignment', 'name': 'flags_found', 'range': [600, 610], 'children': [{'type': 'ListComprehension', 'name': 'ListComprehension', 'range': [602, 610], 'children': [{'type': 'Variable', 'name': 'flag', 'range': [603, 603], 'children': []}, {'type': 'InKeyword', 'name': 'in', 'range': [604, 604], 'children': [{'type': 'Variable', 'name': 'html', 'range': [605, 605], 'children': []}]}, {'type': 'ForKeyword', 'name': 'for', 'range': [606, 606], 'children': [{'type': 'Variable', 'name': 'flag', 'range': [607, 607], 'children': []}, {'type': 'InKeyword', 'name': 'in', 'range': [608, 608], 'children': [{'type': 'Variable', 'name': 'cloudflare_flags', 'range': [609, 609], 'children': []}]}]}]}]}, {'type': 'Assignment', 'name': 'any_flag_found', 'range': [612, 618], 'children': [{'type': 'FunctionCall', 'name': 'any', 'range': [614, 617], 'children': [{'type': 'Variable', 'name': 'flags_found', 'range': [616, 616], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfStatement', 'range': [620, 626], 'children': [{'type': 'Condition', 'name': 'Condition', 'range': [621, 621], 'children': [{'type': 'Variable', 'name': 'any_flag_found', 'range': [621, 621], 'children': []}]}, {'type': 'Block', 'name': 'Block', 'range': [622, 626], 'children': [{'type': 'ReturnStatement', 'name': 'ReturnStatement', 'range': [624, 625], 'children': [{'type': 'BooleanLiteral', 'name': 'True', 'range': [625, 625], 'children': []}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'ReturnStatement', 'range': [628, 629], 'children': [{'type': 'BooleanLiteral', 'name': 'False', 'range': [629, 629], 'children': []}]}]}]}
2025-01-08 09:20:05,504 - INFO - Starting Step 4: AST normalization
2025-01-08 09:20:21,316 - INFO - Step 5 result: {'type': 'Program', 'name': 'start_duplicate_links_checker', 'range': [902, 973], 'children': [{'type': 'FunctionDecl', 'name': 'start_duplicate_links_checker', 'range': [902, 973], 'children': [{'type': 'Parameter', 'name': 'links', 'range': [905, 910], 'children': [{'type': 'TypeAnnotation', 'name': 'List[str]', 'range': [906, 910], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [912, 914], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [916, 973], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [918, 922], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [918, 921], 'children': [{'type': 'Literal', 'name': "'Checking for duplicate links...'", 'range': [920, 920], 'children': []}]}]}, {'type': 'VariableDeclaration', 'name': '', 'range': [924, 932], 'children': [{'type': 'VariableDeclarator', 'name': 'has_duplicate_link', 'range': [924, 924], 'children': []}, {'type': 'VariableDeclarator', 'name': 'duplicates_links', 'range': [926, 926], 'children': []}, {'type': 'CallExpression', 'name': 'check_duplicate_links', 'range': [928, 931], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [930, 930], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [934, 971], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [938, 943], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [938, 942], 'children': [{'type': 'Literal', 'name': "'Found duplicate links:'", 'range': [941, 941], 'children': []}]}]}, {'type': 'ForStatement', 'name': '', 'range': [945, 955], 'children': [{'type': 'VariableDeclaration', 'name': 'duplicate_link', 'range': [946, 946], 'children': []}, {'type': 'Identifier', 'name': 'duplicates_links', 'range': [948, 948], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [950, 955], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [951, 954], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [951, 953], 'children': [{'type': 'Identifier', 'name': 'duplicate_link', 'range': [953, 953], 'children': []}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [957, 963], 'children': [{'type': 'CallExpression', 'name': 'sys.exit', 'range': [957, 962], 'children': [{'type': 'Literal', 'name': '1', 'range': [961, 961], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [964, 971], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [967, 970], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [967, 969], 'children': [{'type': 'Literal', 'name': "'No duplicate links.'", 'range': [969, 969], 'children': []}]}]}]}]}]}]}]}
2025-01-08 09:20:21,316 - INFO - Completed main AST analysis flow
2025-01-08 09:20:21,317 - INFO - Successfully processed chunk
2025-01-08 09:20:25,697 - INFO - Step 4 result: {'nodes': [{'type': 'VariableDeclaration', 'name': 'num_args', 'range': [1094, 1102], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1095, 1101], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [1096, 1101], 'children': [{'type': 'MemberExpression', 'name': 'sys.argv', 'range': [1098, 1100], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'only_duplicate_links_checker', 'range': [1103, 1106], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1104, 1105], 'children': [{'type': 'Literal', 'name': 'False', 'range': [1105, 1105], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1108, 1125], 'children': [{'type': 'BinaryExpression', 'name': '<', 'range': [1110, 1111], 'children': [{'type': 'Identifier', 'name': 'num_args', 'range': [1109, 1109], 'children': []}, {'type': 'Literal', 'name': '2', 'range': [1111, 1111], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [1112, 1125], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [1114, 1117], 'children': [{'type': 'Literal', 'name': "'No .md file passed'", 'range': [1116, 1116], 'children': []}]}, {'type': 'CallExpression', 'name': 'sys.exit', 'range': [1119, 1124], 'children': [{'type': 'Literal', 'name': '1', 'range': [1123, 1123], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1126, 1178], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [1128, 1129], 'children': [{'type': 'Identifier', 'name': 'num_args', 'range': [1127, 1127], 'children': []}, {'type': 'Literal', 'name': '3', 'range': [1130, 1130], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [1131, 1178], 'children': [{'type': 'VariableDeclaration', 'name': 'third_arg', 'range': [1133, 1145], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1134, 1144], 'children': [{'type': 'CallExpression', 'name': 'lower', 'range': [1142, 1144], 'children': [{'type': 'MemberExpression', 'name': 'sys.argv[2]', 'range': [1135, 1140], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1147, 1177], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [1152, 1155], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [1149, 1150], 'children': [{'type': 'Identifier', 'name': 'third_arg', 'range': [1148, 1148], 'children': []}, {'type': 'Literal', 'name': "'-odlc'", 'range': [1151, 1151], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [1154, 1155], 'children': [{'type': 'Identifier', 'name': 'third_arg', 'range': [1153, 1153], 'children': []}, {'type': 'Literal', 'name': "'--only_duplicate_links_checker'", 'range': [1156, 1156], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [1157, 1177], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1160, 1161], 'children': [{'type': 'Identifier', 'name': 'only_duplicate_links_checker', 'range': [1159, 1159], 'children': []}, {'type': 'Literal', 'name': 'True', 'range': [1161, 1161], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [1163, 1177], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [1165, 1177], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [1166, 1170], 'children': [{'type': 'Literal', 'name': "f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]'", 'range': [1168, 1169], 'children': []}]}, {'type': 'CallExpression', 'name': 'sys.exit', 'range': [1172, 1176], 'children': [{'type': 'Literal', 'name': '1', 'range': [1175, 1175], 'children': []}]}]}]}]}]}]}, {'type': 'VariableDeclaration', 'name': 'filename', 'range': [1180, 1188], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1181, 1187], 'children': [{'type': 'MemberExpression', 'name': 'sys.argv[1]', 'range': [1182, 1186], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'main', 'range': [1190, 1196], 'children': [{'type': 'Identifier', 'name': 'filename', 'range': [1192, 1192], 'children': []}, {'type': 'Identifier', 'name': 'only_duplicate_links_checker', 'range': [1194, 1194], 'children': []}]}]}
2025-01-08 09:20:25,697 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:20:39,644 - INFO - Step 4 result: {'type': 'Program', 'name': 'find_links_in_file', 'range': [125, 210], 'children': [{'type': 'FunctionDecl', 'name': 'find_links_in_file', 'range': [125, 210], 'children': [{'type': 'FunctionSignature', 'name': 'find_links_in_file', 'range': [125, 138], 'children': [{'type': 'Keyword', 'name': 'def', 'range': [125, 128], 'children': []}, {'type': 'Identifier', 'name': 'find_links_in_file', 'range': [126, 142], 'children': []}, {'type': 'ParameterList', 'name': 'filename', 'range': [127, 131], 'children': [{'type': 'Parameter', 'name': 'filename', 'range': [128, 131], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [129, 131], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'List[str]', 'range': [132, 138], 'children': [{'type': 'Keyword', 'name': '->', 'range': [132, 134], 'children': []}, {'type': 'Type', 'name': 'List[str]', 'range': [134, 138], 'children': []}]}]}, {'type': 'FunctionBody', 'name': 'find_links_in_file', 'range': [139, 210], 'children': [{'type': 'Docstring', 'name': 'Find links in a file and return a list of URLs from text file.', 'range': [140, 142], 'children': []}, {'type': 'WithStatement', 'name': "with open(filename, mode='r', encoding='utf-8') as file:", 'range': [145, 160], 'children': [{'type': 'Keyword', 'name': 'with', 'range': [145, 149], 'children': []}, {'type': 'CallExpression', 'name': 'open', 'range': [146, 157], 'children': [{'type': 'Identifier', 'name': 'open', 'range': [146, 150], 'children': []}, {'type': 'ArgumentList', 'name': "filename, mode='r', encoding='utf-8'", 'range': [147, 157], 'children': [{'type': 'Argument', 'name': 'filename', 'range': [148, 149], 'children': []}, {'type': 'Argument', 'name': "mode='r'", 'range': [150, 153], 'children': []}, {'type': 'Argument', 'name': "encoding='utf-8'", 'range': [154, 157], 'children': []}]}]}, {'type': 'Keyword', 'name': 'as', 'range': [158, 160], 'children': []}, {'type': 'Identifier', 'name': 'file', 'range': [159, 160], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'readme = file.read()', 'range': [162, 169], 'children': [{'type': 'Identifier', 'name': 'readme', 'range': [162, 168], 'children': []}, {'type': 'CallExpression', 'name': 'file.read', 'range': [164, 168], 'children': [{'type': 'Identifier', 'name': 'read', 'range': [166, 168], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': "index_section = readme.find('## Index')", 'range': [170, 178], 'children': [{'type': 'Identifier', 'name': 'index_section', 'range': [170, 183], 'children': []}, {'type': 'CallExpression', 'name': 'readme.find', 'range': [172, 177], 'children': [{'type': 'Identifier', 'name': 'find', 'range': [174, 177], 'children': []}, {'type': 'Literal', 'name': "'## Index'", 'range': [176, 177], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if index_section == -1:', 'range': [179, 185], 'children': [{'type': 'Keyword', 'name': 'if', 'range': [179, 181], 'children': []}, {'type': 'BinaryExpression', 'name': 'index_section == -1', 'range': [180, 184], 'children': [{'type': 'Identifier', 'name': 'index_section', 'range': [180, 183], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [181, 183], 'children': []}, {'type': 'Literal', 'name': '-1', 'range': [183, 184], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': 'index_section = 0', 'range': [187, 190], 'children': [{'type': 'Identifier', 'name': 'index_section', 'range': [187, 190], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [189, 190], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'content = readme[index_section:]', 'range': [191, 198], 'children': [{'type': 'Identifier', 'name': 'content', 'range': [191, 198], 'children': []}, {'type': 'SliceExpression', 'name': 'readme[index_section:]', 'range': [193, 197], 'children': [{'type': 'Identifier', 'name': 'readme', 'range': [193, 194], 'children': []}, {'type': 'Slice', 'name': 'index_section:', 'range': [195, 197], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': 'links = find_links_in_text(content)', 'range': [200, 206], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [200, 206], 'children': []}, {'type': 'CallExpression', 'name': 'find_links_in_text', 'range': [202, 205], 'children': [{'type': 'Identifier', 'name': 'find_links_in_text', 'range': [202, 205], 'children': []}, {'type': 'Identifier', 'name': 'content', 'range': [204, 205], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return links', 'range': [208, 210], 'children': [{'type': 'Keyword', 'name': 'return', 'range': [208, 210], 'children': []}, {'type': 'Identifier', 'name': 'links', 'range': [209, 210], 'children': []}]}]}]}]}
2025-01-08 09:20:39,644 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:20:40,008 - INFO - Step 4 result: {'type': 'Program', 'name': 'get_host_from_link', 'range': [362, 471], 'children': [{'type': 'FunctionDecl', 'name': 'get_host_from_link', 'range': [362, 471], 'children': [{'type': 'Parameter', 'name': 'link', 'range': [365, 367], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [371, 371], 'children': []}, {'type': 'Block', 'name': '', 'range': [373, 471], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [375, 387], 'children': [{'type': 'CallExpression', 'name': 'split', 'range': [377, 384], 'children': [{'type': 'Literal', 'name': "'://'", 'range': [381, 381], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [383, 383], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [385, 387], 'children': [{'type': 'Literal', 'name': '1', 'range': [386, 386], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [388, 394], 'children': [{'type': 'Condition', 'name': '', 'range': [389, 391], 'children': [{'type': 'BinaryExpression', 'name': 'InExpression', 'range': [389, 391], 'children': [{'type': 'Literal', 'name': "'://'", 'range': [389, 389], 'children': []}, {'type': 'Identifier', 'name': 'link', 'range': [391, 391], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [392, 394], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [393, 393], 'children': [{'type': 'Identifier', 'name': 'link', 'range': [393, 393], 'children': []}]}]}]}, {'type': 'Comment', 'name': '# Remove routes, arguments and anchors', 'range': [396, 403], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [404, 423], 'children': [{'type': 'Condition', 'name': '', 'range': [405, 407], 'children': [{'type': 'BinaryExpression', 'name': 'InExpression', 'range': [405, 407], 'children': [{'type': 'Literal', 'name': "'/'", 'range': [405, 405], 'children': []}, {'type': 'Identifier', 'name': 'host', 'range': [407, 407], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [409, 423], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [410, 422], 'children': [{'type': 'CallExpression', 'name': 'split', 'range': [412, 419], 'children': [{'type': 'Literal', 'name': "'/'", 'range': [416, 416], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [418, 418], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [420, 422], 'children': [{'type': 'Literal', 'name': '0', 'range': [421, 421], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [425, 444], 'children': [{'type': 'Condition', 'name': '', 'range': [426, 428], 'children': [{'type': 'BinaryExpression', 'name': 'InExpression', 'range': [426, 428], 'children': [{'type': 'Literal', 'name': "'?'", 'range': [426, 426], 'children': []}, {'type': 'Identifier', 'name': 'host', 'range': [428, 428], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [430, 444], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [431, 443], 'children': [{'type': 'CallExpression', 'name': 'split', 'range': [433, 440], 'children': [{'type': 'Literal', 'name': "'?'", 'range': [437, 437], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [439, 439], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [441, 443], 'children': [{'type': 'Literal', 'name': '0', 'range': [442, 442], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [446, 465], 'children': [{'type': 'Condition', 'name': '', 'range': [447, 449], 'children': [{'type': 'BinaryExpression', 'name': 'InExpression', 'range': [447, 449], 'children': [{'type': 'Literal', 'name': "'#'", 'range': [447, 447], 'children': []}, {'type': 'Identifier', 'name': 'host', 'range': [449, 449], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [451, 465], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [452, 464], 'children': [{'type': 'CallExpression', 'name': 'split', 'range': [454, 461], 'children': [{'type': 'Literal', 'name': "'#'", 'range': [458, 458], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [460, 460], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [462, 464], 'children': [{'type': 'Literal', 'name': '0', 'range': [463, 463], 'children': []}]}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [467, 469], 'children': [{'type': 'Identifier', 'name': 'host', 'range': [468, 468], 'children': []}]}]}]}]}
2025-01-08 09:20:40,009 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:21:03,575 - INFO - Step 5 result: {'type': 'Program', 'name': 'check_if_link_is_working', 'range': [633, 844], 'children': [{'type': 'FunctionDecl', 'name': 'check_if_link_is_working', 'range': [633, 844], 'children': [{'type': 'Parameter', 'name': 'link', 'range': [636, 638], 'children': []}, {'type': 'ReturnType', 'name': 'Tuple[bool, str]', 'range': [642, 647], 'children': []}, {'type': 'Docstring', 'name': 'Docstring', 'range': [650, 652], 'children': []}, {'type': 'VariableDecl', 'name': 'has_error', 'range': [655, 657], 'children': []}, {'type': 'VariableDecl', 'name': 'error_message', 'range': [659, 661], 'children': []}, {'type': 'TryBlock', 'name': 'TryBlock', 'range': [664, 835], 'children': [{'type': 'CallExpression', 'name': 'requests.get', 'range': [669, 698], 'children': [{'type': 'Argument', 'name': 'link', 'range': [673, 673], 'children': []}, {'type': 'KeywordArgument', 'name': 'timeout', 'range': [675, 677], 'children': []}, {'type': 'KeywordArgument', 'name': 'headers', 'range': [679, 697], 'children': [{'type': 'Dictionary', 'name': 'headers', 'range': [681, 697], 'children': [{'type': 'KeyValuePair', 'name': "'User-Agent'", 'range': [683, 687], 'children': []}, {'type': 'KeyValuePair', 'name': "'host'", 'range': [690, 696], 'children': []}]}]}]}, {'type': 'VariableAssignment', 'name': 'code', 'range': [701, 706], 'children': []}, {'type': 'IfStatement', 'name': 'IfStatement', 'range': [708, 729], 'children': [{'type': 'Condition', 'name': 'Condition', 'range': [709, 719], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [721, 723], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [725, 729], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [731, 749], 'children': [{'type': 'Exception', 'name': 'SSLError', 'range': [736, 736], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [741, 743], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [745, 749], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [751, 769], 'children': [{'type': 'Exception', 'name': 'ConnectionError', 'range': [756, 756], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [761, 763], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [765, 769], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [771, 791], 'children': [{'type': 'Exception', 'name': 'TimeoutError', 'range': [773, 773], 'children': []}, {'type': 'Exception', 'name': 'ConnectTimeout', 'range': [779, 779], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [783, 785], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [787, 791], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [793, 811], 'children': [{'type': 'Exception', 'name': 'TooManyRedirects', 'range': [798, 798], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [803, 805], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [807, 811], 'children': []}]}, {'type': 'ExceptBlock', 'name': 'ExceptBlock', 'range': [813, 835], 'children': [{'type': 'Exception', 'name': 'Exception', 'range': [815, 815], 'children': []}, {'type': 'Exception', 'name': 'RequestException', 'range': [821, 821], 'children': []}, {'type': 'VariableAssignment', 'name': 'has_error', 'range': [827, 829], 'children': []}, {'type': 'VariableAssignment', 'name': 'error_message', 'range': [831, 835], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'ReturnStatement', 'range': [837, 843], 'children': [{'type': 'Tuple', 'name': 'Tuple', 'range': [838, 842], 'children': [{'type': 'Identifier', 'name': 'has_error', 'range': [839, 839], 'children': []}, {'type': 'Identifier', 'name': 'error_message', 'range': [841, 841], 'children': []}]}]}]}]}
2025-01-08 09:21:03,575 - INFO - Completed main AST analysis flow
2025-01-08 09:21:03,576 - INFO - Successfully processed chunk
2025-01-08 09:21:28,667 - INFO - Step 5 result: {'type': 'Program', 'name': 'MainProgram', 'range': [1094, 1196], 'children': [{'type': 'VariableDeclaration', 'name': 'num_args', 'range': [1094, 1102], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1095, 1101], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [1096, 1101], 'children': [{'type': 'MemberExpression', 'name': 'sys.argv', 'range': [1098, 1100], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'only_duplicate_links_checker', 'range': [1103, 1106], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1104, 1105], 'children': [{'type': 'Literal', 'name': 'False', 'range': [1105, 1105], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1108, 1125], 'children': [{'type': 'BinaryExpression', 'name': '<', 'range': [1110, 1111], 'children': [{'type': 'Identifier', 'name': 'num_args', 'range': [1109, 1109], 'children': []}, {'type': 'Literal', 'name': '2', 'range': [1111, 1111], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [1112, 1125], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [1114, 1117], 'children': [{'type': 'Literal', 'name': "'No .md file passed'", 'range': [1116, 1116], 'children': []}]}, {'type': 'CallExpression', 'name': 'sys.exit', 'range': [1119, 1124], 'children': [{'type': 'Literal', 'name': '1', 'range': [1123, 1123], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1126, 1178], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [1128, 1129], 'children': [{'type': 'Identifier', 'name': 'num_args', 'range': [1127, 1127], 'children': []}, {'type': 'Literal', 'name': '3', 'range': [1130, 1130], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [1131, 1178], 'children': [{'type': 'VariableDeclaration', 'name': 'third_arg', 'range': [1133, 1145], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1134, 1144], 'children': [{'type': 'CallExpression', 'name': 'lower', 'range': [1142, 1144], 'children': [{'type': 'MemberExpression', 'name': 'sys.argv[2]', 'range': [1135, 1140], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1147, 1177], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [1152, 1155], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [1149, 1150], 'children': [{'type': 'Identifier', 'name': 'third_arg', 'range': [1148, 1148], 'children': []}, {'type': 'Literal', 'name': "'-odlc'", 'range': [1151, 1151], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [1154, 1155], 'children': [{'type': 'Identifier', 'name': 'third_arg', 'range': [1153, 1153], 'children': []}, {'type': 'Literal', 'name': "'--only_duplicate_links_checker'", 'range': [1156, 1156], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [1157, 1177], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1160, 1161], 'children': [{'type': 'Identifier', 'name': 'only_duplicate_links_checker', 'range': [1159, 1159], 'children': []}, {'type': 'Literal', 'name': 'True', 'range': [1161, 1161], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [1163, 1177], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [1165, 1177], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [1166, 1170], 'children': [{'type': 'Literal', 'name': "f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]'", 'range': [1168, 1169], 'children': []}]}, {'type': 'CallExpression', 'name': 'sys.exit', 'range': [1172, 1176], 'children': [{'type': 'Literal', 'name': '1', 'range': [1175, 1175], 'children': []}]}]}]}]}]}]}, {'type': 'VariableDeclaration', 'name': 'filename', 'range': [1180, 1188], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1181, 1187], 'children': [{'type': 'MemberExpression', 'name': 'sys.argv[1]', 'range': [1182, 1186], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'main', 'range': [1190, 1196], 'children': [{'type': 'Identifier', 'name': 'filename', 'range': [1192, 1192], 'children': []}, {'type': 'Identifier', 'name': 'only_duplicate_links_checker', 'range': [1194, 1194], 'children': []}]}]}
2025-01-08 09:21:28,667 - INFO - Completed main AST analysis flow
2025-01-08 09:21:28,668 - INFO - Successfully processed chunk
2025-01-08 09:21:35,995 - INFO - Step 4 result: {'type': 'Program', 'name': 'has_cloudflare_protection', 'range': [472, 630], 'children': [{'type': 'FunctionDecl', 'name': 'has_cloudflare_protection', 'range': [472, 630], 'children': [{'type': 'Parameter', 'name': 'resp', 'range': [475, 477], 'children': []}, {'type': 'ReturnType', 'name': 'bool', 'range': [481, 481], 'children': []}, {'type': 'Docstring', 'name': 'Docstring', 'range': [484, 486], 'children': []}, {'type': 'Assignment', 'name': 'code', 'range': [489, 494], 'children': [{'type': 'Identifier', 'name': 'resp', 'range': [491, 491], 'children': []}, {'type': 'PropertyAccess', 'name': 'status_code', 'range': [492, 493], 'children': []}]}, {'type': 'Assignment', 'name': 'server', 'range': [495, 514], 'children': [{'type': 'Identifier', 'name': 'resp', 'range': [497, 497], 'children': []}, {'type': 'PropertyAccess', 'name': 'headers', 'range': [498, 499], 'children': []}, {'type': 'CallExpression', 'name': 'get', 'range': [500, 504], 'children': [{'type': 'Literal', 'name': "'Server'", 'range': [503, 503], 'children': []}]}, {'type': 'LogicalExpression', 'name': 'or', 'range': [505, 505], 'children': [{'type': 'Identifier', 'name': 'resp', 'range': [506, 506], 'children': []}, {'type': 'PropertyAccess', 'name': 'headers', 'range': [507, 508], 'children': []}, {'type': 'CallExpression', 'name': 'get', 'range': [509, 513], 'children': [{'type': 'Literal', 'name': "'server'", 'range': [512, 512], 'children': []}]}]}]}, {'type': 'Assignment', 'name': 'cloudflare_flags', 'range': [515, 575], 'children': [{'type': 'ArrayExpression', 'name': 'ArrayExpression', 'range': [517, 575], 'children': [{'type': 'Literal', 'name': "'403 Forbidden'", 'range': [519, 519], 'children': []}, {'type': 'Literal', 'name': "'cloudflare'", 'range': [522, 522], 'children': []}, {'type': 'Literal', 'name': "'Cloudflare'", 'range': [525, 525], 'children': []}, {'type': 'Literal', 'name': "'Security check'", 'range': [528, 528], 'children': []}, {'type': 'Literal', 'name': "'Please Wait... | Cloudflare'", 'range': [531, 531], 'children': []}, {'type': 'Literal', 'name': "'We are checking your browser...'", 'range': [534, 534], 'children': []}, {'type': 'Literal', 'name': "'Please stand by, while we are checking your browser...'", 'range': [537, 537], 'children': []}, {'type': 'Literal', 'name': "'Checking your browser before accessing'", 'range': [540, 540], 'children': []}, {'type': 'Literal', 'name': "'This process is automatic.'", 'range': [543, 543], 'children': []}, {'type': 'Literal', 'name': "'Your browser will redirect to your requested content shortly.'", 'range': [546, 546], 'children': []}, {'type': 'Literal', 'name': "'Please allow up to 5 seconds'", 'range': [549, 549], 'children': []}, {'type': 'Literal', 'name': "'DDoS protection by'", 'range': [552, 552], 'children': []}, {'type': 'Literal', 'name': "'Ray ID:'", 'range': [555, 555], 'children': []}, {'type': 'Literal', 'name': "'Cloudflare Ray ID:'", 'range': [558, 558], 'children': []}, {'type': 'Literal', 'name': "'_cf_chl'", 'range': [561, 561], 'children': []}, {'type': 'Literal', 'name': "'_cf_chl_opt'", 'range': [564, 564], 'children': []}, {'type': 'Literal', 'name': "'__cf_chl_rt_tk'", 'range': [567, 567], 'children': []}, {'type': 'Literal', 'name': "'cf-spinner-please-wait'", 'range': [570, 570], 'children': []}, {'type': 'Literal', 'name': "'cf-spinner-redirecting'", 'range': [573, 573], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfStatement', 'range': [578, 626], 'children': [{'type': 'Condition', 'name': 'Condition', 'range': [579, 591], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [580, 585], 'children': [{'type': 'Identifier', 'name': 'code', 'range': [579, 579], 'children': []}, {'type': 'ArrayExpression', 'name': 'ArrayExpression', 'range': [581, 585], 'children': [{'type': 'Literal', 'name': '403', 'range': [582, 582], 'children': []}, {'type': 'Literal', 'name': '503', 'range': [584, 584], 'children': []}]}]}, {'type': 'LogicalExpression', 'name': 'and', 'range': [586, 586], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [587, 590], 'children': [{'type': 'Identifier', 'name': 'server', 'range': [587, 587], 'children': []}, {'type': 'Literal', 'name': "'cloudflare'", 'range': [590, 590], 'children': []}]}]}]}, {'type': 'Block', 'name': 'Block', 'range': [592, 626], 'children': [{'type': 'Assignment', 'name': 'html', 'range': [593, 598], 'children': [{'type': 'Identifier', 'name': 'resp', 'range': [595, 595], 'children': []}, {'type': 'PropertyAccess', 'name': 'text', 'range': [596, 597], 'children': []}]}, {'type': 'Assignment', 'name': 'flags_found', 'range': [600, 610], 'children': [{'type': 'ListComprehension', 'name': 'ListComprehension', 'range': [602, 610], 'children': [{'type': 'Identifier', 'name': 'flag', 'range': [603, 603], 'children': []}, {'type': 'InKeyword', 'name': 'in', 'range': [604, 604], 'children': [{'type': 'Identifier', 'name': 'html', 'range': [605, 605], 'children': []}]}, {'type': 'ForKeyword', 'name': 'for', 'range': [606, 606], 'children': [{'type': 'Identifier', 'name': 'flag', 'range': [607, 607], 'children': []}, {'type': 'InKeyword', 'name': 'in', 'range': [608, 608], 'children': [{'type': 'Identifier', 'name': 'cloudflare_flags', 'range': [609, 609], 'children': []}]}]}]}]}, {'type': 'Assignment', 'name': 'any_flag_found', 'range': [612, 618], 'children': [{'type': 'CallExpression', 'name': 'any', 'range': [614, 617], 'children': [{'type': 'Identifier', 'name': 'flags_found', 'range': [616, 616], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfStatement', 'range': [620, 626], 'children': [{'type': 'Condition', 'name': 'Condition', 'range': [621, 621], 'children': [{'type': 'Identifier', 'name': 'any_flag_found', 'range': [621, 621], 'children': []}]}, {'type': 'Block', 'name': 'Block', 'range': [622, 626], 'children': [{'type': 'ReturnStatement', 'name': 'ReturnStatement', 'range': [624, 625], 'children': [{'type': 'Literal', 'name': 'True', 'range': [625, 625], 'children': []}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'ReturnStatement', 'range': [628, 629], 'children': [{'type': 'Literal', 'name': 'False', 'range': [629, 629], 'children': []}]}]}]}
2025-01-08 09:21:35,996 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:21:45,779 - INFO - Step 5 result: {'type': 'Program', 'name': 'find_links_in_file', 'range': [125, 210], 'children': [{'type': 'FunctionDecl', 'name': 'find_links_in_file', 'range': [125, 210], 'children': [{'type': 'FunctionSignature', 'name': 'find_links_in_file', 'range': [125, 138], 'children': [{'type': 'Keyword', 'name': 'def', 'range': [125, 128], 'children': []}, {'type': 'Identifier', 'name': 'find_links_in_file', 'range': [126, 142], 'children': []}, {'type': 'ParameterList', 'name': 'filename', 'range': [127, 131], 'children': [{'type': 'Parameter', 'name': 'filename', 'range': [128, 131], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [129, 131], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'List[str]', 'range': [132, 138], 'children': [{'type': 'Keyword', 'name': '->', 'range': [132, 134], 'children': []}, {'type': 'Type', 'name': 'List[str]', 'range': [134, 138], 'children': []}]}]}, {'type': 'FunctionBody', 'name': 'find_links_in_file', 'range': [139, 210], 'children': [{'type': 'Docstring', 'name': 'Find links in a file and return a list of URLs from text file.', 'range': [140, 142], 'children': []}, {'type': 'WithStatement', 'name': "with open(filename, mode='r', encoding='utf-8') as file:", 'range': [145, 160], 'children': [{'type': 'Keyword', 'name': 'with', 'range': [145, 149], 'children': []}, {'type': 'CallExpression', 'name': 'open', 'range': [146, 157], 'children': [{'type': 'Identifier', 'name': 'open', 'range': [146, 150], 'children': []}, {'type': 'ArgumentList', 'name': "filename, mode='r', encoding='utf-8'", 'range': [147, 157], 'children': [{'type': 'Argument', 'name': 'filename', 'range': [148, 149], 'children': []}, {'type': 'Argument', 'name': "mode='r'", 'range': [150, 153], 'children': []}, {'type': 'Argument', 'name': "encoding='utf-8'", 'range': [154, 157], 'children': []}]}]}, {'type': 'Keyword', 'name': 'as', 'range': [158, 160], 'children': []}, {'type': 'Identifier', 'name': 'file', 'range': [159, 160], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'readme = file.read()', 'range': [162, 169], 'children': [{'type': 'Identifier', 'name': 'readme', 'range': [162, 168], 'children': []}, {'type': 'CallExpression', 'name': 'file.read', 'range': [164, 168], 'children': [{'type': 'Identifier', 'name': 'read', 'range': [166, 168], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': "index_section = readme.find('## Index')", 'range': [170, 178], 'children': [{'type': 'Identifier', 'name': 'index_section', 'range': [170, 183], 'children': []}, {'type': 'CallExpression', 'name': 'readme.find', 'range': [172, 177], 'children': [{'type': 'Identifier', 'name': 'find', 'range': [174, 177], 'children': []}, {'type': 'Literal', 'name': "'## Index'", 'range': [176, 177], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if index_section == -1:', 'range': [179, 185], 'children': [{'type': 'Keyword', 'name': 'if', 'range': [179, 181], 'children': []}, {'type': 'BinaryExpression', 'name': 'index_section == -1', 'range': [180, 184], 'children': [{'type': 'Identifier', 'name': 'index_section', 'range': [180, 183], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [181, 183], 'children': []}, {'type': 'Literal', 'name': '-1', 'range': [183, 184], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': 'index_section = 0', 'range': [187, 190], 'children': [{'type': 'Identifier', 'name': 'index_section', 'range': [187, 190], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [189, 190], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'content = readme[index_section:]', 'range': [191, 198], 'children': [{'type': 'Identifier', 'name': 'content', 'range': [191, 198], 'children': []}, {'type': 'SliceExpression', 'name': 'readme[index_section:]', 'range': [193, 197], 'children': [{'type': 'Identifier', 'name': 'readme', 'range': [193, 194], 'children': []}, {'type': 'Slice', 'name': 'index_section:', 'range': [195, 197], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': 'links = find_links_in_text(content)', 'range': [200, 206], 'children': [{'type': 'Identifier', 'name': 'links', 'range': [200, 206], 'children': []}, {'type': 'CallExpression', 'name': 'find_links_in_text', 'range': [202, 205], 'children': [{'type': 'Identifier', 'name': 'find_links_in_text', 'range': [202, 205], 'children': []}, {'type': 'Identifier', 'name': 'content', 'range': [204, 205], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return links', 'range': [208, 210], 'children': [{'type': 'Keyword', 'name': 'return', 'range': [208, 210], 'children': []}, {'type': 'Identifier', 'name': 'links', 'range': [209, 210], 'children': []}]}]}]}]}
2025-01-08 09:21:45,779 - INFO - Completed main AST analysis flow
2025-01-08 09:21:45,780 - INFO - Successfully processed chunk
2025-01-08 09:21:46,983 - INFO - Step 5 result: {'type': 'Program', 'name': 'get_host_from_link', 'range': [362, 471], 'children': [{'type': 'FunctionDecl', 'name': 'get_host_from_link', 'range': [362, 471], 'children': [{'type': 'Parameter', 'name': 'link', 'range': [365, 367], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [371, 371], 'children': []}, {'type': 'Block', 'name': '', 'range': [373, 471], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [375, 387], 'children': [{'type': 'CallExpression', 'name': 'split', 'range': [377, 384], 'children': [{'type': 'Literal', 'name': "'://'", 'range': [381, 381], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [383, 383], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [385, 387], 'children': [{'type': 'Literal', 'name': '1', 'range': [386, 386], 'children': []}]}]}, {'type': 'IfStatement', 'name': '', 'range': [388, 394], 'children': [{'type': 'Condition', 'name': '', 'range': [389, 391], 'children': [{'type': 'BinaryExpression', 'name': 'InExpression', 'range': [389, 391], 'children': [{'type': 'Literal', 'name': "'://'", 'range': [389, 389], 'children': []}, {'type': 'Identifier', 'name': 'link', 'range': [391, 391], 'children': []}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [392, 394], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [393, 393], 'children': [{'type': 'Identifier', 'name': 'link', 'range': [393, 393], 'children': []}]}]}]}, {'type': 'Comment', 'name': '# Remove routes, arguments and anchors', 'range': [396, 403], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [404, 423], 'children': [{'type': 'Condition', 'name': '', 'range': [405, 407], 'children': [{'type': 'BinaryExpression', 'name': 'InExpression', 'range': [405, 407], 'children': [{'type': 'Literal', 'name': "'/'", 'range': [405, 405], 'children': []}, {'type': 'Identifier', 'name': 'host', 'range': [407, 407], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [409, 423], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [410, 422], 'children': [{'type': 'CallExpression', 'name': 'split', 'range': [412, 419], 'children': [{'type': 'Literal', 'name': "'/'", 'range': [416, 416], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [418, 418], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [420, 422], 'children': [{'type': 'Literal', 'name': '0', 'range': [421, 421], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [425, 444], 'children': [{'type': 'Condition', 'name': '', 'range': [426, 428], 'children': [{'type': 'BinaryExpression', 'name': 'InExpression', 'range': [426, 428], 'children': [{'type': 'Literal', 'name': "'?'", 'range': [426, 426], 'children': []}, {'type': 'Identifier', 'name': 'host', 'range': [428, 428], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [430, 444], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [431, 443], 'children': [{'type': 'CallExpression', 'name': 'split', 'range': [433, 440], 'children': [{'type': 'Literal', 'name': "'?'", 'range': [437, 437], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [439, 439], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [441, 443], 'children': [{'type': 'Literal', 'name': '0', 'range': [442, 442], 'children': []}]}]}]}]}, {'type': 'ElifStatement', 'name': '', 'range': [446, 465], 'children': [{'type': 'Condition', 'name': '', 'range': [447, 449], 'children': [{'type': 'BinaryExpression', 'name': 'InExpression', 'range': [447, 449], 'children': [{'type': 'Literal', 'name': "'#'", 'range': [447, 447], 'children': []}, {'type': 'Identifier', 'name': 'host', 'range': [449, 449], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [451, 465], 'children': [{'type': 'Assignment', 'name': 'host', 'range': [452, 464], 'children': [{'type': 'CallExpression', 'name': 'split', 'range': [454, 461], 'children': [{'type': 'Literal', 'name': "'#'", 'range': [458, 458], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [460, 460], 'children': []}]}, {'type': 'IndexAccess', 'name': '', 'range': [462, 464], 'children': [{'type': 'Literal', 'name': '0', 'range': [463, 463], 'children': []}]}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [467, 469], 'children': [{'type': 'Identifier', 'name': 'host', 'range': [468, 468], 'children': []}]}]}]}]}
2025-01-08 09:21:46,983 - INFO - Completed main AST analysis flow
2025-01-08 09:21:46,984 - INFO - Successfully processed chunk
2025-01-08 09:23:02,514 - INFO - Step 5 result: {'type': 'Program', 'name': 'has_cloudflare_protection', 'range': [472, 630], 'children': [{'type': 'FunctionDecl', 'name': 'has_cloudflare_protection', 'range': [472, 630], 'children': [{'type': 'Parameter', 'name': 'resp', 'range': [475, 477], 'children': []}, {'type': 'ReturnType', 'name': 'bool', 'range': [481, 481], 'children': []}, {'type': 'Docstring', 'name': 'Docstring', 'range': [484, 486], 'children': []}, {'type': 'Assignment', 'name': 'code', 'range': [489, 494], 'children': [{'type': 'Identifier', 'name': 'resp', 'range': [491, 491], 'children': []}, {'type': 'PropertyAccess', 'name': 'status_code', 'range': [492, 493], 'children': []}]}, {'type': 'Assignment', 'name': 'server', 'range': [495, 514], 'children': [{'type': 'Identifier', 'name': 'resp', 'range': [497, 497], 'children': []}, {'type': 'PropertyAccess', 'name': 'headers', 'range': [498, 499], 'children': []}, {'type': 'CallExpression', 'name': 'get', 'range': [500, 504], 'children': [{'type': 'Literal', 'name': "'Server'", 'range': [503, 503], 'children': []}]}, {'type': 'LogicalExpression', 'name': 'or', 'range': [505, 505], 'children': [{'type': 'Identifier', 'name': 'resp', 'range': [506, 506], 'children': []}, {'type': 'PropertyAccess', 'name': 'headers', 'range': [507, 508], 'children': []}, {'type': 'CallExpression', 'name': 'get', 'range': [509, 513], 'children': [{'type': 'Literal', 'name': "'server'", 'range': [512, 512], 'children': []}]}]}]}, {'type': 'Assignment', 'name': 'cloudflare_flags', 'range': [515, 575], 'children': [{'type': 'ArrayExpression', 'name': 'ArrayExpression', 'range': [517, 575], 'children': [{'type': 'Literal', 'name': "'403 Forbidden'", 'range': [519, 519], 'children': []}, {'type': 'Literal', 'name': "'cloudflare'", 'range': [522, 522], 'children': []}, {'type': 'Literal', 'name': "'Cloudflare'", 'range': [525, 525], 'children': []}, {'type': 'Literal', 'name': "'Security check'", 'range': [528, 528], 'children': []}, {'type': 'Literal', 'name': "'Please Wait... | Cloudflare'", 'range': [531, 531], 'children': []}, {'type': 'Literal', 'name': "'We are checking your browser...'", 'range': [534, 534], 'children': []}, {'type': 'Literal', 'name': "'Please stand by, while we are checking your browser...'", 'range': [537, 537], 'children': []}, {'type': 'Literal', 'name': "'Checking your browser before accessing'", 'range': [540, 540], 'children': []}, {'type': 'Literal', 'name': "'This process is automatic.'", 'range': [543, 543], 'children': []}, {'type': 'Literal', 'name': "'Your browser will redirect to your requested content shortly.'", 'range': [546, 546], 'children': []}, {'type': 'Literal', 'name': "'Please allow up to 5 seconds'", 'range': [549, 549], 'children': []}, {'type': 'Literal', 'name': "'DDoS protection by'", 'range': [552, 552], 'children': []}, {'type': 'Literal', 'name': "'Ray ID:'", 'range': [555, 555], 'children': []}, {'type': 'Literal', 'name': "'Cloudflare Ray ID:'", 'range': [558, 558], 'children': []}, {'type': 'Literal', 'name': "'_cf_chl'", 'range': [561, 561], 'children': []}, {'type': 'Literal', 'name': "'_cf_chl_opt'", 'range': [564, 564], 'children': []}, {'type': 'Literal', 'name': "'__cf_chl_rt_tk'", 'range': [567, 567], 'children': []}, {'type': 'Literal', 'name': "'cf-spinner-please-wait'", 'range': [570, 570], 'children': []}, {'type': 'Literal', 'name': "'cf-spinner-redirecting'", 'range': [573, 573], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfStatement', 'range': [578, 626], 'children': [{'type': 'Condition', 'name': 'Condition', 'range': [579, 591], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [580, 585], 'children': [{'type': 'Identifier', 'name': 'code', 'range': [579, 579], 'children': []}, {'type': 'ArrayExpression', 'name': 'ArrayExpression', 'range': [581, 585], 'children': [{'type': 'Literal', 'name': '403', 'range': [582, 582], 'children': []}, {'type': 'Literal', 'name': '503', 'range': [584, 584], 'children': []}]}]}, {'type': 'LogicalExpression', 'name': 'and', 'range': [586, 586], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [587, 590], 'children': [{'type': 'Identifier', 'name': 'server', 'range': [587, 587], 'children': []}, {'type': 'Literal', 'name': "'cloudflare'", 'range': [590, 590], 'children': []}]}]}]}, {'type': 'Block', 'name': 'Block', 'range': [592, 626], 'children': [{'type': 'Assignment', 'name': 'html', 'range': [593, 598], 'children': [{'type': 'Identifier', 'name': 'resp', 'range': [595, 595], 'children': []}, {'type': 'PropertyAccess', 'name': 'text', 'range': [596, 597], 'children': []}]}, {'type': 'Assignment', 'name': 'flags_found', 'range': [600, 610], 'children': [{'type': 'ListComprehension', 'name': 'ListComprehension', 'range': [602, 610], 'children': [{'type': 'Identifier', 'name': 'flag', 'range': [603, 603], 'children': []}, {'type': 'InKeyword', 'name': 'in', 'range': [604, 604], 'children': [{'type': 'Identifier', 'name': 'html', 'range': [605, 605], 'children': []}]}, {'type': 'ForKeyword', 'name': 'for', 'range': [606, 606], 'children': [{'type': 'Identifier', 'name': 'flag', 'range': [607, 607], 'children': []}, {'type': 'InKeyword', 'name': 'in', 'range': [608, 608], 'children': [{'type': 'Identifier', 'name': 'cloudflare_flags', 'range': [609, 609], 'children': []}]}]}]}]}, {'type': 'Assignment', 'name': 'any_flag_found', 'range': [612, 618], 'children': [{'type': 'CallExpression', 'name': 'any', 'range': [614, 617], 'children': [{'type': 'Identifier', 'name': 'flags_found', 'range': [616, 616], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfStatement', 'range': [620, 626], 'children': [{'type': 'Condition', 'name': 'Condition', 'range': [621, 621], 'children': [{'type': 'Identifier', 'name': 'any_flag_found', 'range': [621, 621], 'children': []}]}, {'type': 'Block', 'name': 'Block', 'range': [622, 626], 'children': [{'type': 'ReturnStatement', 'name': 'ReturnStatement', 'range': [624, 625], 'children': [{'type': 'Literal', 'name': 'True', 'range': [625, 625], 'children': []}]}]}]}]}]}, {'type': 'ReturnStatement', 'name': 'ReturnStatement', 'range': [628, 629], 'children': [{'type': 'Literal', 'name': 'False', 'range': [629, 629], 'children': []}]}]}]}
2025-01-08 09:23:02,515 - INFO - Completed main AST analysis flow
2025-01-08 09:23:02,516 - INFO - Successfully processed chunk
2025-01-08 09:23:02,585 - INFO - Starting code generation from AST
2025-01-08 09:53:04,701 - ERROR - Error in get_code_from_ast: Expecting value: line 30 column 1 (char 29)
2025-01-08 09:53:04,702 - INFO - Starting static code similarity comparison
2025-01-08 09:53:04,707 - INFO - Static similarity result: {'final_score': 20.33, 'length_similarity': 0.0, 'token_similarity': 0.0, 'structure_similarity': 0.0, 'function_similarity': 100, 'complexity_similarity': 3.33, 'variable_similarity': 100}
