2025-01-08 10:27:27,605 - INFO - Processing sample 192
2025-01-08 10:27:27,605 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 10:27:33,303 - INFO - Successfully split code into 4 top-level declarations
2025-01-08 10:27:33,304 - INFO - Processing chunk #0 (size=185 chars, start_index=0)
2025-01-08 10:27:33,304 - INFO - Processing chunk with 185 chars starting at index 0
2025-01-08 10:27:33,304 - INFO - Processing chunk #1 (size=134 chars, start_index=40)
2025-01-08 10:27:33,304 - INFO - Starting main AST analysis flow
2025-01-08 10:27:33,305 - INFO - Processing chunk #2 (size=2308 chars, start_index=68)
2025-01-08 10:27:33,305 - INFO - Processing chunk with 134 chars starting at index 40
2025-01-08 10:27:33,305 - INFO - Tokenized code into 40 tokens
2025-01-08 10:27:33,305 - INFO - Processing chunk #3 (size=1444 chars, start_index=464)
2025-01-08 10:27:33,306 - INFO - Processing chunk with 2308 chars starting at index 68
2025-01-08 10:27:33,306 - INFO - Starting main AST analysis flow
2025-01-08 10:27:33,306 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:33,306 - INFO - Processing chunk with 1444 chars starting at index 464
2025-01-08 10:27:33,306 - INFO - Starting main AST analysis flow
2025-01-08 10:27:33,306 - INFO - Tokenized code into 28 tokens
2025-01-08 10:27:33,307 - INFO - Starting main AST analysis flow
2025-01-08 10:27:33,308 - INFO - Tokenized code into 396 tokens
2025-01-08 10:27:33,308 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:33,308 - INFO - Tokenized code into 245 tokens
2025-01-08 10:27:33,309 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:33,312 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:39,674 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 39], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [8, 12], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [14, 28], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [29, 37], 'children': []}]}
2025-01-08 10:27:39,674 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:39,733 - INFO - Step 1 result: {'type': 'Program', 'name': 'Operation', 'range': [40, 67], 'children': [{'type': 'EnumDeclaration', 'name': 'Operation', 'range': [40, 67], 'children': [{'type': 'EnumMember', 'name': 'ADD', 'range': [47, 49], 'children': []}, {'type': 'EnumMember', 'name': 'SUBTRACT', 'range': [51, 53], 'children': []}, {'type': 'EnumMember', 'name': 'MULTIPLY', 'range': [55, 57], 'children': []}, {'type': 'EnumMember', 'name': 'DIVIDE', 'range': [59, 61], 'children': []}, {'type': 'EnumMember', 'name': 'POWER', 'range': [63, 65], 'children': []}]}]}
2025-01-08 10:27:39,746 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:40,939 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [464, 708], 'children': [{'type': 'ClassDeclaration', 'name': 'CountItemsBlock', 'range': [464, 470], 'children': []}, {'type': 'ClassDeclaration', 'name': 'Input', 'range': [471, 477], 'children': []}, {'type': 'VariableDeclaration', 'name': 'collection', 'range': [478, 496], 'children': []}, {'type': 'ClassDeclaration', 'name': 'Output', 'range': [498, 504], 'children': []}, {'type': 'VariableDeclaration', 'name': 'count', 'range': [505, 515], 'children': []}, {'type': 'FunctionDeclaration', 'name': '__init__', 'range': [517, 598], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'run', 'range': [600, 708], 'children': []}]}
2025-01-08 10:27:40,945 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:43,014 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [68, 463], 'children': [{'type': 'ClassDeclaration', 'name': 'CalculatorBlock', 'range': [68, 74], 'children': []}, {'type': 'ClassDeclaration', 'name': 'Input', 'range': [75, 81], 'children': []}, {'type': 'VariableDeclaration', 'name': 'operation', 'range': [82, 100], 'children': []}, {'type': 'VariableDeclaration', 'name': 'a', 'range': [101, 117], 'children': []}, {'type': 'VariableDeclaration', 'name': 'b', 'range': [118, 134], 'children': []}, {'type': 'VariableDeclaration', 'name': 'round_result', 'range': [135, 153], 'children': []}, {'type': 'ClassDeclaration', 'name': 'Output', 'range': [155, 161], 'children': []}, {'type': 'VariableDeclaration', 'name': 'result', 'range': [162, 172], 'children': []}, {'type': 'FunctionDeclaration', 'name': '__init__', 'range': [174, 273], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'run', 'range': [275, 463], 'children': []}]}
2025-01-08 10:27:43,014 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:53,809 - INFO - Step 2 result: {'type': 'Program', 'name': 'Operation', 'range': [40, 67], 'children': [{'type': 'EnumDeclaration', 'name': 'Operation', 'range': [40, 67], 'children': [{'type': 'EnumMember', 'name': 'ADD', 'range': [47, 49], 'children': [{'type': 'StringLiteral', 'value': '"Add"', 'range': [49, 49], 'children': []}]}, {'type': 'EnumMember', 'name': 'SUBTRACT', 'range': [51, 53], 'children': [{'type': 'StringLiteral', 'value': '"Subtract"', 'range': [53, 53], 'children': []}]}, {'type': 'EnumMember', 'name': 'MULTIPLY', 'range': [55, 57], 'children': [{'type': 'StringLiteral', 'value': '"Multiply"', 'range': [57, 57], 'children': []}]}, {'type': 'EnumMember', 'name': 'DIVIDE', 'range': [59, 61], 'children': [{'type': 'StringLiteral', 'value': '"Divide"', 'range': [61, 61], 'children': []}]}, {'type': 'EnumMember', 'name': 'POWER', 'range': [63, 65], 'children': [{'type': 'StringLiteral', 'value': '"Power"', 'range': [65, 65], 'children': []}]}]}]}
2025-01-08 10:27:53,835 - INFO - Starting Step 3: AST simplification
2025-01-08 10:28:08,223 - INFO - Step 3 result: {'type': 'Program', 'name': 'Operation', 'range': [40, 67], 'children': [{'type': 'EnumDeclaration', 'name': 'Operation', 'range': [40, 67], 'children': [{'type': 'EnumMember', 'name': 'ADD', 'range': [47, 49], 'children': [{'type': 'StringLiteral', 'value': '"Add"', 'range': [49, 49], 'children': []}]}, {'type': 'EnumMember', 'name': 'SUBTRACT', 'range': [51, 53], 'children': [{'type': 'StringLiteral', 'value': '"Subtract"', 'range': [53, 53], 'children': []}]}, {'type': 'EnumMember', 'name': 'MULTIPLY', 'range': [55, 57], 'children': [{'type': 'StringLiteral', 'value': '"Multiply"', 'range': [57, 57], 'children': []}]}, {'type': 'EnumMember', 'name': 'DIVIDE', 'range': [59, 61], 'children': [{'type': 'StringLiteral', 'value': '"Divide"', 'range': [61, 61], 'children': []}]}, {'type': 'EnumMember', 'name': 'POWER', 'range': [63, 65], 'children': [{'type': 'StringLiteral', 'value': '"Power"', 'range': [65, 65], 'children': []}]}]}]}
2025-01-08 10:28:08,223 - INFO - Starting Step 4: AST normalization
2025-01-08 10:28:08,776 - INFO - Step 2 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportKeyword', 'name': 'import', 'range': [0, 0], 'children': []}, {'type': 'Identifier', 'name': 'operator', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [3, 3], 'children': []}, {'type': 'Identifier', 'name': 'enum', 'range': [4, 4], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [5, 5], 'children': []}, {'type': 'Identifier', 'name': 'Enum', 'range': [6, 6], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [8, 12], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [8, 8], 'children': []}, {'type': 'Identifier', 'name': 'typing', 'range': [9, 9], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [10, 10], 'children': []}, {'type': 'Identifier', 'name': 'Any', 'range': [11, 11], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [14, 28], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [14, 14], 'children': []}, {'type': 'Identifier', 'name': 'backend', 'range': [15, 15], 'children': []}, {'type': 'Dot', 'name': '.', 'range': [16, 16], 'children': []}, {'type': 'Identifier', 'name': 'data', 'range': [17, 17], 'children': []}, {'type': 'Dot', 'name': '.', 'range': [18, 18], 'children': []}, {'type': 'Identifier', 'name': 'block', 'range': [19, 19], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [20, 20], 'children': []}, {'type': 'Identifier', 'name': 'Block', 'range': [21, 21], 'children': []}, {'type': 'Comma', 'name': ',', 'range': [22, 22], 'children': []}, {'type': 'Identifier', 'name': 'BlockCategory', 'range': [23, 23], 'children': []}, {'type': 'Comma', 'name': ',', 'range': [24, 24], 'children': []}, {'type': 'Identifier', 'name': 'BlockOutput', 'range': [25, 25], 'children': []}, {'type': 'Comma', 'name': ',', 'range': [26, 26], 'children': []}, {'type': 'Identifier', 'name': 'BlockSchema', 'range': [27, 27], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [29, 37], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [29, 29], 'children': []}, {'type': 'Identifier', 'name': 'backend', 'range': [30, 30], 'children': []}, {'type': 'Dot', 'name': '.', 'range': [31, 31], 'children': []}, {'type': 'Identifier', 'name': 'data', 'range': [32, 32], 'children': []}, {'type': 'Dot', 'name': '.', 'range': [33, 33], 'children': []}, {'type': 'Identifier', 'name': 'model', 'range': [34, 34], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [35, 35], 'children': []}, {'type': 'Identifier', 'name': 'SchemaField', 'range': [36, 36], 'children': []}]}]}
2025-01-08 10:28:08,781 - INFO - Starting Step 3: AST simplification
2025-01-08 10:28:19,611 - INFO - Step 4 result: {'type': 'Program', 'name': 'Operation', 'range': [40, 67], 'children': [{'type': 'EnumDeclaration', 'name': 'Operation', 'range': [40, 67], 'children': [{'type': 'EnumMember', 'name': 'ADD', 'range': [47, 49], 'children': [{'type': 'Literal', 'value': '"Add"', 'range': [49, 49], 'children': []}]}, {'type': 'EnumMember', 'name': 'SUBTRACT', 'range': [51, 53], 'children': [{'type': 'Literal', 'value': '"Subtract"', 'range': [53, 53], 'children': []}]}, {'type': 'EnumMember', 'name': 'MULTIPLY', 'range': [55, 57], 'children': [{'type': 'Literal', 'value': '"Multiply"', 'range': [57, 57], 'children': []}]}, {'type': 'EnumMember', 'name': 'DIVIDE', 'range': [59, 61], 'children': [{'type': 'Literal', 'value': '"Divide"', 'range': [61, 61], 'children': []}]}, {'type': 'EnumMember', 'name': 'POWER', 'range': [63, 65], 'children': [{'type': 'Literal', 'value': '"Power"', 'range': [65, 65], 'children': []}]}]}]}
2025-01-08 10:28:19,611 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:28:30,552 - INFO - Step 5 result: {'type': 'Program', 'name': 'Operation', 'range': [40, 67], 'children': [{'type': 'EnumDeclaration', 'name': 'Operation', 'range': [40, 67], 'children': [{'type': 'EnumMember', 'name': 'ADD', 'range': [47, 49], 'children': [{'type': 'Literal', 'value': '"Add"', 'range': [49, 49], 'children': []}]}, {'type': 'EnumMember', 'name': 'SUBTRACT', 'range': [51, 53], 'children': [{'type': 'Literal', 'value': '"Subtract"', 'range': [53, 53], 'children': []}]}, {'type': 'EnumMember', 'name': 'MULTIPLY', 'range': [55, 57], 'children': [{'type': 'Literal', 'value': '"Multiply"', 'range': [57, 57], 'children': []}]}, {'type': 'EnumMember', 'name': 'DIVIDE', 'range': [59, 61], 'children': [{'type': 'Literal', 'value': '"Divide"', 'range': [61, 61], 'children': []}]}, {'type': 'EnumMember', 'name': 'POWER', 'range': [63, 65], 'children': [{'type': 'Literal', 'value': '"Power"', 'range': [65, 65], 'children': []}]}]}]}
2025-01-08 10:28:30,552 - INFO - Completed main AST analysis flow
2025-01-08 10:28:30,553 - INFO - Successfully processed chunk
2025-01-08 10:28:36,751 - INFO - Step 3 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportKeyword', 'name': 'import', 'range': [0, 0], 'children': []}, {'type': 'Identifier', 'name': 'operator', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [3, 3], 'children': []}, {'type': 'Identifier', 'name': 'enum', 'range': [4, 4], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [5, 5], 'children': []}, {'type': 'Identifier', 'name': 'Enum', 'range': [6, 6], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [8, 12], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [8, 8], 'children': []}, {'type': 'Identifier', 'name': 'typing', 'range': [9, 9], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [10, 10], 'children': []}, {'type': 'Identifier', 'name': 'Any', 'range': [11, 11], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [14, 28], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [14, 14], 'children': []}, {'type': 'Identifier', 'name': 'backend', 'range': [15, 15], 'children': []}, {'type': 'Identifier', 'name': 'data', 'range': [17, 17], 'children': []}, {'type': 'Identifier', 'name': 'block', 'range': [19, 19], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [20, 20], 'children': []}, {'type': 'Identifier', 'name': 'Block', 'range': [21, 21], 'children': []}, {'type': 'Identifier', 'name': 'BlockCategory', 'range': [23, 23], 'children': []}, {'type': 'Identifier', 'name': 'BlockOutput', 'range': [25, 25], 'children': []}, {'type': 'Identifier', 'name': 'BlockSchema', 'range': [27, 27], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [29, 37], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [29, 29], 'children': []}, {'type': 'Identifier', 'name': 'backend', 'range': [30, 30], 'children': []}, {'type': 'Identifier', 'name': 'data', 'range': [32, 32], 'children': []}, {'type': 'Identifier', 'name': 'model', 'range': [34, 34], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [35, 35], 'children': []}, {'type': 'Identifier', 'name': 'SchemaField', 'range': [36, 36], 'children': []}]}]}
2025-01-08 10:28:36,751 - INFO - Starting Step 4: AST normalization
2025-01-08 10:28:52,592 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [464, 708], 'children': [{'type': 'ClassDeclaration', 'name': 'CountItemsBlock', 'range': [464, 470], 'children': [{'type': 'ClassBody', 'name': '', 'range': [470, 470], 'children': []}]}, {'type': 'ClassDeclaration', 'name': 'Input', 'range': [471, 477], 'children': [{'type': 'ClassBody', 'name': '', 'range': [477, 477], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'collection', 'range': [478, 496], 'children': [{'type': 'TypeAnnotation', 'name': 'Any', 'range': [480, 480], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [481, 481], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [482, 495], 'children': [{'type': 'Argument', 'name': 'description', 'range': [485, 487], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [490, 492], 'children': []}]}]}]}, {'type': 'ClassDeclaration', 'name': 'Output', 'range': [498, 504], 'children': [{'type': 'ClassBody', 'name': '', 'range': [504, 504], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'count', 'range': [505, 515], 'children': [{'type': 'TypeAnnotation', 'name': 'int', 'range': [507, 507], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [508, 508], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [509, 514], 'children': [{'type': 'Argument', 'name': 'description', 'range': [511, 513], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': '__init__', 'range': [517, 598], 'children': [{'type': 'ParameterList', 'name': '', 'range': [519, 521], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [520, 520], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [522, 598], 'children': [{'type': 'SuperCall', 'name': 'super', 'range': [524, 529], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [532, 532], 'children': [{'type': 'StringLiteral', 'name': '"3c9c2f42-b0c3-435f-ba35-05f7a25c772a"', 'range': [533, 533], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [537, 537], 'children': [{'type': 'MemberExpression', 'name': 'CountItemsBlock.Input', 'range': [538, 541], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [544, 544], 'children': [{'type': 'MemberExpression', 'name': 'CountItemsBlock.Output', 'range': [545, 548], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [551, 551], 'children': [{'type': 'StringLiteral', 'name': '"Counts the number of items in a collection."', 'range': [552, 552], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [556, 556], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [557, 561], 'children': [{'type': 'Property', 'name': 'BlockCategory.LOGIC', 'range': [558, 560], 'children': []}]}]}, {'type': 'Assignment', 'name': '=', 'range': [565, 565], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [566, 580], 'children': [{'type': 'Property', 'name': '"collection"', 'range': [567, 567], 'children': []}, {'type': 'ArrayLiteral', 'name': '', 'range': [569, 579], 'children': [{'type': 'NumberLiteral', 'name': '1', 'range': [570, 570], 'children': []}, {'type': 'NumberLiteral', 'name': '2', 'range': [572, 572], 'children': []}, {'type': 'NumberLiteral', 'name': '3', 'range': [574, 574], 'children': []}, {'type': 'NumberLiteral', 'name': '4', 'range': [576, 576], 'children': []}, {'type': 'NumberLiteral', 'name': '5', 'range': [578, 578], 'children': []}]}]}]}, {'type': 'Assignment', 'name': '=', 'range': [584, 584], 'children': [{'type': 'ArrayLiteral', 'name': '', 'range': [585, 594], 'children': [{'type': 'TupleLiteral', 'name': '', 'range': [587, 591], 'children': [{'type': 'StringLiteral', 'name': '"count"', 'range': [588, 588], 'children': []}, {'type': 'NumberLiteral', 'name': '5', 'range': [590, 590], 'children': []}]}]}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'run', 'range': [600, 708], 'children': [{'type': 'ParameterList', 'name': '', 'range': [602, 612], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [603, 603], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [605, 605], 'children': [{'type': 'TypeAnnotation', 'name': 'Input', 'range': [607, 607], 'children': []}]}, {'type': 'Parameter', 'name': 'kwargs', 'range': [611, 611], 'children': []}]}, {'type': 'ReturnTypeAnnotation', 'name': 'BlockOutput', 'range': [615, 615], 'children': []}, {'type': 'FunctionBody', 'name': '', 'range': [617, 708], 'children': [{'type': 'Assignment', 'name': '=', 'range': [619, 619], 'children': [{'type': 'MemberExpression', 'name': 'input_data.collection', 'range': [620, 622], 'children': []}]}, {'type': 'TryStatement', 'name': '', 'range': [625, 707], 'children': [{'type': 'Block', 'name': '', 'range': [626, 689], 'children': [{'type': 'IfStatement', 'name': '', 'range': [628, 682], 'children': [{'type': 'Condition', 'name': '', 'range': [629, 644], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [629, 644], 'children': [{'type': 'Argument', 'name': 'collection', 'range': [631, 631], 'children': []}, {'type': 'Argument', 'name': '', 'range': [633, 643], 'children': [{'type': 'StringLiteral', 'name': 'str', 'range': [634, 634], 'children': []}, {'type': 'StringLiteral', 'name': 'list', 'range': [636, 636], 'children': []}, {'type': 'StringLiteral', 'name': 'tuple', 'range': [638, 638], 'children': []}, {'type': 'StringLiteral', 'name': 'set', 'range': [640, 640], 'children': []}, {'type': 'StringLiteral', 'name': 'dict', 'range': [642, 642], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [645, 653], 'children': [{'type': 'Assignment', 'name': '=', 'range': [648, 648], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [649, 652], 'children': [{'type': 'Argument', 'name': 'collection', 'range': [651, 651], 'children': []}]}]}]}, {'type': 'ElseIfStatement', 'name': '', 'range': [654, 673], 'children': [{'type': 'Condition', 'name': '', 'range': [655, 661], 'children': [{'type': 'CallExpression', 'name': 'hasattr', 'range': [655, 661], 'children': [{'type': 'Argument', 'name': 'collection', 'range': [657, 657], 'children': []}, {'type': 'Argument', 'name': '"__iter__"', 'range': [659, 659], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [662, 673], 'children': [{'type': 'Assignment', 'name': '=', 'range': [664, 664], 'children': [{'type': 'CallExpression', 'name': 'sum', 'range': [665, 672], 'children': [{'type': 'Argument', 'name': '1', 'range': [667, 667], 'children': []}, {'type': 'ForStatement', 'name': '', 'range': [668, 671], 'children': [{'type': 'VariableDeclaration', 'name': '_', 'range': [669, 669], 'children': []}, {'type': 'Expression', 'name': 'collection', 'range': [671, 671], 'children': []}]}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [674, 682], 'children': [{'type': 'Block', 'name': '', 'range': [675, 682], 'children': [{'type': 'ThrowStatement', 'name': '', 'range': [677, 681], 'children': [{'type': 'NewExpression', 'name': 'ValueError', 'range': [678, 681], 'children': [{'type': 'Argument', 'name': '"Input is not a countable collection"', 'range': [680, 680], 'children': []}]}]}]}]}]}, {'type': 'YieldStatement', 'name': '', 'range': [684, 688], 'children': [{'type': 'StringLiteral', 'name': '"count"', 'range': [685, 685], 'children': []}, {'type': 'Expression', 'name': 'count', 'range': [687, 687], 'children': []}]}]}, {'type': 'CatchClause', 'name': '', 'range': [690, 707], 'children': [{'type': 'Block', 'name': '', 'range': [691, 707], 'children': [{'type': 'YieldStatement', 'name': '', 'range': [694, 698], 'children': [{'type': 'StringLiteral', 'name': '"count"', 'range': [695, 695], 'children': []}, {'type': 'UnaryExpression', 'name': '-', 'range': [697, 697], 'children': [{'type': 'NumberLiteral', 'name': '1', 'range': [698, 698], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:28:52,592 - INFO - Starting Step 3: AST simplification
2025-01-08 10:28:56,322 - INFO - Step 4 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportKeyword', 'name': 'import', 'range': [0, 0], 'children': []}, {'type': 'Identifier', 'name': 'operator', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [3, 3], 'children': []}, {'type': 'Identifier', 'name': 'enum', 'range': [4, 4], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [5, 5], 'children': []}, {'type': 'Identifier', 'name': 'Enum', 'range': [6, 6], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [8, 12], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [8, 8], 'children': []}, {'type': 'Identifier', 'name': 'typing', 'range': [9, 9], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [10, 10], 'children': []}, {'type': 'Identifier', 'name': 'Any', 'range': [11, 11], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [14, 28], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [14, 14], 'children': []}, {'type': 'Identifier', 'name': 'backend', 'range': [15, 15], 'children': []}, {'type': 'Identifier', 'name': 'data', 'range': [17, 17], 'children': []}, {'type': 'Identifier', 'name': 'block', 'range': [19, 19], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [20, 20], 'children': []}, {'type': 'Identifier', 'name': 'Block', 'range': [21, 21], 'children': []}, {'type': 'Identifier', 'name': 'BlockCategory', 'range': [23, 23], 'children': []}, {'type': 'Identifier', 'name': 'BlockOutput', 'range': [25, 25], 'children': []}, {'type': 'Identifier', 'name': 'BlockSchema', 'range': [27, 27], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [29, 37], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [29, 29], 'children': []}, {'type': 'Identifier', 'name': 'backend', 'range': [30, 30], 'children': []}, {'type': 'Identifier', 'name': 'data', 'range': [32, 32], 'children': []}, {'type': 'Identifier', 'name': 'model', 'range': [34, 34], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [35, 35], 'children': []}, {'type': 'Identifier', 'name': 'SchemaField', 'range': [36, 36], 'children': []}]}]}
2025-01-08 10:28:56,323 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:28:58,439 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [68, 463], 'children': [{'type': 'ClassDeclaration', 'name': 'CalculatorBlock', 'range': [68, 74], 'children': [{'type': 'Inheritance', 'name': 'Block', 'range': [70, 72], 'children': []}]}, {'type': 'ClassDeclaration', 'name': 'Input', 'range': [75, 81], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [77, 79], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'operation', 'range': [82, 100], 'children': [{'type': 'TypeAnnotation', 'name': 'Operation', 'range': [83, 84], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [85, 85], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [86, 99], 'children': [{'type': 'Argument', 'name': 'description', 'range': [89, 91], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [94, 96], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'a', 'range': [101, 117], 'children': [{'type': 'TypeAnnotation', 'name': 'float', 'range': [102, 103], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [104, 104], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [105, 116], 'children': [{'type': 'Argument', 'name': 'description', 'range': [108, 110], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [112, 114], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'b', 'range': [118, 134], 'children': [{'type': 'TypeAnnotation', 'name': 'float', 'range': [119, 120], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [121, 121], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [122, 133], 'children': [{'type': 'Argument', 'name': 'description', 'range': [125, 127], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [129, 131], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'round_result', 'range': [135, 153], 'children': [{'type': 'TypeAnnotation', 'name': 'bool', 'range': [136, 137], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [138, 138], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [139, 152], 'children': [{'type': 'Argument', 'name': 'description', 'range': [142, 144], 'children': []}, {'type': 'Argument', 'name': 'default', 'range': [147, 149], 'children': []}]}]}]}, {'type': 'ClassDeclaration', 'name': 'Output', 'range': [155, 161], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [157, 159], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'result', 'range': [162, 172], 'children': [{'type': 'TypeAnnotation', 'name': 'float', 'range': [163, 164], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [165, 165], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [166, 171], 'children': [{'type': 'Argument', 'name': 'description', 'range': [168, 170], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': '__init__', 'range': [174, 273], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [177, 178], 'children': []}, {'type': 'SuperCall', 'name': 'super', 'range': [181, 185], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [189, 189], 'children': [{'type': 'StringLiteral', 'name': '"b1ab9b19-67a6-406d-abf5-2dba76d00c79"', 'range': [190, 190], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [194, 194], 'children': [{'type': 'MemberExpression', 'name': 'CalculatorBlock.Input', 'range': [195, 197], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [201, 201], 'children': [{'type': 'MemberExpression', 'name': 'CalculatorBlock.Output', 'range': [202, 204], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [208, 208], 'children': [{'type': 'StringLiteral', 'name': '"Performs a mathematical operation on two numbers."', 'range': [209, 209], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [213, 213], 'children': [{'type': 'ObjectLiteral', 'name': '{BlockCategory.LOGIC}', 'range': [214, 218], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [222, 222], 'children': [{'type': 'ObjectLiteral', 'name': '{"operation": Operation.ADD.value, "a": 10.0, "b": 5.0, "round_result": False}', 'range': [223, 253], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [257, 257], 'children': [{'type': 'ArrayLiteral', 'name': '[("result", 15.0)]', 'range': [258, 269], 'children': []}]}]}, {'type': 'FunctionDeclaration', 'name': 'run', 'range': [275, 463], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [278, 279], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [280, 281], 'children': [{'type': 'TypeAnnotation', 'name': 'Input', 'range': [282, 283], 'children': []}]}, {'type': 'Parameter', 'name': 'kwargs', 'range': [286, 287], 'children': []}, {'type': 'ReturnType', 'name': 'BlockOutput', 'range': [290, 291], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [294, 294], 'children': [{'type': 'MemberExpression', 'name': 'input_data.operation', 'range': [295, 297], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [300, 300], 'children': [{'type': 'MemberExpression', 'name': 'input_data.a', 'range': [301, 303], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [306, 306], 'children': [{'type': 'MemberExpression', 'name': 'input_data.b', 'range': [307, 309], 'children': []}]}, {'type': 'ObjectLiteral', 'name': '{Operation.ADD: operator.add, Operation.SUBTRACT: operator.sub, Operation.MULTIPLY: operator.mul, Operation.DIVIDE: operator.truediv, Operation.POWER: operator.pow}', 'range': [314, 361], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [365, 365], 'children': [{'type': 'MemberExpression', 'name': 'operations[operation]', 'range': [366, 369], 'children': []}]}, {'type': 'TryStatement', 'name': 'try', 'range': [372, 463], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [375, 394], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [377, 378], 'children': [{'type': 'MemberExpression', 'name': 'operation', 'range': [376, 376], 'children': []}, {'type': 'MemberExpression', 'name': 'Operation.DIVIDE', 'range': [379, 381], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [384, 385], 'children': [{'type': 'MemberExpression', 'name': 'b', 'range': [383, 383], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [386, 386], 'children': []}]}, {'type': 'ThrowStatement', 'name': 'raise', 'range': [389, 393], 'children': [{'type': 'NewExpression', 'name': 'ZeroDivisionError', 'range': [390, 392], 'children': []}]}]}, {'type': 'Assignment', 'name': '=', 'range': [397, 397], 'children': [{'type': 'CallExpression', 'name': 'op_func', 'range': [398, 403], 'children': [{'type': 'Identifier', 'name': 'a', 'range': [400, 400], 'children': []}, {'type': 'Identifier', 'name': 'b', 'range': [402, 402], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [406, 418], 'children': [{'type': 'MemberExpression', 'name': 'input_data.round_result', 'range': [407, 409], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [413, 413], 'children': [{'type': 'CallExpression', 'name': 'round', 'range': [414, 417], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [416, 416], 'children': []}]}]}]}, {'type': 'YieldExpression', 'name': 'yield', 'range': [420, 424], 'children': [{'type': 'StringLiteral', 'name': '"result"', 'range': [421, 421], 'children': []}, {'type': 'Identifier', 'name': 'result', 'range': [423, 423], 'children': []}]}, {'type': 'CatchClause', 'name': 'except', 'range': [426, 444], 'children': [{'type': 'Identifier', 'name': 'ZeroDivisionError', 'range': [427, 427], 'children': []}, {'type': 'YieldExpression', 'name': 'yield', 'range': [430, 436], 'children': [{'type': 'StringLiteral', 'name': '"result"', 'range': [431, 431], 'children': []}, {'type': 'CallExpression', 'name': 'float', 'range': [433, 435], 'children': [{'type': 'StringLiteral', 'name': '"inf"', 'range': [435, 435], 'children': []}]}]}]}, {'type': 'CatchClause', 'name': 'except', 'range': [445, 462], 'children': [{'type': 'Identifier', 'name': 'Exception', 'range': [446, 446], 'children': []}, {'type': 'YieldExpression', 'name': 'yield', 'range': [449, 455], 'children': [{'type': 'StringLiteral', 'name': '"result"', 'range': [450, 450], 'children': []}, {'type': 'CallExpression', 'name': 'float', 'range': [452, 454], 'children': [{'type': 'StringLiteral', 'name': '"nan"', 'range': [454, 454], 'children': []}]}]}]}]}]}]}
2025-01-08 10:28:58,439 - INFO - Starting Step 3: AST simplification
2025-01-08 10:29:16,219 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainOrSomething', 'range': [0, 37], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportKeyword', 'name': 'import', 'range': [0, 0], 'children': []}, {'type': 'Identifier', 'name': 'operator', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [3, 3], 'children': []}, {'type': 'Identifier', 'name': 'enum', 'range': [4, 4], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [5, 5], 'children': []}, {'type': 'Identifier', 'name': 'Enum', 'range': [6, 6], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [8, 12], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [8, 8], 'children': []}, {'type': 'Identifier', 'name': 'typing', 'range': [9, 9], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [10, 10], 'children': []}, {'type': 'Identifier', 'name': 'Any', 'range': [11, 11], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [14, 28], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [14, 14], 'children': []}, {'type': 'Identifier', 'name': 'backend', 'range': [15, 15], 'children': []}, {'type': 'Identifier', 'name': 'data', 'range': [17, 17], 'children': []}, {'type': 'Identifier', 'name': 'block', 'range': [19, 19], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [20, 20], 'children': []}, {'type': 'Identifier', 'name': 'Block', 'range': [21, 21], 'children': []}, {'type': 'Identifier', 'name': 'BlockCategory', 'range': [23, 23], 'children': []}, {'type': 'Identifier', 'name': 'BlockOutput', 'range': [25, 25], 'children': []}, {'type': 'Identifier', 'name': 'BlockSchema', 'range': [27, 27], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [29, 37], 'children': [{'type': 'FromKeyword', 'name': 'from', 'range': [29, 29], 'children': []}, {'type': 'Identifier', 'name': 'backend', 'range': [30, 30], 'children': []}, {'type': 'Identifier', 'name': 'data', 'range': [32, 32], 'children': []}, {'type': 'Identifier', 'name': 'model', 'range': [34, 34], 'children': []}, {'type': 'ImportKeyword', 'name': 'import', 'range': [35, 35], 'children': []}, {'type': 'Identifier', 'name': 'SchemaField', 'range': [36, 36], 'children': []}]}]}]}
2025-01-08 10:29:16,219 - INFO - Completed main AST analysis flow
2025-01-08 10:29:16,220 - INFO - Successfully processed chunk
2025-01-08 10:29:55,349 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [464, 708], 'children': [{'type': 'ClassDeclaration', 'name': 'CountItemsBlock', 'range': [464, 470], 'children': []}, {'type': 'ClassDeclaration', 'name': 'Input', 'range': [471, 477], 'children': []}, {'type': 'VariableDeclaration', 'name': 'collection', 'range': [478, 496], 'children': [{'type': 'TypeAnnotation', 'name': 'Any', 'range': [480, 480], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [481, 481], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [482, 495], 'children': [{'type': 'Argument', 'name': 'description', 'range': [485, 487], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [490, 492], 'children': []}]}]}]}, {'type': 'ClassDeclaration', 'name': 'Output', 'range': [498, 504], 'children': []}, {'type': 'VariableDeclaration', 'name': 'count', 'range': [505, 515], 'children': [{'type': 'TypeAnnotation', 'name': 'int', 'range': [507, 507], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [508, 508], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [509, 514], 'children': [{'type': 'Argument', 'name': 'description', 'range': [511, 513], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': '__init__', 'range': [517, 598], 'children': [{'type': 'ParameterList', 'name': '', 'range': [519, 521], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [520, 520], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [522, 598], 'children': [{'type': 'SuperCall', 'name': 'super', 'range': [524, 529], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [532, 532], 'children': [{'type': 'StringLiteral', 'name': '"3c9c2f42-b0c3-435f-ba35-05f7a25c772a"', 'range': [533, 533], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [537, 537], 'children': [{'type': 'MemberExpression', 'name': 'CountItemsBlock.Input', 'range': [538, 541], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [544, 544], 'children': [{'type': 'MemberExpression', 'name': 'CountItemsBlock.Output', 'range': [545, 548], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [551, 551], 'children': [{'type': 'StringLiteral', 'name': '"Counts the number of items in a collection."', 'range': [552, 552], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [556, 556], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [557, 561], 'children': [{'type': 'Property', 'name': 'BlockCategory.LOGIC', 'range': [558, 560], 'children': []}]}]}, {'type': 'Assignment', 'name': '=', 'range': [565, 565], 'children': [{'type': 'ObjectLiteral', 'name': '', 'range': [566, 580], 'children': [{'type': 'Property', 'name': '"collection"', 'range': [567, 567], 'children': []}, {'type': 'ArrayLiteral', 'name': '', 'range': [569, 579], 'children': [{'type': 'NumberLiteral', 'name': '1', 'range': [570, 570], 'children': []}, {'type': 'NumberLiteral', 'name': '2', 'range': [572, 572], 'children': []}, {'type': 'NumberLiteral', 'name': '3', 'range': [574, 574], 'children': []}, {'type': 'NumberLiteral', 'name': '4', 'range': [576, 576], 'children': []}, {'type': 'NumberLiteral', 'name': '5', 'range': [578, 578], 'children': []}]}]}]}, {'type': 'Assignment', 'name': '=', 'range': [584, 584], 'children': [{'type': 'ArrayLiteral', 'name': '', 'range': [585, 594], 'children': [{'type': 'TupleLiteral', 'name': '', 'range': [587, 591], 'children': [{'type': 'StringLiteral', 'name': '"count"', 'range': [588, 588], 'children': []}, {'type': 'NumberLiteral', 'name': '5', 'range': [590, 590], 'children': []}]}]}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'run', 'range': [600, 708], 'children': [{'type': 'ParameterList', 'name': '', 'range': [602, 612], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [603, 603], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [605, 605], 'children': [{'type': 'TypeAnnotation', 'name': 'Input', 'range': [607, 607], 'children': []}]}, {'type': 'Parameter', 'name': 'kwargs', 'range': [611, 611], 'children': []}]}, {'type': 'ReturnTypeAnnotation', 'name': 'BlockOutput', 'range': [615, 615], 'children': []}, {'type': 'FunctionBody', 'name': '', 'range': [617, 708], 'children': [{'type': 'Assignment', 'name': '=', 'range': [619, 619], 'children': [{'type': 'MemberExpression', 'name': 'input_data.collection', 'range': [620, 622], 'children': []}]}, {'type': 'TryStatement', 'name': '', 'range': [625, 707], 'children': [{'type': 'Block', 'name': '', 'range': [626, 689], 'children': [{'type': 'IfStatement', 'name': '', 'range': [628, 682], 'children': [{'type': 'Condition', 'name': '', 'range': [629, 644], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [629, 644], 'children': [{'type': 'Argument', 'name': 'collection', 'range': [631, 631], 'children': []}, {'type': 'Argument', 'name': '', 'range': [633, 643], 'children': [{'type': 'StringLiteral', 'name': 'str', 'range': [634, 634], 'children': []}, {'type': 'StringLiteral', 'name': 'list', 'range': [636, 636], 'children': []}, {'type': 'StringLiteral', 'name': 'tuple', 'range': [638, 638], 'children': []}, {'type': 'StringLiteral', 'name': 'set', 'range': [640, 640], 'children': []}, {'type': 'StringLiteral', 'name': 'dict', 'range': [642, 642], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [645, 653], 'children': [{'type': 'Assignment', 'name': '=', 'range': [648, 648], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [649, 652], 'children': [{'type': 'Argument', 'name': 'collection', 'range': [651, 651], 'children': []}]}]}]}, {'type': 'ElseIfStatement', 'name': '', 'range': [654, 673], 'children': [{'type': 'Condition', 'name': '', 'range': [655, 661], 'children': [{'type': 'CallExpression', 'name': 'hasattr', 'range': [655, 661], 'children': [{'type': 'Argument', 'name': 'collection', 'range': [657, 657], 'children': []}, {'type': 'Argument', 'name': '"__iter__"', 'range': [659, 659], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [662, 673], 'children': [{'type': 'Assignment', 'name': '=', 'range': [664, 664], 'children': [{'type': 'CallExpression', 'name': 'sum', 'range': [665, 672], 'children': [{'type': 'Argument', 'name': '1', 'range': [667, 667], 'children': []}, {'type': 'ForStatement', 'name': '', 'range': [668, 671], 'children': [{'type': 'VariableDeclaration', 'name': '_', 'range': [669, 669], 'children': []}, {'type': 'Expression', 'name': 'collection', 'range': [671, 671], 'children': []}]}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [674, 682], 'children': [{'type': 'Block', 'name': '', 'range': [675, 682], 'children': [{'type': 'ThrowStatement', 'name': '', 'range': [677, 681], 'children': [{'type': 'NewExpression', 'name': 'ValueError', 'range': [678, 681], 'children': [{'type': 'Argument', 'name': '"Input is not a countable collection"', 'range': [680, 680], 'children': []}]}]}]}]}]}, {'type': 'YieldStatement', 'name': '', 'range': [684, 688], 'children': [{'type': 'StringLiteral', 'name': '"count"', 'range': [685, 685], 'children': []}, {'type': 'Expression', 'name': 'count', 'range': [687, 687], 'children': []}]}]}, {'type': 'CatchClause', 'name': '', 'range': [690, 707], 'children': [{'type': 'Block', 'name': '', 'range': [691, 707], 'children': [{'type': 'YieldStatement', 'name': '', 'range': [694, 698], 'children': [{'type': 'StringLiteral', 'name': '"count"', 'range': [695, 695], 'children': []}, {'type': 'UnaryExpression', 'name': '-', 'range': [697, 697], 'children': [{'type': 'NumberLiteral', 'name': '1', 'range': [698, 698], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:29:55,349 - INFO - Starting Step 4: AST normalization
2025-01-08 10:30:06,473 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [68, 463], 'children': [{'type': 'ClassDeclaration', 'name': 'CalculatorBlock', 'range': [68, 74], 'children': [{'type': 'Inheritance', 'name': 'Block', 'range': [70, 72], 'children': []}]}, {'type': 'ClassDeclaration', 'name': 'Input', 'range': [75, 81], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [77, 79], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'operation', 'range': [82, 100], 'children': [{'type': 'TypeAnnotation', 'name': 'Operation', 'range': [83, 84], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [85, 85], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [86, 99], 'children': [{'type': 'Argument', 'name': 'description', 'range': [89, 91], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [94, 96], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'a', 'range': [101, 117], 'children': [{'type': 'TypeAnnotation', 'name': 'float', 'range': [102, 103], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [104, 104], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [105, 116], 'children': [{'type': 'Argument', 'name': 'description', 'range': [108, 110], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [112, 114], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'b', 'range': [118, 134], 'children': [{'type': 'TypeAnnotation', 'name': 'float', 'range': [119, 120], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [121, 121], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [122, 133], 'children': [{'type': 'Argument', 'name': 'description', 'range': [125, 127], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [129, 131], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'round_result', 'range': [135, 153], 'children': [{'type': 'TypeAnnotation', 'name': 'bool', 'range': [136, 137], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [138, 138], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [139, 152], 'children': [{'type': 'Argument', 'name': 'description', 'range': [142, 144], 'children': []}, {'type': 'Argument', 'name': 'default', 'range': [147, 149], 'children': []}]}]}]}, {'type': 'ClassDeclaration', 'name': 'Output', 'range': [155, 161], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [157, 159], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'result', 'range': [162, 172], 'children': [{'type': 'TypeAnnotation', 'name': 'float', 'range': [163, 164], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [165, 165], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [166, 171], 'children': [{'type': 'Argument', 'name': 'description', 'range': [168, 170], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': '__init__', 'range': [174, 273], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [177, 178], 'children': []}, {'type': 'SuperCall', 'name': 'super', 'range': [181, 185], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [189, 189], 'children': [{'type': 'StringLiteral', 'name': '"b1ab9b19-67a6-406d-abf5-2dba76d00c79"', 'range': [190, 190], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [194, 194], 'children': [{'type': 'MemberExpression', 'name': 'CalculatorBlock.Input', 'range': [195, 197], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [201, 201], 'children': [{'type': 'MemberExpression', 'name': 'CalculatorBlock.Output', 'range': [202, 204], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [208, 208], 'children': [{'type': 'StringLiteral', 'name': '"Performs a mathematical operation on two numbers."', 'range': [209, 209], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [213, 213], 'children': [{'type': 'ObjectLiteral', 'name': '{BlockCategory.LOGIC}', 'range': [214, 218], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [222, 222], 'children': [{'type': 'ObjectLiteral', 'name': '{"operation": Operation.ADD.value, "a": 10.0, "b": 5.0, "round_result": False}', 'range': [223, 253], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [257, 257], 'children': [{'type': 'ArrayLiteral', 'name': '[("result", 15.0)]', 'range': [258, 269], 'children': []}]}]}, {'type': 'FunctionDeclaration', 'name': 'run', 'range': [275, 463], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [278, 279], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [280, 281], 'children': [{'type': 'TypeAnnotation', 'name': 'Input', 'range': [282, 283], 'children': []}]}, {'type': 'Parameter', 'name': 'kwargs', 'range': [286, 287], 'children': []}, {'type': 'ReturnType', 'name': 'BlockOutput', 'range': [290, 291], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [294, 294], 'children': [{'type': 'MemberExpression', 'name': 'input_data.operation', 'range': [295, 297], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [300, 300], 'children': [{'type': 'MemberExpression', 'name': 'input_data.a', 'range': [301, 303], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [306, 306], 'children': [{'type': 'MemberExpression', 'name': 'input_data.b', 'range': [307, 309], 'children': []}]}, {'type': 'ObjectLiteral', 'name': '{Operation.ADD: operator.add, Operation.SUBTRACT: operator.sub, Operation.MULTIPLY: operator.mul, Operation.DIVIDE: operator.truediv, Operation.POWER: operator.pow}', 'range': [314, 361], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [365, 365], 'children': [{'type': 'MemberExpression', 'name': 'operations[operation]', 'range': [366, 369], 'children': []}]}, {'type': 'TryStatement', 'name': 'try', 'range': [372, 463], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [375, 394], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [377, 378], 'children': [{'type': 'MemberExpression', 'name': 'operation', 'range': [376, 376], 'children': []}, {'type': 'MemberExpression', 'name': 'Operation.DIVIDE', 'range': [379, 381], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [384, 385], 'children': [{'type': 'MemberExpression', 'name': 'b', 'range': [383, 383], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [386, 386], 'children': []}]}, {'type': 'ThrowStatement', 'name': 'raise', 'range': [389, 393], 'children': [{'type': 'NewExpression', 'name': 'ZeroDivisionError', 'range': [390, 392], 'children': []}]}]}, {'type': 'Assignment', 'name': '=', 'range': [397, 397], 'children': [{'type': 'CallExpression', 'name': 'op_func', 'range': [398, 403], 'children': [{'type': 'Identifier', 'name': 'a', 'range': [400, 400], 'children': []}, {'type': 'Identifier', 'name': 'b', 'range': [402, 402], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [406, 418], 'children': [{'type': 'MemberExpression', 'name': 'input_data.round_result', 'range': [407, 409], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [413, 413], 'children': [{'type': 'CallExpression', 'name': 'round', 'range': [414, 417], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [416, 416], 'children': []}]}]}]}, {'type': 'YieldExpression', 'name': 'yield', 'range': [420, 424], 'children': [{'type': 'StringLiteral', 'name': '"result"', 'range': [421, 421], 'children': []}, {'type': 'Identifier', 'name': 'result', 'range': [423, 423], 'children': []}]}, {'type': 'CatchClause', 'name': 'except', 'range': [426, 444], 'children': [{'type': 'Identifier', 'name': 'ZeroDivisionError', 'range': [427, 427], 'children': []}, {'type': 'YieldExpression', 'name': 'yield', 'range': [430, 436], 'children': [{'type': 'StringLiteral', 'name': '"result"', 'range': [431, 431], 'children': []}, {'type': 'CallExpression', 'name': 'float', 'range': [433, 435], 'children': [{'type': 'StringLiteral', 'name': '"inf"', 'range': [435, 435], 'children': []}]}]}]}, {'type': 'CatchClause', 'name': 'except', 'range': [445, 462], 'children': [{'type': 'Identifier', 'name': 'Exception', 'range': [446, 446], 'children': []}, {'type': 'YieldExpression', 'name': 'yield', 'range': [449, 455], 'children': [{'type': 'StringLiteral', 'name': '"result"', 'range': [450, 450], 'children': []}, {'type': 'CallExpression', 'name': 'float', 'range': [452, 454], 'children': [{'type': 'StringLiteral', 'name': '"nan"', 'range': [454, 454], 'children': []}]}]}]}]}]}]}
2025-01-08 10:30:06,474 - INFO - Starting Step 4: AST normalization
2025-01-08 10:30:57,048 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [464, 708], 'children': [{'type': 'ClassDecl', 'name': 'CountItemsBlock', 'range': [464, 470], 'children': []}, {'type': 'ClassDecl', 'name': 'Input', 'range': [471, 477], 'children': []}, {'type': 'VariableDecl', 'name': 'collection', 'range': [478, 496], 'children': [{'type': 'TypeAnnotation', 'name': 'Any', 'range': [480, 480], 'children': []}, {'type': 'AssignmentExpression', 'name': '=', 'range': [481, 481], 'children': [{'type': 'CallExpression', 'name': 'SchemaField', 'range': [482, 495], 'children': [{'type': 'Argument', 'name': 'description', 'range': [485, 487], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [490, 492], 'children': []}]}]}]}, {'type': 'ClassDecl', 'name': 'Output', 'range': [498, 504], 'children': []}, {'type': 'VariableDecl', 'name': 'count', 'range': [505, 515], 'children': [{'type': 'TypeAnnotation', 'name': 'int', 'range': [507, 507], 'children': []}, {'type': 'AssignmentExpression', 'name': '=', 'range': [508, 508], 'children': [{'type': 'CallExpression', 'name': 'SchemaField', 'range': [509, 514], 'children': [{'type': 'Argument', 'name': 'description', 'range': [511, 513], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': '__init__', 'range': [517, 598], 'children': [{'type': 'ParameterList', 'name': '', 'range': [519, 521], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [520, 520], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [522, 598], 'children': [{'type': 'CallExpression', 'name': 'super', 'range': [524, 529], 'children': []}, {'type': 'AssignmentExpression', 'name': '=', 'range': [532, 532], 'children': [{'type': 'Literal', 'name': '"3c9c2f42-b0c3-435f-ba35-05f7a25c772a"', 'range': [533, 533], 'children': []}]}, {'type': 'AssignmentExpression', 'name': '=', 'range': [537, 537], 'children': [{'type': 'MemberExpression', 'name': 'CountItemsBlock.Input', 'range': [538, 541], 'children': []}]}, {'type': 'AssignmentExpression', 'name': '=', 'range': [544, 544], 'children': [{'type': 'MemberExpression', 'name': 'CountItemsBlock.Output', 'range': [545, 548], 'children': []}]}, {'type': 'AssignmentExpression', 'name': '=', 'range': [551, 551], 'children': [{'type': 'Literal', 'name': '"Counts the number of items in a collection."', 'range': [552, 552], 'children': []}]}, {'type': 'AssignmentExpression', 'name': '=', 'range': [556, 556], 'children': [{'type': 'ObjectExpression', 'name': '', 'range': [557, 561], 'children': [{'type': 'Property', 'name': 'BlockCategory.LOGIC', 'range': [558, 560], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': '=', 'range': [565, 565], 'children': [{'type': 'ObjectExpression', 'name': '', 'range': [566, 580], 'children': [{'type': 'Property', 'name': '"collection"', 'range': [567, 567], 'children': []}, {'type': 'ArrayExpression', 'name': '', 'range': [569, 579], 'children': [{'type': 'Literal', 'name': '1', 'range': [570, 570], 'children': []}, {'type': 'Literal', 'name': '2', 'range': [572, 572], 'children': []}, {'type': 'Literal', 'name': '3', 'range': [574, 574], 'children': []}, {'type': 'Literal', 'name': '4', 'range': [576, 576], 'children': []}, {'type': 'Literal', 'name': '5', 'range': [578, 578], 'children': []}]}]}]}, {'type': 'AssignmentExpression', 'name': '=', 'range': [584, 584], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [585, 594], 'children': [{'type': 'TupleExpression', 'name': '', 'range': [587, 591], 'children': [{'type': 'Literal', 'name': '"count"', 'range': [588, 588], 'children': []}, {'type': 'Literal', 'name': '5', 'range': [590, 590], 'children': []}]}]}]}]}]}, {'type': 'FunctionDecl', 'name': 'run', 'range': [600, 708], 'children': [{'type': 'ParameterList', 'name': '', 'range': [602, 612], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [603, 603], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [605, 605], 'children': [{'type': 'TypeAnnotation', 'name': 'Input', 'range': [607, 607], 'children': []}]}, {'type': 'Parameter', 'name': 'kwargs', 'range': [611, 611], 'children': []}]}, {'type': 'ReturnTypeAnnotation', 'name': 'BlockOutput', 'range': [615, 615], 'children': []}, {'type': 'FunctionBody', 'name': '', 'range': [617, 708], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [619, 619], 'children': [{'type': 'MemberExpression', 'name': 'input_data.collection', 'range': [620, 622], 'children': []}]}, {'type': 'TryStatement', 'name': '', 'range': [625, 707], 'children': [{'type': 'Block', 'name': '', 'range': [626, 689], 'children': [{'type': 'IfStatement', 'name': '', 'range': [628, 682], 'children': [{'type': 'Condition', 'name': '', 'range': [629, 644], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [629, 644], 'children': [{'type': 'Argument', 'name': 'collection', 'range': [631, 631], 'children': []}, {'type': 'Argument', 'name': '', 'range': [633, 643], 'children': [{'type': 'Literal', 'name': 'str', 'range': [634, 634], 'children': []}, {'type': 'Literal', 'name': 'list', 'range': [636, 636], 'children': []}, {'type': 'Literal', 'name': 'tuple', 'range': [638, 638], 'children': []}, {'type': 'Literal', 'name': 'set', 'range': [640, 640], 'children': []}, {'type': 'Literal', 'name': 'dict', 'range': [642, 642], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [645, 653], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [648, 648], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [649, 652], 'children': [{'type': 'Argument', 'name': 'collection', 'range': [651, 651], 'children': []}]}]}]}, {'type': 'ElseIfStatement', 'name': '', 'range': [654, 673], 'children': [{'type': 'Condition', 'name': '', 'range': [655, 661], 'children': [{'type': 'CallExpression', 'name': 'hasattr', 'range': [655, 661], 'children': [{'type': 'Argument', 'name': 'collection', 'range': [657, 657], 'children': []}, {'type': 'Argument', 'name': '"__iter__"', 'range': [659, 659], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [662, 673], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [664, 664], 'children': [{'type': 'CallExpression', 'name': 'sum', 'range': [665, 672], 'children': [{'type': 'Argument', 'name': '1', 'range': [667, 667], 'children': []}, {'type': 'ForStatement', 'name': '', 'range': [668, 671], 'children': [{'type': 'VariableDecl', 'name': '_', 'range': [669, 669], 'children': []}, {'type': 'Expression', 'name': 'collection', 'range': [671, 671], 'children': []}]}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [674, 682], 'children': [{'type': 'Block', 'name': '', 'range': [675, 682], 'children': [{'type': 'ThrowStatement', 'name': '', 'range': [677, 681], 'children': [{'type': 'NewExpression', 'name': 'ValueError', 'range': [678, 681], 'children': [{'type': 'Argument', 'name': '"Input is not a countable collection"', 'range': [680, 680], 'children': []}]}]}]}]}]}, {'type': 'YieldStatement', 'name': '', 'range': [684, 688], 'children': [{'type': 'Literal', 'name': '"count"', 'range': [685, 685], 'children': []}, {'type': 'Expression', 'name': 'count', 'range': [687, 687], 'children': []}]}]}, {'type': 'CatchClause', 'name': '', 'range': [690, 707], 'children': [{'type': 'Block', 'name': '', 'range': [691, 707], 'children': [{'type': 'YieldStatement', 'name': '', 'range': [694, 698], 'children': [{'type': 'Literal', 'name': '"count"', 'range': [695, 695], 'children': []}, {'type': 'UnaryExpression', 'name': '-', 'range': [697, 697], 'children': [{'type': 'Literal', 'name': '1', 'range': [698, 698], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:30:57,048 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:31:14,251 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [68, 463], 'children': [{'type': 'ClassDecl', 'name': 'CalculatorBlock', 'range': [68, 74], 'children': [{'type': 'Inheritance', 'name': 'Block', 'range': [70, 72], 'children': []}]}, {'type': 'ClassDecl', 'name': 'Input', 'range': [75, 81], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [77, 79], 'children': []}]}, {'type': 'VariableDecl', 'name': 'operation', 'range': [82, 100], 'children': [{'type': 'TypeAnnotation', 'name': 'Operation', 'range': [83, 84], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [85, 85], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [86, 99], 'children': [{'type': 'Argument', 'name': 'description', 'range': [89, 91], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [94, 96], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'a', 'range': [101, 117], 'children': [{'type': 'TypeAnnotation', 'name': 'float', 'range': [102, 103], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [104, 104], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [105, 116], 'children': [{'type': 'Argument', 'name': 'description', 'range': [108, 110], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [112, 114], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'b', 'range': [118, 134], 'children': [{'type': 'TypeAnnotation', 'name': 'float', 'range': [119, 120], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [121, 121], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [122, 133], 'children': [{'type': 'Argument', 'name': 'description', 'range': [125, 127], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [129, 131], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'round_result', 'range': [135, 153], 'children': [{'type': 'TypeAnnotation', 'name': 'bool', 'range': [136, 137], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [138, 138], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [139, 152], 'children': [{'type': 'Argument', 'name': 'description', 'range': [142, 144], 'children': []}, {'type': 'Argument', 'name': 'default', 'range': [147, 149], 'children': []}]}]}]}, {'type': 'ClassDecl', 'name': 'Output', 'range': [155, 161], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [157, 159], 'children': []}]}, {'type': 'VariableDecl', 'name': 'result', 'range': [162, 172], 'children': [{'type': 'TypeAnnotation', 'name': 'float', 'range': [163, 164], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [165, 165], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [166, 171], 'children': [{'type': 'Argument', 'name': 'description', 'range': [168, 170], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': '__init__', 'range': [174, 273], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [177, 178], 'children': []}, {'type': 'SuperCall', 'name': 'super', 'range': [181, 185], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [189, 189], 'children': [{'type': 'Literal', 'name': '"b1ab9b19-67a6-406d-abf5-2dba76d00c79"', 'range': [190, 190], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [194, 194], 'children': [{'type': 'MemberExpression', 'name': 'CalculatorBlock.Input', 'range': [195, 197], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [201, 201], 'children': [{'type': 'MemberExpression', 'name': 'CalculatorBlock.Output', 'range': [202, 204], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [208, 208], 'children': [{'type': 'Literal', 'name': '"Performs a mathematical operation on two numbers."', 'range': [209, 209], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [213, 213], 'children': [{'type': 'ObjectLiteral', 'name': '{BlockCategory.LOGIC}', 'range': [214, 218], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [222, 222], 'children': [{'type': 'ObjectLiteral', 'name': '{"operation": Operation.ADD.value, "a": 10.0, "b": 5.0, "round_result": False}', 'range': [223, 253], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [257, 257], 'children': [{'type': 'ArrayLiteral', 'name': '[("result", 15.0)]', 'range': [258, 269], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'run', 'range': [275, 463], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [278, 279], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [280, 281], 'children': [{'type': 'TypeAnnotation', 'name': 'Input', 'range': [282, 283], 'children': []}]}, {'type': 'Parameter', 'name': 'kwargs', 'range': [286, 287], 'children': []}, {'type': 'ReturnType', 'name': 'BlockOutput', 'range': [290, 291], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [294, 294], 'children': [{'type': 'MemberExpression', 'name': 'input_data.operation', 'range': [295, 297], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [300, 300], 'children': [{'type': 'MemberExpression', 'name': 'input_data.a', 'range': [301, 303], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [306, 306], 'children': [{'type': 'MemberExpression', 'name': 'input_data.b', 'range': [307, 309], 'children': []}]}, {'type': 'ObjectLiteral', 'name': '{Operation.ADD: operator.add, Operation.SUBTRACT: operator.sub, Operation.MULTIPLY: operator.mul, Operation.DIVIDE: operator.truediv, Operation.POWER: operator.pow}', 'range': [314, 361], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [365, 365], 'children': [{'type': 'MemberExpression', 'name': 'operations[operation]', 'range': [366, 369], 'children': []}]}, {'type': 'TryStatement', 'name': 'try', 'range': [372, 463], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [375, 394], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [377, 378], 'children': [{'type': 'Identifier', 'name': 'operation', 'range': [376, 376], 'children': []}, {'type': 'MemberExpression', 'name': 'Operation.DIVIDE', 'range': [379, 381], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [384, 385], 'children': [{'type': 'Identifier', 'name': 'b', 'range': [383, 383], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [386, 386], 'children': []}]}, {'type': 'ThrowStatement', 'name': 'raise', 'range': [389, 393], 'children': [{'type': 'NewExpression', 'name': 'ZeroDivisionError', 'range': [390, 392], 'children': []}]}]}, {'type': 'Assignment', 'name': '=', 'range': [397, 397], 'children': [{'type': 'CallExpression', 'name': 'op_func', 'range': [398, 403], 'children': [{'type': 'Identifier', 'name': 'a', 'range': [400, 400], 'children': []}, {'type': 'Identifier', 'name': 'b', 'range': [402, 402], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [406, 418], 'children': [{'type': 'MemberExpression', 'name': 'input_data.round_result', 'range': [407, 409], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [413, 413], 'children': [{'type': 'CallExpression', 'name': 'round', 'range': [414, 417], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [416, 416], 'children': []}]}]}]}, {'type': 'YieldExpression', 'name': 'yield', 'range': [420, 424], 'children': [{'type': 'Literal', 'name': '"result"', 'range': [421, 421], 'children': []}, {'type': 'Identifier', 'name': 'result', 'range': [423, 423], 'children': []}]}, {'type': 'CatchClause', 'name': 'except', 'range': [426, 444], 'children': [{'type': 'Identifier', 'name': 'ZeroDivisionError', 'range': [427, 427], 'children': []}, {'type': 'YieldExpression', 'name': 'yield', 'range': [430, 436], 'children': [{'type': 'Literal', 'name': '"result"', 'range': [431, 431], 'children': []}, {'type': 'CallExpression', 'name': 'float', 'range': [433, 435], 'children': [{'type': 'Literal', 'name': '"inf"', 'range': [435, 435], 'children': []}]}]}]}, {'type': 'CatchClause', 'name': 'except', 'range': [445, 462], 'children': [{'type': 'Identifier', 'name': 'Exception', 'range': [446, 446], 'children': []}, {'type': 'YieldExpression', 'name': 'yield', 'range': [449, 455], 'children': [{'type': 'Literal', 'name': '"result"', 'range': [450, 450], 'children': []}, {'type': 'CallExpression', 'name': 'float', 'range': [452, 454], 'children': [{'type': 'Literal', 'name': '"nan"', 'range': [454, 454], 'children': []}]}]}]}]}]}]}
2025-01-08 10:31:14,252 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:31:58,393 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [464, 708], 'children': [{'type': 'ClassDecl', 'name': 'CountItemsBlock', 'range': [464, 470], 'children': []}, {'type': 'ClassDecl', 'name': 'Input', 'range': [471, 477], 'children': []}, {'type': 'VariableDecl', 'name': 'collection', 'range': [478, 496], 'children': [{'type': 'TypeAnnotation', 'name': 'Any', 'range': [480, 480], 'children': []}, {'type': 'AssignmentExpression', 'name': '=', 'range': [481, 481], 'children': [{'type': 'CallExpression', 'name': 'SchemaField', 'range': [482, 495], 'children': [{'type': 'Argument', 'name': 'description', 'range': [485, 487], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [490, 492], 'children': []}]}]}]}, {'type': 'ClassDecl', 'name': 'Output', 'range': [498, 504], 'children': []}, {'type': 'VariableDecl', 'name': 'count', 'range': [505, 515], 'children': [{'type': 'TypeAnnotation', 'name': 'int', 'range': [507, 507], 'children': []}, {'type': 'AssignmentExpression', 'name': '=', 'range': [508, 508], 'children': [{'type': 'CallExpression', 'name': 'SchemaField', 'range': [509, 514], 'children': [{'type': 'Argument', 'name': 'description', 'range': [511, 513], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': '__init__', 'range': [517, 598], 'children': [{'type': 'ParameterList', 'name': '', 'range': [519, 521], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [520, 520], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [522, 598], 'children': [{'type': 'CallExpression', 'name': 'super', 'range': [524, 529], 'children': []}, {'type': 'AssignmentExpression', 'name': '=', 'range': [532, 532], 'children': [{'type': 'Literal', 'name': '"3c9c2f42-b0c3-435f-ba35-05f7a25c772a"', 'range': [533, 533], 'children': []}]}, {'type': 'AssignmentExpression', 'name': '=', 'range': [537, 537], 'children': [{'type': 'MemberExpression', 'name': 'CountItemsBlock.Input', 'range': [538, 541], 'children': []}]}, {'type': 'AssignmentExpression', 'name': '=', 'range': [544, 544], 'children': [{'type': 'MemberExpression', 'name': 'CountItemsBlock.Output', 'range': [545, 548], 'children': []}]}, {'type': 'AssignmentExpression', 'name': '=', 'range': [551, 551], 'children': [{'type': 'Literal', 'name': '"Counts the number of items in a collection."', 'range': [552, 552], 'children': []}]}, {'type': 'AssignmentExpression', 'name': '=', 'range': [556, 556], 'children': [{'type': 'ObjectExpression', 'name': '', 'range': [557, 561], 'children': [{'type': 'Property', 'name': 'BlockCategory.LOGIC', 'range': [558, 560], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': '=', 'range': [565, 565], 'children': [{'type': 'ObjectExpression', 'name': '', 'range': [566, 580], 'children': [{'type': 'Property', 'name': '"collection"', 'range': [567, 567], 'children': []}, {'type': 'ArrayExpression', 'name': '', 'range': [569, 579], 'children': [{'type': 'Literal', 'name': '1', 'range': [570, 570], 'children': []}, {'type': 'Literal', 'name': '2', 'range': [572, 572], 'children': []}, {'type': 'Literal', 'name': '3', 'range': [574, 574], 'children': []}, {'type': 'Literal', 'name': '4', 'range': [576, 576], 'children': []}, {'type': 'Literal', 'name': '5', 'range': [578, 578], 'children': []}]}]}]}, {'type': 'AssignmentExpression', 'name': '=', 'range': [584, 584], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [585, 594], 'children': [{'type': 'TupleExpression', 'name': '', 'range': [587, 591], 'children': [{'type': 'Literal', 'name': '"count"', 'range': [588, 588], 'children': []}, {'type': 'Literal', 'name': '5', 'range': [590, 590], 'children': []}]}]}]}]}]}, {'type': 'FunctionDecl', 'name': 'run', 'range': [600, 708], 'children': [{'type': 'ParameterList', 'name': '', 'range': [602, 612], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [603, 603], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [605, 605], 'children': [{'type': 'TypeAnnotation', 'name': 'Input', 'range': [607, 607], 'children': []}]}, {'type': 'Parameter', 'name': 'kwargs', 'range': [611, 611], 'children': []}]}, {'type': 'ReturnTypeAnnotation', 'name': 'BlockOutput', 'range': [615, 615], 'children': []}, {'type': 'FunctionBody', 'name': '', 'range': [617, 708], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [619, 619], 'children': [{'type': 'MemberExpression', 'name': 'input_data.collection', 'range': [620, 622], 'children': []}]}, {'type': 'TryStatement', 'name': '', 'range': [625, 707], 'children': [{'type': 'Block', 'name': '', 'range': [626, 689], 'children': [{'type': 'IfStatement', 'name': '', 'range': [628, 682], 'children': [{'type': 'Condition', 'name': '', 'range': [629, 644], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [629, 644], 'children': [{'type': 'Argument', 'name': 'collection', 'range': [631, 631], 'children': []}, {'type': 'Argument', 'name': '', 'range': [633, 643], 'children': [{'type': 'Literal', 'name': 'str', 'range': [634, 634], 'children': []}, {'type': 'Literal', 'name': 'list', 'range': [636, 636], 'children': []}, {'type': 'Literal', 'name': 'tuple', 'range': [638, 638], 'children': []}, {'type': 'Literal', 'name': 'set', 'range': [640, 640], 'children': []}, {'type': 'Literal', 'name': 'dict', 'range': [642, 642], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [645, 653], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [648, 648], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [649, 652], 'children': [{'type': 'Argument', 'name': 'collection', 'range': [651, 651], 'children': []}]}]}]}, {'type': 'ElseIfStatement', 'name': '', 'range': [654, 673], 'children': [{'type': 'Condition', 'name': '', 'range': [655, 661], 'children': [{'type': 'CallExpression', 'name': 'hasattr', 'range': [655, 661], 'children': [{'type': 'Argument', 'name': 'collection', 'range': [657, 657], 'children': []}, {'type': 'Argument', 'name': '"__iter__"', 'range': [659, 659], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [662, 673], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [664, 664], 'children': [{'type': 'CallExpression', 'name': 'sum', 'range': [665, 672], 'children': [{'type': 'Argument', 'name': '1', 'range': [667, 667], 'children': []}, {'type': 'ForStatement', 'name': '', 'range': [668, 671], 'children': [{'type': 'VariableDecl', 'name': '_', 'range': [669, 669], 'children': []}, {'type': 'Expression', 'name': 'collection', 'range': [671, 671], 'children': []}]}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [674, 682], 'children': [{'type': 'Block', 'name': '', 'range': [675, 682], 'children': [{'type': 'ThrowStatement', 'name': '', 'range': [677, 681], 'children': [{'type': 'NewExpression', 'name': 'ValueError', 'range': [678, 681], 'children': [{'type': 'Argument', 'name': '"Input is not a countable collection"', 'range': [680, 680], 'children': []}]}]}]}]}]}, {'type': 'YieldStatement', 'name': '', 'range': [684, 688], 'children': [{'type': 'Literal', 'name': '"count"', 'range': [685, 685], 'children': []}, {'type': 'Expression', 'name': 'count', 'range': [687, 687], 'children': []}]}]}, {'type': 'CatchClause', 'name': '', 'range': [690, 707], 'children': [{'type': 'Block', 'name': '', 'range': [691, 707], 'children': [{'type': 'YieldStatement', 'name': '', 'range': [694, 698], 'children': [{'type': 'Literal', 'name': '"count"', 'range': [695, 695], 'children': []}, {'type': 'UnaryExpression', 'name': '-', 'range': [697, 697], 'children': [{'type': 'Literal', 'name': '1', 'range': [698, 698], 'children': []}]}]}]}]}]}]}]}]}
2025-01-08 10:31:58,393 - INFO - Completed main AST analysis flow
2025-01-08 10:31:58,396 - INFO - Successfully processed chunk
2025-01-08 10:32:21,097 - INFO - Step 5 result: {'type': 'Program', 'name': 'MainProgram', 'range': [68, 463], 'children': [{'type': 'ClassDecl', 'name': 'CalculatorBlock', 'range': [68, 74], 'children': [{'type': 'Inheritance', 'name': 'Block', 'range': [70, 72], 'children': []}]}, {'type': 'ClassDecl', 'name': 'Input', 'range': [75, 81], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [77, 79], 'children': []}]}, {'type': 'VariableDecl', 'name': 'operation', 'range': [82, 100], 'children': [{'type': 'TypeAnnotation', 'name': 'Operation', 'range': [83, 84], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [85, 85], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [86, 99], 'children': [{'type': 'Argument', 'name': 'description', 'range': [89, 91], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [94, 96], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'a', 'range': [101, 117], 'children': [{'type': 'TypeAnnotation', 'name': 'float', 'range': [102, 103], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [104, 104], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [105, 116], 'children': [{'type': 'Argument', 'name': 'description', 'range': [108, 110], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [112, 114], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'b', 'range': [118, 134], 'children': [{'type': 'TypeAnnotation', 'name': 'float', 'range': [119, 120], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [121, 121], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [122, 133], 'children': [{'type': 'Argument', 'name': 'description', 'range': [125, 127], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [129, 131], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'round_result', 'range': [135, 153], 'children': [{'type': 'TypeAnnotation', 'name': 'bool', 'range': [136, 137], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [138, 138], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [139, 152], 'children': [{'type': 'Argument', 'name': 'description', 'range': [142, 144], 'children': []}, {'type': 'Argument', 'name': 'default', 'range': [147, 149], 'children': []}]}]}]}, {'type': 'ClassDecl', 'name': 'Output', 'range': [155, 161], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [157, 159], 'children': []}]}, {'type': 'VariableDecl', 'name': 'result', 'range': [162, 172], 'children': [{'type': 'TypeAnnotation', 'name': 'float', 'range': [163, 164], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [165, 165], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [166, 171], 'children': [{'type': 'Argument', 'name': 'description', 'range': [168, 170], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': '__init__', 'range': [174, 273], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [177, 178], 'children': []}, {'type': 'SuperCall', 'name': 'super', 'range': [181, 185], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [189, 189], 'children': [{'type': 'Literal', 'name': '"b1ab9b19-67a6-406d-abf5-2dba76d00c79"', 'range': [190, 190], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [194, 194], 'children': [{'type': 'MemberExpression', 'name': 'CalculatorBlock.Input', 'range': [195, 197], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [201, 201], 'children': [{'type': 'MemberExpression', 'name': 'CalculatorBlock.Output', 'range': [202, 204], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [208, 208], 'children': [{'type': 'Literal', 'name': '"Performs a mathematical operation on two numbers."', 'range': [209, 209], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [213, 213], 'children': [{'type': 'ObjectLiteral', 'name': '{BlockCategory.LOGIC}', 'range': [214, 218], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [222, 222], 'children': [{'type': 'ObjectLiteral', 'name': '{"operation": Operation.ADD.value, "a": 10.0, "b": 5.0, "round_result": False}', 'range': [223, 253], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [257, 257], 'children': [{'type': 'ArrayLiteral', 'name': '[("result", 15.0)]', 'range': [258, 269], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'run', 'range': [275, 463], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [278, 279], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [280, 281], 'children': [{'type': 'TypeAnnotation', 'name': 'Input', 'range': [282, 283], 'children': []}]}, {'type': 'Parameter', 'name': 'kwargs', 'range': [286, 287], 'children': []}, {'type': 'ReturnType', 'name': 'BlockOutput', 'range': [290, 291], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [294, 294], 'children': [{'type': 'MemberExpression', 'name': 'input_data.operation', 'range': [295, 297], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [300, 300], 'children': [{'type': 'MemberExpression', 'name': 'input_data.a', 'range': [301, 303], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [306, 306], 'children': [{'type': 'MemberExpression', 'name': 'input_data.b', 'range': [307, 309], 'children': []}]}, {'type': 'ObjectLiteral', 'name': '{Operation.ADD: operator.add, Operation.SUBTRACT: operator.sub, Operation.MULTIPLY: operator.mul, Operation.DIVIDE: operator.truediv, Operation.POWER: operator.pow}', 'range': [314, 361], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [365, 365], 'children': [{'type': 'MemberExpression', 'name': 'operations[operation]', 'range': [366, 369], 'children': []}]}, {'type': 'TryStatement', 'name': 'try', 'range': [372, 463], 'children': [{'type': 'IfStatement', 'name': 'if', 'range': [375, 394], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [377, 378], 'children': [{'type': 'Identifier', 'name': 'operation', 'range': [376, 376], 'children': []}, {'type': 'MemberExpression', 'name': 'Operation.DIVIDE', 'range': [379, 381], 'children': []}]}, {'type': 'BinaryExpression', 'name': '==', 'range': [384, 385], 'children': [{'type': 'Identifier', 'name': 'b', 'range': [383, 383], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [386, 386], 'children': []}]}, {'type': 'ThrowStatement', 'name': 'raise', 'range': [389, 393], 'children': [{'type': 'NewExpression', 'name': 'ZeroDivisionError', 'range': [390, 392], 'children': []}]}]}, {'type': 'Assignment', 'name': '=', 'range': [397, 397], 'children': [{'type': 'CallExpression', 'name': 'op_func', 'range': [398, 403], 'children': [{'type': 'Identifier', 'name': 'a', 'range': [400, 400], 'children': []}, {'type': 'Identifier', 'name': 'b', 'range': [402, 402], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [406, 418], 'children': [{'type': 'MemberExpression', 'name': 'input_data.round_result', 'range': [407, 409], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [413, 413], 'children': [{'type': 'CallExpression', 'name': 'round', 'range': [414, 417], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [416, 416], 'children': []}]}]}]}, {'type': 'YieldExpression', 'name': 'yield', 'range': [420, 424], 'children': [{'type': 'Literal', 'name': '"result"', 'range': [421, 421], 'children': []}, {'type': 'Identifier', 'name': 'result', 'range': [423, 423], 'children': []}]}, {'type': 'CatchClause', 'name': 'except', 'range': [426, 444], 'children': [{'type': 'Identifier', 'name': 'ZeroDivisionError', 'range': [427, 427], 'children': []}, {'type': 'YieldExpression', 'name': 'yield', 'range': [430, 436], 'children': [{'type': 'Literal', 'name': '"result"', 'range': [431, 431], 'children': []}, {'type': 'CallExpression', 'name': 'float', 'range': [433, 435], 'children': [{'type': 'Literal', 'name': '"inf"', 'range': [435, 435], 'children': []}]}]}]}, {'type': 'CatchClause', 'name': 'except', 'range': [445, 462], 'children': [{'type': 'Identifier', 'name': 'Exception', 'range': [446, 446], 'children': []}, {'type': 'YieldExpression', 'name': 'yield', 'range': [449, 455], 'children': [{'type': 'Literal', 'name': '"result"', 'range': [450, 450], 'children': []}, {'type': 'CallExpression', 'name': 'float', 'range': [452, 454], 'children': [{'type': 'Literal', 'name': '"nan"', 'range': [454, 454], 'children': []}]}]}]}]}]}]}
2025-01-08 10:32:21,097 - INFO - Completed main AST analysis flow
2025-01-08 10:32:21,098 - INFO - Successfully processed chunk
2025-01-08 10:32:21,132 - INFO - Starting code generation from AST
2025-01-08 10:32:37,949 - INFO - Successfully generated code from AST
2025-01-08 10:32:37,951 - INFO - Starting static code similarity comparison
2025-01-08 10:32:37,966 - INFO - Static similarity result: {'final_score': 96.13, 'length_similarity': 96.15, 'token_similarity': 94.81, 'structure_similarity': 93.07, 'function_similarity': 100, 'complexity_similarity': 100.0, 'variable_similarity': 100}
