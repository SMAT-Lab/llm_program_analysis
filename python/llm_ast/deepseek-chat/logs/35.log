2025-01-08 09:19:06,733 - INFO - Processing sample 35
2025-01-08 09:19:06,733 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:19:17,759 - INFO - Successfully split code into 2 top-level declarations
2025-01-08 09:19:17,760 - INFO - Processing chunk #0 (size=40 chars, start_index=0)
2025-01-08 09:19:17,761 - INFO - Processing chunk with 40 chars starting at index 0
2025-01-08 09:19:17,761 - INFO - Starting main AST analysis flow
2025-01-08 09:19:17,761 - INFO - Tokenized code into 11 tokens
2025-01-08 09:19:17,761 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:19:17,776 - INFO - Processing chunk #1 (size=1002 chars, start_index=11)
2025-01-08 09:19:17,776 - INFO - Processing chunk with 1002 chars starting at index 11
2025-01-08 09:19:17,777 - INFO - Starting main AST analysis flow
2025-01-08 09:19:17,777 - INFO - Tokenized code into 366 tokens
2025-01-08 09:19:17,778 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:19:22,378 - INFO - Step 1 result: {'type': 'Program', 'name': 'test_type_conversion', 'range': [11, 376], 'children': []}
2025-01-08 09:19:22,378 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:19:23,312 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 10], 'children': []}
2025-01-08 09:19:23,312 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:19:35,478 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [0, 10], 'children': [{'type': 'ImportDeclaration', 'name': 'convert', 'range': [0, 7], 'children': [{'type': 'FromClause', 'name': 'backend.util.type', 'range': [0, 5], 'children': [{'type': 'ModuleSpecifier', 'name': 'backend', 'range': [0, 1], 'children': []}, {'type': 'ModuleSpecifier', 'name': 'util', 'range': [2, 3], 'children': []}, {'type': 'ModuleSpecifier', 'name': 'type', 'range': [4, 5], 'children': []}]}, {'type': 'ImportClause', 'name': 'convert', 'range': [6, 7], 'children': []}]}]}
2025-01-08 09:19:35,478 - INFO - Starting Step 3: AST simplification
2025-01-08 09:19:48,709 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [0, 10], 'children': [{'type': 'ImportDeclaration', 'name': 'convert', 'range': [0, 7], 'children': [{'type': 'FromClause', 'name': 'backend.util.type', 'range': [0, 5], 'children': [{'type': 'ModuleSpecifier', 'name': 'backend', 'range': [0, 1], 'children': []}, {'type': 'ModuleSpecifier', 'name': 'util', 'range': [2, 3], 'children': []}, {'type': 'ModuleSpecifier', 'name': 'type', 'range': [4, 5], 'children': []}]}, {'type': 'ImportClause', 'name': 'convert', 'range': [6, 7], 'children': []}]}]}
2025-01-08 09:19:48,710 - INFO - Starting Step 4: AST normalization
2025-01-08 09:20:04,230 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [0, 10], 'children': [{'type': 'ImportDeclaration', 'name': 'convert', 'range': [0, 7], 'children': [{'type': 'FromClause', 'name': 'backend.util.type', 'range': [0, 5], 'children': [{'type': 'Identifier', 'name': 'backend', 'range': [0, 1], 'children': []}, {'type': 'Identifier', 'name': 'util', 'range': [2, 3], 'children': []}, {'type': 'Identifier', 'name': 'type', 'range': [4, 5], 'children': []}]}, {'type': 'ImportSpecifier', 'name': 'convert', 'range': [6, 7], 'children': []}]}]}
2025-01-08 09:20:04,231 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:20:18,431 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [0, 10], 'children': [{'type': 'ImportDeclaration', 'name': 'convert', 'range': [0, 7], 'children': [{'type': 'FromClause', 'name': 'backend.util.type', 'range': [0, 5], 'children': [{'type': 'Identifier', 'name': 'backend', 'range': [0, 1], 'children': []}, {'type': 'Identifier', 'name': 'util', 'range': [2, 3], 'children': []}, {'type': 'Identifier', 'name': 'type', 'range': [4, 5], 'children': []}]}, {'type': 'ImportSpecifier', 'name': 'convert', 'range': [6, 7], 'children': []}]}]}
2025-01-08 09:20:18,431 - INFO - Completed main AST analysis flow
2025-01-08 09:20:18,431 - INFO - Successfully processed chunk
2025-01-08 09:22:14,675 - INFO - Step 2 result: {'type': 'Program', 'name': 'test_type_conversion', 'range': [11, 376], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_type_conversion', 'range': [11, 376], 'children': [{'type': 'AssertStatement', 'range': [17, 29], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [18, 25], 'children': [{'type': 'Literal', 'value': '5.5', 'range': [20, 22]}, {'type': 'Type', 'value': 'int', 'range': [24, 24]}]}, {'type': 'Comparison', 'operator': '==', 'range': [26, 27], 'children': [{'type': 'Literal', 'value': '5', 'range': [28, 28]}]}]}, {'type': 'AssertStatement', 'range': [30, 40], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [31, 36], 'children': [{'type': 'Literal', 'value': '"5.5"', 'range': [33, 33]}, {'type': 'Type', 'value': 'int', 'range': [35, 35]}]}, {'type': 'Comparison', 'operator': '==', 'range': [37, 38], 'children': [{'type': 'Literal', 'value': '5', 'range': [39, 39]}]}]}, {'type': 'AssertStatement', 'range': [41, 57], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [42, 53], 'children': [{'type': 'ArrayLiteral', 'range': [44, 50], 'children': [{'type': 'Literal', 'value': '1', 'range': [45, 45]}, {'type': 'Literal', 'value': '2', 'range': [47, 47]}, {'type': 'Literal', 'value': '3', 'range': [49, 49]}]}, {'type': 'Type', 'value': 'int', 'range': [52, 52]}]}, {'type': 'Comparison', 'operator': '==', 'range': [54, 55], 'children': [{'type': 'Literal', 'value': '3', 'range': [56, 56]}]}]}, {'type': 'AssertStatement', 'range': [59, 71], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [60, 65], 'children': [{'type': 'Literal', 'value': '"5.5"', 'range': [62, 62]}, {'type': 'Type', 'value': 'float', 'range': [64, 64]}]}, {'type': 'Comparison', 'operator': '==', 'range': [66, 67], 'children': [{'type': 'Literal', 'value': '5.5', 'range': [68, 70]}]}]}, {'type': 'AssertStatement', 'range': [72, 84], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [73, 78], 'children': [{'type': 'Literal', 'value': '5', 'range': [75, 75]}, {'type': 'Type', 'value': 'float', 'range': [77, 77]}]}, {'type': 'Comparison', 'operator': '==', 'range': [79, 80], 'children': [{'type': 'Literal', 'value': '5.0', 'range': [81, 83]}]}]}, {'type': 'AssertStatement', 'range': [86, 95], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [87, 92], 'children': [{'type': 'Literal', 'value': '"True"', 'range': [89, 89]}, {'type': 'Type', 'value': 'bool', 'range': [91, 91]}]}, {'type': 'Comparison', 'operator': 'is', 'range': [93, 94], 'children': [{'type': 'Literal', 'value': 'True', 'range': [94, 94]}]}]}, {'type': 'AssertStatement', 'range': [96, 105], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [97, 102], 'children': [{'type': 'Literal', 'value': '"False"', 'range': [99, 99]}, {'type': 'Type', 'value': 'bool', 'range': [101, 101]}]}, {'type': 'Comparison', 'operator': 'is', 'range': [103, 104], 'children': [{'type': 'Literal', 'value': 'False', 'range': [104, 104]}]}]}, {'type': 'AssertStatement', 'range': [107, 117], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [108, 113], 'children': [{'type': 'Literal', 'value': '5', 'range': [110, 110]}, {'type': 'Type', 'value': 'str', 'range': [112, 112]}]}, {'type': 'Comparison', 'operator': '==', 'range': [114, 115], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [116, 116]}]}]}, {'type': 'AssertStatement', 'range': [118, 136], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [119, 132], 'children': [{'type': 'ObjectLiteral', 'range': [121, 129], 'children': [{'type': 'Property', 'key': '"a"', 'value': '1', 'range': [122, 124]}, {'type': 'Property', 'key': '"b"', 'value': '2', 'range': [126, 128]}]}, {'type': 'Type', 'value': 'str', 'range': [131, 131]}]}, {'type': 'Comparison', 'operator': '==', 'range': [133, 134], 'children': [{'type': 'Literal', 'value': '\'{"a": 1, "b": 2}\'', 'range': [135, 135]}]}]}, {'type': 'AssertStatement', 'range': [137, 153], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [138, 149], 'children': [{'type': 'ArrayLiteral', 'range': [140, 146], 'children': [{'type': 'Literal', 'value': '1', 'range': [141, 141]}, {'type': 'Literal', 'value': '2', 'range': [143, 143]}, {'type': 'Literal', 'value': '3', 'range': [145, 145]}]}, {'type': 'Type', 'value': 'str', 'range': [148, 148]}]}, {'type': 'Comparison', 'operator': '==', 'range': [150, 151], 'children': [{'type': 'Literal', 'value': '"[1, 2, 3]"', 'range': [152, 152]}]}]}, {'type': 'AssertStatement', 'range': [155, 167], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [156, 161], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [158, 158]}, {'type': 'Type', 'value': 'list', 'range': [160, 160]}]}, {'type': 'Comparison', 'operator': '==', 'range': [162, 163], 'children': [{'type': 'ArrayLiteral', 'range': [164, 166], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [165, 165]}]}]}]}, {'type': 'AssertStatement', 'range': [168, 190], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [169, 180], 'children': [{'type': 'TupleLiteral', 'range': [171, 177], 'children': [{'type': 'Literal', 'value': '1', 'range': [172, 172]}, {'type': 'Literal', 'value': '2', 'range': [174, 174]}, {'type': 'Literal', 'value': '3', 'range': [176, 176]}]}, {'type': 'Type', 'value': 'list', 'range': [179, 179]}]}, {'type': 'Comparison', 'operator': '==', 'range': [181, 182], 'children': [{'type': 'ArrayLiteral', 'range': [183, 189], 'children': [{'type': 'Literal', 'value': '1', 'range': [184, 184]}, {'type': 'Literal', 'value': '2', 'range': [186, 186]}, {'type': 'Literal', 'value': '3', 'range': [188, 188]}]}]}]}, {'type': 'AssertStatement', 'range': [191, 213], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [192, 203], 'children': [{'type': 'SetLiteral', 'range': [194, 200], 'children': [{'type': 'Literal', 'value': '1', 'range': [195, 195]}, {'type': 'Literal', 'value': '2', 'range': [197, 197]}, {'type': 'Literal', 'value': '3', 'range': [199, 199]}]}, {'type': 'Type', 'value': 'list', 'range': [202, 202]}]}, {'type': 'Comparison', 'operator': '==', 'range': [204, 205], 'children': [{'type': 'ArrayLiteral', 'range': [206, 212], 'children': [{'type': 'Literal', 'value': '1', 'range': [207, 207]}, {'type': 'Literal', 'value': '2', 'range': [209, 209]}, {'type': 'Literal', 'value': '3', 'range': [211, 211]}]}]}]}, {'type': 'AssertStatement', 'range': [215, 229], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [216, 221], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [218, 218]}, {'type': 'Type', 'value': 'dict', 'range': [220, 220]}]}, {'type': 'Comparison', 'operator': '==', 'range': [222, 223], 'children': [{'type': 'ObjectLiteral', 'range': [224, 228], 'children': [{'type': 'Property', 'key': '"value"', 'value': '5', 'range': [225, 227]}]}]}]}, {'type': 'AssertStatement', 'range': [230, 248], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [231, 236], 'children': [{'type': 'Literal', 'value': '\'{"a": 1, "b": 2}\'', 'range': [233, 233]}, {'type': 'Type', 'value': 'dict', 'range': [235, 235]}]}, {'type': 'Comparison', 'operator': '==', 'range': [237, 238], 'children': [{'type': 'ObjectLiteral', 'range': [239, 247], 'children': [{'type': 'Property', 'key': '"a"', 'value': '1', 'range': [240, 242]}, {'type': 'Property', 'key': '"b"', 'value': '2', 'range': [244, 246]}]}]}]}, {'type': 'AssertStatement', 'range': [249, 277], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [250, 261], 'children': [{'type': 'ArrayLiteral', 'range': [252, 258], 'children': [{'type': 'Literal', 'value': '1', 'range': [253, 253]}, {'type': 'Literal', 'value': '2', 'range': [255, 255]}, {'type': 'Literal', 'value': '3', 'range': [257, 257]}]}, {'type': 'Type', 'value': 'dict', 'range': [260, 260]}]}, {'type': 'Comparison', 'operator': '==', 'range': [262, 263], 'children': [{'type': 'ObjectLiteral', 'range': [264, 276], 'children': [{'type': 'Property', 'key': '0', 'value': '1', 'range': [265, 267]}, {'type': 'Property', 'key': '1', 'value': '2', 'range': [269, 271]}, {'type': 'Property', 'key': '2', 'value': '3', 'range': [273, 275]}]}]}]}, {'type': 'AssertStatement', 'range': [278, 306], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [279, 290], 'children': [{'type': 'TupleLiteral', 'range': [281, 287], 'children': [{'type': 'Literal', 'value': '1', 'range': [282, 282]}, {'type': 'Literal', 'value': '2', 'range': [284, 284]}, {'type': 'Literal', 'value': '3', 'range': [286, 286]}]}, {'type': 'Type', 'value': 'dict', 'range': [289, 289]}]}, {'type': 'Comparison', 'operator': '==', 'range': [291, 292], 'children': [{'type': 'ObjectLiteral', 'range': [293, 305], 'children': [{'type': 'Property', 'key': '0', 'value': '1', 'range': [294, 296]}, {'type': 'Property', 'key': '1', 'value': '2', 'range': [298, 300]}, {'type': 'Property', 'key': '2', 'value': '3', 'range': [302, 304]}]}]}]}, {'type': 'ImportStatement', 'range': [308, 312], 'children': [{'type': 'ImportFrom', 'module': 'typing', 'names': [{'type': 'ImportSpecifier', 'name': 'List', 'range': [311, 311]}], 'range': [308, 312]}]}, {'type': 'AssertStatement', 'range': [314, 329], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [315, 323], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [317, 317]}, {'type': 'Type', 'value': 'List[int]', 'range': [319, 322]}]}, {'type': 'Comparison', 'operator': '==', 'range': [324, 325], 'children': [{'type': 'ArrayLiteral', 'range': [326, 328], 'children': [{'type': 'Literal', 'value': '5', 'range': [327, 327]}]}]}]}, {'type': 'AssertStatement', 'range': [330, 349], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [331, 339], 'children': [{'type': 'Literal', 'value': '"[5,4,2]"', 'range': [333, 333]}, {'type': 'Type', 'value': 'List[int]', 'range': [335, 338]}]}, {'type': 'Comparison', 'operator': '==', 'range': [340, 341], 'children': [{'type': 'ArrayLiteral', 'range': [342, 348], 'children': [{'type': 'Literal', 'value': '5', 'range': [343, 343]}, {'type': 'Literal', 'value': '4', 'range': [345, 345]}, {'type': 'Literal', 'value': '2', 'range': [347, 347]}]}]}]}, {'type': 'AssertStatement', 'range': [350, 375], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [351, 365], 'children': [{'type': 'ArrayLiteral', 'range': [353, 359], 'children': [{'type': 'Literal', 'value': '5', 'range': [354, 354]}, {'type': 'Literal', 'value': '4', 'range': [356, 356]}, {'type': 'Literal', 'value': '2', 'range': [358, 358]}]}, {'type': 'Type', 'value': 'List[str]', 'range': [361, 364]}]}, {'type': 'Comparison', 'operator': '==', 'range': [366, 367], 'children': [{'type': 'ArrayLiteral', 'range': [368, 374], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [369, 369]}, {'type': 'Literal', 'value': '"4"', 'range': [371, 371]}, {'type': 'Literal', 'value': '"2"', 'range': [373, 373]}]}]}]}]}]}
2025-01-08 09:22:14,675 - INFO - Starting Step 3: AST simplification
2025-01-08 09:25:14,317 - INFO - Step 3 result: {'type': 'Program', 'name': 'test_type_conversion', 'range': [11, 376], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_type_conversion', 'range': [11, 376], 'children': [{'type': 'AssertStatement', 'range': [17, 29], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [18, 25], 'children': [{'type': 'Literal', 'value': '5.5', 'range': [20, 22]}, {'type': 'Type', 'value': 'int', 'range': [24, 24]}]}, {'type': 'Comparison', 'operator': '==', 'range': [26, 27], 'children': [{'type': 'Literal', 'value': '5', 'range': [28, 28]}]}]}, {'type': 'AssertStatement', 'range': [30, 40], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [31, 36], 'children': [{'type': 'Literal', 'value': '"5.5"', 'range': [33, 33]}, {'type': 'Type', 'value': 'int', 'range': [35, 35]}]}, {'type': 'Comparison', 'operator': '==', 'range': [37, 38], 'children': [{'type': 'Literal', 'value': '5', 'range': [39, 39]}]}]}, {'type': 'AssertStatement', 'range': [41, 57], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [42, 53], 'children': [{'type': 'ArrayLiteral', 'range': [44, 50], 'children': [{'type': 'Literal', 'value': '1', 'range': [45, 45]}, {'type': 'Literal', 'value': '2', 'range': [47, 47]}, {'type': 'Literal', 'value': '3', 'range': [49, 49]}]}, {'type': 'Type', 'value': 'int', 'range': [52, 52]}]}, {'type': 'Comparison', 'operator': '==', 'range': [54, 55], 'children': [{'type': 'Literal', 'value': '3', 'range': [56, 56]}]}]}, {'type': 'AssertStatement', 'range': [59, 71], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [60, 65], 'children': [{'type': 'Literal', 'value': '"5.5"', 'range': [62, 62]}, {'type': 'Type', 'value': 'float', 'range': [64, 64]}]}, {'type': 'Comparison', 'operator': '==', 'range': [66, 67], 'children': [{'type': 'Literal', 'value': '5.5', 'range': [68, 70]}]}]}, {'type': 'AssertStatement', 'range': [72, 84], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [73, 78], 'children': [{'type': 'Literal', 'value': '5', 'range': [75, 75]}, {'type': 'Type', 'value': 'float', 'range': [77, 77]}]}, {'type': 'Comparison', 'operator': '==', 'range': [79, 80], 'children': [{'type': 'Literal', 'value': '5.0', 'range': [81, 83]}]}]}, {'type': 'AssertStatement', 'range': [86, 95], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [87, 92], 'children': [{'type': 'Literal', 'value': '"True"', 'range': [89, 89]}, {'type': 'Type', 'value': 'bool', 'range': [91, 91]}]}, {'type': 'Comparison', 'operator': 'is', 'range': [93, 94], 'children': [{'type': 'Literal', 'value': 'True', 'range': [94, 94]}]}]}, {'type': 'AssertStatement', 'range': [96, 105], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [97, 102], 'children': [{'type': 'Literal', 'value': '"False"', 'range': [99, 99]}, {'type': 'Type', 'value': 'bool', 'range': [101, 101]}]}, {'type': 'Comparison', 'operator': 'is', 'range': [103, 104], 'children': [{'type': 'Literal', 'value': 'False', 'range': [104, 104]}]}]}, {'type': 'AssertStatement', 'range': [107, 117], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [108, 113], 'children': [{'type': 'Literal', 'value': '5', 'range': [110, 110]}, {'type': 'Type', 'value': 'str', 'range': [112, 112]}]}, {'type': 'Comparison', 'operator': '==', 'range': [114, 115], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [116, 116]}]}]}, {'type': 'AssertStatement', 'range': [118, 136], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [119, 132], 'children': [{'type': 'ObjectLiteral', 'range': [121, 129], 'children': [{'type': 'Property', 'key': '"a"', 'value': '1', 'range': [122, 124]}, {'type': 'Property', 'key': '"b"', 'value': '2', 'range': [126, 128]}]}, {'type': 'Type', 'value': 'str', 'range': [131, 131]}]}, {'type': 'Comparison', 'operator': '==', 'range': [133, 134], 'children': [{'type': 'Literal', 'value': '\'{"a": 1, "b": 2}\'', 'range': [135, 135]}]}]}, {'type': 'AssertStatement', 'range': [137, 153], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [138, 149], 'children': [{'type': 'ArrayLiteral', 'range': [140, 146], 'children': [{'type': 'Literal', 'value': '1', 'range': [141, 141]}, {'type': 'Literal', 'value': '2', 'range': [143, 143]}, {'type': 'Literal', 'value': '3', 'range': [145, 145]}]}, {'type': 'Type', 'value': 'str', 'range': [148, 148]}]}, {'type': 'Comparison', 'operator': '==', 'range': [150, 151], 'children': [{'type': 'Literal', 'value': '"[1, 2, 3]"', 'range': [152, 152]}]}]}, {'type': 'AssertStatement', 'range': [155, 167], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [156, 161], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [158, 158]}, {'type': 'Type', 'value': 'list', 'range': [160, 160]}]}, {'type': 'Comparison', 'operator': '==', 'range': [162, 163], 'children': [{'type': 'ArrayLiteral', 'range': [164, 166], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [165, 165]}]}]}]}, {'type': 'AssertStatement', 'range': [168, 190], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [169, 180], 'children': [{'type': 'TupleLiteral', 'range': [171, 177], 'children': [{'type': 'Literal', 'value': '1', 'range': [172, 172]}, {'type': 'Literal', 'value': '2', 'range': [174, 174]}, {'type': 'Literal', 'value': '3', 'range': [176, 176]}]}, {'type': 'Type', 'value': 'list', 'range': [179, 179]}]}, {'type': 'Comparison', 'operator': '==', 'range': [181, 182], 'children': [{'type': 'ArrayLiteral', 'range': [183, 189], 'children': [{'type': 'Literal', 'value': '1', 'range': [184, 184]}, {'type': 'Literal', 'value': '2', 'range': [186, 186]}, {'type': 'Literal', 'value': '3', 'range': [188, 188]}]}]}]}, {'type': 'AssertStatement', 'range': [191, 213], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [192, 203], 'children': [{'type': 'SetLiteral', 'range': [194, 200], 'children': [{'type': 'Literal', 'value': '1', 'range': [195, 195]}, {'type': 'Literal', 'value': '2', 'range': [197, 197]}, {'type': 'Literal', 'value': '3', 'range': [199, 199]}]}, {'type': 'Type', 'value': 'list', 'range': [202, 202]}]}, {'type': 'Comparison', 'operator': '==', 'range': [204, 205], 'children': [{'type': 'ArrayLiteral', 'range': [206, 212], 'children': [{'type': 'Literal', 'value': '1', 'range': [207, 207]}, {'type': 'Literal', 'value': '2', 'range': [209, 209]}, {'type': 'Literal', 'value': '3', 'range': [211, 211]}]}]}]}, {'type': 'AssertStatement', 'range': [215, 229], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [216, 221], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [218, 218]}, {'type': 'Type', 'value': 'dict', 'range': [220, 220]}]}, {'type': 'Comparison', 'operator': '==', 'range': [222, 223], 'children': [{'type': 'ObjectLiteral', 'range': [224, 228], 'children': [{'type': 'Property', 'key': '"value"', 'value': '5', 'range': [225, 227]}]}]}]}, {'type': 'AssertStatement', 'range': [230, 248], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [231, 236], 'children': [{'type': 'Literal', 'value': '\'{"a": 1, "b": 2}\'', 'range': [233, 233]}, {'type': 'Type', 'value': 'dict', 'range': [235, 235]}]}, {'type': 'Comparison', 'operator': '==', 'range': [237, 238], 'children': [{'type': 'ObjectLiteral', 'range': [239, 247], 'children': [{'type': 'Property', 'key': '"a"', 'value': '1', 'range': [240, 242]}, {'type': 'Property', 'key': '"b"', 'value': '2', 'range': [244, 246]}]}]}]}, {'type': 'AssertStatement', 'range': [249, 277], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [250, 261], 'children': [{'type': 'ArrayLiteral', 'range': [252, 258], 'children': [{'type': 'Literal', 'value': '1', 'range': [253, 253]}, {'type': 'Literal', 'value': '2', 'range': [255, 255]}, {'type': 'Literal', 'value': '3', 'range': [257, 257]}]}, {'type': 'Type', 'value': 'dict', 'range': [260, 260]}]}, {'type': 'Comparison', 'operator': '==', 'range': [262, 263], 'children': [{'type': 'ObjectLiteral', 'range': [264, 276], 'children': [{'type': 'Property', 'key': '0', 'value': '1', 'range': [265, 267]}, {'type': 'Property', 'key': '1', 'value': '2', 'range': [269, 271]}, {'type': 'Property', 'key': '2', 'value': '3', 'range': [273, 275]}]}]}]}, {'type': 'AssertStatement', 'range': [278, 306], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [279, 290], 'children': [{'type': 'TupleLiteral', 'range': [281, 287], 'children': [{'type': 'Literal', 'value': '1', 'range': [282, 282]}, {'type': 'Literal', 'value': '2', 'range': [284, 284]}, {'type': 'Literal', 'value': '3', 'range': [286, 286]}]}, {'type': 'Type', 'value': 'dict', 'range': [289, 289]}]}, {'type': 'Comparison', 'operator': '==', 'range': [291, 292], 'children': [{'type': 'ObjectLiteral', 'range': [293, 305], 'children': [{'type': 'Property', 'key': '0', 'value': '1', 'range': [294, 296]}, {'type': 'Property', 'key': '1', 'value': '2', 'range': [298, 300]}, {'type': 'Property', 'key': '2', 'value': '3', 'range': [302, 304]}]}]}]}, {'type': 'ImportStatement', 'range': [308, 312], 'children': [{'type': 'ImportFrom', 'module': 'typing', 'names': [{'type': 'ImportSpecifier', 'name': 'List', 'range': [311, 311]}], 'range': [308, 312]}]}, {'type': 'AssertStatement', 'range': [314, 329], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [315, 323], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [317, 317]}, {'type': 'Type', 'value': 'List[int]', 'range': [319, 322]}]}, {'type': 'Comparison', 'operator': '==', 'range': [324, 325], 'children': [{'type': 'ArrayLiteral', 'range': [326, 328], 'children': [{'type': 'Literal', 'value': '5', 'range': [327, 327]}]}]}]}, {'type': 'AssertStatement', 'range': [330, 349], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [331, 339], 'children': [{'type': 'Literal', 'value': '"[5,4,2]"', 'range': [333, 333]}, {'type': 'Type', 'value': 'List[int]', 'range': [335, 338]}]}, {'type': 'Comparison', 'operator': '==', 'range': [340, 341], 'children': [{'type': 'ArrayLiteral', 'range': [342, 348], 'children': [{'type': 'Literal', 'value': '5', 'range': [343, 343]}, {'type': 'Literal', 'value': '4', 'range': [345, 345]}, {'type': 'Literal', 'value': '2', 'range': [347, 347]}]}]}]}, {'type': 'AssertStatement', 'range': [350, 375], 'children': [{'type': 'FunctionCall', 'name': 'convert', 'range': [351, 365], 'children': [{'type': 'ArrayLiteral', 'range': [353, 359], 'children': [{'type': 'Literal', 'value': '5', 'range': [354, 354]}, {'type': 'Literal', 'value': '4', 'range': [356, 356]}, {'type': 'Literal', 'value': '2', 'range': [358, 358]}]}, {'type': 'Type', 'value': 'List[str]', 'range': [361, 364]}]}, {'type': 'Comparison', 'operator': '==', 'range': [366, 367], 'children': [{'type': 'ArrayLiteral', 'range': [368, 374], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [369, 369]}, {'type': 'Literal', 'value': '"4"', 'range': [371, 371]}, {'type': 'Literal', 'value': '"2"', 'range': [373, 373]}]}]}]}]}]}
2025-01-08 09:25:14,317 - INFO - Starting Step 4: AST normalization
2025-01-08 09:28:20,852 - INFO - Step 4 result: {'type': 'Program', 'name': 'test_type_conversion', 'range': [11, 376], 'children': [{'type': 'FunctionDecl', 'name': 'test_type_conversion', 'range': [11, 376], 'children': [{'type': 'AssertStatement', 'range': [17, 29], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [18, 25], 'children': [{'type': 'Literal', 'value': '5.5', 'range': [20, 22]}, {'type': 'Type', 'value': 'int', 'range': [24, 24]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [26, 27], 'children': [{'type': 'Literal', 'value': '5', 'range': [28, 28]}]}]}, {'type': 'AssertStatement', 'range': [30, 40], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [31, 36], 'children': [{'type': 'Literal', 'value': '"5.5"', 'range': [33, 33]}, {'type': 'Type', 'value': 'int', 'range': [35, 35]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [37, 38], 'children': [{'type': 'Literal', 'value': '5', 'range': [39, 39]}]}]}, {'type': 'AssertStatement', 'range': [41, 57], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [42, 53], 'children': [{'type': 'ArrayLiteral', 'range': [44, 50], 'children': [{'type': 'Literal', 'value': '1', 'range': [45, 45]}, {'type': 'Literal', 'value': '2', 'range': [47, 47]}, {'type': 'Literal', 'value': '3', 'range': [49, 49]}]}, {'type': 'Type', 'value': 'int', 'range': [52, 52]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [54, 55], 'children': [{'type': 'Literal', 'value': '3', 'range': [56, 56]}]}]}, {'type': 'AssertStatement', 'range': [59, 71], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [60, 65], 'children': [{'type': 'Literal', 'value': '"5.5"', 'range': [62, 62]}, {'type': 'Type', 'value': 'float', 'range': [64, 64]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [66, 67], 'children': [{'type': 'Literal', 'value': '5.5', 'range': [68, 70]}]}]}, {'type': 'AssertStatement', 'range': [72, 84], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [73, 78], 'children': [{'type': 'Literal', 'value': '5', 'range': [75, 75]}, {'type': 'Type', 'value': 'float', 'range': [77, 77]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [79, 80], 'children': [{'type': 'Literal', 'value': '5.0', 'range': [81, 83]}]}]}, {'type': 'AssertStatement', 'range': [86, 95], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [87, 92], 'children': [{'type': 'Literal', 'value': '"True"', 'range': [89, 89]}, {'type': 'Type', 'value': 'bool', 'range': [91, 91]}]}, {'type': 'BinaryExpression', 'operator': 'is', 'range': [93, 94], 'children': [{'type': 'Literal', 'value': 'True', 'range': [94, 94]}]}]}, {'type': 'AssertStatement', 'range': [96, 105], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [97, 102], 'children': [{'type': 'Literal', 'value': '"False"', 'range': [99, 99]}, {'type': 'Type', 'value': 'bool', 'range': [101, 101]}]}, {'type': 'BinaryExpression', 'operator': 'is', 'range': [103, 104], 'children': [{'type': 'Literal', 'value': 'False', 'range': [104, 104]}]}]}, {'type': 'AssertStatement', 'range': [107, 117], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [108, 113], 'children': [{'type': 'Literal', 'value': '5', 'range': [110, 110]}, {'type': 'Type', 'value': 'str', 'range': [112, 112]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [114, 115], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [116, 116]}]}]}, {'type': 'AssertStatement', 'range': [118, 136], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [119, 132], 'children': [{'type': 'ObjectLiteral', 'range': [121, 129], 'children': [{'type': 'Property', 'key': '"a"', 'value': '1', 'range': [122, 124]}, {'type': 'Property', 'key': '"b"', 'value': '2', 'range': [126, 128]}]}, {'type': 'Type', 'value': 'str', 'range': [131, 131]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [133, 134], 'children': [{'type': 'Literal', 'value': '\'{"a": 1, "b": 2}\'', 'range': [135, 135]}]}]}, {'type': 'AssertStatement', 'range': [137, 153], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [138, 149], 'children': [{'type': 'ArrayLiteral', 'range': [140, 146], 'children': [{'type': 'Literal', 'value': '1', 'range': [141, 141]}, {'type': 'Literal', 'value': '2', 'range': [143, 143]}, {'type': 'Literal', 'value': '3', 'range': [145, 145]}]}, {'type': 'Type', 'value': 'str', 'range': [148, 148]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [150, 151], 'children': [{'type': 'Literal', 'value': '"[1, 2, 3]"', 'range': [152, 152]}]}]}, {'type': 'AssertStatement', 'range': [155, 167], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [156, 161], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [158, 158]}, {'type': 'Type', 'value': 'list', 'range': [160, 160]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [162, 163], 'children': [{'type': 'ArrayLiteral', 'range': [164, 166], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [165, 165]}]}]}]}, {'type': 'AssertStatement', 'range': [168, 190], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [169, 180], 'children': [{'type': 'TupleLiteral', 'range': [171, 177], 'children': [{'type': 'Literal', 'value': '1', 'range': [172, 172]}, {'type': 'Literal', 'value': '2', 'range': [174, 174]}, {'type': 'Literal', 'value': '3', 'range': [176, 176]}]}, {'type': 'Type', 'value': 'list', 'range': [179, 179]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [181, 182], 'children': [{'type': 'ArrayLiteral', 'range': [183, 189], 'children': [{'type': 'Literal', 'value': '1', 'range': [184, 184]}, {'type': 'Literal', 'value': '2', 'range': [186, 186]}, {'type': 'Literal', 'value': '3', 'range': [188, 188]}]}]}]}, {'type': 'AssertStatement', 'range': [191, 213], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [192, 203], 'children': [{'type': 'SetLiteral', 'range': [194, 200], 'children': [{'type': 'Literal', 'value': '1', 'range': [195, 195]}, {'type': 'Literal', 'value': '2', 'range': [197, 197]}, {'type': 'Literal', 'value': '3', 'range': [199, 199]}]}, {'type': 'Type', 'value': 'list', 'range': [202, 202]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [204, 205], 'children': [{'type': 'ArrayLiteral', 'range': [206, 212], 'children': [{'type': 'Literal', 'value': '1', 'range': [207, 207]}, {'type': 'Literal', 'value': '2', 'range': [209, 209]}, {'type': 'Literal', 'value': '3', 'range': [211, 211]}]}]}]}, {'type': 'AssertStatement', 'range': [215, 229], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [216, 221], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [218, 218]}, {'type': 'Type', 'value': 'dict', 'range': [220, 220]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [222, 223], 'children': [{'type': 'ObjectLiteral', 'range': [224, 228], 'children': [{'type': 'Property', 'key': '"value"', 'value': '5', 'range': [225, 227]}]}]}]}, {'type': 'AssertStatement', 'range': [230, 248], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [231, 236], 'children': [{'type': 'Literal', 'value': '\'{"a": 1, "b": 2}\'', 'range': [233, 233]}, {'type': 'Type', 'value': 'dict', 'range': [235, 235]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [237, 238], 'children': [{'type': 'ObjectLiteral', 'range': [239, 247], 'children': [{'type': 'Property', 'key': '"a"', 'value': '1', 'range': [240, 242]}, {'type': 'Property', 'key': '"b"', 'value': '2', 'range': [244, 246]}]}]}]}, {'type': 'AssertStatement', 'range': [249, 277], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [250, 261], 'children': [{'type': 'ArrayLiteral', 'range': [252, 258], 'children': [{'type': 'Literal', 'value': '1', 'range': [253, 253]}, {'type': 'Literal', 'value': '2', 'range': [255, 255]}, {'type': 'Literal', 'value': '3', 'range': [257, 257]}]}, {'type': 'Type', 'value': 'dict', 'range': [260, 260]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [262, 263], 'children': [{'type': 'ObjectLiteral', 'range': [264, 276], 'children': [{'type': 'Property', 'key': '0', 'value': '1', 'range': [265, 267]}, {'type': 'Property', 'key': '1', 'value': '2', 'range': [269, 271]}, {'type': 'Property', 'key': '2', 'value': '3', 'range': [273, 275]}]}]}]}, {'type': 'AssertStatement', 'range': [278, 306], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [279, 290], 'children': [{'type': 'TupleLiteral', 'range': [281, 287], 'children': [{'type': 'Literal', 'value': '1', 'range': [282, 282]}, {'type': 'Literal', 'value': '2', 'range': [284, 284]}, {'type': 'Literal', 'value': '3', 'range': [286, 286]}]}, {'type': 'Type', 'value': 'dict', 'range': [289, 289]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [291, 292], 'children': [{'type': 'ObjectLiteral', 'range': [293, 305], 'children': [{'type': 'Property', 'key': '0', 'value': '1', 'range': [294, 296]}, {'type': 'Property', 'key': '1', 'value': '2', 'range': [298, 300]}, {'type': 'Property', 'key': '2', 'value': '3', 'range': [302, 304]}]}]}]}, {'type': 'ImportStatement', 'range': [308, 312], 'children': [{'type': 'ImportFrom', 'module': 'typing', 'names': [{'type': 'ImportSpecifier', 'name': 'List', 'range': [311, 311]}], 'range': [308, 312]}]}, {'type': 'AssertStatement', 'range': [314, 329], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [315, 323], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [317, 317]}, {'type': 'Type', 'value': 'List[int]', 'range': [319, 322]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [324, 325], 'children': [{'type': 'ArrayLiteral', 'range': [326, 328], 'children': [{'type': 'Literal', 'value': '5', 'range': [327, 327]}]}]}]}, {'type': 'AssertStatement', 'range': [330, 349], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [331, 339], 'children': [{'type': 'Literal', 'value': '"[5,4,2]"', 'range': [333, 333]}, {'type': 'Type', 'value': 'List[int]', 'range': [335, 338]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [340, 341], 'children': [{'type': 'ArrayLiteral', 'range': [342, 348], 'children': [{'type': 'Literal', 'value': '5', 'range': [343, 343]}, {'type': 'Literal', 'value': '4', 'range': [345, 345]}, {'type': 'Literal', 'value': '2', 'range': [347, 347]}]}]}]}, {'type': 'AssertStatement', 'range': [350, 375], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [351, 365], 'children': [{'type': 'ArrayLiteral', 'range': [353, 359], 'children': [{'type': 'Literal', 'value': '5', 'range': [354, 354]}, {'type': 'Literal', 'value': '4', 'range': [356, 356]}, {'type': 'Literal', 'value': '2', 'range': [358, 358]}]}, {'type': 'Type', 'value': 'List[str]', 'range': [361, 364]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [366, 367], 'children': [{'type': 'ArrayLiteral', 'range': [368, 374], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [369, 369]}, {'type': 'Literal', 'value': '"4"', 'range': [371, 371]}, {'type': 'Literal', 'value': '"2"', 'range': [373, 373]}]}]}]}]}]}
2025-01-08 09:28:20,852 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:31:24,264 - INFO - Step 5 result: {'type': 'Program', 'name': 'test_type_conversion', 'range': [11, 376], 'children': [{'type': 'FunctionDecl', 'name': 'test_type_conversion', 'range': [11, 376], 'children': [{'type': 'AssertStatement', 'range': [17, 29], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [18, 25], 'children': [{'type': 'Literal', 'value': '5.5', 'range': [20, 22]}, {'type': 'Type', 'value': 'int', 'range': [24, 24]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [26, 27], 'children': [{'type': 'Literal', 'value': '5', 'range': [28, 28]}]}]}, {'type': 'AssertStatement', 'range': [30, 40], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [31, 36], 'children': [{'type': 'Literal', 'value': '"5.5"', 'range': [33, 33]}, {'type': 'Type', 'value': 'int', 'range': [35, 35]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [37, 38], 'children': [{'type': 'Literal', 'value': '5', 'range': [39, 39]}]}]}, {'type': 'AssertStatement', 'range': [41, 57], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [42, 53], 'children': [{'type': 'ArrayLiteral', 'range': [44, 50], 'children': [{'type': 'Literal', 'value': '1', 'range': [45, 45]}, {'type': 'Literal', 'value': '2', 'range': [47, 47]}, {'type': 'Literal', 'value': '3', 'range': [49, 49]}]}, {'type': 'Type', 'value': 'int', 'range': [52, 52]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [54, 55], 'children': [{'type': 'Literal', 'value': '3', 'range': [56, 56]}]}]}, {'type': 'AssertStatement', 'range': [59, 71], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [60, 65], 'children': [{'type': 'Literal', 'value': '"5.5"', 'range': [62, 62]}, {'type': 'Type', 'value': 'float', 'range': [64, 64]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [66, 67], 'children': [{'type': 'Literal', 'value': '5.5', 'range': [68, 70]}]}]}, {'type': 'AssertStatement', 'range': [72, 84], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [73, 78], 'children': [{'type': 'Literal', 'value': '5', 'range': [75, 75]}, {'type': 'Type', 'value': 'float', 'range': [77, 77]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [79, 80], 'children': [{'type': 'Literal', 'value': '5.0', 'range': [81, 83]}]}]}, {'type': 'AssertStatement', 'range': [86, 95], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [87, 92], 'children': [{'type': 'Literal', 'value': '"True"', 'range': [89, 89]}, {'type': 'Type', 'value': 'bool', 'range': [91, 91]}]}, {'type': 'BinaryExpression', 'operator': 'is', 'range': [93, 94], 'children': [{'type': 'Literal', 'value': 'True', 'range': [94, 94]}]}]}, {'type': 'AssertStatement', 'range': [96, 105], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [97, 102], 'children': [{'type': 'Literal', 'value': '"False"', 'range': [99, 99]}, {'type': 'Type', 'value': 'bool', 'range': [101, 101]}]}, {'type': 'BinaryExpression', 'operator': 'is', 'range': [103, 104], 'children': [{'type': 'Literal', 'value': 'False', 'range': [104, 104]}]}]}, {'type': 'AssertStatement', 'range': [107, 117], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [108, 113], 'children': [{'type': 'Literal', 'value': '5', 'range': [110, 110]}, {'type': 'Type', 'value': 'str', 'range': [112, 112]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [114, 115], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [116, 116]}]}]}, {'type': 'AssertStatement', 'range': [118, 136], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [119, 132], 'children': [{'type': 'ObjectLiteral', 'range': [121, 129], 'children': [{'type': 'Property', 'key': '"a"', 'value': '1', 'range': [122, 124]}, {'type': 'Property', 'key': '"b"', 'value': '2', 'range': [126, 128]}]}, {'type': 'Type', 'value': 'str', 'range': [131, 131]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [133, 134], 'children': [{'type': 'Literal', 'value': '\'{"a": 1, "b": 2}\'', 'range': [135, 135]}]}]}, {'type': 'AssertStatement', 'range': [137, 153], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [138, 149], 'children': [{'type': 'ArrayLiteral', 'range': [140, 146], 'children': [{'type': 'Literal', 'value': '1', 'range': [141, 141]}, {'type': 'Literal', 'value': '2', 'range': [143, 143]}, {'type': 'Literal', 'value': '3', 'range': [145, 145]}]}, {'type': 'Type', 'value': 'str', 'range': [148, 148]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [150, 151], 'children': [{'type': 'Literal', 'value': '"[1, 2, 3]"', 'range': [152, 152]}]}]}, {'type': 'AssertStatement', 'range': [155, 167], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [156, 161], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [158, 158]}, {'type': 'Type', 'value': 'list', 'range': [160, 160]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [162, 163], 'children': [{'type': 'ArrayLiteral', 'range': [164, 166], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [165, 165]}]}]}]}, {'type': 'AssertStatement', 'range': [168, 190], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [169, 180], 'children': [{'type': 'TupleLiteral', 'range': [171, 177], 'children': [{'type': 'Literal', 'value': '1', 'range': [172, 172]}, {'type': 'Literal', 'value': '2', 'range': [174, 174]}, {'type': 'Literal', 'value': '3', 'range': [176, 176]}]}, {'type': 'Type', 'value': 'list', 'range': [179, 179]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [181, 182], 'children': [{'type': 'ArrayLiteral', 'range': [183, 189], 'children': [{'type': 'Literal', 'value': '1', 'range': [184, 184]}, {'type': 'Literal', 'value': '2', 'range': [186, 186]}, {'type': 'Literal', 'value': '3', 'range': [188, 188]}]}]}]}, {'type': 'AssertStatement', 'range': [191, 213], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [192, 203], 'children': [{'type': 'SetLiteral', 'range': [194, 200], 'children': [{'type': 'Literal', 'value': '1', 'range': [195, 195]}, {'type': 'Literal', 'value': '2', 'range': [197, 197]}, {'type': 'Literal', 'value': '3', 'range': [199, 199]}]}, {'type': 'Type', 'value': 'list', 'range': [202, 202]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [204, 205], 'children': [{'type': 'ArrayLiteral', 'range': [206, 212], 'children': [{'type': 'Literal', 'value': '1', 'range': [207, 207]}, {'type': 'Literal', 'value': '2', 'range': [209, 209]}, {'type': 'Literal', 'value': '3', 'range': [211, 211]}]}]}]}, {'type': 'AssertStatement', 'range': [215, 229], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [216, 221], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [218, 218]}, {'type': 'Type', 'value': 'dict', 'range': [220, 220]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [222, 223], 'children': [{'type': 'ObjectLiteral', 'range': [224, 228], 'children': [{'type': 'Property', 'key': '"value"', 'value': '5', 'range': [225, 227]}]}]}]}, {'type': 'AssertStatement', 'range': [230, 248], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [231, 236], 'children': [{'type': 'Literal', 'value': '\'{"a": 1, "b": 2}\'', 'range': [233, 233]}, {'type': 'Type', 'value': 'dict', 'range': [235, 235]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [237, 238], 'children': [{'type': 'ObjectLiteral', 'range': [239, 247], 'children': [{'type': 'Property', 'key': '"a"', 'value': '1', 'range': [240, 242]}, {'type': 'Property', 'key': '"b"', 'value': '2', 'range': [244, 246]}]}]}]}, {'type': 'AssertStatement', 'range': [249, 277], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [250, 261], 'children': [{'type': 'ArrayLiteral', 'range': [252, 258], 'children': [{'type': 'Literal', 'value': '1', 'range': [253, 253]}, {'type': 'Literal', 'value': '2', 'range': [255, 255]}, {'type': 'Literal', 'value': '3', 'range': [257, 257]}]}, {'type': 'Type', 'value': 'dict', 'range': [260, 260]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [262, 263], 'children': [{'type': 'ObjectLiteral', 'range': [264, 276], 'children': [{'type': 'Property', 'key': '0', 'value': '1', 'range': [265, 267]}, {'type': 'Property', 'key': '1', 'value': '2', 'range': [269, 271]}, {'type': 'Property', 'key': '2', 'value': '3', 'range': [273, 275]}]}]}]}, {'type': 'AssertStatement', 'range': [278, 306], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [279, 290], 'children': [{'type': 'TupleLiteral', 'range': [281, 287], 'children': [{'type': 'Literal', 'value': '1', 'range': [282, 282]}, {'type': 'Literal', 'value': '2', 'range': [284, 284]}, {'type': 'Literal', 'value': '3', 'range': [286, 286]}]}, {'type': 'Type', 'value': 'dict', 'range': [289, 289]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [291, 292], 'children': [{'type': 'ObjectLiteral', 'range': [293, 305], 'children': [{'type': 'Property', 'key': '0', 'value': '1', 'range': [294, 296]}, {'type': 'Property', 'key': '1', 'value': '2', 'range': [298, 300]}, {'type': 'Property', 'key': '2', 'value': '3', 'range': [302, 304]}]}]}]}, {'type': 'ImportStatement', 'range': [308, 312], 'children': [{'type': 'ImportFrom', 'module': 'typing', 'names': [{'type': 'ImportSpecifier', 'name': 'List', 'range': [311, 311]}], 'range': [308, 312]}]}, {'type': 'AssertStatement', 'range': [314, 329], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [315, 323], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [317, 317]}, {'type': 'Type', 'value': 'List[int]', 'range': [319, 322]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [324, 325], 'children': [{'type': 'ArrayLiteral', 'range': [326, 328], 'children': [{'type': 'Literal', 'value': '5', 'range': [327, 327]}]}]}]}, {'type': 'AssertStatement', 'range': [330, 349], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [331, 339], 'children': [{'type': 'Literal', 'value': '"[5,4,2]"', 'range': [333, 333]}, {'type': 'Type', 'value': 'List[int]', 'range': [335, 338]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [340, 341], 'children': [{'type': 'ArrayLiteral', 'range': [342, 348], 'children': [{'type': 'Literal', 'value': '5', 'range': [343, 343]}, {'type': 'Literal', 'value': '4', 'range': [345, 345]}, {'type': 'Literal', 'value': '2', 'range': [347, 347]}]}]}]}, {'type': 'AssertStatement', 'range': [350, 375], 'children': [{'type': 'CallExpression', 'name': 'convert', 'range': [351, 365], 'children': [{'type': 'ArrayLiteral', 'range': [353, 359], 'children': [{'type': 'Literal', 'value': '5', 'range': [354, 354]}, {'type': 'Literal', 'value': '4', 'range': [356, 356]}, {'type': 'Literal', 'value': '2', 'range': [358, 358]}]}, {'type': 'Type', 'value': 'List[str]', 'range': [361, 364]}]}, {'type': 'BinaryExpression', 'operator': '==', 'range': [366, 367], 'children': [{'type': 'ArrayLiteral', 'range': [368, 374], 'children': [{'type': 'Literal', 'value': '"5"', 'range': [369, 369]}, {'type': 'Literal', 'value': '"4"', 'range': [371, 371]}, {'type': 'Literal', 'value': '"2"', 'range': [373, 373]}]}]}]}]}]}
2025-01-08 09:31:24,264 - INFO - Completed main AST analysis flow
2025-01-08 09:31:24,267 - INFO - Successfully processed chunk
2025-01-08 09:31:24,290 - INFO - Starting code generation from AST
2025-01-08 09:31:44,187 - INFO - Successfully generated code from AST
2025-01-08 09:31:44,188 - INFO - Starting static code similarity comparison
2025-01-08 09:31:44,190 - INFO - Static similarity result: {'final_score': 98.77, 'length_similarity': 99.81, 'token_similarity': 96.0, 'structure_similarity': 100.0, 'function_similarity': 100, 'complexity_similarity': 100.0, 'variable_similarity': 100}
