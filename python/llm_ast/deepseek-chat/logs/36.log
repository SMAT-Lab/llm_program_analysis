2025-01-08 09:19:33,145 - INFO - Processing sample 36
2025-01-08 09:19:33,145 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:19:45,035 - INFO - Successfully split code into 4 top-level declarations
2025-01-08 09:19:45,037 - INFO - Processing chunk #0 (size=24 chars, start_index=0)
2025-01-08 09:19:45,038 - INFO - Processing chunk #1 (size=1139 chars, start_index=7)
2025-01-08 09:19:45,038 - INFO - Processing chunk #2 (size=2 chars, start_index=73)
2025-01-08 09:19:45,039 - INFO - Processing chunk #3 (size=70 chars, start_index=75)
2025-01-08 09:19:45,050 - INFO - Processing chunk with 24 chars starting at index 0
2025-01-08 09:19:45,051 - INFO - Processing chunk with 1139 chars starting at index 7
2025-01-08 09:19:45,051 - INFO - Processing chunk with 2 chars starting at index 73
2025-01-08 09:19:45,052 - INFO - Processing chunk with 70 chars starting at index 75
2025-01-08 09:19:45,052 - INFO - Starting main AST analysis flow
2025-01-08 09:19:45,053 - INFO - Starting main AST analysis flow
2025-01-08 09:19:45,053 - INFO - Starting main AST analysis flow
2025-01-08 09:19:45,053 - INFO - Starting main AST analysis flow
2025-01-08 09:19:45,053 - INFO - Tokenized code into 7 tokens
2025-01-08 09:19:45,054 - INFO - Tokenized code into 66 tokens
2025-01-08 09:19:45,054 - INFO - Tokenized code into 2 tokens
2025-01-08 09:19:45,055 - INFO - Tokenized code into 18 tokens
2025-01-08 09:19:45,055 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:19:45,055 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:19:45,056 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:19:45,056 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:19:56,982 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 6], 'children': []}
2025-01-08 09:19:56,983 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:19:57,393 - INFO - Step 1 result: {'type': 'Program', 'name': 'binary_count_trailing_zeros', 'range': [7, 72], 'children': []}
2025-01-08 09:19:57,393 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:19:57,785 - INFO - Step 1 result: {'error': "Insufficient token data provided for AST analysis. The token list does not contain enough information to identify any top-level declarations in the 'cangjie' code."}
2025-01-08 09:19:57,786 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:19:59,915 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [75, 92], 'children': [{'type': 'IfStatement', 'name': '', 'range': [75, 81], 'children': []}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [82, 84], 'children': []}, {'type': 'ExpressionStatement', 'name': '', 'range': [86, 91], 'children': []}]}
2025-01-08 09:19:59,916 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:20:08,082 - INFO - Step 2 result: {'error': "Insufficient token data provided for AST analysis. The token list does not contain enough information to identify any top-level declarations or their inner content in the 'cangjie' code."}
2025-01-08 09:20:08,082 - INFO - Starting Step 3: AST simplification
2025-01-08 09:20:10,537 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [0, 6], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 3], 'children': [{'type': 'FromClause', 'name': 'math', 'range': [0, 1], 'children': []}, {'type': 'ImportClause', 'name': 'log2', 'range': [2, 3], 'children': []}]}]}
2025-01-08 09:20:10,538 - INFO - Starting Step 3: AST simplification
2025-01-08 09:20:15,427 - INFO - Step 3 result: {'error': "Insufficient token data provided for AST analysis. The token list does not contain enough information to identify any top-level declarations or their inner content in the 'cangjie' code."}
2025-01-08 09:20:15,427 - INFO - Starting Step 4: AST normalization
2025-01-08 09:20:18,096 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [0, 6], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 3], 'children': [{'type': 'FromClause', 'name': 'math', 'range': [0, 1], 'children': []}, {'type': 'ImportClause', 'name': 'log2', 'range': [2, 3], 'children': []}]}]}
2025-01-08 09:20:18,096 - INFO - Starting Step 4: AST normalization
2025-01-08 09:20:23,182 - INFO - Step 4 result: {'type': 'Error', 'name': 'InsufficientTokenData', 'range': [0, 0], 'children': []}
2025-01-08 09:20:23,182 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:20:24,170 - INFO - Step 2 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [75, 81], 'children': [{'type': 'Condition', 'name': '', 'range': [75, 80], 'children': [{'type': 'Variable', 'name': '__name__', 'range': [76, 76], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [77, 78], 'children': []}, {'type': 'StringLiteral', 'name': '"__main__"', 'range': [79, 79], 'children': []}]}]}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [82, 84], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [83, 83], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [86, 91], 'children': [{'type': 'CallExpression', 'name': '', 'range': [86, 90], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [86, 88], 'children': [{'type': 'Object', 'name': 'doctest', 'range': [86, 86], 'children': []}, {'type': 'Property', 'name': 'testmod', 'range': [88, 88], 'children': []}]}, {'type': 'Arguments', 'name': '', 'range': [89, 90], 'children': []}]}]}]}
2025-01-08 09:20:24,170 - INFO - Starting Step 3: AST simplification
2025-01-08 09:20:27,668 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [0, 6], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 3], 'children': [{'type': 'Literal', 'name': 'math', 'range': [0, 1], 'children': []}, {'type': 'Identifier', 'name': 'log2', 'range': [2, 3], 'children': []}]}]}
2025-01-08 09:20:27,668 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:20:32,748 - INFO - Step 5 result: {'type': 'Program', 'name': 'MainOrSomething', 'range': [0, 0], 'children': [{'type': 'Error', 'name': 'InsufficientTokenData', 'range': [0, 0], 'children': []}]}
2025-01-08 09:20:32,748 - INFO - Completed main AST analysis flow
2025-01-08 09:20:32,748 - INFO - Successfully processed chunk
2025-01-08 09:20:39,205 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [0, 6], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 3], 'children': [{'type': 'Literal', 'name': 'math', 'range': [0, 1], 'children': []}, {'type': 'Identifier', 'name': 'log2', 'range': [2, 3], 'children': []}]}]}
2025-01-08 09:20:39,206 - INFO - Completed main AST analysis flow
2025-01-08 09:20:39,206 - INFO - Successfully processed chunk
2025-01-08 09:20:39,619 - INFO - Step 2 result: {'type': 'Program', 'name': 'binary_count_trailing_zeros', 'range': [7, 72], 'children': [{'type': 'FunctionDeclaration', 'name': 'binary_count_trailing_zeros', 'range': [7, 72], 'children': [{'type': 'Parameter', 'name': 'a', 'range': [10, 12], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [16, 16], 'children': []}, {'type': 'Docstring', 'name': '""" \\n     Take in 1 integer, return a number that is \\n     the number of trailing zeros in binary representation of that number. \\n  \\n     >>> binary_count_trailing_zeros(25) \\n     0 \\n     >>> binary_count_trailing_zeros(36) \\n     2 \\n     >>> binary_count_trailing_zeros(16) \\n     4 \\n     >>> binary_count_trailing_zeros(58) \\n     1 \\n     >>> binary_count_trailing_zeros(4294967296) \\n     32 \\n     >>> binary_count_trailing_zeros(0) \\n     0 \\n     >>> binary_count_trailing_zeros(-10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input value must be a positive integer \\n     >>> binary_count_trailing_zeros(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be a \'int\' type \\n     >>> binary_count_trailing_zeros("0") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: \'<\' not supported between instances of \'str\' and \'int\' \\n     """', 'range': [19, 23], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [25, 36], 'children': [{'type': 'Condition', 'name': 'a < 0', 'range': [26, 28], 'children': []}, {'type': 'RaiseStatement', 'name': 'raise ValueError', 'range': [31, 35], 'children': [{'type': 'Message', 'name': '"Input value must be a positive integer"', 'range': [34, 34], 'children': []}]}]}, {'type': 'ElifStatement', 'name': 'elif', 'range': [37, 51], 'children': [{'type': 'Condition', 'name': 'isinstance(a, float)', 'range': [38, 43], 'children': []}, {'type': 'RaiseStatement', 'name': 'raise TypeError', 'range': [46, 50], 'children': [{'type': 'Message', 'name': '"Input value must be a \'int\' type"', 'range': [49, 49], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [52, 72], 'children': [{'type': 'ConditionalExpression', 'name': '0 if (a == 0) else int(log2(a & -a))', 'range': [53, 71], 'children': [{'type': 'Condition', 'name': 'a == 0', 'range': [56, 59], 'children': []}, {'type': 'TrueExpression', 'name': '0', 'range': [53, 53], 'children': []}, {'type': 'FalseExpression', 'name': 'int(log2(a & -a))', 'range': [62, 71], 'children': [{'type': 'FunctionCall', 'name': 'log2', 'range': [64, 70], 'children': [{'type': 'Argument', 'name': 'a & -a', 'range': [66, 69], 'children': []}]}]}]}]}]}]}
2025-01-08 09:20:39,619 - INFO - Starting Step 3: AST simplification
2025-01-08 09:20:43,961 - INFO - Step 3 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [75, 81], 'children': [{'type': 'Condition', 'name': '', 'range': [75, 80], 'children': [{'type': 'Variable', 'name': '__name__', 'range': [76, 76], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [77, 78], 'children': []}, {'type': 'StringLiteral', 'name': '"__main__"', 'range': [79, 79], 'children': []}]}]}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [82, 84], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [83, 83], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [86, 91], 'children': [{'type': 'CallExpression', 'name': '', 'range': [86, 90], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [86, 88], 'children': [{'type': 'Object', 'name': 'doctest', 'range': [86, 86], 'children': []}, {'type': 'Property', 'name': 'testmod', 'range': [88, 88], 'children': []}]}]}]}]}
2025-01-08 09:20:43,961 - INFO - Starting Step 4: AST normalization
2025-01-08 09:21:04,178 - INFO - Step 4 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [75, 81], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [75, 80], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [76, 76], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [77, 78], 'children': []}, {'type': 'Literal', 'name': '"__main__"', 'range': [79, 79], 'children': []}]}]}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [82, 84], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [83, 83], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [86, 91], 'children': [{'type': 'CallExpression', 'name': '', 'range': [86, 90], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [86, 88], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [86, 86], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [88, 88], 'children': []}]}]}]}]}
2025-01-08 09:21:04,178 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:21:17,162 - INFO - Step 3 result: {'type': 'Program', 'name': 'binary_count_trailing_zeros', 'range': [7, 72], 'children': [{'type': 'FunctionDeclaration', 'name': 'binary_count_trailing_zeros', 'range': [7, 72], 'children': [{'type': 'Parameter', 'name': 'a', 'range': [10, 12], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [16, 16], 'children': []}, {'type': 'Docstring', 'name': '""" \\n     Take in 1 integer, return a number that is \\n     the number of trailing zeros in binary representation of that number. \\n  \\n     >>> binary_count_trailing_zeros(25) \\n     0 \\n     >>> binary_count_trailing_zeros(36) \\n     2 \\n     >>> binary_count_trailing_zeros(16) \\n     4 \\n     >>> binary_count_trailing_zeros(58) \\n     1 \\n     >>> binary_count_trailing_zeros(4294967296) \\n     32 \\n     >>> binary_count_trailing_zeros(0) \\n     0 \\n     >>> binary_count_trailing_zeros(-10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input value must be a positive integer \\n     >>> binary_count_trailing_zeros(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be a \'int\' type \\n     >>> binary_count_trailing_zeros("0") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: \'<\' not supported between instances of \'str\' and \'int\' \\n     """', 'range': [19, 23], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [25, 36], 'children': [{'type': 'Condition', 'name': 'a < 0', 'range': [26, 28], 'children': []}, {'type': 'RaiseStatement', 'name': 'raise ValueError', 'range': [31, 35], 'children': [{'type': 'Message', 'name': '"Input value must be a positive integer"', 'range': [34, 34], 'children': []}]}]}, {'type': 'ElifStatement', 'name': 'elif', 'range': [37, 51], 'children': [{'type': 'Condition', 'name': 'isinstance(a, float)', 'range': [38, 43], 'children': []}, {'type': 'RaiseStatement', 'name': 'raise TypeError', 'range': [46, 50], 'children': [{'type': 'Message', 'name': '"Input value must be a \'int\' type"', 'range': [49, 49], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [52, 72], 'children': [{'type': 'ConditionalExpression', 'name': '0 if (a == 0) else int(log2(a & -a))', 'range': [53, 71], 'children': [{'type': 'Condition', 'name': 'a == 0', 'range': [56, 59], 'children': []}, {'type': 'TrueExpression', 'name': '0', 'range': [53, 53], 'children': []}, {'type': 'FalseExpression', 'name': 'int(log2(a & -a))', 'range': [62, 71], 'children': [{'type': 'FunctionCall', 'name': 'log2', 'range': [64, 70], 'children': [{'type': 'Argument', 'name': 'a & -a', 'range': [66, 69], 'children': []}]}]}]}]}]}]}
2025-01-08 09:21:17,162 - INFO - Starting Step 4: AST normalization
2025-01-08 09:21:23,429 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainOrSomething', 'range': [75, 91], 'children': [{'type': 'IfStatement', 'name': '', 'range': [75, 81], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [75, 80], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [76, 76], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [77, 78], 'children': []}, {'type': 'Literal', 'name': '"__main__"', 'range': [79, 79], 'children': []}]}]}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [82, 84], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [83, 83], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [86, 91], 'children': [{'type': 'CallExpression', 'name': '', 'range': [86, 90], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [86, 88], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [86, 86], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [88, 88], 'children': []}]}]}]}]}]}
2025-01-08 09:21:23,429 - INFO - Completed main AST analysis flow
2025-01-08 09:21:23,430 - INFO - Successfully processed chunk
2025-01-08 09:21:52,763 - INFO - Step 4 result: {'type': 'Program', 'name': 'binary_count_trailing_zeros', 'range': [7, 72], 'children': [{'type': 'FunctionDecl', 'name': 'binary_count_trailing_zeros', 'range': [7, 72], 'children': [{'type': 'Parameter', 'name': 'a', 'range': [10, 12], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [16, 16], 'children': []}, {'type': 'Docstring', 'name': '""" \\n     Take in 1 integer, return a number that is \\n     the number of trailing zeros in binary representation of that number. \\n  \\n     >>> binary_count_trailing_zeros(25) \\n     0 \\n     >>> binary_count_trailing_zeros(36) \\n     2 \\n     >>> binary_count_trailing_zeros(16) \\n     4 \\n     >>> binary_count_trailing_zeros(58) \\n     1 \\n     >>> binary_count_trailing_zeros(4294967296) \\n     32 \\n     >>> binary_count_trailing_zeros(0) \\n     0 \\n     >>> binary_count_trailing_zeros(-10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input value must be a positive integer \\n     >>> binary_count_trailing_zeros(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be a \'int\' type \\n     >>> binary_count_trailing_zeros("0") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: \'<\' not supported between instances of \'str\' and \'int\' \\n     """', 'range': [19, 23], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [25, 36], 'children': [{'type': 'BinaryExpression', 'name': 'a < 0', 'range': [26, 28], 'children': []}, {'type': 'RaiseStatement', 'name': 'raise ValueError', 'range': [31, 35], 'children': [{'type': 'Literal', 'name': '"Input value must be a positive integer"', 'range': [34, 34], 'children': []}]}]}, {'type': 'ElifStatement', 'name': 'elif', 'range': [37, 51], 'children': [{'type': 'CallExpression', 'name': 'isinstance(a, float)', 'range': [38, 43], 'children': []}, {'type': 'RaiseStatement', 'name': 'raise TypeError', 'range': [46, 50], 'children': [{'type': 'Literal', 'name': '"Input value must be a \'int\' type"', 'range': [49, 49], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [52, 72], 'children': [{'type': 'ConditionalExpression', 'name': '0 if (a == 0) else int(log2(a & -a))', 'range': [53, 71], 'children': [{'type': 'BinaryExpression', 'name': 'a == 0', 'range': [56, 59], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [53, 53], 'children': []}, {'type': 'CallExpression', 'name': 'int(log2(a & -a))', 'range': [62, 71], 'children': [{'type': 'CallExpression', 'name': 'log2', 'range': [64, 70], 'children': [{'type': 'BinaryExpression', 'name': 'a & -a', 'range': [66, 69], 'children': []}]}]}]}]}]}]}
2025-01-08 09:21:52,764 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:22:27,483 - INFO - Step 5 result: {'type': 'Program', 'name': 'binary_count_trailing_zeros', 'range': [7, 72], 'children': [{'type': 'FunctionDecl', 'name': 'binary_count_trailing_zeros', 'range': [7, 72], 'children': [{'type': 'Parameter', 'name': 'a', 'range': [10, 12], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [16, 16], 'children': []}, {'type': 'Docstring', 'name': '""" \\n     Take in 1 integer, return a number that is \\n     the number of trailing zeros in binary representation of that number. \\n  \\n     >>> binary_count_trailing_zeros(25) \\n     0 \\n     >>> binary_count_trailing_zeros(36) \\n     2 \\n     >>> binary_count_trailing_zeros(16) \\n     4 \\n     >>> binary_count_trailing_zeros(58) \\n     1 \\n     >>> binary_count_trailing_zeros(4294967296) \\n     32 \\n     >>> binary_count_trailing_zeros(0) \\n     0 \\n     >>> binary_count_trailing_zeros(-10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input value must be a positive integer \\n     >>> binary_count_trailing_zeros(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be a \'int\' type \\n     >>> binary_count_trailing_zeros("0") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: \'<\' not supported between instances of \'str\' and \'int\' \\n     """', 'range': [19, 23], 'children': []}, {'type': 'IfStatement', 'name': 'if', 'range': [25, 36], 'children': [{'type': 'BinaryExpression', 'name': 'a < 0', 'range': [26, 28], 'children': []}, {'type': 'RaiseStatement', 'name': 'raise ValueError', 'range': [31, 35], 'children': [{'type': 'Literal', 'name': '"Input value must be a positive integer"', 'range': [34, 34], 'children': []}]}]}, {'type': 'ElifStatement', 'name': 'elif', 'range': [37, 51], 'children': [{'type': 'CallExpression', 'name': 'isinstance(a, float)', 'range': [38, 43], 'children': []}, {'type': 'RaiseStatement', 'name': 'raise TypeError', 'range': [46, 50], 'children': [{'type': 'Literal', 'name': '"Input value must be a \'int\' type"', 'range': [49, 49], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [52, 72], 'children': [{'type': 'ConditionalExpression', 'name': '0 if (a == 0) else int(log2(a & -a))', 'range': [53, 71], 'children': [{'type': 'BinaryExpression', 'name': 'a == 0', 'range': [56, 59], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [53, 53], 'children': []}, {'type': 'CallExpression', 'name': 'int(log2(a & -a))', 'range': [62, 71], 'children': [{'type': 'CallExpression', 'name': 'log2', 'range': [64, 70], 'children': [{'type': 'BinaryExpression', 'name': 'a & -a', 'range': [66, 69], 'children': []}]}]}]}]}]}]}
2025-01-08 09:22:27,483 - INFO - Completed main AST analysis flow
2025-01-08 09:22:27,484 - INFO - Successfully processed chunk
2025-01-08 09:22:27,493 - INFO - Starting code generation from AST
2025-01-08 09:22:47,227 - INFO - Successfully generated code from AST
2025-01-08 09:22:47,228 - INFO - Starting static code similarity comparison
2025-01-08 09:22:47,231 - INFO - Static similarity result: {'final_score': 90.75, 'length_similarity': 94.46, 'token_similarity': 86.84, 'structure_similarity': 92.11, 'function_similarity': 100, 'complexity_similarity': 75.0, 'variable_similarity': 100}
