2025-01-08 09:16:34,979 - INFO - Processing sample 14
2025-01-08 09:16:34,980 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:16:42,277 - INFO - Successfully split code into 2 top-level declarations
2025-01-08 09:16:42,278 - INFO - Processing chunk #0 (size=91 chars, start_index=0)
2025-01-08 09:16:42,278 - INFO - Processing chunk with 91 chars starting at index 0
2025-01-08 09:16:42,278 - INFO - Starting main AST analysis flow
2025-01-08 09:16:42,278 - INFO - Tokenized code into 18 tokens
2025-01-08 09:16:42,278 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:42,279 - INFO - Processing chunk #1 (size=746 chars, start_index=18)
2025-01-08 09:16:42,279 - INFO - Processing chunk with 746 chars starting at index 18
2025-01-08 09:16:42,279 - INFO - Starting main AST analysis flow
2025-01-08 09:16:42,280 - INFO - Tokenized code into 191 tokens
2025-01-08 09:16:42,280 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:55,206 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [18, 208], 'children': [{'type': 'ClassDeclaration', 'name': 'TextFormatter', 'range': [18, 97], 'children': [{'type': 'MethodDeclaration', 'name': '__init__', 'range': [22, 97], 'children': []}]}, {'type': 'FunctionDeclaration', 'name': 'format_string', 'range': [99, 207], 'children': []}]}
2025-01-08 09:16:55,206 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:56,787 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 17], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 're', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 8], 'children': [{'type': 'ImportSpecifier', 'name': 'BaseLoader', 'range': [7, 7], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 15], 'children': [{'type': 'ImportSpecifier', 'name': 'SandboxedEnvironment', 'range': [14, 14], 'children': []}]}]}
2025-01-08 09:16:56,787 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:07,728 - INFO - Step 2 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 're', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 8], 'children': [{'type': 'ImportSpecifier', 'name': 'BaseLoader', 'range': [7, 7], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 15], 'children': [{'type': 'ImportSpecifier', 'name': 'SandboxedEnvironment', 'range': [14, 14], 'children': []}]}]}
2025-01-08 09:17:07,728 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:21,580 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [18, 208], 'children': [{'type': 'ClassDeclaration', 'name': 'TextFormatter', 'range': [18, 97], 'children': [{'type': 'MethodDeclaration', 'name': '__init__', 'range': [22, 97], 'children': [{'type': 'Comment', 'name': '# Create a sandboxed environment', 'range': [29, 34], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)', 'range': [35, 50], 'children': []}, {'type': 'Comment', 'name': '# Clear any registered filters, tests, and globals to minimize attack surface', 'range': [53, 67], 'children': []}, {'type': 'ExpressionStatement', 'name': 'self.env.filters.clear()', 'range': [68, 76], 'children': []}, {'type': 'ExpressionStatement', 'name': 'self.env.tests.clear()', 'range': [77, 85], 'children': []}, {'type': 'ExpressionStatement', 'name': 'self.env.globals.clear()', 'range': [86, 94], 'children': []}]}]}, {'type': 'FunctionDeclaration', 'name': 'format_string', 'range': [99, 207], 'children': [{'type': 'Comment', 'name': '# For python.format compatibility: replace all {...} with {{...}}.', 'range': [121, 143], 'children': []}, {'type': 'Comment', 'name': '# But avoid replacing {{...}} to {{{...}}}.', 'range': [144, 166], 'children': []}, {'type': 'AssignmentExpression', 'name': 'template_str = re.sub(r"(?<!{){[ a-zA-Z0-9_]+}", r"{\\g<0>}", template_str)', 'range': [167, 180], 'children': []}, {'type': 'AssignmentExpression', 'name': 'template = self.env.from_string(template_str)', 'range': [182, 191], 'children': []}, {'type': 'ReturnStatement', 'name': 'return template.render(values or {}, **kwargs)', 'range': [193, 206], 'children': []}]}]}
2025-01-08 09:17:21,580 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:23,064 - INFO - Step 3 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 're', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 8], 'children': [{'type': 'ImportSpecifier', 'name': 'BaseLoader', 'range': [7, 7], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 15], 'children': [{'type': 'ImportSpecifier', 'name': 'SandboxedEnvironment', 'range': [14, 14], 'children': []}]}]}
2025-01-08 09:17:23,065 - INFO - Starting Step 4: AST normalization
2025-01-08 09:17:38,530 - INFO - Step 4 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 're', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 8], 'children': [{'type': 'ImportSpecifier', 'name': 'BaseLoader', 'range': [7, 7], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 15], 'children': [{'type': 'ImportSpecifier', 'name': 'SandboxedEnvironment', 'range': [14, 14], 'children': []}]}]}
2025-01-08 09:17:38,531 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:17:51,598 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [18, 208], 'children': [{'type': 'ClassDeclaration', 'name': 'TextFormatter', 'range': [18, 97], 'children': [{'type': 'MethodDeclaration', 'name': '__init__', 'range': [22, 97], 'children': [{'type': 'Comment', 'name': '# Create a sandboxed environment', 'range': [29, 34], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)', 'range': [35, 50], 'children': []}, {'type': 'Comment', 'name': '# Clear any registered filters, tests, and globals to minimize attack surface', 'range': [53, 67], 'children': []}, {'type': 'ExpressionStatement', 'name': 'self.env.filters.clear()', 'range': [68, 76], 'children': []}, {'type': 'ExpressionStatement', 'name': 'self.env.tests.clear()', 'range': [77, 85], 'children': []}, {'type': 'ExpressionStatement', 'name': 'self.env.globals.clear()', 'range': [86, 94], 'children': []}]}]}, {'type': 'FunctionDeclaration', 'name': 'format_string', 'range': [99, 207], 'children': [{'type': 'Comment', 'name': '# For python.format compatibility: replace all {...} with {{...}}.', 'range': [121, 143], 'children': []}, {'type': 'Comment', 'name': '# But avoid replacing {{...}} to {{{...}}}.', 'range': [144, 166], 'children': []}, {'type': 'AssignmentExpression', 'name': 'template_str = re.sub(r"(?<!{){[ a-zA-Z0-9_]+}", r"{\\g<0>}", template_str)', 'range': [167, 180], 'children': []}, {'type': 'AssignmentExpression', 'name': 'template = self.env.from_string(template_str)', 'range': [182, 191], 'children': []}, {'type': 'ReturnStatement', 'name': 'return template.render(values or {}, **kwargs)', 'range': [193, 206], 'children': []}]}]}
2025-01-08 09:17:51,598 - INFO - Starting Step 4: AST normalization
2025-01-08 09:17:57,178 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainOrSomething', 'range': [0, 15], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 're', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 8], 'children': [{'type': 'ImportSpecifier', 'name': 'BaseLoader', 'range': [7, 7], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 15], 'children': [{'type': 'ImportSpecifier', 'name': 'SandboxedEnvironment', 'range': [14, 14], 'children': []}]}]}]}
2025-01-08 09:17:57,178 - INFO - Completed main AST analysis flow
2025-01-08 09:17:57,178 - INFO - Successfully processed chunk
2025-01-08 09:18:15,301 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [18, 208], 'children': [{'type': 'ClassDecl', 'name': 'TextFormatter', 'range': [18, 97], 'children': [{'type': 'MethodDecl', 'name': '__init__', 'range': [22, 97], 'children': [{'type': 'Comment', 'name': '# Create a sandboxed environment', 'range': [29, 34], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)', 'range': [35, 50], 'children': []}, {'type': 'Comment', 'name': '# Clear any registered filters, tests, and globals to minimize attack surface', 'range': [53, 67], 'children': []}, {'type': 'ExpressionStatement', 'name': 'self.env.filters.clear()', 'range': [68, 76], 'children': []}, {'type': 'ExpressionStatement', 'name': 'self.env.tests.clear()', 'range': [77, 85], 'children': []}, {'type': 'ExpressionStatement', 'name': 'self.env.globals.clear()', 'range': [86, 94], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'format_string', 'range': [99, 207], 'children': [{'type': 'Comment', 'name': '# For python.format compatibility: replace all {...} with {{...}}.', 'range': [121, 143], 'children': []}, {'type': 'Comment', 'name': '# But avoid replacing {{...}} to {{{...}}}.', 'range': [144, 166], 'children': []}, {'type': 'AssignmentExpression', 'name': 'template_str = re.sub(r"(?<!{){[ a-zA-Z0-9_]+}", r"{\\g<0>}", template_str)', 'range': [167, 180], 'children': []}, {'type': 'AssignmentExpression', 'name': 'template = self.env.from_string(template_str)', 'range': [182, 191], 'children': []}, {'type': 'ReturnStatement', 'name': 'return template.render(values or {}, **kwargs)', 'range': [193, 206], 'children': []}]}]}
2025-01-08 09:18:15,301 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:42,398 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [18, 208], 'children': [{'type': 'ClassDecl', 'name': 'TextFormatter', 'range': [18, 97], 'children': [{'type': 'MethodDecl', 'name': '__init__', 'range': [22, 97], 'children': [{'type': 'Comment', 'name': '# Create a sandboxed environment', 'range': [29, 34], 'children': []}, {'type': 'AssignmentExpression', 'name': 'self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)', 'range': [35, 50], 'children': []}, {'type': 'Comment', 'name': '# Clear any registered filters, tests, and globals to minimize attack surface', 'range': [53, 67], 'children': []}, {'type': 'ExpressionStatement', 'name': 'self.env.filters.clear()', 'range': [68, 76], 'children': []}, {'type': 'ExpressionStatement', 'name': 'self.env.tests.clear()', 'range': [77, 85], 'children': []}, {'type': 'ExpressionStatement', 'name': 'self.env.globals.clear()', 'range': [86, 94], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'format_string', 'range': [99, 207], 'children': [{'type': 'Comment', 'name': '# For python.format compatibility: replace all {...} with {{...}}.', 'range': [121, 143], 'children': []}, {'type': 'Comment', 'name': '# But avoid replacing {{...}} to {{{...}}}.', 'range': [144, 166], 'children': []}, {'type': 'AssignmentExpression', 'name': 'template_str = re.sub(r"(?<!{){[ a-zA-Z0-9_]+}", r"{\\g<0>}", template_str)', 'range': [167, 180], 'children': []}, {'type': 'AssignmentExpression', 'name': 'template = self.env.from_string(template_str)', 'range': [182, 191], 'children': []}, {'type': 'ReturnStatement', 'name': 'return template.render(values or {}, **kwargs)', 'range': [193, 206], 'children': []}]}]}
2025-01-08 09:18:42,398 - INFO - Completed main AST analysis flow
2025-01-08 09:18:42,398 - INFO - Successfully processed chunk
2025-01-08 09:18:42,406 - INFO - Starting code generation from AST
2025-01-08 09:18:51,792 - INFO - Successfully generated code from AST
2025-01-08 09:18:51,792 - INFO - Starting static code similarity comparison
2025-01-08 09:18:51,794 - INFO - Static similarity result: {'final_score': 88.2, 'length_similarity': 91.57, 'token_similarity': 94.29, 'structure_similarity': 64.71, 'function_similarity': 100, 'complexity_similarity': 100.0, 'variable_similarity': 100}
