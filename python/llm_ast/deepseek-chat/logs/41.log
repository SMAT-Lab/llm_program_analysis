2025-01-08 09:21:48,034 - INFO - Processing sample 41
2025-01-08 09:21:48,034 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:21:56,375 - INFO - Successfully split code into 4 top-level declarations
2025-01-08 09:21:56,378 - INFO - Processing chunk #0 (size=648 chars, start_index=0)
2025-01-08 09:21:56,379 - INFO - Processing chunk with 648 chars starting at index 0
2025-01-08 09:21:56,379 - INFO - Starting main AST analysis flow
2025-01-08 09:21:56,379 - INFO - Tokenized code into 23 tokens
2025-01-08 09:21:56,379 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:21:56,384 - INFO - Processing chunk #1 (size=1044 chars, start_index=23)
2025-01-08 09:21:56,384 - INFO - Processing chunk with 1044 chars starting at index 23
2025-01-08 09:21:56,384 - INFO - Starting main AST analysis flow
2025-01-08 09:21:56,385 - INFO - Tokenized code into 264 tokens
2025-01-08 09:21:56,385 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:21:56,391 - INFO - Processing chunk #2 (size=1229 chars, start_index=287)
2025-01-08 09:21:56,392 - INFO - Processing chunk with 1229 chars starting at index 287
2025-01-08 09:21:56,392 - INFO - Processing chunk #3 (size=39 chars, start_index=580)
2025-01-08 09:21:56,393 - INFO - Starting main AST analysis flow
2025-01-08 09:21:56,393 - INFO - Processing chunk with 39 chars starting at index 580
2025-01-08 09:21:56,394 - INFO - Tokenized code into 293 tokens
2025-01-08 09:21:56,394 - INFO - Starting main AST analysis flow
2025-01-08 09:21:56,395 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:21:56,395 - INFO - Tokenized code into 12 tokens
2025-01-08 09:21:56,396 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:22:00,774 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 22], 'children': []}
2025-01-08 09:22:00,775 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:22:00,889 - INFO - Step 1 result: {'type': 'Program', 'name': 'sort_blocks', 'range': [23, 286], 'children': []}
2025-01-08 09:22:00,889 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:22:02,475 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [580, 591], 'children': [{'type': 'IfStatement', 'name': '', 'range': [580, 586], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'main', 'range': [587, 591], 'children': []}]}
2025-01-08 09:22:02,475 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:22:02,583 - INFO - Step 1 result: {'type': 'Program', 'name': 'main', 'range': [287, 577], 'children': []}
2025-01-08 09:22:02,583 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:22:18,404 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [580, 591], 'children': [{'type': 'IfStatement', 'name': '', 'range': [580, 586], 'children': [{'type': 'Condition', 'name': '', 'range': [580, 584], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [581, 581], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [582, 583], 'children': []}, {'type': 'StringLiteral', 'name': '"__main__"', 'range': [584, 584], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [585, 586], 'children': []}]}, {'type': 'FunctionDeclaration', 'name': 'main', 'range': [587, 591], 'children': [{'type': 'FunctionCall', 'name': 'main', 'range': [587, 589], 'children': []}]}]}
2025-01-08 09:22:18,404 - INFO - Starting Step 3: AST simplification
2025-01-08 09:22:24,100 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [0, 22], 'children': [{'type': 'Shebang', 'name': '', 'range': [0, 8], 'children': [{'type': 'Token', 'name': '#', 'range': [0, 1], 'children': []}, {'type': 'Token', 'name': '!', 'range': [1, 2], 'children': []}, {'type': 'Token', 'name': '/', 'range': [2, 3], 'children': []}, {'type': 'Token', 'name': 'usr', 'range': [3, 6], 'children': []}, {'type': 'Token', 'name': '/', 'range': [6, 7], 'children': []}, {'type': 'Token', 'name': 'bin', 'range': [7, 10], 'children': []}, {'type': 'Token', 'name': '/', 'range': [10, 11], 'children': []}, {'type': 'Token', 'name': 'env', 'range': [11, 14], 'children': []}, {'type': 'Token', 'name': 'python', 'range': [14, 20], 'children': []}]}, {'type': 'EncodingDeclaration', 'name': '', 'range': [10, 16], 'children': [{'type': 'Token', 'name': '#', 'range': [10, 11], 'children': []}, {'type': 'Token', 'name': 'coding', 'range': [11, 17], 'children': []}, {'type': 'Token', 'name': ':', 'range': [17, 18], 'children': []}, {'type': 'Token', 'name': 'utf', 'range': [18, 21], 'children': []}, {'type': 'Token', 'name': '-', 'range': [21, 22], 'children': []}, {'type': 'Token', 'name': '8', 'range': [22, 23], 'children': []}]}, {'type': 'StringLiteral', 'name': '', 'range': [18, 20], 'children': [{'type': 'Token', 'name': '""', 'range': [18, 20], 'children': []}]}]}
2025-01-08 09:22:24,101 - INFO - Starting Step 3: AST simplification
2025-01-08 09:22:33,840 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [580, 591], 'children': [{'type': 'IfStatement', 'name': '', 'range': [580, 586], 'children': [{'type': 'Condition', 'name': '', 'range': [580, 584], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [581, 581], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [582, 583], 'children': []}, {'type': 'StringLiteral', 'name': '"__main__"', 'range': [584, 584], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [585, 586], 'children': []}]}, {'type': 'FunctionCall', 'name': 'main', 'range': [587, 589], 'children': []}]}
2025-01-08 09:22:33,840 - INFO - Starting Step 4: AST normalization
2025-01-08 09:22:41,729 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [0, 22], 'children': [{'type': 'Shebang', 'name': '', 'range': [0, 8], 'children': [{'type': 'Token', 'name': 'usr', 'range': [3, 6], 'children': []}, {'type': 'Token', 'name': 'bin', 'range': [7, 10], 'children': []}, {'type': 'Token', 'name': 'env', 'range': [11, 14], 'children': []}, {'type': 'Token', 'name': 'python', 'range': [14, 20], 'children': []}]}, {'type': 'EncodingDeclaration', 'name': '', 'range': [10, 16], 'children': [{'type': 'Token', 'name': 'coding', 'range': [11, 17], 'children': []}, {'type': 'Token', 'name': 'utf', 'range': [18, 21], 'children': []}, {'type': 'Token', 'name': '8', 'range': [22, 23], 'children': []}]}, {'type': 'StringLiteral', 'name': '', 'range': [18, 20], 'children': []}]}
2025-01-08 09:22:41,729 - INFO - Starting Step 4: AST normalization
2025-01-08 09:22:45,621 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [580, 591], 'children': [{'type': 'IfStatement', 'name': '', 'range': [580, 586], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [580, 584], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [581, 581], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [582, 583], 'children': []}, {'type': 'Literal', 'name': '"__main__"', 'range': [584, 584], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [585, 586], 'children': []}]}, {'type': 'CallExpression', 'name': 'main', 'range': [587, 589], 'children': []}]}
2025-01-08 09:22:45,622 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:22:56,920 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [0, 22], 'children': [{'type': 'Shebang', 'name': '', 'range': [0, 8], 'children': [{'type': 'Identifier', 'name': 'usr', 'range': [3, 6], 'children': []}, {'type': 'Identifier', 'name': 'bin', 'range': [7, 10], 'children': []}, {'type': 'Identifier', 'name': 'env', 'range': [11, 14], 'children': []}, {'type': 'Identifier', 'name': 'python', 'range': [14, 20], 'children': []}]}, {'type': 'EncodingDeclaration', 'name': '', 'range': [10, 16], 'children': [{'type': 'Identifier', 'name': 'coding', 'range': [11, 17], 'children': []}, {'type': 'Identifier', 'name': 'utf', 'range': [18, 21], 'children': []}, {'type': 'Literal', 'name': '8', 'range': [22, 23], 'children': []}]}, {'type': 'Literal', 'name': '', 'range': [18, 20], 'children': []}]}
2025-01-08 09:22:56,920 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:23:03,676 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [580, 591], 'children': [{'type': 'IfStatement', 'name': '', 'range': [580, 586], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [580, 584], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [581, 581], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [582, 583], 'children': []}, {'type': 'Literal', 'name': '"__main__"', 'range': [584, 584], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [585, 586], 'children': []}]}, {'type': 'CallExpression', 'name': 'main', 'range': [587, 589], 'children': []}]}
2025-01-08 09:23:03,676 - INFO - Completed main AST analysis flow
2025-01-08 09:23:03,677 - INFO - Successfully processed chunk
2025-01-08 09:23:13,373 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [0, 22], 'children': [{'type': 'Shebang', 'name': '', 'range': [0, 8], 'children': [{'type': 'Identifier', 'name': 'usr', 'range': [3, 6], 'children': []}, {'type': 'Identifier', 'name': 'bin', 'range': [7, 10], 'children': []}, {'type': 'Identifier', 'name': 'env', 'range': [11, 14], 'children': []}, {'type': 'Identifier', 'name': 'python', 'range': [14, 20], 'children': []}]}, {'type': 'EncodingDeclaration', 'name': '', 'range': [10, 16], 'children': [{'type': 'Identifier', 'name': 'coding', 'range': [11, 17], 'children': []}, {'type': 'Identifier', 'name': 'utf', 'range': [18, 21], 'children': []}, {'type': 'Literal', 'name': '8', 'range': [22, 23], 'children': []}]}, {'type': 'Literal', 'name': '', 'range': [18, 20], 'children': []}]}
2025-01-08 09:23:13,373 - INFO - Completed main AST analysis flow
2025-01-08 09:23:13,374 - INFO - Successfully processed chunk
2025-01-08 09:24:24,748 - INFO - Step 2 result: {'type': 'Program', 'name': 'main', 'range': [287, 577], 'children': [{'type': 'FunctionDeclaration', 'name': 'main', 'range': [287, 577], 'children': [{'type': 'BlockStatement', 'range': [292, 577], 'children': [{'type': 'Comment', 'value': '# First, we load the current README into memory as an array of lines', 'range': [293, 308]}, {'type': 'WithStatement', 'range': [309, 327], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [310, 314]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [312, 322]}, {'type': 'Literal', 'value': "'r'", 'range': [314, 316]}], 'range': [310, 316]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'read_me', 'range': [320, 327]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me_file', 'range': [322, 333]}, 'property': {'type': 'Identifier', 'name': 'readlines', 'range': [324, 333]}, 'computed': False, 'range': [322, 333]}, 'arguments': [], 'range': [322, 335]}, 'range': [320, 335]}], 'kind': 'var', 'range': [320, 335]}]}, {'type': 'Comment', 'value': '# Then we cluster the lines together as blocks', 'range': [329, 338]}, {'type': 'Comment', 'value': '# Each block represents a collection of lines that should be sorted', 'range': [339, 351]}, {'type': 'Comment', 'value': '# This was done by assuming only links ([...](...)) are meant to be sorted', 'range': [352, 377]}, {'type': 'Comment', 'value': '# Clustering is done by indentation', 'range': [378, 384]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'blocks', 'range': [385, 390]}, 'init': {'type': 'ArrayExpression', 'elements': [], 'range': [387, 389]}, 'range': [385, 389]}], 'kind': 'var', 'range': [385, 389]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'last_indent', 'range': [390, 401]}, 'init': {'type': 'Literal', 'value': 'None', 'range': [392, 396]}, 'range': [390, 396]}], 'kind': 'var', 'range': [390, 396]}, {'type': 'ForStatement', 'range': [394, 492], 'children': [{'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'line', 'range': [395, 399]}, 'init': None, 'range': [395, 399]}], 'kind': 'var', 'range': [395, 399]}, {'type': 'Identifier', 'name': 'read_me', 'range': [397, 404]}, {'type': 'BlockStatement', 'range': [399, 492], 'children': [{'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 's_line', 'range': [400, 406]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'line', 'range': [402, 406]}, 'property': {'type': 'Identifier', 'name': 'lstrip', 'range': [404, 410]}, 'computed': False, 'range': [402, 410]}, 'arguments': [], 'range': [402, 412]}, 'range': [400, 412]}], 'kind': 'var', 'range': [400, 412]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'indent', 'range': [408, 414]}, 'init': {'type': 'BinaryExpression', 'operator': '-', 'left': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [410, 413]}, 'arguments': [{'type': 'Identifier', 'name': 'line', 'range': [412, 416]}], 'range': [410, 417]}, 'right': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [415, 418]}, 'arguments': [{'type': 'Identifier', 'name': 's_line', 'range': [417, 423]}], 'range': [415, 424]}, 'range': [410, 424]}, 'range': [408, 424]}], 'kind': 'var', 'range': [408, 424]}, {'type': 'IfStatement', 'test': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'any', 'range': [422, 425]}, 'arguments': [{'type': 'ArrayExpression', 'elements': [{'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 's_line', 'range': [425, 430]}, 'property': {'type': 'Identifier', 'name': 'startswith', 'range': [427, 437]}, 'computed': False, 'range': [425, 437]}, 'arguments': [{'type': 'Identifier', 'name': 's', 'range': [429, 430]}], 'range': [425, 431]}], 'range': [424, 439]}], 'range': [422, 440]}, 'consequent': {'type': 'BlockStatement', 'range': [441, 472], 'children': [{'type': 'IfStatement', 'test': {'type': 'BinaryExpression', 'operator': '==', 'left': {'type': 'Identifier', 'name': 'indent', 'range': [444, 450]}, 'right': {'type': 'Identifier', 'name': 'last_indent', 'range': [446, 456]}, 'range': [444, 456]}, 'consequent': {'type': 'BlockStatement', 'range': [448, 460], 'children': [{'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [450, 455]}, 'property': {'type': 'Literal', 'value': '-1', 'range': [452, 454]}, 'computed': True, 'range': [450, 455]}, 'property': {'type': 'Identifier', 'name': 'append', 'range': [456, 462]}, 'computed': False, 'range': [450, 462]}, 'arguments': [{'type': 'Identifier', 'name': 'line', 'range': [458, 462]}], 'range': [450, 463]}, 'range': [450, 463]}]}, 'alternate': {'type': 'BlockStatement', 'range': [462, 472], 'children': [{'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [464, 469]}, 'property': {'type': 'Identifier', 'name': 'append', 'range': [466, 472]}, 'computed': False, 'range': [464, 472]}, 'arguments': [{'type': 'ArrayExpression', 'elements': [{'type': 'Identifier', 'name': 'line', 'range': [469, 473]}], 'range': [468, 474]}], 'range': [464, 475]}, 'range': [464, 475]}]}, 'range': [444, 475]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'last_indent', 'range': [473, 483]}, 'right': {'type': 'Identifier', 'name': 'indent', 'range': [475, 480]}, 'range': [473, 480]}, 'range': [473, 480]}]}, 'alternate': {'type': 'BlockStatement', 'range': [478, 488], 'children': [{'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [480, 485]}, 'property': {'type': 'Identifier', 'name': 'append', 'range': [482, 488]}, 'computed': False, 'range': [480, 488]}, 'arguments': [{'type': 'ArrayExpression', 'elements': [{'type': 'Identifier', 'name': 'line', 'range': [485, 489]}], 'range': [484, 490]}], 'range': [480, 491]}, 'range': [480, 491]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'last_indent', 'range': [489, 499]}, 'right': {'type': 'Literal', 'value': 'None', 'range': [491, 495]}, 'range': [489, 495]}, 'range': [489, 495]}]}, 'range': [422, 495]}]}]}, {'type': 'WithStatement', 'range': [494, 564], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [495, 499]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [497, 507]}, {'type': 'Literal', 'value': "'w+'", 'range': [499, 503]}], 'range': [495, 503]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'sorted_file', 'range': [502, 513]}, 'init': None, 'range': [502, 513]}], 'kind': 'var', 'range': [502, 513]}, {'type': 'BlockStatement', 'range': [504, 564], 'children': [{'type': 'Comment', 'value': '# Then all of the blocks are sorted individually', 'range': [505, 514]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'blocks', 'range': [515, 520]}, 'right': {'type': 'ArrayExpression', 'elements': [{'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [519, 521]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [521, 525]}, 'computed': False, 'range': [519, 525]}, 'arguments': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'sorted', 'range': [523, 529]}, 'arguments': [{'type': 'Identifier', 'name': 'block', 'range': [525, 529]}, {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'key', 'range': [527, 530]}, 'right': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'str', 'range': [529, 532]}, 'property': {'type': 'Identifier', 'name': 'lower', 'range': [531, 536]}, 'computed': False, 'range': [529, 536]}, 'range': [527, 536]}], 'range': [523, 537]}], 'range': [519, 538]}], 'range': [518, 539]}, 'range': [515, 539]}, 'range': [515, 539]}, {'type': 'Comment', 'value': '# And the result is written back to README.md', 'range': [541, 552]}, {'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'sorted_file', 'range': [553, 563]}, 'property': {'type': 'Identifier', 'name': 'write', 'range': [555, 560]}, 'computed': False, 'range': [553, 560]}, 'arguments': [{'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [557, 559]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [559, 563]}, 'computed': False, 'range': [557, 563]}, 'arguments': [{'type': 'Identifier', 'name': 'blocks', 'range': [561, 566]}], 'range': [557, 567]}], 'range': [553, 567]}, 'range': [553, 567]}]}]}, {'type': 'Comment', 'value': '# Then we call the sorting method', 'range': [566, 577]}, {'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'sort_blocks', 'range': [574, 584]}, 'arguments': [], 'range': [574, 586]}, 'range': [574, 586]}]}]}]}
2025-01-08 09:24:24,749 - INFO - Starting Step 3: AST simplification
2025-01-08 09:24:43,478 - INFO - Step 2 result: {'type': 'Program', 'name': 'sort_blocks', 'range': [23, 286], 'children': [{'type': 'FunctionDeclaration', 'name': 'sort_blocks', 'range': [23, 286], 'children': [{'type': 'BlockStatement', 'range': [28, 286], 'children': [{'type': 'Comment', 'value': 'First, we load the current README into memory', 'range': [29, 39]}, {'type': 'WithStatement', 'range': [40, 58], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [41, 45]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [43, 53]}, {'type': 'Literal', 'value': "'r'", 'range': [45, 47]}], 'range': [41, 47]}, {'type': 'VariableDeclaration', 'kind': 'as', 'range': [47, 58], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'read_me_file', 'range': [48, 60]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me_file', 'range': [53, 65]}, 'property': {'type': 'Identifier', 'name': 'read', 'range': [55, 59]}, 'computed': False, 'range': [53, 59]}, 'arguments': [], 'range': [53, 61]}, 'range': [48, 61]}]}]}, {'type': 'Comment', 'value': "Separating the 'table of contents' from the contents (blocks)", 'range': [60, 70]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [71, 87], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'table_of_contents', 'range': [71, 87]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [73, 75]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [75, 79]}, 'computed': False, 'range': [73, 79]}, 'arguments': [{'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me', 'range': [77, 83]}, 'property': {'type': 'Identifier', 'name': 'split', 'range': [79, 84]}, 'computed': False, 'range': [77, 84]}, {'type': 'Literal', 'value': "'- - -'", 'range': [81, 87]}], 'range': [73, 87]}, 'range': [71, 87]}]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [88, 103], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'blocks', 'range': [88, 94]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [90, 92]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [92, 96]}, 'computed': False, 'range': [90, 96]}, 'arguments': [{'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me', 'range': [94, 100]}, 'property': {'type': 'Identifier', 'name': 'split', 'range': [96, 101]}, 'computed': False, 'range': [94, 101]}, {'type': 'Literal', 'value': "'- - -'", 'range': [98, 104]}], 'range': [90, 104]}, 'range': [88, 104]}]}, {'type': 'ForStatement', 'range': [110, 157], 'children': [{'type': 'VariableDeclaration', 'kind': 'in', 'range': [111, 119], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'i', 'range': [111, 112]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'range', 'range': [113, 118]}, 'arguments': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [115, 118]}, 'arguments': [{'type': 'Identifier', 'name': 'blocks', 'range': [117, 123]}], 'range': [115, 123]}], 'range': [113, 123]}, 'range': [111, 123]}]}, {'type': 'BlockStatement', 'range': [121, 157], 'children': [{'type': 'IfStatement', 'range': [122, 140], 'test': {'type': 'BinaryExpression', 'operator': '==', 'left': {'type': 'Identifier', 'name': 'i', 'range': [123, 124]}, 'right': {'type': 'Literal', 'value': '0', 'range': [125, 126]}, 'range': [123, 126]}, 'consequent': {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [129, 135]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [131, 132]}, 'computed': True, 'range': [129, 132]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [134, 140]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [136, 137]}, 'computed': True, 'range': [134, 137]}, 'right': {'type': 'Literal', 'value': "'\\n'", 'range': [138, 142]}, 'range': [134, 142]}, 'range': [129, 142]}, 'range': [129, 142]}, 'alternate': None}, {'type': 'ElseStatement', 'range': [141, 157], 'consequent': {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [144, 150]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [146, 147]}, 'computed': True, 'range': [144, 147]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'Literal', 'value': "'# '", 'range': [149, 153]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [151, 157]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [153, 154]}, 'computed': True, 'range': [151, 154]}, 'right': {'type': 'Literal', 'value': "'\\n'", 'range': [155, 159]}, 'range': [151, 159]}, 'range': [149, 159]}, 'range': [144, 159]}, 'range': [144, 159]}}]}]}, {'type': 'Comment', 'value': 'Sorting the libraries', 'range': [159, 163]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [164, 178], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [164, 176]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'sorted', 'range': [166, 172]}, 'arguments': [{'type': 'MemberExpression', 'object': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [168, 174]}, 'property': {'type': 'Literal', 'value': '0', 'range': [170, 171]}, 'computed': True, 'range': [168, 171]}, 'property': {'type': 'Identifier', 'name': 'split', 'range': [172, 177]}, 'computed': False, 'range': [168, 177]}, {'type': 'Literal', 'value': "'##'", 'range': [175, 179]}], 'range': [166, 179]}, 'range': [164, 179]}]}, {'type': 'ForStatement', 'range': [179, 217], 'children': [{'type': 'VariableDeclaration', 'kind': 'in', 'range': [180, 188], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'i', 'range': [180, 181]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'range', 'range': [182, 187]}, 'arguments': [{'type': 'Literal', 'value': '1', 'range': [184, 185]}, {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [186, 189]}, 'arguments': [{'type': 'Identifier', 'name': 'inner_blocks', 'range': [188, 200]}], 'range': [186, 200]}], 'range': [182, 200]}, 'range': [180, 200]}]}, {'type': 'BlockStatement', 'range': [191, 217], 'children': [{'type': 'IfStatement', 'range': [193, 205], 'test': {'type': 'BinaryExpression', 'operator': '!=', 'left': {'type': 'MemberExpression', 'object': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [194, 206]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [196, 197]}, 'computed': True, 'range': [194, 197]}, 'property': {'type': 'Literal', 'value': '0', 'range': [198, 199]}, 'computed': True, 'range': [194, 199]}, 'right': {'type': 'Literal', 'value': "'#'", 'range': [201, 204]}, 'range': [194, 204]}, 'consequent': {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [206, 218]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [208, 209]}, 'computed': True, 'range': [206, 209]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'Literal', 'value': "'##'", 'range': [211, 215]}, 'right': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [213, 225]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [215, 216]}, 'computed': True, 'range': [213, 216]}, 'range': [211, 216]}, 'range': [206, 216]}, 'range': [206, 216]}, 'alternate': None}]}]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [218, 226], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [218, 230]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [220, 222]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [222, 226]}, 'computed': False, 'range': [220, 226]}, 'arguments': [{'type': 'Identifier', 'name': 'inner_blocks', 'range': [224, 236]}], 'range': [220, 236]}, 'range': [218, 236]}]}, {'type': 'Comment', 'value': 'Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file', 'range': [228, 246]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [247, 253]}, 'property': {'type': 'Literal', 'value': '0', 'range': [249, 250]}, 'computed': True, 'range': [247, 250]}, 'right': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [252, 264]}, 'range': [247, 264]}, 'range': [247, 253]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [254, 266], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'final_README', 'range': [254, 266]}, 'init': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'Identifier', 'name': 'table_of_contents', 'range': [256, 272]}, 'right': {'type': 'Literal', 'value': "'- - -'", 'range': [258, 266]}, 'range': [256, 266]}, 'right': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [260, 262]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [262, 266]}, 'computed': False, 'range': [260, 266]}, 'arguments': [{'type': 'Identifier', 'name': 'blocks', 'range': [264, 270]}], 'range': [260, 270]}, 'range': [256, 270]}, 'range': [254, 270]}]}, {'type': 'WithStatement', 'range': [268, 285], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [269, 273]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [271, 281]}, {'type': 'Literal', 'value': "'w+'", 'range': [273, 277]}], 'range': [269, 277]}, {'type': 'VariableDeclaration', 'kind': 'as', 'range': [277, 285], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'sorted_file', 'range': [276, 287]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'sorted_file', 'range': [279, 291]}, 'property': {'type': 'Identifier', 'name': 'write', 'range': [281, 286]}, 'computed': False, 'range': [279, 286]}, 'arguments': [{'type': 'Identifier', 'name': 'final_README', 'range': [283, 295]}], 'range': [279, 295]}, 'range': [276, 295]}]}]}]}]}]}
2025-01-08 09:24:43,478 - INFO - Starting Step 3: AST simplification
2025-01-08 09:26:43,333 - INFO - Step 3 result: {'type': 'Program', 'name': 'main', 'range': [287, 577], 'children': [{'type': 'FunctionDeclaration', 'name': 'main', 'range': [287, 577], 'children': [{'type': 'BlockStatement', 'range': [292, 577], 'children': [{'type': 'Comment', 'value': '# First, we load the current README into memory as an array of lines', 'range': [293, 308]}, {'type': 'WithStatement', 'range': [309, 327], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [310, 314]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [312, 322]}, {'type': 'Literal', 'value': "'r'", 'range': [314, 316]}], 'range': [310, 316]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'read_me', 'range': [320, 327]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me_file', 'range': [322, 333]}, 'property': {'type': 'Identifier', 'name': 'readlines', 'range': [324, 333]}, 'computed': False, 'range': [322, 333]}, 'arguments': [], 'range': [322, 335]}, 'range': [320, 335]}], 'kind': 'var', 'range': [320, 335]}]}, {'type': 'Comment', 'value': '# Then we cluster the lines together as blocks', 'range': [329, 338]}, {'type': 'Comment', 'value': '# Each block represents a collection of lines that should be sorted', 'range': [339, 351]}, {'type': 'Comment', 'value': '# This was done by assuming only links ([...](...)) are meant to be sorted', 'range': [352, 377]}, {'type': 'Comment', 'value': '# Clustering is done by indentation', 'range': [378, 384]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'blocks', 'range': [385, 390]}, 'init': {'type': 'ArrayExpression', 'elements': [], 'range': [387, 389]}, 'range': [385, 389]}], 'kind': 'var', 'range': [385, 389]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'last_indent', 'range': [390, 401]}, 'init': {'type': 'Literal', 'value': 'None', 'range': [392, 396]}, 'range': [390, 396]}], 'kind': 'var', 'range': [390, 396]}, {'type': 'ForStatement', 'range': [394, 492], 'children': [{'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'line', 'range': [395, 399]}, 'init': None, 'range': [395, 399]}], 'kind': 'var', 'range': [395, 399]}, {'type': 'Identifier', 'name': 'read_me', 'range': [397, 404]}, {'type': 'BlockStatement', 'range': [399, 492], 'children': [{'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 's_line', 'range': [400, 406]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'line', 'range': [402, 406]}, 'property': {'type': 'Identifier', 'name': 'lstrip', 'range': [404, 410]}, 'computed': False, 'range': [402, 410]}, 'arguments': [], 'range': [402, 412]}, 'range': [400, 412]}], 'kind': 'var', 'range': [400, 412]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'indent', 'range': [408, 414]}, 'init': {'type': 'BinaryExpression', 'operator': '-', 'left': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [410, 413]}, 'arguments': [{'type': 'Identifier', 'name': 'line', 'range': [412, 416]}], 'range': [410, 417]}, 'right': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [415, 418]}, 'arguments': [{'type': 'Identifier', 'name': 's_line', 'range': [417, 423]}], 'range': [415, 424]}, 'range': [410, 424]}, 'range': [408, 424]}], 'kind': 'var', 'range': [408, 424]}, {'type': 'IfStatement', 'test': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'any', 'range': [422, 425]}, 'arguments': [{'type': 'ArrayExpression', 'elements': [{'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 's_line', 'range': [425, 430]}, 'property': {'type': 'Identifier', 'name': 'startswith', 'range': [427, 437]}, 'computed': False, 'range': [425, 437]}, 'arguments': [{'type': 'Identifier', 'name': 's', 'range': [429, 430]}], 'range': [425, 431]}], 'range': [424, 439]}], 'range': [422, 440]}, 'consequent': {'type': 'BlockStatement', 'range': [441, 472], 'children': [{'type': 'IfStatement', 'test': {'type': 'BinaryExpression', 'operator': '==', 'left': {'type': 'Identifier', 'name': 'indent', 'range': [444, 450]}, 'right': {'type': 'Identifier', 'name': 'last_indent', 'range': [446, 456]}, 'range': [444, 456]}, 'consequent': {'type': 'BlockStatement', 'range': [448, 460], 'children': [{'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [450, 455]}, 'property': {'type': 'Literal', 'value': '-1', 'range': [452, 454]}, 'computed': True, 'range': [450, 455]}, 'property': {'type': 'Identifier', 'name': 'append', 'range': [456, 462]}, 'computed': False, 'range': [450, 462]}, 'arguments': [{'type': 'Identifier', 'name': 'line', 'range': [458, 462]}], 'range': [450, 463]}, 'range': [450, 463]}]}, 'alternate': {'type': 'BlockStatement', 'range': [462, 472], 'children': [{'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [464, 469]}, 'property': {'type': 'Identifier', 'name': 'append', 'range': [466, 472]}, 'computed': False, 'range': [464, 472]}, 'arguments': [{'type': 'ArrayExpression', 'elements': [{'type': 'Identifier', 'name': 'line', 'range': [469, 473]}], 'range': [468, 474]}], 'range': [464, 475]}, 'range': [464, 475]}]}, 'range': [444, 475]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'last_indent', 'range': [473, 483]}, 'right': {'type': 'Identifier', 'name': 'indent', 'range': [475, 480]}, 'range': [473, 480]}, 'range': [473, 480]}]}, 'alternate': {'type': 'BlockStatement', 'range': [478, 488], 'children': [{'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [480, 485]}, 'property': {'type': 'Identifier', 'name': 'append', 'range': [482, 488]}, 'computed': False, 'range': [480, 488]}, 'arguments': [{'type': 'ArrayExpression', 'elements': [{'type': 'Identifier', 'name': 'line', 'range': [485, 489]}], 'range': [484, 490]}], 'range': [480, 491]}, 'range': [480, 491]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'last_indent', 'range': [489, 499]}, 'right': {'type': 'Literal', 'value': 'None', 'range': [491, 495]}, 'range': [489, 495]}, 'range': [489, 495]}]}, 'range': [422, 495]}]}]}, {'type': 'WithStatement', 'range': [494, 564], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [495, 499]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [497, 507]}, {'type': 'Literal', 'value': "'w+'", 'range': [499, 503]}], 'range': [495, 503]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'sorted_file', 'range': [502, 513]}, 'init': None, 'range': [502, 513]}], 'kind': 'var', 'range': [502, 513]}, {'type': 'BlockStatement', 'range': [504, 564], 'children': [{'type': 'Comment', 'value': '# Then all of the blocks are sorted individually', 'range': [505, 514]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'blocks', 'range': [515, 520]}, 'right': {'type': 'ArrayExpression', 'elements': [{'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [519, 521]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [521, 525]}, 'computed': False, 'range': [519, 525]}, 'arguments': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'sorted', 'range': [523, 529]}, 'arguments': [{'type': 'Identifier', 'name': 'block', 'range': [525, 529]}, {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'key', 'range': [527, 530]}, 'right': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'str', 'range': [529, 532]}, 'property': {'type': 'Identifier', 'name': 'lower', 'range': [531, 536]}, 'computed': False, 'range': [529, 536]}, 'range': [527, 536]}], 'range': [523, 537]}], 'range': [519, 538]}], 'range': [518, 539]}, 'range': [515, 539]}, 'range': [515, 539]}, {'type': 'Comment', 'value': '# And the result is written back to README.md', 'range': [541, 552]}, {'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'sorted_file', 'range': [553, 563]}, 'property': {'type': 'Identifier', 'name': 'write', 'range': [555, 560]}, 'computed': False, 'range': [553, 560]}, 'arguments': [{'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [557, 559]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [559, 563]}, 'computed': False, 'range': [557, 563]}, 'arguments': [{'type': 'Identifier', 'name': 'blocks', 'range': [561, 566]}], 'range': [557, 567]}], 'range': [553, 567]}, 'range': [553, 567]}]}]}, {'type': 'Comment', 'value': '# Then we call the sorting method', 'range': [566, 577]}, {'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'sort_blocks', 'range': [574, 584]}, 'arguments': [], 'range': [574, 586]}, 'range': [574, 586]}]}]}]}
2025-01-08 09:26:43,333 - INFO - Starting Step 4: AST normalization
2025-01-08 09:27:37,348 - INFO - Step 3 result: {'type': 'Program', 'name': 'sort_blocks', 'range': [23, 286], 'children': [{'type': 'FunctionDeclaration', 'name': 'sort_blocks', 'range': [23, 286], 'children': [{'type': 'BlockStatement', 'range': [28, 286], 'children': [{'type': 'Comment', 'value': 'First, we load the current README into memory', 'range': [29, 39]}, {'type': 'WithStatement', 'range': [40, 58], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [41, 45]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [43, 53]}, {'type': 'Literal', 'value': "'r'", 'range': [45, 47]}], 'range': [41, 47]}, {'type': 'VariableDeclaration', 'kind': 'as', 'range': [47, 58], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'read_me_file', 'range': [48, 60]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me_file', 'range': [53, 65]}, 'property': {'type': 'Identifier', 'name': 'read', 'range': [55, 59]}, 'computed': False, 'range': [53, 59]}, 'arguments': [], 'range': [53, 61]}, 'range': [48, 61]}]}]}, {'type': 'Comment', 'value': "Separating the 'table of contents' from the contents (blocks)", 'range': [60, 70]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [71, 87], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'table_of_contents', 'range': [71, 87]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [73, 75]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [75, 79]}, 'computed': False, 'range': [73, 79]}, 'arguments': [{'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me', 'range': [77, 83]}, 'property': {'type': 'Identifier', 'name': 'split', 'range': [79, 84]}, 'computed': False, 'range': [77, 84]}, {'type': 'Literal', 'value': "'- - -'", 'range': [81, 87]}], 'range': [73, 87]}, 'range': [71, 87]}]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [88, 103], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'blocks', 'range': [88, 94]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [90, 92]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [92, 96]}, 'computed': False, 'range': [90, 96]}, 'arguments': [{'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me', 'range': [94, 100]}, 'property': {'type': 'Identifier', 'name': 'split', 'range': [96, 101]}, 'computed': False, 'range': [94, 101]}, {'type': 'Literal', 'value': "'- - -'", 'range': [98, 104]}], 'range': [90, 104]}, 'range': [88, 104]}]}, {'type': 'ForStatement', 'range': [110, 157], 'children': [{'type': 'VariableDeclaration', 'kind': 'in', 'range': [111, 119], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'i', 'range': [111, 112]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'range', 'range': [113, 118]}, 'arguments': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [115, 118]}, 'arguments': [{'type': 'Identifier', 'name': 'blocks', 'range': [117, 123]}], 'range': [115, 123]}], 'range': [113, 123]}, 'range': [111, 123]}]}, {'type': 'BlockStatement', 'range': [121, 157], 'children': [{'type': 'IfStatement', 'range': [122, 140], 'test': {'type': 'BinaryExpression', 'operator': '==', 'left': {'type': 'Identifier', 'name': 'i', 'range': [123, 124]}, 'right': {'type': 'Literal', 'value': '0', 'range': [125, 126]}, 'range': [123, 126]}, 'consequent': {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [129, 135]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [131, 132]}, 'computed': True, 'range': [129, 132]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [134, 140]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [136, 137]}, 'computed': True, 'range': [134, 137]}, 'right': {'type': 'Literal', 'value': "'\\n'", 'range': [138, 142]}, 'range': [134, 142]}, 'range': [129, 142]}, 'range': [129, 142]}, 'alternate': None}, {'type': 'ElseStatement', 'range': [141, 157], 'consequent': {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [144, 150]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [146, 147]}, 'computed': True, 'range': [144, 147]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'Literal', 'value': "'# '", 'range': [149, 153]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [151, 157]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [153, 154]}, 'computed': True, 'range': [151, 154]}, 'right': {'type': 'Literal', 'value': "'\\n'", 'range': [155, 159]}, 'range': [151, 159]}, 'range': [149, 159]}, 'range': [144, 159]}, 'range': [144, 159]}}]}]}, {'type': 'Comment', 'value': 'Sorting the libraries', 'range': [159, 163]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [164, 178], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [164, 176]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'sorted', 'range': [166, 172]}, 'arguments': [{'type': 'MemberExpression', 'object': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [168, 174]}, 'property': {'type': 'Literal', 'value': '0', 'range': [170, 171]}, 'computed': True, 'range': [168, 171]}, 'property': {'type': 'Identifier', 'name': 'split', 'range': [172, 177]}, 'computed': False, 'range': [168, 177]}, {'type': 'Literal', 'value': "'##'", 'range': [175, 179]}], 'range': [166, 179]}, 'range': [164, 179]}]}, {'type': 'ForStatement', 'range': [179, 217], 'children': [{'type': 'VariableDeclaration', 'kind': 'in', 'range': [180, 188], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'i', 'range': [180, 181]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'range', 'range': [182, 187]}, 'arguments': [{'type': 'Literal', 'value': '1', 'range': [184, 185]}, {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [186, 189]}, 'arguments': [{'type': 'Identifier', 'name': 'inner_blocks', 'range': [188, 200]}], 'range': [186, 200]}], 'range': [182, 200]}, 'range': [180, 200]}]}, {'type': 'BlockStatement', 'range': [191, 217], 'children': [{'type': 'IfStatement', 'range': [193, 205], 'test': {'type': 'BinaryExpression', 'operator': '!=', 'left': {'type': 'MemberExpression', 'object': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [194, 206]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [196, 197]}, 'computed': True, 'range': [194, 197]}, 'property': {'type': 'Literal', 'value': '0', 'range': [198, 199]}, 'computed': True, 'range': [194, 199]}, 'right': {'type': 'Literal', 'value': "'#'", 'range': [201, 204]}, 'range': [194, 204]}, 'consequent': {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [206, 218]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [208, 209]}, 'computed': True, 'range': [206, 209]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'Literal', 'value': "'##'", 'range': [211, 215]}, 'right': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [213, 225]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [215, 216]}, 'computed': True, 'range': [213, 216]}, 'range': [211, 216]}, 'range': [206, 216]}, 'range': [206, 216]}, 'alternate': None}]}]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [218, 226], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [218, 230]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [220, 222]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [222, 226]}, 'computed': False, 'range': [220, 226]}, 'arguments': [{'type': 'Identifier', 'name': 'inner_blocks', 'range': [224, 236]}], 'range': [220, 236]}, 'range': [218, 236]}]}, {'type': 'Comment', 'value': 'Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file', 'range': [228, 246]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [247, 253]}, 'property': {'type': 'Literal', 'value': '0', 'range': [249, 250]}, 'computed': True, 'range': [247, 250]}, 'right': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [252, 264]}, 'range': [247, 264]}, 'range': [247, 253]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [254, 266], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'final_README', 'range': [254, 266]}, 'init': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'Identifier', 'name': 'table_of_contents', 'range': [256, 272]}, 'right': {'type': 'Literal', 'value': "'- - -'", 'range': [258, 266]}, 'range': [256, 266]}, 'right': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [260, 262]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [262, 266]}, 'computed': False, 'range': [260, 266]}, 'arguments': [{'type': 'Identifier', 'name': 'blocks', 'range': [264, 270]}], 'range': [260, 270]}, 'range': [256, 270]}, 'range': [254, 270]}]}, {'type': 'WithStatement', 'range': [268, 285], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [269, 273]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [271, 281]}, {'type': 'Literal', 'value': "'w+'", 'range': [273, 277]}], 'range': [269, 277]}, {'type': 'VariableDeclaration', 'kind': 'as', 'range': [277, 285], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'sorted_file', 'range': [276, 287]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'sorted_file', 'range': [279, 291]}, 'property': {'type': 'Identifier', 'name': 'write', 'range': [281, 286]}, 'computed': False, 'range': [279, 286]}, 'arguments': [{'type': 'Identifier', 'name': 'final_README', 'range': [283, 295]}], 'range': [279, 295]}, 'range': [276, 295]}]}]}]}]}]}
2025-01-08 09:27:37,348 - INFO - Starting Step 4: AST normalization
2025-01-08 09:29:10,527 - INFO - Step 4 result: {'type': 'Program', 'name': 'main', 'range': [287, 577], 'children': [{'type': 'FunctionDecl', 'name': 'main', 'range': [287, 577], 'children': [{'type': 'BlockStatement', 'range': [292, 577], 'children': [{'type': 'Comment', 'value': '# First, we load the current README into memory as an array of lines', 'range': [293, 308]}, {'type': 'WithStatement', 'range': [309, 327], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [310, 314]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [312, 322]}, {'type': 'Literal', 'value': "'r'", 'range': [314, 316]}], 'range': [310, 316]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'read_me', 'range': [320, 327]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me_file', 'range': [322, 333]}, 'property': {'type': 'Identifier', 'name': 'readlines', 'range': [324, 333]}, 'computed': False, 'range': [322, 333]}, 'arguments': [], 'range': [322, 335]}, 'range': [320, 335]}], 'kind': 'var', 'range': [320, 335]}]}, {'type': 'Comment', 'value': '# Then we cluster the lines together as blocks', 'range': [329, 338]}, {'type': 'Comment', 'value': '# Each block represents a collection of lines that should be sorted', 'range': [339, 351]}, {'type': 'Comment', 'value': '# This was done by assuming only links ([...](...)) are meant to be sorted', 'range': [352, 377]}, {'type': 'Comment', 'value': '# Clustering is done by indentation', 'range': [378, 384]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'blocks', 'range': [385, 390]}, 'init': {'type': 'ArrayExpression', 'elements': [], 'range': [387, 389]}, 'range': [385, 389]}], 'kind': 'var', 'range': [385, 389]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'last_indent', 'range': [390, 401]}, 'init': {'type': 'Literal', 'value': 'None', 'range': [392, 396]}, 'range': [390, 396]}], 'kind': 'var', 'range': [390, 396]}, {'type': 'ForStatement', 'range': [394, 492], 'children': [{'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'line', 'range': [395, 399]}, 'init': None, 'range': [395, 399]}], 'kind': 'var', 'range': [395, 399]}, {'type': 'Identifier', 'name': 'read_me', 'range': [397, 404]}, {'type': 'BlockStatement', 'range': [399, 492], 'children': [{'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 's_line', 'range': [400, 406]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'line', 'range': [402, 406]}, 'property': {'type': 'Identifier', 'name': 'lstrip', 'range': [404, 410]}, 'computed': False, 'range': [402, 410]}, 'arguments': [], 'range': [402, 412]}, 'range': [400, 412]}], 'kind': 'var', 'range': [400, 412]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'indent', 'range': [408, 414]}, 'init': {'type': 'BinaryExpression', 'operator': '-', 'left': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [410, 413]}, 'arguments': [{'type': 'Identifier', 'name': 'line', 'range': [412, 416]}], 'range': [410, 417]}, 'right': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [415, 418]}, 'arguments': [{'type': 'Identifier', 'name': 's_line', 'range': [417, 423]}], 'range': [415, 424]}, 'range': [410, 424]}, 'range': [408, 424]}], 'kind': 'var', 'range': [408, 424]}, {'type': 'IfStatement', 'test': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'any', 'range': [422, 425]}, 'arguments': [{'type': 'ArrayExpression', 'elements': [{'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 's_line', 'range': [425, 430]}, 'property': {'type': 'Identifier', 'name': 'startswith', 'range': [427, 437]}, 'computed': False, 'range': [425, 437]}, 'arguments': [{'type': 'Identifier', 'name': 's', 'range': [429, 430]}], 'range': [425, 431]}], 'range': [424, 439]}], 'range': [422, 440]}, 'consequent': {'type': 'BlockStatement', 'range': [441, 472], 'children': [{'type': 'IfStatement', 'test': {'type': 'BinaryExpression', 'operator': '==', 'left': {'type': 'Identifier', 'name': 'indent', 'range': [444, 450]}, 'right': {'type': 'Identifier', 'name': 'last_indent', 'range': [446, 456]}, 'range': [444, 456]}, 'consequent': {'type': 'BlockStatement', 'range': [448, 460], 'children': [{'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [450, 455]}, 'property': {'type': 'Literal', 'value': '-1', 'range': [452, 454]}, 'computed': True, 'range': [450, 455]}, 'property': {'type': 'Identifier', 'name': 'append', 'range': [456, 462]}, 'computed': False, 'range': [450, 462]}, 'arguments': [{'type': 'Identifier', 'name': 'line', 'range': [458, 462]}], 'range': [450, 463]}, 'range': [450, 463]}]}, 'alternate': {'type': 'BlockStatement', 'range': [462, 472], 'children': [{'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [464, 469]}, 'property': {'type': 'Identifier', 'name': 'append', 'range': [466, 472]}, 'computed': False, 'range': [464, 472]}, 'arguments': [{'type': 'ArrayExpression', 'elements': [{'type': 'Identifier', 'name': 'line', 'range': [469, 473]}], 'range': [468, 474]}], 'range': [464, 475]}, 'range': [464, 475]}]}, 'range': [444, 475]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'last_indent', 'range': [473, 483]}, 'right': {'type': 'Identifier', 'name': 'indent', 'range': [475, 480]}, 'range': [473, 480]}, 'range': [473, 480]}]}, 'alternate': {'type': 'BlockStatement', 'range': [478, 488], 'children': [{'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [480, 485]}, 'property': {'type': 'Identifier', 'name': 'append', 'range': [482, 488]}, 'computed': False, 'range': [480, 488]}, 'arguments': [{'type': 'ArrayExpression', 'elements': [{'type': 'Identifier', 'name': 'line', 'range': [485, 489]}], 'range': [484, 490]}], 'range': [480, 491]}, 'range': [480, 491]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'last_indent', 'range': [489, 499]}, 'right': {'type': 'Literal', 'value': 'None', 'range': [491, 495]}, 'range': [489, 495]}, 'range': [489, 495]}]}, 'range': [422, 495]}]}]}, {'type': 'WithStatement', 'range': [494, 564], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [495, 499]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [497, 507]}, {'type': 'Literal', 'value': "'w+'", 'range': [499, 503]}], 'range': [495, 503]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'sorted_file', 'range': [502, 513]}, 'init': None, 'range': [502, 513]}], 'kind': 'var', 'range': [502, 513]}, {'type': 'BlockStatement', 'range': [504, 564], 'children': [{'type': 'Comment', 'value': '# Then all of the blocks are sorted individually', 'range': [505, 514]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'blocks', 'range': [515, 520]}, 'right': {'type': 'ArrayExpression', 'elements': [{'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [519, 521]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [521, 525]}, 'computed': False, 'range': [519, 525]}, 'arguments': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'sorted', 'range': [523, 529]}, 'arguments': [{'type': 'Identifier', 'name': 'block', 'range': [525, 529]}, {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'key', 'range': [527, 530]}, 'right': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'str', 'range': [529, 532]}, 'property': {'type': 'Identifier', 'name': 'lower', 'range': [531, 536]}, 'computed': False, 'range': [529, 536]}, 'range': [527, 536]}], 'range': [523, 537]}], 'range': [519, 538]}], 'range': [518, 539]}, 'range': [515, 539]}, 'range': [515, 539]}, {'type': 'Comment', 'value': '# And the result is written back to README.md', 'range': [541, 552]}, {'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'sorted_file', 'range': [553, 563]}, 'property': {'type': 'Identifier', 'name': 'write', 'range': [555, 560]}, 'computed': False, 'range': [553, 560]}, 'arguments': [{'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [557, 559]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [559, 563]}, 'computed': False, 'range': [557, 563]}, 'arguments': [{'type': 'Identifier', 'name': 'blocks', 'range': [561, 566]}], 'range': [557, 567]}], 'range': [553, 567]}, 'range': [553, 567]}]}]}, {'type': 'Comment', 'value': '# Then we call the sorting method', 'range': [566, 577]}, {'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'sort_blocks', 'range': [574, 584]}, 'arguments': [], 'range': [574, 586]}, 'range': [574, 586]}]}]}]}
2025-01-08 09:29:10,527 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:30:16,027 - INFO - Step 4 result: {'type': 'Program', 'name': 'sort_blocks', 'range': [23, 286], 'children': [{'type': 'FunctionDecl', 'name': 'sort_blocks', 'range': [23, 286], 'children': [{'type': 'BlockStatement', 'range': [28, 286], 'children': [{'type': 'Comment', 'value': 'First, we load the current README into memory', 'range': [29, 39]}, {'type': 'WithStatement', 'range': [40, 58], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [41, 45]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [43, 53]}, {'type': 'Literal', 'value': "'r'", 'range': [45, 47]}], 'range': [41, 47]}, {'type': 'VariableDeclaration', 'kind': 'as', 'range': [47, 58], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'read_me_file', 'range': [48, 60]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me_file', 'range': [53, 65]}, 'property': {'type': 'Identifier', 'name': 'read', 'range': [55, 59]}, 'computed': False, 'range': [53, 59]}, 'arguments': [], 'range': [53, 61]}, 'range': [48, 61]}]}]}, {'type': 'Comment', 'value': "Separating the 'table of contents' from the contents (blocks)", 'range': [60, 70]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [71, 87], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'table_of_contents', 'range': [71, 87]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [73, 75]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [75, 79]}, 'computed': False, 'range': [73, 79]}, 'arguments': [{'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me', 'range': [77, 83]}, 'property': {'type': 'Identifier', 'name': 'split', 'range': [79, 84]}, 'computed': False, 'range': [77, 84]}, {'type': 'Literal', 'value': "'- - -'", 'range': [81, 87]}], 'range': [73, 87]}, 'range': [71, 87]}]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [88, 103], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'blocks', 'range': [88, 94]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [90, 92]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [92, 96]}, 'computed': False, 'range': [90, 96]}, 'arguments': [{'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me', 'range': [94, 100]}, 'property': {'type': 'Identifier', 'name': 'split', 'range': [96, 101]}, 'computed': False, 'range': [94, 101]}, {'type': 'Literal', 'value': "'- - -'", 'range': [98, 104]}], 'range': [90, 104]}, 'range': [88, 104]}]}, {'type': 'ForStatement', 'range': [110, 157], 'children': [{'type': 'VariableDeclaration', 'kind': 'in', 'range': [111, 119], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'i', 'range': [111, 112]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'range', 'range': [113, 118]}, 'arguments': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [115, 118]}, 'arguments': [{'type': 'Identifier', 'name': 'blocks', 'range': [117, 123]}], 'range': [115, 123]}], 'range': [113, 123]}, 'range': [111, 123]}]}, {'type': 'BlockStatement', 'range': [121, 157], 'children': [{'type': 'IfStatement', 'range': [122, 140], 'test': {'type': 'BinaryExpression', 'operator': '==', 'left': {'type': 'Identifier', 'name': 'i', 'range': [123, 124]}, 'right': {'type': 'Literal', 'value': '0', 'range': [125, 126]}, 'range': [123, 126]}, 'consequent': {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [129, 135]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [131, 132]}, 'computed': True, 'range': [129, 132]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [134, 140]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [136, 137]}, 'computed': True, 'range': [134, 137]}, 'right': {'type': 'Literal', 'value': "'\\n'", 'range': [138, 142]}, 'range': [134, 142]}, 'range': [129, 142]}, 'range': [129, 142]}, 'alternate': None}, {'type': 'ElseStatement', 'range': [141, 157], 'consequent': {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [144, 150]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [146, 147]}, 'computed': True, 'range': [144, 147]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'Literal', 'value': "'# '", 'range': [149, 153]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [151, 157]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [153, 154]}, 'computed': True, 'range': [151, 154]}, 'right': {'type': 'Literal', 'value': "'\\n'", 'range': [155, 159]}, 'range': [151, 159]}, 'range': [149, 159]}, 'range': [144, 159]}, 'range': [144, 159]}}]}]}, {'type': 'Comment', 'value': 'Sorting the libraries', 'range': [159, 163]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [164, 178], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [164, 176]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'sorted', 'range': [166, 172]}, 'arguments': [{'type': 'MemberExpression', 'object': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [168, 174]}, 'property': {'type': 'Literal', 'value': '0', 'range': [170, 171]}, 'computed': True, 'range': [168, 171]}, 'property': {'type': 'Identifier', 'name': 'split', 'range': [172, 177]}, 'computed': False, 'range': [168, 177]}, {'type': 'Literal', 'value': "'##'", 'range': [175, 179]}], 'range': [166, 179]}, 'range': [164, 179]}]}, {'type': 'ForStatement', 'range': [179, 217], 'children': [{'type': 'VariableDeclaration', 'kind': 'in', 'range': [180, 188], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'i', 'range': [180, 181]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'range', 'range': [182, 187]}, 'arguments': [{'type': 'Literal', 'value': '1', 'range': [184, 185]}, {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [186, 189]}, 'arguments': [{'type': 'Identifier', 'name': 'inner_blocks', 'range': [188, 200]}], 'range': [186, 200]}], 'range': [182, 200]}, 'range': [180, 200]}]}, {'type': 'BlockStatement', 'range': [191, 217], 'children': [{'type': 'IfStatement', 'range': [193, 205], 'test': {'type': 'BinaryExpression', 'operator': '!=', 'left': {'type': 'MemberExpression', 'object': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [194, 206]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [196, 197]}, 'computed': True, 'range': [194, 197]}, 'property': {'type': 'Literal', 'value': '0', 'range': [198, 199]}, 'computed': True, 'range': [194, 199]}, 'right': {'type': 'Literal', 'value': "'#'", 'range': [201, 204]}, 'range': [194, 204]}, 'consequent': {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [206, 218]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [208, 209]}, 'computed': True, 'range': [206, 209]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'Literal', 'value': "'##'", 'range': [211, 215]}, 'right': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [213, 225]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [215, 216]}, 'computed': True, 'range': [213, 216]}, 'range': [211, 216]}, 'range': [206, 216]}, 'range': [206, 216]}, 'alternate': None}]}]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [218, 226], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [218, 230]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [220, 222]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [222, 226]}, 'computed': False, 'range': [220, 226]}, 'arguments': [{'type': 'Identifier', 'name': 'inner_blocks', 'range': [224, 236]}], 'range': [220, 236]}, 'range': [218, 236]}]}, {'type': 'Comment', 'value': 'Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file', 'range': [228, 246]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [247, 253]}, 'property': {'type': 'Literal', 'value': '0', 'range': [249, 250]}, 'computed': True, 'range': [247, 250]}, 'right': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [252, 264]}, 'range': [247, 264]}, 'range': [247, 253]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [254, 266], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'final_README', 'range': [254, 266]}, 'init': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'Identifier', 'name': 'table_of_contents', 'range': [256, 272]}, 'right': {'type': 'Literal', 'value': "'- - -'", 'range': [258, 266]}, 'range': [256, 266]}, 'right': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [260, 262]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [262, 266]}, 'computed': False, 'range': [260, 266]}, 'arguments': [{'type': 'Identifier', 'name': 'blocks', 'range': [264, 270]}], 'range': [260, 270]}, 'range': [256, 270]}, 'range': [254, 270]}]}, {'type': 'WithStatement', 'range': [268, 285], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [269, 273]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [271, 281]}, {'type': 'Literal', 'value': "'w+'", 'range': [273, 277]}], 'range': [269, 277]}, {'type': 'VariableDeclaration', 'kind': 'as', 'range': [277, 285], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'sorted_file', 'range': [276, 287]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'sorted_file', 'range': [279, 291]}, 'property': {'type': 'Identifier', 'name': 'write', 'range': [281, 286]}, 'computed': False, 'range': [279, 286]}, 'arguments': [{'type': 'Identifier', 'name': 'final_README', 'range': [283, 295]}], 'range': [279, 295]}, 'range': [276, 295]}]}]}]}]}]}
2025-01-08 09:30:16,027 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:31:32,617 - INFO - Step 5 result: {'type': 'Program', 'name': 'main', 'range': [287, 577], 'children': [{'type': 'FunctionDecl', 'name': 'main', 'range': [287, 577], 'children': [{'type': 'BlockStatement', 'range': [292, 577], 'children': [{'type': 'Comment', 'value': '# First, we load the current README into memory as an array of lines', 'range': [293, 308]}, {'type': 'WithStatement', 'range': [309, 327], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [310, 314]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [312, 322]}, {'type': 'Literal', 'value': "'r'", 'range': [314, 316]}], 'range': [310, 316]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'read_me', 'range': [320, 327]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me_file', 'range': [322, 333]}, 'property': {'type': 'Identifier', 'name': 'readlines', 'range': [324, 333]}, 'computed': False, 'range': [322, 333]}, 'arguments': [], 'range': [322, 335]}, 'range': [320, 335]}], 'kind': 'var', 'range': [320, 335]}]}, {'type': 'Comment', 'value': '# Then we cluster the lines together as blocks', 'range': [329, 338]}, {'type': 'Comment', 'value': '# Each block represents a collection of lines that should be sorted', 'range': [339, 351]}, {'type': 'Comment', 'value': '# This was done by assuming only links ([...](...)) are meant to be sorted', 'range': [352, 377]}, {'type': 'Comment', 'value': '# Clustering is done by indentation', 'range': [378, 384]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'blocks', 'range': [385, 390]}, 'init': {'type': 'ArrayExpression', 'elements': [], 'range': [387, 389]}, 'range': [385, 389]}], 'kind': 'var', 'range': [385, 389]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'last_indent', 'range': [390, 401]}, 'init': {'type': 'Literal', 'value': 'None', 'range': [392, 396]}, 'range': [390, 396]}], 'kind': 'var', 'range': [390, 396]}, {'type': 'ForStatement', 'range': [394, 492], 'children': [{'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'line', 'range': [395, 399]}, 'init': None, 'range': [395, 399]}], 'kind': 'var', 'range': [395, 399]}, {'type': 'Identifier', 'name': 'read_me', 'range': [397, 404]}, {'type': 'BlockStatement', 'range': [399, 492], 'children': [{'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 's_line', 'range': [400, 406]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'line', 'range': [402, 406]}, 'property': {'type': 'Identifier', 'name': 'lstrip', 'range': [404, 410]}, 'computed': False, 'range': [402, 410]}, 'arguments': [], 'range': [402, 412]}, 'range': [400, 412]}], 'kind': 'var', 'range': [400, 412]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'indent', 'range': [408, 414]}, 'init': {'type': 'BinaryExpression', 'operator': '-', 'left': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [410, 413]}, 'arguments': [{'type': 'Identifier', 'name': 'line', 'range': [412, 416]}], 'range': [410, 417]}, 'right': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [415, 418]}, 'arguments': [{'type': 'Identifier', 'name': 's_line', 'range': [417, 423]}], 'range': [415, 424]}, 'range': [410, 424]}, 'range': [408, 424]}], 'kind': 'var', 'range': [408, 424]}, {'type': 'IfStatement', 'test': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'any', 'range': [422, 425]}, 'arguments': [{'type': 'ArrayExpression', 'elements': [{'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 's_line', 'range': [425, 430]}, 'property': {'type': 'Identifier', 'name': 'startswith', 'range': [427, 437]}, 'computed': False, 'range': [425, 437]}, 'arguments': [{'type': 'Identifier', 'name': 's', 'range': [429, 430]}], 'range': [425, 431]}], 'range': [424, 439]}], 'range': [422, 440]}, 'consequent': {'type': 'BlockStatement', 'range': [441, 472], 'children': [{'type': 'IfStatement', 'test': {'type': 'BinaryExpression', 'operator': '==', 'left': {'type': 'Identifier', 'name': 'indent', 'range': [444, 450]}, 'right': {'type': 'Identifier', 'name': 'last_indent', 'range': [446, 456]}, 'range': [444, 456]}, 'consequent': {'type': 'BlockStatement', 'range': [448, 460], 'children': [{'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [450, 455]}, 'property': {'type': 'Literal', 'value': '-1', 'range': [452, 454]}, 'computed': True, 'range': [450, 455]}, 'property': {'type': 'Identifier', 'name': 'append', 'range': [456, 462]}, 'computed': False, 'range': [450, 462]}, 'arguments': [{'type': 'Identifier', 'name': 'line', 'range': [458, 462]}], 'range': [450, 463]}, 'range': [450, 463]}]}, 'alternate': {'type': 'BlockStatement', 'range': [462, 472], 'children': [{'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [464, 469]}, 'property': {'type': 'Identifier', 'name': 'append', 'range': [466, 472]}, 'computed': False, 'range': [464, 472]}, 'arguments': [{'type': 'ArrayExpression', 'elements': [{'type': 'Identifier', 'name': 'line', 'range': [469, 473]}], 'range': [468, 474]}], 'range': [464, 475]}, 'range': [464, 475]}]}, 'range': [444, 475]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'last_indent', 'range': [473, 483]}, 'right': {'type': 'Identifier', 'name': 'indent', 'range': [475, 480]}, 'range': [473, 480]}, 'range': [473, 480]}]}, 'alternate': {'type': 'BlockStatement', 'range': [478, 488], 'children': [{'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [480, 485]}, 'property': {'type': 'Identifier', 'name': 'append', 'range': [482, 488]}, 'computed': False, 'range': [480, 488]}, 'arguments': [{'type': 'ArrayExpression', 'elements': [{'type': 'Identifier', 'name': 'line', 'range': [485, 489]}], 'range': [484, 490]}], 'range': [480, 491]}, 'range': [480, 491]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'last_indent', 'range': [489, 499]}, 'right': {'type': 'Literal', 'value': 'None', 'range': [491, 495]}, 'range': [489, 495]}, 'range': [489, 495]}]}, 'range': [422, 495]}]}]}, {'type': 'WithStatement', 'range': [494, 564], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [495, 499]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [497, 507]}, {'type': 'Literal', 'value': "'w+'", 'range': [499, 503]}], 'range': [495, 503]}, {'type': 'VariableDeclaration', 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'sorted_file', 'range': [502, 513]}, 'init': None, 'range': [502, 513]}], 'kind': 'var', 'range': [502, 513]}, {'type': 'BlockStatement', 'range': [504, 564], 'children': [{'type': 'Comment', 'value': '# Then all of the blocks are sorted individually', 'range': [505, 514]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'blocks', 'range': [515, 520]}, 'right': {'type': 'ArrayExpression', 'elements': [{'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [519, 521]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [521, 525]}, 'computed': False, 'range': [519, 525]}, 'arguments': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'sorted', 'range': [523, 529]}, 'arguments': [{'type': 'Identifier', 'name': 'block', 'range': [525, 529]}, {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'key', 'range': [527, 530]}, 'right': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'str', 'range': [529, 532]}, 'property': {'type': 'Identifier', 'name': 'lower', 'range': [531, 536]}, 'computed': False, 'range': [529, 536]}, 'range': [527, 536]}], 'range': [523, 537]}], 'range': [519, 538]}], 'range': [518, 539]}, 'range': [515, 539]}, 'range': [515, 539]}, {'type': 'Comment', 'value': '# And the result is written back to README.md', 'range': [541, 552]}, {'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'sorted_file', 'range': [553, 563]}, 'property': {'type': 'Identifier', 'name': 'write', 'range': [555, 560]}, 'computed': False, 'range': [553, 560]}, 'arguments': [{'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [557, 559]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [559, 563]}, 'computed': False, 'range': [557, 563]}, 'arguments': [{'type': 'Identifier', 'name': 'blocks', 'range': [561, 566]}], 'range': [557, 567]}], 'range': [553, 567]}, 'range': [553, 567]}]}]}, {'type': 'Comment', 'value': '# Then we call the sorting method', 'range': [566, 577]}, {'type': 'ExpressionStatement', 'expression': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'sort_blocks', 'range': [574, 584]}, 'arguments': [], 'range': [574, 586]}, 'range': [574, 586]}]}]}]}
2025-01-08 09:31:32,618 - INFO - Completed main AST analysis flow
2025-01-08 09:31:32,619 - INFO - Successfully processed chunk
2025-01-08 09:32:52,090 - INFO - Step 5 result: {'type': 'Program', 'name': 'sort_blocks', 'range': [23, 286], 'children': [{'type': 'FunctionDecl', 'name': 'sort_blocks', 'range': [23, 286], 'children': [{'type': 'BlockStatement', 'range': [28, 286], 'children': [{'type': 'Comment', 'value': 'First, we load the current README into memory', 'range': [29, 39]}, {'type': 'WithStatement', 'range': [40, 58], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [41, 45]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [43, 53]}, {'type': 'Literal', 'value': "'r'", 'range': [45, 47]}], 'range': [41, 47]}, {'type': 'VariableDeclaration', 'kind': 'as', 'range': [47, 58], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'read_me_file', 'range': [48, 60]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me_file', 'range': [53, 65]}, 'property': {'type': 'Identifier', 'name': 'read', 'range': [55, 59]}, 'computed': False, 'range': [53, 59]}, 'arguments': [], 'range': [53, 61]}, 'range': [48, 61]}]}]}, {'type': 'Comment', 'value': "Separating the 'table of contents' from the contents (blocks)", 'range': [60, 70]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [71, 87], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'table_of_contents', 'range': [71, 87]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [73, 75]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [75, 79]}, 'computed': False, 'range': [73, 79]}, 'arguments': [{'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me', 'range': [77, 83]}, 'property': {'type': 'Identifier', 'name': 'split', 'range': [79, 84]}, 'computed': False, 'range': [77, 84]}, {'type': 'Literal', 'value': "'- - -'", 'range': [81, 87]}], 'range': [73, 87]}, 'range': [71, 87]}]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [88, 103], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'blocks', 'range': [88, 94]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [90, 92]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [92, 96]}, 'computed': False, 'range': [90, 96]}, 'arguments': [{'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'read_me', 'range': [94, 100]}, 'property': {'type': 'Identifier', 'name': 'split', 'range': [96, 101]}, 'computed': False, 'range': [94, 101]}, {'type': 'Literal', 'value': "'- - -'", 'range': [98, 104]}], 'range': [90, 104]}, 'range': [88, 104]}]}, {'type': 'ForStatement', 'range': [110, 157], 'children': [{'type': 'VariableDeclaration', 'kind': 'in', 'range': [111, 119], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'i', 'range': [111, 112]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'range', 'range': [113, 118]}, 'arguments': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [115, 118]}, 'arguments': [{'type': 'Identifier', 'name': 'blocks', 'range': [117, 123]}], 'range': [115, 123]}], 'range': [113, 123]}, 'range': [111, 123]}]}, {'type': 'BlockStatement', 'range': [121, 157], 'children': [{'type': 'IfStatement', 'range': [122, 140], 'test': {'type': 'BinaryExpression', 'operator': '==', 'left': {'type': 'Identifier', 'name': 'i', 'range': [123, 124]}, 'right': {'type': 'Literal', 'value': '0', 'range': [125, 126]}, 'range': [123, 126]}, 'consequent': {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [129, 135]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [131, 132]}, 'computed': True, 'range': [129, 132]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [134, 140]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [136, 137]}, 'computed': True, 'range': [134, 137]}, 'right': {'type': 'Literal', 'value': "'\\n'", 'range': [138, 142]}, 'range': [134, 142]}, 'range': [129, 142]}, 'range': [129, 142]}, 'alternate': None}, {'type': 'ElseStatement', 'range': [141, 157], 'consequent': {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [144, 150]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [146, 147]}, 'computed': True, 'range': [144, 147]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'Literal', 'value': "'# '", 'range': [149, 153]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [151, 157]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [153, 154]}, 'computed': True, 'range': [151, 154]}, 'right': {'type': 'Literal', 'value': "'\\n'", 'range': [155, 159]}, 'range': [151, 159]}, 'range': [149, 159]}, 'range': [144, 159]}, 'range': [144, 159]}}]}]}, {'type': 'Comment', 'value': 'Sorting the libraries', 'range': [159, 163]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [164, 178], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [164, 176]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'sorted', 'range': [166, 172]}, 'arguments': [{'type': 'MemberExpression', 'object': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [168, 174]}, 'property': {'type': 'Literal', 'value': '0', 'range': [170, 171]}, 'computed': True, 'range': [168, 171]}, 'property': {'type': 'Identifier', 'name': 'split', 'range': [172, 177]}, 'computed': False, 'range': [168, 177]}, {'type': 'Literal', 'value': "'##'", 'range': [175, 179]}], 'range': [166, 179]}, 'range': [164, 179]}]}, {'type': 'ForStatement', 'range': [179, 217], 'children': [{'type': 'VariableDeclaration', 'kind': 'in', 'range': [180, 188], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'i', 'range': [180, 181]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'range', 'range': [182, 187]}, 'arguments': [{'type': 'Literal', 'value': '1', 'range': [184, 185]}, {'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'len', 'range': [186, 189]}, 'arguments': [{'type': 'Identifier', 'name': 'inner_blocks', 'range': [188, 200]}], 'range': [186, 200]}], 'range': [182, 200]}, 'range': [180, 200]}]}, {'type': 'BlockStatement', 'range': [191, 217], 'children': [{'type': 'IfStatement', 'range': [193, 205], 'test': {'type': 'BinaryExpression', 'operator': '!=', 'left': {'type': 'MemberExpression', 'object': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [194, 206]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [196, 197]}, 'computed': True, 'range': [194, 197]}, 'property': {'type': 'Literal', 'value': '0', 'range': [198, 199]}, 'computed': True, 'range': [194, 199]}, 'right': {'type': 'Literal', 'value': "'#'", 'range': [201, 204]}, 'range': [194, 204]}, 'consequent': {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [206, 218]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [208, 209]}, 'computed': True, 'range': [206, 209]}, 'right': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'Literal', 'value': "'##'", 'range': [211, 215]}, 'right': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [213, 225]}, 'property': {'type': 'Identifier', 'name': 'i', 'range': [215, 216]}, 'computed': True, 'range': [213, 216]}, 'range': [211, 216]}, 'range': [206, 216]}, 'range': [206, 216]}, 'alternate': None}]}]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [218, 226], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [218, 230]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [220, 222]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [222, 226]}, 'computed': False, 'range': [220, 226]}, 'arguments': [{'type': 'Identifier', 'name': 'inner_blocks', 'range': [224, 236]}], 'range': [220, 236]}, 'range': [218, 236]}]}, {'type': 'Comment', 'value': 'Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file', 'range': [228, 246]}, {'type': 'ExpressionStatement', 'expression': {'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'blocks', 'range': [247, 253]}, 'property': {'type': 'Literal', 'value': '0', 'range': [249, 250]}, 'computed': True, 'range': [247, 250]}, 'right': {'type': 'Identifier', 'name': 'inner_blocks', 'range': [252, 264]}, 'range': [247, 264]}, 'range': [247, 253]}, {'type': 'VariableDeclaration', 'kind': '=', 'range': [254, 266], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'final_README', 'range': [254, 266]}, 'init': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'BinaryExpression', 'operator': '+', 'left': {'type': 'Identifier', 'name': 'table_of_contents', 'range': [256, 272]}, 'right': {'type': 'Literal', 'value': "'- - -'", 'range': [258, 266]}, 'range': [256, 266]}, 'right': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Literal', 'value': "''", 'range': [260, 262]}, 'property': {'type': 'Identifier', 'name': 'join', 'range': [262, 266]}, 'computed': False, 'range': [260, 266]}, 'arguments': [{'type': 'Identifier', 'name': 'blocks', 'range': [264, 270]}], 'range': [260, 270]}, 'range': [256, 270]}, 'range': [254, 270]}]}, {'type': 'WithStatement', 'range': [268, 285], 'children': [{'type': 'CallExpression', 'callee': {'type': 'Identifier', 'name': 'open', 'range': [269, 273]}, 'arguments': [{'type': 'Literal', 'value': "'README.md'", 'range': [271, 281]}, {'type': 'Literal', 'value': "'w+'", 'range': [273, 277]}], 'range': [269, 277]}, {'type': 'VariableDeclaration', 'kind': 'as', 'range': [277, 285], 'declarations': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'sorted_file', 'range': [276, 287]}, 'init': {'type': 'CallExpression', 'callee': {'type': 'MemberExpression', 'object': {'type': 'Identifier', 'name': 'sorted_file', 'range': [279, 291]}, 'property': {'type': 'Identifier', 'name': 'write', 'range': [281, 286]}, 'computed': False, 'range': [279, 286]}, 'arguments': [{'type': 'Identifier', 'name': 'final_README', 'range': [283, 295]}], 'range': [279, 295]}, 'range': [276, 295]}]}]}]}]}]}
2025-01-08 09:32:52,090 - INFO - Completed main AST analysis flow
2025-01-08 09:32:52,091 - INFO - Successfully processed chunk
2025-01-08 09:32:52,135 - INFO - Starting code generation from AST
2025-01-08 10:03:00,348 - ERROR - Error in get_code_from_ast: Expecting value: line 30 column 1 (char 29)
2025-01-08 10:03:00,349 - INFO - Starting static code similarity comparison
2025-01-08 10:03:00,351 - INFO - Static similarity result: {'final_score': 20.77, 'length_similarity': 0.0, 'token_similarity': 0.0, 'structure_similarity': 0.0, 'function_similarity': 100, 'complexity_similarity': 7.69, 'variable_similarity': 100}
