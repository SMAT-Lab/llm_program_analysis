2025-01-08 09:29:32,002 - INFO - Processing sample 59
2025-01-08 09:29:32,002 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:29:42,961 - INFO - Successfully split code into 4 top-level declarations
2025-01-08 09:29:42,964 - INFO - Processing chunk #0 (size=525 chars, start_index=0)
2025-01-08 09:29:42,965 - INFO - Processing chunk with 525 chars starting at index 0
2025-01-08 09:29:42,965 - INFO - Starting main AST analysis flow
2025-01-08 09:29:42,965 - INFO - Tokenized code into 100 tokens
2025-01-08 09:29:42,965 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:29:42,967 - INFO - Processing chunk #1 (size=1191 chars, start_index=100)
2025-01-08 09:29:42,967 - INFO - Processing chunk with 1191 chars starting at index 100
2025-01-08 09:29:42,967 - INFO - Starting main AST analysis flow
2025-01-08 09:29:42,967 - INFO - Tokenized code into 232 tokens
2025-01-08 09:29:42,968 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:29:42,977 - INFO - Processing chunk #2 (size=842 chars, start_index=332)
2025-01-08 09:29:42,978 - INFO - Processing chunk with 842 chars starting at index 332
2025-01-08 09:29:42,978 - INFO - Starting main AST analysis flow
2025-01-08 09:29:42,978 - INFO - Tokenized code into 151 tokens
2025-01-08 09:29:42,978 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:29:42,980 - INFO - Processing chunk #3 (size=2583 chars, start_index=483)
2025-01-08 09:29:42,980 - INFO - Processing chunk with 2583 chars starting at index 483
2025-01-08 09:29:42,980 - INFO - Starting main AST analysis flow
2025-01-08 09:29:42,981 - INFO - Tokenized code into 399 tokens
2025-01-08 09:29:42,981 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:29:56,049 - INFO - Step 1 result: {'type': 'Program', 'name': 'execute_block_test', 'range': [483, 881], 'children': []}
2025-01-08 09:29:56,049 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:30:00,805 - INFO - Step 1 result: {'type': 'Program', 'name': 'wait_execution', 'range': [332, 481], 'children': [{'type': 'FunctionDeclaration', 'name': 'wait_execution', 'range': [332, 359], 'children': [{'type': 'Parameter', 'name': 'user_id', 'range': [337, 339]}, {'type': 'Parameter', 'name': 'graph_id', 'range': [342, 344]}, {'type': 'Parameter', 'name': 'graph_exec_id', 'range': [347, 349]}, {'type': 'Parameter', 'name': 'timeout', 'range': [352, 356]}]}, {'type': 'FunctionDeclaration', 'name': 'is_execution_completed', 'range': [368, 426], 'children': []}]}
2025-01-08 09:30:00,805 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:30:04,067 - INFO - Step 1 result: {'type': 'Program', 'name': 'SpinTestServer', 'range': [100, 331], 'children': [{'type': 'ClassDeclaration', 'name': 'SpinTestServer', 'range': [100, 142], 'children': [{'type': 'MethodDeclaration', 'name': '__init__', 'range': [104, 142], 'children': []}]}, {'type': 'MethodDeclaration', 'name': 'test_get_user_id', 'range': [144, 155], 'children': []}, {'type': 'MethodDeclaration', 'name': '__aenter__', 'range': [157, 224], 'children': []}, {'type': 'MethodDeclaration', 'name': '__aexit__', 'range': [226, 299], 'children': []}, {'type': 'MethodDeclaration', 'name': 'setup_dependency_overrides', 'range': [301, 331], 'children': []}]}
2025-01-08 09:30:04,067 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:30:10,412 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 99], 'children': [{'type': 'ImportDeclaration', 'name': 'logging', 'range': [0, 2], 'children': []}, {'type': 'ImportDeclaration', 'name': 'time', 'range': [3, 5], 'children': []}, {'type': 'ImportDeclaration', 'name': 'Sequence', 'range': [6, 10], 'children': []}, {'type': 'ImportDeclaration', 'name': 'db', 'range': [12, 18], 'children': []}, {'type': 'ImportDeclaration', 'name': 'Block, initialize_blocks', 'range': [19, 29], 'children': []}, {'type': 'ImportDeclaration', 'name': 'ExecutionResult, ExecutionStatus', 'range': [30, 40], 'children': []}, {'type': 'ImportDeclaration', 'name': 'CREDENTIALS_FIELD_NAME', 'range': [41, 49], 'children': []}, {'type': 'ImportDeclaration', 'name': 'create_default_user', 'range': [50, 58], 'children': []}, {'type': 'ImportDeclaration', 'name': 'DatabaseManager, ExecutionManager, ExecutionScheduler', 'range': [59, 69], 'children': []}, {'type': 'ImportDeclaration', 'name': 'AgentServer', 'range': [70, 78], 'children': []}, {'type': 'ImportDeclaration', 'name': 'get_user_id', 'range': [79, 87], 'children': []}, {'type': 'VariableDeclaration', 'name': 'log', 'range': [89, 97], 'children': []}]}
2025-01-08 09:30:10,413 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:30:30,826 - INFO - Step 2 result: {'type': 'Program', 'name': 'wait_execution', 'range': [332, 481], 'children': [{'type': 'FunctionDeclaration', 'name': 'wait_execution', 'range': [332, 359], 'children': [{'type': 'Parameter', 'name': 'user_id', 'range': [337, 339]}, {'type': 'Parameter', 'name': 'graph_id', 'range': [342, 344]}, {'type': 'Parameter', 'name': 'graph_exec_id', 'range': [347, 349]}, {'type': 'Parameter', 'name': 'timeout', 'range': [352, 356]}, {'type': 'ReturnType', 'name': 'Sequence[ExecutionResult]', 'range': [362, 365]}]}, {'type': 'FunctionDeclaration', 'name': 'is_execution_completed', 'range': [368, 426], 'children': [{'type': 'ExpressionStatement', 'name': 'status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)', 'range': [375, 387]}, {'type': 'ExpressionStatement', 'name': 'log.info(f"Execution status: {status}")', 'range': [389, 395]}, {'type': 'IfStatement', 'name': 'if status == ExecutionStatus.FAILED', 'range': [397, 404], 'children': [{'type': 'ExpressionStatement', 'name': 'log.info("Execution failed")', 'range': [406, 411]}, {'type': 'ThrowStatement', 'name': 'raise Exception("Execution failed")', 'range': [413, 417]}]}, {'type': 'ReturnStatement', 'name': 'return status == ExecutionStatus.COMPLETED', 'range': [419, 426]}]}, {'type': 'ForStatement', 'name': 'for i in range(timeout)', 'range': [436, 442], 'children': [{'type': 'IfStatement', 'name': 'if await is_execution_completed()', 'range': [445, 450], 'children': [{'type': 'ReturnStatement', 'name': 'return await AgentServer().test_get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)', 'range': [452, 467]}]}, {'type': 'ExpressionStatement', 'name': 'time.sleep(1)', 'range': [469, 474]}]}, {'type': 'AssertStatement', 'name': 'assert False, "Execution did not complete in time."', 'range': [477, 481]}]}
2025-01-08 09:30:30,826 - INFO - Starting Step 3: AST simplification
2025-01-08 09:30:44,181 - INFO - Step 2 result: {'type': 'Program', 'name': 'SpinTestServer', 'range': [100, 331], 'children': [{'type': 'ClassDeclaration', 'name': 'SpinTestServer', 'range': [100, 142], 'children': [{'type': 'MethodDeclaration', 'name': '__init__', 'range': [104, 142], 'children': [{'type': 'AssignmentExpression', 'name': 'db_api', 'range': [111, 117], 'children': []}, {'type': 'AssignmentExpression', 'name': 'exec_manager', 'range': [119, 125], 'children': []}, {'type': 'AssignmentExpression', 'name': 'agent_server', 'range': [127, 133], 'children': []}, {'type': 'AssignmentExpression', 'name': 'scheduler', 'range': [135, 141], 'children': []}]}]}, {'type': 'MethodDeclaration', 'name': 'test_get_user_id', 'range': [144, 155], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [153, 154], 'children': []}]}, {'type': 'MethodDeclaration', 'name': '__aenter__', 'range': [157, 224], 'children': [{'type': 'ExpressionStatement', 'name': 'setup_dependency_overrides', 'range': [165, 169], 'children': []}, {'type': 'ExpressionStatement', 'name': 'db_api.__enter__', 'range': [171, 177], 'children': []}, {'type': 'ExpressionStatement', 'name': 'agent_server.__enter__', 'range': [179, 185], 'children': []}, {'type': 'ExpressionStatement', 'name': 'exec_manager.__enter__', 'range': [187, 193], 'children': []}, {'type': 'ExpressionStatement', 'name': 'scheduler.__enter__', 'range': [195, 201], 'children': []}, {'type': 'AwaitExpression', 'name': 'db.connect', 'range': [204, 209], 'children': []}, {'type': 'AwaitExpression', 'name': 'initialize_blocks', 'range': [211, 214], 'children': []}, {'type': 'AwaitExpression', 'name': 'create_default_user', 'range': [216, 219], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [222, 223], 'children': []}]}, {'type': 'MethodDeclaration', 'name': '__aexit__', 'range': [226, 299], 'children': [{'type': 'AwaitExpression', 'name': 'db.disconnect', 'range': [240, 245], 'children': []}, {'type': 'ExpressionStatement', 'name': 'scheduler.__exit__', 'range': [248, 259], 'children': []}, {'type': 'ExpressionStatement', 'name': 'exec_manager.__exit__', 'range': [261, 272], 'children': []}, {'type': 'ExpressionStatement', 'name': 'agent_server.__exit__', 'range': [274, 285], 'children': []}, {'type': 'ExpressionStatement', 'name': 'db_api.__exit__', 'range': [287, 298], 'children': []}]}, {'type': 'MethodDeclaration', 'name': 'setup_dependency_overrides', 'range': [301, 331], 'children': [{'type': 'ExpressionStatement', 'name': 'agent_server.set_test_dependency_overrides', 'range': [314, 329], 'children': []}]}]}
2025-01-08 09:30:44,181 - INFO - Starting Step 3: AST simplification
2025-01-08 09:30:55,182 - INFO - Step 2 result: {'nodes': [{'type': 'ImportDeclaration', 'name': 'logging', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'logging', 'range': [0, 2], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'time', 'range': [3, 5], 'children': [{'type': 'ImportSpecifier', 'name': 'time', 'range': [3, 5], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'Sequence', 'range': [6, 10], 'children': [{'type': 'ImportSpecifier', 'name': 'Sequence', 'range': [6, 10], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'db', 'range': [12, 18], 'children': [{'type': 'ImportSpecifier', 'name': 'db', 'range': [12, 18], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'Block, initialize_blocks', 'range': [19, 29], 'children': [{'type': 'ImportSpecifier', 'name': 'Block', 'range': [19, 29], 'children': []}, {'type': 'ImportSpecifier', 'name': 'initialize_blocks', 'range': [19, 29], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'ExecutionResult, ExecutionStatus', 'range': [30, 40], 'children': [{'type': 'ImportSpecifier', 'name': 'ExecutionResult', 'range': [30, 40], 'children': []}, {'type': 'ImportSpecifier', 'name': 'ExecutionStatus', 'range': [30, 40], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'CREDENTIALS_FIELD_NAME', 'range': [41, 49], 'children': [{'type': 'ImportSpecifier', 'name': 'CREDENTIALS_FIELD_NAME', 'range': [41, 49], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'create_default_user', 'range': [50, 58], 'children': [{'type': 'ImportSpecifier', 'name': 'create_default_user', 'range': [50, 58], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'DatabaseManager, ExecutionManager, ExecutionScheduler', 'range': [59, 69], 'children': [{'type': 'ImportSpecifier', 'name': 'DatabaseManager', 'range': [59, 69], 'children': []}, {'type': 'ImportSpecifier', 'name': 'ExecutionManager', 'range': [59, 69], 'children': []}, {'type': 'ImportSpecifier', 'name': 'ExecutionScheduler', 'range': [59, 69], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'AgentServer', 'range': [70, 78], 'children': [{'type': 'ImportSpecifier', 'name': 'AgentServer', 'range': [70, 78], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'get_user_id', 'range': [79, 87], 'children': [{'type': 'ImportSpecifier', 'name': 'get_user_id', 'range': [79, 87], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'log', 'range': [89, 97], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [90, 97], 'children': [{'type': 'Identifier', 'name': 'log', 'range': [89, 90], 'children': []}, {'type': 'CallExpression', 'name': 'getLogger', 'range': [91, 97], 'children': [{'type': 'Identifier', 'name': 'logging', 'range': [91, 92], 'children': []}, {'type': 'Identifier', 'name': '__name__', 'range': [95, 96], 'children': []}]}]}]}]}
2025-01-08 09:30:55,182 - INFO - Starting Step 3: AST simplification
2025-01-08 09:31:04,579 - INFO - Step 3 result: {'type': 'Program', 'name': 'wait_execution', 'range': [332, 481], 'children': [{'type': 'FunctionDeclaration', 'name': 'wait_execution', 'range': [332, 359], 'children': [{'type': 'Parameter', 'name': 'user_id', 'range': [337, 339]}, {'type': 'Parameter', 'name': 'graph_id', 'range': [342, 344]}, {'type': 'Parameter', 'name': 'graph_exec_id', 'range': [347, 349]}, {'type': 'Parameter', 'name': 'timeout', 'range': [352, 356]}, {'type': 'ReturnType', 'name': 'Sequence[ExecutionResult]', 'range': [362, 365]}]}, {'type': 'FunctionDeclaration', 'name': 'is_execution_completed', 'range': [368, 426], 'children': [{'type': 'ExpressionStatement', 'name': 'status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)', 'range': [375, 387]}, {'type': 'ExpressionStatement', 'name': 'log.info(f"Execution status: {status}")', 'range': [389, 395]}, {'type': 'IfStatement', 'name': 'if status == ExecutionStatus.FAILED', 'range': [397, 404], 'children': [{'type': 'ExpressionStatement', 'name': 'log.info("Execution failed")', 'range': [406, 411]}, {'type': 'ThrowStatement', 'name': 'raise Exception("Execution failed")', 'range': [413, 417]}]}, {'type': 'ReturnStatement', 'name': 'return status == ExecutionStatus.COMPLETED', 'range': [419, 426]}]}, {'type': 'ForStatement', 'name': 'for i in range(timeout)', 'range': [436, 442], 'children': [{'type': 'IfStatement', 'name': 'if await is_execution_completed()', 'range': [445, 450], 'children': [{'type': 'ReturnStatement', 'name': 'return await AgentServer().test_get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)', 'range': [452, 467]}]}, {'type': 'ExpressionStatement', 'name': 'time.sleep(1)', 'range': [469, 474]}]}, {'type': 'AssertStatement', 'name': 'assert False, "Execution did not complete in time."', 'range': [477, 481]}]}
2025-01-08 09:31:04,580 - INFO - Starting Step 4: AST normalization
2025-01-08 09:31:23,992 - INFO - Step 3 result: {'type': 'Program', 'name': 'SpinTestServer', 'range': [100, 331], 'children': [{'type': 'ClassDeclaration', 'name': 'SpinTestServer', 'range': [100, 142], 'children': [{'type': 'MethodDeclaration', 'name': '__init__', 'range': [104, 142], 'children': [{'type': 'AssignmentExpression', 'name': 'db_api', 'range': [111, 117], 'children': []}, {'type': 'AssignmentExpression', 'name': 'exec_manager', 'range': [119, 125], 'children': []}, {'type': 'AssignmentExpression', 'name': 'agent_server', 'range': [127, 133], 'children': []}, {'type': 'AssignmentExpression', 'name': 'scheduler', 'range': [135, 141], 'children': []}]}]}, {'type': 'MethodDeclaration', 'name': 'test_get_user_id', 'range': [144, 155], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [153, 154], 'children': []}]}, {'type': 'MethodDeclaration', 'name': '__aenter__', 'range': [157, 224], 'children': [{'type': 'ExpressionStatement', 'name': 'setup_dependency_overrides', 'range': [165, 169], 'children': []}, {'type': 'ExpressionStatement', 'name': 'db_api.__enter__', 'range': [171, 177], 'children': []}, {'type': 'ExpressionStatement', 'name': 'agent_server.__enter__', 'range': [179, 185], 'children': []}, {'type': 'ExpressionStatement', 'name': 'exec_manager.__enter__', 'range': [187, 193], 'children': []}, {'type': 'ExpressionStatement', 'name': 'scheduler.__enter__', 'range': [195, 201], 'children': []}, {'type': 'AwaitExpression', 'name': 'db.connect', 'range': [204, 209], 'children': []}, {'type': 'AwaitExpression', 'name': 'initialize_blocks', 'range': [211, 214], 'children': []}, {'type': 'AwaitExpression', 'name': 'create_default_user', 'range': [216, 219], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [222, 223], 'children': []}]}, {'type': 'MethodDeclaration', 'name': '__aexit__', 'range': [226, 299], 'children': [{'type': 'AwaitExpression', 'name': 'db.disconnect', 'range': [240, 245], 'children': []}, {'type': 'ExpressionStatement', 'name': 'scheduler.__exit__', 'range': [248, 259], 'children': []}, {'type': 'ExpressionStatement', 'name': 'exec_manager.__exit__', 'range': [261, 272], 'children': []}, {'type': 'ExpressionStatement', 'name': 'agent_server.__exit__', 'range': [274, 285], 'children': []}, {'type': 'ExpressionStatement', 'name': 'db_api.__exit__', 'range': [287, 298], 'children': []}]}, {'type': 'MethodDeclaration', 'name': 'setup_dependency_overrides', 'range': [301, 331], 'children': [{'type': 'ExpressionStatement', 'name': 'agent_server.set_test_dependency_overrides', 'range': [314, 329], 'children': []}]}]}
2025-01-08 09:31:23,993 - INFO - Starting Step 4: AST normalization
2025-01-08 09:31:43,142 - INFO - Step 2 result: {'type': 'Program', 'name': 'execute_block_test', 'range': [483, 881], 'children': [{'type': 'FunctionDeclaration', 'name': 'execute_block_test', 'range': [483, 881], 'children': [{'type': 'Parameter', 'name': 'block', 'range': [486, 488], 'children': []}, {'type': 'Block', 'name': 'FunctionBody', 'range': [491, 881], 'children': [{'type': 'Assignment', 'name': 'prefix', 'range': [492, 495], 'children': []}, {'type': 'IfStatement', 'name': 'IfNoTestData', 'range': [498, 519], 'children': [{'type': 'Condition', 'name': 'NoTestData', 'range': [499, 507], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [509, 519], 'children': [{'type': 'LogStatement', 'name': 'LogNoTestData', 'range': [510, 516], 'children': []}, {'type': 'ReturnStatement', 'name': 'Return', 'range': [518, 519], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfTestInputNotList', 'range': [520, 541], 'children': [{'type': 'Condition', 'name': 'TestInputNotList', 'range': [521, 529], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [531, 541], 'children': [{'type': 'Assignment', 'name': 'ConvertTestInputToList', 'range': [532, 540], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfTestOutputNotList', 'range': [542, 563], 'children': [{'type': 'Condition', 'name': 'TestOutputNotList', 'range': [543, 551], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [553, 563], 'children': [{'type': 'Assignment', 'name': 'ConvertTestOutputToList', 'range': [554, 562], 'children': []}]}]}, {'type': 'Assignment', 'name': 'output_index', 'range': [565, 567], 'children': []}, {'type': 'LogStatement', 'name': 'LogExecutingTests', 'range': [569, 575], 'children': []}, {'type': 'Assignment', 'name': 'prefix', 'range': [577, 583], 'children': []}, {'type': 'ForStatement', 'name': 'ForMockItems', 'range': [586, 641], 'children': [{'type': 'Initialization', 'name': 'mock_name, mock_obj', 'range': [587, 589], 'children': []}, {'type': 'Condition', 'name': 'block.test_mock.items()', 'range': [591, 602], 'children': []}, {'type': 'Block', 'name': 'ForBody', 'range': [604, 641], 'children': [{'type': 'LogStatement', 'name': 'LogMocking', 'range': [605, 611], 'children': []}, {'type': 'IfStatement', 'name': 'IfHasAttr', 'range': [613, 630], 'children': [{'type': 'Condition', 'name': 'hasattr(block, mock_name)', 'range': [614, 619], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [621, 630], 'children': [{'type': 'SetAttrStatement', 'name': 'SetMockObj', 'range': [622, 629], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'Else', 'range': [631, 641], 'children': [{'type': 'Block', 'name': 'ElseBody', 'range': [633, 641], 'children': [{'type': 'LogStatement', 'name': 'LogMockNotFound', 'range': [634, 640], 'children': []}]}]}]}]}, {'type': 'Assignment', 'name': 'extra_exec_kwargs', 'range': [643, 646], 'children': []}, {'type': 'IfStatement', 'name': 'IfCredentialsRequired', 'range': [649, 683], 'children': [{'type': 'Condition', 'name': 'CREDENTIALS_FIELD_NAME in block.input_schema.model_fields', 'range': [650, 656], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [658, 683], 'children': [{'type': 'IfStatement', 'name': 'IfNoTestCredentials', 'range': [659, 673], 'children': [{'type': 'Condition', 'name': 'not block.test_credentials', 'range': [660, 663], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [665, 673], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [666, 672], 'children': []}]}]}, {'type': 'Assignment', 'name': 'SetExtraExecKwargs', 'range': [675, 682], 'children': []}]}]}, {'type': 'ForStatement', 'name': 'ForTestInput', 'range': [685, 859], 'children': [{'type': 'Initialization', 'name': 'input_data', 'range': [686, 687], 'children': []}, {'type': 'Condition', 'name': 'block.test_input', 'range': [688, 690], 'children': []}, {'type': 'Block', 'name': 'ForBody', 'range': [692, 859], 'children': [{'type': 'LogStatement', 'name': 'LogInputData', 'range': [693, 699], 'children': []}, {'type': 'ForStatement', 'name': 'ForExecuteOutput', 'range': [702, 859], 'children': [{'type': 'Initialization', 'name': 'output_name, output_data', 'range': [703, 705], 'children': []}, {'type': 'Condition', 'name': 'block.execute(input_data, **extra_exec_kwargs)', 'range': [707, 716], 'children': []}, {'type': 'Block', 'name': 'ForBody', 'range': [718, 859], 'children': [{'type': 'IfStatement', 'name': 'IfOutputIndexExceeds', 'range': [719, 737], 'children': [{'type': 'Condition', 'name': 'output_index >= len(block.test_output)', 'range': [720, 728], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [730, 737], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [731, 736], 'children': []}]}]}, {'type': 'Assignment', 'name': 'ex_output_name, ex_output_data', 'range': [738, 748], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'compare', 'range': [750, 839], 'children': [{'type': 'Parameter', 'name': 'data', 'range': [753, 754], 'children': []}, {'type': 'Parameter', 'name': 'expected_data', 'range': [755, 756], 'children': []}, {'type': 'Block', 'name': 'FunctionBody', 'range': [758, 839], 'children': [{'type': 'IfStatement', 'name': 'IfDataEqualsExpected', 'range': [760, 769], 'children': [{'type': 'Condition', 'name': 'data == expected_data', 'range': [761, 763], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [765, 769], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [766, 768], 'children': []}]}]}, {'type': 'ElseIfStatement', 'name': 'ElseIfExpectedIsType', 'range': [771, 787], 'children': [{'type': 'Condition', 'name': 'isinstance(expected_data, type)', 'range': [772, 776], 'children': []}, {'type': 'Block', 'name': 'ElseIfBody', 'range': [778, 787], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [779, 786], 'children': []}]}]}, {'type': 'ElseIfStatement', 'name': 'ElseIfExpectedIsCallable', 'range': [789, 801], 'children': [{'type': 'Condition', 'name': 'callable(expected_data)', 'range': [790, 792], 'children': []}, {'type': 'Block', 'name': 'ElseIfBody', 'range': [794, 801], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [795, 800], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'Else', 'range': [803, 808], 'children': [{'type': 'Block', 'name': 'ElseBody', 'range': [805, 808], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [806, 807], 'children': []}]}]}, {'type': 'Assignment', 'name': 'mark', 'range': [810, 816], 'children': []}, {'type': 'LogStatement', 'name': 'LogComparison', 'range': [818, 824], 'children': []}, {'type': 'IfStatement', 'name': 'IfNotMatching', 'range': [826, 838], 'children': [{'type': 'Condition', 'name': 'not is_matching', 'range': [827, 828], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [830, 838], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [831, 837], 'children': []}]}]}]}]}, {'type': 'FunctionCall', 'name': 'compare', 'range': [841, 846], 'children': []}, {'type': 'FunctionCall', 'name': 'compare', 'range': [848, 853], 'children': []}, {'type': 'Assignment', 'name': 'IncrementOutputIndex', 'range': [855, 858], 'children': []}]}]}]}]}, {'type': 'IfStatement', 'name': 'IfOutputIndexLessThanExpected', 'range': [861, 879], 'children': [{'type': 'Condition', 'name': 'output_index < len(block.test_output)', 'range': [862, 869], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [871, 879], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [872, 878], 'children': []}]}]}]}]}]}
2025-01-08 09:31:43,142 - INFO - Starting Step 3: AST simplification
2025-01-08 09:32:01,336 - INFO - Step 3 result: {'nodes': [{'type': 'ImportDeclaration', 'name': 'logging', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'logging', 'range': [0, 2], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'time', 'range': [3, 5], 'children': [{'type': 'ImportSpecifier', 'name': 'time', 'range': [3, 5], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'Sequence', 'range': [6, 10], 'children': [{'type': 'ImportSpecifier', 'name': 'Sequence', 'range': [6, 10], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'db', 'range': [12, 18], 'children': [{'type': 'ImportSpecifier', 'name': 'db', 'range': [12, 18], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'Block, initialize_blocks', 'range': [19, 29], 'children': [{'type': 'ImportSpecifier', 'name': 'Block', 'range': [19, 29], 'children': []}, {'type': 'ImportSpecifier', 'name': 'initialize_blocks', 'range': [19, 29], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'ExecutionResult, ExecutionStatus', 'range': [30, 40], 'children': [{'type': 'ImportSpecifier', 'name': 'ExecutionResult', 'range': [30, 40], 'children': []}, {'type': 'ImportSpecifier', 'name': 'ExecutionStatus', 'range': [30, 40], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'CREDENTIALS_FIELD_NAME', 'range': [41, 49], 'children': [{'type': 'ImportSpecifier', 'name': 'CREDENTIALS_FIELD_NAME', 'range': [41, 49], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'create_default_user', 'range': [50, 58], 'children': [{'type': 'ImportSpecifier', 'name': 'create_default_user', 'range': [50, 58], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'DatabaseManager, ExecutionManager, ExecutionScheduler', 'range': [59, 69], 'children': [{'type': 'ImportSpecifier', 'name': 'DatabaseManager', 'range': [59, 69], 'children': []}, {'type': 'ImportSpecifier', 'name': 'ExecutionManager', 'range': [59, 69], 'children': []}, {'type': 'ImportSpecifier', 'name': 'ExecutionScheduler', 'range': [59, 69], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'AgentServer', 'range': [70, 78], 'children': [{'type': 'ImportSpecifier', 'name': 'AgentServer', 'range': [70, 78], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'get_user_id', 'range': [79, 87], 'children': [{'type': 'ImportSpecifier', 'name': 'get_user_id', 'range': [79, 87], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'log', 'range': [89, 97], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [90, 97], 'children': [{'type': 'Identifier', 'name': 'log', 'range': [89, 90], 'children': []}, {'type': 'CallExpression', 'name': 'getLogger', 'range': [91, 97], 'children': [{'type': 'Identifier', 'name': 'logging', 'range': [91, 92], 'children': []}, {'type': 'Identifier', 'name': '__name__', 'range': [95, 96], 'children': []}]}]}]}]}
2025-01-08 09:32:01,336 - INFO - Starting Step 4: AST normalization
2025-01-08 09:32:03,844 - INFO - Step 4 result: {'type': 'Program', 'name': 'SpinTestServer', 'range': [100, 331], 'children': [{'type': 'ClassDecl', 'name': 'SpinTestServer', 'range': [100, 142], 'children': [{'type': 'FunctionDecl', 'name': '__init__', 'range': [104, 142], 'children': [{'type': 'AssignmentExpression', 'name': 'db_api', 'range': [111, 117], 'children': []}, {'type': 'AssignmentExpression', 'name': 'exec_manager', 'range': [119, 125], 'children': []}, {'type': 'AssignmentExpression', 'name': 'agent_server', 'range': [127, 133], 'children': []}, {'type': 'AssignmentExpression', 'name': 'scheduler', 'range': [135, 141], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'test_get_user_id', 'range': [144, 155], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [153, 154], 'children': []}]}, {'type': 'FunctionDecl', 'name': '__aenter__', 'range': [157, 224], 'children': [{'type': 'ExpressionStatement', 'name': 'setup_dependency_overrides', 'range': [165, 169], 'children': []}, {'type': 'ExpressionStatement', 'name': 'db_api.__enter__', 'range': [171, 177], 'children': []}, {'type': 'ExpressionStatement', 'name': 'agent_server.__enter__', 'range': [179, 185], 'children': []}, {'type': 'ExpressionStatement', 'name': 'exec_manager.__enter__', 'range': [187, 193], 'children': []}, {'type': 'ExpressionStatement', 'name': 'scheduler.__enter__', 'range': [195, 201], 'children': []}, {'type': 'AwaitExpression', 'name': 'db.connect', 'range': [204, 209], 'children': []}, {'type': 'AwaitExpression', 'name': 'initialize_blocks', 'range': [211, 214], 'children': []}, {'type': 'AwaitExpression', 'name': 'create_default_user', 'range': [216, 219], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [222, 223], 'children': []}]}, {'type': 'FunctionDecl', 'name': '__aexit__', 'range': [226, 299], 'children': [{'type': 'AwaitExpression', 'name': 'db.disconnect', 'range': [240, 245], 'children': []}, {'type': 'ExpressionStatement', 'name': 'scheduler.__exit__', 'range': [248, 259], 'children': []}, {'type': 'ExpressionStatement', 'name': 'exec_manager.__exit__', 'range': [261, 272], 'children': []}, {'type': 'ExpressionStatement', 'name': 'agent_server.__exit__', 'range': [274, 285], 'children': []}, {'type': 'ExpressionStatement', 'name': 'db_api.__exit__', 'range': [287, 298], 'children': []}]}, {'type': 'FunctionDecl', 'name': 'setup_dependency_overrides', 'range': [301, 331], 'children': [{'type': 'ExpressionStatement', 'name': 'agent_server.set_test_dependency_overrides', 'range': [314, 329], 'children': []}]}]}
2025-01-08 09:32:03,844 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:32:16,439 - INFO - Step 4 result: {'type': 'Program', 'name': 'wait_execution', 'range': [332, 481], 'children': [{'type': 'FunctionDecl', 'name': 'wait_execution', 'range': [332, 359], 'children': [{'type': 'Parameter', 'name': 'user_id', 'range': [337, 339]}, {'type': 'Parameter', 'name': 'graph_id', 'range': [342, 344]}, {'type': 'Parameter', 'name': 'graph_exec_id', 'range': [347, 349]}, {'type': 'Parameter', 'name': 'timeout', 'range': [352, 356]}, {'type': 'ReturnType', 'name': 'Sequence[ExecutionResult]', 'range': [362, 365]}]}, {'type': 'FunctionDecl', 'name': 'is_execution_completed', 'range': [368, 426], 'children': [{'type': 'ExpressionStatement', 'name': 'status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)', 'range': [375, 387], 'children': [{'type': 'CallExpression', 'name': 'AgentServer().test_get_graph_run_status', 'range': [375, 387], 'children': [{'type': 'Identifier', 'name': 'graph_exec_id', 'range': [375, 387]}, {'type': 'Identifier', 'name': 'user_id', 'range': [375, 387]}]}]}, {'type': 'ExpressionStatement', 'name': 'log.info(f"Execution status: {status}")', 'range': [389, 395], 'children': [{'type': 'CallExpression', 'name': 'log.info', 'range': [389, 395], 'children': [{'type': 'Literal', 'name': 'f"Execution status: {status}"', 'range': [389, 395]}]}]}, {'type': 'IfStatement', 'name': 'if status == ExecutionStatus.FAILED', 'range': [397, 404], 'children': [{'type': 'BinaryExpression', 'name': 'status == ExecutionStatus.FAILED', 'range': [397, 404], 'children': [{'type': 'Identifier', 'name': 'status', 'range': [397, 404]}, {'type': 'Identifier', 'name': 'ExecutionStatus.FAILED', 'range': [397, 404]}]}, {'type': 'ExpressionStatement', 'name': 'log.info("Execution failed")', 'range': [406, 411], 'children': [{'type': 'CallExpression', 'name': 'log.info', 'range': [406, 411], 'children': [{'type': 'Literal', 'name': '"Execution failed"', 'range': [406, 411]}]}]}, {'type': 'ThrowStatement', 'name': 'raise Exception("Execution failed")', 'range': [413, 417], 'children': [{'type': 'CallExpression', 'name': 'Exception', 'range': [413, 417], 'children': [{'type': 'Literal', 'name': '"Execution failed"', 'range': [413, 417]}]}]}]}, {'type': 'ReturnStatement', 'name': 'return status == ExecutionStatus.COMPLETED', 'range': [419, 426], 'children': [{'type': 'BinaryExpression', 'name': 'status == ExecutionStatus.COMPLETED', 'range': [419, 426], 'children': [{'type': 'Identifier', 'name': 'status', 'range': [419, 426]}, {'type': 'Identifier', 'name': 'ExecutionStatus.COMPLETED', 'range': [419, 426]}]}]}]}, {'type': 'ForStatement', 'name': 'for i in range(timeout)', 'range': [436, 442], 'children': [{'type': 'IfStatement', 'name': 'if await is_execution_completed()', 'range': [445, 450], 'children': [{'type': 'CallExpression', 'name': 'is_execution_completed', 'range': [445, 450]}, {'type': 'ReturnStatement', 'name': 'return await AgentServer().test_get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)', 'range': [452, 467], 'children': [{'type': 'CallExpression', 'name': 'AgentServer().test_get_graph_run_node_execution_results', 'range': [452, 467], 'children': [{'type': 'Identifier', 'name': 'graph_id', 'range': [452, 467]}, {'type': 'Identifier', 'name': 'graph_exec_id', 'range': [452, 467]}, {'type': 'Identifier', 'name': 'user_id', 'range': [452, 467]}]}]}]}, {'type': 'ExpressionStatement', 'name': 'time.sleep(1)', 'range': [469, 474], 'children': [{'type': 'CallExpression', 'name': 'time.sleep', 'range': [469, 474], 'children': [{'type': 'Literal', 'name': '1', 'range': [469, 474]}]}]}]}, {'type': 'AssertStatement', 'name': 'assert False, "Execution did not complete in time."', 'range': [477, 481], 'children': [{'type': 'Literal', 'name': 'False', 'range': [477, 481]}, {'type': 'Literal', 'name': '"Execution did not complete in time."', 'range': [477, 481]}]}]}
2025-01-08 09:32:16,440 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:33:07,261 - INFO - Step 5 result: {'type': 'Program', 'name': 'SpinTestServer', 'range': [100, 331], 'children': [{'type': 'ClassDecl', 'name': 'SpinTestServer', 'range': [100, 142], 'children': [{'type': 'FunctionDecl', 'name': '__init__', 'range': [104, 142], 'children': [{'type': 'AssignmentExpression', 'name': 'db_api', 'range': [111, 117], 'children': []}, {'type': 'AssignmentExpression', 'name': 'exec_manager', 'range': [119, 125], 'children': []}, {'type': 'AssignmentExpression', 'name': 'agent_server', 'range': [127, 133], 'children': []}, {'type': 'AssignmentExpression', 'name': 'scheduler', 'range': [135, 141], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'test_get_user_id', 'range': [144, 155], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [153, 154], 'children': []}]}, {'type': 'FunctionDecl', 'name': '__aenter__', 'range': [157, 224], 'children': [{'type': 'ExpressionStatement', 'name': 'setup_dependency_overrides', 'range': [165, 169], 'children': []}, {'type': 'ExpressionStatement', 'name': 'db_api.__enter__', 'range': [171, 177], 'children': []}, {'type': 'ExpressionStatement', 'name': 'agent_server.__enter__', 'range': [179, 185], 'children': []}, {'type': 'ExpressionStatement', 'name': 'exec_manager.__enter__', 'range': [187, 193], 'children': []}, {'type': 'ExpressionStatement', 'name': 'scheduler.__enter__', 'range': [195, 201], 'children': []}, {'type': 'AwaitExpression', 'name': 'db.connect', 'range': [204, 209], 'children': []}, {'type': 'AwaitExpression', 'name': 'initialize_blocks', 'range': [211, 214], 'children': []}, {'type': 'AwaitExpression', 'name': 'create_default_user', 'range': [216, 219], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [222, 223], 'children': []}]}, {'type': 'FunctionDecl', 'name': '__aexit__', 'range': [226, 299], 'children': [{'type': 'AwaitExpression', 'name': 'db.disconnect', 'range': [240, 245], 'children': []}, {'type': 'ExpressionStatement', 'name': 'scheduler.__exit__', 'range': [248, 259], 'children': []}, {'type': 'ExpressionStatement', 'name': 'exec_manager.__exit__', 'range': [261, 272], 'children': []}, {'type': 'ExpressionStatement', 'name': 'agent_server.__exit__', 'range': [274, 285], 'children': []}, {'type': 'ExpressionStatement', 'name': 'db_api.__exit__', 'range': [287, 298], 'children': []}]}, {'type': 'FunctionDecl', 'name': 'setup_dependency_overrides', 'range': [301, 331], 'children': [{'type': 'ExpressionStatement', 'name': 'agent_server.set_test_dependency_overrides', 'range': [314, 329], 'children': []}]}]}
2025-01-08 09:33:07,261 - INFO - Completed main AST analysis flow
2025-01-08 09:33:07,261 - INFO - Successfully processed chunk
2025-01-08 09:33:12,825 - INFO - Step 4 result: {'nodes': [{'type': 'ImportDeclaration', 'name': 'logging', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'logging', 'range': [0, 2], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'time', 'range': [3, 5], 'children': [{'type': 'ImportSpecifier', 'name': 'time', 'range': [3, 5], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'Sequence', 'range': [6, 10], 'children': [{'type': 'ImportSpecifier', 'name': 'Sequence', 'range': [6, 10], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'db', 'range': [12, 18], 'children': [{'type': 'ImportSpecifier', 'name': 'db', 'range': [12, 18], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'Block, initialize_blocks', 'range': [19, 29], 'children': [{'type': 'ImportSpecifier', 'name': 'Block', 'range': [19, 29], 'children': []}, {'type': 'ImportSpecifier', 'name': 'initialize_blocks', 'range': [19, 29], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'ExecutionResult, ExecutionStatus', 'range': [30, 40], 'children': [{'type': 'ImportSpecifier', 'name': 'ExecutionResult', 'range': [30, 40], 'children': []}, {'type': 'ImportSpecifier', 'name': 'ExecutionStatus', 'range': [30, 40], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'CREDENTIALS_FIELD_NAME', 'range': [41, 49], 'children': [{'type': 'ImportSpecifier', 'name': 'CREDENTIALS_FIELD_NAME', 'range': [41, 49], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'create_default_user', 'range': [50, 58], 'children': [{'type': 'ImportSpecifier', 'name': 'create_default_user', 'range': [50, 58], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'DatabaseManager, ExecutionManager, ExecutionScheduler', 'range': [59, 69], 'children': [{'type': 'ImportSpecifier', 'name': 'DatabaseManager', 'range': [59, 69], 'children': []}, {'type': 'ImportSpecifier', 'name': 'ExecutionManager', 'range': [59, 69], 'children': []}, {'type': 'ImportSpecifier', 'name': 'ExecutionScheduler', 'range': [59, 69], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'AgentServer', 'range': [70, 78], 'children': [{'type': 'ImportSpecifier', 'name': 'AgentServer', 'range': [70, 78], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'get_user_id', 'range': [79, 87], 'children': [{'type': 'ImportSpecifier', 'name': 'get_user_id', 'range': [79, 87], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'log', 'range': [89, 97], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [90, 97], 'children': [{'type': 'Identifier', 'name': 'log', 'range': [89, 90], 'children': []}, {'type': 'CallExpression', 'name': 'getLogger', 'range': [91, 97], 'children': [{'type': 'Identifier', 'name': 'logging', 'range': [91, 92], 'children': []}, {'type': 'Identifier', 'name': '__name__', 'range': [95, 96], 'children': []}]}]}]}]}
2025-01-08 09:33:12,825 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:33:24,145 - INFO - Step 5 result: {'type': 'Program', 'name': 'wait_execution', 'range': [332, 481], 'children': [{'type': 'FunctionDecl', 'name': 'wait_execution', 'range': [332, 359], 'children': [{'type': 'Parameter', 'name': 'user_id', 'range': [337, 339]}, {'type': 'Parameter', 'name': 'graph_id', 'range': [342, 344]}, {'type': 'Parameter', 'name': 'graph_exec_id', 'range': [347, 349]}, {'type': 'Parameter', 'name': 'timeout', 'range': [352, 356]}, {'type': 'ReturnType', 'name': 'Sequence[ExecutionResult]', 'range': [362, 365]}]}, {'type': 'FunctionDecl', 'name': 'is_execution_completed', 'range': [368, 426], 'children': [{'type': 'ExpressionStatement', 'name': 'status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)', 'range': [375, 387], 'children': [{'type': 'CallExpression', 'name': 'AgentServer().test_get_graph_run_status', 'range': [375, 387], 'children': [{'type': 'Identifier', 'name': 'graph_exec_id', 'range': [375, 387]}, {'type': 'Identifier', 'name': 'user_id', 'range': [375, 387]}]}]}, {'type': 'ExpressionStatement', 'name': 'log.info(f"Execution status: {status}")', 'range': [389, 395], 'children': [{'type': 'CallExpression', 'name': 'log.info', 'range': [389, 395], 'children': [{'type': 'Literal', 'name': 'f"Execution status: {status}"', 'range': [389, 395]}]}]}, {'type': 'IfStatement', 'name': 'if status == ExecutionStatus.FAILED', 'range': [397, 404], 'children': [{'type': 'BinaryExpression', 'name': 'status == ExecutionStatus.FAILED', 'range': [397, 404], 'children': [{'type': 'Identifier', 'name': 'status', 'range': [397, 404]}, {'type': 'Identifier', 'name': 'ExecutionStatus.FAILED', 'range': [397, 404]}]}, {'type': 'ExpressionStatement', 'name': 'log.info("Execution failed")', 'range': [406, 411], 'children': [{'type': 'CallExpression', 'name': 'log.info', 'range': [406, 411], 'children': [{'type': 'Literal', 'name': '"Execution failed"', 'range': [406, 411]}]}]}, {'type': 'ThrowStatement', 'name': 'raise Exception("Execution failed")', 'range': [413, 417], 'children': [{'type': 'CallExpression', 'name': 'Exception', 'range': [413, 417], 'children': [{'type': 'Literal', 'name': '"Execution failed"', 'range': [413, 417]}]}]}]}, {'type': 'ReturnStatement', 'name': 'return status == ExecutionStatus.COMPLETED', 'range': [419, 426], 'children': [{'type': 'BinaryExpression', 'name': 'status == ExecutionStatus.COMPLETED', 'range': [419, 426], 'children': [{'type': 'Identifier', 'name': 'status', 'range': [419, 426]}, {'type': 'Identifier', 'name': 'ExecutionStatus.COMPLETED', 'range': [419, 426]}]}]}]}, {'type': 'ForStatement', 'name': 'for i in range(timeout)', 'range': [436, 442], 'children': [{'type': 'IfStatement', 'name': 'if await is_execution_completed()', 'range': [445, 450], 'children': [{'type': 'CallExpression', 'name': 'is_execution_completed', 'range': [445, 450]}, {'type': 'ReturnStatement', 'name': 'return await AgentServer().test_get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)', 'range': [452, 467], 'children': [{'type': 'CallExpression', 'name': 'AgentServer().test_get_graph_run_node_execution_results', 'range': [452, 467], 'children': [{'type': 'Identifier', 'name': 'graph_id', 'range': [452, 467]}, {'type': 'Identifier', 'name': 'graph_exec_id', 'range': [452, 467]}, {'type': 'Identifier', 'name': 'user_id', 'range': [452, 467]}]}]}]}, {'type': 'ExpressionStatement', 'name': 'time.sleep(1)', 'range': [469, 474], 'children': [{'type': 'CallExpression', 'name': 'time.sleep', 'range': [469, 474], 'children': [{'type': 'Literal', 'name': '1', 'range': [469, 474]}]}]}]}, {'type': 'AssertStatement', 'name': 'assert False, "Execution did not complete in time."', 'range': [477, 481], 'children': [{'type': 'Literal', 'name': 'False', 'range': [477, 481]}, {'type': 'Literal', 'name': '"Execution did not complete in time."', 'range': [477, 481]}]}]}
2025-01-08 09:33:24,146 - INFO - Completed main AST analysis flow
2025-01-08 09:33:24,146 - INFO - Successfully processed chunk
2025-01-08 09:33:35,126 - INFO - Step 3 result: {'type': 'Program', 'name': 'execute_block_test', 'range': [483, 881], 'children': [{'type': 'FunctionDeclaration', 'name': 'execute_block_test', 'range': [483, 881], 'children': [{'type': 'Parameter', 'name': 'block', 'range': [486, 488], 'children': []}, {'type': 'Block', 'name': 'FunctionBody', 'range': [491, 881], 'children': [{'type': 'Assignment', 'name': 'prefix', 'range': [492, 495], 'children': []}, {'type': 'IfStatement', 'name': 'IfNoTestData', 'range': [498, 519], 'children': [{'type': 'Condition', 'name': 'NoTestData', 'range': [499, 507], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [509, 519], 'children': [{'type': 'LogStatement', 'name': 'LogNoTestData', 'range': [510, 516], 'children': []}, {'type': 'ReturnStatement', 'name': 'Return', 'range': [518, 519], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfTestInputNotList', 'range': [520, 541], 'children': [{'type': 'Condition', 'name': 'TestInputNotList', 'range': [521, 529], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [531, 541], 'children': [{'type': 'Assignment', 'name': 'ConvertTestInputToList', 'range': [532, 540], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfTestOutputNotList', 'range': [542, 563], 'children': [{'type': 'Condition', 'name': 'TestOutputNotList', 'range': [543, 551], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [553, 563], 'children': [{'type': 'Assignment', 'name': 'ConvertTestOutputToList', 'range': [554, 562], 'children': []}]}]}, {'type': 'Assignment', 'name': 'output_index', 'range': [565, 567], 'children': []}, {'type': 'LogStatement', 'name': 'LogExecutingTests', 'range': [569, 575], 'children': []}, {'type': 'Assignment', 'name': 'prefix', 'range': [577, 583], 'children': []}, {'type': 'ForStatement', 'name': 'ForMockItems', 'range': [586, 641], 'children': [{'type': 'Initialization', 'name': 'mock_name, mock_obj', 'range': [587, 589], 'children': []}, {'type': 'Condition', 'name': 'block.test_mock.items()', 'range': [591, 602], 'children': []}, {'type': 'Block', 'name': 'ForBody', 'range': [604, 641], 'children': [{'type': 'LogStatement', 'name': 'LogMocking', 'range': [605, 611], 'children': []}, {'type': 'IfStatement', 'name': 'IfHasAttr', 'range': [613, 630], 'children': [{'type': 'Condition', 'name': 'hasattr(block, mock_name)', 'range': [614, 619], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [621, 630], 'children': [{'type': 'SetAttrStatement', 'name': 'SetMockObj', 'range': [622, 629], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'Else', 'range': [631, 641], 'children': [{'type': 'Block', 'name': 'ElseBody', 'range': [633, 641], 'children': [{'type': 'LogStatement', 'name': 'LogMockNotFound', 'range': [634, 640], 'children': []}]}]}]}]}, {'type': 'Assignment', 'name': 'extra_exec_kwargs', 'range': [643, 646], 'children': []}, {'type': 'IfStatement', 'name': 'IfCredentialsRequired', 'range': [649, 683], 'children': [{'type': 'Condition', 'name': 'CREDENTIALS_FIELD_NAME in block.input_schema.model_fields', 'range': [650, 656], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [658, 683], 'children': [{'type': 'IfStatement', 'name': 'IfNoTestCredentials', 'range': [659, 673], 'children': [{'type': 'Condition', 'name': 'not block.test_credentials', 'range': [660, 663], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [665, 673], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [666, 672], 'children': []}]}]}, {'type': 'Assignment', 'name': 'SetExtraExecKwargs', 'range': [675, 682], 'children': []}]}]}, {'type': 'ForStatement', 'name': 'ForTestInput', 'range': [685, 859], 'children': [{'type': 'Initialization', 'name': 'input_data', 'range': [686, 687], 'children': []}, {'type': 'Condition', 'name': 'block.test_input', 'range': [688, 690], 'children': []}, {'type': 'Block', 'name': 'ForBody', 'range': [692, 859], 'children': [{'type': 'LogStatement', 'name': 'LogInputData', 'range': [693, 699], 'children': []}, {'type': 'ForStatement', 'name': 'ForExecuteOutput', 'range': [702, 859], 'children': [{'type': 'Initialization', 'name': 'output_name, output_data', 'range': [703, 705], 'children': []}, {'type': 'Condition', 'name': 'block.execute(input_data, **extra_exec_kwargs)', 'range': [707, 716], 'children': []}, {'type': 'Block', 'name': 'ForBody', 'range': [718, 859], 'children': [{'type': 'IfStatement', 'name': 'IfOutputIndexExceeds', 'range': [719, 737], 'children': [{'type': 'Condition', 'name': 'output_index >= len(block.test_output)', 'range': [720, 728], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [730, 737], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [731, 736], 'children': []}]}]}, {'type': 'Assignment', 'name': 'ex_output_name, ex_output_data', 'range': [738, 748], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'compare', 'range': [750, 839], 'children': [{'type': 'Parameter', 'name': 'data', 'range': [753, 754], 'children': []}, {'type': 'Parameter', 'name': 'expected_data', 'range': [755, 756], 'children': []}, {'type': 'Block', 'name': 'FunctionBody', 'range': [758, 839], 'children': [{'type': 'IfStatement', 'name': 'IfDataEqualsExpected', 'range': [760, 769], 'children': [{'type': 'Condition', 'name': 'data == expected_data', 'range': [761, 763], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [765, 769], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [766, 768], 'children': []}]}]}, {'type': 'ElseIfStatement', 'name': 'ElseIfExpectedIsType', 'range': [771, 787], 'children': [{'type': 'Condition', 'name': 'isinstance(expected_data, type)', 'range': [772, 776], 'children': []}, {'type': 'Block', 'name': 'ElseIfBody', 'range': [778, 787], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [779, 786], 'children': []}]}]}, {'type': 'ElseIfStatement', 'name': 'ElseIfExpectedIsCallable', 'range': [789, 801], 'children': [{'type': 'Condition', 'name': 'callable(expected_data)', 'range': [790, 792], 'children': []}, {'type': 'Block', 'name': 'ElseIfBody', 'range': [794, 801], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [795, 800], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'Else', 'range': [803, 808], 'children': [{'type': 'Block', 'name': 'ElseBody', 'range': [805, 808], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [806, 807], 'children': []}]}]}, {'type': 'Assignment', 'name': 'mark', 'range': [810, 816], 'children': []}, {'type': 'LogStatement', 'name': 'LogComparison', 'range': [818, 824], 'children': []}, {'type': 'IfStatement', 'name': 'IfNotMatching', 'range': [826, 838], 'children': [{'type': 'Condition', 'name': 'not is_matching', 'range': [827, 828], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [830, 838], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [831, 837], 'children': []}]}]}]}]}, {'type': 'FunctionCall', 'name': 'compare', 'range': [841, 846], 'children': []}, {'type': 'FunctionCall', 'name': 'compare', 'range': [848, 853], 'children': []}, {'type': 'Assignment', 'name': 'IncrementOutputIndex', 'range': [855, 858], 'children': []}]}]}]}]}, {'type': 'IfStatement', 'name': 'IfOutputIndexLessThanExpected', 'range': [861, 879], 'children': [{'type': 'Condition', 'name': 'output_index < len(block.test_output)', 'range': [862, 869], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [871, 879], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [872, 878], 'children': []}]}]}]}]}]}
2025-01-08 09:33:35,126 - INFO - Starting Step 4: AST normalization
2025-01-08 09:34:30,699 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainProgram', 'range': [0, 97], 'children': [{'type': 'ImportDeclaration', 'name': 'logging', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'logging', 'range': [0, 2], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'time', 'range': [3, 5], 'children': [{'type': 'ImportSpecifier', 'name': 'time', 'range': [3, 5], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'Sequence', 'range': [6, 10], 'children': [{'type': 'ImportSpecifier', 'name': 'Sequence', 'range': [6, 10], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'db', 'range': [12, 18], 'children': [{'type': 'ImportSpecifier', 'name': 'db', 'range': [12, 18], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'Block, initialize_blocks', 'range': [19, 29], 'children': [{'type': 'ImportSpecifier', 'name': 'Block', 'range': [19, 29], 'children': []}, {'type': 'ImportSpecifier', 'name': 'initialize_blocks', 'range': [19, 29], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'ExecutionResult, ExecutionStatus', 'range': [30, 40], 'children': [{'type': 'ImportSpecifier', 'name': 'ExecutionResult', 'range': [30, 40], 'children': []}, {'type': 'ImportSpecifier', 'name': 'ExecutionStatus', 'range': [30, 40], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'CREDENTIALS_FIELD_NAME', 'range': [41, 49], 'children': [{'type': 'ImportSpecifier', 'name': 'CREDENTIALS_FIELD_NAME', 'range': [41, 49], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'create_default_user', 'range': [50, 58], 'children': [{'type': 'ImportSpecifier', 'name': 'create_default_user', 'range': [50, 58], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'DatabaseManager, ExecutionManager, ExecutionScheduler', 'range': [59, 69], 'children': [{'type': 'ImportSpecifier', 'name': 'DatabaseManager', 'range': [59, 69], 'children': []}, {'type': 'ImportSpecifier', 'name': 'ExecutionManager', 'range': [59, 69], 'children': []}, {'type': 'ImportSpecifier', 'name': 'ExecutionScheduler', 'range': [59, 69], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'AgentServer', 'range': [70, 78], 'children': [{'type': 'ImportSpecifier', 'name': 'AgentServer', 'range': [70, 78], 'children': []}]}, {'type': 'ImportDeclaration', 'name': 'get_user_id', 'range': [79, 87], 'children': [{'type': 'ImportSpecifier', 'name': 'get_user_id', 'range': [79, 87], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'log', 'range': [89, 97], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [90, 97], 'children': [{'type': 'Identifier', 'name': 'log', 'range': [89, 90], 'children': []}, {'type': 'CallExpression', 'name': 'getLogger', 'range': [91, 97], 'children': [{'type': 'Identifier', 'name': 'logging', 'range': [91, 92], 'children': []}, {'type': 'Identifier', 'name': '__name__', 'range': [95, 96], 'children': []}]}]}]}]}]}
2025-01-08 09:34:30,700 - INFO - Completed main AST analysis flow
2025-01-08 09:34:30,701 - INFO - Successfully processed chunk
2025-01-08 09:35:35,349 - INFO - Step 4 result: {'type': 'Program', 'name': 'execute_block_test', 'range': [483, 881], 'children': [{'type': 'FunctionDecl', 'name': 'execute_block_test', 'range': [483, 881], 'children': [{'type': 'Parameter', 'name': 'block', 'range': [486, 488], 'children': []}, {'type': 'Block', 'name': 'FunctionBody', 'range': [491, 881], 'children': [{'type': 'Assignment', 'name': 'prefix', 'range': [492, 495], 'children': []}, {'type': 'IfStatement', 'name': 'IfNoTestData', 'range': [498, 519], 'children': [{'type': 'Condition', 'name': 'NoTestData', 'range': [499, 507], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [509, 519], 'children': [{'type': 'LogStatement', 'name': 'LogNoTestData', 'range': [510, 516], 'children': []}, {'type': 'ReturnStatement', 'name': 'Return', 'range': [518, 519], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfTestInputNotList', 'range': [520, 541], 'children': [{'type': 'Condition', 'name': 'TestInputNotList', 'range': [521, 529], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [531, 541], 'children': [{'type': 'Assignment', 'name': 'ConvertTestInputToList', 'range': [532, 540], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfTestOutputNotList', 'range': [542, 563], 'children': [{'type': 'Condition', 'name': 'TestOutputNotList', 'range': [543, 551], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [553, 563], 'children': [{'type': 'Assignment', 'name': 'ConvertTestOutputToList', 'range': [554, 562], 'children': []}]}]}, {'type': 'Assignment', 'name': 'output_index', 'range': [565, 567], 'children': []}, {'type': 'LogStatement', 'name': 'LogExecutingTests', 'range': [569, 575], 'children': []}, {'type': 'Assignment', 'name': 'prefix', 'range': [577, 583], 'children': []}, {'type': 'ForStatement', 'name': 'ForMockItems', 'range': [586, 641], 'children': [{'type': 'Initialization', 'name': 'mock_name, mock_obj', 'range': [587, 589], 'children': []}, {'type': 'Condition', 'name': 'block.test_mock.items()', 'range': [591, 602], 'children': []}, {'type': 'Block', 'name': 'ForBody', 'range': [604, 641], 'children': [{'type': 'LogStatement', 'name': 'LogMocking', 'range': [605, 611], 'children': []}, {'type': 'IfStatement', 'name': 'IfHasAttr', 'range': [613, 630], 'children': [{'type': 'Condition', 'name': 'hasattr(block, mock_name)', 'range': [614, 619], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [621, 630], 'children': [{'type': 'SetAttrStatement', 'name': 'SetMockObj', 'range': [622, 629], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'Else', 'range': [631, 641], 'children': [{'type': 'Block', 'name': 'ElseBody', 'range': [633, 641], 'children': [{'type': 'LogStatement', 'name': 'LogMockNotFound', 'range': [634, 640], 'children': []}]}]}]}]}, {'type': 'Assignment', 'name': 'extra_exec_kwargs', 'range': [643, 646], 'children': []}, {'type': 'IfStatement', 'name': 'IfCredentialsRequired', 'range': [649, 683], 'children': [{'type': 'Condition', 'name': 'CREDENTIALS_FIELD_NAME in block.input_schema.model_fields', 'range': [650, 656], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [658, 683], 'children': [{'type': 'IfStatement', 'name': 'IfNoTestCredentials', 'range': [659, 673], 'children': [{'type': 'Condition', 'name': 'not block.test_credentials', 'range': [660, 663], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [665, 673], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [666, 672], 'children': []}]}]}, {'type': 'Assignment', 'name': 'SetExtraExecKwargs', 'range': [675, 682], 'children': []}]}]}, {'type': 'ForStatement', 'name': 'ForTestInput', 'range': [685, 859], 'children': [{'type': 'Initialization', 'name': 'input_data', 'range': [686, 687], 'children': []}, {'type': 'Condition', 'name': 'block.test_input', 'range': [688, 690], 'children': []}, {'type': 'Block', 'name': 'ForBody', 'range': [692, 859], 'children': [{'type': 'LogStatement', 'name': 'LogInputData', 'range': [693, 699], 'children': []}, {'type': 'ForStatement', 'name': 'ForExecuteOutput', 'range': [702, 859], 'children': [{'type': 'Initialization', 'name': 'output_name, output_data', 'range': [703, 705], 'children': []}, {'type': 'Condition', 'name': 'block.execute(input_data, **extra_exec_kwargs)', 'range': [707, 716], 'children': []}, {'type': 'Block', 'name': 'ForBody', 'range': [718, 859], 'children': [{'type': 'IfStatement', 'name': 'IfOutputIndexExceeds', 'range': [719, 737], 'children': [{'type': 'Condition', 'name': 'output_index >= len(block.test_output)', 'range': [720, 728], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [730, 737], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [731, 736], 'children': []}]}]}, {'type': 'Assignment', 'name': 'ex_output_name, ex_output_data', 'range': [738, 748], 'children': []}, {'type': 'FunctionDecl', 'name': 'compare', 'range': [750, 839], 'children': [{'type': 'Parameter', 'name': 'data', 'range': [753, 754], 'children': []}, {'type': 'Parameter', 'name': 'expected_data', 'range': [755, 756], 'children': []}, {'type': 'Block', 'name': 'FunctionBody', 'range': [758, 839], 'children': [{'type': 'IfStatement', 'name': 'IfDataEqualsExpected', 'range': [760, 769], 'children': [{'type': 'Condition', 'name': 'data == expected_data', 'range': [761, 763], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [765, 769], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [766, 768], 'children': []}]}]}, {'type': 'ElseIfStatement', 'name': 'ElseIfExpectedIsType', 'range': [771, 787], 'children': [{'type': 'Condition', 'name': 'isinstance(expected_data, type)', 'range': [772, 776], 'children': []}, {'type': 'Block', 'name': 'ElseIfBody', 'range': [778, 787], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [779, 786], 'children': []}]}]}, {'type': 'ElseIfStatement', 'name': 'ElseIfExpectedIsCallable', 'range': [789, 801], 'children': [{'type': 'Condition', 'name': 'callable(expected_data)', 'range': [790, 792], 'children': []}, {'type': 'Block', 'name': 'ElseIfBody', 'range': [794, 801], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [795, 800], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'Else', 'range': [803, 808], 'children': [{'type': 'Block', 'name': 'ElseBody', 'range': [805, 808], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [806, 807], 'children': []}]}]}, {'type': 'Assignment', 'name': 'mark', 'range': [810, 816], 'children': []}, {'type': 'LogStatement', 'name': 'LogComparison', 'range': [818, 824], 'children': []}, {'type': 'IfStatement', 'name': 'IfNotMatching', 'range': [826, 838], 'children': [{'type': 'Condition', 'name': 'not is_matching', 'range': [827, 828], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [830, 838], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [831, 837], 'children': []}]}]}]}]}, {'type': 'CallExpression', 'name': 'compare', 'range': [841, 846], 'children': []}, {'type': 'CallExpression', 'name': 'compare', 'range': [848, 853], 'children': []}, {'type': 'Assignment', 'name': 'IncrementOutputIndex', 'range': [855, 858], 'children': []}]}]}]}]}, {'type': 'IfStatement', 'name': 'IfOutputIndexLessThanExpected', 'range': [861, 879], 'children': [{'type': 'Condition', 'name': 'output_index < len(block.test_output)', 'range': [862, 869], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [871, 879], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [872, 878], 'children': []}]}]}]}]}]}
2025-01-08 09:35:35,349 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:37:40,217 - INFO - Step 5 result: {'type': 'Program', 'name': 'execute_block_test', 'range': [483, 881], 'children': [{'type': 'FunctionDecl', 'name': 'execute_block_test', 'range': [483, 881], 'children': [{'type': 'Parameter', 'name': 'block', 'range': [486, 488], 'children': []}, {'type': 'Block', 'name': 'FunctionBody', 'range': [491, 881], 'children': [{'type': 'Assignment', 'name': 'prefix', 'range': [492, 495], 'children': []}, {'type': 'IfStatement', 'name': 'IfNoTestData', 'range': [498, 519], 'children': [{'type': 'Condition', 'name': 'NoTestData', 'range': [499, 507], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [509, 519], 'children': [{'type': 'LogStatement', 'name': 'LogNoTestData', 'range': [510, 516], 'children': []}, {'type': 'ReturnStatement', 'name': 'Return', 'range': [518, 519], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfTestInputNotList', 'range': [520, 541], 'children': [{'type': 'Condition', 'name': 'TestInputNotList', 'range': [521, 529], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [531, 541], 'children': [{'type': 'Assignment', 'name': 'ConvertTestInputToList', 'range': [532, 540], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'IfTestOutputNotList', 'range': [542, 563], 'children': [{'type': 'Condition', 'name': 'TestOutputNotList', 'range': [543, 551], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [553, 563], 'children': [{'type': 'Assignment', 'name': 'ConvertTestOutputToList', 'range': [554, 562], 'children': []}]}]}, {'type': 'Assignment', 'name': 'output_index', 'range': [565, 567], 'children': []}, {'type': 'LogStatement', 'name': 'LogExecutingTests', 'range': [569, 575], 'children': []}, {'type': 'Assignment', 'name': 'prefix', 'range': [577, 583], 'children': []}, {'type': 'ForStatement', 'name': 'ForMockItems', 'range': [586, 641], 'children': [{'type': 'Initialization', 'name': 'mock_name, mock_obj', 'range': [587, 589], 'children': []}, {'type': 'Condition', 'name': 'block.test_mock.items()', 'range': [591, 602], 'children': []}, {'type': 'Block', 'name': 'ForBody', 'range': [604, 641], 'children': [{'type': 'LogStatement', 'name': 'LogMocking', 'range': [605, 611], 'children': []}, {'type': 'IfStatement', 'name': 'IfHasAttr', 'range': [613, 630], 'children': [{'type': 'Condition', 'name': 'hasattr(block, mock_name)', 'range': [614, 619], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [621, 630], 'children': [{'type': 'SetAttrStatement', 'name': 'SetMockObj', 'range': [622, 629], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'Else', 'range': [631, 641], 'children': [{'type': 'Block', 'name': 'ElseBody', 'range': [633, 641], 'children': [{'type': 'LogStatement', 'name': 'LogMockNotFound', 'range': [634, 640], 'children': []}]}]}]}]}, {'type': 'Assignment', 'name': 'extra_exec_kwargs', 'range': [643, 646], 'children': []}, {'type': 'IfStatement', 'name': 'IfCredentialsRequired', 'range': [649, 683], 'children': [{'type': 'Condition', 'name': 'CREDENTIALS_FIELD_NAME in block.input_schema.model_fields', 'range': [650, 656], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [658, 683], 'children': [{'type': 'IfStatement', 'name': 'IfNoTestCredentials', 'range': [659, 673], 'children': [{'type': 'Condition', 'name': 'not block.test_credentials', 'range': [660, 663], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [665, 673], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [666, 672], 'children': []}]}]}, {'type': 'Assignment', 'name': 'SetExtraExecKwargs', 'range': [675, 682], 'children': []}]}]}, {'type': 'ForStatement', 'name': 'ForTestInput', 'range': [685, 859], 'children': [{'type': 'Initialization', 'name': 'input_data', 'range': [686, 687], 'children': []}, {'type': 'Condition', 'name': 'block.test_input', 'range': [688, 690], 'children': []}, {'type': 'Block', 'name': 'ForBody', 'range': [692, 859], 'children': [{'type': 'LogStatement', 'name': 'LogInputData', 'range': [693, 699], 'children': []}, {'type': 'ForStatement', 'name': 'ForExecuteOutput', 'range': [702, 859], 'children': [{'type': 'Initialization', 'name': 'output_name, output_data', 'range': [703, 705], 'children': []}, {'type': 'Condition', 'name': 'block.execute(input_data, **extra_exec_kwargs)', 'range': [707, 716], 'children': []}, {'type': 'Block', 'name': 'ForBody', 'range': [718, 859], 'children': [{'type': 'IfStatement', 'name': 'IfOutputIndexExceeds', 'range': [719, 737], 'children': [{'type': 'Condition', 'name': 'output_index >= len(block.test_output)', 'range': [720, 728], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [730, 737], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [731, 736], 'children': []}]}]}, {'type': 'Assignment', 'name': 'ex_output_name, ex_output_data', 'range': [738, 748], 'children': []}, {'type': 'FunctionDecl', 'name': 'compare', 'range': [750, 839], 'children': [{'type': 'Parameter', 'name': 'data', 'range': [753, 754], 'children': []}, {'type': 'Parameter', 'name': 'expected_data', 'range': [755, 756], 'children': []}, {'type': 'Block', 'name': 'FunctionBody', 'range': [758, 839], 'children': [{'type': 'IfStatement', 'name': 'IfDataEqualsExpected', 'range': [760, 769], 'children': [{'type': 'Condition', 'name': 'data == expected_data', 'range': [761, 763], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [765, 769], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [766, 768], 'children': []}]}]}, {'type': 'ElseIfStatement', 'name': 'ElseIfExpectedIsType', 'range': [771, 787], 'children': [{'type': 'Condition', 'name': 'isinstance(expected_data, type)', 'range': [772, 776], 'children': []}, {'type': 'Block', 'name': 'ElseIfBody', 'range': [778, 787], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [779, 786], 'children': []}]}]}, {'type': 'ElseIfStatement', 'name': 'ElseIfExpectedIsCallable', 'range': [789, 801], 'children': [{'type': 'Condition', 'name': 'callable(expected_data)', 'range': [790, 792], 'children': []}, {'type': 'Block', 'name': 'ElseIfBody', 'range': [794, 801], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [795, 800], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'Else', 'range': [803, 808], 'children': [{'type': 'Block', 'name': 'ElseBody', 'range': [805, 808], 'children': [{'type': 'Assignment', 'name': 'is_matching', 'range': [806, 807], 'children': []}]}]}, {'type': 'Assignment', 'name': 'mark', 'range': [810, 816], 'children': []}, {'type': 'LogStatement', 'name': 'LogComparison', 'range': [818, 824], 'children': []}, {'type': 'IfStatement', 'name': 'IfNotMatching', 'range': [826, 838], 'children': [{'type': 'Condition', 'name': 'not is_matching', 'range': [827, 828], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [830, 838], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [831, 837], 'children': []}]}]}]}]}, {'type': 'CallExpression', 'name': 'compare', 'range': [841, 846], 'children': []}, {'type': 'CallExpression', 'name': 'compare', 'range': [848, 853], 'children': []}, {'type': 'Assignment', 'name': 'IncrementOutputIndex', 'range': [855, 858], 'children': []}]}]}]}]}, {'type': 'IfStatement', 'name': 'IfOutputIndexLessThanExpected', 'range': [861, 879], 'children': [{'type': 'Condition', 'name': 'output_index < len(block.test_output)', 'range': [862, 869], 'children': []}, {'type': 'Block', 'name': 'IfBody', 'range': [871, 879], 'children': [{'type': 'RaiseStatement', 'name': 'RaiseValueError', 'range': [872, 878], 'children': []}]}]}]}]}]}
2025-01-08 09:37:40,218 - INFO - Completed main AST analysis flow
2025-01-08 09:37:40,218 - INFO - Successfully processed chunk
2025-01-08 09:37:40,258 - INFO - Starting code generation from AST
2025-01-08 10:07:41,901 - ERROR - Error in get_code_from_ast: Expecting value: line 30 column 1 (char 29)
2025-01-08 10:07:41,902 - INFO - Starting static code similarity comparison
2025-01-08 10:07:41,906 - INFO - Static similarity result: {'final_score': 20.5, 'length_similarity': 0.0, 'token_similarity': 0.0, 'structure_similarity': 0.0, 'function_similarity': 100, 'complexity_similarity': 5.0, 'variable_similarity': 100}
