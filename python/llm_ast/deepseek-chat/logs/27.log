2025-01-08 09:16:35,114 - INFO - Processing sample 27
2025-01-08 09:16:35,114 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:16:50,152 - INFO - Successfully split code into 10 top-level declarations
2025-01-08 09:16:50,154 - INFO - Processing chunk #0 (size=319 chars, start_index=0)
2025-01-08 09:16:50,154 - INFO - Processing chunk with 319 chars starting at index 0
2025-01-08 09:16:50,155 - INFO - Starting main AST analysis flow
2025-01-08 09:16:50,155 - INFO - Tokenized code into 59 tokens
2025-01-08 09:16:50,155 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:50,156 - INFO - Processing chunk #1 (size=88 chars, start_index=59)
2025-01-08 09:16:50,156 - INFO - Processing chunk with 88 chars starting at index 59
2025-01-08 09:16:50,157 - INFO - Starting main AST analysis flow
2025-01-08 09:16:50,157 - INFO - Tokenized code into 22 tokens
2025-01-08 09:16:50,157 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:50,162 - INFO - Processing chunk #2 (size=94 chars, start_index=81)
2025-01-08 09:16:50,162 - INFO - Processing chunk with 94 chars starting at index 81
2025-01-08 09:16:50,162 - INFO - Starting main AST analysis flow
2025-01-08 09:16:50,162 - INFO - Tokenized code into 22 tokens
2025-01-08 09:16:50,162 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:50,164 - INFO - Processing chunk #3 (size=863 chars, start_index=103)
2025-01-08 09:16:50,164 - INFO - Processing chunk with 863 chars starting at index 103
2025-01-08 09:16:50,164 - INFO - Starting main AST analysis flow
2025-01-08 09:16:50,165 - INFO - Tokenized code into 155 tokens
2025-01-08 09:16:50,165 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:50,170 - INFO - Processing chunk #4 (size=871 chars, start_index=258)
2025-01-08 09:16:50,170 - INFO - Processing chunk with 871 chars starting at index 258
2025-01-08 09:16:50,170 - INFO - Starting main AST analysis flow
2025-01-08 09:16:50,170 - INFO - Tokenized code into 155 tokens
2025-01-08 09:16:50,170 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:50,172 - INFO - Processing chunk #5 (size=735 chars, start_index=413)
2025-01-08 09:16:50,173 - INFO - Processing chunk with 735 chars starting at index 413
2025-01-08 09:16:50,173 - INFO - Starting main AST analysis flow
2025-01-08 09:16:50,173 - INFO - Tokenized code into 134 tokens
2025-01-08 09:16:50,173 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:50,183 - INFO - Processing chunk #6 (size=617 chars, start_index=547)
2025-01-08 09:16:50,183 - INFO - Processing chunk with 617 chars starting at index 547
2025-01-08 09:16:50,183 - INFO - Starting main AST analysis flow
2025-01-08 09:16:50,183 - INFO - Tokenized code into 119 tokens
2025-01-08 09:16:50,184 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:50,189 - INFO - Processing chunk #7 (size=552 chars, start_index=666)
2025-01-08 09:16:50,190 - INFO - Processing chunk with 552 chars starting at index 666
2025-01-08 09:16:50,190 - INFO - Starting main AST analysis flow
2025-01-08 09:16:50,190 - INFO - Tokenized code into 108 tokens
2025-01-08 09:16:50,190 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:50,192 - INFO - Processing chunk #8 (size=627 chars, start_index=774)
2025-01-08 09:16:50,193 - INFO - Processing chunk with 627 chars starting at index 774
2025-01-08 09:16:50,193 - INFO - Starting main AST analysis flow
2025-01-08 09:16:50,193 - INFO - Tokenized code into 119 tokens
2025-01-08 09:16:50,193 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:50,199 - INFO - Processing chunk #9 (size=560 chars, start_index=893)
2025-01-08 09:16:50,199 - INFO - Processing chunk with 560 chars starting at index 893
2025-01-08 09:16:50,200 - INFO - Starting main AST analysis flow
2025-01-08 09:16:50,200 - INFO - Tokenized code into 108 tokens
2025-01-08 09:16:50,200 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:56,496 - INFO - Step 1 result: {'type': 'Program', 'name': 'mock_websocket', 'range': [64, 80], 'children': []}
2025-01-08 09:16:56,496 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:56,948 - INFO - Step 1 result: {'type': 'Program', 'name': 'test_websocket_router_invalid_method', 'range': [420, 546], 'children': []}
2025-01-08 09:16:56,949 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:57,816 - INFO - Step 1 result: {'type': 'Program', 'name': 'test_handle_subscribe_success', 'range': [554, 664], 'children': []}
2025-01-08 09:16:57,816 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:57,890 - INFO - Step 1 result: {'type': 'Program', 'name': 'test_handle_subscribe_missing_data', 'range': [673, 773], 'children': []}
2025-01-08 09:16:57,890 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:57,895 - INFO - Step 1 result: {'type': 'Program', 'name': 'test_websocket_router_unsubscribe', 'range': [258, 412], 'children': []}
2025-01-08 09:16:57,899 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:57,926 - INFO - Step 1 result: {'type': 'Program', 'name': 'test_handle_unsubscribe_missing_data', 'range': [900, 1000], 'children': []}
2025-01-08 09:16:57,926 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:58,064 - INFO - Step 1 result: {'type': 'Program', 'name': 'mock_manager', 'range': [86, 102], 'children': []}
2025-01-08 09:16:58,065 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:59,387 - INFO - Step 1 result: {'type': 'Program', 'name': 'test_websocket_router_subscribe', 'range': [103, 257], 'children': []}
2025-01-08 09:16:59,387 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:59,780 - INFO - Step 1 result: {'type': 'Program', 'name': 'test_handle_unsubscribe_success', 'range': [774, 892], 'children': []}
2025-01-08 09:16:59,780 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:03,559 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 58], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 4], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [5, 11], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [13, 15], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [16, 22], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [24, 32], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [33, 58], 'children': []}]}
2025-01-08 09:17:03,559 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:07,724 - INFO - Step 2 result: {'type': 'Program', 'name': 'mock_websocket', 'range': [64, 80], 'children': [{'type': 'FunctionDeclaration', 'name': 'mock_websocket', 'range': [64, 80], 'children': [{'type': 'Decorator', 'name': '@pytest.fixture', 'range': [59, 63], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [73, 80], 'children': [{'type': 'CallExpression', 'name': 'AsyncMock', 'range': [74, 79], 'children': [{'type': 'Argument', 'name': 'spec', 'range': [76, 78], 'children': []}]}]}]}]}
2025-01-08 09:17:07,724 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:23,502 - INFO - Step 3 result: {'type': 'Program', 'name': 'mock_websocket', 'range': [64, 80], 'children': [{'type': 'FunctionDeclaration', 'name': 'mock_websocket', 'range': [64, 80], 'children': [{'type': 'Decorator', 'name': '@pytest.fixture', 'range': [59, 63], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [73, 80], 'children': [{'type': 'CallExpression', 'name': 'AsyncMock', 'range': [74, 79], 'children': [{'type': 'Argument', 'name': 'spec', 'range': [76, 78], 'children': []}]}]}]}]}
2025-01-08 09:17:23,502 - INFO - Starting Step 4: AST normalization
2025-01-08 09:17:26,189 - INFO - Step 2 result: {'type': 'Program', 'name': 'mock_manager', 'range': [86, 102], 'children': [{'type': 'FunctionDeclaration', 'name': 'mock_manager', 'range': [86, 102], 'children': [{'type': 'FunctionSignature', 'name': 'mock_manager', 'range': [86, 93], 'children': [{'type': 'Keyword', 'name': 'def', 'range': [86, 89], 'children': []}, {'type': 'Identifier', 'name': 'mock_manager', 'range': [87, 99], 'children': []}, {'type': 'Parameters', 'name': '', 'range': [88, 89], 'children': []}, {'type': 'ReturnType', 'name': 'AsyncMock', 'range': [90, 93], 'children': [{'type': 'Keyword', 'name': '->', 'range': [90, 92], 'children': []}, {'type': 'Identifier', 'name': 'AsyncMock', 'range': [92, 101], 'children': []}]}]}, {'type': 'FunctionBody', 'name': '', 'range': [94, 102], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [95, 102], 'children': [{'type': 'Keyword', 'name': 'return', 'range': [95, 101], 'children': []}, {'type': 'CallExpression', 'name': 'AsyncMock', 'range': [96, 101], 'children': [{'type': 'Identifier', 'name': 'AsyncMock', 'range': [96, 104], 'children': []}, {'type': 'Arguments', 'name': '', 'range': [97, 101], 'children': [{'type': 'Argument', 'name': 'spec', 'range': [98, 101], 'children': [{'type': 'Identifier', 'name': 'spec', 'range': [98, 101], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [99, 100], 'children': []}, {'type': 'Identifier', 'name': 'ConnectionManager', 'range': [100, 117], 'children': []}]}]}]}]}]}]}]}
2025-01-08 09:17:26,189 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:29,231 - INFO - Step 2 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 4], 'children': [{'type': 'FromImport', 'name': 'typing', 'range': [0, 1], 'children': []}, {'type': 'Import', 'name': 'cast', 'range': [2, 3], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [5, 11], 'children': [{'type': 'FromImport', 'name': 'unittest.mock', 'range': [5, 8], 'children': []}, {'type': 'Import', 'name': 'AsyncMock', 'range': [9, 10], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [13, 15], 'children': [{'type': 'Import', 'name': 'pytest', 'range': [13, 14], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [16, 22], 'children': [{'type': 'FromImport', 'name': 'fastapi', 'range': [16, 17], 'children': []}, {'type': 'Import', 'name': 'WebSocket, WebSocketDisconnect', 'range': [18, 21], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [24, 32], 'children': [{'type': 'FromImport', 'name': 'backend.server.conn_manager', 'range': [24, 29], 'children': []}, {'type': 'Import', 'name': 'ConnectionManager', 'range': [30, 31], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [33, 58], 'children': [{'type': 'FromImport', 'name': 'backend.server.ws_api', 'range': [33, 38], 'children': []}, {'type': 'Import', 'name': 'Methods, WsMessage, handle_subscribe, handle_unsubscribe, websocket_router', 'range': [39, 57], 'children': []}]}]}
2025-01-08 09:17:29,231 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:36,541 - INFO - Step 2 result: {'type': 'Program', 'name': 'test_handle_subscribe_missing_data', 'range': [673, 773], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_handle_subscribe_missing_data', 'range': [673, 773], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [666, 671], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_handle_subscribe_missing_data', 'range': [673, 689], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [678, 680], 'children': []}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [682, 684], 'children': []}, {'type': 'ReturnType', 'name': 'None', 'range': [687, 689], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [691, 773], 'children': [{'type': 'VariableDeclaration', 'name': 'message', 'range': [692, 701], 'children': [{'type': 'Assignment', 'name': '=', 'range': [693, 701], 'children': [{'type': 'ObjectCreation', 'name': 'WsMessage', 'range': [694, 701], 'children': [{'type': 'Argument', 'name': 'method', 'range': [696, 700], 'children': []}]}]}]}, {'type': 'AwaitExpression', 'name': 'await', 'range': [704, 724], 'children': [{'type': 'FunctionCall', 'name': 'handle_subscribe', 'range': [705, 724], 'children': [{'type': 'Argument', 'name': 'cast', 'range': [708, 713], 'children': []}, {'type': 'Argument', 'name': 'cast', 'range': [715, 720], 'children': []}, {'type': 'Argument', 'name': 'message', 'range': [722, 722], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'mock_manager.subscribe.assert_not_called', 'range': [727, 733], 'children': []}, {'type': 'ExpressionStatement', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [735, 741], 'children': []}, {'type': 'AssertStatement', 'name': 'assert', 'range': [743, 757], 'children': [{'type': 'InExpression', 'name': 'in', 'range': [745, 757], 'children': [{'type': 'StringLiteral', 'name': '"method":"error"', 'range': [744, 744], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args', 'range': [746, 756], 'children': []}]}]}, {'type': 'AssertStatement', 'name': 'assert', 'range': [758, 772], 'children': [{'type': 'InExpression', 'name': 'in', 'range': [760, 772], 'children': [{'type': 'StringLiteral', 'name': '"success":false', 'range': [759, 759], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args', 'range': [761, 771], 'children': []}]}]}]}]}]}
2025-01-08 09:17:36,541 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:36,938 - INFO - Step 2 result: {'type': 'Program', 'name': 'test_handle_unsubscribe_success', 'range': [774, 892], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [774, 779], 'children': []}, {'type': 'FunctionDef', 'name': 'test_handle_unsubscribe_success', 'range': [781, 892], 'children': [{'type': 'Arguments', 'name': '', 'range': [783, 793], 'children': [{'type': 'Argument', 'name': 'mock_websocket', 'range': [786, 788], 'children': []}, {'type': 'Argument', 'name': 'mock_manager', 'range': [790, 792], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [795, 797], 'children': []}, {'type': 'Assignment', 'name': 'message', 'range': [800, 817], 'children': [{'type': 'Call', 'name': 'WsMessage', 'range': [802, 817], 'children': [{'type': 'KeywordArgument', 'name': 'method', 'range': [804, 808], 'children': []}, {'type': 'KeywordArgument', 'name': 'data', 'range': [810, 816], 'children': []}]}]}, {'type': 'Await', 'name': 'await', 'range': [820, 840], 'children': [{'type': 'Call', 'name': 'handle_unsubscribe', 'range': [821, 840], 'children': [{'type': 'Call', 'name': 'cast', 'range': [824, 829], 'children': []}, {'type': 'Call', 'name': 'cast', 'range': [831, 836], 'children': []}, {'type': 'Variable', 'name': 'message', 'range': [838, 838], 'children': []}]}]}, {'type': 'Expression', 'name': 'mock_manager.unsubscribe.assert_called_once_with', 'range': [843, 852], 'children': [{'type': 'StringLiteral', 'name': '"test_graph"', 'range': [849, 849], 'children': []}, {'type': 'Variable', 'name': 'mock_websocket', 'range': [851, 851], 'children': []}]}, {'type': 'Expression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [854, 860], 'children': []}, {'type': 'Assert', 'name': 'assert', 'range': [862, 875], 'children': [{'type': 'StringLiteral', 'name': '\'"method":"unsubscribe"\'', 'range': [863, 863], 'children': []}, {'type': 'In', 'name': 'in', 'range': [864, 864], 'children': []}, {'type': 'Attribute', 'name': 'mock_websocket.send_text.call_args', 'range': [865, 875], 'children': []}]}, {'type': 'Assert', 'name': 'assert', 'range': [877, 890], 'children': [{'type': 'StringLiteral', 'name': '\'"success":true\'', 'range': [878, 878], 'children': []}, {'type': 'In', 'name': 'in', 'range': [879, 879], 'children': []}, {'type': 'Attribute', 'name': 'mock_websocket.send_text.call_args', 'range': [880, 890], 'children': []}]}]}]}
2025-01-08 09:17:36,938 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:38,589 - INFO - Step 4 result: {'type': 'Program', 'name': 'mock_websocket', 'range': [64, 80], 'children': [{'type': 'FunctionDecl', 'name': 'mock_websocket', 'range': [64, 80], 'children': [{'type': 'Decorator', 'name': '@pytest.fixture', 'range': [59, 63], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [73, 80], 'children': [{'type': 'CallExpression', 'name': 'AsyncMock', 'range': [74, 79], 'children': [{'type': 'Argument', 'name': 'spec', 'range': [76, 78], 'children': []}]}]}]}]}
2025-01-08 09:17:38,589 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:17:42,276 - INFO - Step 2 result: {'type': 'Program', 'name': 'test_handle_unsubscribe_missing_data', 'range': [900, 1000], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_handle_unsubscribe_missing_data', 'range': [900, 1000], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [893, 899], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_handle_unsubscribe_missing_data', 'range': [900, 917], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [900, 905], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [901, 904], 'children': []}, {'type': 'Identifier', 'name': 'test_handle_unsubscribe_missing_data', 'range': [902, 933], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [903, 913], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [905, 911], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [907, 911], 'children': []}]}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [909, 911], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [911, 911], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'None', 'range': [914, 917], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [918, 1000], 'children': [{'type': 'VariableDeclaration', 'name': 'message', 'range': [919, 929], 'children': [{'type': 'Assignment', 'name': '=', 'range': [920, 920], 'children': []}, {'type': 'CallExpression', 'name': 'WsMessage', 'range': [921, 928], 'children': [{'type': 'Argument', 'name': 'method=Methods.UNSUBSCRIBE', 'range': [923, 927], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'await handle_unsubscribe', 'range': [931, 951], 'children': [{'type': 'AwaitExpression', 'name': 'await', 'range': [931, 936], 'children': []}, {'type': 'CallExpression', 'name': 'handle_unsubscribe', 'range': [932, 950], 'children': [{'type': 'Argument', 'name': 'cast(WebSocket, mock_websocket)', 'range': [935, 940], 'children': []}, {'type': 'Argument', 'name': 'cast(ConnectionManager, mock_manager)', 'range': [942, 947], 'children': []}, {'type': 'Argument', 'name': 'message', 'range': [949, 949], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'mock_manager.unsubscribe.assert_not_called', 'range': [954, 961], 'children': [{'type': 'CallExpression', 'name': 'assert_not_called', 'range': [958, 960], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [962, 969], 'children': [{'type': 'CallExpression', 'name': 'assert_called_once', 'range': [966, 968], 'children': []}]}, {'type': 'AssertStatement', 'name': 'assert \'"method":"error"\' in mock_websocket.send_text.call_args[0][0]', 'range': [970, 984], 'children': []}, {'type': 'AssertStatement', 'name': 'assert \'"success":false\' in mock_websocket.send_text.call_args[0][0]', 'range': [985, 999], 'children': []}]}]}]}
2025-01-08 09:17:42,277 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:44,509 - INFO - Step 2 result: {'type': 'Program', 'name': 'test_websocket_router_unsubscribe', 'range': [258, 412], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [258, 264], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'test_websocket_router_unsubscribe', 'range': [265, 412], 'children': [{'type': 'FunctionSignature', 'name': 'test_websocket_router_unsubscribe', 'range': [265, 282], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [265, 270], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [266, 269], 'children': []}, {'type': 'Identifier', 'name': 'test_websocket_router_unsubscribe', 'range': [267, 300], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [268, 278], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [270, 276], 'children': []}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [274, 276], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [279, 281], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [283, 412], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [284, 322], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [284, 321], 'children': [{'type': 'MemberExpression', 'name': 'mock_websocket.receive_text.side_effect', 'range': [284, 289], 'children': []}, {'type': 'ArrayExpression', 'name': '', 'range': [290, 321], 'children': [{'type': 'CallExpression', 'name': 'WsMessage.model_dump_json', 'range': [292, 314], 'children': []}, {'type': 'CallExpression', 'name': 'WebSocketDisconnect', 'range': [316, 319], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [324, 343], 'children': [{'type': 'AwaitExpression', 'name': '', 'range': [324, 342], 'children': [{'type': 'CallExpression', 'name': 'websocket_router', 'range': [325, 342], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [328, 333], 'children': []}, {'type': 'CallExpression', 'name': 'cast', 'range': [335, 340], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [345, 353], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.connect.assert_called_once_with', 'range': [345, 352], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [354, 364], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.unsubscribe.assert_called_once_with', 'range': [354, 363], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [365, 372], 'children': [{'type': 'CallExpression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [365, 371], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [373, 387], 'children': [{'type': 'AssertStatement', 'name': '', 'range': [373, 387], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [388, 402], 'children': [{'type': 'AssertStatement', 'name': '', 'range': [388, 402], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [403, 411], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.disconnect.assert_called_once_with', 'range': [403, 410], 'children': []}]}]}]}]}
2025-01-08 09:17:44,509 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:48,654 - INFO - Step 3 result: {'type': 'Program', 'name': 'mock_manager', 'range': [86, 102], 'children': [{'type': 'FunctionDeclaration', 'name': 'mock_manager', 'range': [86, 102], 'children': [{'type': 'FunctionSignature', 'name': 'mock_manager', 'range': [86, 93], 'children': [{'type': 'Keyword', 'name': 'def', 'range': [86, 89]}, {'type': 'Identifier', 'name': 'mock_manager', 'range': [87, 99]}, {'type': 'ReturnType', 'name': 'AsyncMock', 'range': [90, 93], 'children': [{'type': 'Keyword', 'name': '->', 'range': [90, 92]}, {'type': 'Identifier', 'name': 'AsyncMock', 'range': [92, 101]}]}]}, {'type': 'FunctionBody', 'name': '', 'range': [94, 102], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [95, 102], 'children': [{'type': 'Keyword', 'name': 'return', 'range': [95, 101]}, {'type': 'CallExpression', 'name': 'AsyncMock', 'range': [96, 101], 'children': [{'type': 'Identifier', 'name': 'AsyncMock', 'range': [96, 104]}, {'type': 'Arguments', 'name': '', 'range': [97, 101], 'children': [{'type': 'Argument', 'name': 'spec', 'range': [98, 101], 'children': [{'type': 'Identifier', 'name': 'spec', 'range': [98, 101]}, {'type': 'Identifier', 'name': 'ConnectionManager', 'range': [100, 117]}]}]}]}]}]}]}]}
2025-01-08 09:17:48,654 - INFO - Starting Step 4: AST normalization
2025-01-08 09:17:51,270 - INFO - Step 2 result: {'type': 'Program', 'name': 'test_websocket_router_subscribe', 'range': [103, 257], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [103, 109], 'children': []}, {'type': 'FunctionDef', 'name': 'test_websocket_router_subscribe', 'range': [110, 257], 'children': [{'type': 'AsyncKeyword', 'name': 'async', 'range': [110, 115], 'children': []}, {'type': 'DefKeyword', 'name': 'def', 'range': [111, 114], 'children': []}, {'type': 'FunctionName', 'name': 'test_websocket_router_subscribe', 'range': [112, 145], 'children': []}, {'type': 'Parameters', 'name': 'parameters', 'range': [113, 123], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [115, 121], 'children': [{'type': 'Colon', 'name': ':', 'range': [116, 117], 'children': []}, {'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [117, 126], 'children': []}]}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [119, 125], 'children': [{'type': 'Colon', 'name': ':', 'range': [120, 121], 'children': []}, {'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [121, 130], 'children': []}]}]}, {'type': 'ReturnType', 'name': '-> None', 'range': [124, 130], 'children': []}, {'type': 'Colon', 'name': ':', 'range': [127, 128], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [128, 257], 'children': [{'type': 'Assignment', 'name': 'mock_websocket.receive_text.side_effect', 'range': [129, 166], 'children': [{'type': 'LeftHandSide', 'name': 'mock_websocket.receive_text.side_effect', 'range': [129, 145], 'children': []}, {'type': 'Equals', 'name': '=', 'range': [134, 135], 'children': []}, {'type': 'RightHandSide', 'name': '[WsMessage(method=Methods.SUBSCRIBE, data={"graph_id":"test_graph"}).model_dump_json(), WebSocketDisconnect()]', 'range': [135, 166], 'children': [{'type': 'List', 'name': '[]', 'range': [135, 166], 'children': [{'type': 'WsMessageCall', 'name': 'WsMessage(method=Methods.SUBSCRIBE, data={"graph_id":"test_graph"}).model_dump_json()', 'range': [137, 159], 'children': []}, {'type': 'WebSocketDisconnectCall', 'name': 'WebSocketDisconnect()', 'range': [161, 164], 'children': []}]}]}]}, {'type': 'AwaitExpression', 'name': 'await websocket_router(cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager))', 'range': [169, 187], 'children': [{'type': 'AwaitKeyword', 'name': 'await', 'range': [169, 174], 'children': []}, {'type': 'FunctionCall', 'name': 'websocket_router(cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager))', 'range': [170, 187], 'children': [{'type': 'FunctionName', 'name': 'websocket_router', 'range': [170, 185], 'children': []}, {'type': 'Arguments', 'name': 'arguments', 'range': [171, 187], 'children': [{'type': 'CastCall', 'name': 'cast(WebSocket, mock_websocket)', 'range': [173, 178], 'children': []}, {'type': 'CastCall', 'name': 'cast(ConnectionManager, mock_manager)', 'range': [180, 185], 'children': []}]}]}]}, {'type': 'AssertStatement', 'name': 'mock_manager.connect.assert_called_once_with(mock_websocket)', 'range': [190, 197], 'children': []}, {'type': 'AssertStatement', 'name': 'mock_manager.subscribe.assert_called_once_with("test_graph", mock_websocket)', 'range': [199, 208], 'children': []}, {'type': 'AssertStatement', 'name': 'mock_websocket.send_text.assert_called_once()', 'range': [210, 216], 'children': []}, {'type': 'AssertStatement', 'name': 'assert \'"method":"subscribe"\' in mock_websocket.send_text.call_args[0][0]', 'range': [218, 232], 'children': []}, {'type': 'AssertStatement', 'name': 'assert \'"success":true\' in mock_websocket.send_text.call_args[0][0]', 'range': [233, 247], 'children': []}, {'type': 'AssertStatement', 'name': 'mock_manager.disconnect.assert_called_once_with(mock_websocket)', 'range': [248, 255], 'children': []}]}]}]}
2025-01-08 09:17:51,270 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:54,672 - INFO - Step 5 result: {'type': 'Program', 'name': 'mock_websocket', 'range': [64, 80], 'children': [{'type': 'FunctionDecl', 'name': 'mock_websocket', 'range': [64, 80], 'children': [{'type': 'Decorator', 'name': '@pytest.fixture', 'range': [59, 63], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [73, 80], 'children': [{'type': 'CallExpression', 'name': 'AsyncMock', 'range': [74, 79], 'children': [{'type': 'Argument', 'name': 'spec', 'range': [76, 78], 'children': []}]}]}]}]}
2025-01-08 09:17:54,673 - INFO - Completed main AST analysis flow
2025-01-08 09:17:54,673 - INFO - Successfully processed chunk
2025-01-08 09:17:55,998 - INFO - Step 3 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 4], 'children': [{'type': 'FromImport', 'name': 'typing', 'range': [0, 1], 'children': []}, {'type': 'Import', 'name': 'cast', 'range': [2, 3], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [5, 11], 'children': [{'type': 'FromImport', 'name': 'unittest.mock', 'range': [5, 8], 'children': []}, {'type': 'Import', 'name': 'AsyncMock', 'range': [9, 10], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [13, 15], 'children': [{'type': 'Import', 'name': 'pytest', 'range': [13, 14], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [16, 22], 'children': [{'type': 'FromImport', 'name': 'fastapi', 'range': [16, 17], 'children': []}, {'type': 'Import', 'name': 'WebSocket WebSocketDisconnect', 'range': [18, 21], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [24, 32], 'children': [{'type': 'FromImport', 'name': 'backend.server.conn_manager', 'range': [24, 29], 'children': []}, {'type': 'Import', 'name': 'ConnectionManager', 'range': [30, 31], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [33, 58], 'children': [{'type': 'FromImport', 'name': 'backend.server.ws_api', 'range': [33, 38], 'children': []}, {'type': 'Import', 'name': 'Methods WsMessage handle_subscribe handle_unsubscribe websocket_router', 'range': [39, 57], 'children': []}]}]}
2025-01-08 09:17:55,998 - INFO - Starting Step 4: AST normalization
2025-01-08 09:17:59,605 - INFO - Step 2 result: {'type': 'Program', 'name': 'test_websocket_router_invalid_method', 'range': [420, 546], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_websocket_router_invalid_method', 'range': [420, 546], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [413, 419], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_websocket_router_invalid_method', 'range': [420, 437], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [420, 425], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [421, 424], 'children': []}, {'type': 'Identifier', 'name': 'test_websocket_router_invalid_method', 'range': [422, 453], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [423, 433], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [425, 431], 'children': []}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [429, 431], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [434, 437], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [438, 546], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [439, 466], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [439, 466], 'children': [{'type': 'MemberExpression', 'name': 'mock_websocket.receive_text.side_effect', 'range': [439, 443], 'children': []}, {'type': 'ArrayExpression', 'name': '', 'range': [445, 466], 'children': [{'type': 'CallExpression', 'name': 'WsMessage', 'range': [447, 459], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [448, 454], 'children': [{'type': 'AssignmentExpression', 'name': 'method=Methods.EXECUTION_EVENT', 'range': [449, 453], 'children': []}]}, {'type': 'MemberExpression', 'name': 'model_dump_json', 'range': [455, 458], 'children': []}]}, {'type': 'CallExpression', 'name': 'WebSocketDisconnect', 'range': [461, 464], 'children': []}]}]}]}, {'type': 'AwaitExpression', 'name': '', 'range': [469, 488], 'children': [{'type': 'CallExpression', 'name': 'websocket_router', 'range': [470, 487], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [471, 486], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [473, 478], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [474, 477], 'children': [{'type': 'Identifier', 'name': 'WebSocket', 'range': [475, 483], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [477, 490], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'cast', 'range': [480, 485], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [481, 484], 'children': [{'type': 'Identifier', 'name': 'ConnectionManager', 'range': [482, 499], 'children': []}, {'type': 'Identifier', 'name': 'mock_manager', 'range': [484, 496], 'children': []}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [490, 498], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.connect.assert_called_once_with', 'range': [490, 497], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [495, 497], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [496, 509], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [499, 506], 'children': [{'type': 'CallExpression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [499, 505], 'children': []}]}, {'type': 'AssertStatement', 'name': '', 'range': [507, 521], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [508, 520], 'children': [{'type': 'StringLiteral', 'name': '"method":"error"', 'range': [508, 520], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [510, 520], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [522, 536], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [523, 535], 'children': [{'type': 'StringLiteral', 'name': '"success":false', 'range': [523, 535], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [525, 535], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [537, 545], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.disconnect.assert_called_once_with', 'range': [537, 544], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [542, 544], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [543, 556], 'children': []}]}]}]}]}]}]}
2025-01-08 09:17:59,606 - INFO - Starting Step 3: AST simplification
2025-01-08 09:18:08,841 - INFO - Step 4 result: {'type': 'Program', 'name': 'mock_manager', 'range': [86, 102], 'children': [{'type': 'FunctionDecl', 'name': 'mock_manager', 'range': [86, 102], 'children': [{'type': 'FunctionSignature', 'name': 'mock_manager', 'range': [86, 93], 'children': [{'type': 'Keyword', 'name': 'def', 'range': [86, 89]}, {'type': 'Identifier', 'name': 'mock_manager', 'range': [87, 99]}, {'type': 'ReturnType', 'name': 'AsyncMock', 'range': [90, 93], 'children': [{'type': 'Keyword', 'name': '->', 'range': [90, 92]}, {'type': 'Identifier', 'name': 'AsyncMock', 'range': [92, 101]}]}]}, {'type': 'FunctionBody', 'name': '', 'range': [94, 102], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [95, 102], 'children': [{'type': 'Keyword', 'name': 'return', 'range': [95, 101]}, {'type': 'CallExpression', 'name': 'AsyncMock', 'range': [96, 101], 'children': [{'type': 'Identifier', 'name': 'AsyncMock', 'range': [96, 104]}, {'type': 'Arguments', 'name': '', 'range': [97, 101], 'children': [{'type': 'Argument', 'name': 'spec', 'range': [98, 101], 'children': [{'type': 'Identifier', 'name': 'spec', 'range': [98, 101]}, {'type': 'Identifier', 'name': 'ConnectionManager', 'range': [100, 117]}]}]}]}]}]}]}]}
2025-01-08 09:18:08,841 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:18,022 - INFO - Step 3 result: {'type': 'Program', 'name': 'test_handle_unsubscribe_success', 'range': [774, 892], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [774, 779], 'children': []}, {'type': 'FunctionDef', 'name': 'test_handle_unsubscribe_success', 'range': [781, 892], 'children': [{'type': 'Arguments', 'name': '', 'range': [783, 793], 'children': [{'type': 'Argument', 'name': 'mock_websocket', 'range': [786, 788], 'children': []}, {'type': 'Argument', 'name': 'mock_manager', 'range': [790, 792], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [795, 797], 'children': []}, {'type': 'Assignment', 'name': 'message', 'range': [800, 817], 'children': [{'type': 'Call', 'name': 'WsMessage', 'range': [802, 817], 'children': [{'type': 'KeywordArgument', 'name': 'method', 'range': [804, 808], 'children': []}, {'type': 'KeywordArgument', 'name': 'data', 'range': [810, 816], 'children': []}]}]}, {'type': 'Await', 'name': 'await', 'range': [820, 840], 'children': [{'type': 'Call', 'name': 'handle_unsubscribe', 'range': [821, 840], 'children': [{'type': 'Call', 'name': 'cast', 'range': [824, 829], 'children': []}, {'type': 'Call', 'name': 'cast', 'range': [831, 836], 'children': []}, {'type': 'Variable', 'name': 'message', 'range': [838, 838], 'children': []}]}]}, {'type': 'Expression', 'name': 'mock_manager.unsubscribe.assert_called_once_with', 'range': [843, 852], 'children': [{'type': 'StringLiteral', 'name': '"test_graph"', 'range': [849, 849], 'children': []}, {'type': 'Variable', 'name': 'mock_websocket', 'range': [851, 851], 'children': []}]}, {'type': 'Expression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [854, 860], 'children': []}, {'type': 'Assert', 'name': 'assert', 'range': [862, 875], 'children': [{'type': 'StringLiteral', 'name': '\'"method":"unsubscribe"\'', 'range': [863, 863], 'children': []}, {'type': 'In', 'name': 'in', 'range': [864, 864], 'children': []}, {'type': 'Attribute', 'name': 'mock_websocket.send_text.call_args', 'range': [865, 875], 'children': []}]}, {'type': 'Assert', 'name': 'assert', 'range': [877, 890], 'children': [{'type': 'StringLiteral', 'name': '\'"success":true\'', 'range': [878, 878], 'children': []}, {'type': 'In', 'name': 'in', 'range': [879, 879], 'children': []}, {'type': 'Attribute', 'name': 'mock_websocket.send_text.call_args', 'range': [880, 890], 'children': []}]}]}]}
2025-01-08 09:18:18,023 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:21,289 - INFO - Step 3 result: {'type': 'Program', 'name': 'test_handle_subscribe_missing_data', 'range': [673, 773], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_handle_subscribe_missing_data', 'range': [673, 773], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [666, 671], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_handle_subscribe_missing_data', 'range': [673, 689], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [678, 680], 'children': []}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [682, 684], 'children': []}, {'type': 'ReturnType', 'name': 'None', 'range': [687, 689], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [691, 773], 'children': [{'type': 'VariableDeclaration', 'name': 'message', 'range': [692, 701], 'children': [{'type': 'Assignment', 'name': '=', 'range': [693, 701], 'children': [{'type': 'ObjectCreation', 'name': 'WsMessage', 'range': [694, 701], 'children': [{'type': 'Argument', 'name': 'method', 'range': [696, 700], 'children': []}]}]}]}, {'type': 'AwaitExpression', 'name': 'await', 'range': [704, 724], 'children': [{'type': 'FunctionCall', 'name': 'handle_subscribe', 'range': [705, 724], 'children': [{'type': 'Argument', 'name': 'cast', 'range': [708, 713], 'children': []}, {'type': 'Argument', 'name': 'cast', 'range': [715, 720], 'children': []}, {'type': 'Argument', 'name': 'message', 'range': [722, 722], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'mock_manager.subscribe.assert_not_called', 'range': [727, 733], 'children': []}, {'type': 'ExpressionStatement', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [735, 741], 'children': []}, {'type': 'AssertStatement', 'name': 'assert', 'range': [743, 757], 'children': [{'type': 'InExpression', 'name': 'in', 'range': [745, 757], 'children': [{'type': 'StringLiteral', 'name': '"method":"error"', 'range': [744, 744], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args', 'range': [746, 756], 'children': []}]}]}, {'type': 'AssertStatement', 'name': 'assert', 'range': [758, 772], 'children': [{'type': 'InExpression', 'name': 'in', 'range': [760, 772], 'children': [{'type': 'StringLiteral', 'name': '"success":false', 'range': [759, 759], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args', 'range': [761, 771], 'children': []}]}]}]}]}]}
2025-01-08 09:18:21,289 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:24,720 - INFO - Step 3 result: {'type': 'Program', 'name': 'test_handle_unsubscribe_missing_data', 'range': [900, 1000], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_handle_unsubscribe_missing_data', 'range': [900, 1000], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [893, 899], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_handle_unsubscribe_missing_data', 'range': [900, 917], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [900, 905], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [901, 904], 'children': []}, {'type': 'Identifier', 'name': 'test_handle_unsubscribe_missing_data', 'range': [902, 933], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [903, 913], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [905, 911], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [907, 911], 'children': []}]}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [909, 911], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [911, 911], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'None', 'range': [914, 917], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [918, 1000], 'children': [{'type': 'VariableDeclaration', 'name': 'message', 'range': [919, 929], 'children': [{'type': 'Assignment', 'name': '=', 'range': [920, 920], 'children': []}, {'type': 'CallExpression', 'name': 'WsMessage', 'range': [921, 928], 'children': [{'type': 'Argument', 'name': 'method=Methods.UNSUBSCRIBE', 'range': [923, 927], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'await handle_unsubscribe', 'range': [931, 951], 'children': [{'type': 'AwaitExpression', 'name': 'await', 'range': [931, 936], 'children': []}, {'type': 'CallExpression', 'name': 'handle_unsubscribe', 'range': [932, 950], 'children': [{'type': 'Argument', 'name': 'cast(WebSocket, mock_websocket)', 'range': [935, 940], 'children': []}, {'type': 'Argument', 'name': 'cast(ConnectionManager, mock_manager)', 'range': [942, 947], 'children': []}, {'type': 'Argument', 'name': 'message', 'range': [949, 949], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'mock_manager.unsubscribe.assert_not_called', 'range': [954, 961], 'children': [{'type': 'CallExpression', 'name': 'assert_not_called', 'range': [958, 960], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [962, 969], 'children': [{'type': 'CallExpression', 'name': 'assert_called_once', 'range': [966, 968], 'children': []}]}, {'type': 'AssertStatement', 'name': 'assert \'"method":"error"\' in mock_websocket.send_text.call_args[0][0]', 'range': [970, 984], 'children': []}, {'type': 'AssertStatement', 'name': 'assert \'"success":false\' in mock_websocket.send_text.call_args[0][0]', 'range': [985, 999], 'children': []}]}]}]}
2025-01-08 09:18:24,720 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:26,491 - INFO - Step 4 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 4], 'children': [{'type': 'FromImport', 'name': 'typing', 'range': [0, 1], 'children': []}, {'type': 'Import', 'name': 'cast', 'range': [2, 3], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [5, 11], 'children': [{'type': 'FromImport', 'name': 'unittest.mock', 'range': [5, 8], 'children': []}, {'type': 'Import', 'name': 'AsyncMock', 'range': [9, 10], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [13, 15], 'children': [{'type': 'Import', 'name': 'pytest', 'range': [13, 14], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [16, 22], 'children': [{'type': 'FromImport', 'name': 'fastapi', 'range': [16, 17], 'children': []}, {'type': 'Import', 'name': 'WebSocket WebSocketDisconnect', 'range': [18, 21], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [24, 32], 'children': [{'type': 'FromImport', 'name': 'backend.server.conn_manager', 'range': [24, 29], 'children': []}, {'type': 'Import', 'name': 'ConnectionManager', 'range': [30, 31], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [33, 58], 'children': [{'type': 'FromImport', 'name': 'backend.server.ws_api', 'range': [33, 38], 'children': []}, {'type': 'Import', 'name': 'Methods WsMessage handle_subscribe handle_unsubscribe websocket_router', 'range': [39, 57], 'children': []}]}]}
2025-01-08 09:18:26,491 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:33,346 - INFO - Step 5 result: {'type': 'Program', 'name': 'mock_manager', 'range': [86, 102], 'children': [{'type': 'FunctionDecl', 'name': 'mock_manager', 'range': [86, 102], 'children': [{'type': 'FunctionSignature', 'name': 'mock_manager', 'range': [86, 93], 'children': [{'type': 'Keyword', 'name': 'def', 'range': [86, 89]}, {'type': 'Identifier', 'name': 'mock_manager', 'range': [87, 99]}, {'type': 'ReturnType', 'name': 'AsyncMock', 'range': [90, 93], 'children': [{'type': 'Keyword', 'name': '->', 'range': [90, 92]}, {'type': 'Identifier', 'name': 'AsyncMock', 'range': [92, 101]}]}]}, {'type': 'FunctionBody', 'name': '', 'range': [94, 102], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [95, 102], 'children': [{'type': 'Keyword', 'name': 'return', 'range': [95, 101]}, {'type': 'CallExpression', 'name': 'AsyncMock', 'range': [96, 101], 'children': [{'type': 'Identifier', 'name': 'AsyncMock', 'range': [96, 104]}, {'type': 'Arguments', 'name': '', 'range': [97, 101], 'children': [{'type': 'Argument', 'name': 'spec', 'range': [98, 101], 'children': [{'type': 'Identifier', 'name': 'spec', 'range': [98, 101]}, {'type': 'Identifier', 'name': 'ConnectionManager', 'range': [100, 117]}]}]}]}]}]}]}]}
2025-01-08 09:18:33,346 - INFO - Completed main AST analysis flow
2025-01-08 09:18:33,347 - INFO - Successfully processed chunk
2025-01-08 09:18:33,463 - INFO - Step 3 result: {'type': 'Program', 'name': 'test_websocket_router_unsubscribe', 'range': [258, 412], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [258, 264], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'test_websocket_router_unsubscribe', 'range': [265, 412], 'children': [{'type': 'FunctionSignature', 'name': 'test_websocket_router_unsubscribe', 'range': [265, 282], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [265, 270], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [266, 269], 'children': []}, {'type': 'Identifier', 'name': 'test_websocket_router_unsubscribe', 'range': [267, 300], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [268, 278], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [270, 276], 'children': []}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [274, 276], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [279, 281], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [283, 412], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [284, 322], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [284, 321], 'children': [{'type': 'MemberExpression', 'name': 'mock_websocket.receive_text.side_effect', 'range': [284, 289], 'children': []}, {'type': 'ArrayExpression', 'name': '', 'range': [290, 321], 'children': [{'type': 'CallExpression', 'name': 'WsMessage.model_dump_json', 'range': [292, 314], 'children': []}, {'type': 'CallExpression', 'name': 'WebSocketDisconnect', 'range': [316, 319], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [324, 343], 'children': [{'type': 'AwaitExpression', 'name': '', 'range': [324, 342], 'children': [{'type': 'CallExpression', 'name': 'websocket_router', 'range': [325, 342], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [328, 333], 'children': []}, {'type': 'CallExpression', 'name': 'cast', 'range': [335, 340], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [345, 353], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.connect.assert_called_once_with', 'range': [345, 352], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [354, 364], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.unsubscribe.assert_called_once_with', 'range': [354, 363], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [365, 372], 'children': [{'type': 'CallExpression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [365, 371], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [373, 387], 'children': [{'type': 'AssertStatement', 'name': '', 'range': [373, 387], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [388, 402], 'children': [{'type': 'AssertStatement', 'name': '', 'range': [388, 402], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [403, 411], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.disconnect.assert_called_once_with', 'range': [403, 410], 'children': []}]}]}]}]}
2025-01-08 09:18:33,464 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:35,124 - INFO - Step 3 result: {'type': 'Program', 'name': 'test_websocket_router_subscribe', 'range': [103, 257], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [103, 109], 'children': []}, {'type': 'FunctionDef', 'name': 'test_websocket_router_subscribe', 'range': [110, 257], 'children': [{'type': 'AsyncKeyword', 'name': 'async', 'range': [110, 115], 'children': []}, {'type': 'DefKeyword', 'name': 'def', 'range': [111, 114], 'children': []}, {'type': 'FunctionName', 'name': 'test_websocket_router_subscribe', 'range': [112, 145], 'children': []}, {'type': 'Parameters', 'name': 'parameters', 'range': [113, 123], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [115, 121], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [117, 126], 'children': []}]}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [119, 125], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [121, 130], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'None', 'range': [124, 130], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [128, 257], 'children': [{'type': 'Assignment', 'name': 'mock_websocket.receive_text.side_effect', 'range': [129, 166], 'children': [{'type': 'RightHandSide', 'name': '[WsMessage(method=Methods.SUBSCRIBE, data={"graph_id":"test_graph"}).model_dump_json(), WebSocketDisconnect()]', 'range': [135, 166], 'children': [{'type': 'WsMessageCall', 'name': 'WsMessage(method=Methods.SUBSCRIBE, data={"graph_id":"test_graph"}).model_dump_json()', 'range': [137, 159], 'children': []}, {'type': 'WebSocketDisconnectCall', 'name': 'WebSocketDisconnect()', 'range': [161, 164], 'children': []}]}]}, {'type': 'AwaitExpression', 'name': 'await websocket_router(cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager))', 'range': [169, 187], 'children': [{'type': 'FunctionCall', 'name': 'websocket_router(cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager))', 'range': [170, 187], 'children': [{'type': 'FunctionName', 'name': 'websocket_router', 'range': [170, 185], 'children': []}, {'type': 'Arguments', 'name': 'arguments', 'range': [171, 187], 'children': [{'type': 'CastCall', 'name': 'cast(WebSocket, mock_websocket)', 'range': [173, 178], 'children': []}, {'type': 'CastCall', 'name': 'cast(ConnectionManager, mock_manager)', 'range': [180, 185], 'children': []}]}]}]}, {'type': 'AssertStatement', 'name': 'mock_manager.connect.assert_called_once_with(mock_websocket)', 'range': [190, 197], 'children': []}, {'type': 'AssertStatement', 'name': 'mock_manager.subscribe.assert_called_once_with("test_graph", mock_websocket)', 'range': [199, 208], 'children': []}, {'type': 'AssertStatement', 'name': 'mock_websocket.send_text.assert_called_once()', 'range': [210, 216], 'children': []}, {'type': 'AssertStatement', 'name': 'assert \'"method":"subscribe"\' in mock_websocket.send_text.call_args[0][0]', 'range': [218, 232], 'children': []}, {'type': 'AssertStatement', 'name': 'assert \'"success":true\' in mock_websocket.send_text.call_args[0][0]', 'range': [233, 247], 'children': []}, {'type': 'AssertStatement', 'name': 'mock_manager.disconnect.assert_called_once_with(mock_websocket)', 'range': [248, 255], 'children': []}]}]}]}
2025-01-08 09:18:35,124 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:41,230 - INFO - Step 2 result: {'type': 'Program', 'name': 'test_handle_subscribe_success', 'range': [554, 664], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_handle_subscribe_success', 'range': [554, 664], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [547, 553], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_handle_subscribe_success', 'range': [554, 571], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [554, 559], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [555, 558], 'children': []}, {'type': 'Identifier', 'name': 'test_handle_subscribe_success', 'range': [556, 582], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [557, 570], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [559, 566], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [559, 573], 'children': []}, {'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [560, 569], 'children': []}]}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [563, 570], 'children': [{'type': 'Identifier', 'name': 'mock_manager', 'range': [563, 576], 'children': []}, {'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [564, 573], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'None', 'range': [568, 571], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [572, 664], 'children': [{'type': 'VariableDeclaration', 'name': 'message', 'range': [573, 591], 'children': [{'type': 'Identifier', 'name': 'message', 'range': [573, 580], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [574, 575], 'children': []}, {'type': 'ObjectCreation', 'name': 'WsMessage', 'range': [575, 590], 'children': [{'type': 'Identifier', 'name': 'WsMessage', 'range': [575, 584], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [576, 589], 'children': [{'type': 'NamedArgument', 'name': 'method', 'range': [577, 582], 'children': [{'type': 'Identifier', 'name': 'method', 'range': [577, 583], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [578, 579], 'children': []}, {'type': 'MemberAccess', 'name': 'Methods.SUBSCRIBE', 'range': [579, 582], 'children': [{'type': 'Identifier', 'name': 'Methods', 'range': [579, 586], 'children': []}, {'type': 'Identifier', 'name': 'SUBSCRIBE', 'range': [581, 590], 'children': []}]}]}, {'type': 'NamedArgument', 'name': 'data', 'range': [583, 589], 'children': [{'type': 'Identifier', 'name': 'data', 'range': [583, 587], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [584, 585], 'children': []}, {'type': 'ObjectLiteral', 'name': '', 'range': [585, 589], 'children': [{'type': 'Property', 'name': 'graph_id', 'range': [586, 589], 'children': [{'type': 'StringLiteral', 'name': 'test_graph', 'range': [588, 589], 'children': []}]}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [593, 614], 'children': [{'type': 'AwaitExpression', 'name': '', 'range': [593, 613], 'children': [{'type': 'Keyword', 'name': 'await', 'range': [593, 598], 'children': []}, {'type': 'CallExpression', 'name': 'handle_subscribe', 'range': [594, 613], 'children': [{'type': 'Identifier', 'name': 'handle_subscribe', 'range': [594, 610], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [595, 612], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [597, 602], 'children': [{'type': 'Identifier', 'name': 'cast', 'range': [597, 601], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [598, 601], 'children': [{'type': 'Identifier', 'name': 'WebSocket', 'range': [599, 608], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [600, 613], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'cast', 'range': [604, 609], 'children': [{'type': 'Identifier', 'name': 'cast', 'range': [604, 608], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [605, 608], 'children': [{'type': 'Identifier', 'name': 'ConnectionManager', 'range': [606, 621], 'children': []}, {'type': 'Identifier', 'name': 'mock_manager', 'range': [607, 620], 'children': []}]}]}, {'type': 'Identifier', 'name': 'message', 'range': [611, 612], 'children': []}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [616, 626], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.subscribe.assert_called_once_with', 'range': [616, 625], 'children': [{'type': 'MemberAccess', 'name': 'mock_manager.subscribe.assert_called_once_with', 'range': [616, 625], 'children': [{'type': 'Identifier', 'name': 'mock_manager', 'range': [616, 627], 'children': []}, {'type': 'Identifier', 'name': 'subscribe', 'range': [617, 626], 'children': []}, {'type': 'Identifier', 'name': 'assert_called_once_with', 'range': [618, 641], 'children': []}]}, {'type': 'ArgumentList', 'name': '', 'range': [621, 624], 'children': [{'type': 'StringLiteral', 'name': 'test_graph', 'range': [622, 623], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [624, 625], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [627, 634], 'children': [{'type': 'CallExpression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [627, 633], 'children': [{'type': 'MemberAccess', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [627, 633], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [627, 640], 'children': []}, {'type': 'Identifier', 'name': 'send_text', 'range': [628, 637], 'children': []}, {'type': 'Identifier', 'name': 'assert_called_once', 'range': [629, 644], 'children': []}]}, {'type': 'ArgumentList', 'name': '', 'range': [632, 633], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [635, 649], 'children': [{'type': 'StringLiteral', 'name': '"method":"subscribe"', 'range': [636, 637], 'children': []}, {'type': 'Keyword', 'name': 'in', 'range': [637, 639], 'children': []}, {'type': 'MemberAccess', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [638, 649], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [638, 651], 'children': []}, {'type': 'Identifier', 'name': 'send_text', 'range': [639, 648], 'children': []}, {'type': 'Identifier', 'name': 'call_args', 'range': [640, 649], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [643, 644], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [647, 648], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [650, 664], 'children': [{'type': 'StringLiteral', 'name': '"success":true', 'range': [651, 652], 'children': []}, {'type': 'Keyword', 'name': 'in', 'range': [652, 654], 'children': []}, {'type': 'MemberAccess', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [653, 664], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [653, 666], 'children': []}, {'type': 'Identifier', 'name': 'send_text', 'range': [654, 663], 'children': []}, {'type': 'Identifier', 'name': 'call_args', 'range': [655, 664], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [658, 659], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [661, 662], 'children': []}]}]}]}]}]}
2025-01-08 09:18:41,230 - INFO - Starting Step 3: AST simplification
2025-01-08 09:18:55,256 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainOrSomething', 'range': [0, 58], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 4], 'children': [{'type': 'FromImport', 'name': 'typing', 'range': [0, 1], 'children': []}, {'type': 'Import', 'name': 'cast', 'range': [2, 3], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [5, 11], 'children': [{'type': 'FromImport', 'name': 'unittest.mock', 'range': [5, 8], 'children': []}, {'type': 'Import', 'name': 'AsyncMock', 'range': [9, 10], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [13, 15], 'children': [{'type': 'Import', 'name': 'pytest', 'range': [13, 14], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [16, 22], 'children': [{'type': 'FromImport', 'name': 'fastapi', 'range': [16, 17], 'children': []}, {'type': 'Import', 'name': 'WebSocket WebSocketDisconnect', 'range': [18, 21], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [24, 32], 'children': [{'type': 'FromImport', 'name': 'backend.server.conn_manager', 'range': [24, 29], 'children': []}, {'type': 'Import', 'name': 'ConnectionManager', 'range': [30, 31], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [33, 58], 'children': [{'type': 'FromImport', 'name': 'backend.server.ws_api', 'range': [33, 38], 'children': []}, {'type': 'Import', 'name': 'Methods WsMessage handle_subscribe handle_unsubscribe websocket_router', 'range': [39, 57], 'children': []}]}]}]}
2025-01-08 09:18:55,256 - INFO - Completed main AST analysis flow
2025-01-08 09:18:55,257 - INFO - Successfully processed chunk
2025-01-08 09:18:56,403 - INFO - Step 4 result: {'type': 'Program', 'name': 'test_handle_unsubscribe_success', 'range': [774, 892], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [774, 779], 'children': []}, {'type': 'FunctionDecl', 'name': 'test_handle_unsubscribe_success', 'range': [781, 892], 'children': [{'type': 'Arguments', 'name': '', 'range': [783, 793], 'children': [{'type': 'Argument', 'name': 'mock_websocket', 'range': [786, 788], 'children': []}, {'type': 'Argument', 'name': 'mock_manager', 'range': [790, 792], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [795, 797], 'children': []}, {'type': 'Assignment', 'name': 'message', 'range': [800, 817], 'children': [{'type': 'CallExpression', 'name': 'WsMessage', 'range': [802, 817], 'children': [{'type': 'KeywordArgument', 'name': 'method', 'range': [804, 808], 'children': []}, {'type': 'KeywordArgument', 'name': 'data', 'range': [810, 816], 'children': []}]}]}, {'type': 'AwaitExpression', 'name': 'await', 'range': [820, 840], 'children': [{'type': 'CallExpression', 'name': 'handle_unsubscribe', 'range': [821, 840], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [824, 829], 'children': []}, {'type': 'CallExpression', 'name': 'cast', 'range': [831, 836], 'children': []}, {'type': 'Identifier', 'name': 'message', 'range': [838, 838], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'mock_manager.unsubscribe.assert_called_once_with', 'range': [843, 852], 'children': [{'type': 'Literal', 'name': '"test_graph"', 'range': [849, 849], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [851, 851], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [854, 860], 'children': []}, {'type': 'AssertStatement', 'name': 'assert', 'range': [862, 875], 'children': [{'type': 'Literal', 'name': '\'"method":"unsubscribe"\'', 'range': [863, 863], 'children': []}, {'type': 'BinaryExpression', 'name': 'in', 'range': [864, 864], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args', 'range': [865, 875], 'children': []}]}, {'type': 'AssertStatement', 'name': 'assert', 'range': [877, 890], 'children': [{'type': 'Literal', 'name': '\'"success":true\'', 'range': [878, 878], 'children': []}, {'type': 'BinaryExpression', 'name': 'in', 'range': [879, 879], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args', 'range': [880, 890], 'children': []}]}]}]}
2025-01-08 09:18:56,403 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:59,299 - INFO - Step 4 result: {'type': 'Program', 'name': 'test_handle_subscribe_missing_data', 'range': [673, 773], 'children': [{'type': 'FunctionDecl', 'name': 'test_handle_subscribe_missing_data', 'range': [673, 773], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [666, 671], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_handle_subscribe_missing_data', 'range': [673, 689], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [678, 680], 'children': []}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [682, 684], 'children': []}, {'type': 'ReturnType', 'name': 'None', 'range': [687, 689], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [691, 773], 'children': [{'type': 'VariableDecl', 'name': 'message', 'range': [692, 701], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [693, 701], 'children': [{'type': 'NewExpression', 'name': 'WsMessage', 'range': [694, 701], 'children': [{'type': 'Identifier', 'name': 'method', 'range': [696, 700], 'children': []}]}]}]}, {'type': 'AwaitExpression', 'name': 'await', 'range': [704, 724], 'children': [{'type': 'CallExpression', 'name': 'handle_subscribe', 'range': [705, 724], 'children': [{'type': 'Identifier', 'name': 'cast', 'range': [708, 713], 'children': []}, {'type': 'Identifier', 'name': 'cast', 'range': [715, 720], 'children': []}, {'type': 'Identifier', 'name': 'message', 'range': [722, 722], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'mock_manager.subscribe.assert_not_called', 'range': [727, 733], 'children': []}, {'type': 'ExpressionStatement', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [735, 741], 'children': []}, {'type': 'AssertStatement', 'name': 'assert', 'range': [743, 757], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [745, 757], 'children': [{'type': 'Literal', 'name': '"method":"error"', 'range': [744, 744], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args', 'range': [746, 756], 'children': []}]}]}, {'type': 'AssertStatement', 'name': 'assert', 'range': [758, 772], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [760, 772], 'children': [{'type': 'Literal', 'name': '"success":false', 'range': [759, 759], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args', 'range': [761, 771], 'children': []}]}]}]}]}]}
2025-01-08 09:18:59,299 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:19:06,550 - INFO - Step 3 result: {'type': 'Program', 'name': 'test_websocket_router_invalid_method', 'range': [420, 546], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_websocket_router_invalid_method', 'range': [420, 546], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [413, 419], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_websocket_router_invalid_method', 'range': [420, 437], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [420, 425], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [421, 424], 'children': []}, {'type': 'Identifier', 'name': 'test_websocket_router_invalid_method', 'range': [422, 453], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [423, 433], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [425, 431], 'children': []}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [429, 431], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [434, 437], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [438, 546], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [439, 466], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [439, 466], 'children': [{'type': 'MemberExpression', 'name': 'mock_websocket.receive_text.side_effect', 'range': [439, 443], 'children': []}, {'type': 'ArrayExpression', 'name': '', 'range': [445, 466], 'children': [{'type': 'CallExpression', 'name': 'WsMessage', 'range': [447, 459], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [448, 454], 'children': [{'type': 'AssignmentExpression', 'name': 'method=Methods.EXECUTION_EVENT', 'range': [449, 453], 'children': []}]}, {'type': 'MemberExpression', 'name': 'model_dump_json', 'range': [455, 458], 'children': []}]}, {'type': 'CallExpression', 'name': 'WebSocketDisconnect', 'range': [461, 464], 'children': []}]}]}]}, {'type': 'AwaitExpression', 'name': '', 'range': [469, 488], 'children': [{'type': 'CallExpression', 'name': 'websocket_router', 'range': [470, 487], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [471, 486], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [473, 478], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [474, 477], 'children': [{'type': 'Identifier', 'name': 'WebSocket', 'range': [475, 483], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [477, 490], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'cast', 'range': [480, 485], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [481, 484], 'children': [{'type': 'Identifier', 'name': 'ConnectionManager', 'range': [482, 499], 'children': []}, {'type': 'Identifier', 'name': 'mock_manager', 'range': [484, 496], 'children': []}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [490, 498], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.connect.assert_called_once_with', 'range': [490, 497], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [495, 497], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [496, 509], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [499, 506], 'children': [{'type': 'CallExpression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [499, 505], 'children': []}]}, {'type': 'AssertStatement', 'name': '', 'range': [507, 521], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [508, 520], 'children': [{'type': 'StringLiteral', 'name': '"method":"error"', 'range': [508, 520], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [510, 520], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [522, 536], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [523, 535], 'children': [{'type': 'StringLiteral', 'name': '"success":false', 'range': [523, 535], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [525, 535], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [537, 545], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.disconnect.assert_called_once_with', 'range': [537, 544], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [542, 544], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [543, 556], 'children': []}]}]}]}]}]}]}
2025-01-08 09:19:06,551 - INFO - Starting Step 4: AST normalization
2025-01-08 09:19:12,358 - INFO - Step 4 result: {'type': 'Program', 'name': 'test_handle_unsubscribe_missing_data', 'range': [900, 1000], 'children': [{'type': 'FunctionDecl', 'name': 'test_handle_unsubscribe_missing_data', 'range': [900, 1000], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [893, 899], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_handle_unsubscribe_missing_data', 'range': [900, 917], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [900, 905], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [901, 904], 'children': []}, {'type': 'Identifier', 'name': 'test_handle_unsubscribe_missing_data', 'range': [902, 933], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [903, 913], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [905, 911], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [907, 911], 'children': []}]}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [909, 911], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [911, 911], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'None', 'range': [914, 917], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [918, 1000], 'children': [{'type': 'VariableDecl', 'name': 'message', 'range': [919, 929], 'children': [{'type': 'Assignment', 'name': '=', 'range': [920, 920], 'children': []}, {'type': 'CallExpression', 'name': 'WsMessage', 'range': [921, 928], 'children': [{'type': 'Argument', 'name': 'method=Methods.UNSUBSCRIBE', 'range': [923, 927], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'await handle_unsubscribe', 'range': [931, 951], 'children': [{'type': 'AwaitExpression', 'name': 'await', 'range': [931, 936], 'children': []}, {'type': 'CallExpression', 'name': 'handle_unsubscribe', 'range': [932, 950], 'children': [{'type': 'Argument', 'name': 'cast(WebSocket, mock_websocket)', 'range': [935, 940], 'children': []}, {'type': 'Argument', 'name': 'cast(ConnectionManager, mock_manager)', 'range': [942, 947], 'children': []}, {'type': 'Argument', 'name': 'message', 'range': [949, 949], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'mock_manager.unsubscribe.assert_not_called', 'range': [954, 961], 'children': [{'type': 'CallExpression', 'name': 'assert_not_called', 'range': [958, 960], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [962, 969], 'children': [{'type': 'CallExpression', 'name': 'assert_called_once', 'range': [966, 968], 'children': []}]}, {'type': 'AssertStatement', 'name': 'assert \'"method":"error"\' in mock_websocket.send_text.call_args[0][0]', 'range': [970, 984], 'children': []}, {'type': 'AssertStatement', 'name': 'assert \'"success":false\' in mock_websocket.send_text.call_args[0][0]', 'range': [985, 999], 'children': []}]}]}]}
2025-01-08 09:19:12,359 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:19:20,006 - INFO - Step 4 result: {'type': 'Program', 'name': 'test_websocket_router_unsubscribe', 'range': [258, 412], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [258, 264], 'children': []}, {'type': 'FunctionDecl', 'name': 'test_websocket_router_unsubscribe', 'range': [265, 412], 'children': [{'type': 'FunctionSignature', 'name': 'test_websocket_router_unsubscribe', 'range': [265, 282], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [265, 270], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [266, 269], 'children': []}, {'type': 'Identifier', 'name': 'test_websocket_router_unsubscribe', 'range': [267, 300], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [268, 278], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [270, 276], 'children': []}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [274, 276], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [279, 281], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [283, 412], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [284, 322], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [284, 321], 'children': [{'type': 'MemberExpression', 'name': 'mock_websocket.receive_text.side_effect', 'range': [284, 289], 'children': []}, {'type': 'ArrayExpression', 'name': '', 'range': [290, 321], 'children': [{'type': 'CallExpression', 'name': 'WsMessage.model_dump_json', 'range': [292, 314], 'children': []}, {'type': 'CallExpression', 'name': 'WebSocketDisconnect', 'range': [316, 319], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [324, 343], 'children': [{'type': 'AwaitExpression', 'name': '', 'range': [324, 342], 'children': [{'type': 'CallExpression', 'name': 'websocket_router', 'range': [325, 342], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [328, 333], 'children': []}, {'type': 'CallExpression', 'name': 'cast', 'range': [335, 340], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [345, 353], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.connect.assert_called_once_with', 'range': [345, 352], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [354, 364], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.unsubscribe.assert_called_once_with', 'range': [354, 363], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [365, 372], 'children': [{'type': 'CallExpression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [365, 371], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [373, 387], 'children': [{'type': 'AssertStatement', 'name': '', 'range': [373, 387], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [388, 402], 'children': [{'type': 'AssertStatement', 'name': '', 'range': [388, 402], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [403, 411], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.disconnect.assert_called_once_with', 'range': [403, 410], 'children': []}]}]}]}]}
2025-01-08 09:19:20,006 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:19:20,291 - INFO - Step 4 result: {'type': 'Program', 'name': 'test_websocket_router_subscribe', 'range': [103, 257], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [103, 109], 'children': []}, {'type': 'FunctionDecl', 'name': 'test_websocket_router_subscribe', 'range': [110, 257], 'children': [{'type': 'AsyncKeyword', 'name': 'async', 'range': [110, 115], 'children': []}, {'type': 'DefKeyword', 'name': 'def', 'range': [111, 114], 'children': []}, {'type': 'Identifier', 'name': 'test_websocket_router_subscribe', 'range': [112, 145], 'children': []}, {'type': 'Parameters', 'name': 'parameters', 'range': [113, 123], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [115, 121], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [117, 126], 'children': []}]}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [119, 125], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [121, 130], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'None', 'range': [124, 130], 'children': []}, {'type': 'BlockStatement', 'name': 'body', 'range': [128, 257], 'children': [{'type': 'ExpressionStatement', 'name': 'mock_websocket.receive_text.side_effect', 'range': [129, 166], 'children': [{'type': 'ArrayExpression', 'name': '[WsMessage(method=Methods.SUBSCRIBE, data={"graph_id":"test_graph"}).model_dump_json(), WebSocketDisconnect()]', 'range': [135, 166], 'children': [{'type': 'CallExpression', 'name': 'WsMessage(method=Methods.SUBSCRIBE, data={"graph_id":"test_graph"}).model_dump_json()', 'range': [137, 159], 'children': []}, {'type': 'CallExpression', 'name': 'WebSocketDisconnect()', 'range': [161, 164], 'children': []}]}]}, {'type': 'AwaitExpression', 'name': 'await websocket_router(cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager))', 'range': [169, 187], 'children': [{'type': 'CallExpression', 'name': 'websocket_router(cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager))', 'range': [170, 187], 'children': [{'type': 'Identifier', 'name': 'websocket_router', 'range': [170, 185], 'children': []}, {'type': 'Arguments', 'name': 'arguments', 'range': [171, 187], 'children': [{'type': 'CallExpression', 'name': 'cast(WebSocket, mock_websocket)', 'range': [173, 178], 'children': []}, {'type': 'CallExpression', 'name': 'cast(ConnectionManager, mock_manager)', 'range': [180, 185], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': 'mock_manager.connect.assert_called_once_with(mock_websocket)', 'range': [190, 197], 'children': []}, {'type': 'ExpressionStatement', 'name': 'mock_manager.subscribe.assert_called_once_with("test_graph", mock_websocket)', 'range': [199, 208], 'children': []}, {'type': 'ExpressionStatement', 'name': 'mock_websocket.send_text.assert_called_once()', 'range': [210, 216], 'children': []}, {'type': 'ExpressionStatement', 'name': 'assert \'"method":"subscribe"\' in mock_websocket.send_text.call_args[0][0]', 'range': [218, 232], 'children': []}, {'type': 'ExpressionStatement', 'name': 'assert \'"success":true\' in mock_websocket.send_text.call_args[0][0]', 'range': [233, 247], 'children': []}, {'type': 'ExpressionStatement', 'name': 'mock_manager.disconnect.assert_called_once_with(mock_websocket)', 'range': [248, 255], 'children': []}]}]}]}
2025-01-08 09:19:20,292 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:19:34,381 - INFO - Step 5 result: {'type': 'Program', 'name': 'test_handle_subscribe_missing_data', 'range': [673, 773], 'children': [{'type': 'FunctionDecl', 'name': 'test_handle_subscribe_missing_data', 'range': [673, 773], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [666, 671], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_handle_subscribe_missing_data', 'range': [673, 689], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [678, 680], 'children': []}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [682, 684], 'children': []}, {'type': 'ReturnType', 'name': 'None', 'range': [687, 689], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [691, 773], 'children': [{'type': 'VariableDecl', 'name': 'message', 'range': [692, 701], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [693, 701], 'children': [{'type': 'NewExpression', 'name': 'WsMessage', 'range': [694, 701], 'children': [{'type': 'Identifier', 'name': 'method', 'range': [696, 700], 'children': []}]}]}]}, {'type': 'AwaitExpression', 'name': 'await', 'range': [704, 724], 'children': [{'type': 'CallExpression', 'name': 'handle_subscribe', 'range': [705, 724], 'children': [{'type': 'Identifier', 'name': 'cast', 'range': [708, 713], 'children': []}, {'type': 'Identifier', 'name': 'cast', 'range': [715, 720], 'children': []}, {'type': 'Identifier', 'name': 'message', 'range': [722, 722], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'mock_manager.subscribe.assert_not_called', 'range': [727, 733], 'children': []}, {'type': 'ExpressionStatement', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [735, 741], 'children': []}, {'type': 'AssertStatement', 'name': 'assert', 'range': [743, 757], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [745, 757], 'children': [{'type': 'Literal', 'name': '"method":"error"', 'range': [744, 744], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args', 'range': [746, 756], 'children': []}]}]}, {'type': 'AssertStatement', 'name': 'assert', 'range': [758, 772], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [760, 772], 'children': [{'type': 'Literal', 'name': '"success":false', 'range': [759, 759], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args', 'range': [761, 771], 'children': []}]}]}]}]}]}
2025-01-08 09:19:34,382 - INFO - Completed main AST analysis flow
2025-01-08 09:19:34,383 - INFO - Successfully processed chunk
2025-01-08 09:19:34,794 - INFO - Step 5 result: {'type': 'Program', 'name': 'test_handle_unsubscribe_success', 'range': [774, 892], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [774, 779], 'children': []}, {'type': 'FunctionDecl', 'name': 'test_handle_unsubscribe_success', 'range': [781, 892], 'children': [{'type': 'Arguments', 'name': '', 'range': [783, 793], 'children': [{'type': 'Argument', 'name': 'mock_websocket', 'range': [786, 788], 'children': []}, {'type': 'Argument', 'name': 'mock_manager', 'range': [790, 792], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [795, 797], 'children': []}, {'type': 'Assignment', 'name': 'message', 'range': [800, 817], 'children': [{'type': 'CallExpression', 'name': 'WsMessage', 'range': [802, 817], 'children': [{'type': 'KeywordArgument', 'name': 'method', 'range': [804, 808], 'children': []}, {'type': 'KeywordArgument', 'name': 'data', 'range': [810, 816], 'children': []}]}]}, {'type': 'AwaitExpression', 'name': 'await', 'range': [820, 840], 'children': [{'type': 'CallExpression', 'name': 'handle_unsubscribe', 'range': [821, 840], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [824, 829], 'children': []}, {'type': 'CallExpression', 'name': 'cast', 'range': [831, 836], 'children': []}, {'type': 'Identifier', 'name': 'message', 'range': [838, 838], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'mock_manager.unsubscribe.assert_called_once_with', 'range': [843, 852], 'children': [{'type': 'Literal', 'name': '"test_graph"', 'range': [849, 849], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [851, 851], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [854, 860], 'children': []}, {'type': 'AssertStatement', 'name': 'assert', 'range': [862, 875], 'children': [{'type': 'Literal', 'name': '\'"method":"unsubscribe"\'', 'range': [863, 863], 'children': []}, {'type': 'BinaryExpression', 'name': 'in', 'range': [864, 864], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args', 'range': [865, 875], 'children': []}]}, {'type': 'AssertStatement', 'name': 'assert', 'range': [877, 890], 'children': [{'type': 'Literal', 'name': '\'"success":true\'', 'range': [878, 878], 'children': []}, {'type': 'BinaryExpression', 'name': 'in', 'range': [879, 879], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args', 'range': [880, 890], 'children': []}]}]}]}
2025-01-08 09:19:34,795 - INFO - Completed main AST analysis flow
2025-01-08 09:19:34,796 - INFO - Successfully processed chunk
2025-01-08 09:19:52,733 - INFO - Step 5 result: {'type': 'Program', 'name': 'test_handle_unsubscribe_missing_data', 'range': [900, 1000], 'children': [{'type': 'FunctionDecl', 'name': 'test_handle_unsubscribe_missing_data', 'range': [900, 1000], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [893, 899], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_handle_unsubscribe_missing_data', 'range': [900, 917], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [900, 905], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [901, 904], 'children': []}, {'type': 'Identifier', 'name': 'test_handle_unsubscribe_missing_data', 'range': [902, 933], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [903, 913], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [905, 911], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [907, 911], 'children': []}]}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [909, 911], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [911, 911], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'None', 'range': [914, 917], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [918, 1000], 'children': [{'type': 'VariableDecl', 'name': 'message', 'range': [919, 929], 'children': [{'type': 'Assignment', 'name': '=', 'range': [920, 920], 'children': []}, {'type': 'CallExpression', 'name': 'WsMessage', 'range': [921, 928], 'children': [{'type': 'Argument', 'name': 'method=Methods.UNSUBSCRIBE', 'range': [923, 927], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'await handle_unsubscribe', 'range': [931, 951], 'children': [{'type': 'AwaitExpression', 'name': 'await', 'range': [931, 936], 'children': []}, {'type': 'CallExpression', 'name': 'handle_unsubscribe', 'range': [932, 950], 'children': [{'type': 'Argument', 'name': 'cast(WebSocket, mock_websocket)', 'range': [935, 940], 'children': []}, {'type': 'Argument', 'name': 'cast(ConnectionManager, mock_manager)', 'range': [942, 947], 'children': []}, {'type': 'Argument', 'name': 'message', 'range': [949, 949], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'mock_manager.unsubscribe.assert_not_called', 'range': [954, 961], 'children': [{'type': 'CallExpression', 'name': 'assert_not_called', 'range': [958, 960], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [962, 969], 'children': [{'type': 'CallExpression', 'name': 'assert_called_once', 'range': [966, 968], 'children': []}]}, {'type': 'AssertStatement', 'name': 'assert \'"method":"error"\' in mock_websocket.send_text.call_args[0][0]', 'range': [970, 984], 'children': []}, {'type': 'AssertStatement', 'name': 'assert \'"success":false\' in mock_websocket.send_text.call_args[0][0]', 'range': [985, 999], 'children': []}]}]}]}
2025-01-08 09:19:52,733 - INFO - Completed main AST analysis flow
2025-01-08 09:19:52,733 - INFO - Successfully processed chunk
2025-01-08 09:20:03,166 - INFO - Step 5 result: {'type': 'Program', 'name': 'test_websocket_router_unsubscribe', 'range': [258, 412], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [258, 264], 'children': []}, {'type': 'FunctionDecl', 'name': 'test_websocket_router_unsubscribe', 'range': [265, 412], 'children': [{'type': 'FunctionSignature', 'name': 'test_websocket_router_unsubscribe', 'range': [265, 282], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [265, 270], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [266, 269], 'children': []}, {'type': 'Identifier', 'name': 'test_websocket_router_unsubscribe', 'range': [267, 300], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [268, 278], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [270, 276], 'children': []}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [274, 276], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [279, 281], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [283, 412], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [284, 322], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [284, 321], 'children': [{'type': 'MemberExpression', 'name': 'mock_websocket.receive_text.side_effect', 'range': [284, 289], 'children': []}, {'type': 'ArrayExpression', 'name': '', 'range': [290, 321], 'children': [{'type': 'CallExpression', 'name': 'WsMessage.model_dump_json', 'range': [292, 314], 'children': []}, {'type': 'CallExpression', 'name': 'WebSocketDisconnect', 'range': [316, 319], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [324, 343], 'children': [{'type': 'AwaitExpression', 'name': '', 'range': [324, 342], 'children': [{'type': 'CallExpression', 'name': 'websocket_router', 'range': [325, 342], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [328, 333], 'children': []}, {'type': 'CallExpression', 'name': 'cast', 'range': [335, 340], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [345, 353], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.connect.assert_called_once_with', 'range': [345, 352], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [354, 364], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.unsubscribe.assert_called_once_with', 'range': [354, 363], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [365, 372], 'children': [{'type': 'CallExpression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [365, 371], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [373, 387], 'children': [{'type': 'AssertStatement', 'name': '', 'range': [373, 387], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [388, 402], 'children': [{'type': 'AssertStatement', 'name': '', 'range': [388, 402], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [403, 411], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.disconnect.assert_called_once_with', 'range': [403, 410], 'children': []}]}]}]}]}
2025-01-08 09:20:03,166 - INFO - Completed main AST analysis flow
2025-01-08 09:20:03,167 - INFO - Successfully processed chunk
2025-01-08 09:20:06,644 - INFO - Step 5 result: {'type': 'Program', 'name': 'test_websocket_router_subscribe', 'range': [103, 257], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [103, 109], 'children': []}, {'type': 'FunctionDecl', 'name': 'test_websocket_router_subscribe', 'range': [110, 257], 'children': [{'type': 'AsyncKeyword', 'name': 'async', 'range': [110, 115], 'children': []}, {'type': 'DefKeyword', 'name': 'def', 'range': [111, 114], 'children': []}, {'type': 'Identifier', 'name': 'test_websocket_router_subscribe', 'range': [112, 145], 'children': []}, {'type': 'Parameters', 'name': 'parameters', 'range': [113, 123], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [115, 121], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [117, 126], 'children': []}]}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [119, 125], 'children': [{'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [121, 130], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'None', 'range': [124, 130], 'children': []}, {'type': 'BlockStatement', 'name': 'body', 'range': [128, 257], 'children': [{'type': 'ExpressionStatement', 'name': 'mock_websocket.receive_text.side_effect', 'range': [129, 166], 'children': [{'type': 'ArrayExpression', 'name': '[WsMessage(method=Methods.SUBSCRIBE, data={"graph_id":"test_graph"}).model_dump_json(), WebSocketDisconnect()]', 'range': [135, 166], 'children': [{'type': 'CallExpression', 'name': 'WsMessage(method=Methods.SUBSCRIBE, data={"graph_id":"test_graph"}).model_dump_json()', 'range': [137, 159], 'children': []}, {'type': 'CallExpression', 'name': 'WebSocketDisconnect()', 'range': [161, 164], 'children': []}]}]}, {'type': 'AwaitExpression', 'name': 'await websocket_router(cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager))', 'range': [169, 187], 'children': [{'type': 'CallExpression', 'name': 'websocket_router(cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager))', 'range': [170, 187], 'children': [{'type': 'Identifier', 'name': 'websocket_router', 'range': [170, 185], 'children': []}, {'type': 'Arguments', 'name': 'arguments', 'range': [171, 187], 'children': [{'type': 'CallExpression', 'name': 'cast(WebSocket, mock_websocket)', 'range': [173, 178], 'children': []}, {'type': 'CallExpression', 'name': 'cast(ConnectionManager, mock_manager)', 'range': [180, 185], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': 'mock_manager.connect.assert_called_once_with(mock_websocket)', 'range': [190, 197], 'children': []}, {'type': 'ExpressionStatement', 'name': 'mock_manager.subscribe.assert_called_once_with("test_graph", mock_websocket)', 'range': [199, 208], 'children': []}, {'type': 'ExpressionStatement', 'name': 'mock_websocket.send_text.assert_called_once()', 'range': [210, 216], 'children': []}, {'type': 'ExpressionStatement', 'name': 'assert \'"method":"subscribe"\' in mock_websocket.send_text.call_args[0][0]', 'range': [218, 232], 'children': []}, {'type': 'ExpressionStatement', 'name': 'assert \'"success":true\' in mock_websocket.send_text.call_args[0][0]', 'range': [233, 247], 'children': []}, {'type': 'ExpressionStatement', 'name': 'mock_manager.disconnect.assert_called_once_with(mock_websocket)', 'range': [248, 255], 'children': []}]}]}]}
2025-01-08 09:20:06,644 - INFO - Completed main AST analysis flow
2025-01-08 09:20:06,645 - INFO - Successfully processed chunk
2025-01-08 09:20:13,167 - INFO - Step 4 result: {'type': 'Program', 'name': 'test_websocket_router_invalid_method', 'range': [420, 546], 'children': [{'type': 'FunctionDecl', 'name': 'test_websocket_router_invalid_method', 'range': [420, 546], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [413, 419], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_websocket_router_invalid_method', 'range': [420, 437], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [420, 425], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [421, 424], 'children': []}, {'type': 'Identifier', 'name': 'test_websocket_router_invalid_method', 'range': [422, 453], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [423, 433], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [425, 431], 'children': []}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [429, 431], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [434, 437], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [438, 546], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [439, 466], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [439, 466], 'children': [{'type': 'MemberExpression', 'name': 'mock_websocket.receive_text.side_effect', 'range': [439, 443], 'children': []}, {'type': 'ArrayExpression', 'name': '', 'range': [445, 466], 'children': [{'type': 'CallExpression', 'name': 'WsMessage', 'range': [447, 459], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [448, 454], 'children': [{'type': 'AssignmentExpression', 'name': 'method=Methods.EXECUTION_EVENT', 'range': [449, 453], 'children': []}]}, {'type': 'MemberExpression', 'name': 'model_dump_json', 'range': [455, 458], 'children': []}]}, {'type': 'CallExpression', 'name': 'WebSocketDisconnect', 'range': [461, 464], 'children': []}]}]}]}, {'type': 'AwaitExpression', 'name': '', 'range': [469, 488], 'children': [{'type': 'CallExpression', 'name': 'websocket_router', 'range': [470, 487], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [471, 486], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [473, 478], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [474, 477], 'children': [{'type': 'Identifier', 'name': 'WebSocket', 'range': [475, 483], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [477, 490], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'cast', 'range': [480, 485], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [481, 484], 'children': [{'type': 'Identifier', 'name': 'ConnectionManager', 'range': [482, 499], 'children': []}, {'type': 'Identifier', 'name': 'mock_manager', 'range': [484, 496], 'children': []}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [490, 498], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.connect.assert_called_once_with', 'range': [490, 497], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [495, 497], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [496, 509], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [499, 506], 'children': [{'type': 'CallExpression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [499, 505], 'children': []}]}, {'type': 'AssertStatement', 'name': '', 'range': [507, 521], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [508, 520], 'children': [{'type': 'StringLiteral', 'name': '"method":"error"', 'range': [508, 520], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [510, 520], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [522, 536], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [523, 535], 'children': [{'type': 'StringLiteral', 'name': '"success":false', 'range': [523, 535], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [525, 535], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [537, 545], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.disconnect.assert_called_once_with', 'range': [537, 544], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [542, 544], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [543, 556], 'children': []}]}]}]}]}]}]}
2025-01-08 09:20:13,168 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:20:21,512 - INFO - Step 3 result: {'type': 'Program', 'name': 'test_handle_subscribe_success', 'range': [554, 664], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_handle_subscribe_success', 'range': [554, 664], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [547, 553], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_handle_subscribe_success', 'range': [554, 571], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [554, 559], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [555, 558], 'children': []}, {'type': 'Identifier', 'name': 'test_handle_subscribe_success', 'range': [556, 582], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [557, 570], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [559, 566], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [559, 573], 'children': []}, {'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [560, 569], 'children': []}]}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [563, 570], 'children': [{'type': 'Identifier', 'name': 'mock_manager', 'range': [563, 576], 'children': []}, {'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [564, 573], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'None', 'range': [568, 571], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [572, 664], 'children': [{'type': 'VariableDeclaration', 'name': 'message', 'range': [573, 591], 'children': [{'type': 'Identifier', 'name': 'message', 'range': [573, 580], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [574, 575], 'children': []}, {'type': 'ObjectCreation', 'name': 'WsMessage', 'range': [575, 590], 'children': [{'type': 'Identifier', 'name': 'WsMessage', 'range': [575, 584], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [576, 589], 'children': [{'type': 'NamedArgument', 'name': 'method', 'range': [577, 582], 'children': [{'type': 'Identifier', 'name': 'method', 'range': [577, 583], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [578, 579], 'children': []}, {'type': 'MemberAccess', 'name': 'Methods.SUBSCRIBE', 'range': [579, 582], 'children': [{'type': 'Identifier', 'name': 'Methods', 'range': [579, 586], 'children': []}, {'type': 'Identifier', 'name': 'SUBSCRIBE', 'range': [581, 590], 'children': []}]}]}, {'type': 'NamedArgument', 'name': 'data', 'range': [583, 589], 'children': [{'type': 'Identifier', 'name': 'data', 'range': [583, 587], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [584, 585], 'children': []}, {'type': 'ObjectLiteral', 'name': '', 'range': [585, 589], 'children': [{'type': 'Property', 'name': 'graph_id', 'range': [586, 589], 'children': [{'type': 'StringLiteral', 'name': 'test_graph', 'range': [588, 589], 'children': []}]}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [593, 614], 'children': [{'type': 'AwaitExpression', 'name': '', 'range': [593, 613], 'children': [{'type': 'Keyword', 'name': 'await', 'range': [593, 598], 'children': []}, {'type': 'CallExpression', 'name': 'handle_subscribe', 'range': [594, 613], 'children': [{'type': 'Identifier', 'name': 'handle_subscribe', 'range': [594, 610], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [595, 612], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [597, 602], 'children': [{'type': 'Identifier', 'name': 'cast', 'range': [597, 601], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [598, 601], 'children': [{'type': 'Identifier', 'name': 'WebSocket', 'range': [599, 608], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [600, 613], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'cast', 'range': [604, 609], 'children': [{'type': 'Identifier', 'name': 'cast', 'range': [604, 608], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [605, 608], 'children': [{'type': 'Identifier', 'name': 'ConnectionManager', 'range': [606, 621], 'children': []}, {'type': 'Identifier', 'name': 'mock_manager', 'range': [607, 620], 'children': []}]}]}, {'type': 'Identifier', 'name': 'message', 'range': [611, 612], 'children': []}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [616, 626], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.subscribe.assert_called_once_with', 'range': [616, 625], 'children': [{'type': 'MemberAccess', 'name': 'mock_manager.subscribe.assert_called_once_with', 'range': [616, 625], 'children': [{'type': 'Identifier', 'name': 'mock_manager', 'range': [616, 627], 'children': []}, {'type': 'Identifier', 'name': 'subscribe', 'range': [617, 626], 'children': []}, {'type': 'Identifier', 'name': 'assert_called_once_with', 'range': [618, 641], 'children': []}]}, {'type': 'ArgumentList', 'name': '', 'range': [621, 624], 'children': [{'type': 'StringLiteral', 'name': 'test_graph', 'range': [622, 623], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [624, 625], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [627, 634], 'children': [{'type': 'CallExpression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [627, 633], 'children': [{'type': 'MemberAccess', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [627, 633], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [627, 640], 'children': []}, {'type': 'Identifier', 'name': 'send_text', 'range': [628, 637], 'children': []}, {'type': 'Identifier', 'name': 'assert_called_once', 'range': [629, 644], 'children': []}]}, {'type': 'ArgumentList', 'name': '', 'range': [632, 633], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [635, 649], 'children': [{'type': 'StringLiteral', 'name': '"method":"subscribe"', 'range': [636, 637], 'children': []}, {'type': 'Keyword', 'name': 'in', 'range': [637, 639], 'children': []}, {'type': 'MemberAccess', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [638, 649], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [638, 651], 'children': []}, {'type': 'Identifier', 'name': 'send_text', 'range': [639, 648], 'children': []}, {'type': 'Identifier', 'name': 'call_args', 'range': [640, 649], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [643, 644], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [647, 648], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [650, 664], 'children': [{'type': 'StringLiteral', 'name': '"success":true', 'range': [651, 652], 'children': []}, {'type': 'Keyword', 'name': 'in', 'range': [652, 654], 'children': []}, {'type': 'MemberAccess', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [653, 664], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [653, 666], 'children': []}, {'type': 'Identifier', 'name': 'send_text', 'range': [654, 663], 'children': []}, {'type': 'Identifier', 'name': 'call_args', 'range': [655, 664], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [658, 659], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [661, 662], 'children': []}]}]}]}]}]}
2025-01-08 09:20:21,512 - INFO - Starting Step 4: AST normalization
2025-01-08 09:21:16,461 - INFO - Step 5 result: {'type': 'Program', 'name': 'test_websocket_router_invalid_method', 'range': [420, 546], 'children': [{'type': 'FunctionDecl', 'name': 'test_websocket_router_invalid_method', 'range': [420, 546], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [413, 419], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_websocket_router_invalid_method', 'range': [420, 437], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [420, 425], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [421, 424], 'children': []}, {'type': 'Identifier', 'name': 'test_websocket_router_invalid_method', 'range': [422, 453], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [423, 433], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [425, 431], 'children': []}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [429, 431], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [434, 437], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [438, 546], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [439, 466], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [439, 466], 'children': [{'type': 'MemberExpression', 'name': 'mock_websocket.receive_text.side_effect', 'range': [439, 443], 'children': []}, {'type': 'ArrayExpression', 'name': '', 'range': [445, 466], 'children': [{'type': 'CallExpression', 'name': 'WsMessage', 'range': [447, 459], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [448, 454], 'children': [{'type': 'AssignmentExpression', 'name': 'method=Methods.EXECUTION_EVENT', 'range': [449, 453], 'children': []}]}, {'type': 'MemberExpression', 'name': 'model_dump_json', 'range': [455, 458], 'children': []}]}, {'type': 'CallExpression', 'name': 'WebSocketDisconnect', 'range': [461, 464], 'children': []}]}]}]}, {'type': 'AwaitExpression', 'name': '', 'range': [469, 488], 'children': [{'type': 'CallExpression', 'name': 'websocket_router', 'range': [470, 487], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [471, 486], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [473, 478], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [474, 477], 'children': [{'type': 'Identifier', 'name': 'WebSocket', 'range': [475, 483], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [477, 490], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'cast', 'range': [480, 485], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [481, 484], 'children': [{'type': 'Identifier', 'name': 'ConnectionManager', 'range': [482, 499], 'children': []}, {'type': 'Identifier', 'name': 'mock_manager', 'range': [484, 496], 'children': []}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [490, 498], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.connect.assert_called_once_with', 'range': [490, 497], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [495, 497], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [496, 509], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [499, 506], 'children': [{'type': 'CallExpression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [499, 505], 'children': []}]}, {'type': 'AssertStatement', 'name': '', 'range': [507, 521], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [508, 520], 'children': [{'type': 'StringLiteral', 'name': '"method":"error"', 'range': [508, 520], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [510, 520], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [522, 536], 'children': [{'type': 'BinaryExpression', 'name': 'in', 'range': [523, 535], 'children': [{'type': 'StringLiteral', 'name': '"success":false', 'range': [523, 535], 'children': []}, {'type': 'MemberExpression', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [525, 535], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [537, 545], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.disconnect.assert_called_once_with', 'range': [537, 544], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [542, 544], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [543, 556], 'children': []}]}]}]}]}]}]}
2025-01-08 09:21:16,461 - INFO - Completed main AST analysis flow
2025-01-08 09:21:16,462 - INFO - Successfully processed chunk
2025-01-08 09:22:04,694 - INFO - Step 4 result: {'type': 'Program', 'name': 'test_handle_subscribe_success', 'range': [554, 664], 'children': [{'type': 'FunctionDecl', 'name': 'test_handle_subscribe_success', 'range': [554, 664], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [547, 553], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_handle_subscribe_success', 'range': [554, 571], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [554, 559], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [555, 558], 'children': []}, {'type': 'Identifier', 'name': 'test_handle_subscribe_success', 'range': [556, 582], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [557, 570], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [559, 566], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [559, 573], 'children': []}, {'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [560, 569], 'children': []}]}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [563, 570], 'children': [{'type': 'Identifier', 'name': 'mock_manager', 'range': [563, 576], 'children': []}, {'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [564, 573], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'None', 'range': [568, 571], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [572, 664], 'children': [{'type': 'VariableDecl', 'name': 'message', 'range': [573, 591], 'children': [{'type': 'Identifier', 'name': 'message', 'range': [573, 580], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [574, 575], 'children': []}, {'type': 'ObjectCreation', 'name': 'WsMessage', 'range': [575, 590], 'children': [{'type': 'Identifier', 'name': 'WsMessage', 'range': [575, 584], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [576, 589], 'children': [{'type': 'NamedArgument', 'name': 'method', 'range': [577, 582], 'children': [{'type': 'Identifier', 'name': 'method', 'range': [577, 583], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [578, 579], 'children': []}, {'type': 'MemberAccess', 'name': 'Methods.SUBSCRIBE', 'range': [579, 582], 'children': [{'type': 'Identifier', 'name': 'Methods', 'range': [579, 586], 'children': []}, {'type': 'Identifier', 'name': 'SUBSCRIBE', 'range': [581, 590], 'children': []}]}]}, {'type': 'NamedArgument', 'name': 'data', 'range': [583, 589], 'children': [{'type': 'Identifier', 'name': 'data', 'range': [583, 587], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [584, 585], 'children': []}, {'type': 'ObjectLiteral', 'name': '', 'range': [585, 589], 'children': [{'type': 'Property', 'name': 'graph_id', 'range': [586, 589], 'children': [{'type': 'StringLiteral', 'name': 'test_graph', 'range': [588, 589], 'children': []}]}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [593, 614], 'children': [{'type': 'AwaitExpression', 'name': '', 'range': [593, 613], 'children': [{'type': 'Keyword', 'name': 'await', 'range': [593, 598], 'children': []}, {'type': 'CallExpression', 'name': 'handle_subscribe', 'range': [594, 613], 'children': [{'type': 'Identifier', 'name': 'handle_subscribe', 'range': [594, 610], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [595, 612], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [597, 602], 'children': [{'type': 'Identifier', 'name': 'cast', 'range': [597, 601], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [598, 601], 'children': [{'type': 'Identifier', 'name': 'WebSocket', 'range': [599, 608], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [600, 613], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'cast', 'range': [604, 609], 'children': [{'type': 'Identifier', 'name': 'cast', 'range': [604, 608], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [605, 608], 'children': [{'type': 'Identifier', 'name': 'ConnectionManager', 'range': [606, 621], 'children': []}, {'type': 'Identifier', 'name': 'mock_manager', 'range': [607, 620], 'children': []}]}]}, {'type': 'Identifier', 'name': 'message', 'range': [611, 612], 'children': []}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [616, 626], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.subscribe.assert_called_once_with', 'range': [616, 625], 'children': [{'type': 'MemberAccess', 'name': 'mock_manager.subscribe.assert_called_once_with', 'range': [616, 625], 'children': [{'type': 'Identifier', 'name': 'mock_manager', 'range': [616, 627], 'children': []}, {'type': 'Identifier', 'name': 'subscribe', 'range': [617, 626], 'children': []}, {'type': 'Identifier', 'name': 'assert_called_once_with', 'range': [618, 641], 'children': []}]}, {'type': 'ArgumentList', 'name': '', 'range': [621, 624], 'children': [{'type': 'StringLiteral', 'name': 'test_graph', 'range': [622, 623], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [624, 625], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [627, 634], 'children': [{'type': 'CallExpression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [627, 633], 'children': [{'type': 'MemberAccess', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [627, 633], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [627, 640], 'children': []}, {'type': 'Identifier', 'name': 'send_text', 'range': [628, 637], 'children': []}, {'type': 'Identifier', 'name': 'assert_called_once', 'range': [629, 644], 'children': []}]}, {'type': 'ArgumentList', 'name': '', 'range': [632, 633], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [635, 649], 'children': [{'type': 'StringLiteral', 'name': '"method":"subscribe"', 'range': [636, 637], 'children': []}, {'type': 'Keyword', 'name': 'in', 'range': [637, 639], 'children': []}, {'type': 'MemberAccess', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [638, 649], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [638, 651], 'children': []}, {'type': 'Identifier', 'name': 'send_text', 'range': [639, 648], 'children': []}, {'type': 'Identifier', 'name': 'call_args', 'range': [640, 649], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [643, 644], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [647, 648], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [650, 664], 'children': [{'type': 'StringLiteral', 'name': '"success":true', 'range': [651, 652], 'children': []}, {'type': 'Keyword', 'name': 'in', 'range': [652, 654], 'children': []}, {'type': 'MemberAccess', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [653, 664], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [653, 666], 'children': []}, {'type': 'Identifier', 'name': 'send_text', 'range': [654, 663], 'children': []}, {'type': 'Identifier', 'name': 'call_args', 'range': [655, 664], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [658, 659], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [661, 662], 'children': []}]}]}]}]}]}
2025-01-08 09:22:04,694 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:23:45,190 - INFO - Step 5 result: {'type': 'Program', 'name': 'test_handle_subscribe_success', 'range': [554, 664], 'children': [{'type': 'FunctionDecl', 'name': 'test_handle_subscribe_success', 'range': [554, 664], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [547, 553], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_handle_subscribe_success', 'range': [554, 571], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [554, 559], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [555, 558], 'children': []}, {'type': 'Identifier', 'name': 'test_handle_subscribe_success', 'range': [556, 582], 'children': []}, {'type': 'ParameterList', 'name': '', 'range': [557, 570], 'children': [{'type': 'Parameter', 'name': 'mock_websocket', 'range': [559, 566], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [559, 573], 'children': []}, {'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [560, 569], 'children': []}]}, {'type': 'Parameter', 'name': 'mock_manager', 'range': [563, 570], 'children': [{'type': 'Identifier', 'name': 'mock_manager', 'range': [563, 576], 'children': []}, {'type': 'TypeAnnotation', 'name': 'AsyncMock', 'range': [564, 573], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'None', 'range': [568, 571], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [572, 664], 'children': [{'type': 'VariableDecl', 'name': 'message', 'range': [573, 591], 'children': [{'type': 'Identifier', 'name': 'message', 'range': [573, 580], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [574, 575], 'children': []}, {'type': 'ObjectCreation', 'name': 'WsMessage', 'range': [575, 590], 'children': [{'type': 'Identifier', 'name': 'WsMessage', 'range': [575, 584], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [576, 589], 'children': [{'type': 'NamedArgument', 'name': 'method', 'range': [577, 582], 'children': [{'type': 'Identifier', 'name': 'method', 'range': [577, 583], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [578, 579], 'children': []}, {'type': 'MemberAccess', 'name': 'Methods.SUBSCRIBE', 'range': [579, 582], 'children': [{'type': 'Identifier', 'name': 'Methods', 'range': [579, 586], 'children': []}, {'type': 'Identifier', 'name': 'SUBSCRIBE', 'range': [581, 590], 'children': []}]}]}, {'type': 'NamedArgument', 'name': 'data', 'range': [583, 589], 'children': [{'type': 'Identifier', 'name': 'data', 'range': [583, 587], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [584, 585], 'children': []}, {'type': 'ObjectLiteral', 'name': '', 'range': [585, 589], 'children': [{'type': 'Property', 'name': 'graph_id', 'range': [586, 589], 'children': [{'type': 'StringLiteral', 'name': 'test_graph', 'range': [588, 589], 'children': []}]}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [593, 614], 'children': [{'type': 'AwaitExpression', 'name': '', 'range': [593, 613], 'children': [{'type': 'Keyword', 'name': 'await', 'range': [593, 598], 'children': []}, {'type': 'CallExpression', 'name': 'handle_subscribe', 'range': [594, 613], 'children': [{'type': 'Identifier', 'name': 'handle_subscribe', 'range': [594, 610], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [595, 612], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [597, 602], 'children': [{'type': 'Identifier', 'name': 'cast', 'range': [597, 601], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [598, 601], 'children': [{'type': 'Identifier', 'name': 'WebSocket', 'range': [599, 608], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [600, 613], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'cast', 'range': [604, 609], 'children': [{'type': 'Identifier', 'name': 'cast', 'range': [604, 608], 'children': []}, {'type': 'ArgumentList', 'name': '', 'range': [605, 608], 'children': [{'type': 'Identifier', 'name': 'ConnectionManager', 'range': [606, 621], 'children': []}, {'type': 'Identifier', 'name': 'mock_manager', 'range': [607, 620], 'children': []}]}]}, {'type': 'Identifier', 'name': 'message', 'range': [611, 612], 'children': []}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [616, 626], 'children': [{'type': 'CallExpression', 'name': 'mock_manager.subscribe.assert_called_once_with', 'range': [616, 625], 'children': [{'type': 'MemberAccess', 'name': 'mock_manager.subscribe.assert_called_once_with', 'range': [616, 625], 'children': [{'type': 'Identifier', 'name': 'mock_manager', 'range': [616, 627], 'children': []}, {'type': 'Identifier', 'name': 'subscribe', 'range': [617, 626], 'children': []}, {'type': 'Identifier', 'name': 'assert_called_once_with', 'range': [618, 641], 'children': []}]}, {'type': 'ArgumentList', 'name': '', 'range': [621, 624], 'children': [{'type': 'StringLiteral', 'name': 'test_graph', 'range': [622, 623], 'children': []}, {'type': 'Identifier', 'name': 'mock_websocket', 'range': [624, 625], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [627, 634], 'children': [{'type': 'CallExpression', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [627, 633], 'children': [{'type': 'MemberAccess', 'name': 'mock_websocket.send_text.assert_called_once', 'range': [627, 633], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [627, 640], 'children': []}, {'type': 'Identifier', 'name': 'send_text', 'range': [628, 637], 'children': []}, {'type': 'Identifier', 'name': 'assert_called_once', 'range': [629, 644], 'children': []}]}, {'type': 'ArgumentList', 'name': '', 'range': [632, 633], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [635, 649], 'children': [{'type': 'StringLiteral', 'name': '"method":"subscribe"', 'range': [636, 637], 'children': []}, {'type': 'Keyword', 'name': 'in', 'range': [637, 639], 'children': []}, {'type': 'MemberAccess', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [638, 649], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [638, 651], 'children': []}, {'type': 'Identifier', 'name': 'send_text', 'range': [639, 648], 'children': []}, {'type': 'Identifier', 'name': 'call_args', 'range': [640, 649], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [643, 644], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [647, 648], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [650, 664], 'children': [{'type': 'StringLiteral', 'name': '"success":true', 'range': [651, 652], 'children': []}, {'type': 'Keyword', 'name': 'in', 'range': [652, 654], 'children': []}, {'type': 'MemberAccess', 'name': 'mock_websocket.send_text.call_args[0][0]', 'range': [653, 664], 'children': [{'type': 'Identifier', 'name': 'mock_websocket', 'range': [653, 666], 'children': []}, {'type': 'Identifier', 'name': 'send_text', 'range': [654, 663], 'children': []}, {'type': 'Identifier', 'name': 'call_args', 'range': [655, 664], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [658, 659], 'children': []}, {'type': 'NumericLiteral', 'name': '0', 'range': [661, 662], 'children': []}]}]}]}]}]}
2025-01-08 09:23:45,190 - INFO - Completed main AST analysis flow
2025-01-08 09:23:45,193 - INFO - Successfully processed chunk
2025-01-08 09:23:45,246 - INFO - Starting code generation from AST
2025-01-08 09:53:47,434 - ERROR - Error in get_code_from_ast: Expecting value: line 30 column 1 (char 29)
2025-01-08 09:53:47,435 - INFO - Starting static code similarity comparison
2025-01-08 09:53:47,438 - INFO - Static similarity result: {'final_score': 30.0, 'length_similarity': 0.0, 'token_similarity': 0.0, 'structure_similarity': 0.0, 'function_similarity': 100, 'complexity_similarity': 100.0, 'variable_similarity': 100}
