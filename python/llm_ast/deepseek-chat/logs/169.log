2025-01-08 10:27:27,431 - INFO - Processing sample 169
2025-01-08 10:27:27,431 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 10:27:36,023 - INFO - Successfully split code into 7 top-level declarations
2025-01-08 10:27:36,118 - INFO - Processing chunk #0 (size=134 chars, start_index=0)
2025-01-08 10:27:36,144 - INFO - Processing chunk with 134 chars starting at index 0
2025-01-08 10:27:36,144 - INFO - Starting main AST analysis flow
2025-01-08 10:27:36,148 - INFO - Tokenized code into 30 tokens
2025-01-08 10:27:36,148 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:36,156 - INFO - Processing chunk #1 (size=4694 chars, start_index=30)
2025-01-08 10:27:36,158 - INFO - Processing chunk with 4694 chars starting at index 30
2025-01-08 10:27:36,160 - INFO - Starting main AST analysis flow
2025-01-08 10:27:36,164 - INFO - Tokenized code into 702 tokens
2025-01-08 10:27:36,164 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:36,174 - INFO - Processing chunk #2 (size=221 chars, start_index=732)
2025-01-08 10:27:36,174 - INFO - Processing chunk with 221 chars starting at index 732
2025-01-08 10:27:36,192 - INFO - Processing chunk #3 (size=1251 chars, start_index=759)
2025-01-08 10:27:36,196 - INFO - Starting main AST analysis flow
2025-01-08 10:27:36,204 - INFO - Processing chunk with 1251 chars starting at index 759
2025-01-08 10:27:36,209 - INFO - Starting main AST analysis flow
2025-01-08 10:27:36,208 - INFO - Tokenized code into 27 tokens
2025-01-08 10:27:36,209 - INFO - Tokenized code into 197 tokens
2025-01-08 10:27:36,209 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:36,210 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:36,204 - INFO - Processing chunk #4 (size=760 chars, start_index=956)
2025-01-08 10:27:36,228 - INFO - Processing chunk with 760 chars starting at index 956
2025-01-08 10:27:36,228 - INFO - Starting main AST analysis flow
2025-01-08 10:27:36,254 - INFO - Tokenized code into 89 tokens
2025-01-08 10:27:36,254 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:36,264 - INFO - Processing chunk #5 (size=1857 chars, start_index=1045)
2025-01-08 10:27:36,270 - INFO - Processing chunk with 1857 chars starting at index 1045
2025-01-08 10:27:36,270 - INFO - Starting main AST analysis flow
2025-01-08 10:27:36,270 - INFO - Tokenized code into 257 tokens
2025-01-08 10:27:36,271 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:36,265 - INFO - Processing chunk #6 (size=571 chars, start_index=1302)
2025-01-08 10:27:36,293 - INFO - Processing chunk with 571 chars starting at index 1302
2025-01-08 10:27:36,295 - INFO - Starting main AST analysis flow
2025-01-08 10:27:36,295 - INFO - Tokenized code into 125 tokens
2025-01-08 10:27:36,315 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:43,133 - INFO - Step 1 result: {'type': 'Program', 'name': 'extract_code', 'range': [1302, 1426], 'children': []}
2025-01-08 10:27:43,133 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:43,288 - INFO - Step 1 result: {'type': 'Program', 'name': '__init__', 'range': [956, 1044], 'children': []}
2025-01-08 10:27:43,288 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:46,486 - INFO - Step 1 result: {'type': 'Program', 'name': 'Input', 'range': [732, 758], 'children': [{'type': 'ClassDeclaration', 'name': 'Input', 'range': [732, 758], 'children': [{'type': 'BlockSchema', 'name': '', 'range': [735, 735], 'children': []}, {'type': 'FieldDeclaration', 'name': 'text', 'range': [739, 756], 'children': [{'type': 'SchemaField', 'name': '', 'range': [743, 756], 'children': [{'type': 'Description', 'name': '', 'range': [746, 748], 'children': []}, {'type': 'Placeholder', 'name': '', 'range': [751, 753], 'children': []}]}]}]}]}
2025-01-08 10:27:46,487 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:47,976 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [30, 731], 'children': [{'type': 'ClassDeclaration', 'name': 'CodeExtractionBlock', 'range': [30, 62], 'children': []}, {'type': 'ClassDeclaration', 'name': 'Input', 'range': [37, 62], 'children': []}, {'type': 'ClassDeclaration', 'name': 'Output', 'range': [64, 259], 'children': []}, {'type': 'FunctionDeclaration', 'name': '__init__', 'range': [261, 348], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'run', 'range': [350, 606], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'extract_code', 'range': [607, 731], 'children': []}]}
2025-01-08 10:27:48,252 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:49,851 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 29], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 're', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 18], 'children': [{'type': 'ImportSpecifier', 'name': 'Block', 'range': [11, 11], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockCategory', 'range': [13, 13], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockOutput', 'range': [15, 15], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockSchema', 'range': [17, 17], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [19, 27], 'children': [{'type': 'ImportSpecifier', 'name': 'SchemaField', 'range': [26, 26], 'children': []}]}]}
2025-01-08 10:27:49,948 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:52,699 - INFO - Step 1 result: {'type': 'Program', 'name': 'Output', 'range': [759, 955], 'children': [{'type': 'ClassDeclaration', 'name': 'Output', 'range': [759, 955], 'children': [{'type': 'FieldDeclaration', 'name': 'html', 'range': [766, 775], 'children': []}, {'type': 'FieldDeclaration', 'name': 'css', 'range': [777, 786], 'children': []}, {'type': 'FieldDeclaration', 'name': 'javascript', 'range': [788, 797], 'children': []}, {'type': 'FieldDeclaration', 'name': 'python', 'range': [799, 808], 'children': []}, {'type': 'FieldDeclaration', 'name': 'sql', 'range': [810, 819], 'children': []}, {'type': 'FieldDeclaration', 'name': 'java', 'range': [821, 830], 'children': []}, {'type': 'FieldDeclaration', 'name': 'cpp', 'range': [832, 841], 'children': []}, {'type': 'FieldDeclaration', 'name': 'csharp', 'range': [843, 852], 'children': []}, {'type': 'FieldDeclaration', 'name': 'json_code', 'range': [854, 863], 'children': []}, {'type': 'FieldDeclaration', 'name': 'bash', 'range': [865, 874], 'children': []}, {'type': 'FieldDeclaration', 'name': 'php', 'range': [876, 885], 'children': []}, {'type': 'FieldDeclaration', 'name': 'ruby', 'range': [887, 896], 'children': []}, {'type': 'FieldDeclaration', 'name': 'yaml', 'range': [898, 907], 'children': []}, {'type': 'FieldDeclaration', 'name': 'markdown', 'range': [909, 918], 'children': []}, {'type': 'FieldDeclaration', 'name': 'typescript', 'range': [920, 929], 'children': []}, {'type': 'FieldDeclaration', 'name': 'xml', 'range': [931, 940], 'children': []}, {'type': 'FieldDeclaration', 'name': 'remaining_text', 'range': [942, 953], 'children': []}]}]}
2025-01-08 10:27:52,782 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:57,772 - INFO - Step 1 result: {'type': 'Program', 'name': 'run', 'range': [1045, 1301], 'children': [{'type': 'FunctionDeclaration', 'name': 'run', 'range': [1045, 1061], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [1047, 1048]}, {'type': 'Parameter', 'name': 'input_data', 'range': [1049, 1050]}, {'type': 'Parameter', 'name': 'kwargs', 'range': [1054, 1056]}, {'type': 'ReturnType', 'name': 'BlockOutput', 'range': [1058, 1060]}]}, {'type': 'VariableDeclaration', 'name': 'language_aliases', 'range': [1073, 1213], 'children': []}, {'type': 'ForLoop', 'name': '', 'range': [1223, 1301], 'children': [{'type': 'VariableDeclaration', 'name': 'canonical_name', 'range': [1224, 1224]}, {'type': 'VariableDeclaration', 'name': 'aliases', 'range': [1226, 1226]}, {'type': 'Block', 'name': '', 'range': [1234, 1301], 'children': [{'type': 'VariableDeclaration', 'name': 'code', 'range': [1235, 1237]}, {'type': 'ForLoop', 'name': '', 'range': [1247, 1281], 'children': [{'type': 'VariableDeclaration', 'name': 'alias', 'range': [1248, 1248]}, {'type': 'Block', 'name': '', 'range': [1252, 1281], 'children': [{'type': 'VariableDeclaration', 'name': 'code_for_alias', 'range': [1253, 1264]}, {'type': 'IfStatement', 'name': '', 'range': [1266, 1280], 'children': [{'type': 'AssignmentExpression', 'name': 'code', 'range': [1270, 1276]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1283, 1300], 'children': [{'type': 'YieldExpression', 'name': '', 'range': [1296, 1299]}]}]}]}]}
2025-01-08 10:27:57,777 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:28:01,288 - INFO - Step 2 result: {'type': 'Program', 'name': 'Input', 'range': [732, 758], 'children': [{'type': 'ClassDeclaration', 'name': 'Input', 'range': [732, 758], 'children': [{'type': 'BlockSchema', 'name': '', 'range': [735, 735], 'children': []}, {'type': 'FieldDeclaration', 'name': 'text', 'range': [739, 756], 'children': [{'type': 'SchemaField', 'name': '', 'range': [743, 756], 'children': [{'type': 'Description', 'name': '', 'range': [746, 748], 'children': []}, {'type': 'Placeholder', 'name': '', 'range': [751, 753], 'children': []}]}]}]}]}
2025-01-08 10:28:01,294 - INFO - Starting Step 3: AST simplification
2025-01-08 10:28:07,886 - INFO - Step 2 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 're', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 18], 'children': [{'type': 'ImportSpecifier', 'name': 'Block', 'range': [11, 11], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockCategory', 'range': [13, 13], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockOutput', 'range': [15, 15], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockSchema', 'range': [17, 17], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [19, 27], 'children': [{'type': 'ImportSpecifier', 'name': 'SchemaField', 'range': [26, 26], 'children': []}]}]}
2025-01-08 10:28:08,453 - INFO - Starting Step 3: AST simplification
2025-01-08 10:28:10,050 - INFO - Step 2 result: {'type': 'Program', 'name': '__init__', 'range': [956, 1044], 'children': [{'type': 'FunctionDeclaration', 'name': '__init__', 'range': [956, 1044], 'children': [{'type': 'ParameterList', 'name': '', 'range': [958, 960], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [959, 959], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [961, 1044], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [963, 968], 'children': [{'type': 'CallExpression', 'name': 'super', 'range': [963, 968], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [964, 965], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [967, 1042], 'children': [{'type': 'CallExpression', 'name': '__init__', 'range': [967, 1042], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [968, 1042], 'children': [{'type': 'AssignmentExpression', 'name': 'id', 'range': [970, 972], 'children': []}, {'type': 'AssignmentExpression', 'name': 'description', 'range': [975, 977], 'children': []}, {'type': 'AssignmentExpression', 'name': 'categories', 'range': [980, 986], 'children': []}, {'type': 'AssignmentExpression', 'name': 'input_schema', 'range': [989, 994], 'children': []}, {'type': 'AssignmentExpression', 'name': 'output_schema', 'range': [996, 1000], 'children': []}, {'type': 'AssignmentExpression', 'name': 'test_input', 'range': [1003, 1011], 'children': []}, {'type': 'AssignmentExpression', 'name': 'test_output', 'range': [1014, 1039], 'children': []}]}]}]}]}]}]}
2025-01-08 10:28:10,054 - INFO - Starting Step 3: AST simplification
2025-01-08 10:28:13,810 - INFO - Step 3 result: {'type': 'Program', 'name': 'Input', 'range': [732, 758], 'children': [{'type': 'ClassDeclaration', 'name': 'Input', 'range': [732, 758], 'children': [{'type': 'BlockSchema', 'name': '', 'range': [735, 735], 'children': []}, {'type': 'FieldDeclaration', 'name': 'text', 'range': [739, 756], 'children': [{'type': 'SchemaField', 'name': '', 'range': [743, 756], 'children': [{'type': 'Description', 'name': '', 'range': [746, 748], 'children': []}, {'type': 'Placeholder', 'name': '', 'range': [751, 753], 'children': []}]}]}]}]}
2025-01-08 10:28:14,030 - INFO - Starting Step 4: AST normalization
2025-01-08 10:28:22,688 - INFO - Step 2 result: {'type': 'Program', 'name': 'extract_code', 'range': [1302, 1426], 'children': [{'type': 'FunctionDeclaration', 'name': 'extract_code', 'range': [1302, 1425], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [1304, 1314], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [1305, 1305], 'children': []}, {'type': 'Parameter', 'name': 'text', 'range': [1307, 1307], 'children': []}, {'type': 'Parameter', 'name': 'language', 'range': [1311, 1311], 'children': []}]}, {'type': 'ReturnType', 'name': 'return_type', 'range': [1315, 1317], 'children': []}, {'type': 'Block', 'name': 'body', 'range': [1318, 1425], 'children': [{'type': 'Comment', 'name': 'comment', 'range': [1320, 1329], 'children': []}, {'type': 'Assignment', 'name': 'assignment', 'range': [1330, 1338], 'children': [{'type': 'Identifier', 'name': 'language', 'range': [1330, 1330], 'children': []}, {'type': 'CallExpression', 'name': 're.escape', 'range': [1332, 1337], 'children': [{'type': 'Identifier', 'name': 'language', 'range': [1336, 1336], 'children': []}]}]}, {'type': 'Comment', 'name': 'comment', 'range': [1339, 1354], 'children': []}, {'type': 'Assignment', 'name': 'assignment', 'range': [1355, 1372], 'children': [{'type': 'Identifier', 'name': 'pattern', 'range': [1355, 1355], 'children': []}, {'type': 'CallExpression', 'name': 're.compile', 'range': [1357, 1371], 'children': [{'type': 'StringLiteral', 'name': 'pattern', 'range': [1361, 1362], 'children': []}, {'type': 'Identifier', 'name': 're.DOTALL', 'range': [1364, 1366], 'children': []}, {'type': 'Identifier', 'name': 're.IGNORECASE', 'range': [1368, 1370], 'children': []}]}]}, {'type': 'Assignment', 'name': 'assignment', 'range': [1373, 1381], 'children': [{'type': 'Identifier', 'name': 'matches', 'range': [1373, 1373], 'children': []}, {'type': 'CallExpression', 'name': 'pattern.finditer', 'range': [1375, 1380], 'children': [{'type': 'Identifier', 'name': 'text', 'range': [1379, 1379], 'children': []}]}]}, {'type': 'Comment', 'name': 'comment', 'range': [1382, 1394], 'children': []}, {'type': 'Assignment', 'name': 'assignment', 'range': [1395, 1413], 'children': [{'type': 'Identifier', 'name': 'code_blocks', 'range': [1395, 1395], 'children': []}, {'type': 'ListComprehension', 'name': 'list_comprehension', 'range': [1397, 1412], 'children': [{'type': 'CallExpression', 'name': 'match.group', 'range': [1398, 1403], 'children': [{'type': 'NumericLiteral', 'name': '1', 'range': [1402, 1402], 'children': []}]}, {'type': 'CallExpression', 'name': 'match.group.strip', 'range': [1404, 1407], 'children': []}, {'type': 'Identifier', 'name': 'match', 'range': [1409, 1409], 'children': []}, {'type': 'Identifier', 'name': 'matches', 'range': [1411, 1411], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [1414, 1425], 'children': [{'type': 'ConditionalExpression', 'name': 'conditional', 'range': [1415, 1424], 'children': [{'type': 'CallExpression', 'name': '"\\n\\n".join', 'range': [1415, 1420], 'children': [{'type': 'Identifier', 'name': 'code_blocks', 'range': [1419, 1419], 'children': []}]}, {'type': 'StringLiteral', 'name': '""', 'range': [1424, 1424], 'children': []}]}]}]}]}]}
2025-01-08 10:28:22,688 - INFO - Starting Step 3: AST simplification
2025-01-08 10:28:22,779 - INFO - Step 3 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 're', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 18], 'children': [{'type': 'ImportSpecifier', 'name': 'Block', 'range': [11, 11], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockCategory', 'range': [13, 13], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockOutput', 'range': [15, 15], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockSchema', 'range': [17, 17], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [19, 27], 'children': [{'type': 'ImportSpecifier', 'name': 'SchemaField', 'range': [26, 26], 'children': []}]}]}
2025-01-08 10:28:22,779 - INFO - Starting Step 4: AST normalization
2025-01-08 10:28:23,347 - INFO - Step 4 result: {'type': 'Program', 'name': 'Input', 'range': [732, 758], 'children': [{'type': 'ClassDecl', 'name': 'Input', 'range': [732, 758], 'children': [{'type': 'Block', 'name': '', 'range': [735, 735], 'children': []}, {'type': 'FieldDecl', 'name': 'text', 'range': [739, 756], 'children': [{'type': 'SchemaField', 'name': '', 'range': [743, 756], 'children': [{'type': 'Description', 'name': '', 'range': [746, 748], 'children': []}, {'type': 'Placeholder', 'name': '', 'range': [751, 753], 'children': []}]}]}]}]}
2025-01-08 10:28:23,348 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:28:29,346 - INFO - Step 5 result: {'type': 'Program', 'name': 'Input', 'range': [732, 758], 'children': [{'type': 'ClassDecl', 'name': 'Input', 'range': [732, 758], 'children': [{'type': 'Block', 'name': '', 'range': [735, 735], 'children': []}, {'type': 'FieldDecl', 'name': 'text', 'range': [739, 756], 'children': [{'type': 'SchemaField', 'name': '', 'range': [743, 756], 'children': [{'type': 'Description', 'name': '', 'range': [746, 748], 'children': []}, {'type': 'Placeholder', 'name': '', 'range': [751, 753], 'children': []}]}]}]}]}
2025-01-08 10:28:29,346 - INFO - Completed main AST analysis flow
2025-01-08 10:28:29,346 - INFO - Successfully processed chunk
2025-01-08 10:28:30,287 - INFO - Step 3 result: {'type': 'Program', 'name': '__init__', 'range': [956, 1044], 'children': [{'type': 'FunctionDeclaration', 'name': '__init__', 'range': [956, 1044], 'children': [{'type': 'ParameterList', 'name': '', 'range': [958, 960], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [959, 959], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [961, 1044], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [963, 968], 'children': [{'type': 'CallExpression', 'name': 'super', 'range': [963, 968], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [964, 965], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [967, 1042], 'children': [{'type': 'CallExpression', 'name': '__init__', 'range': [967, 1042], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [968, 1042], 'children': [{'type': 'AssignmentExpression', 'name': 'id', 'range': [970, 972], 'children': []}, {'type': 'AssignmentExpression', 'name': 'description', 'range': [975, 977], 'children': []}, {'type': 'AssignmentExpression', 'name': 'categories', 'range': [980, 986], 'children': []}, {'type': 'AssignmentExpression', 'name': 'input_schema', 'range': [989, 994], 'children': []}, {'type': 'AssignmentExpression', 'name': 'output_schema', 'range': [996, 1000], 'children': []}, {'type': 'AssignmentExpression', 'name': 'test_input', 'range': [1003, 1011], 'children': []}, {'type': 'AssignmentExpression', 'name': 'test_output', 'range': [1014, 1039], 'children': []}]}]}]}]}]}]}
2025-01-08 10:28:30,287 - INFO - Starting Step 4: AST normalization
2025-01-08 10:28:30,674 - INFO - Step 4 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 're', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 18], 'children': [{'type': 'ImportSpecifier', 'name': 'Block', 'range': [11, 11], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockCategory', 'range': [13, 13], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockOutput', 'range': [15, 15], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockSchema', 'range': [17, 17], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [19, 27], 'children': [{'type': 'ImportSpecifier', 'name': 'SchemaField', 'range': [26, 26], 'children': []}]}]}
2025-01-08 10:28:30,674 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:28:39,356 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainOrSomething', 'range': [0, 27], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 're', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 18], 'children': [{'type': 'ImportSpecifier', 'name': 'Block', 'range': [11, 11], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockCategory', 'range': [13, 13], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockOutput', 'range': [15, 15], 'children': []}, {'type': 'ImportSpecifier', 'name': 'BlockSchema', 'range': [17, 17], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [19, 27], 'children': [{'type': 'ImportSpecifier', 'name': 'SchemaField', 'range': [26, 26], 'children': []}]}]}]}
2025-01-08 10:28:39,356 - INFO - Completed main AST analysis flow
2025-01-08 10:28:39,356 - INFO - Successfully processed chunk
2025-01-08 10:28:42,796 - INFO - Step 4 result: {'type': 'Program', 'name': '__init__', 'range': [956, 1044], 'children': [{'type': 'FunctionDecl', 'name': '__init__', 'range': [956, 1044], 'children': [{'type': 'ParameterList', 'name': '', 'range': [958, 960], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [959, 959], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [961, 1044], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [963, 968], 'children': [{'type': 'CallExpression', 'name': 'super', 'range': [963, 968], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [964, 965], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [967, 1042], 'children': [{'type': 'CallExpression', 'name': '__init__', 'range': [967, 1042], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [968, 1042], 'children': [{'type': 'AssignmentExpression', 'name': 'id', 'range': [970, 972], 'children': []}, {'type': 'AssignmentExpression', 'name': 'description', 'range': [975, 977], 'children': []}, {'type': 'AssignmentExpression', 'name': 'categories', 'range': [980, 986], 'children': []}, {'type': 'AssignmentExpression', 'name': 'input_schema', 'range': [989, 994], 'children': []}, {'type': 'AssignmentExpression', 'name': 'output_schema', 'range': [996, 1000], 'children': []}, {'type': 'AssignmentExpression', 'name': 'test_input', 'range': [1003, 1011], 'children': []}, {'type': 'AssignmentExpression', 'name': 'test_output', 'range': [1014, 1039], 'children': []}]}]}]}]}]}]}
2025-01-08 10:28:42,799 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:28:49,286 - INFO - Step 3 result: {'type': 'Program', 'name': 'extract_code', 'range': [1302, 1426], 'children': [{'type': 'FunctionDeclaration', 'name': 'extract_code', 'range': [1302, 1425], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [1304, 1314], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [1305, 1305], 'children': []}, {'type': 'Parameter', 'name': 'text', 'range': [1307, 1307], 'children': []}, {'type': 'Parameter', 'name': 'language', 'range': [1311, 1311], 'children': []}]}, {'type': 'ReturnType', 'name': 'return_type', 'range': [1315, 1317], 'children': []}, {'type': 'Block', 'name': 'body', 'range': [1318, 1425], 'children': [{'type': 'Comment', 'name': 'comment', 'range': [1320, 1329], 'children': []}, {'type': 'Assignment', 'name': 'assignment', 'range': [1330, 1338], 'children': [{'type': 'Identifier', 'name': 'language', 'range': [1330, 1330], 'children': []}, {'type': 'CallExpression', 'name': 're.escape', 'range': [1332, 1337], 'children': [{'type': 'Identifier', 'name': 'language', 'range': [1336, 1336], 'children': []}]}]}, {'type': 'Comment', 'name': 'comment', 'range': [1339, 1354], 'children': []}, {'type': 'Assignment', 'name': 'assignment', 'range': [1355, 1372], 'children': [{'type': 'Identifier', 'name': 'pattern', 'range': [1355, 1355], 'children': []}, {'type': 'CallExpression', 'name': 're.compile', 'range': [1357, 1371], 'children': [{'type': 'StringLiteral', 'name': 'pattern', 'range': [1361, 1362], 'children': []}, {'type': 'Identifier', 'name': 're.DOTALL', 'range': [1364, 1366], 'children': []}, {'type': 'Identifier', 'name': 're.IGNORECASE', 'range': [1368, 1370], 'children': []}]}]}, {'type': 'Assignment', 'name': 'assignment', 'range': [1373, 1381], 'children': [{'type': 'Identifier', 'name': 'matches', 'range': [1373, 1373], 'children': []}, {'type': 'CallExpression', 'name': 'pattern.finditer', 'range': [1375, 1380], 'children': [{'type': 'Identifier', 'name': 'text', 'range': [1379, 1379], 'children': []}]}]}, {'type': 'Comment', 'name': 'comment', 'range': [1382, 1394], 'children': []}, {'type': 'Assignment', 'name': 'assignment', 'range': [1395, 1413], 'children': [{'type': 'Identifier', 'name': 'code_blocks', 'range': [1395, 1395], 'children': []}, {'type': 'ListComprehension', 'name': 'list_comprehension', 'range': [1397, 1412], 'children': [{'type': 'CallExpression', 'name': 'match.group', 'range': [1398, 1403], 'children': [{'type': 'NumericLiteral', 'name': '1', 'range': [1402, 1402], 'children': []}]}, {'type': 'CallExpression', 'name': 'match.group.strip', 'range': [1404, 1407], 'children': []}, {'type': 'Identifier', 'name': 'match', 'range': [1409, 1409], 'children': []}, {'type': 'Identifier', 'name': 'matches', 'range': [1411, 1411], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [1414, 1425], 'children': [{'type': 'ConditionalExpression', 'name': 'conditional', 'range': [1415, 1424], 'children': [{'type': 'CallExpression', 'name': '"\\n\\n".join', 'range': [1415, 1420], 'children': [{'type': 'Identifier', 'name': 'code_blocks', 'range': [1419, 1419], 'children': []}]}, {'type': 'StringLiteral', 'name': '""', 'range': [1424, 1424], 'children': []}]}]}]}]}]}
2025-01-08 10:28:49,286 - INFO - Starting Step 4: AST normalization
2025-01-08 10:28:51,961 - INFO - Step 2 result: {'type': 'Program', 'name': 'run', 'range': [1045, 1301], 'children': [{'type': 'FunctionDeclaration', 'name': 'run', 'range': [1045, 1061], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [1047, 1048], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [1049, 1050], 'children': []}, {'type': 'Parameter', 'name': 'kwargs', 'range': [1054, 1056], 'children': []}, {'type': 'ReturnType', 'name': 'BlockOutput', 'range': [1058, 1060], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'language_aliases', 'range': [1073, 1213], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [1074, 1074], 'children': [{'type': 'ObjectExpression', 'name': '', 'range': [1075, 1213], 'children': [{'type': 'Property', 'name': 'html', 'range': [1077, 1083], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1079, 1083], 'children': [{'type': 'Literal', 'name': '"html"', 'range': [1080, 1080], 'children': []}, {'type': 'Literal', 'name': '"htm"', 'range': [1082, 1082], 'children': []}]}]}, {'type': 'Property', 'name': 'css', 'range': [1086, 1091], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1088, 1091], 'children': [{'type': 'Literal', 'name': '"css"', 'range': [1089, 1089], 'children': []}]}]}, {'type': 'Property', 'name': 'javascript', 'range': [1093, 1099], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1095, 1099], 'children': [{'type': 'Literal', 'name': '"javascript"', 'range': [1096, 1096], 'children': []}, {'type': 'Literal', 'name': '"js"', 'range': [1098, 1098], 'children': []}]}]}, {'type': 'Property', 'name': 'python', 'range': [1102, 1108], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1104, 1108], 'children': [{'type': 'Literal', 'name': '"python"', 'range': [1105, 1105], 'children': []}, {'type': 'Literal', 'name': '"py"', 'range': [1107, 1107], 'children': []}]}]}, {'type': 'Property', 'name': 'sql', 'range': [1111, 1116], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1113, 1116], 'children': [{'type': 'Literal', 'name': '"sql"', 'range': [1114, 1114], 'children': []}]}]}, {'type': 'Property', 'name': 'java', 'range': [1118, 1123], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1120, 1123], 'children': [{'type': 'Literal', 'name': '"java"', 'range': [1121, 1121], 'children': []}]}]}, {'type': 'Property', 'name': 'cpp', 'range': [1125, 1132], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1127, 1132], 'children': [{'type': 'Literal', 'name': '"cpp"', 'range': [1128, 1128], 'children': []}, {'type': 'Literal', 'name': '"c++"', 'range': [1130, 1130], 'children': []}]}]}, {'type': 'Property', 'name': 'csharp', 'range': [1134, 1143], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1136, 1143], 'children': [{'type': 'Literal', 'name': '"csharp"', 'range': [1137, 1137], 'children': []}, {'type': 'Literal', 'name': '"c#"', 'range': [1139, 1139], 'children': []}, {'type': 'Literal', 'name': '"cs"', 'range': [1141, 1141], 'children': []}]}]}, {'type': 'Property', 'name': 'json_code', 'range': [1145, 1150], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1147, 1150], 'children': [{'type': 'Literal', 'name': '"json"', 'range': [1148, 1148], 'children': []}]}]}, {'type': 'Property', 'name': 'bash', 'range': [1152, 1161], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1154, 1161], 'children': [{'type': 'Literal', 'name': '"bash"', 'range': [1155, 1155], 'children': []}, {'type': 'Literal', 'name': '"shell"', 'range': [1157, 1157], 'children': []}, {'type': 'Literal', 'name': '"sh"', 'range': [1159, 1159], 'children': []}]}]}, {'type': 'Property', 'name': 'php', 'range': [1163, 1168], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1165, 1168], 'children': [{'type': 'Literal', 'name': '"php"', 'range': [1166, 1166], 'children': []}]}]}, {'type': 'Property', 'name': 'ruby', 'range': [1170, 1177], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1172, 1177], 'children': [{'type': 'Literal', 'name': '"ruby"', 'range': [1173, 1173], 'children': []}, {'type': 'Literal', 'name': '"rb"', 'range': [1175, 1175], 'children': []}]}]}, {'type': 'Property', 'name': 'yaml', 'range': [1179, 1186], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1181, 1186], 'children': [{'type': 'Literal', 'name': '"yaml"', 'range': [1182, 1182], 'children': []}, {'type': 'Literal', 'name': '"yml"', 'range': [1184, 1184], 'children': []}]}]}, {'type': 'Property', 'name': 'markdown', 'range': [1188, 1195], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1190, 1195], 'children': [{'type': 'Literal', 'name': '"markdown"', 'range': [1191, 1191], 'children': []}, {'type': 'Literal', 'name': '"md"', 'range': [1193, 1193], 'children': []}]}]}, {'type': 'Property', 'name': 'typescript', 'range': [1197, 1204], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1199, 1204], 'children': [{'type': 'Literal', 'name': '"typescript"', 'range': [1200, 1200], 'children': []}, {'type': 'Literal', 'name': '"ts"', 'range': [1202, 1202], 'children': []}]}]}, {'type': 'Property', 'name': 'xml', 'range': [1206, 1211], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1208, 1211], 'children': [{'type': 'Literal', 'name': '"xml"', 'range': [1209, 1209], 'children': []}]}]}]}]}]}, {'type': 'ForLoop', 'name': '', 'range': [1223, 1301], 'children': [{'type': 'VariableDeclaration', 'name': 'canonical_name', 'range': [1224, 1224], 'children': []}, {'type': 'VariableDeclaration', 'name': 'aliases', 'range': [1226, 1226], 'children': []}, {'type': 'Block', 'name': '', 'range': [1234, 1301], 'children': [{'type': 'VariableDeclaration', 'name': 'code', 'range': [1235, 1237], 'children': []}, {'type': 'ForLoop', 'name': '', 'range': [1247, 1281], 'children': [{'type': 'VariableDeclaration', 'name': 'alias', 'range': [1248, 1248], 'children': []}, {'type': 'Block', 'name': '', 'range': [1252, 1281], 'children': [{'type': 'VariableDeclaration', 'name': 'code_for_alias', 'range': [1253, 1264], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [1266, 1280], 'children': [{'type': 'AssignmentExpression', 'name': 'code', 'range': [1270, 1276], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1283, 1300], 'children': [{'type': 'YieldExpression', 'name': '', 'range': [1296, 1299], 'children': []}]}]}]}]}
2025-01-08 10:28:51,961 - INFO - Starting Step 3: AST simplification
2025-01-08 10:28:55,257 - INFO - Step 5 result: {'type': 'Program', 'name': '__init__', 'range': [956, 1044], 'children': [{'type': 'FunctionDecl', 'name': '__init__', 'range': [956, 1044], 'children': [{'type': 'ParameterList', 'name': '', 'range': [958, 960], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [959, 959], 'children': []}]}, {'type': 'Block', 'name': '', 'range': [961, 1044], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [963, 968], 'children': [{'type': 'CallExpression', 'name': 'super', 'range': [963, 968], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [964, 965], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [967, 1042], 'children': [{'type': 'CallExpression', 'name': '__init__', 'range': [967, 1042], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [968, 1042], 'children': [{'type': 'AssignmentExpression', 'name': 'id', 'range': [970, 972], 'children': []}, {'type': 'AssignmentExpression', 'name': 'description', 'range': [975, 977], 'children': []}, {'type': 'AssignmentExpression', 'name': 'categories', 'range': [980, 986], 'children': []}, {'type': 'AssignmentExpression', 'name': 'input_schema', 'range': [989, 994], 'children': []}, {'type': 'AssignmentExpression', 'name': 'output_schema', 'range': [996, 1000], 'children': []}, {'type': 'AssignmentExpression', 'name': 'test_input', 'range': [1003, 1011], 'children': []}, {'type': 'AssignmentExpression', 'name': 'test_output', 'range': [1014, 1039], 'children': []}]}]}]}]}]}]}
2025-01-08 10:28:55,257 - INFO - Completed main AST analysis flow
2025-01-08 10:28:55,257 - INFO - Successfully processed chunk
2025-01-08 10:28:56,298 - INFO - Step 2 result: {'type': 'Program', 'name': 'Output', 'range': [759, 955], 'children': [{'type': 'ClassDeclaration', 'name': 'Output', 'range': [759, 955], 'children': [{'type': 'FieldDeclaration', 'name': 'html', 'range': [766, 775], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [768, 768], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [769, 769], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [770, 775], 'children': [{'type': 'Argument', 'name': 'description', 'range': [772, 774], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'css', 'range': [777, 786], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [779, 779], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [780, 780], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [781, 786], 'children': [{'type': 'Argument', 'name': 'description', 'range': [783, 785], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'javascript', 'range': [788, 797], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [790, 790], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [791, 791], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [792, 797], 'children': [{'type': 'Argument', 'name': 'description', 'range': [794, 796], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'python', 'range': [799, 808], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [801, 801], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [802, 802], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [803, 808], 'children': [{'type': 'Argument', 'name': 'description', 'range': [805, 807], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'sql', 'range': [810, 819], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [812, 812], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [813, 813], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [814, 819], 'children': [{'type': 'Argument', 'name': 'description', 'range': [816, 818], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'java', 'range': [821, 830], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [823, 823], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [824, 824], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [825, 830], 'children': [{'type': 'Argument', 'name': 'description', 'range': [827, 829], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'cpp', 'range': [832, 841], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [834, 834], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [835, 835], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [836, 841], 'children': [{'type': 'Argument', 'name': 'description', 'range': [838, 840], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'csharp', 'range': [843, 852], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [845, 845], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [846, 846], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [847, 852], 'children': [{'type': 'Argument', 'name': 'description', 'range': [849, 851], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'json_code', 'range': [854, 863], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [856, 856], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [857, 857], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [858, 863], 'children': [{'type': 'Argument', 'name': 'description', 'range': [860, 862], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'bash', 'range': [865, 874], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [867, 867], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [868, 868], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [869, 874], 'children': [{'type': 'Argument', 'name': 'description', 'range': [871, 873], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'php', 'range': [876, 885], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [878, 878], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [879, 879], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [880, 885], 'children': [{'type': 'Argument', 'name': 'description', 'range': [882, 884], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'ruby', 'range': [887, 896], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [889, 889], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [890, 890], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [891, 896], 'children': [{'type': 'Argument', 'name': 'description', 'range': [893, 895], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'yaml', 'range': [898, 907], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [900, 900], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [901, 901], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [902, 907], 'children': [{'type': 'Argument', 'name': 'description', 'range': [904, 906], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'markdown', 'range': [909, 918], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [911, 911], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [912, 912], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [913, 918], 'children': [{'type': 'Argument', 'name': 'description', 'range': [915, 917], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'typescript', 'range': [920, 929], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [922, 922], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [923, 923], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [924, 929], 'children': [{'type': 'Argument', 'name': 'description', 'range': [926, 928], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'xml', 'range': [931, 940], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [933, 933], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [934, 934], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [935, 940], 'children': [{'type': 'Argument', 'name': 'description', 'range': [937, 939], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'remaining_text', 'range': [942, 953], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [944, 944], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [945, 945], 'children': [{'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [946, 953], 'children': [{'type': 'Argument', 'name': 'description', 'range': [949, 951], 'children': []}]}]}]}]}]}
2025-01-08 10:28:56,298 - INFO - Starting Step 3: AST simplification
2025-01-08 10:29:16,247 - INFO - Step 4 result: {'type': 'Program', 'name': 'extract_code', 'range': [1302, 1426], 'children': [{'type': 'FunctionDecl', 'name': 'extract_code', 'range': [1302, 1425], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [1304, 1314], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [1305, 1305], 'children': []}, {'type': 'Parameter', 'name': 'text', 'range': [1307, 1307], 'children': []}, {'type': 'Parameter', 'name': 'language', 'range': [1311, 1311], 'children': []}]}, {'type': 'ReturnType', 'name': 'return_type', 'range': [1315, 1317], 'children': []}, {'type': 'Block', 'name': 'body', 'range': [1318, 1425], 'children': [{'type': 'Comment', 'name': 'comment', 'range': [1320, 1329], 'children': []}, {'type': 'Assignment', 'name': 'assignment', 'range': [1330, 1338], 'children': [{'type': 'Identifier', 'name': 'language', 'range': [1330, 1330], 'children': []}, {'type': 'CallExpression', 'name': 're.escape', 'range': [1332, 1337], 'children': [{'type': 'Identifier', 'name': 'language', 'range': [1336, 1336], 'children': []}]}]}, {'type': 'Comment', 'name': 'comment', 'range': [1339, 1354], 'children': []}, {'type': 'Assignment', 'name': 'assignment', 'range': [1355, 1372], 'children': [{'type': 'Identifier', 'name': 'pattern', 'range': [1355, 1355], 'children': []}, {'type': 'CallExpression', 'name': 're.compile', 'range': [1357, 1371], 'children': [{'type': 'StringLiteral', 'name': 'pattern', 'range': [1361, 1362], 'children': []}, {'type': 'Identifier', 'name': 're.DOTALL', 'range': [1364, 1366], 'children': []}, {'type': 'Identifier', 'name': 're.IGNORECASE', 'range': [1368, 1370], 'children': []}]}]}, {'type': 'Assignment', 'name': 'assignment', 'range': [1373, 1381], 'children': [{'type': 'Identifier', 'name': 'matches', 'range': [1373, 1373], 'children': []}, {'type': 'CallExpression', 'name': 'pattern.finditer', 'range': [1375, 1380], 'children': [{'type': 'Identifier', 'name': 'text', 'range': [1379, 1379], 'children': []}]}]}, {'type': 'Comment', 'name': 'comment', 'range': [1382, 1394], 'children': []}, {'type': 'Assignment', 'name': 'assignment', 'range': [1395, 1413], 'children': [{'type': 'Identifier', 'name': 'code_blocks', 'range': [1395, 1395], 'children': []}, {'type': 'ListComprehension', 'name': 'list_comprehension', 'range': [1397, 1412], 'children': [{'type': 'CallExpression', 'name': 'match.group', 'range': [1398, 1403], 'children': [{'type': 'NumericLiteral', 'name': '1', 'range': [1402, 1402], 'children': []}]}, {'type': 'CallExpression', 'name': 'match.group.strip', 'range': [1404, 1407], 'children': []}, {'type': 'Identifier', 'name': 'match', 'range': [1409, 1409], 'children': []}, {'type': 'Identifier', 'name': 'matches', 'range': [1411, 1411], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [1414, 1425], 'children': [{'type': 'ConditionalExpression', 'name': 'conditional', 'range': [1415, 1424], 'children': [{'type': 'CallExpression', 'name': '"\\n\\n".join', 'range': [1415, 1420], 'children': [{'type': 'Identifier', 'name': 'code_blocks', 'range': [1419, 1419], 'children': []}]}, {'type': 'StringLiteral', 'name': '""', 'range': [1424, 1424], 'children': []}]}]}]}]}]}
2025-01-08 10:29:16,247 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:29:39,925 - INFO - Step 3 result: {'type': 'Program', 'name': 'Output', 'range': [759, 955], 'children': [{'type': 'ClassDeclaration', 'name': 'Output', 'range': [759, 955], 'children': [{'type': 'FieldDeclaration', 'name': 'html', 'range': [766, 775], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [768, 768]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [770, 775], 'children': [{'type': 'Argument', 'name': 'description', 'range': [772, 774]}]}]}, {'type': 'FieldDeclaration', 'name': 'css', 'range': [777, 786], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [779, 779]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [781, 786], 'children': [{'type': 'Argument', 'name': 'description', 'range': [783, 785]}]}]}, {'type': 'FieldDeclaration', 'name': 'javascript', 'range': [788, 797], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [790, 790]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [792, 797], 'children': [{'type': 'Argument', 'name': 'description', 'range': [794, 796]}]}]}, {'type': 'FieldDeclaration', 'name': 'python', 'range': [799, 808], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [801, 801]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [803, 808], 'children': [{'type': 'Argument', 'name': 'description', 'range': [805, 807]}]}]}, {'type': 'FieldDeclaration', 'name': 'sql', 'range': [810, 819], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [812, 812]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [814, 819], 'children': [{'type': 'Argument', 'name': 'description', 'range': [816, 818]}]}]}, {'type': 'FieldDeclaration', 'name': 'java', 'range': [821, 830], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [823, 823]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [825, 830], 'children': [{'type': 'Argument', 'name': 'description', 'range': [827, 829]}]}]}, {'type': 'FieldDeclaration', 'name': 'cpp', 'range': [832, 841], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [834, 834]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [836, 841], 'children': [{'type': 'Argument', 'name': 'description', 'range': [838, 840]}]}]}, {'type': 'FieldDeclaration', 'name': 'csharp', 'range': [843, 852], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [845, 845]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [847, 852], 'children': [{'type': 'Argument', 'name': 'description', 'range': [849, 851]}]}]}, {'type': 'FieldDeclaration', 'name': 'json_code', 'range': [854, 863], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [856, 856]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [858, 863], 'children': [{'type': 'Argument', 'name': 'description', 'range': [860, 862]}]}]}, {'type': 'FieldDeclaration', 'name': 'bash', 'range': [865, 874], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [867, 867]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [869, 874], 'children': [{'type': 'Argument', 'name': 'description', 'range': [871, 873]}]}]}, {'type': 'FieldDeclaration', 'name': 'php', 'range': [876, 885], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [878, 878]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [880, 885], 'children': [{'type': 'Argument', 'name': 'description', 'range': [882, 884]}]}]}, {'type': 'FieldDeclaration', 'name': 'ruby', 'range': [887, 896], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [889, 889]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [891, 896], 'children': [{'type': 'Argument', 'name': 'description', 'range': [893, 895]}]}]}, {'type': 'FieldDeclaration', 'name': 'yaml', 'range': [898, 907], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [900, 900]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [902, 907], 'children': [{'type': 'Argument', 'name': 'description', 'range': [904, 906]}]}]}, {'type': 'FieldDeclaration', 'name': 'markdown', 'range': [909, 918], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [911, 911]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [913, 918], 'children': [{'type': 'Argument', 'name': 'description', 'range': [915, 917]}]}]}, {'type': 'FieldDeclaration', 'name': 'typescript', 'range': [920, 929], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [922, 922]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [924, 929], 'children': [{'type': 'Argument', 'name': 'description', 'range': [926, 928]}]}]}, {'type': 'FieldDeclaration', 'name': 'xml', 'range': [931, 940], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [933, 933]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [935, 940], 'children': [{'type': 'Argument', 'name': 'description', 'range': [937, 939]}]}]}, {'type': 'FieldDeclaration', 'name': 'remaining_text', 'range': [942, 953], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [944, 944]}, {'type': 'SchemaFieldCall', 'name': 'SchemaField', 'range': [946, 953], 'children': [{'type': 'Argument', 'name': 'description', 'range': [949, 951]}]}]}]}]}
2025-01-08 10:29:39,925 - INFO - Starting Step 4: AST normalization
2025-01-08 10:29:42,087 - INFO - Step 5 result: {'type': 'Program', 'name': 'extract_code', 'range': [1302, 1426], 'children': [{'type': 'FunctionDecl', 'name': 'extract_code', 'range': [1302, 1425], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [1304, 1314], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [1305, 1305], 'children': []}, {'type': 'Parameter', 'name': 'text', 'range': [1307, 1307], 'children': []}, {'type': 'Parameter', 'name': 'language', 'range': [1311, 1311], 'children': []}]}, {'type': 'ReturnType', 'name': 'return_type', 'range': [1315, 1317], 'children': []}, {'type': 'Block', 'name': 'body', 'range': [1318, 1425], 'children': [{'type': 'Comment', 'name': 'comment', 'range': [1320, 1329], 'children': []}, {'type': 'Assignment', 'name': 'assignment', 'range': [1330, 1338], 'children': [{'type': 'Identifier', 'name': 'language', 'range': [1330, 1330], 'children': []}, {'type': 'CallExpression', 'name': 're.escape', 'range': [1332, 1337], 'children': [{'type': 'Identifier', 'name': 'language', 'range': [1336, 1336], 'children': []}]}]}, {'type': 'Comment', 'name': 'comment', 'range': [1339, 1354], 'children': []}, {'type': 'Assignment', 'name': 'assignment', 'range': [1355, 1372], 'children': [{'type': 'Identifier', 'name': 'pattern', 'range': [1355, 1355], 'children': []}, {'type': 'CallExpression', 'name': 're.compile', 'range': [1357, 1371], 'children': [{'type': 'StringLiteral', 'name': 'pattern', 'range': [1361, 1362], 'children': []}, {'type': 'Identifier', 'name': 're.DOTALL', 'range': [1364, 1366], 'children': []}, {'type': 'Identifier', 'name': 're.IGNORECASE', 'range': [1368, 1370], 'children': []}]}]}, {'type': 'Assignment', 'name': 'assignment', 'range': [1373, 1381], 'children': [{'type': 'Identifier', 'name': 'matches', 'range': [1373, 1373], 'children': []}, {'type': 'CallExpression', 'name': 'pattern.finditer', 'range': [1375, 1380], 'children': [{'type': 'Identifier', 'name': 'text', 'range': [1379, 1379], 'children': []}]}]}, {'type': 'Comment', 'name': 'comment', 'range': [1382, 1394], 'children': []}, {'type': 'Assignment', 'name': 'assignment', 'range': [1395, 1413], 'children': [{'type': 'Identifier', 'name': 'code_blocks', 'range': [1395, 1395], 'children': []}, {'type': 'ListComprehension', 'name': 'list_comprehension', 'range': [1397, 1412], 'children': [{'type': 'CallExpression', 'name': 'match.group', 'range': [1398, 1403], 'children': [{'type': 'NumericLiteral', 'name': '1', 'range': [1402, 1402], 'children': []}]}, {'type': 'CallExpression', 'name': 'match.group.strip', 'range': [1404, 1407], 'children': []}, {'type': 'Identifier', 'name': 'match', 'range': [1409, 1409], 'children': []}, {'type': 'Identifier', 'name': 'matches', 'range': [1411, 1411], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [1414, 1425], 'children': [{'type': 'ConditionalExpression', 'name': 'conditional', 'range': [1415, 1424], 'children': [{'type': 'CallExpression', 'name': '"\\n\\n".join', 'range': [1415, 1420], 'children': [{'type': 'Identifier', 'name': 'code_blocks', 'range': [1419, 1419], 'children': []}]}, {'type': 'StringLiteral', 'name': '""', 'range': [1424, 1424], 'children': []}]}]}]}]}]}
2025-01-08 10:29:42,087 - INFO - Completed main AST analysis flow
2025-01-08 10:29:42,089 - INFO - Successfully processed chunk
2025-01-08 10:29:45,954 - INFO - Step 3 result: {'type': 'Program', 'name': 'run', 'range': [1045, 1301], 'children': [{'type': 'FunctionDeclaration', 'name': 'run', 'range': [1045, 1061], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [1047, 1048], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [1049, 1050], 'children': []}, {'type': 'Parameter', 'name': 'kwargs', 'range': [1054, 1056], 'children': []}, {'type': 'ReturnType', 'name': 'BlockOutput', 'range': [1058, 1060], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'language_aliases', 'range': [1073, 1213], 'children': [{'type': 'ObjectExpression', 'name': '', 'range': [1075, 1213], 'children': [{'type': 'Property', 'name': 'html', 'range': [1077, 1083], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1079, 1083], 'children': [{'type': 'Literal', 'name': '"html"', 'range': [1080, 1080], 'children': []}, {'type': 'Literal', 'name': '"htm"', 'range': [1082, 1082], 'children': []}]}]}, {'type': 'Property', 'name': 'css', 'range': [1086, 1091], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1088, 1091], 'children': [{'type': 'Literal', 'name': '"css"', 'range': [1089, 1089], 'children': []}]}]}, {'type': 'Property', 'name': 'javascript', 'range': [1093, 1099], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1095, 1099], 'children': [{'type': 'Literal', 'name': '"javascript"', 'range': [1096, 1096], 'children': []}, {'type': 'Literal', 'name': '"js"', 'range': [1098, 1098], 'children': []}]}]}, {'type': 'Property', 'name': 'python', 'range': [1102, 1108], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1104, 1108], 'children': [{'type': 'Literal', 'name': '"python"', 'range': [1105, 1105], 'children': []}, {'type': 'Literal', 'name': '"py"', 'range': [1107, 1107], 'children': []}]}]}, {'type': 'Property', 'name': 'sql', 'range': [1111, 1116], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1113, 1116], 'children': [{'type': 'Literal', 'name': '"sql"', 'range': [1114, 1114], 'children': []}]}]}, {'type': 'Property', 'name': 'java', 'range': [1118, 1123], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1120, 1123], 'children': [{'type': 'Literal', 'name': '"java"', 'range': [1121, 1121], 'children': []}]}]}, {'type': 'Property', 'name': 'cpp', 'range': [1125, 1132], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1127, 1132], 'children': [{'type': 'Literal', 'name': '"cpp"', 'range': [1128, 1128], 'children': []}, {'type': 'Literal', 'name': '"c++"', 'range': [1130, 1130], 'children': []}]}]}, {'type': 'Property', 'name': 'csharp', 'range': [1134, 1143], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1136, 1143], 'children': [{'type': 'Literal', 'name': '"csharp"', 'range': [1137, 1137], 'children': []}, {'type': 'Literal', 'name': '"c#"', 'range': [1139, 1139], 'children': []}, {'type': 'Literal', 'name': '"cs"', 'range': [1141, 1141], 'children': []}]}]}, {'type': 'Property', 'name': 'json_code', 'range': [1145, 1150], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1147, 1150], 'children': [{'type': 'Literal', 'name': '"json"', 'range': [1148, 1148], 'children': []}]}]}, {'type': 'Property', 'name': 'bash', 'range': [1152, 1161], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1154, 1161], 'children': [{'type': 'Literal', 'name': '"bash"', 'range': [1155, 1155], 'children': []}, {'type': 'Literal', 'name': '"shell"', 'range': [1157, 1157], 'children': []}, {'type': 'Literal', 'name': '"sh"', 'range': [1159, 1159], 'children': []}]}]}, {'type': 'Property', 'name': 'php', 'range': [1163, 1168], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1165, 1168], 'children': [{'type': 'Literal', 'name': '"php"', 'range': [1166, 1166], 'children': []}]}]}, {'type': 'Property', 'name': 'ruby', 'range': [1170, 1177], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1172, 1177], 'children': [{'type': 'Literal', 'name': '"ruby"', 'range': [1173, 1173], 'children': []}, {'type': 'Literal', 'name': '"rb"', 'range': [1175, 1175], 'children': []}]}]}, {'type': 'Property', 'name': 'yaml', 'range': [1179, 1186], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1181, 1186], 'children': [{'type': 'Literal', 'name': '"yaml"', 'range': [1182, 1182], 'children': []}, {'type': 'Literal', 'name': '"yml"', 'range': [1184, 1184], 'children': []}]}]}, {'type': 'Property', 'name': 'markdown', 'range': [1188, 1195], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1190, 1195], 'children': [{'type': 'Literal', 'name': '"markdown"', 'range': [1191, 1191], 'children': []}, {'type': 'Literal', 'name': '"md"', 'range': [1193, 1193], 'children': []}]}]}, {'type': 'Property', 'name': 'typescript', 'range': [1197, 1204], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1199, 1204], 'children': [{'type': 'Literal', 'name': '"typescript"', 'range': [1200, 1200], 'children': []}, {'type': 'Literal', 'name': '"ts"', 'range': [1202, 1202], 'children': []}]}]}, {'type': 'Property', 'name': 'xml', 'range': [1206, 1211], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1208, 1211], 'children': [{'type': 'Literal', 'name': '"xml"', 'range': [1209, 1209], 'children': []}]}]}]}]}, {'type': 'ForLoop', 'name': '', 'range': [1223, 1301], 'children': [{'type': 'VariableDeclaration', 'name': 'canonical_name', 'range': [1224, 1224], 'children': []}, {'type': 'VariableDeclaration', 'name': 'aliases', 'range': [1226, 1226], 'children': []}, {'type': 'Block', 'name': '', 'range': [1234, 1301], 'children': [{'type': 'VariableDeclaration', 'name': 'code', 'range': [1235, 1237], 'children': []}, {'type': 'ForLoop', 'name': '', 'range': [1247, 1281], 'children': [{'type': 'VariableDeclaration', 'name': 'alias', 'range': [1248, 1248], 'children': []}, {'type': 'Block', 'name': '', 'range': [1252, 1281], 'children': [{'type': 'VariableDeclaration', 'name': 'code_for_alias', 'range': [1253, 1264], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [1266, 1280], 'children': [{'type': 'AssignmentExpression', 'name': 'code', 'range': [1270, 1276], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1283, 1300], 'children': [{'type': 'YieldExpression', 'name': '', 'range': [1296, 1299], 'children': []}]}]}]}]}
2025-01-08 10:29:45,954 - INFO - Starting Step 4: AST normalization
2025-01-08 10:29:53,586 - INFO - Step 2 result: {'nodes': [{'type': 'ClassDeclaration', 'name': 'CodeExtractionBlock', 'range': [30, 62], 'children': [{'type': 'Inheritance', 'name': 'Block', 'range': [32, 34], 'children': []}]}, {'type': 'ClassDeclaration', 'name': 'Input', 'range': [37, 62], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [39, 41], 'children': []}, {'type': 'FieldDeclaration', 'name': 'text', 'range': [44, 61], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [46, 48], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [47, 48], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [48, 61], 'children': [{'type': 'Argument', 'name': 'description', 'range': [51, 53], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [56, 58], 'children': []}]}]}]}]}, {'type': 'ClassDeclaration', 'name': 'Output', 'range': [64, 259], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [66, 68], 'children': []}, {'type': 'FieldDeclaration', 'name': 'html', 'range': [71, 80], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [73, 75], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [74, 75], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [75, 80], 'children': [{'type': 'Argument', 'name': 'description', 'range': [77, 79], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'css', 'range': [82, 91], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [84, 86], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [85, 86], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [86, 91], 'children': [{'type': 'Argument', 'name': 'description', 'range': [88, 90], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'javascript', 'range': [93, 102], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [95, 97], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [96, 97], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [97, 102], 'children': [{'type': 'Argument', 'name': 'description', 'range': [99, 101], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'python', 'range': [104, 113], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [106, 108], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [107, 108], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [108, 113], 'children': [{'type': 'Argument', 'name': 'description', 'range': [110, 112], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'sql', 'range': [115, 124], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [117, 119], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [118, 119], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [119, 124], 'children': [{'type': 'Argument', 'name': 'description', 'range': [121, 123], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'java', 'range': [126, 135], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [128, 130], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [129, 130], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [130, 135], 'children': [{'type': 'Argument', 'name': 'description', 'range': [132, 134], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'cpp', 'range': [137, 146], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [139, 141], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [140, 141], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [141, 146], 'children': [{'type': 'Argument', 'name': 'description', 'range': [143, 145], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'csharp', 'range': [148, 157], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [150, 152], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [151, 152], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [152, 157], 'children': [{'type': 'Argument', 'name': 'description', 'range': [154, 156], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'json_code', 'range': [159, 168], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [161, 163], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [162, 163], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [163, 168], 'children': [{'type': 'Argument', 'name': 'description', 'range': [165, 167], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'bash', 'range': [170, 179], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [172, 174], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [173, 174], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [174, 179], 'children': [{'type': 'Argument', 'name': 'description', 'range': [176, 178], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'php', 'range': [181, 190], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [183, 185], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [184, 185], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [185, 190], 'children': [{'type': 'Argument', 'name': 'description', 'range': [187, 189], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'ruby', 'range': [192, 201], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [194, 196], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [195, 196], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [196, 201], 'children': [{'type': 'Argument', 'name': 'description', 'range': [198, 200], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'yaml', 'range': [203, 212], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [205, 207], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [206, 207], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [207, 212], 'children': [{'type': 'Argument', 'name': 'description', 'range': [209, 211], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'markdown', 'range': [214, 223], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [216, 218], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [217, 218], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [218, 223], 'children': [{'type': 'Argument', 'name': 'description', 'range': [220, 222], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'typescript', 'range': [225, 234], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [227, 229], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [228, 229], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [229, 234], 'children': [{'type': 'Argument', 'name': 'description', 'range': [231, 233], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'xml', 'range': [236, 245], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [238, 240], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [239, 240], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [240, 245], 'children': [{'type': 'Argument', 'name': 'description', 'range': [242, 244], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'remaining_text', 'range': [247, 258], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [249, 251], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [250, 251], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [251, 258], 'children': [{'type': 'Argument', 'name': 'description', 'range': [254, 256], 'children': []}]}]}]}]}, {'type': 'FunctionDeclaration', 'name': '__init__', 'range': [261, 348], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [264, 265], 'children': []}, {'type': 'SuperCall', 'name': 'super', 'range': [268, 273], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [276, 277], 'children': [{'type': 'StringLiteral', 'name': '"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8"', 'range': [277, 278], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [281, 282], 'children': [{'type': 'StringLiteral', 'name': '"Extracts code blocks from text and identifies their programming languages"', 'range': [282, 283], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [286, 287], 'children': [{'type': 'ObjectLiteral', 'name': '{BlockCategory.TEXT}', 'range': [287, 291], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [295, 296], 'children': [{'type': 'MemberExpression', 'name': 'CodeExtractionBlock.Input', 'range': [296, 298], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [302, 303], 'children': [{'type': 'MemberExpression', 'name': 'CodeExtractionBlock.Output', 'range': [303, 305], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [309, 310], 'children': [{'type': 'ObjectLiteral', 'name': '{"text": "Here\'s a Python example:\\n```python\\nprint(\'Hello World\')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```"}', 'range': [310, 316], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [320, 321], 'children': [{'type': 'ArrayLiteral', 'name': '[("html", "<h1>Title</h1>"), ("python", "print(\'Hello World\')"), ("remaining_text", "Here\'s a Python example:\\nAnd some HTML:")]', 'range': [321, 344], 'children': []}]}]}, {'type': 'FunctionDeclaration', 'name': 'run', 'range': [350, 606], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [353, 354], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [355, 357], 'children': [{'type': 'TypeAnnotation', 'name': 'Input', 'range': [357, 358], 'children': []}]}, {'type': 'Parameter', 'name': 'kwargs', 'range': [361, 362], 'children': []}, {'type': 'ReturnType', 'name': 'BlockOutput', 'range': [365, 366], 'children': []}, {'type': 'VariableDeclaration', 'name': 'language_aliases', 'range': [378, 518], 'children': [{'type': 'ObjectLiteral', 'name': '{"html": ["html", "htm"], "css": ["css"], "javascript": ["javascript", "js"], "python": ["python", "py"], "sql": ["sql"], "java": ["java"], "cpp": ["cpp", "c++"], "csharp": ["csharp", "c#", "cs"], "json_code": ["json"], "bash": ["bash", "shell", "sh"], "php": ["php"], "ruby": ["ruby", "rb"], "yaml": ["yaml", "yml"], "markdown": ["markdown", "md"], "typescript": ["typescript", "ts"], "xml": ["xml"]}', 'range': [380, 518], 'children': []}]}, {'type': 'ForStatement', 'name': 'for', 'range': [528, 596], 'children': [{'type': 'VariableDeclaration', 'name': 'canonical_name', 'range': [529, 530], 'children': []}, {'type': 'VariableDeclaration', 'name': 'aliases', 'range': [531, 532], 'children': []}, {'type': 'MemberExpression', 'name': 'language_aliases.items', 'range': [533, 535], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [538, 596], 'children': [{'type': 'VariableDeclaration', 'name': 'code', 'range': [540, 542], 'children': [{'type': 'StringLiteral', 'name': '""', 'range': [542, 543], 'children': []}]}, {'type': 'ForStatement', 'name': 'for', 'range': [552, 586], 'children': [{'type': 'VariableDeclaration', 'name': 'alias', 'range': [553, 554], 'children': []}, {'type': 'MemberExpression', 'name': 'aliases', 'range': [555, 556], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [557, 586], 'children': [{'type': 'VariableDeclaration', 'name': 'code_for_alias', 'range': [558, 560], 'children': [{'type': 'MemberExpression', 'name': 'self.extract_code', 'range': [560, 562], 'children': []}, {'type': 'Argument', 'name': 'input_data.text', 'range': [564, 566], 'children': []}, {'type': 'Argument', 'name': 'alias', 'range': [568, 569], 'children': []}]}, {'type': 'IfStatement', 'name': 'if', 'range': [571, 586], 'children': [{'type': 'MemberExpression', 'name': 'code_for_alias', 'range': [572, 573], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [574, 586], 'children': [{'type': 'Assignment', 'name': '=', 'range': [575, 576], 'children': [{'type': 'BinaryExpression', 'name': '+', 'range': [577, 578], 'children': [{'type': 'MemberExpression', 'name': 'code', 'range': [577, 578], 'children': []}, {'type': 'StringLiteral', 'name': '"\\n\\n"', 'range': [579, 580], 'children': []}]}, {'type': 'BinaryExpression', 'name': '+', 'range': [580, 581], 'children': [{'type': 'MemberExpression', 'name': 'code_for_alias', 'range': [580, 581], 'children': []}]}]}]}]}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [588, 596], 'children': [{'type': 'MemberExpression', 'name': 'code', 'range': [589, 590], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [591, 596], 'children': [{'type': 'YieldExpression', 'name': 'yield', 'range': [601, 604], 'children': [{'type': 'StringLiteral', 'name': '"remaining_text"', 'range': [602, 603], 'children': []}, {'type': 'MemberExpression', 'name': 'remaining_text', 'range': [604, 605], 'children': []}]}]}]}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'extract_code', 'range': [607, 731], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [610, 611], 'children': []}, {'type': 'Parameter', 'name': 'text', 'range': [612, 614], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [614, 615], 'children': []}]}, {'type': 'Parameter', 'name': 'language', 'range': [616, 618], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [618, 619], 'children': []}]}, {'type': 'ReturnType', 'name': 'str', 'range': [622, 623], 'children': []}, {'type': 'VariableDeclaration', 'name': 'language', 'range': [635, 643], 'children': [{'type': 'MemberExpression', 'name': 're.escape', 'range': [637, 639], 'children': []}, {'type': 'Argument', 'name': 'language', 'range': [641, 642], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'pattern', 'range': [660, 676], 'children': [{'type': 'MemberExpression', 'name': 're.compile', 'range': [662, 664], 'children': []}, {'type': 'Argument', 'name': 'rf"```{language}\\s+(.*?)```"', 'range': [666, 667], 'children': []}, {'type': 'Argument', 'name': 're.DOTALL | re.IGNORECASE', 'range': [669, 675], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'matches', 'range': [678, 686], 'children': [{'type': 'MemberExpression', 'name': 'pattern.finditer', 'range': [680, 682], 'children': []}, {'type': 'Argument', 'name': 'text', 'range': [684, 685], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'code_blocks', 'range': [700, 717], 'children': [{'type': 'ArrayLiteral', 'name': '[match.group(1).strip() for match in matches]', 'range': [702, 717], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [719, 729], 'children': [{'type': 'ConditionalExpression', 'name': 'if', 'range': [726, 728], 'children': [{'type': 'MemberExpression', 'name': 'code_blocks', 'range': [727, 728], 'children': []}, {'type': 'StringLiteral', 'name': '"\\n\\n"', 'range': [720, 721], 'children': []}, {'type': 'MemberExpression', 'name': 'code_blocks', 'range': [724, 725], 'children': []}, {'type': 'StringLiteral', 'name': '""', 'range': [729, 730], 'children': []}]}]}]}]}
2025-01-08 10:29:53,587 - INFO - Starting Step 3: AST simplification
2025-01-08 10:30:21,556 - INFO - Step 4 result: {'type': 'Program', 'name': 'Output', 'range': [759, 955], 'children': [{'type': 'ClassDecl', 'name': 'Output', 'range': [759, 955], 'children': [{'type': 'FieldDecl', 'name': 'html', 'range': [766, 775], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [768, 768]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [770, 775], 'children': [{'type': 'Argument', 'name': 'description', 'range': [772, 774]}]}]}, {'type': 'FieldDecl', 'name': 'css', 'range': [777, 786], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [779, 779]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [781, 786], 'children': [{'type': 'Argument', 'name': 'description', 'range': [783, 785]}]}]}, {'type': 'FieldDecl', 'name': 'javascript', 'range': [788, 797], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [790, 790]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [792, 797], 'children': [{'type': 'Argument', 'name': 'description', 'range': [794, 796]}]}]}, {'type': 'FieldDecl', 'name': 'python', 'range': [799, 808], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [801, 801]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [803, 808], 'children': [{'type': 'Argument', 'name': 'description', 'range': [805, 807]}]}]}, {'type': 'FieldDecl', 'name': 'sql', 'range': [810, 819], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [812, 812]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [814, 819], 'children': [{'type': 'Argument', 'name': 'description', 'range': [816, 818]}]}]}, {'type': 'FieldDecl', 'name': 'java', 'range': [821, 830], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [823, 823]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [825, 830], 'children': [{'type': 'Argument', 'name': 'description', 'range': [827, 829]}]}]}, {'type': 'FieldDecl', 'name': 'cpp', 'range': [832, 841], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [834, 834]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [836, 841], 'children': [{'type': 'Argument', 'name': 'description', 'range': [838, 840]}]}]}, {'type': 'FieldDecl', 'name': 'csharp', 'range': [843, 852], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [845, 845]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [847, 852], 'children': [{'type': 'Argument', 'name': 'description', 'range': [849, 851]}]}]}, {'type': 'FieldDecl', 'name': 'json_code', 'range': [854, 863], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [856, 856]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [858, 863], 'children': [{'type': 'Argument', 'name': 'description', 'range': [860, 862]}]}]}, {'type': 'FieldDecl', 'name': 'bash', 'range': [865, 874], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [867, 867]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [869, 874], 'children': [{'type': 'Argument', 'name': 'description', 'range': [871, 873]}]}]}, {'type': 'FieldDecl', 'name': 'php', 'range': [876, 885], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [878, 878]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [880, 885], 'children': [{'type': 'Argument', 'name': 'description', 'range': [882, 884]}]}]}, {'type': 'FieldDecl', 'name': 'ruby', 'range': [887, 896], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [889, 889]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [891, 896], 'children': [{'type': 'Argument', 'name': 'description', 'range': [893, 895]}]}]}, {'type': 'FieldDecl', 'name': 'yaml', 'range': [898, 907], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [900, 900]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [902, 907], 'children': [{'type': 'Argument', 'name': 'description', 'range': [904, 906]}]}]}, {'type': 'FieldDecl', 'name': 'markdown', 'range': [909, 918], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [911, 911]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [913, 918], 'children': [{'type': 'Argument', 'name': 'description', 'range': [915, 917]}]}]}, {'type': 'FieldDecl', 'name': 'typescript', 'range': [920, 929], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [922, 922]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [924, 929], 'children': [{'type': 'Argument', 'name': 'description', 'range': [926, 928]}]}]}, {'type': 'FieldDecl', 'name': 'xml', 'range': [931, 940], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [933, 933]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [935, 940], 'children': [{'type': 'Argument', 'name': 'description', 'range': [937, 939]}]}]}, {'type': 'FieldDecl', 'name': 'remaining_text', 'range': [942, 953], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [944, 944]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [946, 953], 'children': [{'type': 'Argument', 'name': 'description', 'range': [949, 951]}]}]}]}]}
2025-01-08 10:30:21,556 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:30:39,239 - INFO - Step 4 result: {'type': 'Program', 'name': 'run', 'range': [1045, 1301], 'children': [{'type': 'FunctionDecl', 'name': 'run', 'range': [1045, 1061], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [1047, 1048], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [1049, 1050], 'children': []}, {'type': 'Parameter', 'name': 'kwargs', 'range': [1054, 1056], 'children': []}, {'type': 'ReturnType', 'name': 'BlockOutput', 'range': [1058, 1060], 'children': []}]}, {'type': 'VariableDecl', 'name': 'language_aliases', 'range': [1073, 1213], 'children': [{'type': 'ObjectExpression', 'name': '', 'range': [1075, 1213], 'children': [{'type': 'Property', 'name': 'html', 'range': [1077, 1083], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1079, 1083], 'children': [{'type': 'Literal', 'name': '"html"', 'range': [1080, 1080], 'children': []}, {'type': 'Literal', 'name': '"htm"', 'range': [1082, 1082], 'children': []}]}]}, {'type': 'Property', 'name': 'css', 'range': [1086, 1091], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1088, 1091], 'children': [{'type': 'Literal', 'name': '"css"', 'range': [1089, 1089], 'children': []}]}]}, {'type': 'Property', 'name': 'javascript', 'range': [1093, 1099], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1095, 1099], 'children': [{'type': 'Literal', 'name': '"javascript"', 'range': [1096, 1096], 'children': []}, {'type': 'Literal', 'name': '"js"', 'range': [1098, 1098], 'children': []}]}]}, {'type': 'Property', 'name': 'python', 'range': [1102, 1108], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1104, 1108], 'children': [{'type': 'Literal', 'name': '"python"', 'range': [1105, 1105], 'children': []}, {'type': 'Literal', 'name': '"py"', 'range': [1107, 1107], 'children': []}]}]}, {'type': 'Property', 'name': 'sql', 'range': [1111, 1116], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1113, 1116], 'children': [{'type': 'Literal', 'name': '"sql"', 'range': [1114, 1114], 'children': []}]}]}, {'type': 'Property', 'name': 'java', 'range': [1118, 1123], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1120, 1123], 'children': [{'type': 'Literal', 'name': '"java"', 'range': [1121, 1121], 'children': []}]}]}, {'type': 'Property', 'name': 'cpp', 'range': [1125, 1132], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1127, 1132], 'children': [{'type': 'Literal', 'name': '"cpp"', 'range': [1128, 1128], 'children': []}, {'type': 'Literal', 'name': '"c++"', 'range': [1130, 1130], 'children': []}]}]}, {'type': 'Property', 'name': 'csharp', 'range': [1134, 1143], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1136, 1143], 'children': [{'type': 'Literal', 'name': '"csharp"', 'range': [1137, 1137], 'children': []}, {'type': 'Literal', 'name': '"c#"', 'range': [1139, 1139], 'children': []}, {'type': 'Literal', 'name': '"cs"', 'range': [1141, 1141], 'children': []}]}]}, {'type': 'Property', 'name': 'json_code', 'range': [1145, 1150], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1147, 1150], 'children': [{'type': 'Literal', 'name': '"json"', 'range': [1148, 1148], 'children': []}]}]}, {'type': 'Property', 'name': 'bash', 'range': [1152, 1161], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1154, 1161], 'children': [{'type': 'Literal', 'name': '"bash"', 'range': [1155, 1155], 'children': []}, {'type': 'Literal', 'name': '"shell"', 'range': [1157, 1157], 'children': []}, {'type': 'Literal', 'name': '"sh"', 'range': [1159, 1159], 'children': []}]}]}, {'type': 'Property', 'name': 'php', 'range': [1163, 1168], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1165, 1168], 'children': [{'type': 'Literal', 'name': '"php"', 'range': [1166, 1166], 'children': []}]}]}, {'type': 'Property', 'name': 'ruby', 'range': [1170, 1177], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1172, 1177], 'children': [{'type': 'Literal', 'name': '"ruby"', 'range': [1173, 1173], 'children': []}, {'type': 'Literal', 'name': '"rb"', 'range': [1175, 1175], 'children': []}]}]}, {'type': 'Property', 'name': 'yaml', 'range': [1179, 1186], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1181, 1186], 'children': [{'type': 'Literal', 'name': '"yaml"', 'range': [1182, 1182], 'children': []}, {'type': 'Literal', 'name': '"yml"', 'range': [1184, 1184], 'children': []}]}]}, {'type': 'Property', 'name': 'markdown', 'range': [1188, 1195], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1190, 1195], 'children': [{'type': 'Literal', 'name': '"markdown"', 'range': [1191, 1191], 'children': []}, {'type': 'Literal', 'name': '"md"', 'range': [1193, 1193], 'children': []}]}]}, {'type': 'Property', 'name': 'typescript', 'range': [1197, 1204], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1199, 1204], 'children': [{'type': 'Literal', 'name': '"typescript"', 'range': [1200, 1200], 'children': []}, {'type': 'Literal', 'name': '"ts"', 'range': [1202, 1202], 'children': []}]}]}, {'type': 'Property', 'name': 'xml', 'range': [1206, 1211], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1208, 1211], 'children': [{'type': 'Literal', 'name': '"xml"', 'range': [1209, 1209], 'children': []}]}]}]}]}, {'type': 'ForStatement', 'name': '', 'range': [1223, 1301], 'children': [{'type': 'VariableDecl', 'name': 'canonical_name', 'range': [1224, 1224], 'children': []}, {'type': 'VariableDecl', 'name': 'aliases', 'range': [1226, 1226], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [1234, 1301], 'children': [{'type': 'VariableDecl', 'name': 'code', 'range': [1235, 1237], 'children': []}, {'type': 'ForStatement', 'name': '', 'range': [1247, 1281], 'children': [{'type': 'VariableDecl', 'name': 'alias', 'range': [1248, 1248], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [1252, 1281], 'children': [{'type': 'VariableDecl', 'name': 'code_for_alias', 'range': [1253, 1264], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [1266, 1280], 'children': [{'type': 'AssignmentExpression', 'name': 'code', 'range': [1270, 1276], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1283, 1300], 'children': [{'type': 'YieldExpression', 'name': '', 'range': [1296, 1299], 'children': []}]}]}]}]}
2025-01-08 10:30:39,239 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:31:03,884 - INFO - Step 5 result: {'type': 'Program', 'name': 'Output', 'range': [759, 955], 'children': [{'type': 'ClassDecl', 'name': 'Output', 'range': [759, 955], 'children': [{'type': 'FieldDecl', 'name': 'html', 'range': [766, 775], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [768, 768]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [770, 775], 'children': [{'type': 'Argument', 'name': 'description', 'range': [772, 774]}]}]}, {'type': 'FieldDecl', 'name': 'css', 'range': [777, 786], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [779, 779]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [781, 786], 'children': [{'type': 'Argument', 'name': 'description', 'range': [783, 785]}]}]}, {'type': 'FieldDecl', 'name': 'javascript', 'range': [788, 797], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [790, 790]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [792, 797], 'children': [{'type': 'Argument', 'name': 'description', 'range': [794, 796]}]}]}, {'type': 'FieldDecl', 'name': 'python', 'range': [799, 808], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [801, 801]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [803, 808], 'children': [{'type': 'Argument', 'name': 'description', 'range': [805, 807]}]}]}, {'type': 'FieldDecl', 'name': 'sql', 'range': [810, 819], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [812, 812]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [814, 819], 'children': [{'type': 'Argument', 'name': 'description', 'range': [816, 818]}]}]}, {'type': 'FieldDecl', 'name': 'java', 'range': [821, 830], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [823, 823]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [825, 830], 'children': [{'type': 'Argument', 'name': 'description', 'range': [827, 829]}]}]}, {'type': 'FieldDecl', 'name': 'cpp', 'range': [832, 841], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [834, 834]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [836, 841], 'children': [{'type': 'Argument', 'name': 'description', 'range': [838, 840]}]}]}, {'type': 'FieldDecl', 'name': 'csharp', 'range': [843, 852], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [845, 845]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [847, 852], 'children': [{'type': 'Argument', 'name': 'description', 'range': [849, 851]}]}]}, {'type': 'FieldDecl', 'name': 'json_code', 'range': [854, 863], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [856, 856]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [858, 863], 'children': [{'type': 'Argument', 'name': 'description', 'range': [860, 862]}]}]}, {'type': 'FieldDecl', 'name': 'bash', 'range': [865, 874], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [867, 867]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [869, 874], 'children': [{'type': 'Argument', 'name': 'description', 'range': [871, 873]}]}]}, {'type': 'FieldDecl', 'name': 'php', 'range': [876, 885], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [878, 878]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [880, 885], 'children': [{'type': 'Argument', 'name': 'description', 'range': [882, 884]}]}]}, {'type': 'FieldDecl', 'name': 'ruby', 'range': [887, 896], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [889, 889]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [891, 896], 'children': [{'type': 'Argument', 'name': 'description', 'range': [893, 895]}]}]}, {'type': 'FieldDecl', 'name': 'yaml', 'range': [898, 907], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [900, 900]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [902, 907], 'children': [{'type': 'Argument', 'name': 'description', 'range': [904, 906]}]}]}, {'type': 'FieldDecl', 'name': 'markdown', 'range': [909, 918], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [911, 911]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [913, 918], 'children': [{'type': 'Argument', 'name': 'description', 'range': [915, 917]}]}]}, {'type': 'FieldDecl', 'name': 'typescript', 'range': [920, 929], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [922, 922]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [924, 929], 'children': [{'type': 'Argument', 'name': 'description', 'range': [926, 928]}]}]}, {'type': 'FieldDecl', 'name': 'xml', 'range': [931, 940], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [933, 933]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [935, 940], 'children': [{'type': 'Argument', 'name': 'description', 'range': [937, 939]}]}]}, {'type': 'FieldDecl', 'name': 'remaining_text', 'range': [942, 953], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [944, 944]}, {'type': 'CallExpression', 'name': 'SchemaField', 'range': [946, 953], 'children': [{'type': 'Argument', 'name': 'description', 'range': [949, 951]}]}]}]}]}
2025-01-08 10:31:03,884 - INFO - Completed main AST analysis flow
2025-01-08 10:31:03,886 - INFO - Successfully processed chunk
2025-01-08 10:31:34,993 - INFO - Step 5 result: {'type': 'Program', 'name': 'run', 'range': [1045, 1301], 'children': [{'type': 'FunctionDecl', 'name': 'run', 'range': [1045, 1061], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [1047, 1048], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [1049, 1050], 'children': []}, {'type': 'Parameter', 'name': 'kwargs', 'range': [1054, 1056], 'children': []}, {'type': 'ReturnType', 'name': 'BlockOutput', 'range': [1058, 1060], 'children': []}]}, {'type': 'VariableDecl', 'name': 'language_aliases', 'range': [1073, 1213], 'children': [{'type': 'ObjectExpression', 'name': '', 'range': [1075, 1213], 'children': [{'type': 'Property', 'name': 'html', 'range': [1077, 1083], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1079, 1083], 'children': [{'type': 'Literal', 'name': '"html"', 'range': [1080, 1080], 'children': []}, {'type': 'Literal', 'name': '"htm"', 'range': [1082, 1082], 'children': []}]}]}, {'type': 'Property', 'name': 'css', 'range': [1086, 1091], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1088, 1091], 'children': [{'type': 'Literal', 'name': '"css"', 'range': [1089, 1089], 'children': []}]}]}, {'type': 'Property', 'name': 'javascript', 'range': [1093, 1099], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1095, 1099], 'children': [{'type': 'Literal', 'name': '"javascript"', 'range': [1096, 1096], 'children': []}, {'type': 'Literal', 'name': '"js"', 'range': [1098, 1098], 'children': []}]}]}, {'type': 'Property', 'name': 'python', 'range': [1102, 1108], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1104, 1108], 'children': [{'type': 'Literal', 'name': '"python"', 'range': [1105, 1105], 'children': []}, {'type': 'Literal', 'name': '"py"', 'range': [1107, 1107], 'children': []}]}]}, {'type': 'Property', 'name': 'sql', 'range': [1111, 1116], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1113, 1116], 'children': [{'type': 'Literal', 'name': '"sql"', 'range': [1114, 1114], 'children': []}]}]}, {'type': 'Property', 'name': 'java', 'range': [1118, 1123], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1120, 1123], 'children': [{'type': 'Literal', 'name': '"java"', 'range': [1121, 1121], 'children': []}]}]}, {'type': 'Property', 'name': 'cpp', 'range': [1125, 1132], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1127, 1132], 'children': [{'type': 'Literal', 'name': '"cpp"', 'range': [1128, 1128], 'children': []}, {'type': 'Literal', 'name': '"c++"', 'range': [1130, 1130], 'children': []}]}]}, {'type': 'Property', 'name': 'csharp', 'range': [1134, 1143], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1136, 1143], 'children': [{'type': 'Literal', 'name': '"csharp"', 'range': [1137, 1137], 'children': []}, {'type': 'Literal', 'name': '"c#"', 'range': [1139, 1139], 'children': []}, {'type': 'Literal', 'name': '"cs"', 'range': [1141, 1141], 'children': []}]}]}, {'type': 'Property', 'name': 'json_code', 'range': [1145, 1150], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1147, 1150], 'children': [{'type': 'Literal', 'name': '"json"', 'range': [1148, 1148], 'children': []}]}]}, {'type': 'Property', 'name': 'bash', 'range': [1152, 1161], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1154, 1161], 'children': [{'type': 'Literal', 'name': '"bash"', 'range': [1155, 1155], 'children': []}, {'type': 'Literal', 'name': '"shell"', 'range': [1157, 1157], 'children': []}, {'type': 'Literal', 'name': '"sh"', 'range': [1159, 1159], 'children': []}]}]}, {'type': 'Property', 'name': 'php', 'range': [1163, 1168], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1165, 1168], 'children': [{'type': 'Literal', 'name': '"php"', 'range': [1166, 1166], 'children': []}]}]}, {'type': 'Property', 'name': 'ruby', 'range': [1170, 1177], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1172, 1177], 'children': [{'type': 'Literal', 'name': '"ruby"', 'range': [1173, 1173], 'children': []}, {'type': 'Literal', 'name': '"rb"', 'range': [1175, 1175], 'children': []}]}]}, {'type': 'Property', 'name': 'yaml', 'range': [1179, 1186], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1181, 1186], 'children': [{'type': 'Literal', 'name': '"yaml"', 'range': [1182, 1182], 'children': []}, {'type': 'Literal', 'name': '"yml"', 'range': [1184, 1184], 'children': []}]}]}, {'type': 'Property', 'name': 'markdown', 'range': [1188, 1195], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1190, 1195], 'children': [{'type': 'Literal', 'name': '"markdown"', 'range': [1191, 1191], 'children': []}, {'type': 'Literal', 'name': '"md"', 'range': [1193, 1193], 'children': []}]}]}, {'type': 'Property', 'name': 'typescript', 'range': [1197, 1204], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1199, 1204], 'children': [{'type': 'Literal', 'name': '"typescript"', 'range': [1200, 1200], 'children': []}, {'type': 'Literal', 'name': '"ts"', 'range': [1202, 1202], 'children': []}]}]}, {'type': 'Property', 'name': 'xml', 'range': [1206, 1211], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [1208, 1211], 'children': [{'type': 'Literal', 'name': '"xml"', 'range': [1209, 1209], 'children': []}]}]}]}]}, {'type': 'ForStatement', 'name': '', 'range': [1223, 1301], 'children': [{'type': 'VariableDecl', 'name': 'canonical_name', 'range': [1224, 1224], 'children': []}, {'type': 'VariableDecl', 'name': 'aliases', 'range': [1226, 1226], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [1234, 1301], 'children': [{'type': 'VariableDecl', 'name': 'code', 'range': [1235, 1237], 'children': []}, {'type': 'ForStatement', 'name': '', 'range': [1247, 1281], 'children': [{'type': 'VariableDecl', 'name': 'alias', 'range': [1248, 1248], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [1252, 1281], 'children': [{'type': 'VariableDecl', 'name': 'code_for_alias', 'range': [1253, 1264], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [1266, 1280], 'children': [{'type': 'AssignmentExpression', 'name': 'code', 'range': [1270, 1276], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [1283, 1300], 'children': [{'type': 'YieldExpression', 'name': '', 'range': [1296, 1299], 'children': []}]}]}]}]}
2025-01-08 10:31:34,993 - INFO - Completed main AST analysis flow
2025-01-08 10:31:35,008 - INFO - Successfully processed chunk
2025-01-08 10:31:53,712 - INFO - Step 3 result: {'nodes': [{'type': 'ClassDeclaration', 'name': 'CodeExtractionBlock', 'range': [30, 62], 'children': [{'type': 'Inheritance', 'name': 'Block', 'range': [32, 34], 'children': []}]}, {'type': 'ClassDeclaration', 'name': 'Input', 'range': [37, 62], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [39, 41], 'children': []}, {'type': 'FieldDeclaration', 'name': 'text', 'range': [44, 61], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [46, 48], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [47, 48], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [48, 61], 'children': [{'type': 'Argument', 'name': 'description', 'range': [51, 53], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [56, 58], 'children': []}]}]}]}]}, {'type': 'ClassDeclaration', 'name': 'Output', 'range': [64, 259], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [66, 68], 'children': []}, {'type': 'FieldDeclaration', 'name': 'html', 'range': [71, 80], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [73, 75], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [74, 75], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [75, 80], 'children': [{'type': 'Argument', 'name': 'description', 'range': [77, 79], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'css', 'range': [82, 91], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [84, 86], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [85, 86], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [86, 91], 'children': [{'type': 'Argument', 'name': 'description', 'range': [88, 90], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'javascript', 'range': [93, 102], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [95, 97], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [96, 97], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [97, 102], 'children': [{'type': 'Argument', 'name': 'description', 'range': [99, 101], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'python', 'range': [104, 113], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [106, 108], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [107, 108], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [108, 113], 'children': [{'type': 'Argument', 'name': 'description', 'range': [110, 112], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'sql', 'range': [115, 124], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [117, 119], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [118, 119], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [119, 124], 'children': [{'type': 'Argument', 'name': 'description', 'range': [121, 123], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'java', 'range': [126, 135], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [128, 130], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [129, 130], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [130, 135], 'children': [{'type': 'Argument', 'name': 'description', 'range': [132, 134], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'cpp', 'range': [137, 146], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [139, 141], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [140, 141], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [141, 146], 'children': [{'type': 'Argument', 'name': 'description', 'range': [143, 145], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'csharp', 'range': [148, 157], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [150, 152], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [151, 152], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [152, 157], 'children': [{'type': 'Argument', 'name': 'description', 'range': [154, 156], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'json_code', 'range': [159, 168], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [161, 163], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [162, 163], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [163, 168], 'children': [{'type': 'Argument', 'name': 'description', 'range': [165, 167], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'bash', 'range': [170, 179], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [172, 174], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [173, 174], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [174, 179], 'children': [{'type': 'Argument', 'name': 'description', 'range': [176, 178], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'php', 'range': [181, 190], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [183, 185], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [184, 185], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [185, 190], 'children': [{'type': 'Argument', 'name': 'description', 'range': [187, 189], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'ruby', 'range': [192, 201], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [194, 196], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [195, 196], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [196, 201], 'children': [{'type': 'Argument', 'name': 'description', 'range': [198, 200], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'yaml', 'range': [203, 212], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [205, 207], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [206, 207], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [207, 212], 'children': [{'type': 'Argument', 'name': 'description', 'range': [209, 211], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'markdown', 'range': [214, 223], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [216, 218], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [217, 218], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [218, 223], 'children': [{'type': 'Argument', 'name': 'description', 'range': [220, 222], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'typescript', 'range': [225, 234], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [227, 229], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [228, 229], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [229, 234], 'children': [{'type': 'Argument', 'name': 'description', 'range': [231, 233], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'xml', 'range': [236, 245], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [238, 240], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [239, 240], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [240, 245], 'children': [{'type': 'Argument', 'name': 'description', 'range': [242, 244], 'children': []}]}]}]}, {'type': 'FieldDeclaration', 'name': 'remaining_text', 'range': [247, 258], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [249, 251], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [250, 251], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [251, 258], 'children': [{'type': 'Argument', 'name': 'description', 'range': [254, 256], 'children': []}]}]}]}]}, {'type': 'FunctionDeclaration', 'name': '__init__', 'range': [261, 348], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [264, 265], 'children': []}, {'type': 'SuperCall', 'name': 'super', 'range': [268, 273], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [276, 277], 'children': [{'type': 'StringLiteral', 'name': '"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8"', 'range': [277, 278], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [281, 282], 'children': [{'type': 'StringLiteral', 'name': '"Extracts code blocks from text and identifies their programming languages"', 'range': [282, 283], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [286, 287], 'children': [{'type': 'ObjectLiteral', 'name': '{BlockCategory.TEXT}', 'range': [287, 291], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [295, 296], 'children': [{'type': 'MemberExpression', 'name': 'CodeExtractionBlock.Input', 'range': [296, 298], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [302, 303], 'children': [{'type': 'MemberExpression', 'name': 'CodeExtractionBlock.Output', 'range': [303, 305], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [309, 310], 'children': [{'type': 'ObjectLiteral', 'name': '{"text": "Here\'s a Python example:\\n```python\\nprint(\'Hello World\')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```"}', 'range': [310, 316], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [320, 321], 'children': [{'type': 'ArrayLiteral', 'name': '[("html", "<h1>Title</h1>"), ("python", "print(\'Hello World\')"), ("remaining_text", "Here\'s a Python example:\\nAnd some HTML:")]', 'range': [321, 344], 'children': []}]}]}, {'type': 'FunctionDeclaration', 'name': 'run', 'range': [350, 606], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [353, 354], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [355, 357], 'children': [{'type': 'TypeAnnotation', 'name': 'Input', 'range': [357, 358], 'children': []}]}, {'type': 'Parameter', 'name': 'kwargs', 'range': [361, 362], 'children': []}, {'type': 'ReturnType', 'name': 'BlockOutput', 'range': [365, 366], 'children': []}, {'type': 'VariableDeclaration', 'name': 'language_aliases', 'range': [378, 518], 'children': [{'type': 'ObjectLiteral', 'name': '{"html": ["html", "htm"], "css": ["css"], "javascript": ["javascript", "js"], "python": ["python", "py"], "sql": ["sql"], "java": ["java"], "cpp": ["cpp", "c++"], "csharp": ["csharp", "c#", "cs"], "json_code": ["json"], "bash": ["bash", "shell", "sh"], "php": ["php"], "ruby": ["ruby", "rb"], "yaml": ["yaml", "yml"], "markdown": ["markdown", "md"], "typescript": ["typescript", "ts"], "xml": ["xml"]}', 'range': [380, 518], 'children': []}]}, {'type': 'ForStatement', 'name': 'for', 'range': [528, 596], 'children': [{'type': 'VariableDeclaration', 'name': 'canonical_name', 'range': [529, 530], 'children': []}, {'type': 'VariableDeclaration', 'name': 'aliases', 'range': [531, 532], 'children': []}, {'type': 'MemberExpression', 'name': 'language_aliases.items', 'range': [533, 535], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [538, 596], 'children': [{'type': 'VariableDeclaration', 'name': 'code', 'range': [540, 542], 'children': [{'type': 'StringLiteral', 'name': '""', 'range': [542, 543], 'children': []}]}, {'type': 'ForStatement', 'name': 'for', 'range': [552, 586], 'children': [{'type': 'VariableDeclaration', 'name': 'alias', 'range': [553, 554], 'children': []}, {'type': 'MemberExpression', 'name': 'aliases', 'range': [555, 556], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [557, 586], 'children': [{'type': 'VariableDeclaration', 'name': 'code_for_alias', 'range': [558, 560], 'children': [{'type': 'MemberExpression', 'name': 'self.extract_code', 'range': [560, 562], 'children': []}, {'type': 'Argument', 'name': 'input_data.text', 'range': [564, 566], 'children': []}, {'type': 'Argument', 'name': 'alias', 'range': [568, 569], 'children': []}]}, {'type': 'IfStatement', 'name': 'if', 'range': [571, 586], 'children': [{'type': 'MemberExpression', 'name': 'code_for_alias', 'range': [572, 573], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [574, 586], 'children': [{'type': 'Assignment', 'name': '=', 'range': [575, 576], 'children': [{'type': 'BinaryExpression', 'name': '+', 'range': [577, 578], 'children': [{'type': 'MemberExpression', 'name': 'code', 'range': [577, 578], 'children': []}, {'type': 'StringLiteral', 'name': '"\\n\\n"', 'range': [579, 580], 'children': []}]}, {'type': 'BinaryExpression', 'name': '+', 'range': [580, 581], 'children': [{'type': 'MemberExpression', 'name': 'code_for_alias', 'range': [580, 581], 'children': []}]}]}]}]}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [588, 596], 'children': [{'type': 'MemberExpression', 'name': 'code', 'range': [589, 590], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [591, 596], 'children': [{'type': 'YieldExpression', 'name': 'yield', 'range': [601, 604], 'children': [{'type': 'StringLiteral', 'name': '"remaining_text"', 'range': [602, 603], 'children': []}, {'type': 'MemberExpression', 'name': 'remaining_text', 'range': [604, 605], 'children': []}]}]}]}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'extract_code', 'range': [607, 731], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [610, 611], 'children': []}, {'type': 'Parameter', 'name': 'text', 'range': [612, 614], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [614, 615], 'children': []}]}, {'type': 'Parameter', 'name': 'language', 'range': [616, 618], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [618, 619], 'children': []}]}, {'type': 'ReturnType', 'name': 'str', 'range': [622, 623], 'children': []}, {'type': 'VariableDeclaration', 'name': 'language', 'range': [635, 643], 'children': [{'type': 'MemberExpression', 'name': 're.escape', 'range': [637, 639], 'children': []}, {'type': 'Argument', 'name': 'language', 'range': [641, 642], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'pattern', 'range': [660, 676], 'children': [{'type': 'MemberExpression', 'name': 're.compile', 'range': [662, 664], 'children': []}, {'type': 'Argument', 'name': 'rf"```{language}\\s+(.*?)```"', 'range': [666, 667], 'children': []}, {'type': 'Argument', 'name': 're.DOTALL | re.IGNORECASE', 'range': [669, 675], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'matches', 'range': [678, 686], 'children': [{'type': 'MemberExpression', 'name': 'pattern.finditer', 'range': [680, 682], 'children': []}, {'type': 'Argument', 'name': 'text', 'range': [684, 685], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'code_blocks', 'range': [700, 717], 'children': [{'type': 'ArrayLiteral', 'name': '[match.group(1).strip() for match in matches]', 'range': [702, 717], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [719, 729], 'children': [{'type': 'ConditionalExpression', 'name': 'if', 'range': [726, 728], 'children': [{'type': 'MemberExpression', 'name': 'code_blocks', 'range': [727, 728], 'children': []}, {'type': 'StringLiteral', 'name': '"\\n\\n"', 'range': [720, 721], 'children': []}, {'type': 'MemberExpression', 'name': 'code_blocks', 'range': [724, 725], 'children': []}, {'type': 'StringLiteral', 'name': '""', 'range': [729, 730], 'children': []}]}]}]}]}
2025-01-08 10:31:53,712 - INFO - Starting Step 4: AST normalization
2025-01-08 10:33:51,643 - INFO - Step 4 result: {'nodes': [{'type': 'ClassDecl', 'name': 'CodeExtractionBlock', 'range': [30, 62], 'children': [{'type': 'Inheritance', 'name': 'Block', 'range': [32, 34], 'children': []}]}, {'type': 'ClassDecl', 'name': 'Input', 'range': [37, 62], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [39, 41], 'children': []}, {'type': 'FieldDecl', 'name': 'text', 'range': [44, 61], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [46, 48], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [47, 48], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [48, 61], 'children': [{'type': 'Argument', 'name': 'description', 'range': [51, 53], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [56, 58], 'children': []}]}]}]}]}, {'type': 'ClassDecl', 'name': 'Output', 'range': [64, 259], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [66, 68], 'children': []}, {'type': 'FieldDecl', 'name': 'html', 'range': [71, 80], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [73, 75], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [74, 75], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [75, 80], 'children': [{'type': 'Argument', 'name': 'description', 'range': [77, 79], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'css', 'range': [82, 91], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [84, 86], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [85, 86], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [86, 91], 'children': [{'type': 'Argument', 'name': 'description', 'range': [88, 90], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'javascript', 'range': [93, 102], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [95, 97], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [96, 97], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [97, 102], 'children': [{'type': 'Argument', 'name': 'description', 'range': [99, 101], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'python', 'range': [104, 113], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [106, 108], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [107, 108], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [108, 113], 'children': [{'type': 'Argument', 'name': 'description', 'range': [110, 112], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'sql', 'range': [115, 124], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [117, 119], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [118, 119], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [119, 124], 'children': [{'type': 'Argument', 'name': 'description', 'range': [121, 123], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'java', 'range': [126, 135], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [128, 130], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [129, 130], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [130, 135], 'children': [{'type': 'Argument', 'name': 'description', 'range': [132, 134], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'cpp', 'range': [137, 146], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [139, 141], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [140, 141], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [141, 146], 'children': [{'type': 'Argument', 'name': 'description', 'range': [143, 145], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'csharp', 'range': [148, 157], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [150, 152], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [151, 152], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [152, 157], 'children': [{'type': 'Argument', 'name': 'description', 'range': [154, 156], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'json_code', 'range': [159, 168], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [161, 163], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [162, 163], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [163, 168], 'children': [{'type': 'Argument', 'name': 'description', 'range': [165, 167], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'bash', 'range': [170, 179], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [172, 174], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [173, 174], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [174, 179], 'children': [{'type': 'Argument', 'name': 'description', 'range': [176, 178], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'php', 'range': [181, 190], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [183, 185], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [184, 185], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [185, 190], 'children': [{'type': 'Argument', 'name': 'description', 'range': [187, 189], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'ruby', 'range': [192, 201], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [194, 196], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [195, 196], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [196, 201], 'children': [{'type': 'Argument', 'name': 'description', 'range': [198, 200], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'yaml', 'range': [203, 212], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [205, 207], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [206, 207], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [207, 212], 'children': [{'type': 'Argument', 'name': 'description', 'range': [209, 211], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'markdown', 'range': [214, 223], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [216, 218], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [217, 218], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [218, 223], 'children': [{'type': 'Argument', 'name': 'description', 'range': [220, 222], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'typescript', 'range': [225, 234], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [227, 229], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [228, 229], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [229, 234], 'children': [{'type': 'Argument', 'name': 'description', 'range': [231, 233], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'xml', 'range': [236, 245], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [238, 240], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [239, 240], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [240, 245], 'children': [{'type': 'Argument', 'name': 'description', 'range': [242, 244], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'remaining_text', 'range': [247, 258], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [249, 251], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [250, 251], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [251, 258], 'children': [{'type': 'Argument', 'name': 'description', 'range': [254, 256], 'children': []}]}]}]}]}, {'type': 'FunctionDecl', 'name': '__init__', 'range': [261, 348], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [264, 265], 'children': []}, {'type': 'SuperCall', 'name': 'super', 'range': [268, 273], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [276, 277], 'children': [{'type': 'Literal', 'name': '"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8"', 'range': [277, 278], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [281, 282], 'children': [{'type': 'Literal', 'name': '"Extracts code blocks from text and identifies their programming languages"', 'range': [282, 283], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [286, 287], 'children': [{'type': 'ObjectLiteral', 'name': '{BlockCategory.TEXT}', 'range': [287, 291], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [295, 296], 'children': [{'type': 'MemberExpression', 'name': 'CodeExtractionBlock.Input', 'range': [296, 298], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [302, 303], 'children': [{'type': 'MemberExpression', 'name': 'CodeExtractionBlock.Output', 'range': [303, 305], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [309, 310], 'children': [{'type': 'ObjectLiteral', 'name': '{"text": "Here\'s a Python example:\\n```python\\nprint(\'Hello World\')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```"}', 'range': [310, 316], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [320, 321], 'children': [{'type': 'ArrayLiteral', 'name': '[("html", "<h1>Title</h1>"), ("python", "print(\'Hello World\')"), ("remaining_text", "Here\'s a Python example:\\nAnd some HTML:")]', 'range': [321, 344], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'run', 'range': [350, 606], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [353, 354], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [355, 357], 'children': [{'type': 'TypeAnnotation', 'name': 'Input', 'range': [357, 358], 'children': []}]}, {'type': 'Parameter', 'name': 'kwargs', 'range': [361, 362], 'children': []}, {'type': 'ReturnType', 'name': 'BlockOutput', 'range': [365, 366], 'children': []}, {'type': 'VariableDecl', 'name': 'language_aliases', 'range': [378, 518], 'children': [{'type': 'ObjectLiteral', 'name': '{"html": ["html", "htm"], "css": ["css"], "javascript": ["javascript", "js"], "python": ["python", "py"], "sql": ["sql"], "java": ["java"], "cpp": ["cpp", "c++"], "csharp": ["csharp", "c#", "cs"], "json_code": ["json"], "bash": ["bash", "shell", "sh"], "php": ["php"], "ruby": ["ruby", "rb"], "yaml": ["yaml", "yml"], "markdown": ["markdown", "md"], "typescript": ["typescript", "ts"], "xml": ["xml"]}', 'range': [380, 518], 'children': []}]}, {'type': 'ForStatement', 'name': 'for', 'range': [528, 596], 'children': [{'type': 'VariableDecl', 'name': 'canonical_name', 'range': [529, 530], 'children': []}, {'type': 'VariableDecl', 'name': 'aliases', 'range': [531, 532], 'children': []}, {'type': 'MemberExpression', 'name': 'language_aliases.items', 'range': [533, 535], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [538, 596], 'children': [{'type': 'VariableDecl', 'name': 'code', 'range': [540, 542], 'children': [{'type': 'Literal', 'name': '""', 'range': [542, 543], 'children': []}]}, {'type': 'ForStatement', 'name': 'for', 'range': [552, 586], 'children': [{'type': 'VariableDecl', 'name': 'alias', 'range': [553, 554], 'children': []}, {'type': 'MemberExpression', 'name': 'aliases', 'range': [555, 556], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [557, 586], 'children': [{'type': 'VariableDecl', 'name': 'code_for_alias', 'range': [558, 560], 'children': [{'type': 'MemberExpression', 'name': 'self.extract_code', 'range': [560, 562], 'children': []}, {'type': 'Argument', 'name': 'input_data.text', 'range': [564, 566], 'children': []}, {'type': 'Argument', 'name': 'alias', 'range': [568, 569], 'children': []}]}, {'type': 'IfStatement', 'name': 'if', 'range': [571, 586], 'children': [{'type': 'MemberExpression', 'name': 'code_for_alias', 'range': [572, 573], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [574, 586], 'children': [{'type': 'Assignment', 'name': '=', 'range': [575, 576], 'children': [{'type': 'BinaryExpression', 'name': '+', 'range': [577, 578], 'children': [{'type': 'MemberExpression', 'name': 'code', 'range': [577, 578], 'children': []}, {'type': 'Literal', 'name': '"\\n\\n"', 'range': [579, 580], 'children': []}]}, {'type': 'BinaryExpression', 'name': '+', 'range': [580, 581], 'children': [{'type': 'MemberExpression', 'name': 'code_for_alias', 'range': [580, 581], 'children': []}]}]}]}]}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [588, 596], 'children': [{'type': 'MemberExpression', 'name': 'code', 'range': [589, 590], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [591, 596], 'children': [{'type': 'YieldExpression', 'name': 'yield', 'range': [601, 604], 'children': [{'type': 'Literal', 'name': '"remaining_text"', 'range': [602, 603], 'children': []}, {'type': 'MemberExpression', 'name': 'remaining_text', 'range': [604, 605], 'children': []}]}]}]}]}]}]}, {'type': 'FunctionDecl', 'name': 'extract_code', 'range': [607, 731], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [610, 611], 'children': []}, {'type': 'Parameter', 'name': 'text', 'range': [612, 614], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [614, 615], 'children': []}]}, {'type': 'Parameter', 'name': 'language', 'range': [616, 618], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [618, 619], 'children': []}]}, {'type': 'ReturnType', 'name': 'str', 'range': [622, 623], 'children': []}, {'type': 'VariableDecl', 'name': 'language', 'range': [635, 643], 'children': [{'type': 'MemberExpression', 'name': 're.escape', 'range': [637, 639], 'children': []}, {'type': 'Argument', 'name': 'language', 'range': [641, 642], 'children': []}]}, {'type': 'VariableDecl', 'name': 'pattern', 'range': [660, 676], 'children': [{'type': 'MemberExpression', 'name': 're.compile', 'range': [662, 664], 'children': []}, {'type': 'Argument', 'name': 'rf"```{language}\\s+(.*?)```"', 'range': [666, 667], 'children': []}, {'type': 'Argument', 'name': 're.DOTALL | re.IGNORECASE', 'range': [669, 675], 'children': []}]}, {'type': 'VariableDecl', 'name': 'matches', 'range': [678, 686], 'children': [{'type': 'MemberExpression', 'name': 'pattern.finditer', 'range': [680, 682], 'children': []}, {'type': 'Argument', 'name': 'text', 'range': [684, 685], 'children': []}]}, {'type': 'VariableDecl', 'name': 'code_blocks', 'range': [700, 717], 'children': [{'type': 'ArrayLiteral', 'name': '[match.group(1).strip() for match in matches]', 'range': [702, 717], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [719, 729], 'children': [{'type': 'ConditionalExpression', 'name': 'if', 'range': [726, 728], 'children': [{'type': 'MemberExpression', 'name': 'code_blocks', 'range': [727, 728], 'children': []}, {'type': 'Literal', 'name': '"\\n\\n"', 'range': [720, 721], 'children': []}, {'type': 'MemberExpression', 'name': 'code_blocks', 'range': [724, 725], 'children': []}, {'type': 'Literal', 'name': '""', 'range': [729, 730], 'children': []}]}]}]}]}
2025-01-08 10:33:51,643 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:35:48,636 - INFO - Step 5 result: {'type': 'Program', 'name': 'CodeExtractionBlock', 'range': [30, 731], 'children': [{'type': 'ClassDecl', 'name': 'CodeExtractionBlock', 'range': [30, 62], 'children': [{'type': 'Inheritance', 'name': 'Block', 'range': [32, 34], 'children': []}]}, {'type': 'ClassDecl', 'name': 'Input', 'range': [37, 62], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [39, 41], 'children': []}, {'type': 'FieldDecl', 'name': 'text', 'range': [44, 61], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [46, 48], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [47, 48], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [48, 61], 'children': [{'type': 'Argument', 'name': 'description', 'range': [51, 53], 'children': []}, {'type': 'Argument', 'name': 'placeholder', 'range': [56, 58], 'children': []}]}]}]}]}, {'type': 'ClassDecl', 'name': 'Output', 'range': [64, 259], 'children': [{'type': 'Inheritance', 'name': 'BlockSchema', 'range': [66, 68], 'children': []}, {'type': 'FieldDecl', 'name': 'html', 'range': [71, 80], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [73, 75], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [74, 75], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [75, 80], 'children': [{'type': 'Argument', 'name': 'description', 'range': [77, 79], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'css', 'range': [82, 91], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [84, 86], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [85, 86], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [86, 91], 'children': [{'type': 'Argument', 'name': 'description', 'range': [88, 90], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'javascript', 'range': [93, 102], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [95, 97], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [96, 97], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [97, 102], 'children': [{'type': 'Argument', 'name': 'description', 'range': [99, 101], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'python', 'range': [104, 113], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [106, 108], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [107, 108], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [108, 113], 'children': [{'type': 'Argument', 'name': 'description', 'range': [110, 112], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'sql', 'range': [115, 124], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [117, 119], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [118, 119], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [119, 124], 'children': [{'type': 'Argument', 'name': 'description', 'range': [121, 123], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'java', 'range': [126, 135], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [128, 130], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [129, 130], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [130, 135], 'children': [{'type': 'Argument', 'name': 'description', 'range': [132, 134], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'cpp', 'range': [137, 146], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [139, 141], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [140, 141], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [141, 146], 'children': [{'type': 'Argument', 'name': 'description', 'range': [143, 145], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'csharp', 'range': [148, 157], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [150, 152], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [151, 152], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [152, 157], 'children': [{'type': 'Argument', 'name': 'description', 'range': [154, 156], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'json_code', 'range': [159, 168], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [161, 163], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [162, 163], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [163, 168], 'children': [{'type': 'Argument', 'name': 'description', 'range': [165, 167], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'bash', 'range': [170, 179], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [172, 174], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [173, 174], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [174, 179], 'children': [{'type': 'Argument', 'name': 'description', 'range': [176, 178], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'php', 'range': [181, 190], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [183, 185], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [184, 185], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [185, 190], 'children': [{'type': 'Argument', 'name': 'description', 'range': [187, 189], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'ruby', 'range': [192, 201], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [194, 196], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [195, 196], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [196, 201], 'children': [{'type': 'Argument', 'name': 'description', 'range': [198, 200], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'yaml', 'range': [203, 212], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [205, 207], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [206, 207], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [207, 212], 'children': [{'type': 'Argument', 'name': 'description', 'range': [209, 211], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'markdown', 'range': [214, 223], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [216, 218], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [217, 218], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [218, 223], 'children': [{'type': 'Argument', 'name': 'description', 'range': [220, 222], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'typescript', 'range': [225, 234], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [227, 229], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [228, 229], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [229, 234], 'children': [{'type': 'Argument', 'name': 'description', 'range': [231, 233], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'xml', 'range': [236, 245], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [238, 240], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [239, 240], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [240, 245], 'children': [{'type': 'Argument', 'name': 'description', 'range': [242, 244], 'children': []}]}]}]}, {'type': 'FieldDecl', 'name': 'remaining_text', 'range': [247, 258], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [249, 251], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [250, 251], 'children': [{'type': 'SchemaField', 'name': 'SchemaField', 'range': [251, 258], 'children': [{'type': 'Argument', 'name': 'description', 'range': [254, 256], 'children': []}]}]}]}]}, {'type': 'FunctionDecl', 'name': '__init__', 'range': [261, 348], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [264, 265], 'children': []}, {'type': 'SuperCall', 'name': 'super', 'range': [268, 273], 'children': []}, {'type': 'Assignment', 'name': '=', 'range': [276, 277], 'children': [{'type': 'Literal', 'name': '"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8"', 'range': [277, 278], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [281, 282], 'children': [{'type': 'Literal', 'name': '"Extracts code blocks from text and identifies their programming languages"', 'range': [282, 283], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [286, 287], 'children': [{'type': 'ObjectLiteral', 'name': '{BlockCategory.TEXT}', 'range': [287, 291], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [295, 296], 'children': [{'type': 'MemberExpression', 'name': 'CodeExtractionBlock.Input', 'range': [296, 298], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [302, 303], 'children': [{'type': 'MemberExpression', 'name': 'CodeExtractionBlock.Output', 'range': [303, 305], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [309, 310], 'children': [{'type': 'ObjectLiteral', 'name': '{"text": "Here\'s a Python example:\\n```python\\nprint(\'Hello World\')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```"}', 'range': [310, 316], 'children': []}]}, {'type': 'Assignment', 'name': '=', 'range': [320, 321], 'children': [{'type': 'ArrayLiteral', 'name': '[("html", "<h1>Title</h1>"), ("python", "print(\'Hello World\')"), ("remaining_text", "Here\'s a Python example:\\nAnd some HTML:")]', 'range': [321, 344], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'run', 'range': [350, 606], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [353, 354], 'children': []}, {'type': 'Parameter', 'name': 'input_data', 'range': [355, 357], 'children': [{'type': 'TypeAnnotation', 'name': 'Input', 'range': [357, 358], 'children': []}]}, {'type': 'Parameter', 'name': 'kwargs', 'range': [361, 362], 'children': []}, {'type': 'ReturnType', 'name': 'BlockOutput', 'range': [365, 366], 'children': []}, {'type': 'VariableDecl', 'name': 'language_aliases', 'range': [378, 518], 'children': [{'type': 'ObjectLiteral', 'name': '{"html": ["html", "htm"], "css": ["css"], "javascript": ["javascript", "js"], "python": ["python", "py"], "sql": ["sql"], "java": ["java"], "cpp": ["cpp", "c++"], "csharp": ["csharp", "c#", "cs"], "json_code": ["json"], "bash": ["bash", "shell", "sh"], "php": ["php"], "ruby": ["ruby", "rb"], "yaml": ["yaml", "yml"], "markdown": ["markdown", "md"], "typescript": ["typescript", "ts"], "xml": ["xml"]}', 'range': [380, 518], 'children': []}]}, {'type': 'ForStatement', 'name': 'for', 'range': [528, 596], 'children': [{'type': 'VariableDecl', 'name': 'canonical_name', 'range': [529, 530], 'children': []}, {'type': 'VariableDecl', 'name': 'aliases', 'range': [531, 532], 'children': []}, {'type': 'MemberExpression', 'name': 'language_aliases.items', 'range': [533, 535], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [538, 596], 'children': [{'type': 'VariableDecl', 'name': 'code', 'range': [540, 542], 'children': [{'type': 'Literal', 'name': '""', 'range': [542, 543], 'children': []}]}, {'type': 'ForStatement', 'name': 'for', 'range': [552, 586], 'children': [{'type': 'VariableDecl', 'name': 'alias', 'range': [553, 554], 'children': []}, {'type': 'MemberExpression', 'name': 'aliases', 'range': [555, 556], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [557, 586], 'children': [{'type': 'VariableDecl', 'name': 'code_for_alias', 'range': [558, 560], 'children': [{'type': 'MemberExpression', 'name': 'self.extract_code', 'range': [560, 562], 'children': []}, {'type': 'Argument', 'name': 'input_data.text', 'range': [564, 566], 'children': []}, {'type': 'Argument', 'name': 'alias', 'range': [568, 569], 'children': []}]}, {'type': 'IfStatement', 'name': 'if', 'range': [571, 586], 'children': [{'type': 'MemberExpression', 'name': 'code_for_alias', 'range': [572, 573], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [574, 586], 'children': [{'type': 'Assignment', 'name': '=', 'range': [575, 576], 'children': [{'type': 'BinaryExpression', 'name': '+', 'range': [577, 578], 'children': [{'type': 'MemberExpression', 'name': 'code', 'range': [577, 578], 'children': []}, {'type': 'Literal', 'name': '"\\n\\n"', 'range': [579, 580], 'children': []}]}, {'type': 'BinaryExpression', 'name': '+', 'range': [580, 581], 'children': [{'type': 'MemberExpression', 'name': 'code_for_alias', 'range': [580, 581], 'children': []}]}]}]}]}]}]}, {'type': 'IfStatement', 'name': 'if', 'range': [588, 596], 'children': [{'type': 'MemberExpression', 'name': 'code', 'range': [589, 590], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [591, 596], 'children': [{'type': 'YieldExpression', 'name': 'yield', 'range': [601, 604], 'children': [{'type': 'Literal', 'name': '"remaining_text"', 'range': [602, 603], 'children': []}, {'type': 'MemberExpression', 'name': 'remaining_text', 'range': [604, 605], 'children': []}]}]}]}]}]}]}, {'type': 'FunctionDecl', 'name': 'extract_code', 'range': [607, 731], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [610, 611], 'children': []}, {'type': 'Parameter', 'name': 'text', 'range': [612, 614], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [614, 615], 'children': []}]}, {'type': 'Parameter', 'name': 'language', 'range': [616, 618], 'children': [{'type': 'TypeAnnotation', 'name': 'str', 'range': [618, 619], 'children': []}]}, {'type': 'ReturnType', 'name': 'str', 'range': [622, 623], 'children': []}, {'type': 'VariableDecl', 'name': 'language', 'range': [635, 643], 'children': [{'type': 'MemberExpression', 'name': 're.escape', 'range': [637, 639], 'children': []}, {'type': 'Argument', 'name': 'language', 'range': [641, 642], 'children': []}]}, {'type': 'VariableDecl', 'name': 'pattern', 'range': [660, 676], 'children': [{'type': 'MemberExpression', 'name': 're.compile', 'range': [662, 664], 'children': []}, {'type': 'Argument', 'name': 'rf"```{language}\\s+(.*?)```"', 'range': [666, 667], 'children': []}, {'type': 'Argument', 'name': 're.DOTALL | re.IGNORECASE', 'range': [669, 675], 'children': []}]}, {'type': 'VariableDecl', 'name': 'matches', 'range': [678, 686], 'children': [{'type': 'MemberExpression', 'name': 'pattern.finditer', 'range': [680, 682], 'children': []}, {'type': 'Argument', 'name': 'text', 'range': [684, 685], 'children': []}]}, {'type': 'VariableDecl', 'name': 'code_blocks', 'range': [700, 717], 'children': [{'type': 'ArrayLiteral', 'name': '[match.group(1).strip() for match in matches]', 'range': [702, 717], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [719, 729], 'children': [{'type': 'ConditionalExpression', 'name': 'if', 'range': [726, 728], 'children': [{'type': 'MemberExpression', 'name': 'code_blocks', 'range': [727, 728], 'children': []}, {'type': 'Literal', 'name': '"\\n\\n"', 'range': [720, 721], 'children': []}, {'type': 'MemberExpression', 'name': 'code_blocks', 'range': [724, 725], 'children': []}, {'type': 'Literal', 'name': '""', 'range': [729, 730], 'children': []}]}]}]}]}
2025-01-08 10:35:48,637 - INFO - Completed main AST analysis flow
2025-01-08 10:35:48,638 - INFO - Successfully processed chunk
2025-01-08 10:35:48,684 - INFO - Starting code generation from AST
2025-01-08 10:36:12,118 - INFO - Successfully generated code from AST
2025-01-08 10:36:12,118 - INFO - Starting static code similarity comparison
2025-01-08 10:36:12,132 - INFO - Static similarity result: {'final_score': 97.86, 'length_similarity': 97.28, 'token_similarity': 96.77, 'structure_similarity': 96.94, 'function_similarity': 100, 'complexity_similarity': 100.0, 'variable_similarity': 100}
