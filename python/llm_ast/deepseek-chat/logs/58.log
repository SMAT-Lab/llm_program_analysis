2025-01-08 09:28:53,147 - INFO - Processing sample 58
2025-01-08 09:28:53,147 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:29:07,354 - INFO - Successfully split code into 3 top-level declarations
2025-01-08 09:29:07,358 - INFO - Processing chunk #0 (size=169 chars, start_index=0)
2025-01-08 09:29:07,362 - INFO - Processing chunk with 169 chars starting at index 0
2025-01-08 09:29:07,362 - INFO - Starting main AST analysis flow
2025-01-08 09:29:07,363 - INFO - Tokenized code into 37 tokens
2025-01-08 09:29:07,363 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:29:07,367 - INFO - Processing chunk #1 (size=177 chars, start_index=37)
2025-01-08 09:29:07,367 - INFO - Processing chunk with 177 chars starting at index 37
2025-01-08 09:29:07,367 - INFO - Starting main AST analysis flow
2025-01-08 09:29:07,368 - INFO - Tokenized code into 32 tokens
2025-01-08 09:29:07,368 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:29:07,369 - INFO - Processing chunk #2 (size=3553 chars, start_index=69)
2025-01-08 09:29:07,375 - INFO - Processing chunk with 3553 chars starting at index 69
2025-01-08 09:29:07,376 - INFO - Starting main AST analysis flow
2025-01-08 09:29:07,377 - INFO - Tokenized code into 546 tokens
2025-01-08 09:29:07,377 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:29:22,859 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 36], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 9], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [5, 9], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [11, 25], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [26, 34], 'children': []}]}
2025-01-08 09:29:22,859 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:29:24,646 - INFO - Step 1 result: {'type': 'Program', 'name': 'ComparisonOperator', 'range': [37, 68], 'children': [{'type': 'EnumDeclaration', 'name': 'EQUAL', 'range': [44, 46], 'children': []}, {'type': 'EnumDeclaration', 'name': 'NOT_EQUAL', 'range': [48, 50], 'children': []}, {'type': 'EnumDeclaration', 'name': 'GREATER_THAN', 'range': [52, 54], 'children': []}, {'type': 'EnumDeclaration', 'name': 'LESS_THAN', 'range': [56, 58], 'children': []}, {'type': 'EnumDeclaration', 'name': 'GREATER_THAN_OR_EQUAL', 'range': [60, 62], 'children': []}, {'type': 'EnumDeclaration', 'name': 'LESS_THAN_OR_EQUAL', 'range': [64, 66], 'children': []}]}
2025-01-08 09:29:24,646 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:29:34,009 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [69, 614], 'children': [{'type': 'ClassDeclaration', 'name': 'ConditionBlock', 'range': [69, 75], 'children': []}, {'type': 'ClassDeclaration', 'name': 'Input', 'range': [76, 82], 'children': []}, {'type': 'VariableDeclaration', 'name': 'value1', 'range': [83, 101], 'children': []}, {'type': 'VariableDeclaration', 'name': 'operator', 'range': [102, 120], 'children': []}, {'type': 'VariableDeclaration', 'name': 'value2', 'range': [121, 139], 'children': []}, {'type': 'VariableDeclaration', 'name': 'yes_value', 'range': [140, 163], 'children': []}, {'type': 'VariableDeclaration', 'name': 'no_value', 'range': [164, 187], 'children': []}, {'type': 'ClassDeclaration', 'name': 'Output', 'range': [189, 195], 'children': []}, {'type': 'VariableDeclaration', 'name': 'result', 'range': [196, 208], 'children': []}, {'type': 'VariableDeclaration', 'name': 'yes_output', 'range': [209, 221], 'children': []}, {'type': 'VariableDeclaration', 'name': 'no_output', 'range': [222, 234], 'children': []}, {'type': 'FunctionDeclaration', 'name': '__init__', 'range': [236, 341], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'run', 'range': [343, 614], 'children': []}]}
2025-01-08 09:29:34,009 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:29:50,243 - INFO - Step 2 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 9], 'children': [{'type': 'FromImport', 'name': 'enum', 'range': [0, 4], 'children': [{'type': 'Import', 'name': 'Enum', 'range': [2, 4], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [5, 9], 'children': [{'type': 'FromImport', 'name': 'typing', 'range': [5, 9], 'children': [{'type': 'Import', 'name': 'Any', 'range': [7, 9], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [11, 25], 'children': [{'type': 'FromImport', 'name': 'backend.data.block', 'range': [11, 25], 'children': [{'type': 'Import', 'name': 'Block', 'range': [17, 19], 'children': []}, {'type': 'Import', 'name': 'BlockCategory', 'range': [19, 21], 'children': []}, {'type': 'Import', 'name': 'BlockOutput', 'range': [21, 23], 'children': []}, {'type': 'Import', 'name': 'BlockSchema', 'range': [23, 25], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [26, 34], 'children': [{'type': 'FromImport', 'name': 'backend.data.model', 'range': [26, 34], 'children': [{'type': 'Import', 'name': 'SchemaField', 'range': [32, 34], 'children': []}]}]}]}
2025-01-08 09:29:50,244 - INFO - Starting Step 3: AST simplification
2025-01-08 09:29:53,969 - INFO - Step 2 result: {'type': 'Program', 'name': 'ComparisonOperator', 'range': [37, 68], 'children': [{'type': 'EnumDeclaration', 'name': 'EQUAL', 'range': [44, 46], 'children': [{'type': 'Assignment', 'name': '=', 'range': [45, 46], 'children': [{'type': 'StringLiteral', 'name': '"=="', 'range': [46, 46], 'children': []}]}]}, {'type': 'EnumDeclaration', 'name': 'NOT_EQUAL', 'range': [48, 50], 'children': [{'type': 'Assignment', 'name': '=', 'range': [49, 50], 'children': [{'type': 'StringLiteral', 'name': '"!="', 'range': [50, 50], 'children': []}]}]}, {'type': 'EnumDeclaration', 'name': 'GREATER_THAN', 'range': [52, 54], 'children': [{'type': 'Assignment', 'name': '=', 'range': [53, 54], 'children': [{'type': 'StringLiteral', 'name': '">"', 'range': [54, 54], 'children': []}]}]}, {'type': 'EnumDeclaration', 'name': 'LESS_THAN', 'range': [56, 58], 'children': [{'type': 'Assignment', 'name': '=', 'range': [57, 58], 'children': [{'type': 'StringLiteral', 'name': '"<"', 'range': [58, 58], 'children': []}]}]}, {'type': 'EnumDeclaration', 'name': 'GREATER_THAN_OR_EQUAL', 'range': [60, 62], 'children': [{'type': 'Assignment', 'name': '=', 'range': [61, 62], 'children': [{'type': 'StringLiteral', 'name': '">="', 'range': [62, 62], 'children': []}]}]}, {'type': 'EnumDeclaration', 'name': 'LESS_THAN_OR_EQUAL', 'range': [64, 66], 'children': [{'type': 'Assignment', 'name': '=', 'range': [65, 66], 'children': [{'type': 'StringLiteral', 'name': '"<="', 'range': [66, 66], 'children': []}]}]}]}
2025-01-08 09:29:53,969 - INFO - Starting Step 3: AST simplification
2025-01-08 09:30:11,267 - INFO - Step 3 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 4], 'children': [{'type': 'FromImport', 'name': 'enum', 'range': [0, 4], 'children': [{'type': 'Import', 'name': 'Enum', 'range': [2, 4], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [5, 9], 'children': [{'type': 'FromImport', 'name': 'typing', 'range': [5, 9], 'children': [{'type': 'Import', 'name': 'Any', 'range': [7, 9], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [11, 25], 'children': [{'type': 'FromImport', 'name': 'backend.data.block', 'range': [11, 25], 'children': [{'type': 'Import', 'name': 'Block', 'range': [17, 19], 'children': []}, {'type': 'Import', 'name': 'BlockCategory', 'range': [19, 21], 'children': []}, {'type': 'Import', 'name': 'BlockOutput', 'range': [21, 23], 'children': []}, {'type': 'Import', 'name': 'BlockSchema', 'range': [23, 25], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [26, 34], 'children': [{'type': 'FromImport', 'name': 'backend.data.model', 'range': [26, 34], 'children': [{'type': 'Import', 'name': 'SchemaField', 'range': [32, 34], 'children': []}]}]}]}
2025-01-08 09:30:11,267 - INFO - Starting Step 4: AST normalization
2025-01-08 09:30:15,777 - INFO - Step 3 result: {'type': 'Program', 'name': 'ComparisonOperator', 'range': [37, 68], 'children': [{'type': 'EnumDeclaration', 'name': 'EQUAL', 'range': [44, 46], 'children': [{'type': 'StringLiteral', 'name': '"=="', 'range': [46, 46], 'children': []}]}, {'type': 'EnumDeclaration', 'name': 'NOT_EQUAL', 'range': [48, 50], 'children': [{'type': 'StringLiteral', 'name': '"!="', 'range': [50, 50], 'children': []}]}, {'type': 'EnumDeclaration', 'name': 'GREATER_THAN', 'range': [52, 54], 'children': [{'type': 'StringLiteral', 'name': '">"', 'range': [54, 54], 'children': []}]}, {'type': 'EnumDeclaration', 'name': 'LESS_THAN', 'range': [56, 58], 'children': [{'type': 'StringLiteral', 'name': '"<"', 'range': [58, 58], 'children': []}]}, {'type': 'EnumDeclaration', 'name': 'GREATER_THAN_OR_EQUAL', 'range': [60, 62], 'children': [{'type': 'StringLiteral', 'name': '">="', 'range': [62, 62], 'children': []}]}, {'type': 'EnumDeclaration', 'name': 'LESS_THAN_OR_EQUAL', 'range': [64, 66], 'children': [{'type': 'StringLiteral', 'name': '"<="', 'range': [66, 66], 'children': []}]}]}
2025-01-08 09:30:15,777 - INFO - Starting Step 4: AST normalization
2025-01-08 09:30:33,707 - INFO - Step 4 result: {'type': 'Program', 'name': 'ComparisonOperator', 'range': [37, 68], 'children': [{'type': 'EnumMember', 'name': 'EQUAL', 'range': [44, 46], 'children': [{'type': 'Literal', 'name': '"=="', 'range': [46, 46], 'children': []}]}, {'type': 'EnumMember', 'name': 'NOT_EQUAL', 'range': [48, 50], 'children': [{'type': 'Literal', 'name': '"!="', 'range': [50, 50], 'children': []}]}, {'type': 'EnumMember', 'name': 'GREATER_THAN', 'range': [52, 54], 'children': [{'type': 'Literal', 'name': '">"', 'range': [54, 54], 'children': []}]}, {'type': 'EnumMember', 'name': 'LESS_THAN', 'range': [56, 58], 'children': [{'type': 'Literal', 'name': '"<"', 'range': [58, 58], 'children': []}]}, {'type': 'EnumMember', 'name': 'GREATER_THAN_OR_EQUAL', 'range': [60, 62], 'children': [{'type': 'Literal', 'name': '">="', 'range': [62, 62], 'children': []}]}, {'type': 'EnumMember', 'name': 'LESS_THAN_OR_EQUAL', 'range': [64, 66], 'children': [{'type': 'Literal', 'name': '"<="', 'range': [66, 66], 'children': []}]}]}
2025-01-08 09:30:33,708 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:30:36,281 - INFO - Step 4 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 4], 'children': [{'type': 'FromImport', 'name': 'enum', 'range': [0, 4], 'children': [{'type': 'Import', 'name': 'Enum', 'range': [2, 4], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [5, 9], 'children': [{'type': 'FromImport', 'name': 'typing', 'range': [5, 9], 'children': [{'type': 'Import', 'name': 'Any', 'range': [7, 9], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [11, 25], 'children': [{'type': 'FromImport', 'name': 'backend.data.block', 'range': [11, 25], 'children': [{'type': 'Import', 'name': 'Block', 'range': [17, 19], 'children': []}, {'type': 'Import', 'name': 'BlockCategory', 'range': [19, 21], 'children': []}, {'type': 'Import', 'name': 'BlockOutput', 'range': [21, 23], 'children': []}, {'type': 'Import', 'name': 'BlockSchema', 'range': [23, 25], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [26, 34], 'children': [{'type': 'FromImport', 'name': 'backend.data.model', 'range': [26, 34], 'children': [{'type': 'Import', 'name': 'SchemaField', 'range': [32, 34], 'children': []}]}]}]}
2025-01-08 09:30:36,281 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:30:57,156 - INFO - Step 5 result: {'type': 'Program', 'name': 'ComparisonOperator', 'range': [37, 68], 'children': [{'type': 'EnumMember', 'name': 'EQUAL', 'range': [44, 46], 'children': [{'type': 'Literal', 'name': '"=="', 'range': [46, 46], 'children': []}]}, {'type': 'EnumMember', 'name': 'NOT_EQUAL', 'range': [48, 50], 'children': [{'type': 'Literal', 'name': '"!="', 'range': [50, 50], 'children': []}]}, {'type': 'EnumMember', 'name': 'GREATER_THAN', 'range': [52, 54], 'children': [{'type': 'Literal', 'name': '">"', 'range': [54, 54], 'children': []}]}, {'type': 'EnumMember', 'name': 'LESS_THAN', 'range': [56, 58], 'children': [{'type': 'Literal', 'name': '"<"', 'range': [58, 58], 'children': []}]}, {'type': 'EnumMember', 'name': 'GREATER_THAN_OR_EQUAL', 'range': [60, 62], 'children': [{'type': 'Literal', 'name': '">="', 'range': [62, 62], 'children': []}]}, {'type': 'EnumMember', 'name': 'LESS_THAN_OR_EQUAL', 'range': [64, 66], 'children': [{'type': 'Literal', 'name': '"<="', 'range': [66, 66], 'children': []}]}]}
2025-01-08 09:30:57,157 - INFO - Completed main AST analysis flow
2025-01-08 09:30:57,157 - INFO - Successfully processed chunk
2025-01-08 09:31:00,856 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainOrSomething', 'range': [0, 34], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 4], 'children': [{'type': 'FromImport', 'name': 'enum', 'range': [0, 4], 'children': [{'type': 'Import', 'name': 'Enum', 'range': [2, 4], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [5, 9], 'children': [{'type': 'FromImport', 'name': 'typing', 'range': [5, 9], 'children': [{'type': 'Import', 'name': 'Any', 'range': [7, 9], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [11, 25], 'children': [{'type': 'FromImport', 'name': 'backend.data.block', 'range': [11, 25], 'children': [{'type': 'Import', 'name': 'Block', 'range': [17, 19], 'children': []}, {'type': 'Import', 'name': 'BlockCategory', 'range': [19, 21], 'children': []}, {'type': 'Import', 'name': 'BlockOutput', 'range': [21, 23], 'children': []}, {'type': 'Import', 'name': 'BlockSchema', 'range': [23, 25], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [26, 34], 'children': [{'type': 'FromImport', 'name': 'backend.data.model', 'range': [26, 34], 'children': [{'type': 'Import', 'name': 'SchemaField', 'range': [32, 34], 'children': []}]}]}]}]}
2025-01-08 09:31:00,856 - INFO - Completed main AST analysis flow
2025-01-08 09:31:00,857 - INFO - Successfully processed chunk
2025-01-08 09:33:40,602 - ERROR - Failed to parse Step 2 result
2025-01-08 09:33:40,603 - INFO - Starting Step 3: AST simplification
2025-01-08 09:36:31,025 - INFO - Step 3 result: {'type': 'Program', 'children': [{'type': 'ClassDeclaration', 'name': 'ConditionBlock', 'range': [69, 74], 'children': [{'type': 'ClassBody', 'children': [{'type': 'ClassDeclaration', 'name': 'Input', 'range': [76, 81], 'children': [{'type': 'ClassBody', 'children': [{'type': 'FieldDefinition', 'name': 'value1', 'range': [83, 100], 'children': [{'type': 'SchemaField', 'range': [87, 100]}]}, {'type': 'FieldDefinition', 'name': 'operator', 'range': [102, 119], 'children': [{'type': 'SchemaField', 'range': [106, 119]}]}, {'type': 'FieldDefinition', 'name': 'value2', 'range': [121, 138], 'children': [{'type': 'SchemaField', 'range': [125, 138]}]}, {'type': 'FieldDefinition', 'name': 'yes_value', 'range': [140, 162], 'children': [{'type': 'SchemaField', 'range': [144, 162]}]}, {'type': 'FieldDefinition', 'name': 'no_value', 'range': [164, 186], 'children': [{'type': 'SchemaField', 'range': [168, 186]}]}]}]}, {'type': 'ClassDeclaration', 'name': 'Output', 'range': [189, 194], 'children': [{'type': 'ClassBody', 'children': [{'type': 'FieldDefinition', 'name': 'result', 'range': [196, 207], 'children': [{'type': 'SchemaField', 'range': [200, 207]}]}, {'type': 'FieldDefinition', 'name': 'yes_output', 'range': [209, 220], 'children': [{'type': 'SchemaField', 'range': [213, 220]}]}, {'type': 'FieldDefinition', 'name': 'no_output', 'range': [222, 233], 'children': [{'type': 'SchemaField', 'range': [226, 233]}]}]}]}]}]}, {'type': 'FunctionDeclaration', 'name': '__init__', 'range': [236, 341], 'children': [{'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [243, 340], 'children': [{'type': 'CallExpression', 'range': [243, 340], 'children': [{'type': 'MemberExpression', 'range': [243, 247], 'children': [{'type': 'Identifier', 'name': 'super', 'range': [243, 247]}]}, {'type': 'Identifier', 'name': '__init__', 'range': [247, 248]}, {'type': 'ObjectExpression', 'range': [249, 340], 'children': [{'type': 'Property', 'key': 'id', 'value': '715696a0-e1da-45c8-b209-c2fa9c3b0be6', 'range': [250, 253]}, {'type': 'Property', 'key': 'input_schema', 'value': 'ConditionBlock.Input', 'range': [255, 260]}, {'type': 'Property', 'key': 'output_schema', 'value': 'ConditionBlock.Output', 'range': [262, 267]}, {'type': 'Property', 'key': 'description', 'value': 'Handles conditional logic based on comparison operators', 'range': [269, 272]}, {'type': 'Property', 'key': 'categories', 'value': '{BlockCategory.LOGIC}', 'range': [274, 281]}, {'type': 'Property', 'key': 'test_input', 'value': {'value1': 10, 'operator': 'ComparisonOperator.GREATER_THAN.value', 'value2': 5, 'yes_value': 'Greater', 'no_value': 'Not greater'}, 'range': [283, 317]}, {'type': 'Property', 'key': 'test_output', 'value': [['result', True], ['yes_output', 'Greater']], 'range': [319, 338]}]}]}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'run', 'range': [343, 614], 'children': [{'type': 'BlockStatement', 'children': [{'type': 'VariableDeclaration', 'range': [361, 366], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'operator', 'range': [361, 366]}, 'init': {'type': 'MemberExpression', 'range': [363, 366], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [363, 366]}]}}]}, {'type': 'VariableDeclaration', 'range': [368, 408], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'value1', 'range': [368, 373]}, 'init': {'type': 'MemberExpression', 'range': [370, 373], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [370, 373]}]}}]}, {'type': 'IfStatement', 'range': [374, 408], 'children': [{'type': 'CallExpression', 'range': [375, 380], 'children': [{'type': 'Identifier', 'name': 'isinstance', 'range': [375, 380]}, {'type': 'Identifier', 'name': 'value1', 'range': [377, 380]}, {'type': 'Identifier', 'name': 'str', 'range': [379, 380]}]}, {'type': 'BlockStatement', 'children': [{'type': 'TryStatement', 'range': [383, 408], 'children': [{'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [386, 396], 'children': [{'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'value1', 'range': [386, 396]}, 'right': {'type': 'CallExpression', 'range': [388, 396], 'children': [{'type': 'Identifier', 'name': 'float', 'range': [388, 396]}, {'type': 'CallExpression', 'range': [390, 396], 'children': [{'type': 'MemberExpression', 'range': [390, 396], 'children': [{'type': 'Identifier', 'name': 'value1', 'range': [390, 396]}]}]}]}}]}]}, {'type': 'CatchClause', 'param': {'type': 'Identifier', 'name': 'ValueError', 'range': [398, 399]}, 'body': {'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [401, 408], 'children': [{'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'value1', 'range': [401, 408]}, 'right': {'type': 'CallExpression', 'range': [403, 408], 'children': [{'type': 'MemberExpression', 'range': [403, 408], 'children': [{'type': 'Identifier', 'name': 'value1', 'range': [403, 408]}]}]}}]}]}}]}]}]}, {'type': 'VariableDeclaration', 'range': [410, 450], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'value2', 'range': [410, 415]}, 'init': {'type': 'MemberExpression', 'range': [412, 415], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [412, 415]}]}}]}, {'type': 'IfStatement', 'range': [416, 450], 'children': [{'type': 'CallExpression', 'range': [417, 422], 'children': [{'type': 'Identifier', 'name': 'isinstance', 'range': [417, 422]}, {'type': 'Identifier', 'name': 'value2', 'range': [419, 422]}, {'type': 'Identifier', 'name': 'str', 'range': [421, 422]}]}, {'type': 'BlockStatement', 'children': [{'type': 'TryStatement', 'range': [425, 450], 'children': [{'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [428, 438], 'children': [{'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'value2', 'range': [428, 438]}, 'right': {'type': 'CallExpression', 'range': [430, 438], 'children': [{'type': 'Identifier', 'name': 'float', 'range': [430, 438]}, {'type': 'CallExpression', 'range': [432, 438], 'children': [{'type': 'MemberExpression', 'range': [432, 438], 'children': [{'type': 'Identifier', 'name': 'value2', 'range': [432, 438]}]}]}]}}]}]}, {'type': 'CatchClause', 'param': {'type': 'Identifier', 'name': 'ValueError', 'range': [440, 441]}, 'body': {'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [443, 450], 'children': [{'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'value2', 'range': [443, 450]}, 'right': {'type': 'CallExpression', 'range': [445, 450], 'children': [{'type': 'MemberExpression', 'range': [445, 450], 'children': [{'type': 'Identifier', 'name': 'value2', 'range': [445, 450]}]}]}}]}]}}]}]}]}, {'type': 'VariableDeclaration', 'range': [452, 466], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'yes_value', 'range': [452, 457]}, 'init': {'type': 'ConditionalExpression', 'test': {'type': 'BinaryExpression', 'operator': 'is not', 'left': {'type': 'MemberExpression', 'range': [458, 463], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [458, 463]}]}, 'right': {'type': 'Identifier', 'name': 'None', 'range': [462, 463]}}, 'consequent': {'type': 'MemberExpression', 'range': [458, 463], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [458, 463]}]}, 'alternate': {'type': 'Identifier', 'name': 'value1', 'range': [465, 466]}}}]}, {'type': 'VariableDeclaration', 'range': [467, 481], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'no_value', 'range': [467, 472]}, 'init': {'type': 'ConditionalExpression', 'test': {'type': 'BinaryExpression', 'operator': 'is not', 'left': {'type': 'MemberExpression', 'range': [473, 478], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [473, 478]}]}, 'right': {'type': 'Identifier', 'name': 'None', 'range': [477, 478]}}, 'consequent': {'type': 'MemberExpression', 'range': [473, 478], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [473, 478]}]}, 'alternate': {'type': 'Identifier', 'name': 'value2', 'range': [480, 481]}}}]}, {'type': 'VariableDeclaration', 'range': [483, 575], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'comparison_funcs', 'range': [483, 484]}, 'init': {'type': 'ObjectExpression', 'range': [485, 575], 'children': [{'type': 'Property', 'key': 'ComparisonOperator.EQUAL', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [492, 493]}, {'type': 'Identifier', 'name': 'b', 'range': [494, 495]}], 'body': {'type': 'BinaryExpression', 'operator': '==', 'left': {'type': 'Identifier', 'name': 'a', 'range': [496, 497]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [498, 499]}}}, 'range': [487, 500]}, {'type': 'Property', 'key': 'ComparisonOperator.NOT_EQUAL', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [507, 508]}, {'type': 'Identifier', 'name': 'b', 'range': [509, 510]}], 'body': {'type': 'BinaryExpression', 'operator': '!=', 'left': {'type': 'Identifier', 'name': 'a', 'range': [511, 512]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [513, 514]}}}, 'range': [502, 515]}, {'type': 'Property', 'key': 'ComparisonOperator.GREATER_THAN', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [522, 523]}, {'type': 'Identifier', 'name': 'b', 'range': [524, 525]}], 'body': {'type': 'BinaryExpression', 'operator': '>', 'left': {'type': 'Identifier', 'name': 'a', 'range': [526, 527]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [528, 529]}}}, 'range': [517, 530]}, {'type': 'Property', 'key': 'ComparisonOperator.LESS_THAN', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [536, 537]}, {'type': 'Identifier', 'name': 'b', 'range': [538, 539]}], 'body': {'type': 'BinaryExpression', 'operator': '<', 'left': {'type': 'Identifier', 'name': 'a', 'range': [540, 541]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [542, 543]}}}, 'range': [532, 544]}, {'type': 'Property', 'key': 'ComparisonOperator.GREATER_THAN_OR_EQUAL', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [550, 551]}, {'type': 'Identifier', 'name': 'b', 'range': [552, 553]}], 'body': {'type': 'BinaryExpression', 'operator': '>=', 'left': {'type': 'Identifier', 'name': 'a', 'range': [554, 555]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [556, 557]}}}, 'range': [546, 558]}, {'type': 'Property', 'key': 'ComparisonOperator.LESS_THAN_OR_EQUAL', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [564, 565]}, {'type': 'Identifier', 'name': 'b', 'range': [566, 567]}], 'body': {'type': 'BinaryExpression', 'operator': '<=', 'left': {'type': 'Identifier', 'name': 'a', 'range': [568, 569]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [570, 571]}}}, 'range': [560, 573]}]}}]}, {'type': 'VariableDeclaration', 'range': [578, 589], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'result', 'range': [578, 579]}, 'init': {'type': 'CallExpression', 'range': [580, 589], 'children': [{'type': 'MemberExpression', 'range': [580, 583], 'children': [{'type': 'Identifier', 'name': 'comparison_funcs', 'range': [580, 583]}]}, {'type': 'Identifier', 'name': 'operator', 'range': [582, 583]}, {'type': 'Identifier', 'name': 'value1', 'range': [585, 586]}, {'type': 'Identifier', 'name': 'value2', 'range': [587, 588]}]}}]}, {'type': 'ExpressionStatement', 'range': [591, 595], 'children': [{'type': 'YieldExpression', 'argument': {'type': 'ArrayExpression', 'elements': [{'type': 'Literal', 'value': 'result', 'range': [592, 593]}, {'type': 'Identifier', 'name': 'result', 'range': [594, 595]}]}}]}, {'type': 'IfStatement', 'range': [597, 613], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [598, 599]}, {'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [601, 605], 'children': [{'type': 'YieldExpression', 'argument': {'type': 'ArrayExpression', 'elements': [{'type': 'Literal', 'value': 'yes_output', 'range': [602, 603]}, {'type': 'Identifier', 'name': 'yes_value', 'range': [604, 605]}]}}]}]}, {'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [609, 613], 'children': [{'type': 'YieldExpression', 'argument': {'type': 'ArrayExpression', 'elements': [{'type': 'Literal', 'value': 'no_output', 'range': [610, 611]}, {'type': 'Identifier', 'name': 'no_value', 'range': [612, 613]}]}}]}]}]}]}]}]}
2025-01-08 09:36:31,026 - INFO - Starting Step 4: AST normalization
2025-01-08 09:39:11,990 - INFO - Step 4 result: {'type': 'Program', 'children': [{'type': 'ClassDecl', 'name': 'ConditionBlock', 'range': [69, 74], 'children': [{'type': 'ClassBody', 'children': [{'type': 'ClassDecl', 'name': 'Input', 'range': [76, 81], 'children': [{'type': 'ClassBody', 'children': [{'type': 'FieldDefinition', 'name': 'value1', 'range': [83, 100], 'children': [{'type': 'SchemaField', 'range': [87, 100]}]}, {'type': 'FieldDefinition', 'name': 'operator', 'range': [102, 119], 'children': [{'type': 'SchemaField', 'range': [106, 119]}]}, {'type': 'FieldDefinition', 'name': 'value2', 'range': [121, 138], 'children': [{'type': 'SchemaField', 'range': [125, 138]}]}, {'type': 'FieldDefinition', 'name': 'yes_value', 'range': [140, 162], 'children': [{'type': 'SchemaField', 'range': [144, 162]}]}, {'type': 'FieldDefinition', 'name': 'no_value', 'range': [164, 186], 'children': [{'type': 'SchemaField', 'range': [168, 186]}]}]}]}, {'type': 'ClassDecl', 'name': 'Output', 'range': [189, 194], 'children': [{'type': 'ClassBody', 'children': [{'type': 'FieldDefinition', 'name': 'result', 'range': [196, 207], 'children': [{'type': 'SchemaField', 'range': [200, 207]}]}, {'type': 'FieldDefinition', 'name': 'yes_output', 'range': [209, 220], 'children': [{'type': 'SchemaField', 'range': [213, 220]}]}, {'type': 'FieldDefinition', 'name': 'no_output', 'range': [222, 233], 'children': [{'type': 'SchemaField', 'range': [226, 233]}]}]}]}]}]}, {'type': 'FunctionDecl', 'name': '__init__', 'range': [236, 341], 'children': [{'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [243, 340], 'children': [{'type': 'CallExpression', 'range': [243, 340], 'children': [{'type': 'MemberExpression', 'range': [243, 247], 'children': [{'type': 'Identifier', 'name': 'super', 'range': [243, 247]}]}, {'type': 'Identifier', 'name': '__init__', 'range': [247, 248]}, {'type': 'ObjectExpression', 'range': [249, 340], 'children': [{'type': 'Property', 'key': 'id', 'value': '715696a0-e1da-45c8-b209-c2fa9c3b0be6', 'range': [250, 253]}, {'type': 'Property', 'key': 'input_schema', 'value': 'ConditionBlock.Input', 'range': [255, 260]}, {'type': 'Property', 'key': 'output_schema', 'value': 'ConditionBlock.Output', 'range': [262, 267]}, {'type': 'Property', 'key': 'description', 'value': 'Handles conditional logic based on comparison operators', 'range': [269, 272]}, {'type': 'Property', 'key': 'categories', 'value': '{BlockCategory.LOGIC}', 'range': [274, 281]}, {'type': 'Property', 'key': 'test_input', 'value': {'value1': 10, 'operator': 'ComparisonOperator.GREATER_THAN.value', 'value2': 5, 'yes_value': 'Greater', 'no_value': 'Not greater'}, 'range': [283, 317]}, {'type': 'Property', 'key': 'test_output', 'value': [['result', True], ['yes_output', 'Greater']], 'range': [319, 338]}]}]}]}]}]}, {'type': 'FunctionDecl', 'name': 'run', 'range': [343, 614], 'children': [{'type': 'BlockStatement', 'children': [{'type': 'VariableDeclaration', 'range': [361, 366], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'operator', 'range': [361, 366]}, 'init': {'type': 'MemberExpression', 'range': [363, 366], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [363, 366]}]}}]}, {'type': 'VariableDeclaration', 'range': [368, 408], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'value1', 'range': [368, 373]}, 'init': {'type': 'MemberExpression', 'range': [370, 373], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [370, 373]}]}}]}, {'type': 'IfStatement', 'range': [374, 408], 'children': [{'type': 'CallExpression', 'range': [375, 380], 'children': [{'type': 'Identifier', 'name': 'isinstance', 'range': [375, 380]}, {'type': 'Identifier', 'name': 'value1', 'range': [377, 380]}, {'type': 'Identifier', 'name': 'str', 'range': [379, 380]}]}, {'type': 'BlockStatement', 'children': [{'type': 'TryStatement', 'range': [383, 408], 'children': [{'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [386, 396], 'children': [{'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'value1', 'range': [386, 396]}, 'right': {'type': 'CallExpression', 'range': [388, 396], 'children': [{'type': 'Identifier', 'name': 'float', 'range': [388, 396]}, {'type': 'CallExpression', 'range': [390, 396], 'children': [{'type': 'MemberExpression', 'range': [390, 396], 'children': [{'type': 'Identifier', 'name': 'value1', 'range': [390, 396]}]}]}]}}]}]}, {'type': 'CatchClause', 'param': {'type': 'Identifier', 'name': 'ValueError', 'range': [398, 399]}, 'body': {'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [401, 408], 'children': [{'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'value1', 'range': [401, 408]}, 'right': {'type': 'CallExpression', 'range': [403, 408], 'children': [{'type': 'MemberExpression', 'range': [403, 408], 'children': [{'type': 'Identifier', 'name': 'value1', 'range': [403, 408]}]}]}}]}]}}]}]}]}, {'type': 'VariableDeclaration', 'range': [410, 450], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'value2', 'range': [410, 415]}, 'init': {'type': 'MemberExpression', 'range': [412, 415], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [412, 415]}]}}]}, {'type': 'IfStatement', 'range': [416, 450], 'children': [{'type': 'CallExpression', 'range': [417, 422], 'children': [{'type': 'Identifier', 'name': 'isinstance', 'range': [417, 422]}, {'type': 'Identifier', 'name': 'value2', 'range': [419, 422]}, {'type': 'Identifier', 'name': 'str', 'range': [421, 422]}]}, {'type': 'BlockStatement', 'children': [{'type': 'TryStatement', 'range': [425, 450], 'children': [{'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [428, 438], 'children': [{'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'value2', 'range': [428, 438]}, 'right': {'type': 'CallExpression', 'range': [430, 438], 'children': [{'type': 'Identifier', 'name': 'float', 'range': [430, 438]}, {'type': 'CallExpression', 'range': [432, 438], 'children': [{'type': 'MemberExpression', 'range': [432, 438], 'children': [{'type': 'Identifier', 'name': 'value2', 'range': [432, 438]}]}]}]}}]}]}, {'type': 'CatchClause', 'param': {'type': 'Identifier', 'name': 'ValueError', 'range': [440, 441]}, 'body': {'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [443, 450], 'children': [{'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'value2', 'range': [443, 450]}, 'right': {'type': 'CallExpression', 'range': [445, 450], 'children': [{'type': 'MemberExpression', 'range': [445, 450], 'children': [{'type': 'Identifier', 'name': 'value2', 'range': [445, 450]}]}]}}]}]}}]}]}]}, {'type': 'VariableDeclaration', 'range': [452, 466], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'yes_value', 'range': [452, 457]}, 'init': {'type': 'ConditionalExpression', 'test': {'type': 'BinaryExpression', 'operator': 'is not', 'left': {'type': 'MemberExpression', 'range': [458, 463], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [458, 463]}]}, 'right': {'type': 'Identifier', 'name': 'None', 'range': [462, 463]}}, 'consequent': {'type': 'MemberExpression', 'range': [458, 463], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [458, 463]}]}, 'alternate': {'type': 'Identifier', 'name': 'value1', 'range': [465, 466]}}}]}, {'type': 'VariableDeclaration', 'range': [467, 481], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'no_value', 'range': [467, 472]}, 'init': {'type': 'ConditionalExpression', 'test': {'type': 'BinaryExpression', 'operator': 'is not', 'left': {'type': 'MemberExpression', 'range': [473, 478], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [473, 478]}]}, 'right': {'type': 'Identifier', 'name': 'None', 'range': [477, 478]}}, 'consequent': {'type': 'MemberExpression', 'range': [473, 478], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [473, 478]}]}, 'alternate': {'type': 'Identifier', 'name': 'value2', 'range': [480, 481]}}}]}, {'type': 'VariableDeclaration', 'range': [483, 575], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'comparison_funcs', 'range': [483, 484]}, 'init': {'type': 'ObjectExpression', 'range': [485, 575], 'children': [{'type': 'Property', 'key': 'ComparisonOperator.EQUAL', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [492, 493]}, {'type': 'Identifier', 'name': 'b', 'range': [494, 495]}], 'body': {'type': 'BinaryExpression', 'operator': '==', 'left': {'type': 'Identifier', 'name': 'a', 'range': [496, 497]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [498, 499]}}}, 'range': [487, 500]}, {'type': 'Property', 'key': 'ComparisonOperator.NOT_EQUAL', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [507, 508]}, {'type': 'Identifier', 'name': 'b', 'range': [509, 510]}], 'body': {'type': 'BinaryExpression', 'operator': '!=', 'left': {'type': 'Identifier', 'name': 'a', 'range': [511, 512]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [513, 514]}}}, 'range': [502, 515]}, {'type': 'Property', 'key': 'ComparisonOperator.GREATER_THAN', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [522, 523]}, {'type': 'Identifier', 'name': 'b', 'range': [524, 525]}], 'body': {'type': 'BinaryExpression', 'operator': '>', 'left': {'type': 'Identifier', 'name': 'a', 'range': [526, 527]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [528, 529]}}}, 'range': [517, 530]}, {'type': 'Property', 'key': 'ComparisonOperator.LESS_THAN', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [536, 537]}, {'type': 'Identifier', 'name': 'b', 'range': [538, 539]}], 'body': {'type': 'BinaryExpression', 'operator': '<', 'left': {'type': 'Identifier', 'name': 'a', 'range': [540, 541]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [542, 543]}}}, 'range': [532, 544]}, {'type': 'Property', 'key': 'ComparisonOperator.GREATER_THAN_OR_EQUAL', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [550, 551]}, {'type': 'Identifier', 'name': 'b', 'range': [552, 553]}], 'body': {'type': 'BinaryExpression', 'operator': '>=', 'left': {'type': 'Identifier', 'name': 'a', 'range': [554, 555]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [556, 557]}}}, 'range': [546, 558]}, {'type': 'Property', 'key': 'ComparisonOperator.LESS_THAN_OR_EQUAL', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [564, 565]}, {'type': 'Identifier', 'name': 'b', 'range': [566, 567]}], 'body': {'type': 'BinaryExpression', 'operator': '<=', 'left': {'type': 'Identifier', 'name': 'a', 'range': [568, 569]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [570, 571]}}}, 'range': [560, 573]}]}}]}, {'type': 'VariableDeclaration', 'range': [578, 589], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'result', 'range': [578, 579]}, 'init': {'type': 'CallExpression', 'range': [580, 589], 'children': [{'type': 'MemberExpression', 'range': [580, 583], 'children': [{'type': 'Identifier', 'name': 'comparison_funcs', 'range': [580, 583]}]}, {'type': 'Identifier', 'name': 'operator', 'range': [582, 583]}, {'type': 'Identifier', 'name': 'value1', 'range': [585, 586]}, {'type': 'Identifier', 'name': 'value2', 'range': [587, 588]}]}}]}, {'type': 'ExpressionStatement', 'range': [591, 595], 'children': [{'type': 'YieldExpression', 'argument': {'type': 'ArrayExpression', 'elements': [{'type': 'Literal', 'value': 'result', 'range': [592, 593]}, {'type': 'Identifier', 'name': 'result', 'range': [594, 595]}]}}]}, {'type': 'IfStatement', 'range': [597, 613], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [598, 599]}, {'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [601, 605], 'children': [{'type': 'YieldExpression', 'argument': {'type': 'ArrayExpression', 'elements': [{'type': 'Literal', 'value': 'yes_output', 'range': [602, 603]}, {'type': 'Identifier', 'name': 'yes_value', 'range': [604, 605]}]}}]}]}, {'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [609, 613], 'children': [{'type': 'YieldExpression', 'argument': {'type': 'ArrayExpression', 'elements': [{'type': 'Literal', 'value': 'no_output', 'range': [610, 611]}, {'type': 'Identifier', 'name': 'no_value', 'range': [612, 613]}]}}]}]}]}]}]}]}
2025-01-08 09:39:11,990 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:41:18,083 - INFO - Step 5 result: {'type': 'Program', 'name': 'ConditionBlock', 'range': [69, 614], 'children': [{'type': 'ClassDecl', 'name': 'ConditionBlock', 'range': [69, 74], 'children': [{'type': 'ClassBody', 'children': [{'type': 'ClassDecl', 'name': 'Input', 'range': [76, 81], 'children': [{'type': 'ClassBody', 'children': [{'type': 'FieldDefinition', 'name': 'value1', 'range': [83, 100], 'children': [{'type': 'SchemaField', 'range': [87, 100]}]}, {'type': 'FieldDefinition', 'name': 'operator', 'range': [102, 119], 'children': [{'type': 'SchemaField', 'range': [106, 119]}]}, {'type': 'FieldDefinition', 'name': 'value2', 'range': [121, 138], 'children': [{'type': 'SchemaField', 'range': [125, 138]}]}, {'type': 'FieldDefinition', 'name': 'yes_value', 'range': [140, 162], 'children': [{'type': 'SchemaField', 'range': [144, 162]}]}, {'type': 'FieldDefinition', 'name': 'no_value', 'range': [164, 186], 'children': [{'type': 'SchemaField', 'range': [168, 186]}]}]}]}, {'type': 'ClassDecl', 'name': 'Output', 'range': [189, 194], 'children': [{'type': 'ClassBody', 'children': [{'type': 'FieldDefinition', 'name': 'result', 'range': [196, 207], 'children': [{'type': 'SchemaField', 'range': [200, 207]}]}, {'type': 'FieldDefinition', 'name': 'yes_output', 'range': [209, 220], 'children': [{'type': 'SchemaField', 'range': [213, 220]}]}, {'type': 'FieldDefinition', 'name': 'no_output', 'range': [222, 233], 'children': [{'type': 'SchemaField', 'range': [226, 233]}]}]}]}]}]}, {'type': 'FunctionDecl', 'name': '__init__', 'range': [236, 341], 'children': [{'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [243, 340], 'children': [{'type': 'CallExpression', 'range': [243, 340], 'children': [{'type': 'MemberExpression', 'range': [243, 247], 'children': [{'type': 'Identifier', 'name': 'super', 'range': [243, 247]}]}, {'type': 'Identifier', 'name': '__init__', 'range': [247, 248]}, {'type': 'ObjectExpression', 'range': [249, 340], 'children': [{'type': 'Property', 'key': 'id', 'value': '715696a0-e1da-45c8-b209-c2fa9c3b0be6', 'range': [250, 253]}, {'type': 'Property', 'key': 'input_schema', 'value': 'ConditionBlock.Input', 'range': [255, 260]}, {'type': 'Property', 'key': 'output_schema', 'value': 'ConditionBlock.Output', 'range': [262, 267]}, {'type': 'Property', 'key': 'description', 'value': 'Handles conditional logic based on comparison operators', 'range': [269, 272]}, {'type': 'Property', 'key': 'categories', 'value': '{BlockCategory.LOGIC}', 'range': [274, 281]}, {'type': 'Property', 'key': 'test_input', 'value': {'value1': 10, 'operator': 'ComparisonOperator.GREATER_THAN.value', 'value2': 5, 'yes_value': 'Greater', 'no_value': 'Not greater'}, 'range': [283, 317]}, {'type': 'Property', 'key': 'test_output', 'value': [['result', True], ['yes_output', 'Greater']], 'range': [319, 338]}]}]}]}]}]}, {'type': 'FunctionDecl', 'name': 'run', 'range': [343, 614], 'children': [{'type': 'BlockStatement', 'children': [{'type': 'VariableDeclaration', 'range': [361, 366], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'operator', 'range': [361, 366]}, 'init': {'type': 'MemberExpression', 'range': [363, 366], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [363, 366]}]}}]}, {'type': 'VariableDeclaration', 'range': [368, 408], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'value1', 'range': [368, 373]}, 'init': {'type': 'MemberExpression', 'range': [370, 373], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [370, 373]}]}}]}, {'type': 'IfStatement', 'range': [374, 408], 'children': [{'type': 'CallExpression', 'range': [375, 380], 'children': [{'type': 'Identifier', 'name': 'isinstance', 'range': [375, 380]}, {'type': 'Identifier', 'name': 'value1', 'range': [377, 380]}, {'type': 'Identifier', 'name': 'str', 'range': [379, 380]}]}, {'type': 'BlockStatement', 'children': [{'type': 'TryStatement', 'range': [383, 408], 'children': [{'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [386, 396], 'children': [{'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'value1', 'range': [386, 396]}, 'right': {'type': 'CallExpression', 'range': [388, 396], 'children': [{'type': 'Identifier', 'name': 'float', 'range': [388, 396]}, {'type': 'CallExpression', 'range': [390, 396], 'children': [{'type': 'MemberExpression', 'range': [390, 396], 'children': [{'type': 'Identifier', 'name': 'value1', 'range': [390, 396]}]}]}]}}]}]}, {'type': 'CatchClause', 'param': {'type': 'Identifier', 'name': 'ValueError', 'range': [398, 399]}, 'body': {'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [401, 408], 'children': [{'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'value1', 'range': [401, 408]}, 'right': {'type': 'CallExpression', 'range': [403, 408], 'children': [{'type': 'MemberExpression', 'range': [403, 408], 'children': [{'type': 'Identifier', 'name': 'value1', 'range': [403, 408]}]}]}}]}]}}]}]}]}, {'type': 'VariableDeclaration', 'range': [410, 450], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'value2', 'range': [410, 415]}, 'init': {'type': 'MemberExpression', 'range': [412, 415], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [412, 415]}]}}]}, {'type': 'IfStatement', 'range': [416, 450], 'children': [{'type': 'CallExpression', 'range': [417, 422], 'children': [{'type': 'Identifier', 'name': 'isinstance', 'range': [417, 422]}, {'type': 'Identifier', 'name': 'value2', 'range': [419, 422]}, {'type': 'Identifier', 'name': 'str', 'range': [421, 422]}]}, {'type': 'BlockStatement', 'children': [{'type': 'TryStatement', 'range': [425, 450], 'children': [{'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [428, 438], 'children': [{'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'value2', 'range': [428, 438]}, 'right': {'type': 'CallExpression', 'range': [430, 438], 'children': [{'type': 'Identifier', 'name': 'float', 'range': [430, 438]}, {'type': 'CallExpression', 'range': [432, 438], 'children': [{'type': 'MemberExpression', 'range': [432, 438], 'children': [{'type': 'Identifier', 'name': 'value2', 'range': [432, 438]}]}]}]}}]}]}, {'type': 'CatchClause', 'param': {'type': 'Identifier', 'name': 'ValueError', 'range': [440, 441]}, 'body': {'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [443, 450], 'children': [{'type': 'AssignmentExpression', 'operator': '=', 'left': {'type': 'Identifier', 'name': 'value2', 'range': [443, 450]}, 'right': {'type': 'CallExpression', 'range': [445, 450], 'children': [{'type': 'MemberExpression', 'range': [445, 450], 'children': [{'type': 'Identifier', 'name': 'value2', 'range': [445, 450]}]}]}}]}]}}]}]}]}, {'type': 'VariableDeclaration', 'range': [452, 466], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'yes_value', 'range': [452, 457]}, 'init': {'type': 'ConditionalExpression', 'test': {'type': 'BinaryExpression', 'operator': 'is not', 'left': {'type': 'MemberExpression', 'range': [458, 463], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [458, 463]}]}, 'right': {'type': 'Identifier', 'name': 'None', 'range': [462, 463]}}, 'consequent': {'type': 'MemberExpression', 'range': [458, 463], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [458, 463]}]}, 'alternate': {'type': 'Identifier', 'name': 'value1', 'range': [465, 466]}}}]}, {'type': 'VariableDeclaration', 'range': [467, 481], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'no_value', 'range': [467, 472]}, 'init': {'type': 'ConditionalExpression', 'test': {'type': 'BinaryExpression', 'operator': 'is not', 'left': {'type': 'MemberExpression', 'range': [473, 478], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [473, 478]}]}, 'right': {'type': 'Identifier', 'name': 'None', 'range': [477, 478]}}, 'consequent': {'type': 'MemberExpression', 'range': [473, 478], 'children': [{'type': 'Identifier', 'name': 'input_data', 'range': [473, 478]}]}, 'alternate': {'type': 'Identifier', 'name': 'value2', 'range': [480, 481]}}}]}, {'type': 'VariableDeclaration', 'range': [483, 575], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'comparison_funcs', 'range': [483, 484]}, 'init': {'type': 'ObjectExpression', 'range': [485, 575], 'children': [{'type': 'Property', 'key': 'ComparisonOperator.EQUAL', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [492, 493]}, {'type': 'Identifier', 'name': 'b', 'range': [494, 495]}], 'body': {'type': 'BinaryExpression', 'operator': '==', 'left': {'type': 'Identifier', 'name': 'a', 'range': [496, 497]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [498, 499]}}}, 'range': [487, 500]}, {'type': 'Property', 'key': 'ComparisonOperator.NOT_EQUAL', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [507, 508]}, {'type': 'Identifier', 'name': 'b', 'range': [509, 510]}], 'body': {'type': 'BinaryExpression', 'operator': '!=', 'left': {'type': 'Identifier', 'name': 'a', 'range': [511, 512]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [513, 514]}}}, 'range': [502, 515]}, {'type': 'Property', 'key': 'ComparisonOperator.GREATER_THAN', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [522, 523]}, {'type': 'Identifier', 'name': 'b', 'range': [524, 525]}], 'body': {'type': 'BinaryExpression', 'operator': '>', 'left': {'type': 'Identifier', 'name': 'a', 'range': [526, 527]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [528, 529]}}}, 'range': [517, 530]}, {'type': 'Property', 'key': 'ComparisonOperator.LESS_THAN', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [536, 537]}, {'type': 'Identifier', 'name': 'b', 'range': [538, 539]}], 'body': {'type': 'BinaryExpression', 'operator': '<', 'left': {'type': 'Identifier', 'name': 'a', 'range': [540, 541]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [542, 543]}}}, 'range': [532, 544]}, {'type': 'Property', 'key': 'ComparisonOperator.GREATER_THAN_OR_EQUAL', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [550, 551]}, {'type': 'Identifier', 'name': 'b', 'range': [552, 553]}], 'body': {'type': 'BinaryExpression', 'operator': '>=', 'left': {'type': 'Identifier', 'name': 'a', 'range': [554, 555]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [556, 557]}}}, 'range': [546, 558]}, {'type': 'Property', 'key': 'ComparisonOperator.LESS_THAN_OR_EQUAL', 'value': {'type': 'ArrowFunctionExpression', 'params': [{'type': 'Identifier', 'name': 'a', 'range': [564, 565]}, {'type': 'Identifier', 'name': 'b', 'range': [566, 567]}], 'body': {'type': 'BinaryExpression', 'operator': '<=', 'left': {'type': 'Identifier', 'name': 'a', 'range': [568, 569]}, 'right': {'type': 'Identifier', 'name': 'b', 'range': [570, 571]}}}, 'range': [560, 573]}]}}]}, {'type': 'VariableDeclaration', 'range': [578, 589], 'children': [{'type': 'VariableDeclarator', 'id': {'type': 'Identifier', 'name': 'result', 'range': [578, 579]}, 'init': {'type': 'CallExpression', 'range': [580, 589], 'children': [{'type': 'MemberExpression', 'range': [580, 583], 'children': [{'type': 'Identifier', 'name': 'comparison_funcs', 'range': [580, 583]}]}, {'type': 'Identifier', 'name': 'operator', 'range': [582, 583]}, {'type': 'Identifier', 'name': 'value1', 'range': [585, 586]}, {'type': 'Identifier', 'name': 'value2', 'range': [587, 588]}]}}]}, {'type': 'ExpressionStatement', 'range': [591, 595], 'children': [{'type': 'YieldExpression', 'argument': {'type': 'ArrayExpression', 'elements': [{'type': 'Literal', 'value': 'result', 'range': [592, 593]}, {'type': 'Identifier', 'name': 'result', 'range': [594, 595]}]}}]}, {'type': 'IfStatement', 'range': [597, 613], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [598, 599]}, {'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [601, 605], 'children': [{'type': 'YieldExpression', 'argument': {'type': 'ArrayExpression', 'elements': [{'type': 'Literal', 'value': 'yes_output', 'range': [602, 603]}, {'type': 'Identifier', 'name': 'yes_value', 'range': [604, 605]}]}}]}]}, {'type': 'BlockStatement', 'children': [{'type': 'ExpressionStatement', 'range': [609, 613], 'children': [{'type': 'YieldExpression', 'argument': {'type': 'ArrayExpression', 'elements': [{'type': 'Literal', 'value': 'no_output', 'range': [610, 611]}, {'type': 'Identifier', 'name': 'no_value', 'range': [612, 613]}]}}]}]}]}]}]}]}
2025-01-08 09:41:18,083 - INFO - Completed main AST analysis flow
2025-01-08 09:41:18,084 - INFO - Successfully processed chunk
2025-01-08 09:41:18,116 - INFO - Starting code generation from AST
2025-01-08 10:11:19,798 - ERROR - Error in get_code_from_ast: Expecting value: line 30 column 1 (char 29)
2025-01-08 10:11:19,799 - INFO - Starting static code similarity comparison
2025-01-08 10:11:19,802 - INFO - Static similarity result: {'final_score': 20.83, 'length_similarity': 0.0, 'token_similarity': 0.0, 'structure_similarity': 0.0, 'function_similarity': 100, 'complexity_similarity': 8.33, 'variable_similarity': 100}
