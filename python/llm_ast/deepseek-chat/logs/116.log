2025-01-08 10:06:38,713 - INFO - Processing sample 116
2025-01-08 10:06:38,713 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 10:06:42,325 - INFO - Successfully split code into 4 top-level declarations
2025-01-08 10:06:42,329 - INFO - Processing chunk #0 (size=176 chars, start_index=0)
2025-01-08 10:06:42,329 - INFO - Processing chunk with 176 chars starting at index 0
2025-01-08 10:06:42,329 - INFO - Starting main AST analysis flow
2025-01-08 10:06:42,329 - INFO - Tokenized code into 33 tokens
2025-01-08 10:06:42,329 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:06:42,331 - INFO - Processing chunk #1 (size=1649 chars, start_index=33)
2025-01-08 10:06:42,331 - INFO - Processing chunk with 1649 chars starting at index 33
2025-01-08 10:06:42,331 - INFO - Starting main AST analysis flow
2025-01-08 10:06:42,332 - INFO - Tokenized code into 271 tokens
2025-01-08 10:06:42,332 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:06:42,338 - INFO - Processing chunk #2 (size=1219 chars, start_index=304)
2025-01-08 10:06:42,338 - INFO - Processing chunk with 1219 chars starting at index 304
2025-01-08 10:06:42,338 - INFO - Starting main AST analysis flow
2025-01-08 10:06:42,347 - INFO - Tokenized code into 271 tokens
2025-01-08 10:06:42,347 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:06:42,366 - INFO - Processing chunk #3 (size=443 chars, start_index=575)
2025-01-08 10:06:42,367 - INFO - Processing chunk with 443 chars starting at index 575
2025-01-08 10:06:42,367 - INFO - Starting main AST analysis flow
2025-01-08 10:06:42,367 - INFO - Tokenized code into 89 tokens
2025-01-08 10:06:42,367 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:06:45,624 - INFO - Step 1 result: {'type': 'Program', 'name': 'AGPTFormatter', 'range': [304, 574], 'children': [{'type': 'FunctionDeclaration', 'name': '__init__', 'range': [311, 350], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'format', 'range': [352, 572], 'children': []}]}
2025-01-08 10:06:45,625 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:06:46,448 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [575, 663], 'children': [{'type': 'ClassDeclaration', 'name': 'StructuredLoggingFormatter', 'range': [575, 626], 'children': [{'type': 'MethodDeclaration', 'name': '__init__', 'range': [586, 626], 'children': []}]}, {'type': 'FunctionDeclaration', 'name': 'format', 'range': [628, 662], 'children': []}]}
2025-01-08 10:06:46,448 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:06:46,457 - INFO - Step 1 result: {'type': 'Program', 'name': 'FancyConsoleFormatter', 'range': [33, 303], 'children': [{'type': 'ClassDeclaration', 'name': 'FancyConsoleFormatter', 'range': [33, 39], 'children': []}, {'type': 'VariableDeclaration', 'name': 'LEVEL_COLOR_MAP', 'range': [61, 114], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'format', 'range': [117, 301], 'children': []}]}
2025-01-08 10:06:46,458 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:06:50,095 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 32], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'logging', 'range': [0, 1]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 10], 'children': [{'type': 'ImportSpecifier', 'name': 'Fore', 'range': [6, 7]}, {'type': 'ImportSpecifier', 'name': 'Style', 'range': [9, 9]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [11, 23], 'children': [{'type': 'ImportSpecifier', 'name': 'CloudLoggingFilter', 'range': [19, 20]}, {'type': 'ImportSpecifier', 'name': 'StructuredLogHandler', 'range': [22, 22]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [25, 30], 'children': [{'type': 'ImportSpecifier', 'name': 'remove_color_codes', 'range': [28, 29]}]}]}
2025-01-08 10:06:50,095 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:06:57,971 - INFO - Step 2 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'logging', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 10], 'children': [{'type': 'ImportSpecifier', 'name': 'Fore', 'range': [6, 7], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Style', 'range': [9, 9], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [11, 23], 'children': [{'type': 'ImportSpecifier', 'name': 'CloudLoggingFilter', 'range': [19, 20], 'children': []}, {'type': 'ImportSpecifier', 'name': 'StructuredLogHandler', 'range': [22, 22], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [25, 30], 'children': [{'type': 'ImportSpecifier', 'name': 'remove_color_codes', 'range': [28, 29], 'children': []}]}]}
2025-01-08 10:06:57,971 - INFO - Starting Step 3: AST simplification
2025-01-08 10:07:03,556 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [575, 663], 'children': [{'type': 'ClassDeclaration', 'name': 'StructuredLoggingFormatter', 'range': [575, 626], 'children': [{'type': 'MethodDeclaration', 'name': '__init__', 'range': [586, 626], 'children': [{'type': 'Comment', 'name': '# Set up CloudLoggingFilter to add diagnostic info to the log records', 'range': [593, 605], 'children': []}, {'type': 'AssignmentExpression', 'name': '=', 'range': [606, 613], 'children': [{'type': 'MemberExpression', 'name': '.', 'range': [606, 608], 'children': [{'type': 'Identifier', 'name': 'self', 'range': [606, 606], 'children': []}, {'type': 'Identifier', 'name': 'cloud_logging_filter', 'range': [608, 608], 'children': []}]}, {'type': 'NewExpression', 'name': 'CloudLoggingFilter', 'range': [610, 612], 'children': []}]}, {'type': 'Comment', 'name': '# Init StructuredLogHandler', 'range': [615, 618], 'children': []}, {'type': 'CallExpression', 'name': '.', 'range': [619, 626], 'children': [{'type': 'Super', 'name': 'super', 'range': [619, 619], 'children': []}, {'type': 'Identifier', 'name': '__init__', 'range': [623, 623], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'format', 'range': [628, 662], 'children': [{'type': 'CallExpression', 'name': '.', 'range': [644, 652], 'children': [{'type': 'MemberExpression', 'name': '.', 'range': [644, 647], 'children': [{'type': 'Identifier', 'name': 'self', 'range': [644, 644], 'children': []}, {'type': 'Identifier', 'name': 'cloud_logging_filter', 'range': [647, 647], 'children': []}]}, {'type': 'Identifier', 'name': 'filter', 'range': [648, 648], 'children': []}, {'type': 'Identifier', 'name': 'record', 'range': [650, 650], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [653, 662], 'children': [{'type': 'CallExpression', 'name': '.', 'range': [654, 662], 'children': [{'type': 'Super', 'name': 'super', 'range': [654, 654], 'children': []}, {'type': 'Identifier', 'name': 'format', 'range': [658, 658], 'children': []}, {'type': 'Identifier', 'name': 'record', 'range': [660, 660], 'children': []}]}]}]}]}
2025-01-08 10:07:03,556 - INFO - Starting Step 3: AST simplification
2025-01-08 10:07:06,343 - INFO - Step 3 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'logging', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 10], 'children': [{'type': 'ImportSpecifier', 'name': 'Fore', 'range': [6, 7], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Style', 'range': [9, 9], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [11, 23], 'children': [{'type': 'ImportSpecifier', 'name': 'CloudLoggingFilter', 'range': [19, 20], 'children': []}, {'type': 'ImportSpecifier', 'name': 'StructuredLogHandler', 'range': [22, 22], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [25, 30], 'children': [{'type': 'ImportSpecifier', 'name': 'remove_color_codes', 'range': [28, 29], 'children': []}]}]}
2025-01-08 10:07:06,343 - INFO - Starting Step 4: AST normalization
2025-01-08 10:07:12,863 - INFO - Step 2 result: {'type': 'Program', 'name': 'FancyConsoleFormatter', 'range': [33, 303], 'children': [{'type': 'ClassDeclaration', 'name': 'FancyConsoleFormatter', 'range': [33, 39], 'children': [{'type': 'Inheritance', 'name': 'logging.Formatter', 'range': [35, 39], 'children': []}, {'type': 'Docstring', 'name': 'Docstring', 'range': [42, 44], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'LEVEL_COLOR_MAP', 'range': [61, 114], 'children': [{'type': 'Assignment', 'name': '=', 'range': [62, 114], 'children': [{'type': 'Dictionary', 'name': '{}', 'range': [63, 114], 'children': [{'type': 'KeyValuePair', 'name': 'logging.DEBUG: Fore.LIGHTBLACK_EX', 'range': [65, 72], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.INFO: Fore.BLUE', 'range': [74, 81], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.WARNING: Fore.YELLOW', 'range': [83, 90], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.ERROR: Fore.RED', 'range': [92, 99], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.CRITICAL: Fore.RED + Style.BRIGHT', 'range': [101, 112], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'format', 'range': [117, 301], 'children': [{'type': 'Parameters', 'name': '(self, record: logging.LogRecord)', 'range': [119, 127], 'children': []}, {'type': 'ReturnType', 'name': '-> str', 'range': [128, 130], 'children': []}, {'type': 'FunctionBody', 'name': 'FunctionBody', 'range': [132, 301], 'children': [{'type': 'Comment', 'name': '# Make sure `msg` is a string', 'range': [133, 142], 'children': []}, {'type': 'IfStatement', 'name': 'if not hasattr(record, "msg"):', 'range': [143, 158], 'children': [{'type': 'Assignment', 'name': 'record.msg = ""', 'range': [153, 158], 'children': []}]}, {'type': 'ElifStatement', 'name': 'elif type(record.msg) is not str:', 'range': [159, 181], 'children': [{'type': 'Assignment', 'name': 'record.msg = str(record.msg)', 'range': [171, 181], 'children': []}]}, {'type': 'Comment', 'name': '# Determine default color based on error level', 'range': [183, 191], 'children': []}, {'type': 'Assignment', 'name': 'level_color = ""', 'range': [192, 195], 'children': []}, {'type': 'IfStatement', 'name': 'if record.levelno in self.LEVEL_COLOR_MAP:', 'range': [196, 216], 'children': [{'type': 'Assignment', 'name': 'level_color = self.LEVEL_COLOR_MAP[record.levelno]', 'range': [206, 216], 'children': []}]}, {'type': 'Assignment', 'name': 'record.levelname = f"{level_color}{record.levelname}{Style.RESET_ALL}"', 'range': [217, 223], 'children': []}, {'type': 'Comment', 'name': '# Determine color for message', 'range': [225, 230], 'children': []}, {'type': 'Assignment', 'name': 'color = getattr(record, "color", level_color)', 'range': [231, 240], 'children': []}, {'type': 'Assignment', 'name': 'color_is_specified = hasattr(record, "color")', 'range': [242, 250], 'children': []}, {'type': 'Comment', 'name': "# Don't color INFO messages unless the color is explicitly specified.", 'range': [252, 266], 'children': []}, {'type': 'IfStatement', 'name': 'if color and (record.levelno != logging.INFO or color_is_specified):', 'range': [267, 290], 'children': [{'type': 'Assignment', 'name': 'record.msg = f"{color}{record.msg}{Style.RESET_ALL}"', 'range': [284, 290], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return super().format(record)', 'range': [292, 301], 'children': []}]}]}]}
2025-01-08 10:07:12,863 - INFO - Starting Step 3: AST simplification
2025-01-08 10:07:14,120 - INFO - Step 4 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'logging', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 10], 'children': [{'type': 'ImportSpecifier', 'name': 'Fore', 'range': [6, 7], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Style', 'range': [9, 9], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [11, 23], 'children': [{'type': 'ImportSpecifier', 'name': 'CloudLoggingFilter', 'range': [19, 20], 'children': []}, {'type': 'ImportSpecifier', 'name': 'StructuredLogHandler', 'range': [22, 22], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [25, 30], 'children': [{'type': 'ImportSpecifier', 'name': 'remove_color_codes', 'range': [28, 29], 'children': []}]}]}
2025-01-08 10:07:14,120 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:07:21,210 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [575, 663], 'children': [{'type': 'ClassDeclaration', 'name': 'StructuredLoggingFormatter', 'range': [575, 626], 'children': [{'type': 'MethodDeclaration', 'name': '__init__', 'range': [586, 626], 'children': [{'type': 'Comment', 'name': '# Set up CloudLoggingFilter to add diagnostic info to the log records', 'range': [593, 605], 'children': []}, {'type': 'AssignmentExpression', 'name': '=', 'range': [606, 613], 'children': [{'type': 'MemberExpression', 'name': '.', 'range': [606, 608], 'children': [{'type': 'Identifier', 'name': 'self', 'range': [606, 606], 'children': []}, {'type': 'Identifier', 'name': 'cloud_logging_filter', 'range': [608, 608], 'children': []}]}, {'type': 'NewExpression', 'name': 'CloudLoggingFilter', 'range': [610, 612], 'children': []}]}, {'type': 'Comment', 'name': '# Init StructuredLogHandler', 'range': [615, 618], 'children': []}, {'type': 'CallExpression', 'name': '.', 'range': [619, 626], 'children': [{'type': 'Super', 'name': 'super', 'range': [619, 619], 'children': []}, {'type': 'Identifier', 'name': '__init__', 'range': [623, 623], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'format', 'range': [628, 662], 'children': [{'type': 'CallExpression', 'name': '.', 'range': [644, 652], 'children': [{'type': 'MemberExpression', 'name': '.', 'range': [644, 647], 'children': [{'type': 'Identifier', 'name': 'self', 'range': [644, 644], 'children': []}, {'type': 'Identifier', 'name': 'cloud_logging_filter', 'range': [647, 647], 'children': []}]}, {'type': 'Identifier', 'name': 'filter', 'range': [648, 648], 'children': []}, {'type': 'Identifier', 'name': 'record', 'range': [650, 650], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [653, 662], 'children': [{'type': 'CallExpression', 'name': '.', 'range': [654, 662], 'children': [{'type': 'Super', 'name': 'super', 'range': [654, 654], 'children': []}, {'type': 'Identifier', 'name': 'format', 'range': [658, 658], 'children': []}, {'type': 'Identifier', 'name': 'record', 'range': [660, 660], 'children': []}]}]}]}]}
2025-01-08 10:07:21,211 - INFO - Starting Step 4: AST normalization
2025-01-08 10:07:23,165 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainOrSomething', 'range': [0, 30], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'logging', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 10], 'children': [{'type': 'ImportSpecifier', 'name': 'Fore', 'range': [6, 7], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Style', 'range': [9, 9], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [11, 23], 'children': [{'type': 'ImportSpecifier', 'name': 'CloudLoggingFilter', 'range': [19, 20], 'children': []}, {'type': 'ImportSpecifier', 'name': 'StructuredLogHandler', 'range': [22, 22], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [25, 30], 'children': [{'type': 'ImportSpecifier', 'name': 'remove_color_codes', 'range': [28, 29], 'children': []}]}]}]}
2025-01-08 10:07:23,165 - INFO - Completed main AST analysis flow
2025-01-08 10:07:23,166 - INFO - Successfully processed chunk
2025-01-08 10:07:38,791 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [575, 663], 'children': [{'type': 'ClassDecl', 'name': 'StructuredLoggingFormatter', 'range': [575, 626], 'children': [{'type': 'MethodDecl', 'name': '__init__', 'range': [586, 626], 'children': [{'type': 'Comment', 'name': '# Set up CloudLoggingFilter to add diagnostic info to the log records', 'range': [593, 605], 'children': []}, {'type': 'AssignmentExpression', 'name': '=', 'range': [606, 613], 'children': [{'type': 'MemberExpression', 'name': '.', 'range': [606, 608], 'children': [{'type': 'Identifier', 'name': 'self', 'range': [606, 606], 'children': []}, {'type': 'Identifier', 'name': 'cloud_logging_filter', 'range': [608, 608], 'children': []}]}, {'type': 'NewExpression', 'name': 'CloudLoggingFilter', 'range': [610, 612], 'children': []}]}, {'type': 'Comment', 'name': '# Init StructuredLogHandler', 'range': [615, 618], 'children': []}, {'type': 'CallExpression', 'name': '.', 'range': [619, 626], 'children': [{'type': 'Super', 'name': 'super', 'range': [619, 619], 'children': []}, {'type': 'Identifier', 'name': '__init__', 'range': [623, 623], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': 'format', 'range': [628, 662], 'children': [{'type': 'CallExpression', 'name': '.', 'range': [644, 652], 'children': [{'type': 'MemberExpression', 'name': '.', 'range': [644, 647], 'children': [{'type': 'Identifier', 'name': 'self', 'range': [644, 644], 'children': []}, {'type': 'Identifier', 'name': 'cloud_logging_filter', 'range': [647, 647], 'children': []}]}, {'type': 'Identifier', 'name': 'filter', 'range': [648, 648], 'children': []}, {'type': 'Identifier', 'name': 'record', 'range': [650, 650], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [653, 662], 'children': [{'type': 'CallExpression', 'name': '.', 'range': [654, 662], 'children': [{'type': 'Super', 'name': 'super', 'range': [654, 654], 'children': []}, {'type': 'Identifier', 'name': 'format', 'range': [658, 658], 'children': []}, {'type': 'Identifier', 'name': 'record', 'range': [660, 660], 'children': []}]}]}]}]}
2025-01-08 10:07:38,791 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:07:40,707 - INFO - Step 3 result: {'type': 'Program', 'name': 'FancyConsoleFormatter', 'range': [33, 303], 'children': [{'type': 'ClassDeclaration', 'name': 'FancyConsoleFormatter', 'range': [33, 39], 'children': [{'type': 'Inheritance', 'name': 'logging.Formatter', 'range': [35, 39], 'children': []}, {'type': 'Docstring', 'name': 'Docstring', 'range': [42, 44], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'LEVEL_COLOR_MAP', 'range': [61, 114], 'children': [{'type': 'Assignment', 'name': '=', 'range': [62, 114], 'children': [{'type': 'Dictionary', 'name': '{}', 'range': [63, 114], 'children': [{'type': 'KeyValuePair', 'name': 'logging.DEBUG: Fore.LIGHTBLACK_EX', 'range': [65, 72], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.INFO: Fore.BLUE', 'range': [74, 81], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.WARNING: Fore.YELLOW', 'range': [83, 90], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.ERROR: Fore.RED', 'range': [92, 99], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.CRITICAL: Fore.RED + Style.BRIGHT', 'range': [101, 112], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'format', 'range': [117, 301], 'children': [{'type': 'Parameters', 'name': '(self, record: logging.LogRecord)', 'range': [119, 127], 'children': []}, {'type': 'ReturnType', 'name': '-> str', 'range': [128, 130], 'children': []}, {'type': 'FunctionBody', 'name': 'FunctionBody', 'range': [132, 301], 'children': [{'type': 'Comment', 'name': '# Make sure `msg` is a string', 'range': [133, 142], 'children': []}, {'type': 'IfStatement', 'name': 'if not hasattr(record, "msg"):', 'range': [143, 158], 'children': [{'type': 'Assignment', 'name': 'record.msg = ""', 'range': [153, 158], 'children': []}]}, {'type': 'ElifStatement', 'name': 'elif type(record.msg) is not str:', 'range': [159, 181], 'children': [{'type': 'Assignment', 'name': 'record.msg = str(record.msg)', 'range': [171, 181], 'children': []}]}, {'type': 'Comment', 'name': '# Determine default color based on error level', 'range': [183, 191], 'children': []}, {'type': 'Assignment', 'name': 'level_color = ""', 'range': [192, 195], 'children': []}, {'type': 'IfStatement', 'name': 'if record.levelno in self.LEVEL_COLOR_MAP:', 'range': [196, 216], 'children': [{'type': 'Assignment', 'name': 'level_color = self.LEVEL_COLOR_MAP[record.levelno]', 'range': [206, 216], 'children': []}]}, {'type': 'Assignment', 'name': 'record.levelname = f"{level_color}{record.levelname}{Style.RESET_ALL}"', 'range': [217, 223], 'children': []}, {'type': 'Comment', 'name': '# Determine color for message', 'range': [225, 230], 'children': []}, {'type': 'Assignment', 'name': 'color = getattr(record, "color", level_color)', 'range': [231, 240], 'children': []}, {'type': 'Assignment', 'name': 'color_is_specified = hasattr(record, "color")', 'range': [242, 250], 'children': []}, {'type': 'Comment', 'name': "# Don't color INFO messages unless the color is explicitly specified.", 'range': [252, 266], 'children': []}, {'type': 'IfStatement', 'name': 'if color and (record.levelno != logging.INFO or color_is_specified):', 'range': [267, 290], 'children': [{'type': 'Assignment', 'name': 'record.msg = f"{color}{record.msg}{Style.RESET_ALL}"', 'range': [284, 290], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return super().format(record)', 'range': [292, 301], 'children': []}]}]}]}
2025-01-08 10:07:40,708 - INFO - Starting Step 4: AST normalization
2025-01-08 10:07:56,836 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [575, 663], 'children': [{'type': 'ClassDecl', 'name': 'StructuredLoggingFormatter', 'range': [575, 626], 'children': [{'type': 'MethodDecl', 'name': '__init__', 'range': [586, 626], 'children': [{'type': 'Comment', 'name': '# Set up CloudLoggingFilter to add diagnostic info to the log records', 'range': [593, 605], 'children': []}, {'type': 'AssignmentExpression', 'name': '=', 'range': [606, 613], 'children': [{'type': 'MemberExpression', 'name': '.', 'range': [606, 608], 'children': [{'type': 'Identifier', 'name': 'self', 'range': [606, 606], 'children': []}, {'type': 'Identifier', 'name': 'cloud_logging_filter', 'range': [608, 608], 'children': []}]}, {'type': 'NewExpression', 'name': 'CloudLoggingFilter', 'range': [610, 612], 'children': []}]}, {'type': 'Comment', 'name': '# Init StructuredLogHandler', 'range': [615, 618], 'children': []}, {'type': 'CallExpression', 'name': '.', 'range': [619, 626], 'children': [{'type': 'Super', 'name': 'super', 'range': [619, 619], 'children': []}, {'type': 'Identifier', 'name': '__init__', 'range': [623, 623], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': 'format', 'range': [628, 662], 'children': [{'type': 'CallExpression', 'name': '.', 'range': [644, 652], 'children': [{'type': 'MemberExpression', 'name': '.', 'range': [644, 647], 'children': [{'type': 'Identifier', 'name': 'self', 'range': [644, 644], 'children': []}, {'type': 'Identifier', 'name': 'cloud_logging_filter', 'range': [647, 647], 'children': []}]}, {'type': 'Identifier', 'name': 'filter', 'range': [648, 648], 'children': []}, {'type': 'Identifier', 'name': 'record', 'range': [650, 650], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [653, 662], 'children': [{'type': 'CallExpression', 'name': '.', 'range': [654, 662], 'children': [{'type': 'Super', 'name': 'super', 'range': [654, 654], 'children': []}, {'type': 'Identifier', 'name': 'format', 'range': [658, 658], 'children': []}, {'type': 'Identifier', 'name': 'record', 'range': [660, 660], 'children': []}]}]}]}]}
2025-01-08 10:07:56,836 - INFO - Completed main AST analysis flow
2025-01-08 10:07:56,837 - INFO - Successfully processed chunk
2025-01-08 10:08:02,685 - INFO - Step 2 result: {'type': 'Program', 'name': 'AGPTFormatter', 'range': [304, 574], 'children': [{'type': 'FunctionDeclaration', 'name': '__init__', 'range': [311, 350], 'children': [{'type': 'ParameterList', 'name': '', 'range': [313, 327], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [314, 314], 'children': []}, {'type': 'Parameter', 'name': '*args', 'range': [316, 317], 'children': []}, {'type': 'Parameter', 'name': 'no_color', 'range': [319, 323], 'children': []}, {'type': 'Parameter', 'name': '**kwargs', 'range': [325, 327], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [329, 350], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [331, 343], 'children': [{'type': 'CallExpression', 'name': 'super().__init__', 'range': [331, 343], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [336, 342], 'children': [{'type': 'Argument', 'name': '*args', 'range': [337, 338], 'children': []}, {'type': 'Argument', 'name': '**kwargs', 'range': [340, 342], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [345, 349], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [345, 349], 'children': [{'type': 'MemberExpression', 'name': 'self.no_color', 'range': [345, 347], 'children': []}, {'type': 'Identifier', 'name': 'no_color', 'range': [349, 349], 'children': []}]}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'format', 'range': [352, 572], 'children': [{'type': 'ParameterList', 'name': '', 'range': [354, 362], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [355, 355], 'children': []}, {'type': 'Parameter', 'name': 'record', 'range': [357, 361], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [366, 572], 'children': [{'type': 'IfStatement', 'name': '', 'range': [378, 416], 'children': [{'type': 'Condition', 'name': '', 'range': [380, 385], 'children': [{'type': 'CallExpression', 'name': 'hasattr', 'range': [380, 385], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [381, 385], 'children': [{'type': 'Argument', 'name': 'record', 'range': [382, 382], 'children': []}, {'type': 'Argument', 'name': '"msg"', 'range': [384, 384], 'children': []}]}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [387, 393], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [388, 392], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [388, 392], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [388, 390], 'children': []}, {'type': 'StringLiteral', 'name': '""', 'range': [392, 392], 'children': []}]}]}]}, {'type': 'ElseIfStatement', 'name': '', 'range': [394, 416], 'children': [{'type': 'Condition', 'name': '', 'range': [395, 404], 'children': [{'type': 'CallExpression', 'name': 'type', 'range': [395, 404], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [396, 404], 'children': [{'type': 'Argument', 'name': 'record.msg', 'range': [397, 399], 'children': []}]}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [405, 416], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [406, 415], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [406, 415], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [406, 408], 'children': []}, {'type': 'CallExpression', 'name': 'str', 'range': [410, 415], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [411, 415], 'children': [{'type': 'Argument', 'name': 'record.msg', 'range': [412, 414], 'children': []}]}]}]}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [429, 455], 'children': [{'type': 'Condition', 'name': '', 'range': [430, 443], 'children': [{'type': 'LogicalExpression', 'name': '', 'range': [430, 443], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [430, 432], 'children': []}, {'type': 'CallExpression', 'name': 'getattr', 'range': [435, 442], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [436, 442], 'children': [{'type': 'Argument', 'name': 'record', 'range': [437, 437], 'children': []}, {'type': 'Argument', 'name': '"preserve_color"', 'range': [439, 439], 'children': []}, {'type': 'Argument', 'name': 'False', 'range': [441, 441], 'children': []}]}]}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [444, 455], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [445, 454], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [445, 454], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [445, 447], 'children': []}, {'type': 'CallExpression', 'name': 'remove_color_codes', 'range': [449, 454], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [450, 454], 'children': [{'type': 'Argument', 'name': 'record.msg', 'range': [451, 453], 'children': []}]}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [463, 473], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [463, 473], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [463, 463], 'children': []}, {'type': 'CallExpression', 'name': 'getattr', 'range': [465, 472], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [466, 472], 'children': [{'type': 'Argument', 'name': 'record', 'range': [467, 467], 'children': []}, {'type': 'Argument', 'name': '"title"', 'range': [469, 469], 'children': []}, {'type': 'Argument', 'name': '""', 'range': [471, 471], 'children': []}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [474, 499], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [474, 499], 'children': [{'type': 'Identifier', 'name': 'title_color', 'range': [474, 474], 'children': []}, {'type': 'LogicalExpression', 'name': '', 'range': [476, 499], 'children': [{'type': 'CallExpression', 'name': 'getattr', 'range': [476, 483], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [477, 483], 'children': [{'type': 'Argument', 'name': 'record', 'range': [478, 478], 'children': []}, {'type': 'Argument', 'name': '"title_color"', 'range': [480, 480], 'children': []}, {'type': 'Argument', 'name': '""', 'range': [482, 482], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'self.LEVEL_COLOR_MAP.get', 'range': [485, 499], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [490, 499], 'children': [{'type': 'Argument', 'name': 'record.levelno', 'range': [491, 493], 'children': []}, {'type': 'Argument', 'name': '""', 'range': [496, 496], 'children': []}]}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [500, 510], 'children': [{'type': 'Condition', 'name': '', 'range': [501, 504], 'children': [{'type': 'LogicalExpression', 'name': '', 'range': [501, 504], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [501, 501], 'children': []}, {'type': 'Identifier', 'name': 'title_color', 'range': [503, 503], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [505, 510], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [506, 509], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [506, 509], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [506, 506], 'children': []}, {'type': 'TemplateLiteral', 'name': '', 'range': [508, 509], 'children': [{'type': 'TemplateElement', 'name': '', 'range': [508, 509], 'children': []}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [529, 538], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [529, 538], 'children': [{'type': 'MemberExpression', 'name': 'record.title', 'range': [529, 531], 'children': []}, {'type': 'ConditionalExpression', 'name': '', 'range': [533, 538], 'children': [{'type': 'Condition', 'name': '', 'range': [535, 535], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [535, 535], 'children': []}]}, {'type': 'Consequent', 'name': '', 'range': [536, 536], 'children': [{'type': 'TemplateLiteral', 'name': '', 'range': [536, 536], 'children': [{'type': 'TemplateElement', 'name': '', 'range': [536, 536], 'children': []}]}]}, {'type': 'Alternate', 'name': '', 'range': [538, 538], 'children': [{'type': 'StringLiteral', 'name': '""', 'range': [538, 538], 'children': []}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [541, 572], 'children': [{'type': 'Condition', 'name': '', 'range': [542, 545], 'children': [{'type': 'MemberExpression', 'name': 'self.no_color', 'range': [542, 544], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [546, 559], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [547, 558], 'children': [{'type': 'CallExpression', 'name': 'remove_color_codes', 'range': [548, 558], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [549, 558], 'children': [{'type': 'Argument', 'name': 'super().format(record)', 'range': [550, 557], 'children': []}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [560, 572], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [562, 572], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [563, 571], 'children': [{'type': 'CallExpression', 'name': 'super().format', 'range': [564, 571], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [565, 571], 'children': [{'type': 'Argument', 'name': 'record', 'range': [570, 570], 'children': []}]}]}]}]}]}]}]}]}]}
2025-01-08 10:08:02,685 - INFO - Starting Step 3: AST simplification
2025-01-08 10:08:07,685 - INFO - Step 4 result: {'type': 'Program', 'name': 'FancyConsoleFormatter', 'range': [33, 303], 'children': [{'type': 'ClassDecl', 'name': 'FancyConsoleFormatter', 'range': [33, 39], 'children': [{'type': 'Inheritance', 'name': 'logging.Formatter', 'range': [35, 39], 'children': []}, {'type': 'Docstring', 'name': 'Docstring', 'range': [42, 44], 'children': []}]}, {'type': 'VariableDecl', 'name': 'LEVEL_COLOR_MAP', 'range': [61, 114], 'children': [{'type': 'Assignment', 'name': '=', 'range': [62, 114], 'children': [{'type': 'Dictionary', 'name': '{}', 'range': [63, 114], 'children': [{'type': 'KeyValuePair', 'name': 'logging.DEBUG: Fore.LIGHTBLACK_EX', 'range': [65, 72], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.INFO: Fore.BLUE', 'range': [74, 81], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.WARNING: Fore.YELLOW', 'range': [83, 90], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.ERROR: Fore.RED', 'range': [92, 99], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.CRITICAL: Fore.RED + Style.BRIGHT', 'range': [101, 112], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': 'format', 'range': [117, 301], 'children': [{'type': 'Parameters', 'name': '(self, record: logging.LogRecord)', 'range': [119, 127], 'children': []}, {'type': 'ReturnType', 'name': '-> str', 'range': [128, 130], 'children': []}, {'type': 'FunctionBody', 'name': 'FunctionBody', 'range': [132, 301], 'children': [{'type': 'Comment', 'name': '# Make sure `msg` is a string', 'range': [133, 142], 'children': []}, {'type': 'IfStatement', 'name': 'if not hasattr(record, "msg"):', 'range': [143, 158], 'children': [{'type': 'Assignment', 'name': 'record.msg = ""', 'range': [153, 158], 'children': []}]}, {'type': 'ElifStatement', 'name': 'elif type(record.msg) is not str:', 'range': [159, 181], 'children': [{'type': 'Assignment', 'name': 'record.msg = str(record.msg)', 'range': [171, 181], 'children': []}]}, {'type': 'Comment', 'name': '# Determine default color based on error level', 'range': [183, 191], 'children': []}, {'type': 'Assignment', 'name': 'level_color = ""', 'range': [192, 195], 'children': []}, {'type': 'IfStatement', 'name': 'if record.levelno in self.LEVEL_COLOR_MAP:', 'range': [196, 216], 'children': [{'type': 'Assignment', 'name': 'level_color = self.LEVEL_COLOR_MAP[record.levelno]', 'range': [206, 216], 'children': []}]}, {'type': 'Assignment', 'name': 'record.levelname = f"{level_color}{record.levelname}{Style.RESET_ALL}"', 'range': [217, 223], 'children': []}, {'type': 'Comment', 'name': '# Determine color for message', 'range': [225, 230], 'children': []}, {'type': 'Assignment', 'name': 'color = getattr(record, "color", level_color)', 'range': [231, 240], 'children': []}, {'type': 'Assignment', 'name': 'color_is_specified = hasattr(record, "color")', 'range': [242, 250], 'children': []}, {'type': 'Comment', 'name': "# Don't color INFO messages unless the color is explicitly specified.", 'range': [252, 266], 'children': []}, {'type': 'IfStatement', 'name': 'if color and (record.levelno != logging.INFO or color_is_specified):', 'range': [267, 290], 'children': [{'type': 'Assignment', 'name': 'record.msg = f"{color}{record.msg}{Style.RESET_ALL}"', 'range': [284, 290], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return super().format(record)', 'range': [292, 301], 'children': []}]}]}]}
2025-01-08 10:08:07,685 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:08:33,435 - INFO - Step 5 result: {'type': 'Program', 'name': 'FancyConsoleFormatter', 'range': [33, 303], 'children': [{'type': 'ClassDecl', 'name': 'FancyConsoleFormatter', 'range': [33, 39], 'children': [{'type': 'Inheritance', 'name': 'logging.Formatter', 'range': [35, 39], 'children': []}, {'type': 'Docstring', 'name': 'Docstring', 'range': [42, 44], 'children': []}]}, {'type': 'VariableDecl', 'name': 'LEVEL_COLOR_MAP', 'range': [61, 114], 'children': [{'type': 'Assignment', 'name': '=', 'range': [62, 114], 'children': [{'type': 'Dictionary', 'name': '{}', 'range': [63, 114], 'children': [{'type': 'KeyValuePair', 'name': 'logging.DEBUG: Fore.LIGHTBLACK_EX', 'range': [65, 72], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.INFO: Fore.BLUE', 'range': [74, 81], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.WARNING: Fore.YELLOW', 'range': [83, 90], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.ERROR: Fore.RED', 'range': [92, 99], 'children': []}, {'type': 'KeyValuePair', 'name': 'logging.CRITICAL: Fore.RED + Style.BRIGHT', 'range': [101, 112], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': 'format', 'range': [117, 301], 'children': [{'type': 'Parameters', 'name': '(self, record: logging.LogRecord)', 'range': [119, 127], 'children': []}, {'type': 'ReturnType', 'name': '-> str', 'range': [128, 130], 'children': []}, {'type': 'FunctionBody', 'name': 'FunctionBody', 'range': [132, 301], 'children': [{'type': 'Comment', 'name': '# Make sure `msg` is a string', 'range': [133, 142], 'children': []}, {'type': 'IfStatement', 'name': 'if not hasattr(record, "msg"):', 'range': [143, 158], 'children': [{'type': 'Assignment', 'name': 'record.msg = ""', 'range': [153, 158], 'children': []}]}, {'type': 'ElifStatement', 'name': 'elif type(record.msg) is not str:', 'range': [159, 181], 'children': [{'type': 'Assignment', 'name': 'record.msg = str(record.msg)', 'range': [171, 181], 'children': []}]}, {'type': 'Comment', 'name': '# Determine default color based on error level', 'range': [183, 191], 'children': []}, {'type': 'Assignment', 'name': 'level_color = ""', 'range': [192, 195], 'children': []}, {'type': 'IfStatement', 'name': 'if record.levelno in self.LEVEL_COLOR_MAP:', 'range': [196, 216], 'children': [{'type': 'Assignment', 'name': 'level_color = self.LEVEL_COLOR_MAP[record.levelno]', 'range': [206, 216], 'children': []}]}, {'type': 'Assignment', 'name': 'record.levelname = f"{level_color}{record.levelname}{Style.RESET_ALL}"', 'range': [217, 223], 'children': []}, {'type': 'Comment', 'name': '# Determine color for message', 'range': [225, 230], 'children': []}, {'type': 'Assignment', 'name': 'color = getattr(record, "color", level_color)', 'range': [231, 240], 'children': []}, {'type': 'Assignment', 'name': 'color_is_specified = hasattr(record, "color")', 'range': [242, 250], 'children': []}, {'type': 'Comment', 'name': "# Don't color INFO messages unless the color is explicitly specified.", 'range': [252, 266], 'children': []}, {'type': 'IfStatement', 'name': 'if color and (record.levelno != logging.INFO or color_is_specified):', 'range': [267, 290], 'children': [{'type': 'Assignment', 'name': 'record.msg = f"{color}{record.msg}{Style.RESET_ALL}"', 'range': [284, 290], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return super().format(record)', 'range': [292, 301], 'children': []}]}]}]}
2025-01-08 10:08:33,435 - INFO - Completed main AST analysis flow
2025-01-08 10:08:33,436 - INFO - Successfully processed chunk
2025-01-08 10:09:20,652 - INFO - Step 3 result: {'type': 'Program', 'name': 'AGPTFormatter', 'range': [304, 574], 'children': [{'type': 'FunctionDeclaration', 'name': '__init__', 'range': [311, 350], 'children': [{'type': 'ParameterList', 'name': '', 'range': [313, 327], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [314, 314], 'children': []}, {'type': 'Parameter', 'name': '*args', 'range': [316, 317], 'children': []}, {'type': 'Parameter', 'name': 'no_color', 'range': [319, 323], 'children': []}, {'type': 'Parameter', 'name': '**kwargs', 'range': [325, 327], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [329, 350], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [331, 343], 'children': [{'type': 'CallExpression', 'name': 'super().__init__', 'range': [331, 343], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [336, 342], 'children': [{'type': 'Argument', 'name': '*args', 'range': [337, 338], 'children': []}, {'type': 'Argument', 'name': '**kwargs', 'range': [340, 342], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [345, 349], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [345, 349], 'children': [{'type': 'MemberExpression', 'name': 'self.no_color', 'range': [345, 347], 'children': []}, {'type': 'Identifier', 'name': 'no_color', 'range': [349, 349], 'children': []}]}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'format', 'range': [352, 572], 'children': [{'type': 'ParameterList', 'name': '', 'range': [354, 362], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [355, 355], 'children': []}, {'type': 'Parameter', 'name': 'record', 'range': [357, 361], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [366, 572], 'children': [{'type': 'IfStatement', 'name': '', 'range': [378, 416], 'children': [{'type': 'Condition', 'name': '', 'range': [380, 385], 'children': [{'type': 'CallExpression', 'name': 'hasattr', 'range': [380, 385], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [381, 385], 'children': [{'type': 'Argument', 'name': 'record', 'range': [382, 382], 'children': []}, {'type': 'Argument', 'name': '"msg"', 'range': [384, 384], 'children': []}]}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [387, 393], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [388, 392], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [388, 392], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [388, 390], 'children': []}, {'type': 'StringLiteral', 'name': '""', 'range': [392, 392], 'children': []}]}]}]}, {'type': 'ElseIfStatement', 'name': '', 'range': [394, 416], 'children': [{'type': 'Condition', 'name': '', 'range': [395, 404], 'children': [{'type': 'CallExpression', 'name': 'type', 'range': [395, 404], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [396, 404], 'children': [{'type': 'Argument', 'name': 'record.msg', 'range': [397, 399], 'children': []}]}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [405, 416], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [406, 415], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [406, 415], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [406, 408], 'children': []}, {'type': 'CallExpression', 'name': 'str', 'range': [410, 415], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [411, 415], 'children': [{'type': 'Argument', 'name': 'record.msg', 'range': [412, 414], 'children': []}]}]}]}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [429, 455], 'children': [{'type': 'Condition', 'name': '', 'range': [430, 443], 'children': [{'type': 'LogicalExpression', 'name': '', 'range': [430, 443], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [430, 432], 'children': []}, {'type': 'CallExpression', 'name': 'getattr', 'range': [435, 442], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [436, 442], 'children': [{'type': 'Argument', 'name': 'record', 'range': [437, 437], 'children': []}, {'type': 'Argument', 'name': '"preserve_color"', 'range': [439, 439], 'children': []}, {'type': 'Argument', 'name': 'False', 'range': [441, 441], 'children': []}]}]}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [444, 455], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [445, 454], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [445, 454], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [445, 447], 'children': []}, {'type': 'CallExpression', 'name': 'remove_color_codes', 'range': [449, 454], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [450, 454], 'children': [{'type': 'Argument', 'name': 'record.msg', 'range': [451, 453], 'children': []}]}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [463, 473], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [463, 473], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [463, 463], 'children': []}, {'type': 'CallExpression', 'name': 'getattr', 'range': [465, 472], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [466, 472], 'children': [{'type': 'Argument', 'name': 'record', 'range': [467, 467], 'children': []}, {'type': 'Argument', 'name': '"title"', 'range': [469, 469], 'children': []}, {'type': 'Argument', 'name': '""', 'range': [471, 471], 'children': []}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [474, 499], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [474, 499], 'children': [{'type': 'Identifier', 'name': 'title_color', 'range': [474, 474], 'children': []}, {'type': 'LogicalExpression', 'name': '', 'range': [476, 499], 'children': [{'type': 'CallExpression', 'name': 'getattr', 'range': [476, 483], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [477, 483], 'children': [{'type': 'Argument', 'name': 'record', 'range': [478, 478], 'children': []}, {'type': 'Argument', 'name': '"title_color"', 'range': [480, 480], 'children': []}, {'type': 'Argument', 'name': '""', 'range': [482, 482], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'self.LEVEL_COLOR_MAP.get', 'range': [485, 499], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [490, 499], 'children': [{'type': 'Argument', 'name': 'record.levelno', 'range': [491, 493], 'children': []}, {'type': 'Argument', 'name': '""', 'range': [496, 496], 'children': []}]}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [500, 510], 'children': [{'type': 'Condition', 'name': '', 'range': [501, 504], 'children': [{'type': 'LogicalExpression', 'name': '', 'range': [501, 504], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [501, 501], 'children': []}, {'type': 'Identifier', 'name': 'title_color', 'range': [503, 503], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [505, 510], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [506, 509], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [506, 509], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [506, 506], 'children': []}, {'type': 'TemplateLiteral', 'name': '', 'range': [508, 509], 'children': [{'type': 'TemplateElement', 'name': '', 'range': [508, 509], 'children': []}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [529, 538], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [529, 538], 'children': [{'type': 'MemberExpression', 'name': 'record.title', 'range': [529, 531], 'children': []}, {'type': 'ConditionalExpression', 'name': '', 'range': [533, 538], 'children': [{'type': 'Condition', 'name': '', 'range': [535, 535], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [535, 535], 'children': []}]}, {'type': 'Consequent', 'name': '', 'range': [536, 536], 'children': [{'type': 'TemplateLiteral', 'name': '', 'range': [536, 536], 'children': [{'type': 'TemplateElement', 'name': '', 'range': [536, 536], 'children': []}]}]}, {'type': 'Alternate', 'name': '', 'range': [538, 538], 'children': [{'type': 'StringLiteral', 'name': '""', 'range': [538, 538], 'children': []}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [541, 572], 'children': [{'type': 'Condition', 'name': '', 'range': [542, 545], 'children': [{'type': 'MemberExpression', 'name': 'self.no_color', 'range': [542, 544], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [546, 559], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [547, 558], 'children': [{'type': 'CallExpression', 'name': 'remove_color_codes', 'range': [548, 558], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [549, 558], 'children': [{'type': 'Argument', 'name': 'super().format(record)', 'range': [550, 557], 'children': []}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [560, 572], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [562, 572], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [563, 571], 'children': [{'type': 'CallExpression', 'name': 'super().format', 'range': [564, 571], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [565, 571], 'children': [{'type': 'Argument', 'name': 'record', 'range': [570, 570], 'children': []}]}]}]}]}]}]}]}]}]}
2025-01-08 10:09:20,652 - INFO - Starting Step 4: AST normalization
2025-01-08 10:10:33,706 - INFO - Step 4 result: {'type': 'Program', 'name': 'AGPTFormatter', 'range': [304, 574], 'children': [{'type': 'FunctionDecl', 'name': '__init__', 'range': [311, 350], 'children': [{'type': 'ParameterList', 'name': '', 'range': [313, 327], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [314, 314], 'children': []}, {'type': 'Parameter', 'name': '*args', 'range': [316, 317], 'children': []}, {'type': 'Parameter', 'name': 'no_color', 'range': [319, 323], 'children': []}, {'type': 'Parameter', 'name': '**kwargs', 'range': [325, 327], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [329, 350], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [331, 343], 'children': [{'type': 'CallExpression', 'name': 'super().__init__', 'range': [331, 343], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [336, 342], 'children': [{'type': 'Argument', 'name': '*args', 'range': [337, 338], 'children': []}, {'type': 'Argument', 'name': '**kwargs', 'range': [340, 342], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [345, 349], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [345, 349], 'children': [{'type': 'MemberExpression', 'name': 'self.no_color', 'range': [345, 347], 'children': []}, {'type': 'Identifier', 'name': 'no_color', 'range': [349, 349], 'children': []}]}]}]}]}, {'type': 'FunctionDecl', 'name': 'format', 'range': [352, 572], 'children': [{'type': 'ParameterList', 'name': '', 'range': [354, 362], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [355, 355], 'children': []}, {'type': 'Parameter', 'name': 'record', 'range': [357, 361], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [366, 572], 'children': [{'type': 'IfStatement', 'name': '', 'range': [378, 416], 'children': [{'type': 'Condition', 'name': '', 'range': [380, 385], 'children': [{'type': 'CallExpression', 'name': 'hasattr', 'range': [380, 385], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [381, 385], 'children': [{'type': 'Argument', 'name': 'record', 'range': [382, 382], 'children': []}, {'type': 'Argument', 'name': '"msg"', 'range': [384, 384], 'children': []}]}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [387, 393], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [388, 392], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [388, 392], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [388, 390], 'children': []}, {'type': 'StringLiteral', 'name': '""', 'range': [392, 392], 'children': []}]}]}]}, {'type': 'ElseIfStatement', 'name': '', 'range': [394, 416], 'children': [{'type': 'Condition', 'name': '', 'range': [395, 404], 'children': [{'type': 'CallExpression', 'name': 'type', 'range': [395, 404], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [396, 404], 'children': [{'type': 'Argument', 'name': 'record.msg', 'range': [397, 399], 'children': []}]}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [405, 416], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [406, 415], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [406, 415], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [406, 408], 'children': []}, {'type': 'CallExpression', 'name': 'str', 'range': [410, 415], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [411, 415], 'children': [{'type': 'Argument', 'name': 'record.msg', 'range': [412, 414], 'children': []}]}]}]}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [429, 455], 'children': [{'type': 'Condition', 'name': '', 'range': [430, 443], 'children': [{'type': 'LogicalExpression', 'name': '', 'range': [430, 443], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [430, 432], 'children': []}, {'type': 'CallExpression', 'name': 'getattr', 'range': [435, 442], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [436, 442], 'children': [{'type': 'Argument', 'name': 'record', 'range': [437, 437], 'children': []}, {'type': 'Argument', 'name': '"preserve_color"', 'range': [439, 439], 'children': []}, {'type': 'Argument', 'name': 'False', 'range': [441, 441], 'children': []}]}]}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [444, 455], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [445, 454], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [445, 454], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [445, 447], 'children': []}, {'type': 'CallExpression', 'name': 'remove_color_codes', 'range': [449, 454], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [450, 454], 'children': [{'type': 'Argument', 'name': 'record.msg', 'range': [451, 453], 'children': []}]}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [463, 473], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [463, 473], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [463, 463], 'children': []}, {'type': 'CallExpression', 'name': 'getattr', 'range': [465, 472], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [466, 472], 'children': [{'type': 'Argument', 'name': 'record', 'range': [467, 467], 'children': []}, {'type': 'Argument', 'name': '"title"', 'range': [469, 469], 'children': []}, {'type': 'Argument', 'name': '""', 'range': [471, 471], 'children': []}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [474, 499], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [474, 499], 'children': [{'type': 'Identifier', 'name': 'title_color', 'range': [474, 474], 'children': []}, {'type': 'LogicalExpression', 'name': '', 'range': [476, 499], 'children': [{'type': 'CallExpression', 'name': 'getattr', 'range': [476, 483], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [477, 483], 'children': [{'type': 'Argument', 'name': 'record', 'range': [478, 478], 'children': []}, {'type': 'Argument', 'name': '"title_color"', 'range': [480, 480], 'children': []}, {'type': 'Argument', 'name': '""', 'range': [482, 482], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'self.LEVEL_COLOR_MAP.get', 'range': [485, 499], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [490, 499], 'children': [{'type': 'Argument', 'name': 'record.levelno', 'range': [491, 493], 'children': []}, {'type': 'Argument', 'name': '""', 'range': [496, 496], 'children': []}]}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [500, 510], 'children': [{'type': 'Condition', 'name': '', 'range': [501, 504], 'children': [{'type': 'LogicalExpression', 'name': '', 'range': [501, 504], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [501, 501], 'children': []}, {'type': 'Identifier', 'name': 'title_color', 'range': [503, 503], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [505, 510], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [506, 509], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [506, 509], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [506, 506], 'children': []}, {'type': 'TemplateLiteral', 'name': '', 'range': [508, 509], 'children': [{'type': 'TemplateElement', 'name': '', 'range': [508, 509], 'children': []}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [529, 538], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [529, 538], 'children': [{'type': 'MemberExpression', 'name': 'record.title', 'range': [529, 531], 'children': []}, {'type': 'ConditionalExpression', 'name': '', 'range': [533, 538], 'children': [{'type': 'Condition', 'name': '', 'range': [535, 535], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [535, 535], 'children': []}]}, {'type': 'Consequent', 'name': '', 'range': [536, 536], 'children': [{'type': 'TemplateLiteral', 'name': '', 'range': [536, 536], 'children': [{'type': 'TemplateElement', 'name': '', 'range': [536, 536], 'children': []}]}]}, {'type': 'Alternate', 'name': '', 'range': [538, 538], 'children': [{'type': 'StringLiteral', 'name': '""', 'range': [538, 538], 'children': []}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [541, 572], 'children': [{'type': 'Condition', 'name': '', 'range': [542, 545], 'children': [{'type': 'MemberExpression', 'name': 'self.no_color', 'range': [542, 544], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [546, 559], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [547, 558], 'children': [{'type': 'CallExpression', 'name': 'remove_color_codes', 'range': [548, 558], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [549, 558], 'children': [{'type': 'Argument', 'name': 'super().format(record)', 'range': [550, 557], 'children': []}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [560, 572], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [562, 572], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [563, 571], 'children': [{'type': 'CallExpression', 'name': 'super().format', 'range': [564, 571], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [565, 571], 'children': [{'type': 'Argument', 'name': 'record', 'range': [570, 570], 'children': []}]}]}]}]}]}]}]}]}]}
2025-01-08 10:10:33,706 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:11:42,517 - INFO - Step 5 result: {'type': 'Program', 'name': 'AGPTFormatter', 'range': [304, 574], 'children': [{'type': 'FunctionDecl', 'name': '__init__', 'range': [311, 350], 'children': [{'type': 'ParameterList', 'name': '', 'range': [313, 327], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [314, 314], 'children': []}, {'type': 'Parameter', 'name': '*args', 'range': [316, 317], 'children': []}, {'type': 'Parameter', 'name': 'no_color', 'range': [319, 323], 'children': []}, {'type': 'Parameter', 'name': '**kwargs', 'range': [325, 327], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [329, 350], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [331, 343], 'children': [{'type': 'CallExpression', 'name': 'super().__init__', 'range': [331, 343], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [336, 342], 'children': [{'type': 'Argument', 'name': '*args', 'range': [337, 338], 'children': []}, {'type': 'Argument', 'name': '**kwargs', 'range': [340, 342], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [345, 349], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [345, 349], 'children': [{'type': 'MemberExpression', 'name': 'self.no_color', 'range': [345, 347], 'children': []}, {'type': 'Identifier', 'name': 'no_color', 'range': [349, 349], 'children': []}]}]}]}]}, {'type': 'FunctionDecl', 'name': 'format', 'range': [352, 572], 'children': [{'type': 'ParameterList', 'name': '', 'range': [354, 362], 'children': [{'type': 'Parameter', 'name': 'self', 'range': [355, 355], 'children': []}, {'type': 'Parameter', 'name': 'record', 'range': [357, 361], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [366, 572], 'children': [{'type': 'IfStatement', 'name': '', 'range': [378, 416], 'children': [{'type': 'Condition', 'name': '', 'range': [380, 385], 'children': [{'type': 'CallExpression', 'name': 'hasattr', 'range': [380, 385], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [381, 385], 'children': [{'type': 'Argument', 'name': 'record', 'range': [382, 382], 'children': []}, {'type': 'Argument', 'name': '"msg"', 'range': [384, 384], 'children': []}]}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [387, 393], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [388, 392], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [388, 392], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [388, 390], 'children': []}, {'type': 'StringLiteral', 'name': '""', 'range': [392, 392], 'children': []}]}]}]}, {'type': 'ElseIfStatement', 'name': '', 'range': [394, 416], 'children': [{'type': 'Condition', 'name': '', 'range': [395, 404], 'children': [{'type': 'CallExpression', 'name': 'type', 'range': [395, 404], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [396, 404], 'children': [{'type': 'Argument', 'name': 'record.msg', 'range': [397, 399], 'children': []}]}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [405, 416], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [406, 415], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [406, 415], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [406, 408], 'children': []}, {'type': 'CallExpression', 'name': 'str', 'range': [410, 415], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [411, 415], 'children': [{'type': 'Argument', 'name': 'record.msg', 'range': [412, 414], 'children': []}]}]}]}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [429, 455], 'children': [{'type': 'Condition', 'name': '', 'range': [430, 443], 'children': [{'type': 'LogicalExpression', 'name': '', 'range': [430, 443], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [430, 432], 'children': []}, {'type': 'CallExpression', 'name': 'getattr', 'range': [435, 442], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [436, 442], 'children': [{'type': 'Argument', 'name': 'record', 'range': [437, 437], 'children': []}, {'type': 'Argument', 'name': '"preserve_color"', 'range': [439, 439], 'children': []}, {'type': 'Argument', 'name': 'False', 'range': [441, 441], 'children': []}]}]}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [444, 455], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [445, 454], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [445, 454], 'children': [{'type': 'MemberExpression', 'name': 'record.msg', 'range': [445, 447], 'children': []}, {'type': 'CallExpression', 'name': 'remove_color_codes', 'range': [449, 454], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [450, 454], 'children': [{'type': 'Argument', 'name': 'record.msg', 'range': [451, 453], 'children': []}]}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [463, 473], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [463, 473], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [463, 463], 'children': []}, {'type': 'CallExpression', 'name': 'getattr', 'range': [465, 472], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [466, 472], 'children': [{'type': 'Argument', 'name': 'record', 'range': [467, 467], 'children': []}, {'type': 'Argument', 'name': '"title"', 'range': [469, 469], 'children': []}, {'type': 'Argument', 'name': '""', 'range': [471, 471], 'children': []}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [474, 499], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [474, 499], 'children': [{'type': 'Identifier', 'name': 'title_color', 'range': [474, 474], 'children': []}, {'type': 'LogicalExpression', 'name': '', 'range': [476, 499], 'children': [{'type': 'CallExpression', 'name': 'getattr', 'range': [476, 483], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [477, 483], 'children': [{'type': 'Argument', 'name': 'record', 'range': [478, 478], 'children': []}, {'type': 'Argument', 'name': '"title_color"', 'range': [480, 480], 'children': []}, {'type': 'Argument', 'name': '""', 'range': [482, 482], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'self.LEVEL_COLOR_MAP.get', 'range': [485, 499], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [490, 499], 'children': [{'type': 'Argument', 'name': 'record.levelno', 'range': [491, 493], 'children': []}, {'type': 'Argument', 'name': '""', 'range': [496, 496], 'children': []}]}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [500, 510], 'children': [{'type': 'Condition', 'name': '', 'range': [501, 504], 'children': [{'type': 'LogicalExpression', 'name': '', 'range': [501, 504], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [501, 501], 'children': []}, {'type': 'Identifier', 'name': 'title_color', 'range': [503, 503], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [505, 510], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [506, 509], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [506, 509], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [506, 506], 'children': []}, {'type': 'TemplateLiteral', 'name': '', 'range': [508, 509], 'children': [{'type': 'TemplateElement', 'name': '', 'range': [508, 509], 'children': []}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [529, 538], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [529, 538], 'children': [{'type': 'MemberExpression', 'name': 'record.title', 'range': [529, 531], 'children': []}, {'type': 'ConditionalExpression', 'name': '', 'range': [533, 538], 'children': [{'type': 'Condition', 'name': '', 'range': [535, 535], 'children': [{'type': 'Identifier', 'name': 'title', 'range': [535, 535], 'children': []}]}, {'type': 'Consequent', 'name': '', 'range': [536, 536], 'children': [{'type': 'TemplateLiteral', 'name': '', 'range': [536, 536], 'children': [{'type': 'TemplateElement', 'name': '', 'range': [536, 536], 'children': []}]}]}, {'type': 'Alternate', 'name': '', 'range': [538, 538], 'children': [{'type': 'StringLiteral', 'name': '""', 'range': [538, 538], 'children': []}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [541, 572], 'children': [{'type': 'Condition', 'name': '', 'range': [542, 545], 'children': [{'type': 'MemberExpression', 'name': 'self.no_color', 'range': [542, 544], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [546, 559], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [547, 558], 'children': [{'type': 'CallExpression', 'name': 'remove_color_codes', 'range': [548, 558], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [549, 558], 'children': [{'type': 'Argument', 'name': 'super().format(record)', 'range': [550, 557], 'children': []}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [560, 572], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [562, 572], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [563, 571], 'children': [{'type': 'CallExpression', 'name': 'super().format', 'range': [564, 571], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [565, 571], 'children': [{'type': 'Argument', 'name': 'record', 'range': [570, 570], 'children': []}]}]}]}]}]}]}]}]}]}
2025-01-08 10:11:42,517 - INFO - Completed main AST analysis flow
2025-01-08 10:11:42,519 - INFO - Successfully processed chunk
2025-01-08 10:11:42,556 - INFO - Starting code generation from AST
2025-01-08 10:16:59,997 - INFO - Successfully generated code from AST
2025-01-08 10:16:59,998 - INFO - Starting static code similarity comparison
2025-01-08 10:17:00,007 - INFO - Static similarity result: {'final_score': 94.97, 'length_similarity': 93.5, 'token_similarity': 93.33, 'structure_similarity': 91.78, 'function_similarity': 100, 'complexity_similarity': 100.0, 'variable_similarity': 100}
