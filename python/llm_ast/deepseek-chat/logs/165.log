2025-01-08 10:24:22,979 - INFO - Processing sample 165
2025-01-08 10:24:22,979 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 10:24:27,571 - INFO - Successfully split code into 5 top-level declarations
2025-01-08 10:24:27,572 - INFO - Processing chunk #0 (size=126 chars, start_index=0)
2025-01-08 10:24:27,573 - INFO - Processing chunk with 126 chars starting at index 0
2025-01-08 10:24:27,573 - INFO - Starting main AST analysis flow
2025-01-08 10:24:27,573 - INFO - Tokenized code into 22 tokens
2025-01-08 10:24:27,573 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:24:27,574 - INFO - Processing chunk #1 (size=197 chars, start_index=22)
2025-01-08 10:24:27,574 - INFO - Processing chunk with 197 chars starting at index 22
2025-01-08 10:24:27,575 - INFO - Starting main AST analysis flow
2025-01-08 10:24:27,575 - INFO - Tokenized code into 45 tokens
2025-01-08 10:24:27,575 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:24:27,579 - INFO - Processing chunk #2 (size=339 chars, start_index=67)
2025-01-08 10:24:27,580 - INFO - Processing chunk #3 (size=322 chars, start_index=135)
2025-01-08 10:24:27,581 - INFO - Processing chunk with 339 chars starting at index 67
2025-01-08 10:24:27,582 - INFO - Starting main AST analysis flow
2025-01-08 10:24:27,582 - INFO - Processing chunk with 322 chars starting at index 135
2025-01-08 10:24:27,581 - INFO - Processing chunk #4 (size=264 chars, start_index=200)
2025-01-08 10:24:27,583 - INFO - Tokenized code into 68 tokens
2025-01-08 10:24:27,586 - INFO - Starting main AST analysis flow
2025-01-08 10:24:27,586 - INFO - Processing chunk with 264 chars starting at index 200
2025-01-08 10:24:27,587 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:24:27,587 - INFO - Tokenized code into 65 tokens
2025-01-08 10:24:27,587 - INFO - Starting main AST analysis flow
2025-01-08 10:24:27,588 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:24:27,588 - INFO - Tokenized code into 51 tokens
2025-01-08 10:24:27,592 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:24:29,165 - INFO - Step 1 result: {'type': 'Program', 'name': 'ld_client', 'range': [27, 66], 'children': []}
2025-01-08 10:24:29,166 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:24:30,948 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [135, 199], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_feature_flag_unauthorized_response', 'range': [142, 157], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'test_function', 'range': [165, 177], 'children': []}, {'type': 'VariableDeclaration', 'name': 'result', 'range': [179, 197], 'children': []}]}
2025-01-08 10:24:30,948 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:24:32,550 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [67, 134], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_feature_flag_enabled', 'range': [67, 89], 'children': []}, {'type': 'FunctionDeclaration', 'name': 'test_function', 'range': [91, 109], 'children': []}, {'type': 'VariableDeclaration', 'name': 'result', 'range': [111, 119], 'children': []}, {'type': 'ExpressionStatement', 'name': '', 'range': [120, 125], 'children': []}, {'type': 'ExpressionStatement', 'name': '', 'range': [126, 133], 'children': []}]}
2025-01-08 10:24:32,550 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:24:33,147 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 21], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'pytest', 'range': [0, 1]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': [{'type': 'ImportSpecifier', 'name': 'LDClient', 'range': [5, 6]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 19], 'children': [{'type': 'ImportSpecifier', 'name': 'feature_flag', 'range': [15, 16]}, {'type': 'ImportSpecifier', 'name': 'mock_flag_variation', 'range': [18, 18]}]}]}
2025-01-08 10:24:33,147 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:24:37,524 - INFO - Step 2 result: {'type': 'Program', 'name': 'ld_client', 'range': [27, 66], 'children': [{'type': 'FunctionDeclaration', 'name': 'ld_client', 'range': [27, 66], 'children': [{'type': 'Parameter', 'name': 'mocker', 'range': [30, 30], 'children': []}, {'type': 'AssignmentExpression', 'name': 'client', 'range': [34, 43], 'children': [{'type': 'MemberExpression', 'name': 'mocker.Mock', 'range': [36, 38], 'children': []}, {'type': 'Argument', 'name': 'spec=LDClient', 'range': [40, 42], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'mocker.patch', 'range': [45, 54], 'children': [{'type': 'Argument', 'name': '"ldclient.get"', 'range': [49, 49], 'children': []}, {'type': 'Argument', 'name': 'return_value=client', 'range': [51, 53], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'client.is_initialized.return_value', 'range': [56, 62], 'children': [{'type': 'Literal', 'name': 'True', 'range': [62, 62], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return client', 'range': [64, 65], 'children': []}]}]}
2025-01-08 10:24:37,524 - INFO - Starting Step 3: AST simplification
2025-01-08 10:24:39,953 - INFO - Step 2 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'pytest', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': [{'type': 'FromImport', 'name': 'ldclient', 'range': [3, 4], 'children': []}, {'type': 'ImportSpecifier', 'name': 'LDClient', 'range': [5, 6], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 19], 'children': [{'type': 'FromImport', 'name': 'autogpt_libs.feature_flag.client', 'range': [9, 14], 'children': []}, {'type': 'ImportSpecifier', 'name': 'feature_flag', 'range': [15, 16], 'children': []}, {'type': 'ImportSpecifier', 'name': 'mock_flag_variation', 'range': [18, 18], 'children': []}]}]}
2025-01-08 10:24:39,953 - INFO - Starting Step 3: AST simplification
2025-01-08 10:24:42,149 - INFO - Step 2 result: {'nodes': [{'type': 'FunctionDeclaration', 'name': 'test_feature_flag_unauthorized_response', 'range': [142, 157], 'children': [{'type': 'AssignmentExpression', 'name': 'ld_client.variation.return_value', 'range': [150, 156], 'children': [{'type': 'Literal', 'name': 'False', 'range': [156, 156], 'children': []}]}]}, {'type': 'FunctionDeclaration', 'name': 'test_function', 'range': [165, 177], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [175, 176], 'children': [{'type': 'Literal', 'name': '"success"', 'range': [176, 176], 'children': []}]}]}, {'type': 'VariableDeclaration', 'name': 'result', 'range': [179, 197], 'children': [{'type': 'CallExpression', 'name': 'test_function', 'range': [181, 186], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [183, 185], 'children': [{'type': 'Literal', 'name': '"test-user"', 'range': [185, 185], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [188, 196], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [190, 191], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [189, 189], 'children': []}, {'type': 'ObjectExpression', 'name': '', 'range': [192, 196], 'children': [{'type': 'Property', 'name': 'error', 'range': [193, 195], 'children': [{'type': 'Literal', 'name': '"disabled"', 'range': [195, 195], 'children': []}]}]}]}]}]}]}
2025-01-08 10:24:42,149 - INFO - Starting Step 3: AST simplification
2025-01-08 10:24:43,834 - INFO - Step 1 result: {'type': 'Program', 'name': 'test_mock_flag_variation', 'range': [200, 249], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_mock_flag_variation', 'range': [200, 249], 'children': [{'type': 'BlockStatement', 'range': [206, 249], 'children': [{'type': 'WithStatement', 'range': [207, 227], 'children': [{'type': 'CallExpression', 'range': [208, 213], 'children': [{'type': 'Identifier', 'name': 'mock_flag_variation', 'range': [208, 208]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [210, 210]}, {'type': 'Literal', 'value': 'True', 'range': [212, 212]}]}, {'type': 'BlockStatement', 'range': [214, 227], 'children': [{'type': 'ExpressionStatement', 'range': [216, 227], 'children': [{'type': 'CallExpression', 'range': [217, 226], 'children': [{'type': 'MemberExpression', 'range': [217, 219], 'children': [{'type': 'Identifier', 'name': 'ld_client', 'range': [217, 217]}, {'type': 'Identifier', 'name': 'variation', 'range': [219, 219]}]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [221, 221]}, {'type': 'Literal', 'value': 'None', 'range': [223, 223]}, {'type': 'Literal', 'value': 'False', 'range': [225, 225]}]}]}]}]}, {'type': 'WithStatement', 'range': [229, 249], 'children': [{'type': 'CallExpression', 'range': [230, 235], 'children': [{'type': 'Identifier', 'name': 'mock_flag_variation', 'range': [230, 230]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [232, 232]}, {'type': 'Literal', 'value': 'False', 'range': [234, 234]}]}, {'type': 'BlockStatement', 'range': [236, 249], 'children': [{'type': 'ExpressionStatement', 'range': [238, 249], 'children': [{'type': 'CallExpression', 'range': [239, 248], 'children': [{'type': 'MemberExpression', 'range': [239, 241], 'children': [{'type': 'Identifier', 'name': 'ld_client', 'range': [239, 239]}, {'type': 'Identifier', 'name': 'variation', 'range': [241, 241]}]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [243, 243]}, {'type': 'Literal', 'value': 'None', 'range': [245, 245]}, {'type': 'Literal', 'value': 'False', 'range': [247, 247]}]}]}]}]}]}]}]}
2025-01-08 10:24:43,834 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:24:45,904 - INFO - Step 3 result: {'type': 'Program', 'name': 'ld_client', 'range': [27, 66], 'children': [{'type': 'FunctionDeclaration', 'name': 'ld_client', 'range': [27, 66], 'children': [{'type': 'Parameter', 'name': 'mocker', 'range': [30, 30], 'children': []}, {'type': 'AssignmentExpression', 'name': 'client', 'range': [34, 43], 'children': [{'type': 'MemberExpression', 'name': 'mocker.Mock', 'range': [36, 38], 'children': []}, {'type': 'Argument', 'name': 'spec=LDClient', 'range': [40, 42], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'mocker.patch', 'range': [45, 54], 'children': [{'type': 'Argument', 'name': '"ldclient.get"', 'range': [49, 49], 'children': []}, {'type': 'Argument', 'name': 'return_value=client', 'range': [51, 53], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'client.is_initialized.return_value', 'range': [56, 62], 'children': [{'type': 'Literal', 'name': 'True', 'range': [62, 62], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return client', 'range': [64, 65], 'children': []}]}]}
2025-01-08 10:24:45,914 - INFO - Starting Step 4: AST normalization
2025-01-08 10:24:46,117 - INFO - Step 3 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'pytest', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': [{'type': 'FromImport', 'name': 'ldclient', 'range': [3, 4], 'children': []}, {'type': 'ImportSpecifier', 'name': 'LDClient', 'range': [5, 6], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 19], 'children': [{'type': 'FromImport', 'name': 'autogpt_libs.feature_flag.client', 'range': [9, 14], 'children': []}, {'type': 'ImportSpecifier', 'name': 'feature_flag', 'range': [15, 16], 'children': []}, {'type': 'ImportSpecifier', 'name': 'mock_flag_variation', 'range': [18, 18], 'children': []}]}]}
2025-01-08 10:24:46,117 - INFO - Starting Step 4: AST normalization
2025-01-08 10:24:53,229 - INFO - Step 4 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'pytest', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': [{'type': 'FromImport', 'name': 'ldclient', 'range': [3, 4], 'children': []}, {'type': 'ImportSpecifier', 'name': 'LDClient', 'range': [5, 6], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 19], 'children': [{'type': 'FromImport', 'name': 'autogpt_libs.feature_flag.client', 'range': [9, 14], 'children': []}, {'type': 'ImportSpecifier', 'name': 'feature_flag', 'range': [15, 16], 'children': []}, {'type': 'ImportSpecifier', 'name': 'mock_flag_variation', 'range': [18, 18], 'children': []}]}]}
2025-01-08 10:24:53,229 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:24:53,618 - INFO - Step 3 result: {'nodes': [{'type': 'FunctionDeclaration', 'name': 'test_feature_flag_unauthorized_response', 'range': [142, 157], 'children': [{'type': 'AssignmentExpression', 'name': 'ld_client.variation.return_value', 'range': [150, 156], 'children': [{'type': 'Literal', 'name': 'False', 'range': [156, 156], 'children': []}]}]}, {'type': 'FunctionDeclaration', 'name': 'test_function', 'range': [165, 177], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [175, 176], 'children': [{'type': 'Literal', 'name': '"success"', 'range': [176, 176], 'children': []}]}]}, {'type': 'VariableDeclaration', 'name': 'result', 'range': [179, 197], 'children': [{'type': 'CallExpression', 'name': 'test_function', 'range': [181, 186], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [183, 185], 'children': [{'type': 'Literal', 'name': '"test-user"', 'range': [185, 185], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [188, 196], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [190, 191], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [189, 189], 'children': []}, {'type': 'ObjectExpression', 'name': '', 'range': [192, 196], 'children': [{'type': 'Property', 'name': 'error', 'range': [193, 195], 'children': [{'type': 'Literal', 'name': '"disabled"', 'range': [195, 195], 'children': []}]}]}]}]}]}]}
2025-01-08 10:24:53,618 - INFO - Starting Step 4: AST normalization
2025-01-08 10:24:53,751 - INFO - Step 4 result: {'type': 'Program', 'name': 'ld_client', 'range': [27, 66], 'children': [{'type': 'FunctionDecl', 'name': 'ld_client', 'range': [27, 66], 'children': [{'type': 'Parameter', 'name': 'mocker', 'range': [30, 30], 'children': []}, {'type': 'AssignmentExpression', 'name': 'client', 'range': [34, 43], 'children': [{'type': 'MemberExpression', 'name': 'mocker.Mock', 'range': [36, 38], 'children': []}, {'type': 'Argument', 'name': 'spec=LDClient', 'range': [40, 42], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'mocker.patch', 'range': [45, 54], 'children': [{'type': 'Argument', 'name': '"ldclient.get"', 'range': [49, 49], 'children': []}, {'type': 'Argument', 'name': 'return_value=client', 'range': [51, 53], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'client.is_initialized.return_value', 'range': [56, 62], 'children': [{'type': 'Literal', 'name': 'True', 'range': [62, 62], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return client', 'range': [64, 65], 'children': []}]}]}
2025-01-08 10:24:53,751 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:24:56,683 - INFO - Step 2 result: {'nodes': [{'type': 'FunctionDeclaration', 'name': 'test_feature_flag_enabled', 'range': [67, 89], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [67, 73], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_feature_flag_enabled', 'range': [74, 80], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [74, 79], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [75, 78], 'children': []}, {'type': 'Identifier', 'name': 'test_feature_flag_enabled', 'range': [76, 100], 'children': []}, {'type': 'Parameter', 'name': 'ld_client', 'range': [78, 88], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [81, 89], 'children': [{'type': 'AssignmentExpression', 'name': 'ld_client.variation.return_value = True', 'range': [82, 88], 'children': [{'type': 'MemberExpression', 'name': 'ld_client.variation.return_value', 'range': [82, 86], 'children': []}, {'type': 'Keyword', 'name': '=', 'range': [87, 88], 'children': []}, {'type': 'Literal', 'name': 'True', 'range': [88, 92], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'test_function', 'range': [91, 109], 'children': [{'type': 'Decorator', 'name': '@feature_flag("test-flag")', 'range': [91, 96], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_function', 'range': [97, 105], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [97, 102], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [98, 101], 'children': []}, {'type': 'Identifier', 'name': 'test_function', 'range': [99, 112], 'children': []}, {'type': 'Parameter', 'name': 'user_id: str', 'range': [101, 113], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [106, 109], 'children': [{'type': 'ReturnStatement', 'name': 'return "success"', 'range': [107, 108], 'children': [{'type': 'Keyword', 'name': 'return', 'range': [107, 113], 'children': []}, {'type': 'Literal', 'name': '"success"', 'range': [108, 116], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'result', 'range': [111, 119], 'children': [{'type': 'AssignmentExpression', 'name': 'result = test_function(user_id="test-user")', 'range': [112, 118], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [112, 118], 'children': []}, {'type': 'Keyword', 'name': '=', 'range': [113, 114], 'children': []}, {'type': 'CallExpression', 'name': 'test_function(user_id="test-user")', 'range': [114, 118], 'children': [{'type': 'Identifier', 'name': 'test_function', 'range': [114, 126], 'children': []}, {'type': 'Argument', 'name': 'user_id="test-user"', 'range': [115, 117], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': 'assert result == "success"', 'range': [120, 125], 'children': [{'type': 'Keyword', 'name': 'assert', 'range': [120, 126], 'children': []}, {'type': 'BinaryExpression', 'name': 'result == "success"', 'range': [121, 124], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [121, 127], 'children': []}, {'type': 'Keyword', 'name': '==', 'range': [122, 124], 'children': []}, {'type': 'Literal', 'name': '"success"', 'range': [124, 132], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'ld_client.variation.assert_called_once()', 'range': [126, 133], 'children': [{'type': 'CallExpression', 'name': 'ld_client.variation.assert_called_once()', 'range': [127, 132], 'children': [{'type': 'MemberExpression', 'name': 'ld_client.variation.assert_called_once', 'range': [127, 131], 'children': []}]}]}]}
2025-01-08 10:24:56,683 - INFO - Starting Step 3: AST simplification
2025-01-08 10:25:00,669 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainOrSomething', 'range': [0, 19], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'pytest', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 7], 'children': [{'type': 'FromImport', 'name': 'ldclient', 'range': [3, 4], 'children': []}, {'type': 'ImportSpecifier', 'name': 'LDClient', 'range': [5, 6], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [9, 19], 'children': [{'type': 'FromImport', 'name': 'autogpt_libs.feature_flag.client', 'range': [9, 14], 'children': []}, {'type': 'ImportSpecifier', 'name': 'feature_flag', 'range': [15, 16], 'children': []}, {'type': 'ImportSpecifier', 'name': 'mock_flag_variation', 'range': [18, 18], 'children': []}]}]}]}
2025-01-08 10:25:00,669 - INFO - Completed main AST analysis flow
2025-01-08 10:25:00,669 - INFO - Successfully processed chunk
2025-01-08 10:25:02,038 - INFO - Step 2 result: {'type': 'Program', 'name': 'test_mock_flag_variation', 'range': [200, 249], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_mock_flag_variation', 'range': [200, 249], 'children': [{'type': 'BlockStatement', 'range': [206, 249], 'children': [{'type': 'WithStatement', 'range': [207, 227], 'children': [{'type': 'CallExpression', 'range': [208, 213], 'children': [{'type': 'Identifier', 'name': 'mock_flag_variation', 'range': [208, 208]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [210, 210]}, {'type': 'Literal', 'value': 'True', 'range': [212, 212]}]}, {'type': 'BlockStatement', 'range': [214, 227], 'children': [{'type': 'ExpressionStatement', 'range': [216, 227], 'children': [{'type': 'CallExpression', 'range': [217, 226], 'children': [{'type': 'MemberExpression', 'range': [217, 219], 'children': [{'type': 'Identifier', 'name': 'ld_client', 'range': [217, 217]}, {'type': 'Identifier', 'name': 'variation', 'range': [219, 219]}]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [221, 221]}, {'type': 'Literal', 'value': 'None', 'range': [223, 223]}, {'type': 'Literal', 'value': 'False', 'range': [225, 225]}]}]}]}]}, {'type': 'WithStatement', 'range': [229, 249], 'children': [{'type': 'CallExpression', 'range': [230, 235], 'children': [{'type': 'Identifier', 'name': 'mock_flag_variation', 'range': [230, 230]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [232, 232]}, {'type': 'Literal', 'value': 'False', 'range': [234, 234]}]}, {'type': 'BlockStatement', 'range': [236, 249], 'children': [{'type': 'ExpressionStatement', 'range': [238, 249], 'children': [{'type': 'CallExpression', 'range': [239, 248], 'children': [{'type': 'MemberExpression', 'range': [239, 241], 'children': [{'type': 'Identifier', 'name': 'ld_client', 'range': [239, 239]}, {'type': 'Identifier', 'name': 'variation', 'range': [241, 241]}]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [243, 243]}, {'type': 'Literal', 'value': 'None', 'range': [245, 245]}, {'type': 'Literal', 'value': 'False', 'range': [247, 247]}]}]}]}]}]}]}]}
2025-01-08 10:25:02,038 - INFO - Starting Step 3: AST simplification
2025-01-08 10:25:02,543 - INFO - Step 5 result: {'type': 'Program', 'name': 'ld_client', 'range': [27, 66], 'children': [{'type': 'FunctionDecl', 'name': 'ld_client', 'range': [27, 66], 'children': [{'type': 'Parameter', 'name': 'mocker', 'range': [30, 30], 'children': []}, {'type': 'AssignmentExpression', 'name': 'client', 'range': [34, 43], 'children': [{'type': 'MemberExpression', 'name': 'mocker.Mock', 'range': [36, 38], 'children': []}, {'type': 'Argument', 'name': 'spec=LDClient', 'range': [40, 42], 'children': []}]}, {'type': 'ExpressionStatement', 'name': 'mocker.patch', 'range': [45, 54], 'children': [{'type': 'Argument', 'name': '"ldclient.get"', 'range': [49, 49], 'children': []}, {'type': 'Argument', 'name': 'return_value=client', 'range': [51, 53], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'client.is_initialized.return_value', 'range': [56, 62], 'children': [{'type': 'Literal', 'name': 'True', 'range': [62, 62], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return client', 'range': [64, 65], 'children': []}]}]}
2025-01-08 10:25:02,543 - INFO - Completed main AST analysis flow
2025-01-08 10:25:02,543 - INFO - Successfully processed chunk
2025-01-08 10:25:05,697 - INFO - Step 4 result: {'nodes': [{'type': 'FunctionDecl', 'name': 'test_feature_flag_unauthorized_response', 'range': [142, 157], 'children': [{'type': 'AssignmentExpression', 'name': 'ld_client.variation.return_value', 'range': [150, 156], 'children': [{'type': 'Literal', 'name': 'False', 'range': [156, 156], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'test_function', 'range': [165, 177], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [175, 176], 'children': [{'type': 'Literal', 'name': '"success"', 'range': [176, 176], 'children': []}]}]}, {'type': 'VariableDecl', 'name': 'result', 'range': [179, 197], 'children': [{'type': 'CallExpression', 'name': 'test_function', 'range': [181, 186], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [183, 185], 'children': [{'type': 'Literal', 'name': '"test-user"', 'range': [185, 185], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [188, 196], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [190, 191], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [189, 189], 'children': []}, {'type': 'ObjectExpression', 'name': '', 'range': [192, 196], 'children': [{'type': 'Property', 'name': 'error', 'range': [193, 195], 'children': [{'type': 'Literal', 'name': '"disabled"', 'range': [195, 195], 'children': []}]}]}]}]}]}]}
2025-01-08 10:25:05,697 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:25:17,183 - INFO - Step 5 result: {'type': 'Program', 'name': 'MainProgram', 'range': [142, 197], 'children': [{'type': 'FunctionDecl', 'name': 'test_feature_flag_unauthorized_response', 'range': [142, 157], 'children': [{'type': 'AssignmentExpression', 'name': 'ld_client.variation.return_value', 'range': [150, 156], 'children': [{'type': 'Literal', 'name': 'False', 'range': [156, 156], 'children': []}]}]}, {'type': 'FunctionDecl', 'name': 'test_function', 'range': [165, 177], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [175, 176], 'children': [{'type': 'Literal', 'name': '"success"', 'range': [176, 176], 'children': []}]}]}, {'type': 'VariableDecl', 'name': 'result', 'range': [179, 197], 'children': [{'type': 'CallExpression', 'name': 'test_function', 'range': [181, 186], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [183, 185], 'children': [{'type': 'Literal', 'name': '"test-user"', 'range': [185, 185], 'children': []}]}]}, {'type': 'AssertStatement', 'name': '', 'range': [188, 196], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [190, 191], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [189, 189], 'children': []}, {'type': 'ObjectExpression', 'name': '', 'range': [192, 196], 'children': [{'type': 'Property', 'name': 'error', 'range': [193, 195], 'children': [{'type': 'Literal', 'name': '"disabled"', 'range': [195, 195], 'children': []}]}]}]}]}]}]}
2025-01-08 10:25:17,184 - INFO - Completed main AST analysis flow
2025-01-08 10:25:17,184 - INFO - Successfully processed chunk
2025-01-08 10:25:19,473 - INFO - Step 3 result: {'nodes': [{'type': 'FunctionDeclaration', 'name': 'test_feature_flag_enabled', 'range': [67, 89], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [67, 73], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_feature_flag_enabled', 'range': [74, 80], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [74, 79], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [75, 78], 'children': []}, {'type': 'Identifier', 'name': 'test_feature_flag_enabled', 'range': [76, 100], 'children': []}, {'type': 'Parameter', 'name': 'ld_client', 'range': [78, 88], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [81, 89], 'children': [{'type': 'AssignmentExpression', 'name': 'ld_client.variation.return_value = True', 'range': [82, 88], 'children': [{'type': 'MemberExpression', 'name': 'ld_client.variation.return_value', 'range': [82, 86], 'children': []}, {'type': 'Literal', 'name': 'True', 'range': [88, 92], 'children': []}]}]}]}, {'type': 'FunctionDeclaration', 'name': 'test_function', 'range': [91, 109], 'children': [{'type': 'Decorator', 'name': '@feature_flag', 'range': [91, 96], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_function', 'range': [97, 105], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [97, 102], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [98, 101], 'children': []}, {'type': 'Identifier', 'name': 'test_function', 'range': [99, 112], 'children': []}, {'type': 'Parameter', 'name': 'user_id', 'range': [101, 113], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [106, 109], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [107, 108], 'children': [{'type': 'Literal', 'name': '"success"', 'range': [108, 116], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'result', 'range': [111, 119], 'children': [{'type': 'AssignmentExpression', 'name': 'result = test_function', 'range': [112, 118], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [112, 118], 'children': []}, {'type': 'CallExpression', 'name': 'test_function', 'range': [114, 118], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [115, 117], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': 'assert result == "success"', 'range': [120, 125], 'children': [{'type': 'BinaryExpression', 'name': 'result == "success"', 'range': [121, 124], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [121, 127], 'children': []}, {'type': 'Literal', 'name': '"success"', 'range': [124, 132], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'ld_client.variation.assert_called_once', 'range': [126, 133], 'children': [{'type': 'CallExpression', 'name': 'ld_client.variation.assert_called_once', 'range': [127, 132], 'children': []}]}]}
2025-01-08 10:25:19,473 - INFO - Starting Step 4: AST normalization
2025-01-08 10:25:19,609 - INFO - Step 3 result: {'type': 'Program', 'name': 'test_mock_flag_variation', 'range': [200, 249], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_mock_flag_variation', 'range': [200, 249], 'children': [{'type': 'BlockStatement', 'range': [206, 249], 'children': [{'type': 'WithStatement', 'range': [207, 227], 'children': [{'type': 'CallExpression', 'range': [208, 213], 'children': [{'type': 'Identifier', 'name': 'mock_flag_variation', 'range': [208, 208]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [210, 210]}, {'type': 'Literal', 'value': 'True', 'range': [212, 212]}]}, {'type': 'BlockStatement', 'range': [214, 227], 'children': [{'type': 'ExpressionStatement', 'range': [216, 227], 'children': [{'type': 'CallExpression', 'range': [217, 226], 'children': [{'type': 'MemberExpression', 'range': [217, 219], 'children': [{'type': 'Identifier', 'name': 'ld_client', 'range': [217, 217]}, {'type': 'Identifier', 'name': 'variation', 'range': [219, 219]}]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [221, 221]}, {'type': 'Literal', 'value': 'None', 'range': [223, 223]}, {'type': 'Literal', 'value': 'False', 'range': [225, 225]}]}]}]}]}, {'type': 'WithStatement', 'range': [229, 249], 'children': [{'type': 'CallExpression', 'range': [230, 235], 'children': [{'type': 'Identifier', 'name': 'mock_flag_variation', 'range': [230, 230]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [232, 232]}, {'type': 'Literal', 'value': 'False', 'range': [234, 234]}]}, {'type': 'BlockStatement', 'range': [236, 249], 'children': [{'type': 'ExpressionStatement', 'range': [238, 249], 'children': [{'type': 'CallExpression', 'range': [239, 248], 'children': [{'type': 'MemberExpression', 'range': [239, 241], 'children': [{'type': 'Identifier', 'name': 'ld_client', 'range': [239, 239]}, {'type': 'Identifier', 'name': 'variation', 'range': [241, 241]}]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [243, 243]}, {'type': 'Literal', 'value': 'None', 'range': [245, 245]}, {'type': 'Literal', 'value': 'False', 'range': [247, 247]}]}]}]}]}]}]}]}
2025-01-08 10:25:19,609 - INFO - Starting Step 4: AST normalization
2025-01-08 10:25:37,250 - INFO - Step 4 result: {'type': 'Program', 'name': 'test_mock_flag_variation', 'range': [200, 249], 'children': [{'type': 'FunctionDecl', 'name': 'test_mock_flag_variation', 'range': [200, 249], 'children': [{'type': 'BlockStatement', 'range': [206, 249], 'children': [{'type': 'WithStatement', 'range': [207, 227], 'children': [{'type': 'CallExpression', 'range': [208, 213], 'children': [{'type': 'Identifier', 'name': 'mock_flag_variation', 'range': [208, 208]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [210, 210]}, {'type': 'Literal', 'value': 'True', 'range': [212, 212]}]}, {'type': 'BlockStatement', 'range': [214, 227], 'children': [{'type': 'ExpressionStatement', 'range': [216, 227], 'children': [{'type': 'CallExpression', 'range': [217, 226], 'children': [{'type': 'MemberExpression', 'range': [217, 219], 'children': [{'type': 'Identifier', 'name': 'ld_client', 'range': [217, 217]}, {'type': 'Identifier', 'name': 'variation', 'range': [219, 219]}]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [221, 221]}, {'type': 'Literal', 'value': 'None', 'range': [223, 223]}, {'type': 'Literal', 'value': 'False', 'range': [225, 225]}]}]}]}]}, {'type': 'WithStatement', 'range': [229, 249], 'children': [{'type': 'CallExpression', 'range': [230, 235], 'children': [{'type': 'Identifier', 'name': 'mock_flag_variation', 'range': [230, 230]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [232, 232]}, {'type': 'Literal', 'value': 'False', 'range': [234, 234]}]}, {'type': 'BlockStatement', 'range': [236, 249], 'children': [{'type': 'ExpressionStatement', 'range': [238, 249], 'children': [{'type': 'CallExpression', 'range': [239, 248], 'children': [{'type': 'MemberExpression', 'range': [239, 241], 'children': [{'type': 'Identifier', 'name': 'ld_client', 'range': [239, 239]}, {'type': 'Identifier', 'name': 'variation', 'range': [241, 241]}]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [243, 243]}, {'type': 'Literal', 'value': 'None', 'range': [245, 245]}, {'type': 'Literal', 'value': 'False', 'range': [247, 247]}]}]}]}]}]}]}]}
2025-01-08 10:25:37,250 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:25:41,005 - INFO - Step 4 result: {'nodes': [{'type': 'FunctionDecl', 'name': 'test_feature_flag_enabled', 'range': [67, 89], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [67, 73], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_feature_flag_enabled', 'range': [74, 80], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [74, 79], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [75, 78], 'children': []}, {'type': 'Identifier', 'name': 'test_feature_flag_enabled', 'range': [76, 100], 'children': []}, {'type': 'Parameter', 'name': 'ld_client', 'range': [78, 88], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [81, 89], 'children': [{'type': 'AssignmentExpression', 'name': 'ld_client.variation.return_value = True', 'range': [82, 88], 'children': [{'type': 'MemberExpression', 'name': 'ld_client.variation.return_value', 'range': [82, 86], 'children': []}, {'type': 'Literal', 'name': 'True', 'range': [88, 92], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': 'test_function', 'range': [91, 109], 'children': [{'type': 'Decorator', 'name': '@feature_flag', 'range': [91, 96], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_function', 'range': [97, 105], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [97, 102], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [98, 101], 'children': []}, {'type': 'Identifier', 'name': 'test_function', 'range': [99, 112], 'children': []}, {'type': 'Parameter', 'name': 'user_id', 'range': [101, 113], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [106, 109], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [107, 108], 'children': [{'type': 'Literal', 'name': '"success"', 'range': [108, 116], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'result', 'range': [111, 119], 'children': [{'type': 'AssignmentExpression', 'name': 'result = test_function', 'range': [112, 118], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [112, 118], 'children': []}, {'type': 'CallExpression', 'name': 'test_function', 'range': [114, 118], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [115, 117], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': 'assert result == "success"', 'range': [120, 125], 'children': [{'type': 'BinaryExpression', 'name': 'result == "success"', 'range': [121, 124], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [121, 127], 'children': []}, {'type': 'Literal', 'name': '"success"', 'range': [124, 132], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'ld_client.variation.assert_called_once', 'range': [126, 133], 'children': [{'type': 'CallExpression', 'name': 'ld_client.variation.assert_called_once', 'range': [127, 132], 'children': []}]}]}
2025-01-08 10:25:41,005 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:25:55,930 - INFO - Step 5 result: {'type': 'Program', 'name': 'test_mock_flag_variation', 'range': [200, 249], 'children': [{'type': 'FunctionDecl', 'name': 'test_mock_flag_variation', 'range': [200, 249], 'children': [{'type': 'BlockStatement', 'range': [206, 249], 'children': [{'type': 'WithStatement', 'range': [207, 227], 'children': [{'type': 'CallExpression', 'range': [208, 213], 'children': [{'type': 'Identifier', 'name': 'mock_flag_variation', 'range': [208, 208]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [210, 210]}, {'type': 'Literal', 'value': 'True', 'range': [212, 212]}]}, {'type': 'BlockStatement', 'range': [214, 227], 'children': [{'type': 'ExpressionStatement', 'range': [216, 227], 'children': [{'type': 'CallExpression', 'range': [217, 226], 'children': [{'type': 'MemberExpression', 'range': [217, 219], 'children': [{'type': 'Identifier', 'name': 'ld_client', 'range': [217, 217]}, {'type': 'Identifier', 'name': 'variation', 'range': [219, 219]}]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [221, 221]}, {'type': 'Literal', 'value': 'None', 'range': [223, 223]}, {'type': 'Literal', 'value': 'False', 'range': [225, 225]}]}]}]}]}, {'type': 'WithStatement', 'range': [229, 249], 'children': [{'type': 'CallExpression', 'range': [230, 235], 'children': [{'type': 'Identifier', 'name': 'mock_flag_variation', 'range': [230, 230]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [232, 232]}, {'type': 'Literal', 'value': 'False', 'range': [234, 234]}]}, {'type': 'BlockStatement', 'range': [236, 249], 'children': [{'type': 'ExpressionStatement', 'range': [238, 249], 'children': [{'type': 'CallExpression', 'range': [239, 248], 'children': [{'type': 'MemberExpression', 'range': [239, 241], 'children': [{'type': 'Identifier', 'name': 'ld_client', 'range': [239, 239]}, {'type': 'Identifier', 'name': 'variation', 'range': [241, 241]}]}, {'type': 'Literal', 'value': '"test-flag"', 'range': [243, 243]}, {'type': 'Literal', 'value': 'None', 'range': [245, 245]}, {'type': 'Literal', 'value': 'False', 'range': [247, 247]}]}]}]}]}]}]}]}
2025-01-08 10:25:55,930 - INFO - Completed main AST analysis flow
2025-01-08 10:25:55,931 - INFO - Successfully processed chunk
2025-01-08 10:26:03,749 - INFO - Step 5 result: {'type': 'Program', 'name': 'MainProgram', 'range': [67, 133], 'children': [{'type': 'FunctionDecl', 'name': 'test_feature_flag_enabled', 'range': [67, 89], 'children': [{'type': 'Decorator', 'name': '@pytest.mark.asyncio', 'range': [67, 73], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_feature_flag_enabled', 'range': [74, 80], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [74, 79], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [75, 78], 'children': []}, {'type': 'Identifier', 'name': 'test_feature_flag_enabled', 'range': [76, 100], 'children': []}, {'type': 'Parameter', 'name': 'ld_client', 'range': [78, 88], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [81, 89], 'children': [{'type': 'AssignmentExpression', 'name': 'ld_client.variation.return_value = True', 'range': [82, 88], 'children': [{'type': 'MemberExpression', 'name': 'ld_client.variation.return_value', 'range': [82, 86], 'children': []}, {'type': 'Literal', 'name': 'True', 'range': [88, 92], 'children': []}]}]}]}, {'type': 'FunctionDecl', 'name': 'test_function', 'range': [91, 109], 'children': [{'type': 'Decorator', 'name': '@feature_flag', 'range': [91, 96], 'children': []}, {'type': 'FunctionSignature', 'name': 'test_function', 'range': [97, 105], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [97, 102], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [98, 101], 'children': []}, {'type': 'Identifier', 'name': 'test_function', 'range': [99, 112], 'children': []}, {'type': 'Parameter', 'name': 'user_id', 'range': [101, 113], 'children': []}]}, {'type': 'FunctionBody', 'name': '', 'range': [106, 109], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [107, 108], 'children': [{'type': 'Literal', 'name': '"success"', 'range': [108, 116], 'children': []}]}]}]}, {'type': 'VariableDecl', 'name': 'result', 'range': [111, 119], 'children': [{'type': 'AssignmentExpression', 'name': 'result = test_function', 'range': [112, 118], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [112, 118], 'children': []}, {'type': 'CallExpression', 'name': 'test_function', 'range': [114, 118], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [115, 117], 'children': []}]}]}]}, {'type': 'ExpressionStatement', 'name': 'assert result == "success"', 'range': [120, 125], 'children': [{'type': 'BinaryExpression', 'name': 'result == "success"', 'range': [121, 124], 'children': [{'type': 'Identifier', 'name': 'result', 'range': [121, 127], 'children': []}, {'type': 'Literal', 'name': '"success"', 'range': [124, 132], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'ld_client.variation.assert_called_once', 'range': [126, 133], 'children': [{'type': 'CallExpression', 'name': 'ld_client.variation.assert_called_once', 'range': [127, 132], 'children': []}]}]}
2025-01-08 10:26:03,749 - INFO - Completed main AST analysis flow
2025-01-08 10:26:03,750 - INFO - Successfully processed chunk
2025-01-08 10:26:03,765 - INFO - Starting code generation from AST
2025-01-08 10:26:09,549 - INFO - Successfully generated code from AST
2025-01-08 10:26:09,549 - INFO - Starting static code similarity comparison
2025-01-08 10:26:09,552 - INFO - Static similarity result: {'final_score': 83.6, 'length_similarity': 85.18, 'token_similarity': 90.38, 'structure_similarity': 54.84, 'function_similarity': 100, 'complexity_similarity': 100.0, 'variable_similarity': 100}
