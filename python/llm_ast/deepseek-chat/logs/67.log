2025-01-08 09:39:37,728 - INFO - Processing sample 67
2025-01-08 09:39:37,728 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:39:43,268 - INFO - Successfully split code into 5 top-level declarations
2025-01-08 09:39:43,271 - INFO - Processing chunk #0 (size=510 chars, start_index=0)
2025-01-08 09:39:43,271 - INFO - Processing chunk with 510 chars starting at index 0
2025-01-08 09:39:43,271 - INFO - Starting main AST analysis flow
2025-01-08 09:39:43,271 - INFO - Tokenized code into 95 tokens
2025-01-08 09:39:43,271 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:39:43,277 - INFO - Processing chunk #1 (size=1127 chars, start_index=95)
2025-01-08 09:39:43,277 - INFO - Processing chunk with 1127 chars starting at index 95
2025-01-08 09:39:43,277 - INFO - Starting main AST analysis flow
2025-01-08 09:39:43,278 - INFO - Tokenized code into 130 tokens
2025-01-08 09:39:43,278 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:39:43,284 - INFO - Processing chunk #2 (size=1004 chars, start_index=225)
2025-01-08 09:39:43,288 - INFO - Processing chunk with 1004 chars starting at index 225
2025-01-08 09:39:43,289 - INFO - Starting main AST analysis flow
2025-01-08 09:39:43,289 - INFO - Tokenized code into 117 tokens
2025-01-08 09:39:43,289 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:39:43,292 - INFO - Processing chunk #4 (size=2096 chars, start_index=885)
2025-01-08 09:39:43,300 - INFO - Processing chunk with 2096 chars starting at index 885
2025-01-08 09:39:43,300 - INFO - Starting main AST analysis flow
2025-01-08 09:39:43,285 - INFO - Processing chunk #3 (size=3766 chars, start_index=342)
2025-01-08 09:39:43,300 - INFO - Processing chunk with 3766 chars starting at index 342
2025-01-08 09:39:43,301 - INFO - Starting main AST analysis flow
2025-01-08 09:39:43,301 - INFO - Tokenized code into 543 tokens
2025-01-08 09:39:43,302 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:39:43,300 - INFO - Tokenized code into 282 tokens
2025-01-08 09:39:43,310 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:39:45,881 - INFO - Step 1 result: {'type': 'Program', 'name': 'on_graph_deactivate', 'range': [225, 341], 'children': []}
2025-01-08 09:39:45,881 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:39:46,040 - INFO - Step 1 result: {'type': 'Program', 'name': 'on_node_deactivate', 'range': [885, 1165], 'children': []}
2025-01-08 09:39:46,040 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:39:46,527 - INFO - Step 1 result: {'type': 'Program', 'name': 'on_graph_activate', 'range': [95, 224], 'children': []}
2025-01-08 09:39:46,527 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:39:47,005 - INFO - Step 1 result: {'type': 'Program', 'name': 'on_node_activate', 'range': [342, 884], 'children': []}
2025-01-08 09:39:47,005 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:39:53,094 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 94], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 1], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 12], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [15, 24], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [26, 33], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [35, 42], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [44, 51], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [54, 68], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [58, 67], 'children': []}, {'type': 'ImportDeclaration', 'name': '', 'range': [69, 76], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [79, 83], 'children': []}, {'type': 'VariableDeclaration', 'name': 'logger', 'range': [86, 94], 'children': []}]}
2025-01-08 09:39:53,095 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:40:07,343 - INFO - Step 2 result: {'type': 'Program', 'name': 'on_graph_activate', 'range': [95, 224], 'children': [{'type': 'FunctionDeclaration', 'name': 'on_graph_activate', 'range': [95, 224], 'children': [{'type': 'FunctionSignature', 'name': 'on_graph_activate', 'range': [95, 117], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [95, 99], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [96, 99], 'children': []}, {'type': 'Identifier', 'name': 'on_graph_activate', 'range': [97, 115], 'children': []}, {'type': 'ParameterList', 'name': 'parameters', 'range': [98, 115], 'children': [{'type': 'Parameter', 'name': 'graph', 'range': [100, 102], 'children': []}, {'type': 'Parameter', 'name': 'get_credentials', 'range': [104, 113], 'children': []}]}]}, {'type': 'FunctionBody', 'name': 'body', 'range': [118, 224], 'children': [{'type': 'Comment', 'name': 'docstring', 'range': [118, 120], 'children': []}, {'type': 'Comment', 'name': 'Compare nodes in new_graph_version with previous_graph_version', 'range': [122, 129], 'children': []}, {'type': 'VariableDeclaration', 'name': 'updated_nodes', 'range': [130, 133], 'children': []}, {'type': 'ForStatement', 'name': 'for new_node in graph.nodes', 'range': [135, 213], 'children': [{'type': 'VariableDeclaration', 'name': 'node_credentials', 'range': [143, 146], 'children': []}, {'type': 'IfStatement', 'name': 'if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME)', 'range': [147, 170], 'children': [{'type': 'AssignmentExpression', 'name': 'node_credentials = get_credentials(creds_meta["id"])', 'range': [161, 170], 'children': []}]}, {'type': 'IfStatement', 'name': 'if not node_credentials', 'range': [171, 187], 'children': [{'type': 'ThrowStatement', 'name': 'raise ValueError', 'range': [176, 187], 'children': []}]}, {'type': 'AwaitExpression', 'name': 'await on_node_activate(graph.user_id, new_node, credentials=node_credentials)', 'range': [189, 205], 'children': []}, {'type': 'ExpressionStatement', 'name': 'updated_nodes.append(updated_node)', 'range': [207, 213], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'graph.nodes = updated_nodes', 'range': [215, 220], 'children': []}, {'type': 'ReturnStatement', 'name': 'return graph', 'range': [221, 223], 'children': []}]}]}]}
2025-01-08 09:40:07,343 - INFO - Starting Step 3: AST simplification
2025-01-08 09:40:08,517 - INFO - Step 2 result: {'type': 'Program', 'name': 'on_graph_deactivate', 'range': [225, 341], 'children': [{'type': 'FunctionDeclaration', 'name': 'on_graph_deactivate', 'range': [225, 341], 'children': [{'type': 'AsyncKeyword', 'name': 'async', 'range': [225, 229], 'children': []}, {'type': 'DefKeyword', 'name': 'def', 'range': [226, 229], 'children': []}, {'type': 'FunctionName', 'name': 'on_graph_deactivate', 'range': [227, 247], 'children': []}, {'type': 'ParameterList', 'name': 'parameters', 'range': [228, 245], 'children': [{'type': 'Parameter', 'name': 'graph', 'range': [230, 232], 'children': []}, {'type': 'Parameter', 'name': 'get_credentials', 'range': [234, 243], 'children': []}]}, {'type': 'FunctionBody', 'name': 'body', 'range': [247, 341], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [248, 250], 'children': []}, {'type': 'VariableDeclaration', 'name': 'updated_nodes', 'range': [252, 255], 'children': []}, {'type': 'ForStatement', 'name': 'for_loop', 'range': [257, 330], 'children': [{'type': 'VariableDeclaration', 'name': 'node', 'range': [258, 259], 'children': []}, {'type': 'Expression', 'name': 'graph.nodes', 'range': [260, 262], 'children': []}, {'type': 'Block', 'name': 'for_body', 'range': [263, 330], 'children': [{'type': 'VariableDeclaration', 'name': 'node_credentials', 'range': [265, 267], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [269, 292], 'children': [{'type': 'Expression', 'name': 'creds_meta', 'range': [270, 271], 'children': []}, {'type': 'Assignment', 'name': 'creds_meta', 'range': [272, 281], 'children': []}, {'type': 'Expression', 'name': 'get_credentials', 'range': [285, 291], 'children': []}]}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [293, 309], 'children': [{'type': 'Expression', 'name': 'not node_credentials', 'range': [294, 296], 'children': []}, {'type': 'Expression', 'name': 'logger.error', 'range': [298, 309], 'children': []}]}, {'type': 'Expression', 'name': 'updated_node', 'range': [312, 322], 'children': []}, {'type': 'Expression', 'name': 'updated_nodes.append', 'range': [324, 329], 'children': []}]}]}, {'type': 'Expression', 'name': 'graph.nodes', 'range': [332, 336], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [338, 339], 'children': []}]}]}]}
2025-01-08 09:40:08,518 - INFO - Starting Step 3: AST simplification
2025-01-08 09:40:17,840 - INFO - Step 2 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 1], 'children': [{'type': 'ImportSpecifier', 'name': 'logging', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 12], 'children': [{'type': 'ImportSpecifier', 'name': 'TYPE_CHECKING', 'range': [6, 6], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Callable', 'range': [8, 8], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Optional', 'range': [10, 10], 'children': []}, {'type': 'ImportSpecifier', 'name': 'cast', 'range': [12, 12], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [15, 24], 'children': [{'type': 'ImportSpecifier', 'name': 'BlockWebhookConfig', 'range': [22, 22], 'children': []}, {'type': 'ImportSpecifier', 'name': 'get_block', 'range': [24, 24], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [26, 33], 'children': [{'type': 'ImportSpecifier', 'name': 'set_node_webhook', 'range': [33, 33], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [35, 42], 'children': [{'type': 'ImportSpecifier', 'name': 'CREDENTIALS_FIELD_NAME', 'range': [42, 42], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [44, 51], 'children': [{'type': 'ImportSpecifier', 'name': 'WEBHOOK_MANAGERS_BY_NAME', 'range': [51, 51], 'children': []}]}, {'type': 'IfStatement', 'name': '', 'range': [54, 68], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [58, 67], 'children': [{'type': 'ImportSpecifier', 'name': 'GraphModel', 'range': [65, 65], 'children': []}, {'type': 'ImportSpecifier', 'name': 'NodeModel', 'range': [67, 67], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [69, 76], 'children': [{'type': 'ImportSpecifier', 'name': 'Credentials', 'range': [76, 76], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [79, 83], 'children': [{'type': 'ImportSpecifier', 'name': 'BaseWebhooksManager', 'range': [83, 83], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'logger', 'range': [86, 94], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [87, 94], 'children': [{'type': 'CallExpression', 'name': 'getLogger', 'range': [90, 93], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [92, 92], 'children': []}]}]}]}]}
2025-01-08 09:40:17,840 - INFO - Starting Step 3: AST simplification
2025-01-08 09:40:28,158 - INFO - Step 3 result: {'type': 'Program', 'name': 'on_graph_activate', 'range': [95, 224], 'children': [{'type': 'FunctionDeclaration', 'name': 'on_graph_activate', 'range': [95, 224], 'children': [{'type': 'FunctionSignature', 'name': 'on_graph_activate', 'range': [95, 117], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [95, 99], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [96, 99], 'children': []}, {'type': 'Identifier', 'name': 'on_graph_activate', 'range': [97, 115], 'children': []}, {'type': 'ParameterList', 'name': 'parameters', 'range': [98, 115], 'children': [{'type': 'Parameter', 'name': 'graph', 'range': [100, 102], 'children': []}, {'type': 'Parameter', 'name': 'get_credentials', 'range': [104, 113], 'children': []}]}]}, {'type': 'FunctionBody', 'name': 'body', 'range': [118, 224], 'children': [{'type': 'Comment', 'name': 'docstring', 'range': [118, 120], 'children': []}, {'type': 'VariableDeclaration', 'name': 'updated_nodes', 'range': [130, 133], 'children': []}, {'type': 'ForStatement', 'name': 'for new_node in graph.nodes', 'range': [135, 213], 'children': [{'type': 'VariableDeclaration', 'name': 'node_credentials', 'range': [143, 146], 'children': []}, {'type': 'IfStatement', 'name': 'if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME)', 'range': [147, 170], 'children': [{'type': 'AssignmentExpression', 'name': 'node_credentials = get_credentials(creds_meta["id"])', 'range': [161, 170], 'children': []}]}, {'type': 'IfStatement', 'name': 'if not node_credentials', 'range': [171, 187], 'children': [{'type': 'ThrowStatement', 'name': 'raise ValueError', 'range': [176, 187], 'children': []}]}, {'type': 'AwaitExpression', 'name': 'await on_node_activate(graph.user_id, new_node, credentials=node_credentials)', 'range': [189, 205], 'children': []}, {'type': 'ExpressionStatement', 'name': 'updated_nodes.append(updated_node)', 'range': [207, 213], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'graph.nodes = updated_nodes', 'range': [215, 220], 'children': []}, {'type': 'ReturnStatement', 'name': 'return graph', 'range': [221, 223], 'children': []}]}]}]}
2025-01-08 09:40:28,158 - INFO - Starting Step 4: AST normalization
2025-01-08 09:40:28,884 - INFO - Step 2 result: {'type': 'Program', 'name': 'on_node_deactivate', 'range': [885, 1165], 'children': [{'type': 'FunctionDeclaration', 'name': 'on_node_deactivate', 'range': [885, 1165], 'children': [{'type': 'FunctionSignature', 'name': 'on_node_deactivate', 'range': [885, 923], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [885, 889], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [886, 889], 'children': []}, {'type': 'Identifier', 'name': 'on_node_deactivate', 'range': [887, 907], 'children': []}, {'type': 'ParameterList', 'name': 'parameters', 'range': [888, 918], 'children': [{'type': 'Parameter', 'name': 'node', 'range': [890, 892], 'children': []}, {'type': 'Parameter', 'name': 'credentials', 'range': [898, 905], 'children': []}, {'type': 'Parameter', 'name': 'webhooks_manager', 'range': [908, 915], 'children': []}]}, {'type': 'ReturnType', 'name': 'return_type', 'range': [919, 921], 'children': []}]}, {'type': 'FunctionBody', 'name': 'body', 'range': [924, 1165], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [924, 926], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [929, 935], 'children': []}, {'type': 'Assignment', 'name': 'block', 'range': [937, 945], 'children': []}, {'type': 'IfStatement', 'name': 'if_not_block', 'range': [946, 959], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [946, 948], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [949, 959], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [951, 958], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if_not_block_webhook_config', 'range': [961, 970], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [961, 963], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [964, 970], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [968, 969], 'children': []}]}]}, {'type': 'Assignment', 'name': 'provider', 'range': [972, 979], 'children': []}, {'type': 'IfStatement', 'name': 'if_provider_not_in_WEBHOOK_MANAGERS_BY_NAME', 'range': [980, 997], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [980, 983], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [984, 997], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [987, 996], 'children': []}]}]}, {'type': 'Assignment', 'name': 'webhooks_manager', 'range': [999, 1007], 'children': []}, {'type': 'IfStatement', 'name': 'if_node_webhook_id', 'range': [1009, 1043], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [1009, 1013], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [1014, 1043], 'children': [{'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1015, 1021], 'children': []}, {'type': 'IfStatement', 'name': 'if_not_node_webhook', 'range': [1023, 1042], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [1023, 1028], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [1029, 1042], 'children': [{'type': 'ExpressionStatement', 'name': 'logger.error', 'range': [1030, 1036], 'children': []}, {'type': 'RaiseStatement', 'name': 'raise', 'range': [1038, 1041], 'children': []}]}]}]}]}, {'type': 'Comment', 'name': 'Detach webhook from node', 'range': [1045, 1050], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1051, 1057], 'children': []}, {'type': 'Assignment', 'name': 'updated_node', 'range': [1059, 1070], 'children': []}, {'type': 'Comment', 'name': 'Prune and deregister the webhook if it is no longer used anywhere', 'range': [1072, 1085], 'children': []}, {'type': 'Assignment', 'name': 'webhook', 'range': [1086, 1091], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1092, 1103], 'children': []}, {'type': 'AwaitExpression', 'name': 'await', 'range': [1105, 1116], 'children': []}, {'type': 'IfStatement', 'name': 'if_CREDENTIALS_FIELD_NAME_in_block_input_schema_model_fields_and_not_credentials', 'range': [1117, 1150], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [1117, 1132], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [1133, 1150], 'children': [{'type': 'ExpressionStatement', 'name': 'logger.warning', 'range': [1135, 1149], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [1151, 1152], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1155, 1161], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [1163, 1164], 'children': []}]}]}]}
2025-01-08 09:40:28,884 - INFO - Starting Step 3: AST simplification
2025-01-08 09:40:30,329 - INFO - Step 3 result: {'type': 'Program', 'name': 'on_graph_deactivate', 'range': [225, 341], 'children': [{'type': 'FunctionDeclaration', 'name': 'on_graph_deactivate', 'range': [225, 341], 'children': [{'type': 'AsyncKeyword', 'name': 'async', 'range': [225, 229], 'children': []}, {'type': 'DefKeyword', 'name': 'def', 'range': [226, 229], 'children': []}, {'type': 'FunctionName', 'name': 'on_graph_deactivate', 'range': [227, 247], 'children': []}, {'type': 'ParameterList', 'name': 'parameters', 'range': [228, 245], 'children': [{'type': 'Parameter', 'name': 'graph', 'range': [230, 232], 'children': []}, {'type': 'Parameter', 'name': 'get_credentials', 'range': [234, 243], 'children': []}]}, {'type': 'FunctionBody', 'name': 'body', 'range': [247, 341], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [248, 250], 'children': []}, {'type': 'VariableDeclaration', 'name': 'updated_nodes', 'range': [252, 255], 'children': []}, {'type': 'ForStatement', 'name': 'for_loop', 'range': [257, 330], 'children': [{'type': 'VariableDeclaration', 'name': 'node', 'range': [258, 259], 'children': []}, {'type': 'Expression', 'name': 'graph.nodes', 'range': [260, 262], 'children': []}, {'type': 'Block', 'name': 'for_body', 'range': [263, 330], 'children': [{'type': 'VariableDeclaration', 'name': 'node_credentials', 'range': [265, 267], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [269, 292], 'children': [{'type': 'Expression', 'name': 'creds_meta', 'range': [270, 271], 'children': []}, {'type': 'Assignment', 'name': 'creds_meta', 'range': [272, 281], 'children': []}, {'type': 'Expression', 'name': 'get_credentials', 'range': [285, 291], 'children': []}]}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [293, 309], 'children': [{'type': 'Expression', 'name': 'not node_credentials', 'range': [294, 296], 'children': []}, {'type': 'Expression', 'name': 'logger.error', 'range': [298, 309], 'children': []}]}, {'type': 'Expression', 'name': 'updated_node', 'range': [312, 322], 'children': []}, {'type': 'Expression', 'name': 'updated_nodes.append', 'range': [324, 329], 'children': []}]}]}, {'type': 'Expression', 'name': 'graph.nodes', 'range': [332, 336], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [338, 339], 'children': []}]}]}]}
2025-01-08 09:40:30,329 - INFO - Starting Step 4: AST normalization
2025-01-08 09:40:40,742 - INFO - Step 3 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 1], 'children': [{'type': 'ImportSpecifier', 'name': 'logging', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 12], 'children': [{'type': 'ImportSpecifier', 'name': 'TYPE_CHECKING', 'range': [6, 6], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Callable', 'range': [8, 8], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Optional', 'range': [10, 10], 'children': []}, {'type': 'ImportSpecifier', 'name': 'cast', 'range': [12, 12], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [15, 24], 'children': [{'type': 'ImportSpecifier', 'name': 'BlockWebhookConfig', 'range': [22, 22], 'children': []}, {'type': 'ImportSpecifier', 'name': 'get_block', 'range': [24, 24], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [26, 33], 'children': [{'type': 'ImportSpecifier', 'name': 'set_node_webhook', 'range': [33, 33], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [35, 42], 'children': [{'type': 'ImportSpecifier', 'name': 'CREDENTIALS_FIELD_NAME', 'range': [42, 42], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [44, 51], 'children': [{'type': 'ImportSpecifier', 'name': 'WEBHOOK_MANAGERS_BY_NAME', 'range': [51, 51], 'children': []}]}, {'type': 'IfStatement', 'name': '', 'range': [54, 68], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [58, 67], 'children': [{'type': 'ImportSpecifier', 'name': 'GraphModel', 'range': [65, 65], 'children': []}, {'type': 'ImportSpecifier', 'name': 'NodeModel', 'range': [67, 67], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [69, 76], 'children': [{'type': 'ImportSpecifier', 'name': 'Credentials', 'range': [76, 76], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [79, 83], 'children': [{'type': 'ImportSpecifier', 'name': 'BaseWebhooksManager', 'range': [83, 83], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'logger', 'range': [86, 94], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [87, 94], 'children': [{'type': 'CallExpression', 'name': 'getLogger', 'range': [90, 93], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [92, 92], 'children': []}]}]}]}]}
2025-01-08 09:40:40,742 - INFO - Starting Step 4: AST normalization
2025-01-08 09:40:49,005 - INFO - Step 4 result: {'type': 'Program', 'name': 'on_graph_activate', 'range': [95, 224], 'children': [{'type': 'FunctionDecl', 'name': 'on_graph_activate', 'range': [95, 224], 'children': [{'type': 'FunctionSignature', 'name': 'on_graph_activate', 'range': [95, 117], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [95, 99], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [96, 99], 'children': []}, {'type': 'Identifier', 'name': 'on_graph_activate', 'range': [97, 115], 'children': []}, {'type': 'ParameterList', 'name': 'parameters', 'range': [98, 115], 'children': [{'type': 'Parameter', 'name': 'graph', 'range': [100, 102], 'children': []}, {'type': 'Parameter', 'name': 'get_credentials', 'range': [104, 113], 'children': []}]}]}, {'type': 'FunctionBody', 'name': 'body', 'range': [118, 224], 'children': [{'type': 'Comment', 'name': 'docstring', 'range': [118, 120], 'children': []}, {'type': 'VariableDecl', 'name': 'updated_nodes', 'range': [130, 133], 'children': []}, {'type': 'ForStatement', 'name': 'for new_node in graph.nodes', 'range': [135, 213], 'children': [{'type': 'VariableDecl', 'name': 'node_credentials', 'range': [143, 146], 'children': []}, {'type': 'IfStatement', 'name': 'if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME)', 'range': [147, 170], 'children': [{'type': 'AssignmentExpression', 'name': 'node_credentials = get_credentials(creds_meta["id"])', 'range': [161, 170], 'children': []}]}, {'type': 'IfStatement', 'name': 'if not node_credentials', 'range': [171, 187], 'children': [{'type': 'ThrowStatement', 'name': 'raise ValueError', 'range': [176, 187], 'children': []}]}, {'type': 'AwaitExpression', 'name': 'await on_node_activate(graph.user_id, new_node, credentials=node_credentials)', 'range': [189, 205], 'children': []}, {'type': 'ExpressionStatement', 'name': 'updated_nodes.append(updated_node)', 'range': [207, 213], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'graph.nodes = updated_nodes', 'range': [215, 220], 'children': []}, {'type': 'ReturnStatement', 'name': 'return graph', 'range': [221, 223], 'children': []}]}]}]}
2025-01-08 09:40:49,005 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:40:54,296 - INFO - Step 4 result: {'type': 'Program', 'name': 'on_graph_deactivate', 'range': [225, 341], 'children': [{'type': 'FunctionDecl', 'name': 'on_graph_deactivate', 'range': [225, 341], 'children': [{'type': 'AsyncKeyword', 'name': 'async', 'range': [225, 229], 'children': []}, {'type': 'DefKeyword', 'name': 'def', 'range': [226, 229], 'children': []}, {'type': 'FunctionName', 'name': 'on_graph_deactivate', 'range': [227, 247], 'children': []}, {'type': 'ParameterList', 'name': 'parameters', 'range': [228, 245], 'children': [{'type': 'Parameter', 'name': 'graph', 'range': [230, 232], 'children': []}, {'type': 'Parameter', 'name': 'get_credentials', 'range': [234, 243], 'children': []}]}, {'type': 'FunctionBody', 'name': 'body', 'range': [247, 341], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [248, 250], 'children': []}, {'type': 'VariableDecl', 'name': 'updated_nodes', 'range': [252, 255], 'children': []}, {'type': 'ForStatement', 'name': 'for_loop', 'range': [257, 330], 'children': [{'type': 'VariableDecl', 'name': 'node', 'range': [258, 259], 'children': []}, {'type': 'Identifier', 'name': 'graph.nodes', 'range': [260, 262], 'children': []}, {'type': 'Block', 'name': 'for_body', 'range': [263, 330], 'children': [{'type': 'VariableDecl', 'name': 'node_credentials', 'range': [265, 267], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [269, 292], 'children': [{'type': 'Identifier', 'name': 'creds_meta', 'range': [270, 271], 'children': []}, {'type': 'Assignment', 'name': 'creds_meta', 'range': [272, 281], 'children': []}, {'type': 'CallExpression', 'name': 'get_credentials', 'range': [285, 291], 'children': []}]}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [293, 309], 'children': [{'type': 'UnaryExpression', 'name': 'not node_credentials', 'range': [294, 296], 'children': []}, {'type': 'CallExpression', 'name': 'logger.error', 'range': [298, 309], 'children': []}]}, {'type': 'Identifier', 'name': 'updated_node', 'range': [312, 322], 'children': []}, {'type': 'CallExpression', 'name': 'updated_nodes.append', 'range': [324, 329], 'children': []}]}]}, {'type': 'Identifier', 'name': 'graph.nodes', 'range': [332, 336], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [338, 339], 'children': []}]}]}]}
2025-01-08 09:40:54,296 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:41:04,456 - INFO - Step 4 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 1], 'children': [{'type': 'ImportSpecifier', 'name': 'logging', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 12], 'children': [{'type': 'ImportSpecifier', 'name': 'TYPE_CHECKING', 'range': [6, 6], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Callable', 'range': [8, 8], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Optional', 'range': [10, 10], 'children': []}, {'type': 'ImportSpecifier', 'name': 'cast', 'range': [12, 12], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [15, 24], 'children': [{'type': 'ImportSpecifier', 'name': 'BlockWebhookConfig', 'range': [22, 22], 'children': []}, {'type': 'ImportSpecifier', 'name': 'get_block', 'range': [24, 24], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [26, 33], 'children': [{'type': 'ImportSpecifier', 'name': 'set_node_webhook', 'range': [33, 33], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [35, 42], 'children': [{'type': 'ImportSpecifier', 'name': 'CREDENTIALS_FIELD_NAME', 'range': [42, 42], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [44, 51], 'children': [{'type': 'ImportSpecifier', 'name': 'WEBHOOK_MANAGERS_BY_NAME', 'range': [51, 51], 'children': []}]}, {'type': 'IfStatement', 'name': '', 'range': [54, 68], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [58, 67], 'children': [{'type': 'ImportSpecifier', 'name': 'GraphModel', 'range': [65, 65], 'children': []}, {'type': 'ImportSpecifier', 'name': 'NodeModel', 'range': [67, 67], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [69, 76], 'children': [{'type': 'ImportSpecifier', 'name': 'Credentials', 'range': [76, 76], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [79, 83], 'children': [{'type': 'ImportSpecifier', 'name': 'BaseWebhooksManager', 'range': [83, 83], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'logger', 'range': [86, 94], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [87, 94], 'children': [{'type': 'CallExpression', 'name': 'getLogger', 'range': [90, 93], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [92, 92], 'children': []}]}]}]}]}
2025-01-08 09:41:04,456 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:41:08,718 - INFO - Step 5 result: {'type': 'Program', 'name': 'on_graph_activate', 'range': [95, 224], 'children': [{'type': 'FunctionDecl', 'name': 'on_graph_activate', 'range': [95, 224], 'children': [{'type': 'FunctionSignature', 'name': 'on_graph_activate', 'range': [95, 117], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [95, 99], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [96, 99], 'children': []}, {'type': 'Identifier', 'name': 'on_graph_activate', 'range': [97, 115], 'children': []}, {'type': 'ParameterList', 'name': 'parameters', 'range': [98, 115], 'children': [{'type': 'Parameter', 'name': 'graph', 'range': [100, 102], 'children': []}, {'type': 'Parameter', 'name': 'get_credentials', 'range': [104, 113], 'children': []}]}]}, {'type': 'FunctionBody', 'name': 'body', 'range': [118, 224], 'children': [{'type': 'Comment', 'name': 'docstring', 'range': [118, 120], 'children': []}, {'type': 'VariableDecl', 'name': 'updated_nodes', 'range': [130, 133], 'children': []}, {'type': 'ForStatement', 'name': 'for new_node in graph.nodes', 'range': [135, 213], 'children': [{'type': 'VariableDecl', 'name': 'node_credentials', 'range': [143, 146], 'children': []}, {'type': 'IfStatement', 'name': 'if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME)', 'range': [147, 170], 'children': [{'type': 'AssignmentExpression', 'name': 'node_credentials = get_credentials(creds_meta["id"])', 'range': [161, 170], 'children': []}]}, {'type': 'IfStatement', 'name': 'if not node_credentials', 'range': [171, 187], 'children': [{'type': 'ThrowStatement', 'name': 'raise ValueError', 'range': [176, 187], 'children': []}]}, {'type': 'AwaitExpression', 'name': 'await on_node_activate(graph.user_id, new_node, credentials=node_credentials)', 'range': [189, 205], 'children': []}, {'type': 'ExpressionStatement', 'name': 'updated_nodes.append(updated_node)', 'range': [207, 213], 'children': []}]}, {'type': 'AssignmentExpression', 'name': 'graph.nodes = updated_nodes', 'range': [215, 220], 'children': []}, {'type': 'ReturnStatement', 'name': 'return graph', 'range': [221, 223], 'children': []}]}]}]}
2025-01-08 09:41:08,719 - INFO - Completed main AST analysis flow
2025-01-08 09:41:08,719 - INFO - Successfully processed chunk
2025-01-08 09:41:13,057 - INFO - Step 3 result: {'type': 'Program', 'name': 'on_node_deactivate', 'range': [885, 1165], 'children': [{'type': 'FunctionDeclaration', 'name': 'on_node_deactivate', 'range': [885, 1165], 'children': [{'type': 'FunctionSignature', 'name': 'on_node_deactivate', 'range': [885, 923], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [885, 889], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [886, 889], 'children': []}, {'type': 'Identifier', 'name': 'on_node_deactivate', 'range': [887, 907], 'children': []}, {'type': 'ParameterList', 'name': 'parameters', 'range': [888, 918], 'children': [{'type': 'Parameter', 'name': 'node', 'range': [890, 892], 'children': []}, {'type': 'Parameter', 'name': 'credentials', 'range': [898, 905], 'children': []}, {'type': 'Parameter', 'name': 'webhooks_manager', 'range': [908, 915], 'children': []}]}, {'type': 'ReturnType', 'name': 'return_type', 'range': [919, 921], 'children': []}]}, {'type': 'FunctionBody', 'name': 'body', 'range': [924, 1165], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [924, 926], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [929, 935], 'children': []}, {'type': 'Assignment', 'name': 'block', 'range': [937, 945], 'children': []}, {'type': 'IfStatement', 'name': 'if_not_block', 'range': [946, 959], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [946, 948], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [949, 959], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [951, 958], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if_not_block_webhook_config', 'range': [961, 970], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [961, 963], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [964, 970], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [968, 969], 'children': []}]}]}, {'type': 'Assignment', 'name': 'provider', 'range': [972, 979], 'children': []}, {'type': 'IfStatement', 'name': 'if_provider_not_in_WEBHOOK_MANAGERS_BY_NAME', 'range': [980, 997], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [980, 983], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [984, 997], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [987, 996], 'children': []}]}]}, {'type': 'Assignment', 'name': 'webhooks_manager', 'range': [999, 1007], 'children': []}, {'type': 'IfStatement', 'name': 'if_node_webhook_id', 'range': [1009, 1043], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [1009, 1013], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [1014, 1043], 'children': [{'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1015, 1021], 'children': []}, {'type': 'IfStatement', 'name': 'if_not_node_webhook', 'range': [1023, 1042], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [1023, 1028], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [1029, 1042], 'children': [{'type': 'ExpressionStatement', 'name': 'logger.error', 'range': [1030, 1036], 'children': []}, {'type': 'RaiseStatement', 'name': 'raise', 'range': [1038, 1041], 'children': []}]}]}]}]}, {'type': 'Comment', 'name': 'Detach webhook from node', 'range': [1045, 1050], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1051, 1057], 'children': []}, {'type': 'Assignment', 'name': 'updated_node', 'range': [1059, 1070], 'children': []}, {'type': 'Comment', 'name': 'Prune and deregister the webhook if it is no longer used anywhere', 'range': [1072, 1085], 'children': []}, {'type': 'Assignment', 'name': 'webhook', 'range': [1086, 1091], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1092, 1103], 'children': []}, {'type': 'AwaitExpression', 'name': 'await', 'range': [1105, 1116], 'children': []}, {'type': 'IfStatement', 'name': 'if_CREDENTIALS_FIELD_NAME_in_block_input_schema_model_fields_and_not_credentials', 'range': [1117, 1150], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [1117, 1132], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [1133, 1150], 'children': [{'type': 'ExpressionStatement', 'name': 'logger.warning', 'range': [1135, 1149], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [1151, 1152], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1155, 1161], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [1163, 1164], 'children': []}]}]}]}
2025-01-08 09:41:13,057 - INFO - Starting Step 4: AST normalization
2025-01-08 09:41:15,763 - INFO - Step 2 result: {'type': 'Program', 'name': 'on_node_activate', 'range': [342, 884], 'children': [{'type': 'FunctionDeclaration', 'name': 'on_node_activate', 'range': [342, 378], 'children': [{'type': 'Parameter', 'name': 'user_id', 'range': [347, 349], 'children': []}, {'type': 'Parameter', 'name': 'node', 'range': [352, 354], 'children': []}, {'type': 'Parameter', 'name': 'credentials', 'range': [360, 367], 'children': []}, {'type': 'ReturnType', 'name': 'NodeModel', 'range': [373, 373], 'children': []}, {'type': 'Docstring', 'name': 'Hook to be called when the node is activated/created', 'range': [376, 378], 'children': []}]}, {'type': 'Block', 'name': 'block', 'range': [381, 389], 'children': [{'type': 'Assignment', 'name': 'block', 'range': [381, 389], 'children': [{'type': 'FunctionCall', 'name': 'get_block', 'range': [383, 388], 'children': [{'type': 'Argument', 'name': 'node.block_id', 'range': [385, 387], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if not block', 'range': [390, 403], 'children': [{'type': 'Condition', 'name': 'not block', 'range': [390, 392], 'children': []}, {'type': 'Block', 'name': 'raise ValueError', 'range': [395, 402], 'children': [{'type': 'FunctionCall', 'name': 'ValueError', 'range': [396, 401], 'children': [{'type': 'Argument', 'name': 'f"Node #{node.id} is instance of unknown block #{node.block_id}"', 'range': [399, 400], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if not block.webhook_config', 'range': [405, 414], 'children': [{'type': 'Condition', 'name': 'not block.webhook_config', 'range': [405, 410], 'children': []}, {'type': 'Block', 'name': 'return node', 'range': [412, 414], 'children': []}]}, {'type': 'Assignment', 'name': 'provider', 'range': [416, 423], 'children': [{'type': 'MemberAccess', 'name': 'block.webhook_config.provider', 'range': [418, 422], 'children': []}]}, {'type': 'IfStatement', 'name': 'if provider not in WEBHOOK_MANAGERS_BY_NAME', 'range': [424, 441], 'children': [{'type': 'Condition', 'name': 'provider not in WEBHOOK_MANAGERS_BY_NAME', 'range': [424, 429], 'children': []}, {'type': 'Block', 'name': 'raise ValueError', 'range': [431, 440], 'children': [{'type': 'FunctionCall', 'name': 'ValueError', 'range': [432, 439], 'children': [{'type': 'Argument', 'name': 'f"Block #{block.id} has webhook_config for provider {provider} "', 'range': [435, 436], 'children': []}, {'type': 'Argument', 'name': '"which does not support webhooks"', 'range': [438, 438], 'children': []}]}]}]}, {'type': 'FunctionCall', 'name': 'logger.debug', 'range': [443, 451], 'children': [{'type': 'Argument', 'name': 'f"Activating webhook node #{node.id} with config {block.webhook_config}"', 'range': [448, 449], 'children': []}]}, {'type': 'Assignment', 'name': 'webhooks_manager', 'range': [454, 462], 'children': [{'type': 'FunctionCall', 'name': 'WEBHOOK_MANAGERS_BY_NAME[provider]', 'range': [456, 461], 'children': []}]}, {'type': 'IfStatement', 'name': 'if auto_setup_webhook', 'range': [464, 477], 'children': [{'type': 'Condition', 'name': 'auto_setup_webhook', 'range': [464, 466], 'children': []}, {'type': 'Block', 'name': 'try', 'range': [478, 505], 'children': [{'type': 'Assignment', 'name': 'resource', 'range': [481, 497], 'children': [{'type': 'FunctionCall', 'name': 'block.webhook_config.resource_format.format', 'range': [483, 496], 'children': [{'type': 'Argument', 'name': '**node.input_default', 'range': [491, 495], 'children': []}]}]}, {'type': 'Catch', 'name': 'KeyError', 'range': [498, 505], 'children': [{'type': 'Assignment', 'name': 'resource', 'range': [502, 504], 'children': []}]}]}]}, {'type': 'FunctionCall', 'name': 'logger.debug', 'range': [506, 514], 'children': [{'type': 'Argument', 'name': 'f"Constructed resource string {resource} from input {node.input_default}"', 'range': [511, 512], 'children': []}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [516, 528], 'children': [{'type': 'Assignment', 'name': 'resource', 'range': [519, 521], 'children': []}]}, {'type': 'Assignment', 'name': 'needs_credentials', 'range': [530, 539], 'children': [{'type': 'MemberAccess', 'name': 'CREDENTIALS_FIELD_NAME in block.input_schema.model_fields', 'range': [532, 538], 'children': []}]}, {'type': 'Assignment', 'name': 'credentials_meta', 'range': [540, 558], 'children': [{'type': 'Ternary', 'name': 'node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None', 'range': [542, 557], 'children': []}]}, {'type': 'Assignment', 'name': 'event_filter_input_name', 'range': [559, 566], 'children': [{'type': 'MemberAccess', 'name': 'block.webhook_config.event_filter_input', 'range': [561, 565], 'children': []}]}, {'type': 'Assignment', 'name': 'has_everything_for_webhook', 'range': [567, 626], 'children': [{'type': 'LogicalExpression', 'name': 'resource is not None and (credentials_meta or not needs_credentials) and (not event_filter_input_name or (event_filter_input_name in node.input_default and any(is_on for is_on in node.input_default[event_filter_input_name].values())))', 'range': [569, 625], 'children': []}]}, {'type': 'IfStatement', 'name': 'if has_everything_for_webhook and resource is not None', 'range': [628, 644], 'children': [{'type': 'Condition', 'name': 'has_everything_for_webhook and resource is not None', 'range': [628, 635], 'children': []}, {'type': 'Block', 'name': 'logger.debug', 'range': [637, 643], 'children': [{'type': 'FunctionCall', 'name': 'logger.debug', 'range': [638, 642], 'children': [{'type': 'Argument', 'name': 'f"Node #{node} has everything for a webhook!"', 'range': [641, 642], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if credentials_meta and not credentials', 'range': [645, 663], 'children': [{'type': 'Condition', 'name': 'credentials_meta and not credentials', 'range': [645, 650], 'children': []}, {'type': 'Block', 'name': 'raise ValueError', 'range': [652, 662], 'children': [{'type': 'FunctionCall', 'name': 'ValueError', 'range': [653, 661], 'children': [{'type': 'Argument', 'name': 'f"Cannot set up webhook for node #{node.id}: "', 'range': [656, 657], 'children': []}, {'type': 'Argument', 'name': 'f"credentials #{credentials_meta[\'id\']} not available"', 'range': [659, 660], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if event_filter_input_name', 'range': [665, 738], 'children': [{'type': 'Condition', 'name': 'event_filter_input_name', 'range': [665, 667], 'children': []}, {'type': 'Block', 'name': 'event_filter', 'range': [682, 695], 'children': [{'type': 'FunctionCall', 'name': 'cast', 'range': [684, 694], 'children': [{'type': 'Argument', 'name': 'dict', 'range': [686, 686], 'children': []}, {'type': 'Argument', 'name': 'node.input_default[event_filter_input_name]', 'range': [688, 693], 'children': []}]}]}, {'type': 'Assignment', 'name': 'events', 'range': [696, 730], 'children': [{'type': 'ListComprehension', 'name': 'block.webhook_config.event_format.format(event=event) for event, enabled in event_filter.items() if enabled is True', 'range': [698, 729], 'children': []}]}, {'type': 'FunctionCall', 'name': 'logger.debug', 'range': [731, 737], 'children': [{'type': 'Argument', 'name': 'f"Webhook events to subscribe to: {\', \'.join(events)}"', 'range': [735, 736], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [739, 746], 'children': [{'type': 'Assignment', 'name': 'events', 'range': [742, 744], 'children': []}]}, {'type': 'IfStatement', 'name': 'if auto_setup_webhook', 'range': [761, 799], 'children': [{'type': 'Condition', 'name': 'auto_setup_webhook', 'range': [761, 763], 'children': []}, {'type': 'Block', 'name': 'assert credentials is not None', 'range': [765, 769], 'children': []}, {'type': 'Assignment', 'name': 'new_webhook', 'range': [771, 798], 'children': [{'type': 'FunctionCall', 'name': 'webhooks_manager.get_suitable_auto_webhook', 'range': [773, 797], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [779, 779], 'children': []}, {'type': 'Argument', 'name': 'credentials', 'range': [782, 782], 'children': []}, {'type': 'Argument', 'name': 'block.webhook_config.webhook_type', 'range': [785, 789], 'children': []}, {'type': 'Argument', 'name': 'resource', 'range': [792, 792], 'children': []}, {'type': 'Argument', 'name': 'events', 'range': [795, 795], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [800, 847], 'children': [{'type': 'Assignment', 'name': 'new_webhook', 'range': [820, 846], 'children': [{'type': 'FunctionCall', 'name': 'webhooks_manager.get_manual_webhook', 'range': [822, 845], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [828, 828], 'children': []}, {'type': 'Argument', 'name': 'node.graph_id', 'range': [831, 833], 'children': []}, {'type': 'Argument', 'name': 'block.webhook_config.webhook_type', 'range': [836, 840], 'children': []}, {'type': 'Argument', 'name': 'events', 'range': [843, 843], 'children': []}]}]}]}, {'type': 'FunctionCall', 'name': 'logger.debug', 'range': [848, 854], 'children': [{'type': 'Argument', 'name': 'f"Acquired webhook: {new_webhook}"', 'range': [852, 853], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return await set_node_webhook(node.id, new_webhook.id)', 'range': [856, 868], 'children': [{'type': 'FunctionCall', 'name': 'set_node_webhook', 'range': [858, 867], 'children': [{'type': 'Argument', 'name': 'node.id', 'range': [860, 862], 'children': []}, {'type': 'Argument', 'name': 'new_webhook.id', 'range': [864, 866], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [869, 879], 'children': [{'type': 'FunctionCall', 'name': 'logger.debug', 'range': [872, 878], 'children': [{'type': 'Argument', 'name': 'f"Node #{node.id} does not have everything for a webhook"', 'range': [876, 877], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return node', 'range': [881, 883], 'children': []}]}
2025-01-08 09:41:15,764 - INFO - Starting Step 3: AST simplification
2025-01-08 09:41:15,880 - INFO - Step 5 result: {'type': 'Program', 'name': 'on_graph_deactivate', 'range': [225, 341], 'children': [{'type': 'FunctionDecl', 'name': 'on_graph_deactivate', 'range': [225, 341], 'children': [{'type': 'AsyncKeyword', 'name': 'async', 'range': [225, 229], 'children': []}, {'type': 'DefKeyword', 'name': 'def', 'range': [226, 229], 'children': []}, {'type': 'FunctionName', 'name': 'on_graph_deactivate', 'range': [227, 247], 'children': []}, {'type': 'ParameterList', 'name': 'parameters', 'range': [228, 245], 'children': [{'type': 'Parameter', 'name': 'graph', 'range': [230, 232], 'children': []}, {'type': 'Parameter', 'name': 'get_credentials', 'range': [234, 243], 'children': []}]}, {'type': 'FunctionBody', 'name': 'body', 'range': [247, 341], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [248, 250], 'children': []}, {'type': 'VariableDecl', 'name': 'updated_nodes', 'range': [252, 255], 'children': []}, {'type': 'ForStatement', 'name': 'for_loop', 'range': [257, 330], 'children': [{'type': 'VariableDecl', 'name': 'node', 'range': [258, 259], 'children': []}, {'type': 'Identifier', 'name': 'graph.nodes', 'range': [260, 262], 'children': []}, {'type': 'Block', 'name': 'for_body', 'range': [263, 330], 'children': [{'type': 'VariableDecl', 'name': 'node_credentials', 'range': [265, 267], 'children': []}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [269, 292], 'children': [{'type': 'Identifier', 'name': 'creds_meta', 'range': [270, 271], 'children': []}, {'type': 'Assignment', 'name': 'creds_meta', 'range': [272, 281], 'children': []}, {'type': 'CallExpression', 'name': 'get_credentials', 'range': [285, 291], 'children': []}]}, {'type': 'IfStatement', 'name': 'if_statement', 'range': [293, 309], 'children': [{'type': 'UnaryExpression', 'name': 'not node_credentials', 'range': [294, 296], 'children': []}, {'type': 'CallExpression', 'name': 'logger.error', 'range': [298, 309], 'children': []}]}, {'type': 'Identifier', 'name': 'updated_node', 'range': [312, 322], 'children': []}, {'type': 'CallExpression', 'name': 'updated_nodes.append', 'range': [324, 329], 'children': []}]}]}, {'type': 'Identifier', 'name': 'graph.nodes', 'range': [332, 336], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [338, 339], 'children': []}]}]}]}
2025-01-08 09:41:15,881 - INFO - Completed main AST analysis flow
2025-01-08 09:41:15,881 - INFO - Successfully processed chunk
2025-01-08 09:41:27,797 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainProgram', 'range': [0, 94], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 1], 'children': [{'type': 'ImportSpecifier', 'name': 'logging', 'range': [1, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [3, 12], 'children': [{'type': 'ImportSpecifier', 'name': 'TYPE_CHECKING', 'range': [6, 6], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Callable', 'range': [8, 8], 'children': []}, {'type': 'ImportSpecifier', 'name': 'Optional', 'range': [10, 10], 'children': []}, {'type': 'ImportSpecifier', 'name': 'cast', 'range': [12, 12], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [15, 24], 'children': [{'type': 'ImportSpecifier', 'name': 'BlockWebhookConfig', 'range': [22, 22], 'children': []}, {'type': 'ImportSpecifier', 'name': 'get_block', 'range': [24, 24], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [26, 33], 'children': [{'type': 'ImportSpecifier', 'name': 'set_node_webhook', 'range': [33, 33], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [35, 42], 'children': [{'type': 'ImportSpecifier', 'name': 'CREDENTIALS_FIELD_NAME', 'range': [42, 42], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [44, 51], 'children': [{'type': 'ImportSpecifier', 'name': 'WEBHOOK_MANAGERS_BY_NAME', 'range': [51, 51], 'children': []}]}, {'type': 'IfStatement', 'name': '', 'range': [54, 68], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [58, 67], 'children': [{'type': 'ImportSpecifier', 'name': 'GraphModel', 'range': [65, 65], 'children': []}, {'type': 'ImportSpecifier', 'name': 'NodeModel', 'range': [67, 67], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [69, 76], 'children': [{'type': 'ImportSpecifier', 'name': 'Credentials', 'range': [76, 76], 'children': []}]}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [79, 83], 'children': [{'type': 'ImportSpecifier', 'name': 'BaseWebhooksManager', 'range': [83, 83], 'children': []}]}, {'type': 'VariableDeclaration', 'name': 'logger', 'range': [86, 94], 'children': [{'type': 'AssignmentExpression', 'name': '', 'range': [87, 94], 'children': [{'type': 'CallExpression', 'name': 'getLogger', 'range': [90, 93], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [92, 92], 'children': []}]}]}]}]}]}
2025-01-08 09:41:27,797 - INFO - Completed main AST analysis flow
2025-01-08 09:41:27,797 - INFO - Successfully processed chunk
2025-01-08 09:41:55,023 - INFO - Step 4 result: {'type': 'Program', 'name': 'on_node_deactivate', 'range': [885, 1165], 'children': [{'type': 'FunctionDecl', 'name': 'on_node_deactivate', 'range': [885, 1165], 'children': [{'type': 'FunctionSignature', 'name': 'on_node_deactivate', 'range': [885, 923], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [885, 889], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [886, 889], 'children': []}, {'type': 'Identifier', 'name': 'on_node_deactivate', 'range': [887, 907], 'children': []}, {'type': 'ParameterList', 'name': 'parameters', 'range': [888, 918], 'children': [{'type': 'Parameter', 'name': 'node', 'range': [890, 892], 'children': []}, {'type': 'Parameter', 'name': 'credentials', 'range': [898, 905], 'children': []}, {'type': 'Parameter', 'name': 'webhooks_manager', 'range': [908, 915], 'children': []}]}, {'type': 'ReturnType', 'name': 'return_type', 'range': [919, 921], 'children': []}]}, {'type': 'FunctionBody', 'name': 'body', 'range': [924, 1165], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [924, 926], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [929, 935], 'children': []}, {'type': 'Assignment', 'name': 'block', 'range': [937, 945], 'children': []}, {'type': 'IfStatement', 'name': 'if_not_block', 'range': [946, 959], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [946, 948], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [949, 959], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [951, 958], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if_not_block_webhook_config', 'range': [961, 970], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [961, 963], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [964, 970], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [968, 969], 'children': []}]}]}, {'type': 'Assignment', 'name': 'provider', 'range': [972, 979], 'children': []}, {'type': 'IfStatement', 'name': 'if_provider_not_in_WEBHOOK_MANAGERS_BY_NAME', 'range': [980, 997], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [980, 983], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [984, 997], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [987, 996], 'children': []}]}]}, {'type': 'Assignment', 'name': 'webhooks_manager', 'range': [999, 1007], 'children': []}, {'type': 'IfStatement', 'name': 'if_node_webhook_id', 'range': [1009, 1043], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [1009, 1013], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [1014, 1043], 'children': [{'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1015, 1021], 'children': []}, {'type': 'IfStatement', 'name': 'if_not_node_webhook', 'range': [1023, 1042], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [1023, 1028], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [1029, 1042], 'children': [{'type': 'ExpressionStatement', 'name': 'logger.error', 'range': [1030, 1036], 'children': []}, {'type': 'RaiseStatement', 'name': 'raise', 'range': [1038, 1041], 'children': []}]}]}]}]}, {'type': 'Comment', 'name': 'Detach webhook from node', 'range': [1045, 1050], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1051, 1057], 'children': []}, {'type': 'Assignment', 'name': 'updated_node', 'range': [1059, 1070], 'children': []}, {'type': 'Comment', 'name': 'Prune and deregister the webhook if it is no longer used anywhere', 'range': [1072, 1085], 'children': []}, {'type': 'Assignment', 'name': 'webhook', 'range': [1086, 1091], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1092, 1103], 'children': []}, {'type': 'AwaitExpression', 'name': 'await', 'range': [1105, 1116], 'children': []}, {'type': 'IfStatement', 'name': 'if_CREDENTIALS_FIELD_NAME_in_block_input_schema_model_fields_and_not_credentials', 'range': [1117, 1150], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [1117, 1132], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [1133, 1150], 'children': [{'type': 'ExpressionStatement', 'name': 'logger.warning', 'range': [1135, 1149], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [1151, 1152], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1155, 1161], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [1163, 1164], 'children': []}]}]}]}
2025-01-08 09:41:55,023 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:42:38,612 - INFO - Step 5 result: {'type': 'Program', 'name': 'on_node_deactivate', 'range': [885, 1165], 'children': [{'type': 'FunctionDecl', 'name': 'on_node_deactivate', 'range': [885, 1165], 'children': [{'type': 'FunctionSignature', 'name': 'on_node_deactivate', 'range': [885, 923], 'children': [{'type': 'Keyword', 'name': 'async', 'range': [885, 889], 'children': []}, {'type': 'Keyword', 'name': 'def', 'range': [886, 889], 'children': []}, {'type': 'Identifier', 'name': 'on_node_deactivate', 'range': [887, 907], 'children': []}, {'type': 'ParameterList', 'name': 'parameters', 'range': [888, 918], 'children': [{'type': 'Parameter', 'name': 'node', 'range': [890, 892], 'children': []}, {'type': 'Parameter', 'name': 'credentials', 'range': [898, 905], 'children': []}, {'type': 'Parameter', 'name': 'webhooks_manager', 'range': [908, 915], 'children': []}]}, {'type': 'ReturnType', 'name': 'return_type', 'range': [919, 921], 'children': []}]}, {'type': 'FunctionBody', 'name': 'body', 'range': [924, 1165], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [924, 926], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [929, 935], 'children': []}, {'type': 'Assignment', 'name': 'block', 'range': [937, 945], 'children': []}, {'type': 'IfStatement', 'name': 'if_not_block', 'range': [946, 959], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [946, 948], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [949, 959], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [951, 958], 'children': []}]}]}, {'type': 'IfStatement', 'name': 'if_not_block_webhook_config', 'range': [961, 970], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [961, 963], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [964, 970], 'children': [{'type': 'ReturnStatement', 'name': 'return', 'range': [968, 969], 'children': []}]}]}, {'type': 'Assignment', 'name': 'provider', 'range': [972, 979], 'children': []}, {'type': 'IfStatement', 'name': 'if_provider_not_in_WEBHOOK_MANAGERS_BY_NAME', 'range': [980, 997], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [980, 983], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [984, 997], 'children': [{'type': 'RaiseStatement', 'name': 'raise', 'range': [987, 996], 'children': []}]}]}, {'type': 'Assignment', 'name': 'webhooks_manager', 'range': [999, 1007], 'children': []}, {'type': 'IfStatement', 'name': 'if_node_webhook_id', 'range': [1009, 1043], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [1009, 1013], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [1014, 1043], 'children': [{'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1015, 1021], 'children': []}, {'type': 'IfStatement', 'name': 'if_not_node_webhook', 'range': [1023, 1042], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [1023, 1028], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [1029, 1042], 'children': [{'type': 'ExpressionStatement', 'name': 'logger.error', 'range': [1030, 1036], 'children': []}, {'type': 'RaiseStatement', 'name': 'raise', 'range': [1038, 1041], 'children': []}]}]}]}]}, {'type': 'Comment', 'name': 'Detach webhook from node', 'range': [1045, 1050], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1051, 1057], 'children': []}, {'type': 'Assignment', 'name': 'updated_node', 'range': [1059, 1070], 'children': []}, {'type': 'Comment', 'name': 'Prune and deregister the webhook if it is no longer used anywhere', 'range': [1072, 1085], 'children': []}, {'type': 'Assignment', 'name': 'webhook', 'range': [1086, 1091], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1092, 1103], 'children': []}, {'type': 'AwaitExpression', 'name': 'await', 'range': [1105, 1116], 'children': []}, {'type': 'IfStatement', 'name': 'if_CREDENTIALS_FIELD_NAME_in_block_input_schema_model_fields_and_not_credentials', 'range': [1117, 1150], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [1117, 1132], 'children': []}, {'type': 'Block', 'name': 'then', 'range': [1133, 1150], 'children': [{'type': 'ExpressionStatement', 'name': 'logger.warning', 'range': [1135, 1149], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [1151, 1152], 'children': []}, {'type': 'ExpressionStatement', 'name': 'logger.debug', 'range': [1155, 1161], 'children': []}, {'type': 'ReturnStatement', 'name': 'return', 'range': [1163, 1164], 'children': []}]}]}]}
2025-01-08 09:42:38,613 - INFO - Completed main AST analysis flow
2025-01-08 09:42:38,613 - INFO - Successfully processed chunk
2025-01-08 09:42:43,661 - INFO - Step 3 result: {'type': 'Program', 'name': 'on_node_activate', 'range': [342, 884], 'children': [{'type': 'FunctionDeclaration', 'name': 'on_node_activate', 'range': [342, 378], 'children': [{'type': 'Parameter', 'name': 'user_id', 'range': [347, 349], 'children': []}, {'type': 'Parameter', 'name': 'node', 'range': [352, 354], 'children': []}, {'type': 'Parameter', 'name': 'credentials', 'range': [360, 367], 'children': []}, {'type': 'ReturnType', 'name': 'NodeModel', 'range': [373, 373], 'children': []}, {'type': 'Docstring', 'name': 'Hook to be called when the node is activated/created', 'range': [376, 378], 'children': []}]}, {'type': 'Block', 'name': 'block', 'range': [381, 389], 'children': [{'type': 'Assignment', 'name': 'block', 'range': [381, 389], 'children': [{'type': 'FunctionCall', 'name': 'get_block', 'range': [383, 388], 'children': [{'type': 'Argument', 'name': 'node.block_id', 'range': [385, 387], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if not block', 'range': [390, 403], 'children': [{'type': 'Condition', 'name': 'not block', 'range': [390, 392], 'children': []}, {'type': 'Block', 'name': 'raise ValueError', 'range': [395, 402], 'children': [{'type': 'FunctionCall', 'name': 'ValueError', 'range': [396, 401], 'children': [{'type': 'Argument', 'name': 'f"Node #{node.id} is instance of unknown block #{node.block_id}"', 'range': [399, 400], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if not block.webhook_config', 'range': [405, 414], 'children': [{'type': 'Condition', 'name': 'not block.webhook_config', 'range': [405, 410], 'children': []}, {'type': 'Block', 'name': 'return node', 'range': [412, 414], 'children': []}]}, {'type': 'Assignment', 'name': 'provider', 'range': [416, 423], 'children': [{'type': 'MemberAccess', 'name': 'block.webhook_config.provider', 'range': [418, 422], 'children': []}]}, {'type': 'IfStatement', 'name': 'if provider not in WEBHOOK_MANAGERS_BY_NAME', 'range': [424, 441], 'children': [{'type': 'Condition', 'name': 'provider not in WEBHOOK_MANAGERS_BY_NAME', 'range': [424, 429], 'children': []}, {'type': 'Block', 'name': 'raise ValueError', 'range': [431, 440], 'children': [{'type': 'FunctionCall', 'name': 'ValueError', 'range': [432, 439], 'children': [{'type': 'Argument', 'name': 'f"Block #{block.id} has webhook_config for provider {provider} "', 'range': [435, 436], 'children': []}, {'type': 'Argument', 'name': '"which does not support webhooks"', 'range': [438, 438], 'children': []}]}]}]}, {'type': 'FunctionCall', 'name': 'logger.debug', 'range': [443, 451], 'children': [{'type': 'Argument', 'name': 'f"Activating webhook node #{node.id} with config {block.webhook_config}"', 'range': [448, 449], 'children': []}]}, {'type': 'Assignment', 'name': 'webhooks_manager', 'range': [454, 462], 'children': [{'type': 'FunctionCall', 'name': 'WEBHOOK_MANAGERS_BY_NAME[provider]', 'range': [456, 461], 'children': []}]}, {'type': 'IfStatement', 'name': 'if auto_setup_webhook', 'range': [464, 477], 'children': [{'type': 'Condition', 'name': 'auto_setup_webhook', 'range': [464, 466], 'children': []}, {'type': 'Block', 'name': 'try', 'range': [478, 505], 'children': [{'type': 'Assignment', 'name': 'resource', 'range': [481, 497], 'children': [{'type': 'FunctionCall', 'name': 'block.webhook_config.resource_format.format', 'range': [483, 496], 'children': [{'type': 'Argument', 'name': '**node.input_default', 'range': [491, 495], 'children': []}]}]}, {'type': 'Catch', 'name': 'KeyError', 'range': [498, 505], 'children': [{'type': 'Assignment', 'name': 'resource', 'range': [502, 504], 'children': []}]}]}]}, {'type': 'FunctionCall', 'name': 'logger.debug', 'range': [506, 514], 'children': [{'type': 'Argument', 'name': 'f"Constructed resource string {resource} from input {node.input_default}"', 'range': [511, 512], 'children': []}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [516, 528], 'children': [{'type': 'Assignment', 'name': 'resource', 'range': [519, 521], 'children': []}]}, {'type': 'Assignment', 'name': 'needs_credentials', 'range': [530, 539], 'children': [{'type': 'MemberAccess', 'name': 'CREDENTIALS_FIELD_NAME in block.input_schema.model_fields', 'range': [532, 538], 'children': []}]}, {'type': 'Assignment', 'name': 'credentials_meta', 'range': [540, 558], 'children': [{'type': 'Ternary', 'name': 'node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None', 'range': [542, 557], 'children': []}]}, {'type': 'Assignment', 'name': 'event_filter_input_name', 'range': [559, 566], 'children': [{'type': 'MemberAccess', 'name': 'block.webhook_config.event_filter_input', 'range': [561, 565], 'children': []}]}, {'type': 'Assignment', 'name': 'has_everything_for_webhook', 'range': [567, 626], 'children': [{'type': 'LogicalExpression', 'name': 'resource is not None and (credentials_meta or not needs_credentials) and (not event_filter_input_name or (event_filter_input_name in node.input_default and any(is_on for is_on in node.input_default[event_filter_input_name].values())))', 'range': [569, 625], 'children': []}]}, {'type': 'IfStatement', 'name': 'if has_everything_for_webhook and resource is not None', 'range': [628, 644], 'children': [{'type': 'Condition', 'name': 'has_everything_for_webhook and resource is not None', 'range': [628, 635], 'children': []}, {'type': 'Block', 'name': 'logger.debug', 'range': [637, 643], 'children': [{'type': 'FunctionCall', 'name': 'logger.debug', 'range': [638, 642], 'children': [{'type': 'Argument', 'name': 'f"Node #{node} has everything for a webhook!"', 'range': [641, 642], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if credentials_meta and not credentials', 'range': [645, 663], 'children': [{'type': 'Condition', 'name': 'credentials_meta and not credentials', 'range': [645, 650], 'children': []}, {'type': 'Block', 'name': 'raise ValueError', 'range': [652, 662], 'children': [{'type': 'FunctionCall', 'name': 'ValueError', 'range': [653, 661], 'children': [{'type': 'Argument', 'name': 'f"Cannot set up webhook for node #{node.id}: "', 'range': [656, 657], 'children': []}, {'type': 'Argument', 'name': 'f"credentials #{credentials_meta[\'id\']} not available"', 'range': [659, 660], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if event_filter_input_name', 'range': [665, 738], 'children': [{'type': 'Condition', 'name': 'event_filter_input_name', 'range': [665, 667], 'children': []}, {'type': 'Block', 'name': 'event_filter', 'range': [682, 695], 'children': [{'type': 'FunctionCall', 'name': 'cast', 'range': [684, 694], 'children': [{'type': 'Argument', 'name': 'dict', 'range': [686, 686], 'children': []}, {'type': 'Argument', 'name': 'node.input_default[event_filter_input_name]', 'range': [688, 693], 'children': []}]}]}, {'type': 'Assignment', 'name': 'events', 'range': [696, 730], 'children': [{'type': 'ListComprehension', 'name': 'block.webhook_config.event_format.format(event=event) for event, enabled in event_filter.items() if enabled is True', 'range': [698, 729], 'children': []}]}, {'type': 'FunctionCall', 'name': 'logger.debug', 'range': [731, 737], 'children': [{'type': 'Argument', 'name': 'f"Webhook events to subscribe to: {\', \'.join(events)}"', 'range': [735, 736], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [739, 746], 'children': [{'type': 'Assignment', 'name': 'events', 'range': [742, 744], 'children': []}]}, {'type': 'IfStatement', 'name': 'if auto_setup_webhook', 'range': [761, 799], 'children': [{'type': 'Condition', 'name': 'auto_setup_webhook', 'range': [761, 763], 'children': []}, {'type': 'Block', 'name': 'assert credentials is not None', 'range': [765, 769], 'children': []}, {'type': 'Assignment', 'name': 'new_webhook', 'range': [771, 798], 'children': [{'type': 'FunctionCall', 'name': 'webhooks_manager.get_suitable_auto_webhook', 'range': [773, 797], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [779, 779], 'children': []}, {'type': 'Argument', 'name': 'credentials', 'range': [782, 782], 'children': []}, {'type': 'Argument', 'name': 'block.webhook_config.webhook_type', 'range': [785, 789], 'children': []}, {'type': 'Argument', 'name': 'resource', 'range': [792, 792], 'children': []}, {'type': 'Argument', 'name': 'events', 'range': [795, 795], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [800, 847], 'children': [{'type': 'Assignment', 'name': 'new_webhook', 'range': [820, 846], 'children': [{'type': 'FunctionCall', 'name': 'webhooks_manager.get_manual_webhook', 'range': [822, 845], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [828, 828], 'children': []}, {'type': 'Argument', 'name': 'node.graph_id', 'range': [831, 833], 'children': []}, {'type': 'Argument', 'name': 'block.webhook_config.webhook_type', 'range': [836, 840], 'children': []}, {'type': 'Argument', 'name': 'events', 'range': [843, 843], 'children': []}]}]}]}, {'type': 'FunctionCall', 'name': 'logger.debug', 'range': [848, 854], 'children': [{'type': 'Argument', 'name': 'f"Acquired webhook: {new_webhook}"', 'range': [852, 853], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return await set_node_webhook(node.id, new_webhook.id)', 'range': [856, 868], 'children': [{'type': 'FunctionCall', 'name': 'set_node_webhook', 'range': [858, 867], 'children': [{'type': 'Argument', 'name': 'node.id', 'range': [860, 862], 'children': []}, {'type': 'Argument', 'name': 'new_webhook.id', 'range': [864, 866], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [869, 879], 'children': [{'type': 'FunctionCall', 'name': 'logger.debug', 'range': [872, 878], 'children': [{'type': 'Argument', 'name': 'f"Node #{node.id} does not have everything for a webhook"', 'range': [876, 877], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return node', 'range': [881, 883], 'children': []}]}
2025-01-08 09:42:43,661 - INFO - Starting Step 4: AST normalization
2025-01-08 09:43:51,692 - INFO - Step 4 result: {'type': 'Program', 'name': 'on_node_activate', 'range': [342, 884], 'children': [{'type': 'FunctionDecl', 'name': 'on_node_activate', 'range': [342, 378], 'children': [{'type': 'Parameter', 'name': 'user_id', 'range': [347, 349], 'children': []}, {'type': 'Parameter', 'name': 'node', 'range': [352, 354], 'children': []}, {'type': 'Parameter', 'name': 'credentials', 'range': [360, 367], 'children': []}, {'type': 'ReturnType', 'name': 'NodeModel', 'range': [373, 373], 'children': []}, {'type': 'Docstring', 'name': 'Hook to be called when the node is activated/created', 'range': [376, 378], 'children': []}]}, {'type': 'Block', 'name': 'block', 'range': [381, 389], 'children': [{'type': 'Assignment', 'name': 'block', 'range': [381, 389], 'children': [{'type': 'CallExpression', 'name': 'get_block', 'range': [383, 388], 'children': [{'type': 'Argument', 'name': 'node.block_id', 'range': [385, 387], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if not block', 'range': [390, 403], 'children': [{'type': 'Condition', 'name': 'not block', 'range': [390, 392], 'children': []}, {'type': 'Block', 'name': 'raise ValueError', 'range': [395, 402], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [396, 401], 'children': [{'type': 'Argument', 'name': 'f"Node #{node.id} is instance of unknown block #{node.block_id}"', 'range': [399, 400], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if not block.webhook_config', 'range': [405, 414], 'children': [{'type': 'Condition', 'name': 'not block.webhook_config', 'range': [405, 410], 'children': []}, {'type': 'Block', 'name': 'return node', 'range': [412, 414], 'children': []}]}, {'type': 'Assignment', 'name': 'provider', 'range': [416, 423], 'children': [{'type': 'MemberAccess', 'name': 'block.webhook_config.provider', 'range': [418, 422], 'children': []}]}, {'type': 'IfStatement', 'name': 'if provider not in WEBHOOK_MANAGERS_BY_NAME', 'range': [424, 441], 'children': [{'type': 'Condition', 'name': 'provider not in WEBHOOK_MANAGERS_BY_NAME', 'range': [424, 429], 'children': []}, {'type': 'Block', 'name': 'raise ValueError', 'range': [431, 440], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [432, 439], 'children': [{'type': 'Argument', 'name': 'f"Block #{block.id} has webhook_config for provider {provider} "', 'range': [435, 436], 'children': []}, {'type': 'Argument', 'name': '"which does not support webhooks"', 'range': [438, 438], 'children': []}]}]}]}, {'type': 'CallExpression', 'name': 'logger.debug', 'range': [443, 451], 'children': [{'type': 'Argument', 'name': 'f"Activating webhook node #{node.id} with config {block.webhook_config}"', 'range': [448, 449], 'children': []}]}, {'type': 'Assignment', 'name': 'webhooks_manager', 'range': [454, 462], 'children': [{'type': 'CallExpression', 'name': 'WEBHOOK_MANAGERS_BY_NAME[provider]', 'range': [456, 461], 'children': []}]}, {'type': 'IfStatement', 'name': 'if auto_setup_webhook', 'range': [464, 477], 'children': [{'type': 'Condition', 'name': 'auto_setup_webhook', 'range': [464, 466], 'children': []}, {'type': 'Block', 'name': 'try', 'range': [478, 505], 'children': [{'type': 'Assignment', 'name': 'resource', 'range': [481, 497], 'children': [{'type': 'CallExpression', 'name': 'block.webhook_config.resource_format.format', 'range': [483, 496], 'children': [{'type': 'Argument', 'name': '**node.input_default', 'range': [491, 495], 'children': []}]}]}, {'type': 'Catch', 'name': 'KeyError', 'range': [498, 505], 'children': [{'type': 'Assignment', 'name': 'resource', 'range': [502, 504], 'children': []}]}]}]}, {'type': 'CallExpression', 'name': 'logger.debug', 'range': [506, 514], 'children': [{'type': 'Argument', 'name': 'f"Constructed resource string {resource} from input {node.input_default}"', 'range': [511, 512], 'children': []}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [516, 528], 'children': [{'type': 'Assignment', 'name': 'resource', 'range': [519, 521], 'children': []}]}, {'type': 'Assignment', 'name': 'needs_credentials', 'range': [530, 539], 'children': [{'type': 'MemberAccess', 'name': 'CREDENTIALS_FIELD_NAME in block.input_schema.model_fields', 'range': [532, 538], 'children': []}]}, {'type': 'Assignment', 'name': 'credentials_meta', 'range': [540, 558], 'children': [{'type': 'Ternary', 'name': 'node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None', 'range': [542, 557], 'children': []}]}, {'type': 'Assignment', 'name': 'event_filter_input_name', 'range': [559, 566], 'children': [{'type': 'MemberAccess', 'name': 'block.webhook_config.event_filter_input', 'range': [561, 565], 'children': []}]}, {'type': 'Assignment', 'name': 'has_everything_for_webhook', 'range': [567, 626], 'children': [{'type': 'LogicalExpression', 'name': 'resource is not None and (credentials_meta or not needs_credentials) and (not event_filter_input_name or (event_filter_input_name in node.input_default and any(is_on for is_on in node.input_default[event_filter_input_name].values()))', 'range': [569, 625], 'children': []}]}, {'type': 'IfStatement', 'name': 'if has_everything_for_webhook and resource is not None', 'range': [628, 644], 'children': [{'type': 'Condition', 'name': 'has_everything_for_webhook and resource is not None', 'range': [628, 635], 'children': []}, {'type': 'Block', 'name': 'logger.debug', 'range': [637, 643], 'children': [{'type': 'CallExpression', 'name': 'logger.debug', 'range': [638, 642], 'children': [{'type': 'Argument', 'name': 'f"Node #{node} has everything for a webhook!"', 'range': [641, 642], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if credentials_meta and not credentials', 'range': [645, 663], 'children': [{'type': 'Condition', 'name': 'credentials_meta and not credentials', 'range': [645, 650], 'children': []}, {'type': 'Block', 'name': 'raise ValueError', 'range': [652, 662], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [653, 661], 'children': [{'type': 'Argument', 'name': 'f"Cannot set up webhook for node #{node.id}: "', 'range': [656, 657], 'children': []}, {'type': 'Argument', 'name': 'f"credentials #{credentials_meta[\'id\']} not available"', 'range': [659, 660], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if event_filter_input_name', 'range': [665, 738], 'children': [{'type': 'Condition', 'name': 'event_filter_input_name', 'range': [665, 667], 'children': []}, {'type': 'Block', 'name': 'event_filter', 'range': [682, 695], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [684, 694], 'children': [{'type': 'Argument', 'name': 'dict', 'range': [686, 686], 'children': []}, {'type': 'Argument', 'name': 'node.input_default[event_filter_input_name]', 'range': [688, 693], 'children': []}]}]}, {'type': 'Assignment', 'name': 'events', 'range': [696, 730], 'children': [{'type': 'ListComprehension', 'name': 'block.webhook_config.event_format.format(event=event) for event, enabled in event_filter.items() if enabled is True', 'range': [698, 729], 'children': []}]}, {'type': 'CallExpression', 'name': 'logger.debug', 'range': [731, 737], 'children': [{'type': 'Argument', 'name': 'f"Webhook events to subscribe to: {\', \'.join(events)}"', 'range': [735, 736], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [739, 746], 'children': [{'type': 'Assignment', 'name': 'events', 'range': [742, 744], 'children': []}]}, {'type': 'IfStatement', 'name': 'if auto_setup_webhook', 'range': [761, 799], 'children': [{'type': 'Condition', 'name': 'auto_setup_webhook', 'range': [761, 763], 'children': []}, {'type': 'Block', 'name': 'assert credentials is not None', 'range': [765, 769], 'children': []}, {'type': 'Assignment', 'name': 'new_webhook', 'range': [771, 798], 'children': [{'type': 'CallExpression', 'name': 'webhooks_manager.get_suitable_auto_webhook', 'range': [773, 797], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [779, 779], 'children': []}, {'type': 'Argument', 'name': 'credentials', 'range': [782, 782], 'children': []}, {'type': 'Argument', 'name': 'block.webhook_config.webhook_type', 'range': [785, 789], 'children': []}, {'type': 'Argument', 'name': 'resource', 'range': [792, 792], 'children': []}, {'type': 'Argument', 'name': 'events', 'range': [795, 795], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [800, 847], 'children': [{'type': 'Assignment', 'name': 'new_webhook', 'range': [820, 846], 'children': [{'type': 'CallExpression', 'name': 'webhooks_manager.get_manual_webhook', 'range': [822, 845], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [828, 828], 'children': []}, {'type': 'Argument', 'name': 'node.graph_id', 'range': [831, 833], 'children': []}, {'type': 'Argument', 'name': 'block.webhook_config.webhook_type', 'range': [836, 840], 'children': []}, {'type': 'Argument', 'name': 'events', 'range': [843, 843], 'children': []}]}]}]}, {'type': 'CallExpression', 'name': 'logger.debug', 'range': [848, 854], 'children': [{'type': 'Argument', 'name': 'f"Acquired webhook: {new_webhook}"', 'range': [852, 853], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return await set_node_webhook(node.id, new_webhook.id)', 'range': [856, 868], 'children': [{'type': 'CallExpression', 'name': 'set_node_webhook', 'range': [858, 867], 'children': [{'type': 'Argument', 'name': 'node.id', 'range': [860, 862], 'children': []}, {'type': 'Argument', 'name': 'new_webhook.id', 'range': [864, 866], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [869, 879], 'children': [{'type': 'CallExpression', 'name': 'logger.debug', 'range': [872, 878], 'children': [{'type': 'Argument', 'name': 'f"Node #{node.id} does not have everything for a webhook"', 'range': [876, 877], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return node', 'range': [881, 883], 'children': []}]}
2025-01-08 09:43:51,692 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:45:07,739 - INFO - Step 5 result: {'type': 'Program', 'name': 'on_node_activate', 'range': [342, 884], 'children': [{'type': 'FunctionDecl', 'name': 'on_node_activate', 'range': [342, 378], 'children': [{'type': 'Parameter', 'name': 'user_id', 'range': [347, 349], 'children': []}, {'type': 'Parameter', 'name': 'node', 'range': [352, 354], 'children': []}, {'type': 'Parameter', 'name': 'credentials', 'range': [360, 367], 'children': []}, {'type': 'ReturnType', 'name': 'NodeModel', 'range': [373, 373], 'children': []}, {'type': 'Docstring', 'name': 'Hook to be called when the node is activated/created', 'range': [376, 378], 'children': []}]}, {'type': 'Block', 'name': 'block', 'range': [381, 389], 'children': [{'type': 'Assignment', 'name': 'block', 'range': [381, 389], 'children': [{'type': 'CallExpression', 'name': 'get_block', 'range': [383, 388], 'children': [{'type': 'Argument', 'name': 'node.block_id', 'range': [385, 387], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if not block', 'range': [390, 403], 'children': [{'type': 'Condition', 'name': 'not block', 'range': [390, 392], 'children': []}, {'type': 'Block', 'name': 'raise ValueError', 'range': [395, 402], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [396, 401], 'children': [{'type': 'Argument', 'name': 'f"Node #{node.id} is instance of unknown block #{node.block_id}"', 'range': [399, 400], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if not block.webhook_config', 'range': [405, 414], 'children': [{'type': 'Condition', 'name': 'not block.webhook_config', 'range': [405, 410], 'children': []}, {'type': 'Block', 'name': 'return node', 'range': [412, 414], 'children': []}]}, {'type': 'Assignment', 'name': 'provider', 'range': [416, 423], 'children': [{'type': 'MemberAccess', 'name': 'block.webhook_config.provider', 'range': [418, 422], 'children': []}]}, {'type': 'IfStatement', 'name': 'if provider not in WEBHOOK_MANAGERS_BY_NAME', 'range': [424, 441], 'children': [{'type': 'Condition', 'name': 'provider not in WEBHOOK_MANAGERS_BY_NAME', 'range': [424, 429], 'children': []}, {'type': 'Block', 'name': 'raise ValueError', 'range': [431, 440], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [432, 439], 'children': [{'type': 'Argument', 'name': 'f"Block #{block.id} has webhook_config for provider {provider} "', 'range': [435, 436], 'children': []}, {'type': 'Argument', 'name': '"which does not support webhooks"', 'range': [438, 438], 'children': []}]}]}]}, {'type': 'CallExpression', 'name': 'logger.debug', 'range': [443, 451], 'children': [{'type': 'Argument', 'name': 'f"Activating webhook node #{node.id} with config {block.webhook_config}"', 'range': [448, 449], 'children': []}]}, {'type': 'Assignment', 'name': 'webhooks_manager', 'range': [454, 462], 'children': [{'type': 'CallExpression', 'name': 'WEBHOOK_MANAGERS_BY_NAME[provider]', 'range': [456, 461], 'children': []}]}, {'type': 'IfStatement', 'name': 'if auto_setup_webhook', 'range': [464, 477], 'children': [{'type': 'Condition', 'name': 'auto_setup_webhook', 'range': [464, 466], 'children': []}, {'type': 'Block', 'name': 'try', 'range': [478, 505], 'children': [{'type': 'Assignment', 'name': 'resource', 'range': [481, 497], 'children': [{'type': 'CallExpression', 'name': 'block.webhook_config.resource_format.format', 'range': [483, 496], 'children': [{'type': 'Argument', 'name': '**node.input_default', 'range': [491, 495], 'children': []}]}]}, {'type': 'Catch', 'name': 'KeyError', 'range': [498, 505], 'children': [{'type': 'Assignment', 'name': 'resource', 'range': [502, 504], 'children': []}]}]}]}, {'type': 'CallExpression', 'name': 'logger.debug', 'range': [506, 514], 'children': [{'type': 'Argument', 'name': 'f"Constructed resource string {resource} from input {node.input_default}"', 'range': [511, 512], 'children': []}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [516, 528], 'children': [{'type': 'Assignment', 'name': 'resource', 'range': [519, 521], 'children': []}]}, {'type': 'Assignment', 'name': 'needs_credentials', 'range': [530, 539], 'children': [{'type': 'MemberAccess', 'name': 'CREDENTIALS_FIELD_NAME in block.input_schema.model_fields', 'range': [532, 538], 'children': []}]}, {'type': 'Assignment', 'name': 'credentials_meta', 'range': [540, 558], 'children': [{'type': 'Ternary', 'name': 'node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None', 'range': [542, 557], 'children': []}]}, {'type': 'Assignment', 'name': 'event_filter_input_name', 'range': [559, 566], 'children': [{'type': 'MemberAccess', 'name': 'block.webhook_config.event_filter_input', 'range': [561, 565], 'children': []}]}, {'type': 'Assignment', 'name': 'has_everything_for_webhook', 'range': [567, 626], 'children': [{'type': 'LogicalExpression', 'name': 'resource is not None and (credentials_meta or not needs_credentials) and (not event_filter_input_name or (event_filter_input_name in node.input_default and any(is_on for is_on in node.input_default[event_filter_input_name].values()))', 'range': [569, 625], 'children': []}]}, {'type': 'IfStatement', 'name': 'if has_everything_for_webhook and resource is not None', 'range': [628, 644], 'children': [{'type': 'Condition', 'name': 'has_everything_for_webhook and resource is not None', 'range': [628, 635], 'children': []}, {'type': 'Block', 'name': 'logger.debug', 'range': [637, 643], 'children': [{'type': 'CallExpression', 'name': 'logger.debug', 'range': [638, 642], 'children': [{'type': 'Argument', 'name': 'f"Node #{node} has everything for a webhook!"', 'range': [641, 642], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if credentials_meta and not credentials', 'range': [645, 663], 'children': [{'type': 'Condition', 'name': 'credentials_meta and not credentials', 'range': [645, 650], 'children': []}, {'type': 'Block', 'name': 'raise ValueError', 'range': [652, 662], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [653, 661], 'children': [{'type': 'Argument', 'name': 'f"Cannot set up webhook for node #{node.id}: "', 'range': [656, 657], 'children': []}, {'type': 'Argument', 'name': 'f"credentials #{credentials_meta[\'id\']} not available"', 'range': [659, 660], 'children': []}]}]}]}, {'type': 'IfStatement', 'name': 'if event_filter_input_name', 'range': [665, 738], 'children': [{'type': 'Condition', 'name': 'event_filter_input_name', 'range': [665, 667], 'children': []}, {'type': 'Block', 'name': 'event_filter', 'range': [682, 695], 'children': [{'type': 'CallExpression', 'name': 'cast', 'range': [684, 694], 'children': [{'type': 'Argument', 'name': 'dict', 'range': [686, 686], 'children': []}, {'type': 'Argument', 'name': 'node.input_default[event_filter_input_name]', 'range': [688, 693], 'children': []}]}]}, {'type': 'Assignment', 'name': 'events', 'range': [696, 730], 'children': [{'type': 'ListComprehension', 'name': 'block.webhook_config.event_format.format(event=event) for event, enabled in event_filter.items() if enabled is True', 'range': [698, 729], 'children': []}]}, {'type': 'CallExpression', 'name': 'logger.debug', 'range': [731, 737], 'children': [{'type': 'Argument', 'name': 'f"Webhook events to subscribe to: {\', \'.join(events)}"', 'range': [735, 736], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [739, 746], 'children': [{'type': 'Assignment', 'name': 'events', 'range': [742, 744], 'children': []}]}, {'type': 'IfStatement', 'name': 'if auto_setup_webhook', 'range': [761, 799], 'children': [{'type': 'Condition', 'name': 'auto_setup_webhook', 'range': [761, 763], 'children': []}, {'type': 'Block', 'name': 'assert credentials is not None', 'range': [765, 769], 'children': []}, {'type': 'Assignment', 'name': 'new_webhook', 'range': [771, 798], 'children': [{'type': 'CallExpression', 'name': 'webhooks_manager.get_suitable_auto_webhook', 'range': [773, 797], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [779, 779], 'children': []}, {'type': 'Argument', 'name': 'credentials', 'range': [782, 782], 'children': []}, {'type': 'Argument', 'name': 'block.webhook_config.webhook_type', 'range': [785, 789], 'children': []}, {'type': 'Argument', 'name': 'resource', 'range': [792, 792], 'children': []}, {'type': 'Argument', 'name': 'events', 'range': [795, 795], 'children': []}]}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [800, 847], 'children': [{'type': 'Assignment', 'name': 'new_webhook', 'range': [820, 846], 'children': [{'type': 'CallExpression', 'name': 'webhooks_manager.get_manual_webhook', 'range': [822, 845], 'children': [{'type': 'Argument', 'name': 'user_id', 'range': [828, 828], 'children': []}, {'type': 'Argument', 'name': 'node.graph_id', 'range': [831, 833], 'children': []}, {'type': 'Argument', 'name': 'block.webhook_config.webhook_type', 'range': [836, 840], 'children': []}, {'type': 'Argument', 'name': 'events', 'range': [843, 843], 'children': []}]}]}]}, {'type': 'CallExpression', 'name': 'logger.debug', 'range': [848, 854], 'children': [{'type': 'Argument', 'name': 'f"Acquired webhook: {new_webhook}"', 'range': [852, 853], 'children': []}]}, {'type': 'ReturnStatement', 'name': 'return await set_node_webhook(node.id, new_webhook.id)', 'range': [856, 868], 'children': [{'type': 'CallExpression', 'name': 'set_node_webhook', 'range': [858, 867], 'children': [{'type': 'Argument', 'name': 'node.id', 'range': [860, 862], 'children': []}, {'type': 'Argument', 'name': 'new_webhook.id', 'range': [864, 866], 'children': []}]}]}, {'type': 'ElseStatement', 'name': 'else', 'range': [869, 879], 'children': [{'type': 'CallExpression', 'name': 'logger.debug', 'range': [872, 878], 'children': [{'type': 'Argument', 'name': 'f"Node #{node.id} does not have everything for a webhook"', 'range': [876, 877], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return node', 'range': [881, 883], 'children': []}]}
2025-01-08 09:45:07,740 - INFO - Completed main AST analysis flow
2025-01-08 09:45:07,741 - INFO - Successfully processed chunk
2025-01-08 09:45:07,776 - INFO - Starting code generation from AST
2025-01-08 10:15:09,300 - ERROR - Error in get_code_from_ast: Expecting value: line 30 column 1 (char 29)
2025-01-08 10:15:09,300 - INFO - Starting static code similarity comparison
2025-01-08 10:15:09,305 - INFO - Static similarity result: {'final_score': 20.29, 'length_similarity': 0.0, 'token_similarity': 0.0, 'structure_similarity': 0.0, 'function_similarity': 100, 'complexity_similarity': 2.94, 'variable_similarity': 100}
