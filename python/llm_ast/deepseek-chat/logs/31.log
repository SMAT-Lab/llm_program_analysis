2025-01-08 09:16:35,165 - INFO - Processing sample 31
2025-01-08 09:16:35,165 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:16:41,935 - INFO - Successfully split code into 2 top-level declarations
2025-01-08 09:16:41,936 - INFO - Processing chunk #0 (size=557 chars, start_index=0)
2025-01-08 09:16:41,937 - INFO - Processing chunk with 557 chars starting at index 0
2025-01-08 09:16:41,937 - INFO - Starting main AST analysis flow
2025-01-08 09:16:41,937 - INFO - Tokenized code into 64 tokens
2025-01-08 09:16:41,937 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:41,937 - INFO - Processing chunk #1 (size=72 chars, start_index=64)
2025-01-08 09:16:41,937 - INFO - Processing chunk with 72 chars starting at index 64
2025-01-08 09:16:41,937 - INFO - Starting main AST analysis flow
2025-01-08 09:16:41,937 - INFO - Tokenized code into 20 tokens
2025-01-08 09:16:41,937 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:49,296 - INFO - Step 1 result: {'type': 'Program', 'name': 'excess_3_code', 'range': [0, 63], 'children': []}
2025-01-08 09:16:49,296 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:00,448 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [64, 83], 'children': [{'type': 'IfStatement', 'name': '', 'range': [66, 71], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [67, 70], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [67, 67], 'children': []}, {'type': 'Literal', 'name': '__main__', 'range': [70, 70], 'children': []}]}]}, {'type': 'ImportStatement', 'name': '', 'range': [73, 74], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [74, 74], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [77, 81], 'children': [{'type': 'CallExpression', 'name': '', 'range': [77, 81], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [77, 79], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [77, 77], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [79, 79], 'children': []}]}]}]}]}
2025-01-08 09:17:00,448 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:08,142 - INFO - Step 2 result: {'type': 'Program', 'name': 'excess_3_code', 'range': [0, 63], 'children': [{'type': 'FunctionDeclaration', 'name': 'excess_3_code', 'range': [0, 63], 'children': [{'type': 'Parameter', 'name': 'number', 'range': [3, 5], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [7, 9], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [12, 14], 'children': []}, {'type': 'VariableDeclaration', 'name': 'num', 'range': [16, 18], 'children': []}, {'type': 'ForLoop', 'name': '', 'range': [20, 58], 'children': [{'type': 'Iterator', 'name': 'digit', 'range': [21, 22], 'children': []}, {'type': 'Iterable', 'name': 'str(max(0, number))', 'range': [23, 31], 'children': []}, {'type': 'Block', 'name': '', 'range': [33, 58], 'children': [{'type': 'Assignment', 'name': 'num', 'range': [34, 36], 'children': [{'type': 'Expression', 'name': 'str(bin(int(digit) + 3))[2:].zfill(4)', 'range': [37, 57], 'children': []}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [59, 63], 'children': [{'type': 'Expression', 'name': '"0b" + num', 'range': [60, 62], 'children': []}]}]}]}
2025-01-08 09:17:08,142 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:17,555 - INFO - Step 2 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [66, 71], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [67, 70], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [67, 67], 'children': []}, {'type': 'Literal', 'name': '__main__', 'range': [70, 70], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [72, 83], 'children': [{'type': 'ImportStatement', 'name': '', 'range': [73, 74], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [74, 74], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [77, 81], 'children': [{'type': 'CallExpression', 'name': '', 'range': [77, 81], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [77, 79], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [77, 77], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [79, 79], 'children': []}]}]}]}]}]}]}
2025-01-08 09:17:17,555 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:32,739 - INFO - Step 3 result: {'type': 'Program', 'name': 'excess_3_code', 'range': [0, 63], 'children': [{'type': 'FunctionDeclaration', 'name': 'excess_3_code', 'range': [0, 63], 'children': [{'type': 'Parameter', 'name': 'number', 'range': [3, 5], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [7, 9], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [12, 14], 'children': []}, {'type': 'VariableDeclaration', 'name': 'num', 'range': [16, 18], 'children': []}, {'type': 'ForLoop', 'name': '', 'range': [20, 58], 'children': [{'type': 'Iterator', 'name': 'digit', 'range': [21, 22], 'children': []}, {'type': 'Iterable', 'name': 'str(max(0, number))', 'range': [23, 31], 'children': []}, {'type': 'Block', 'name': '', 'range': [33, 58], 'children': [{'type': 'Assignment', 'name': 'num', 'range': [34, 36], 'children': [{'type': 'Expression', 'name': 'str(bin(int(digit) + 3))[2:].zfill(4)', 'range': [37, 57], 'children': []}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [59, 63], 'children': [{'type': 'Expression', 'name': '"0b" + num', 'range': [60, 62], 'children': []}]}]}]}
2025-01-08 09:17:32,740 - INFO - Starting Step 4: AST normalization
2025-01-08 09:17:35,743 - INFO - Step 3 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [66, 71], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [67, 70], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [67, 67], 'children': []}, {'type': 'Literal', 'name': '__main__', 'range': [70, 70], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [72, 83], 'children': [{'type': 'ImportStatement', 'name': '', 'range': [73, 74], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [74, 74], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [77, 81], 'children': [{'type': 'CallExpression', 'name': '', 'range': [77, 81], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [77, 79], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [77, 77], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [79, 79], 'children': []}]}]}]}]}]}]}
2025-01-08 09:17:35,744 - INFO - Starting Step 4: AST normalization
2025-01-08 09:18:00,290 - INFO - Step 4 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [66, 71], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [67, 70], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [67, 67], 'children': []}, {'type': 'Literal', 'name': '__main__', 'range': [70, 70], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [72, 83], 'children': [{'type': 'ImportStatement', 'name': '', 'range': [73, 74], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [74, 74], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [77, 81], 'children': [{'type': 'CallExpression', 'name': '', 'range': [77, 81], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [77, 79], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [77, 77], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [79, 79], 'children': []}]}]}]}]}]}]}
2025-01-08 09:18:00,290 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:02,566 - INFO - Step 4 result: {'type': 'Program', 'name': 'excess_3_code', 'range': [0, 63], 'children': [{'type': 'FunctionDecl', 'name': 'excess_3_code', 'range': [0, 63], 'children': [{'type': 'Parameter', 'name': 'number', 'range': [3, 5], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [7, 9], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [12, 14], 'children': []}, {'type': 'VariableDecl', 'name': 'num', 'range': [16, 18], 'children': []}, {'type': 'ForStatement', 'name': '', 'range': [20, 58], 'children': [{'type': 'Iterator', 'name': 'digit', 'range': [21, 22], 'children': []}, {'type': 'Iterable', 'name': 'str(max(0, number))', 'range': [23, 31], 'children': []}, {'type': 'Block', 'name': '', 'range': [33, 58], 'children': [{'type': 'Assignment', 'name': 'num', 'range': [34, 36], 'children': [{'type': 'CallExpression', 'name': 'str(bin(int(digit) + 3))[2:].zfill(4)', 'range': [37, 57], 'children': []}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [59, 63], 'children': [{'type': 'BinaryExpression', 'name': '"0b" + num', 'range': [60, 62], 'children': []}]}]}]}
2025-01-08 09:18:02,566 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:18:21,446 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainOrSomething', 'range': [66, 83], 'children': [{'type': 'IfStatement', 'name': '', 'range': [66, 71], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [67, 70], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [67, 67], 'children': []}, {'type': 'Literal', 'name': '__main__', 'range': [70, 70], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [72, 83], 'children': [{'type': 'ImportStatement', 'name': '', 'range': [73, 74], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [74, 74], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [77, 81], 'children': [{'type': 'CallExpression', 'name': '', 'range': [77, 81], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [77, 79], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [77, 77], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [79, 79], 'children': []}]}]}]}]}]}]}]}
2025-01-08 09:18:21,446 - INFO - Completed main AST analysis flow
2025-01-08 09:18:21,447 - INFO - Successfully processed chunk
2025-01-08 09:18:23,804 - INFO - Step 5 result: {'type': 'Program', 'name': 'excess_3_code', 'range': [0, 63], 'children': [{'type': 'FunctionDecl', 'name': 'excess_3_code', 'range': [0, 63], 'children': [{'type': 'Parameter', 'name': 'number', 'range': [3, 5], 'children': []}, {'type': 'ReturnType', 'name': 'str', 'range': [7, 9], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [12, 14], 'children': []}, {'type': 'VariableDecl', 'name': 'num', 'range': [16, 18], 'children': []}, {'type': 'ForStatement', 'name': '', 'range': [20, 58], 'children': [{'type': 'Iterator', 'name': 'digit', 'range': [21, 22], 'children': []}, {'type': 'Iterable', 'name': 'str(max(0, number))', 'range': [23, 31], 'children': []}, {'type': 'Block', 'name': '', 'range': [33, 58], 'children': [{'type': 'Assignment', 'name': 'num', 'range': [34, 36], 'children': [{'type': 'CallExpression', 'name': 'str(bin(int(digit) + 3))[2:].zfill(4)', 'range': [37, 57], 'children': []}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [59, 63], 'children': [{'type': 'BinaryExpression', 'name': '"0b" + num', 'range': [60, 62], 'children': []}]}]}]}
2025-01-08 09:18:23,805 - INFO - Completed main AST analysis flow
2025-01-08 09:18:23,805 - INFO - Successfully processed chunk
2025-01-08 09:18:23,812 - INFO - Starting code generation from AST
2025-01-08 09:18:34,092 - INFO - Successfully generated code from AST
2025-01-08 09:18:34,101 - INFO - Starting static code similarity comparison
2025-01-08 09:18:34,103 - INFO - Static similarity result: {'final_score': 63.02, 'length_similarity': 56.51, 'token_similarity': 31.58, 'structure_similarity': 86.96, 'function_similarity': 100, 'complexity_similarity': 33.33, 'variable_similarity': 100}
