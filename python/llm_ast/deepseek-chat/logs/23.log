2025-01-08 09:16:35,067 - INFO - Processing sample 23
2025-01-08 09:16:35,068 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:16:41,920 - INFO - Successfully split code into 2 top-level declarations
2025-01-08 09:16:41,922 - INFO - Processing chunk #0 (size=62 chars, start_index=0)
2025-01-08 09:16:41,922 - INFO - Processing chunk with 62 chars starting at index 0
2025-01-08 09:16:41,923 - INFO - Starting main AST analysis flow
2025-01-08 09:16:41,923 - INFO - Tokenized code into 14 tokens
2025-01-08 09:16:41,923 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:41,924 - INFO - Processing chunk #1 (size=2700 chars, start_index=14)
2025-01-08 09:16:41,924 - INFO - Processing chunk with 2700 chars starting at index 14
2025-01-08 09:16:41,924 - INFO - Starting main AST analysis flow
2025-01-08 09:16:41,925 - INFO - Tokenized code into 506 tokens
2025-01-08 09:16:41,925 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:16:52,055 - INFO - Step 1 result: {'type': 'Program', 'name': 'test_validate_url', 'range': [14, 519], 'children': []}
2025-01-08 09:16:52,056 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:16:54,446 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 13], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'pytest', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 12], 'children': [{'type': 'ImportSpecifier', 'name': 'validate_url', 'range': [10, 11], 'children': []}]}]}
2025-01-08 09:16:54,447 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:17:07,935 - INFO - Step 2 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'pytest', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 12], 'children': [{'type': 'FromImport', 'name': '', 'range': [4, 9], 'children': [{'type': 'ModulePath', 'name': 'backend.util.request', 'range': [5, 9], 'children': []}]}, {'type': 'ImportSpecifier', 'name': 'validate_url', 'range': [10, 11], 'children': []}]}]}
2025-01-08 09:17:07,935 - INFO - Starting Step 3: AST simplification
2025-01-08 09:17:23,348 - INFO - Step 3 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'pytest', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 12], 'children': [{'type': 'FromImport', 'name': '', 'range': [4, 9], 'children': [{'type': 'ModulePath', 'name': 'backend.util.request', 'range': [5, 9], 'children': []}]}, {'type': 'ImportSpecifier', 'name': 'validate_url', 'range': [10, 11], 'children': []}]}]}
2025-01-08 09:17:23,348 - INFO - Starting Step 4: AST normalization
2025-01-08 09:17:37,896 - INFO - Step 4 result: {'nodes': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'pytest', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 12], 'children': [{'type': 'FromClause', 'name': '', 'range': [4, 9], 'children': [{'type': 'ModuleSpecifier', 'name': 'backend.util.request', 'range': [5, 9], 'children': []}]}, {'type': 'ImportSpecifier', 'name': 'validate_url', 'range': [10, 11], 'children': []}]}]}
2025-01-08 09:17:37,896 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:17:54,888 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainOrSomething', 'range': [0, 12], 'children': [{'type': 'ImportDeclaration', 'name': '', 'range': [0, 2], 'children': [{'type': 'ImportSpecifier', 'name': 'pytest', 'range': [0, 1], 'children': []}]}, {'type': 'ImportDeclaration', 'name': '', 'range': [4, 12], 'children': [{'type': 'FromClause', 'name': '', 'range': [4, 9], 'children': [{'type': 'ModuleSpecifier', 'name': 'backend.util.request', 'range': [5, 9], 'children': []}]}, {'type': 'ImportSpecifier', 'name': 'validate_url', 'range': [10, 11], 'children': []}]}]}]}
2025-01-08 09:17:54,888 - INFO - Completed main AST analysis flow
2025-01-08 09:17:54,888 - INFO - Successfully processed chunk
2025-01-08 09:18:13,106 - INFO - Step 2 result: {'type': 'Program', 'name': 'test_validate_url', 'range': [14, 519], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_validate_url', 'range': [14, 519], 'children': [{'type': 'Comment', 'name': '# Rejected IP ranges', 'range': [20, 24], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises(ValueError):', 'range': [25, 41], 'children': [{'type': 'CallExpression', 'name': 'validate_url("localhost", [])', 'range': [34, 40], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises(ValueError):', 'range': [43, 59], 'children': [{'type': 'CallExpression', 'name': 'validate_url("192.168.1.1", [])', 'range': [52, 58], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises(ValueError):', 'range': [61, 77], 'children': [{'type': 'CallExpression', 'name': 'validate_url("127.0.0.1", [])', 'range': [70, 76], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises(ValueError):', 'range': [79, 95], 'children': [{'type': 'CallExpression', 'name': 'validate_url("0.0.0.0", [])', 'range': [88, 94], 'children': []}]}, {'type': 'Comment', 'name': '# Normal URLs', 'range': [97, 100], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url("google.com/a?b=c", []) == "http://google.com/a?b=c"', 'range': [101, 112], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url("github.com?key=!@!@", []) == "http://github.com?key=!@!@"', 'range': [113, 124], 'children': []}, {'type': 'Comment', 'name': '# Scheme Enforcement', 'range': [126, 129], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises(ValueError):', 'range': [130, 146], 'children': [{'type': 'CallExpression', 'name': 'validate_url("ftp://example.com", [])', 'range': [139, 145], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises(ValueError):', 'range': [147, 163], 'children': [{'type': 'CallExpression', 'name': 'validate_url("file://example.com", [])', 'range': [156, 162], 'children': []}]}, {'type': 'Comment', 'name': '# International domain that converts to punycode - should be allowed if public', 'range': [165, 178], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url("http://xn--exmple-cua.com", []) == "http://xn--exmple-cua.com"', 'range': [179, 190], 'children': []}, {'type': 'Comment', 'name': '# If the domain fails IDNA encoding or is invalid, it should raise an error', 'range': [191, 207], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises(ValueError):', 'range': [208, 224], 'children': [{'type': 'CallExpression', 'name': 'validate_url("http://exaâ—Œmple.com", [])', 'range': [217, 223], 'children': []}]}, {'type': 'Comment', 'name': '# IPv6 Addresses', 'range': [226, 229], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises(ValueError):', 'range': [230, 246], 'children': [{'type': 'CallExpression', 'name': 'validate_url("::1", [])', 'range': [239, 245], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises(ValueError):', 'range': [253, 269], 'children': [{'type': 'CallExpression', 'name': 'validate_url("http://[::1]", [])', 'range': [262, 268], 'children': []}]}, {'type': 'Comment', 'name': '# Suspicious Characters in Hostname', 'range': [278, 282], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises(ValueError):', 'range': [283, 299], 'children': [{'type': 'CallExpression', 'name': 'validate_url("http://example_underscore.com", [])', 'range': [292, 298], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises(ValueError):', 'range': [300, 316], 'children': [{'type': 'CallExpression', 'name': 'validate_url("http://exa mple.com", [])', 'range': [309, 315], 'children': []}]}, {'type': 'Comment', 'name': '# Malformed URLs', 'range': [322, 325], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises(ValueError):', 'range': [326, 342], 'children': [{'type': 'CallExpression', 'name': 'validate_url("http://", [])', 'range': [335, 341], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises(ValueError):', 'range': [346, 362], 'children': [{'type': 'CallExpression', 'name': 'validate_url("://missing-scheme", [])', 'range': [355, 361], 'children': []}]}, {'type': 'Comment', 'name': '# Trusted Origins', 'range': [368, 371], 'children': []}, {'type': 'VariableDeclaration', 'name': 'trusted = ["internal-api.company.com", "10.0.0.5"]', 'range': [372, 379], 'children': []}, {'type': 'AssertStatement', 'name': 'assert (validate_url("internal-api.company.com", trusted) == "http://internal-api.company.com")', 'range': [380, 395], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url("10.0.0.5", ["10.0.0.5"]) == "http://10.0.0.5"', 'range': [396, 408], 'children': []}, {'type': 'Comment', 'name': '# Special Characters in Path or Query', 'range': [410, 417], 'children': []}, {'type': 'AssertStatement', 'name': 'assert (validate_url("example.com/path%20with%20spaces", []) == "http://example.com/path%20with%20spaces")', 'range': [418, 434], 'children': []}, {'type': 'Comment', 'name': '# Backslashes should be replaced with forward slashes', 'range': [436, 444], 'children': []}, {'type': 'AssertStatement', 'name': 'assert (validate_url("http://example.com\\\\backslash", []) == "http://example.com/backslash")', 'range': [445, 461], 'children': []}, {'type': 'Comment', 'name': '# Check defaulting scheme behavior for valid domains', 'range': [463, 471], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url("example.com", []) == "http://example.com"', 'range': [472, 483], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url("https://secure.com", []) == "https://secure.com"', 'range': [484, 495], 'children': []}, {'type': 'Comment', 'name': '# Non-ASCII Characters in Query/Fragment', 'range': [497, 506], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url("example.com?param=Ã¤Ã¶Ã¼", []) == "http://example.com?param=Ã¤Ã¶Ã¼"', 'range': [507, 519], 'children': []}]}]}
2025-01-08 09:18:13,106 - INFO - Starting Step 3: AST simplification
2025-01-08 09:19:32,348 - INFO - Step 3 result: {'type': 'Program', 'name': 'test_validate_url', 'range': [14, 519], 'children': [{'type': 'FunctionDeclaration', 'name': 'test_validate_url', 'range': [14, 519], 'children': [{'type': 'Comment', 'name': '# Rejected IP ranges', 'range': [20, 24], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [25, 41], 'children': [{'type': 'CallExpression', 'name': 'validate_url localhost', 'range': [34, 40], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [43, 59], 'children': [{'type': 'CallExpression', 'name': 'validate_url 192.168.1.1', 'range': [52, 58], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [61, 77], 'children': [{'type': 'CallExpression', 'name': 'validate_url 127.0.0.1', 'range': [70, 76], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [79, 95], 'children': [{'type': 'CallExpression', 'name': 'validate_url 0.0.0.0', 'range': [88, 94], 'children': []}]}, {'type': 'Comment', 'name': '# Normal URLs', 'range': [97, 100], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url google.com/a?b=c == http://google.com/a?b=c', 'range': [101, 112], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url github.com?key=!@!@ == http://github.com?key=!@!@', 'range': [113, 124], 'children': []}, {'type': 'Comment', 'name': '# Scheme Enforcement', 'range': [126, 129], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [130, 146], 'children': [{'type': 'CallExpression', 'name': 'validate_url ftp://example.com', 'range': [139, 145], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [147, 163], 'children': [{'type': 'CallExpression', 'name': 'validate_url file://example.com', 'range': [156, 162], 'children': []}]}, {'type': 'Comment', 'name': '# International domain that converts to punycode - should be allowed if public', 'range': [165, 178], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url http://xn--exmple-cua.com == http://xn--exmple-cua.com', 'range': [179, 190], 'children': []}, {'type': 'Comment', 'name': '# If the domain fails IDNA encoding or is invalid, it should raise an error', 'range': [191, 207], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [208, 224], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://exaâ—Œmple.com', 'range': [217, 223], 'children': []}]}, {'type': 'Comment', 'name': '# IPv6 Addresses', 'range': [226, 229], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [230, 246], 'children': [{'type': 'CallExpression', 'name': 'validate_url ::1', 'range': [239, 245], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [253, 269], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://[::1]', 'range': [262, 268], 'children': []}]}, {'type': 'Comment', 'name': '# Suspicious Characters in Hostname', 'range': [278, 282], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [283, 299], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://example_underscore.com', 'range': [292, 298], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [300, 316], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://exa mple.com', 'range': [309, 315], 'children': []}]}, {'type': 'Comment', 'name': '# Malformed URLs', 'range': [322, 325], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [326, 342], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://', 'range': [335, 341], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [346, 362], 'children': [{'type': 'CallExpression', 'name': 'validate_url ://missing-scheme', 'range': [355, 361], 'children': []}]}, {'type': 'Comment', 'name': '# Trusted Origins', 'range': [368, 371], 'children': []}, {'type': 'VariableDeclaration', 'name': 'trusted = internal-api.company.com 10.0.0.5', 'range': [372, 379], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url internal-api.company.com trusted == http://internal-api.company.com', 'range': [380, 395], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url 10.0.0.5 10.0.0.5 == http://10.0.0.5', 'range': [396, 408], 'children': []}, {'type': 'Comment', 'name': '# Special Characters in Path or Query', 'range': [410, 417], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url example.com/path%20with%20spaces == http://example.com/path%20with%20spaces', 'range': [418, 434], 'children': []}, {'type': 'Comment', 'name': '# Backslashes should be replaced with forward slashes', 'range': [436, 444], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url http://example.com\\\\backslash == http://example.com/backslash', 'range': [445, 461], 'children': []}, {'type': 'Comment', 'name': '# Check defaulting scheme behavior for valid domains', 'range': [463, 471], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url example.com == http://example.com', 'range': [472, 483], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url https://secure.com == https://secure.com', 'range': [484, 495], 'children': []}, {'type': 'Comment', 'name': '# Non-ASCII Characters in Query/Fragment', 'range': [497, 506], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url example.com?param=Ã¤Ã¶Ã¼ == http://example.com?param=Ã¤Ã¶Ã¼', 'range': [507, 519], 'children': []}]}]}
2025-01-08 09:19:32,348 - INFO - Starting Step 4: AST normalization
2025-01-08 09:20:50,894 - INFO - Step 4 result: {'type': 'Program', 'name': 'test_validate_url', 'range': [14, 519], 'children': [{'type': 'FunctionDecl', 'name': 'test_validate_url', 'range': [14, 519], 'children': [{'type': 'Comment', 'name': '# Rejected IP ranges', 'range': [20, 24], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [25, 41], 'children': [{'type': 'CallExpression', 'name': 'validate_url localhost', 'range': [34, 40], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [43, 59], 'children': [{'type': 'CallExpression', 'name': 'validate_url 192.168.1.1', 'range': [52, 58], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [61, 77], 'children': [{'type': 'CallExpression', 'name': 'validate_url 127.0.0.1', 'range': [70, 76], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [79, 95], 'children': [{'type': 'CallExpression', 'name': 'validate_url 0.0.0.0', 'range': [88, 94], 'children': []}]}, {'type': 'Comment', 'name': '# Normal URLs', 'range': [97, 100], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url google.com/a?b=c == http://google.com/a?b=c', 'range': [101, 112], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url github.com?key=!@!@ == http://github.com?key=!@!@', 'range': [113, 124], 'children': []}, {'type': 'Comment', 'name': '# Scheme Enforcement', 'range': [126, 129], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [130, 146], 'children': [{'type': 'CallExpression', 'name': 'validate_url ftp://example.com', 'range': [139, 145], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [147, 163], 'children': [{'type': 'CallExpression', 'name': 'validate_url file://example.com', 'range': [156, 162], 'children': []}]}, {'type': 'Comment', 'name': '# International domain that converts to punycode - should be allowed if public', 'range': [165, 178], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url http://xn--exmple-cua.com == http://xn--exmple-cua.com', 'range': [179, 190], 'children': []}, {'type': 'Comment', 'name': '# If the domain fails IDNA encoding or is invalid, it should raise an error', 'range': [191, 207], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [208, 224], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://exaâ—Œmple.com', 'range': [217, 223], 'children': []}]}, {'type': 'Comment', 'name': '# IPv6 Addresses', 'range': [226, 229], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [230, 246], 'children': [{'type': 'CallExpression', 'name': 'validate_url ::1', 'range': [239, 245], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [253, 269], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://[::1]', 'range': [262, 268], 'children': []}]}, {'type': 'Comment', 'name': '# Suspicious Characters in Hostname', 'range': [278, 282], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [283, 299], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://example_underscore.com', 'range': [292, 298], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [300, 316], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://exa mple.com', 'range': [309, 315], 'children': []}]}, {'type': 'Comment', 'name': '# Malformed URLs', 'range': [322, 325], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [326, 342], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://', 'range': [335, 341], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [346, 362], 'children': [{'type': 'CallExpression', 'name': 'validate_url ://missing-scheme', 'range': [355, 361], 'children': []}]}, {'type': 'Comment', 'name': '# Trusted Origins', 'range': [368, 371], 'children': []}, {'type': 'VariableDecl', 'name': 'trusted = internal-api.company.com 10.0.0.5', 'range': [372, 379], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url internal-api.company.com trusted == http://internal-api.company.com', 'range': [380, 395], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url 10.0.0.5 10.0.0.5 == http://10.0.0.5', 'range': [396, 408], 'children': []}, {'type': 'Comment', 'name': '# Special Characters in Path or Query', 'range': [410, 417], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url example.com/path%20with%20spaces == http://example.com/path%20with%20spaces', 'range': [418, 434], 'children': []}, {'type': 'Comment', 'name': '# Backslashes should be replaced with forward slashes', 'range': [436, 444], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url http://example.com\\\\backslash == http://example.com/backslash', 'range': [445, 461], 'children': []}, {'type': 'Comment', 'name': '# Check defaulting scheme behavior for valid domains', 'range': [463, 471], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url example.com == http://example.com', 'range': [472, 483], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url https://secure.com == https://secure.com', 'range': [484, 495], 'children': []}, {'type': 'Comment', 'name': '# Non-ASCII Characters in Query/Fragment', 'range': [497, 506], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url example.com?param=Ã¤Ã¶Ã¼ == http://example.com?param=Ã¤Ã¶Ã¼', 'range': [507, 519], 'children': []}]}]}
2025-01-08 09:20:50,894 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:22:01,034 - INFO - Step 5 result: {'type': 'Program', 'name': 'test_validate_url', 'range': [14, 519], 'children': [{'type': 'FunctionDecl', 'name': 'test_validate_url', 'range': [14, 519], 'children': [{'type': 'Comment', 'name': '# Rejected IP ranges', 'range': [20, 24], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [25, 41], 'children': [{'type': 'CallExpression', 'name': 'validate_url localhost', 'range': [34, 40], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [43, 59], 'children': [{'type': 'CallExpression', 'name': 'validate_url 192.168.1.1', 'range': [52, 58], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [61, 77], 'children': [{'type': 'CallExpression', 'name': 'validate_url 127.0.0.1', 'range': [70, 76], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [79, 95], 'children': [{'type': 'CallExpression', 'name': 'validate_url 0.0.0.0', 'range': [88, 94], 'children': []}]}, {'type': 'Comment', 'name': '# Normal URLs', 'range': [97, 100], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url google.com/a?b=c == http://google.com/a?b=c', 'range': [101, 112], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url github.com?key=!@!@ == http://github.com?key=!@!@', 'range': [113, 124], 'children': []}, {'type': 'Comment', 'name': '# Scheme Enforcement', 'range': [126, 129], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [130, 146], 'children': [{'type': 'CallExpression', 'name': 'validate_url ftp://example.com', 'range': [139, 145], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [147, 163], 'children': [{'type': 'CallExpression', 'name': 'validate_url file://example.com', 'range': [156, 162], 'children': []}]}, {'type': 'Comment', 'name': '# International domain that converts to punycode - should be allowed if public', 'range': [165, 178], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url http://xn--exmple-cua.com == http://xn--exmple-cua.com', 'range': [179, 190], 'children': []}, {'type': 'Comment', 'name': '# If the domain fails IDNA encoding or is invalid, it should raise an error', 'range': [191, 207], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [208, 224], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://exaâ—Œmple.com', 'range': [217, 223], 'children': []}]}, {'type': 'Comment', 'name': '# IPv6 Addresses', 'range': [226, 229], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [230, 246], 'children': [{'type': 'CallExpression', 'name': 'validate_url ::1', 'range': [239, 245], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [253, 269], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://[::1]', 'range': [262, 268], 'children': []}]}, {'type': 'Comment', 'name': '# Suspicious Characters in Hostname', 'range': [278, 282], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [283, 299], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://example_underscore.com', 'range': [292, 298], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [300, 316], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://exa mple.com', 'range': [309, 315], 'children': []}]}, {'type': 'Comment', 'name': '# Malformed URLs', 'range': [322, 325], 'children': []}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [326, 342], 'children': [{'type': 'CallExpression', 'name': 'validate_url http://', 'range': [335, 341], 'children': []}]}, {'type': 'WithStatement', 'name': 'with pytest.raises ValueError', 'range': [346, 362], 'children': [{'type': 'CallExpression', 'name': 'validate_url ://missing-scheme', 'range': [355, 361], 'children': []}]}, {'type': 'Comment', 'name': '# Trusted Origins', 'range': [368, 371], 'children': []}, {'type': 'VariableDecl', 'name': 'trusted = internal-api.company.com 10.0.0.5', 'range': [372, 379], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url internal-api.company.com trusted == http://internal-api.company.com', 'range': [380, 395], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url 10.0.0.5 10.0.0.5 == http://10.0.0.5', 'range': [396, 408], 'children': []}, {'type': 'Comment', 'name': '# Special Characters in Path or Query', 'range': [410, 417], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url example.com/path%20with%20spaces == http://example.com/path%20with%20spaces', 'range': [418, 434], 'children': []}, {'type': 'Comment', 'name': '# Backslashes should be replaced with forward slashes', 'range': [436, 444], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url http://example.com\\\\backslash == http://example.com/backslash', 'range': [445, 461], 'children': []}, {'type': 'Comment', 'name': '# Check defaulting scheme behavior for valid domains', 'range': [463, 471], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url example.com == http://example.com', 'range': [472, 483], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url https://secure.com == https://secure.com', 'range': [484, 495], 'children': []}, {'type': 'Comment', 'name': '# Non-ASCII Characters in Query/Fragment', 'range': [497, 506], 'children': []}, {'type': 'AssertStatement', 'name': 'assert validate_url example.com?param=Ã¤Ã¶Ã¼ == http://example.com?param=Ã¤Ã¶Ã¼', 'range': [507, 519], 'children': []}]}]}
2025-01-08 09:22:01,034 - INFO - Completed main AST analysis flow
2025-01-08 09:22:01,035 - INFO - Successfully processed chunk
2025-01-08 09:22:01,050 - INFO - Starting code generation from AST
2025-01-08 09:22:27,145 - INFO - Successfully generated code from AST
2025-01-08 09:22:27,146 - INFO - Starting static code similarity comparison
2025-01-08 09:22:27,153 - INFO - Static similarity result: {'final_score': 79.96, 'length_similarity': 96.45, 'token_similarity': 58.06, 'structure_similarity': 72.31, 'function_similarity': 100, 'complexity_similarity': 100.0, 'variable_similarity': 100}
