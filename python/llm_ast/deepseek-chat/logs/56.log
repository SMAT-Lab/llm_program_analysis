2025-01-08 09:27:22,185 - INFO - Processing sample 56
2025-01-08 09:27:22,185 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 09:27:39,675 - INFO - Successfully split code into 7 top-level declarations
2025-01-08 09:27:39,677 - INFO - Processing chunk #0 (size=253 chars, start_index=0)
2025-01-08 09:27:39,677 - INFO - Processing chunk with 253 chars starting at index 0
2025-01-08 09:27:39,677 - INFO - Starting main AST analysis flow
2025-01-08 09:27:39,678 - INFO - Tokenized code into 4 tokens
2025-01-08 09:27:39,678 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:27:39,679 - INFO - Processing chunk #1 (size=35 chars, start_index=4)
2025-01-08 09:27:39,679 - INFO - Processing chunk with 35 chars starting at index 4
2025-01-08 09:27:39,680 - INFO - Starting main AST analysis flow
2025-01-08 09:27:39,680 - INFO - Tokenized code into 5 tokens
2025-01-08 09:27:39,680 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:27:39,684 - INFO - Processing chunk #2 (size=15 chars, start_index=9)
2025-01-08 09:27:39,684 - INFO - Processing chunk with 15 chars starting at index 9
2025-01-08 09:27:39,684 - INFO - Starting main AST analysis flow
2025-01-08 09:27:39,684 - INFO - Tokenized code into 6 tokens
2025-01-08 09:27:39,684 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:27:39,696 - INFO - Processing chunk #3 (size=1034 chars, start_index=15)
2025-01-08 09:27:39,696 - INFO - Processing chunk with 1034 chars starting at index 15
2025-01-08 09:27:39,696 - INFO - Starting main AST analysis flow
2025-01-08 09:27:39,696 - INFO - Tokenized code into 236 tokens
2025-01-08 09:27:39,696 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:27:39,697 - INFO - Processing chunk #4 (size=1039 chars, start_index=251)
2025-01-08 09:27:39,697 - INFO - Processing chunk with 1039 chars starting at index 251
2025-01-08 09:27:39,697 - INFO - Starting main AST analysis flow
2025-01-08 09:27:39,698 - INFO - Tokenized code into 118 tokens
2025-01-08 09:27:39,700 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:27:39,702 - INFO - Processing chunk #5 (size=364 chars, start_index=369)
2025-01-08 09:27:39,702 - INFO - Processing chunk with 364 chars starting at index 369
2025-01-08 09:27:39,706 - INFO - Processing chunk #6 (size=180 chars, start_index=461)
2025-01-08 09:27:39,706 - INFO - Starting main AST analysis flow
2025-01-08 09:27:39,707 - INFO - Processing chunk with 180 chars starting at index 461
2025-01-08 09:27:39,708 - INFO - Tokenized code into 92 tokens
2025-01-08 09:27:39,708 - INFO - Starting main AST analysis flow
2025-01-08 09:27:39,708 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:27:39,709 - INFO - Tokenized code into 64 tokens
2025-01-08 09:27:39,710 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 09:28:06,166 - INFO - Step 1 result: {'type': 'Program', 'name': 'printboard', 'range': [369, 460], 'children': []}
2025-01-08 09:28:06,166 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:28:06,172 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 3], 'children': []}
2025-01-08 09:28:06,172 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:28:06,555 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [9, 14], 'children': []}
2025-01-08 09:28:06,556 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:28:06,798 - INFO - Step 1 result: {'type': 'Program', 'name': 'solve', 'range': [251, 368], 'children': []}
2025-01-08 09:28:06,798 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:28:07,120 - INFO - Step 1 result: {'type': 'Program', 'name': 'is_safe', 'range': [15, 250], 'children': []}
2025-01-08 09:28:07,120 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:28:07,808 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [4, 8], 'children': []}
2025-01-08 09:28:07,809 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:28:11,075 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [461, 524], 'children': [{'type': 'VariableDeclaration', 'name': 'n', 'range': [481, 483], 'children': []}, {'type': 'VariableDeclaration', 'name': 'board', 'range': [485, 505], 'children': []}, {'type': 'FunctionCall', 'name': 'solve', 'range': [507, 512], 'children': []}, {'type': 'FunctionCall', 'name': 'print', 'range': [514, 522], 'children': []}]}
2025-01-08 09:28:11,075 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 09:28:18,907 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [0, 3], 'children': [{'type': 'Comment', 'name': '', 'range': [1, 1], 'children': []}]}
2025-01-08 09:28:18,907 - INFO - Starting Step 3: AST simplification
2025-01-08 09:28:21,263 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [4, 8], 'children': [{'type': 'ImportFrom', 'name': 'annotations', 'range': [4, 8], 'children': [{'type': 'Module', 'name': '__future__', 'range': [5, 5], 'children': []}, {'type': 'Import', 'name': 'annotations', 'range': [7, 7], 'children': []}]}]}
2025-01-08 09:28:21,263 - INFO - Starting Step 3: AST simplification
2025-01-08 09:28:21,749 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [9, 14], 'children': [{'type': 'VariableDeclaration', 'name': 'solution', 'range': [9, 12], 'children': [{'type': 'Assignment', 'name': '=', 'range': [10, 11], 'children': []}, {'type': 'ArrayLiteral', 'name': '[]', 'range': [11, 12], 'children': []}]}]}
2025-01-08 09:28:21,749 - INFO - Starting Step 3: AST simplification
2025-01-08 09:28:40,406 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [9, 14], 'children': [{'type': 'VariableDeclaration', 'name': 'solution', 'range': [9, 12], 'children': [{'type': 'Assignment', 'name': '=', 'range': [10, 11], 'children': []}, {'type': 'ArrayLiteral', 'name': '[]', 'range': [11, 12], 'children': []}]}]}
2025-01-08 09:28:40,406 - INFO - Starting Step 4: AST normalization
2025-01-08 09:28:41,144 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [0, 3], 'children': [{'type': 'Comment', 'name': '', 'range': [1, 1], 'children': [{'type': 'Literal', 'name': '', 'range': [1, 1], 'value': ' \\n  \\n The nqueens problem is of placing N queens on a N * N \\n chess board such that no queen can attack any other queens placed \\n on that chess board. \\n This means that one queen cannot have any other queen on its horizontal, vertical and \\n diagonal lines. \\n  \\n ', 'children': []}]}]}
2025-01-08 09:28:41,145 - INFO - Starting Step 4: AST normalization
2025-01-08 09:28:41,598 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [4, 8], 'children': [{'type': 'ImportFrom', 'name': 'annotations', 'range': [4, 8], 'children': [{'type': 'Module', 'name': '__future__', 'range': [5, 5], 'children': []}, {'type': 'Import', 'name': 'annotations', 'range': [7, 7], 'children': []}]}]}
2025-01-08 09:28:41,598 - INFO - Starting Step 4: AST normalization
2025-01-08 09:28:44,187 - INFO - Step 2 result: {'nodes': [{'type': 'VariableDeclaration', 'name': 'n', 'range': [481, 483], 'children': [{'type': 'Assignment', 'name': '=', 'range': [482, 483], 'children': [{'type': 'Literal', 'name': '8', 'range': [483, 483], 'children': []}]}]}, {'type': 'VariableDeclaration', 'name': 'board', 'range': [485, 505], 'children': [{'type': 'Assignment', 'name': '=', 'range': [486, 505], 'children': [{'type': 'ListComprehension', 'name': '', 'range': [487, 505], 'children': [{'type': 'List', 'name': '', 'range': [488, 497], 'children': [{'type': 'Literal', 'name': '0', 'range': [489, 489], 'children': []}, {'type': 'ForLoop', 'name': 'for', 'range': [490, 496], 'children': [{'type': 'VariableDeclaration', 'name': 'i', 'range': [491, 491], 'children': []}, {'type': 'FunctionCall', 'name': 'range', 'range': [493, 496], 'children': [{'type': 'VariableReference', 'name': 'n', 'range': [495, 495], 'children': []}]}]}]}, {'type': 'ForLoop', 'name': 'for', 'range': [498, 504], 'children': [{'type': 'VariableDeclaration', 'name': 'j', 'range': [499, 499], 'children': []}, {'type': 'FunctionCall', 'name': 'range', 'range': [501, 504], 'children': [{'type': 'VariableReference', 'name': 'n', 'range': [503, 503], 'children': []}]}]}]}]}]}, {'type': 'FunctionCall', 'name': 'solve', 'range': [507, 512], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [508, 512], 'children': [{'type': 'VariableReference', 'name': 'board', 'range': [509, 509], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [511, 511], 'children': []}]}]}, {'type': 'FunctionCall', 'name': 'print', 'range': [514, 522], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [515, 522], 'children': [{'type': 'Literal', 'name': '"The total number of solutions are:"', 'range': [516, 516], 'children': []}, {'type': 'FunctionCall', 'name': 'len', 'range': [518, 521], 'children': [{'type': 'VariableReference', 'name': 'solution', 'range': [520, 520], 'children': []}]}]}]}]}
2025-01-08 09:28:44,187 - INFO - Starting Step 3: AST simplification
2025-01-08 09:28:46,443 - INFO - Step 2 result: {'type': 'Program', 'name': 'solve', 'range': [251, 368], 'children': [{'type': 'FunctionDeclaration', 'name': 'solve', 'range': [251, 368], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [253, 267], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [254, 262], 'children': []}, {'type': 'Parameter', 'name': 'row', 'range': [264, 266], 'children': []}]}, {'type': 'ReturnType', 'name': 'returnType', 'range': [268, 270], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [271, 368], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [273, 275], 'children': []}, {'type': 'IfStatement', 'name': 'ifStatement', 'range': [277, 309], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [278, 284], 'children': []}, {'type': 'Docstring', 'name': 'docstring', 'range': [287, 289], 'children': []}, {'type': 'Block', 'name': 'consequent', 'range': [290, 309], 'children': [{'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [291, 297], 'children': []}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [298, 302], 'children': []}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [303, 306], 'children': []}, {'type': 'ReturnStatement', 'name': 'returnStatement', 'range': [307, 309], 'children': []}]}]}, {'type': 'ForStatement', 'name': 'forStatement', 'range': [310, 365], 'children': [{'type': 'Initialization', 'name': 'initialization', 'range': [311, 319], 'children': []}, {'type': 'Docstring', 'name': 'docstring', 'range': [322, 324], 'children': []}, {'type': 'Block', 'name': 'body', 'range': [325, 365], 'children': [{'type': 'IfStatement', 'name': 'ifStatement', 'range': [326, 355], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [327, 334], 'children': []}, {'type': 'Block', 'name': 'consequent', 'range': [335, 355], 'children': [{'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [337, 346], 'children': []}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [347, 354], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [356, 365], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'returnStatement', 'range': [366, 368], 'children': []}]}]}]}
2025-01-08 09:28:46,443 - INFO - Starting Step 3: AST simplification
2025-01-08 09:28:49,433 - INFO - Step 2 result: {'type': 'Program', 'name': 'is_safe', 'range': [15, 250], 'children': [{'type': 'FunctionDeclaration', 'name': 'is_safe', 'range': [15, 250], 'children': [{'type': 'Parameters', 'name': 'parameters', 'range': [17, 35], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [18, 26], 'children': [{'type': 'TypeAnnotation', 'name': 'list[list[int]]', 'range': [20, 26], 'children': []}]}, {'type': 'Parameter', 'name': 'row', 'range': [28, 30], 'children': [{'type': 'TypeAnnotation', 'name': 'int', 'range': [29, 30], 'children': []}]}, {'type': 'Parameter', 'name': 'column', 'range': [32, 34], 'children': [{'type': 'TypeAnnotation', 'name': 'int', 'range': [33, 34], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [36, 38], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [39, 250], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [41, 43], 'children': []}, {'type': 'Assignment', 'name': 'n = len(board)', 'range': [46, 57], 'children': [{'type': 'Variable', 'name': 'n', 'range': [46, 47], 'children': []}, {'type': 'FunctionCall', 'name': 'len', 'range': [48, 51], 'children': [{'type': 'Argument', 'name': 'board', 'range': [50, 51], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [84, 248], 'children': [{'type': 'LogicalExpression', 'name': 'and', 'range': [85, 248], 'children': [{'type': 'FunctionCall', 'name': 'all', 'range': [87, 124], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n))', 'range': [89, 123], 'children': []}]}, {'type': 'FunctionCall', 'name': 'all', 'range': [127, 170], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))', 'range': [129, 169], 'children': []}]}, {'type': 'FunctionCall', 'name': 'all', 'range': [173, 206], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, n), range(column, n))', 'range': [175, 205], 'children': []}]}, {'type': 'FunctionCall', 'name': 'all', 'range': [209, 246], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1))', 'range': [211, 245], 'children': []}]}]}]}]}]}]}
2025-01-08 09:28:49,434 - INFO - Starting Step 3: AST simplification
2025-01-08 09:28:54,942 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [0, 3], 'children': [{'type': 'Comment', 'name': '', 'range': [1, 1], 'children': [{'type': 'Literal', 'name': '', 'range': [1, 1], 'value': ' \\n  \\n The nqueens problem is of placing N queens on a N * N \\n chess board such that no queen can attack any other queens placed \\n on that chess board. \\n This means that one queen cannot have any other queen on its horizontal, vertical and \\n diagonal lines. \\n  \\n ', 'children': []}]}]}
2025-01-08 09:28:54,942 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:28:54,948 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [4, 8], 'children': [{'type': 'ImportDeclaration', 'name': 'annotations', 'range': [4, 8], 'children': [{'type': 'ModuleSpecifier', 'name': '__future__', 'range': [5, 5], 'children': []}, {'type': 'ImportSpecifier', 'name': 'annotations', 'range': [7, 7], 'children': []}]}]}
2025-01-08 09:28:54,948 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:28:57,002 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [9, 14], 'children': [{'type': 'VariableDeclaration', 'name': 'solution', 'range': [9, 12], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [10, 11], 'children': []}, {'type': 'ArrayExpression', 'name': '[]', 'range': [11, 12], 'children': []}]}]}
2025-01-08 09:28:57,002 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:29:03,268 - INFO - Step 2 result: {'type': 'Program', 'name': 'printboard', 'range': [369, 460], 'children': [{'type': 'FunctionDeclaration', 'name': 'printboard', 'range': [369, 460], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [372, 380], 'children': [{'type': 'TypeAnnotation', 'name': 'list[list[int]]', 'range': [374, 380], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [384, 384], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [386, 460], 'children': [{'type': 'ForStatement', 'name': '', 'range': [391, 459], 'children': [{'type': 'VariableDeclaration', 'name': 'i', 'range': [392, 392], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [394, 400], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [396, 399], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [398, 398], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [402, 459], 'children': [{'type': 'ForStatement', 'name': '', 'range': [403, 458], 'children': [{'type': 'VariableDeclaration', 'name': 'j', 'range': [404, 404], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [406, 412], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [408, 411], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [410, 410], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [414, 458], 'children': [{'type': 'IfStatement', 'name': '', 'range': [415, 455], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [416, 425], 'children': [{'type': 'MemberExpression', 'name': 'board[i][j]', 'range': [416, 422], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [416, 416], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [418, 418], 'children': []}, {'type': 'Identifier', 'name': 'j', 'range': [421, 421], 'children': []}]}, {'type': 'Literal', 'name': '1', 'range': [425, 425], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [427, 440], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [428, 435], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [428, 435], 'children': [{'type': 'Literal', 'name': '"Q"', 'range': [430, 430], 'children': []}, {'type': 'AssignmentExpression', 'name': 'end=" "', 'range': [432, 434], 'children': [{'type': 'Identifier', 'name': 'end', 'range': [432, 432], 'children': []}, {'type': 'Literal', 'name': '" "', 'range': [434, 434], 'children': []}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [441, 455], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [443, 455], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [444, 451], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [444, 451], 'children': [{'type': 'Literal', 'name': '"."', 'range': [446, 446], 'children': []}, {'type': 'AssignmentExpression', 'name': 'end=" "', 'range': [448, 450], 'children': [{'type': 'Identifier', 'name': 'end', 'range': [448, 448], 'children': []}, {'type': 'Literal', 'name': '" "', 'range': [450, 450], 'children': []}]}]}]}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [456, 459], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [456, 459], 'children': []}]}]}]}]}]}]}
2025-01-08 09:29:03,268 - INFO - Starting Step 3: AST simplification
2025-01-08 09:29:08,823 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [4, 8], 'children': [{'type': 'ImportDeclaration', 'name': 'annotations', 'range': [4, 8], 'children': [{'type': 'ModuleSpecifier', 'name': '__future__', 'range': [5, 5], 'children': []}, {'type': 'ImportSpecifier', 'name': 'annotations', 'range': [7, 7], 'children': []}]}]}
2025-01-08 09:29:08,824 - INFO - Completed main AST analysis flow
2025-01-08 09:29:08,824 - INFO - Successfully processed chunk
2025-01-08 09:29:09,502 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [9, 14], 'children': [{'type': 'VariableDeclaration', 'name': 'solution', 'range': [9, 12], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [10, 11], 'children': []}, {'type': 'ArrayExpression', 'name': '[]', 'range': [11, 12], 'children': []}]}]}
2025-01-08 09:29:09,502 - INFO - Completed main AST analysis flow
2025-01-08 09:29:09,502 - INFO - Successfully processed chunk
2025-01-08 09:29:10,212 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [0, 3], 'children': [{'type': 'Comment', 'name': '', 'range': [1, 1], 'children': [{'type': 'Literal', 'name': '', 'range': [1, 1], 'value': ' \\n  \\n The nqueens problem is of placing N queens on a N * N \\n chess board such that no queen can attack any other queens placed \\n on that chess board. \\n This means that one queen cannot have any other queen on its horizontal, vertical and \\n diagonal lines. \\n  \\n ', 'children': []}]}]}
2025-01-08 09:29:10,212 - INFO - Completed main AST analysis flow
2025-01-08 09:29:10,213 - INFO - Successfully processed chunk
2025-01-08 09:29:18,022 - INFO - Step 3 result: {'nodes': [{'type': 'VariableDeclaration', 'name': 'n', 'range': [481, 483], 'children': [{'type': 'Assignment', 'name': '=', 'range': [482, 483], 'children': [{'type': 'Literal', 'name': '8', 'range': [483, 483], 'children': []}]}]}, {'type': 'VariableDeclaration', 'name': 'board', 'range': [485, 505], 'children': [{'type': 'Assignment', 'name': '=', 'range': [486, 505], 'children': [{'type': 'ListComprehension', 'name': '', 'range': [487, 505], 'children': [{'type': 'List', 'name': '', 'range': [488, 497], 'children': [{'type': 'Literal', 'name': '0', 'range': [489, 489], 'children': []}, {'type': 'ForLoop', 'name': 'for', 'range': [490, 496], 'children': [{'type': 'VariableDeclaration', 'name': 'i', 'range': [491, 491], 'children': []}, {'type': 'FunctionCall', 'name': 'range', 'range': [493, 496], 'children': [{'type': 'VariableReference', 'name': 'n', 'range': [495, 495], 'children': []}]}]}]}, {'type': 'ForLoop', 'name': 'for', 'range': [498, 504], 'children': [{'type': 'VariableDeclaration', 'name': 'j', 'range': [499, 499], 'children': []}, {'type': 'FunctionCall', 'name': 'range', 'range': [501, 504], 'children': [{'type': 'VariableReference', 'name': 'n', 'range': [503, 503], 'children': []}]}]}]}]}]}, {'type': 'FunctionCall', 'name': 'solve', 'range': [507, 512], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [508, 512], 'children': [{'type': 'VariableReference', 'name': 'board', 'range': [509, 509], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [511, 511], 'children': []}]}]}, {'type': 'FunctionCall', 'name': 'print', 'range': [514, 522], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [515, 522], 'children': [{'type': 'Literal', 'name': '"The total number of solutions are:"', 'range': [516, 516], 'children': []}, {'type': 'FunctionCall', 'name': 'len', 'range': [518, 521], 'children': [{'type': 'VariableReference', 'name': 'solution', 'range': [520, 520], 'children': []}]}]}]}]}
2025-01-08 09:29:18,022 - INFO - Starting Step 4: AST normalization
2025-01-08 09:29:19,869 - INFO - Step 3 result: {'type': 'Program', 'name': 'solve', 'range': [251, 368], 'children': [{'type': 'FunctionDeclaration', 'name': 'solve', 'range': [251, 368], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [253, 267], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [254, 262], 'children': []}, {'type': 'Parameter', 'name': 'row', 'range': [264, 266], 'children': []}]}, {'type': 'ReturnType', 'name': 'returnType', 'range': [268, 270], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [271, 368], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [273, 275], 'children': []}, {'type': 'IfStatement', 'name': 'ifStatement', 'range': [277, 309], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [278, 284], 'children': []}, {'type': 'Docstring', 'name': 'docstring', 'range': [287, 289], 'children': []}, {'type': 'Block', 'name': 'consequent', 'range': [290, 309], 'children': [{'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [291, 297], 'children': []}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [298, 302], 'children': []}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [303, 306], 'children': []}, {'type': 'ReturnStatement', 'name': 'returnStatement', 'range': [307, 309], 'children': []}]}]}, {'type': 'ForStatement', 'name': 'forStatement', 'range': [310, 365], 'children': [{'type': 'Initialization', 'name': 'initialization', 'range': [311, 319], 'children': []}, {'type': 'Docstring', 'name': 'docstring', 'range': [322, 324], 'children': []}, {'type': 'Block', 'name': 'body', 'range': [325, 365], 'children': [{'type': 'IfStatement', 'name': 'ifStatement', 'range': [326, 355], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [327, 334], 'children': []}, {'type': 'Block', 'name': 'consequent', 'range': [335, 355], 'children': [{'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [337, 346], 'children': []}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [347, 354], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [356, 365], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'returnStatement', 'range': [366, 368], 'children': []}]}]}]}
2025-01-08 09:29:19,870 - INFO - Starting Step 4: AST normalization
2025-01-08 09:29:25,835 - INFO - Step 3 result: {'type': 'Program', 'name': 'is_safe', 'range': [15, 250], 'children': [{'type': 'FunctionDeclaration', 'name': 'is_safe', 'range': [15, 250], 'children': [{'type': 'Parameters', 'name': 'parameters', 'range': [17, 35], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [18, 26], 'children': [{'type': 'TypeAnnotation', 'name': 'list[list[int]]', 'range': [20, 26], 'children': []}]}, {'type': 'Parameter', 'name': 'row', 'range': [28, 30], 'children': [{'type': 'TypeAnnotation', 'name': 'int', 'range': [29, 30], 'children': []}]}, {'type': 'Parameter', 'name': 'column', 'range': [32, 34], 'children': [{'type': 'TypeAnnotation', 'name': 'int', 'range': [33, 34], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [36, 38], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [39, 250], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [41, 43], 'children': []}, {'type': 'Assignment', 'name': 'n = len(board)', 'range': [46, 57], 'children': [{'type': 'Variable', 'name': 'n', 'range': [46, 47], 'children': []}, {'type': 'FunctionCall', 'name': 'len', 'range': [48, 51], 'children': [{'type': 'Argument', 'name': 'board', 'range': [50, 51], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [84, 248], 'children': [{'type': 'LogicalExpression', 'name': 'and', 'range': [85, 248], 'children': [{'type': 'FunctionCall', 'name': 'all', 'range': [87, 124], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n))', 'range': [89, 123], 'children': []}]}, {'type': 'FunctionCall', 'name': 'all', 'range': [127, 170], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))', 'range': [129, 169], 'children': []}]}, {'type': 'FunctionCall', 'name': 'all', 'range': [173, 206], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, n), range(column, n))', 'range': [175, 205], 'children': []}]}, {'type': 'FunctionCall', 'name': 'all', 'range': [209, 246], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1))', 'range': [211, 245], 'children': []}]}]}]}]}]}]}
2025-01-08 09:29:25,835 - INFO - Starting Step 4: AST normalization
2025-01-08 09:29:56,511 - INFO - Step 3 result: {'type': 'Program', 'name': 'printboard', 'range': [369, 460], 'children': [{'type': 'FunctionDeclaration', 'name': 'printboard', 'range': [369, 460], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [372, 380], 'children': [{'type': 'TypeAnnotation', 'name': 'list[list[int]]', 'range': [374, 380], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [384, 384], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [386, 460], 'children': [{'type': 'ForStatement', 'name': '', 'range': [391, 459], 'children': [{'type': 'VariableDeclaration', 'name': 'i', 'range': [392, 392], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [394, 400], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [396, 399], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [398, 398], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [402, 459], 'children': [{'type': 'ForStatement', 'name': '', 'range': [403, 458], 'children': [{'type': 'VariableDeclaration', 'name': 'j', 'range': [404, 404], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [406, 412], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [408, 411], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [410, 410], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [414, 458], 'children': [{'type': 'IfStatement', 'name': '', 'range': [415, 455], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [416, 425], 'children': [{'type': 'MemberExpression', 'name': 'board[i][j]', 'range': [416, 422], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [416, 416], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [418, 418], 'children': []}, {'type': 'Identifier', 'name': 'j', 'range': [421, 421], 'children': []}]}, {'type': 'Literal', 'name': '1', 'range': [425, 425], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [427, 440], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [428, 435], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [428, 435], 'children': [{'type': 'Literal', 'name': '"Q"', 'range': [430, 430], 'children': []}, {'type': 'AssignmentExpression', 'name': 'end=" "', 'range': [432, 434], 'children': [{'type': 'Identifier', 'name': 'end', 'range': [432, 432], 'children': []}, {'type': 'Literal', 'name': '" "', 'range': [434, 434], 'children': []}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [441, 455], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [443, 455], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [444, 451], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [444, 451], 'children': [{'type': 'Literal', 'name': '"."', 'range': [446, 446], 'children': []}, {'type': 'AssignmentExpression', 'name': 'end=" "', 'range': [448, 450], 'children': [{'type': 'Identifier', 'name': 'end', 'range': [448, 448], 'children': []}, {'type': 'Literal', 'name': '" "', 'range': [450, 450], 'children': []}]}]}]}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [456, 459], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [456, 459], 'children': []}]}]}]}]}]}]}
2025-01-08 09:29:56,511 - INFO - Starting Step 4: AST normalization
2025-01-08 09:30:01,854 - INFO - Step 4 result: {'nodes': [{'type': 'VariableDeclaration', 'name': 'n', 'range': [481, 483], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [482, 483], 'children': [{'type': 'Literal', 'name': '8', 'range': [483, 483], 'children': []}]}]}, {'type': 'VariableDeclaration', 'name': 'board', 'range': [485, 505], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [486, 505], 'children': [{'type': 'ListComprehension', 'name': '', 'range': [487, 505], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [488, 497], 'children': [{'type': 'Literal', 'name': '0', 'range': [489, 489], 'children': []}, {'type': 'ForStatement', 'name': 'for', 'range': [490, 496], 'children': [{'type': 'VariableDeclaration', 'name': 'i', 'range': [491, 491], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [493, 496], 'children': [{'type': 'Identifier', 'name': 'n', 'range': [495, 495], 'children': []}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [498, 504], 'children': [{'type': 'VariableDeclaration', 'name': 'j', 'range': [499, 499], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [501, 504], 'children': [{'type': 'Identifier', 'name': 'n', 'range': [503, 503], 'children': []}]}]}]}]}]}, {'type': 'CallExpression', 'name': 'solve', 'range': [507, 512], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [508, 512], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [509, 509], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [511, 511], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'print', 'range': [514, 522], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [515, 522], 'children': [{'type': 'Literal', 'name': '"The total number of solutions are:"', 'range': [516, 516], 'children': []}, {'type': 'CallExpression', 'name': 'len', 'range': [518, 521], 'children': [{'type': 'Identifier', 'name': 'solution', 'range': [520, 520], 'children': []}]}]}]}]}
2025-01-08 09:30:01,854 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:30:05,359 - INFO - Step 4 result: {'type': 'Program', 'name': 'solve', 'range': [251, 368], 'children': [{'type': 'FunctionDecl', 'name': 'solve', 'range': [251, 368], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [253, 267], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [254, 262], 'children': []}, {'type': 'Parameter', 'name': 'row', 'range': [264, 266], 'children': []}]}, {'type': 'ReturnType', 'name': 'returnType', 'range': [268, 270], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [271, 368], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [273, 275], 'children': []}, {'type': 'IfStatement', 'name': 'ifStatement', 'range': [277, 309], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [278, 284], 'children': []}, {'type': 'Docstring', 'name': 'docstring', 'range': [287, 289], 'children': []}, {'type': 'Block', 'name': 'consequent', 'range': [290, 309], 'children': [{'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [291, 297], 'children': []}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [298, 302], 'children': []}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [303, 306], 'children': []}, {'type': 'ReturnStatement', 'name': 'returnStatement', 'range': [307, 309], 'children': []}]}]}, {'type': 'ForStatement', 'name': 'forStatement', 'range': [310, 365], 'children': [{'type': 'Initialization', 'name': 'initialization', 'range': [311, 319], 'children': []}, {'type': 'Docstring', 'name': 'docstring', 'range': [322, 324], 'children': []}, {'type': 'Block', 'name': 'body', 'range': [325, 365], 'children': [{'type': 'IfStatement', 'name': 'ifStatement', 'range': [326, 355], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [327, 334], 'children': []}, {'type': 'Block', 'name': 'consequent', 'range': [335, 355], 'children': [{'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [337, 346], 'children': []}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [347, 354], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [356, 365], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'returnStatement', 'range': [366, 368], 'children': []}]}]}]}
2025-01-08 09:30:05,359 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:30:06,213 - INFO - Step 4 result: {'type': 'Program', 'name': 'is_safe', 'range': [15, 250], 'children': [{'type': 'FunctionDecl', 'name': 'is_safe', 'range': [15, 250], 'children': [{'type': 'Parameters', 'name': 'parameters', 'range': [17, 35], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [18, 26], 'children': [{'type': 'TypeAnnotation', 'name': 'list[list[int]]', 'range': [20, 26], 'children': []}]}, {'type': 'Parameter', 'name': 'row', 'range': [28, 30], 'children': [{'type': 'TypeAnnotation', 'name': 'int', 'range': [29, 30], 'children': []}]}, {'type': 'Parameter', 'name': 'column', 'range': [32, 34], 'children': [{'type': 'TypeAnnotation', 'name': 'int', 'range': [33, 34], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [36, 38], 'children': []}, {'type': 'BlockStatement', 'name': 'body', 'range': [39, 250], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [41, 43], 'children': []}, {'type': 'VariableDecl', 'name': 'n = len(board)', 'range': [46, 57], 'children': [{'type': 'Identifier', 'name': 'n', 'range': [46, 47], 'children': []}, {'type': 'CallExpression', 'name': 'len', 'range': [48, 51], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [50, 51], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [84, 248], 'children': [{'type': 'LogicalExpression', 'name': 'and', 'range': [85, 248], 'children': [{'type': 'CallExpression', 'name': 'all', 'range': [87, 124], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n))', 'range': [89, 123], 'children': []}]}, {'type': 'CallExpression', 'name': 'all', 'range': [127, 170], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))', 'range': [129, 169], 'children': []}]}, {'type': 'CallExpression', 'name': 'all', 'range': [173, 206], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, n), range(column, n))', 'range': [175, 205], 'children': []}]}, {'type': 'CallExpression', 'name': 'all', 'range': [209, 246], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1))', 'range': [211, 245], 'children': []}]}]}]}]}]}]}
2025-01-08 09:30:06,214 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:30:34,738 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainProgram', 'range': [481, 522], 'children': [{'type': 'VariableDeclaration', 'name': 'n', 'range': [481, 483], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [482, 483], 'children': [{'type': 'Literal', 'name': '8', 'range': [483, 483], 'children': []}]}]}, {'type': 'VariableDeclaration', 'name': 'board', 'range': [485, 505], 'children': [{'type': 'AssignmentExpression', 'name': '=', 'range': [486, 505], 'children': [{'type': 'ListComprehension', 'name': '', 'range': [487, 505], 'children': [{'type': 'ArrayExpression', 'name': '', 'range': [488, 497], 'children': [{'type': 'Literal', 'name': '0', 'range': [489, 489], 'children': []}, {'type': 'ForStatement', 'name': 'for', 'range': [490, 496], 'children': [{'type': 'VariableDeclaration', 'name': 'i', 'range': [491, 491], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [493, 496], 'children': [{'type': 'Identifier', 'name': 'n', 'range': [495, 495], 'children': []}]}]}]}, {'type': 'ForStatement', 'name': 'for', 'range': [498, 504], 'children': [{'type': 'VariableDeclaration', 'name': 'j', 'range': [499, 499], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [501, 504], 'children': [{'type': 'Identifier', 'name': 'n', 'range': [503, 503], 'children': []}]}]}]}]}]}, {'type': 'CallExpression', 'name': 'solve', 'range': [507, 512], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [508, 512], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [509, 509], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [511, 511], 'children': []}]}]}, {'type': 'CallExpression', 'name': 'print', 'range': [514, 522], 'children': [{'type': 'ArgumentList', 'name': '', 'range': [515, 522], 'children': [{'type': 'Literal', 'name': '"The total number of solutions are:"', 'range': [516, 516], 'children': []}, {'type': 'CallExpression', 'name': 'len', 'range': [518, 521], 'children': [{'type': 'Identifier', 'name': 'solution', 'range': [520, 520], 'children': []}]}]}]}]}]}
2025-01-08 09:30:34,738 - INFO - Completed main AST analysis flow
2025-01-08 09:30:34,739 - INFO - Successfully processed chunk
2025-01-08 09:30:41,550 - INFO - Step 5 result: {'type': 'Program', 'name': 'solve', 'range': [251, 368], 'children': [{'type': 'FunctionDecl', 'name': 'solve', 'range': [251, 368], 'children': [{'type': 'ParameterList', 'name': 'parameters', 'range': [253, 267], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [254, 262], 'children': []}, {'type': 'Parameter', 'name': 'row', 'range': [264, 266], 'children': []}]}, {'type': 'ReturnType', 'name': 'returnType', 'range': [268, 270], 'children': []}, {'type': 'FunctionBody', 'name': 'body', 'range': [271, 368], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [273, 275], 'children': []}, {'type': 'IfStatement', 'name': 'ifStatement', 'range': [277, 309], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [278, 284], 'children': []}, {'type': 'Docstring', 'name': 'docstring', 'range': [287, 289], 'children': []}, {'type': 'Block', 'name': 'consequent', 'range': [290, 309], 'children': [{'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [291, 297], 'children': []}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [298, 302], 'children': []}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [303, 306], 'children': []}, {'type': 'ReturnStatement', 'name': 'returnStatement', 'range': [307, 309], 'children': []}]}]}, {'type': 'ForStatement', 'name': 'forStatement', 'range': [310, 365], 'children': [{'type': 'Initialization', 'name': 'initialization', 'range': [311, 319], 'children': []}, {'type': 'Docstring', 'name': 'docstring', 'range': [322, 324], 'children': []}, {'type': 'Block', 'name': 'body', 'range': [325, 365], 'children': [{'type': 'IfStatement', 'name': 'ifStatement', 'range': [326, 355], 'children': [{'type': 'Condition', 'name': 'condition', 'range': [327, 334], 'children': []}, {'type': 'Block', 'name': 'consequent', 'range': [335, 355], 'children': [{'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [337, 346], 'children': []}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [347, 354], 'children': []}]}]}, {'type': 'ExpressionStatement', 'name': 'expressionStatement', 'range': [356, 365], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'returnStatement', 'range': [366, 368], 'children': []}]}]}]}
2025-01-08 09:30:41,550 - INFO - Completed main AST analysis flow
2025-01-08 09:30:41,551 - INFO - Successfully processed chunk
2025-01-08 09:30:49,037 - INFO - Step 4 result: {'type': 'Program', 'name': 'printboard', 'range': [369, 460], 'children': [{'type': 'FunctionDecl', 'name': 'printboard', 'range': [369, 460], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [372, 380], 'children': [{'type': 'TypeAnnotation', 'name': 'list[list[int]]', 'range': [374, 380], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [384, 384], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [386, 460], 'children': [{'type': 'ForStatement', 'name': '', 'range': [391, 459], 'children': [{'type': 'VariableDeclaration', 'name': 'i', 'range': [392, 392], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [394, 400], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [396, 399], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [398, 398], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [402, 459], 'children': [{'type': 'ForStatement', 'name': '', 'range': [403, 458], 'children': [{'type': 'VariableDeclaration', 'name': 'j', 'range': [404, 404], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [406, 412], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [408, 411], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [410, 410], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [414, 458], 'children': [{'type': 'IfStatement', 'name': '', 'range': [415, 455], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [416, 425], 'children': [{'type': 'MemberExpression', 'name': 'board[i][j]', 'range': [416, 422], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [416, 416], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [418, 418], 'children': []}, {'type': 'Identifier', 'name': 'j', 'range': [421, 421], 'children': []}]}, {'type': 'Literal', 'name': '1', 'range': [425, 425], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [427, 440], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [428, 435], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [428, 435], 'children': [{'type': 'Literal', 'name': '"Q"', 'range': [430, 430], 'children': []}, {'type': 'AssignmentExpression', 'name': 'end=" "', 'range': [432, 434], 'children': [{'type': 'Identifier', 'name': 'end', 'range': [432, 432], 'children': []}, {'type': 'Literal', 'name': '" "', 'range': [434, 434], 'children': []}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [441, 455], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [443, 455], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [444, 451], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [444, 451], 'children': [{'type': 'Literal', 'name': '"."', 'range': [446, 446], 'children': []}, {'type': 'AssignmentExpression', 'name': 'end=" "', 'range': [448, 450], 'children': [{'type': 'Identifier', 'name': 'end', 'range': [448, 448], 'children': []}, {'type': 'Literal', 'name': '" "', 'range': [450, 450], 'children': []}]}]}]}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [456, 459], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [456, 459], 'children': []}]}]}]}]}]}]}
2025-01-08 09:30:49,038 - INFO - Starting Step 5: Final AST combination
2025-01-08 09:30:52,138 - INFO - Step 5 result: {'type': 'Program', 'name': 'is_safe', 'range': [15, 250], 'children': [{'type': 'FunctionDecl', 'name': 'is_safe', 'range': [15, 250], 'children': [{'type': 'Parameters', 'name': 'parameters', 'range': [17, 35], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [18, 26], 'children': [{'type': 'TypeAnnotation', 'name': 'list[list[int]]', 'range': [20, 26], 'children': []}]}, {'type': 'Parameter', 'name': 'row', 'range': [28, 30], 'children': [{'type': 'TypeAnnotation', 'name': 'int', 'range': [29, 30], 'children': []}]}, {'type': 'Parameter', 'name': 'column', 'range': [32, 34], 'children': [{'type': 'TypeAnnotation', 'name': 'int', 'range': [33, 34], 'children': []}]}]}, {'type': 'ReturnType', 'name': 'bool', 'range': [36, 38], 'children': []}, {'type': 'BlockStatement', 'name': 'body', 'range': [39, 250], 'children': [{'type': 'Docstring', 'name': 'docstring', 'range': [41, 43], 'children': []}, {'type': 'VariableDecl', 'name': 'n = len(board)', 'range': [46, 57], 'children': [{'type': 'Identifier', 'name': 'n', 'range': [46, 47], 'children': []}, {'type': 'CallExpression', 'name': 'len', 'range': [48, 51], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [50, 51], 'children': []}]}]}, {'type': 'ReturnStatement', 'name': 'return', 'range': [84, 248], 'children': [{'type': 'LogicalExpression', 'name': 'and', 'range': [85, 248], 'children': [{'type': 'CallExpression', 'name': 'all', 'range': [87, 124], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n))', 'range': [89, 123], 'children': []}]}, {'type': 'CallExpression', 'name': 'all', 'range': [127, 170], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))', 'range': [129, 169], 'children': []}]}, {'type': 'CallExpression', 'name': 'all', 'range': [173, 206], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, n), range(column, n))', 'range': [175, 205], 'children': []}]}, {'type': 'CallExpression', 'name': 'all', 'range': [209, 246], 'children': [{'type': 'GeneratorExpression', 'name': 'board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1))', 'range': [211, 245], 'children': []}]}]}]}]}]}]}
2025-01-08 09:30:52,138 - INFO - Completed main AST analysis flow
2025-01-08 09:30:52,139 - INFO - Successfully processed chunk
2025-01-08 09:31:38,547 - INFO - Step 5 result: {'type': 'Program', 'name': 'printboard', 'range': [369, 460], 'children': [{'type': 'FunctionDecl', 'name': 'printboard', 'range': [369, 460], 'children': [{'type': 'Parameter', 'name': 'board', 'range': [372, 380], 'children': [{'type': 'TypeAnnotation', 'name': 'list[list[int]]', 'range': [374, 380], 'children': []}]}, {'type': 'ReturnType', 'name': 'None', 'range': [384, 384], 'children': []}, {'type': 'BlockStatement', 'name': '', 'range': [386, 460], 'children': [{'type': 'ForStatement', 'name': '', 'range': [391, 459], 'children': [{'type': 'VariableDeclaration', 'name': 'i', 'range': [392, 392], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [394, 400], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [396, 399], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [398, 398], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [402, 459], 'children': [{'type': 'ForStatement', 'name': '', 'range': [403, 458], 'children': [{'type': 'VariableDeclaration', 'name': 'j', 'range': [404, 404], 'children': []}, {'type': 'CallExpression', 'name': 'range', 'range': [406, 412], 'children': [{'type': 'CallExpression', 'name': 'len', 'range': [408, 411], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [410, 410], 'children': []}]}]}, {'type': 'BlockStatement', 'name': '', 'range': [414, 458], 'children': [{'type': 'IfStatement', 'name': '', 'range': [415, 455], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [416, 425], 'children': [{'type': 'MemberExpression', 'name': 'board[i][j]', 'range': [416, 422], 'children': [{'type': 'Identifier', 'name': 'board', 'range': [416, 416], 'children': []}, {'type': 'Identifier', 'name': 'i', 'range': [418, 418], 'children': []}, {'type': 'Identifier', 'name': 'j', 'range': [421, 421], 'children': []}]}, {'type': 'Literal', 'name': '1', 'range': [425, 425], 'children': []}]}, {'type': 'BlockStatement', 'name': '', 'range': [427, 440], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [428, 435], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [428, 435], 'children': [{'type': 'Literal', 'name': '"Q"', 'range': [430, 430], 'children': []}, {'type': 'AssignmentExpression', 'name': 'end=" "', 'range': [432, 434], 'children': [{'type': 'Identifier', 'name': 'end', 'range': [432, 432], 'children': []}, {'type': 'Literal', 'name': '" "', 'range': [434, 434], 'children': []}]}]}]}]}, {'type': 'ElseStatement', 'name': '', 'range': [441, 455], 'children': [{'type': 'BlockStatement', 'name': '', 'range': [443, 455], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [444, 451], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [444, 451], 'children': [{'type': 'Literal', 'name': '"."', 'range': [446, 446], 'children': []}, {'type': 'AssignmentExpression', 'name': 'end=" "', 'range': [448, 450], 'children': [{'type': 'Identifier', 'name': 'end', 'range': [448, 448], 'children': []}, {'type': 'Literal', 'name': '" "', 'range': [450, 450], 'children': []}]}]}]}]}]}]}]}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [456, 459], 'children': [{'type': 'CallExpression', 'name': 'print', 'range': [456, 459], 'children': []}]}]}]}]}]}]}
2025-01-08 09:31:38,548 - INFO - Completed main AST analysis flow
2025-01-08 09:31:38,548 - INFO - Successfully processed chunk
2025-01-08 09:31:38,576 - INFO - Starting code generation from AST
2025-01-08 09:32:04,746 - INFO - Successfully generated code from AST
2025-01-08 09:32:04,746 - INFO - Starting static code similarity comparison
2025-01-08 09:32:04,752 - INFO - Static similarity result: {'final_score': 48.46, 'length_similarity': 39.61, 'token_similarity': 55.56, 'structure_similarity': 40.26, 'function_similarity': 100, 'complexity_similarity': 57.89, 'variable_similarity': 0.0}
