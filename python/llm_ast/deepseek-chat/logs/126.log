2025-01-08 10:09:31,431 - INFO - Processing sample 126
2025-01-08 10:09:31,432 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 10:09:34,060 - INFO - Successfully split code into 2 top-level declarations
2025-01-08 10:09:34,061 - INFO - Processing chunk #0 (size=896 chars, start_index=0)
2025-01-08 10:09:34,061 - INFO - Processing chunk with 896 chars starting at index 0
2025-01-08 10:09:34,061 - INFO - Starting main AST analysis flow
2025-01-08 10:09:34,061 - INFO - Tokenized code into 81 tokens
2025-01-08 10:09:34,061 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:09:34,063 - INFO - Processing chunk #1 (size=72 chars, start_index=81)
2025-01-08 10:09:34,063 - INFO - Processing chunk with 72 chars starting at index 81
2025-01-08 10:09:34,063 - INFO - Starting main AST analysis flow
2025-01-08 10:09:34,063 - INFO - Tokenized code into 20 tokens
2025-01-08 10:09:34,063 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:09:35,985 - INFO - Step 1 result: {'type': 'Program', 'name': 'find_previous_power_of_two', 'range': [0, 80], 'children': []}
2025-01-08 10:09:35,985 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:09:37,522 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [81, 100], 'children': [{'type': 'IfStatement', 'name': '', 'range': [83, 88], 'children': []}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [90, 92], 'children': []}, {'type': 'ExpressionStatement', 'name': '', 'range': [94, 98], 'children': []}]}
2025-01-08 10:09:37,522 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:09:47,146 - INFO - Step 2 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [83, 88], 'children': [{'type': 'Condition', 'name': '', 'range': [84, 87], 'children': [{'type': 'Variable', 'name': '__name__', 'range': [84, 84], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [85, 86], 'children': []}, {'type': 'StringLiteral', 'name': '"__main__"', 'range': [87, 87], 'children': []}]}]}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [90, 92], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [91, 91], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [94, 98], 'children': [{'type': 'CallExpression', 'name': '', 'range': [94, 98], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [94, 96], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [94, 94], 'children': []}, {'type': 'Property', 'name': 'testmod', 'range': [96, 96], 'children': []}]}, {'type': 'Arguments', 'name': '', 'range': [97, 98], 'children': []}]}]}]}
2025-01-08 10:09:47,147 - INFO - Starting Step 3: AST simplification
2025-01-08 10:09:56,429 - INFO - Step 3 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [83, 88], 'children': [{'type': 'Condition', 'name': '', 'range': [84, 87], 'children': [{'type': 'Variable', 'name': '__name__', 'range': [84, 84], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [85, 86], 'children': []}, {'type': 'StringLiteral', 'name': '"__main__"', 'range': [87, 87], 'children': []}]}]}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [90, 92], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [91, 91], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [94, 98], 'children': [{'type': 'CallExpression', 'name': '', 'range': [94, 98], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [94, 96], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [94, 94], 'children': []}, {'type': 'Property', 'name': 'testmod', 'range': [96, 96], 'children': []}]}]}]}]}
2025-01-08 10:09:56,429 - INFO - Starting Step 4: AST normalization
2025-01-08 10:10:05,128 - INFO - Step 4 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [83, 88], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [84, 87], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [84, 84], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [85, 86], 'children': []}, {'type': 'Literal', 'name': '"__main__"', 'range': [87, 87], 'children': []}]}]}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [90, 92], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [91, 91], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [94, 98], 'children': [{'type': 'CallExpression', 'name': '', 'range': [94, 98], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [94, 96], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [94, 94], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [96, 96], 'children': []}]}]}]}]}
2025-01-08 10:10:05,128 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:10:08,524 - INFO - Step 2 result: {'type': 'Program', 'name': 'find_previous_power_of_two', 'range': [0, 80], 'children': [{'type': 'FunctionDeclaration', 'name': 'find_previous_power_of_two', 'range': [0, 80], 'children': [{'type': 'Parameter', 'name': 'number', 'range': [3, 5], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [9, 9], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [12, 14], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [16, 35], 'children': [{'type': 'Condition', 'name': '', 'range': [17, 28], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [24, 28], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [18, 23], 'children': [{'type': 'Argument', 'name': 'number', 'range': [20, 20], 'children': []}, {'type': 'Argument', 'name': 'int', 'range': [22, 22], 'children': []}]}, {'type': 'BinaryExpression', 'name': '<', 'range': [25, 27], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [25, 25], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [27, 27], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [29, 35], 'children': [{'type': 'RaiseStatement', 'name': '', 'range': [30, 34], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [31, 34], 'children': [{'type': 'Argument', 'name': '"Input must be a non-negative integer"', 'range': [33, 33], 'children': []}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [36, 45], 'children': [{'type': 'Condition', 'name': '', 'range': [37, 41], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [38, 40], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [37, 37], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [40, 40], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [42, 45], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [43, 44], 'children': [{'type': 'Literal', 'name': '0', 'range': [44, 44], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'power', 'range': [46, 49], 'children': [{'type': 'Literal', 'name': '1', 'range': [48, 48], 'children': []}]}, {'type': 'WhileStatement', 'name': '', 'range': [50, 68], 'children': [{'type': 'Condition', 'name': '', 'range': [51, 55], 'children': [{'type': 'BinaryExpression', 'name': '<=', 'range': [52, 54], 'children': [{'type': 'Identifier', 'name': 'power', 'range': [51, 51], 'children': []}, {'type': 'Identifier', 'name': 'number', 'range': [54, 54], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [56, 68], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [57, 61], 'children': [{'type': 'AssignmentExpression', 'name': '<<=', 'range': [58, 60], 'children': [{'type': 'Identifier', 'name': 'power', 'range': [57, 57], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [60, 60], 'children': []}]}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [69, 80], 'children': [{'type': 'ConditionalExpression', 'name': '', 'range': [70, 79], 'children': [{'type': 'Condition', 'name': '', 'range': [75, 77], 'children': [{'type': 'BinaryExpression', 'name': '>', 'range': [76, 76], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [75, 75], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [77, 77], 'children': []}]}]}, {'type': 'Consequent', 'name': '', 'range': [70, 73], 'children': [{'type': 'BinaryExpression', 'name': '>>', 'range': [71, 72], 'children': [{'type': 'Identifier', 'name': 'power', 'range': [70, 70], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [73, 73], 'children': []}]}]}, {'type': 'Alternate', 'name': '', 'range': [79, 79], 'children': [{'type': 'Literal', 'name': '1', 'range': [79, 79], 'children': []}]}]}]}]}]}
2025-01-08 10:10:08,524 - INFO - Starting Step 3: AST simplification
2025-01-08 10:10:14,516 - INFO - Step 5 result: {'type': 'Program', 'name': 'MainProgram', 'range': [83, 98], 'children': [{'type': 'IfStatement', 'name': '', 'range': [83, 88], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [84, 87], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [84, 84], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [85, 86], 'children': []}, {'type': 'Literal', 'name': '"__main__"', 'range': [87, 87], 'children': []}]}]}, {'type': 'ImportStatement', 'name': 'doctest', 'range': [90, 92], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [91, 91], 'children': []}]}, {'type': 'ExpressionStatement', 'name': '', 'range': [94, 98], 'children': [{'type': 'CallExpression', 'name': '', 'range': [94, 98], 'children': [{'type': 'MemberExpression', 'name': '', 'range': [94, 96], 'children': [{'type': 'Identifier', 'name': 'doctest', 'range': [94, 94], 'children': []}, {'type': 'Identifier', 'name': 'testmod', 'range': [96, 96], 'children': []}]}]}]}]}
2025-01-08 10:10:14,517 - INFO - Completed main AST analysis flow
2025-01-08 10:10:14,517 - INFO - Successfully processed chunk
2025-01-08 10:10:36,880 - INFO - Step 3 result: {'type': 'Program', 'name': 'find_previous_power_of_two', 'range': [0, 80], 'children': [{'type': 'FunctionDeclaration', 'name': 'find_previous_power_of_two', 'range': [0, 80], 'children': [{'type': 'Parameter', 'name': 'number', 'range': [3, 5], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [9, 9], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [12, 14], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [16, 35], 'children': [{'type': 'Condition', 'name': '', 'range': [17, 28], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [24, 28], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [18, 23], 'children': [{'type': 'Argument', 'name': 'number', 'range': [20, 20], 'children': []}, {'type': 'Argument', 'name': 'int', 'range': [22, 22], 'children': []}]}, {'type': 'BinaryExpression', 'name': '<', 'range': [25, 27], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [25, 25], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [27, 27], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [29, 35], 'children': [{'type': 'RaiseStatement', 'name': '', 'range': [30, 34], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [31, 34], 'children': [{'type': 'Argument', 'name': '"Input must be a non-negative integer"', 'range': [33, 33], 'children': []}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [36, 45], 'children': [{'type': 'Condition', 'name': '', 'range': [37, 41], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [38, 40], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [37, 37], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [40, 40], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [42, 45], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [43, 44], 'children': [{'type': 'Literal', 'name': '0', 'range': [44, 44], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'power', 'range': [46, 49], 'children': [{'type': 'Literal', 'name': '1', 'range': [48, 48], 'children': []}]}, {'type': 'WhileStatement', 'name': '', 'range': [50, 68], 'children': [{'type': 'Condition', 'name': '', 'range': [51, 55], 'children': [{'type': 'BinaryExpression', 'name': '<=', 'range': [52, 54], 'children': [{'type': 'Identifier', 'name': 'power', 'range': [51, 51], 'children': []}, {'type': 'Identifier', 'name': 'number', 'range': [54, 54], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [56, 68], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [57, 61], 'children': [{'type': 'AssignmentExpression', 'name': '<<=', 'range': [58, 60], 'children': [{'type': 'Identifier', 'name': 'power', 'range': [57, 57], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [60, 60], 'children': []}]}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [69, 80], 'children': [{'type': 'ConditionalExpression', 'name': '', 'range': [70, 79], 'children': [{'type': 'Condition', 'name': '', 'range': [75, 77], 'children': [{'type': 'BinaryExpression', 'name': '>', 'range': [76, 76], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [75, 75], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [77, 77], 'children': []}]}]}, {'type': 'Consequent', 'name': '', 'range': [70, 73], 'children': [{'type': 'BinaryExpression', 'name': '>>', 'range': [71, 72], 'children': [{'type': 'Identifier', 'name': 'power', 'range': [70, 70], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [73, 73], 'children': []}]}]}, {'type': 'Alternate', 'name': '', 'range': [79, 79], 'children': [{'type': 'Literal', 'name': '1', 'range': [79, 79], 'children': []}]}]}]}]}]}
2025-01-08 10:10:36,880 - INFO - Starting Step 4: AST normalization
2025-01-08 10:11:04,432 - INFO - Step 4 result: {'type': 'Program', 'name': 'find_previous_power_of_two', 'range': [0, 80], 'children': [{'type': 'FunctionDecl', 'name': 'find_previous_power_of_two', 'range': [0, 80], 'children': [{'type': 'Parameter', 'name': 'number', 'range': [3, 5], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [9, 9], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [12, 14], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [16, 35], 'children': [{'type': 'Condition', 'name': '', 'range': [17, 28], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [24, 28], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [18, 23], 'children': [{'type': 'Argument', 'name': 'number', 'range': [20, 20], 'children': []}, {'type': 'Argument', 'name': 'int', 'range': [22, 22], 'children': []}]}, {'type': 'BinaryExpression', 'name': '<', 'range': [25, 27], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [25, 25], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [27, 27], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [29, 35], 'children': [{'type': 'RaiseStatement', 'name': '', 'range': [30, 34], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [31, 34], 'children': [{'type': 'Argument', 'name': '"Input must be a non-negative integer"', 'range': [33, 33], 'children': []}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [36, 45], 'children': [{'type': 'Condition', 'name': '', 'range': [37, 41], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [38, 40], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [37, 37], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [40, 40], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [42, 45], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [43, 44], 'children': [{'type': 'Literal', 'name': '0', 'range': [44, 44], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'power', 'range': [46, 49], 'children': [{'type': 'Literal', 'name': '1', 'range': [48, 48], 'children': []}]}, {'type': 'WhileStatement', 'name': '', 'range': [50, 68], 'children': [{'type': 'Condition', 'name': '', 'range': [51, 55], 'children': [{'type': 'BinaryExpression', 'name': '<=', 'range': [52, 54], 'children': [{'type': 'Identifier', 'name': 'power', 'range': [51, 51], 'children': []}, {'type': 'Identifier', 'name': 'number', 'range': [54, 54], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [56, 68], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [57, 61], 'children': [{'type': 'AssignmentExpression', 'name': '<<=', 'range': [58, 60], 'children': [{'type': 'Identifier', 'name': 'power', 'range': [57, 57], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [60, 60], 'children': []}]}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [69, 80], 'children': [{'type': 'ConditionalExpression', 'name': '', 'range': [70, 79], 'children': [{'type': 'Condition', 'name': '', 'range': [75, 77], 'children': [{'type': 'BinaryExpression', 'name': '>', 'range': [76, 76], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [75, 75], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [77, 77], 'children': []}]}]}, {'type': 'Consequent', 'name': '', 'range': [70, 73], 'children': [{'type': 'BinaryExpression', 'name': '>>', 'range': [71, 72], 'children': [{'type': 'Identifier', 'name': 'power', 'range': [70, 70], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [73, 73], 'children': []}]}]}, {'type': 'Alternate', 'name': '', 'range': [79, 79], 'children': [{'type': 'Literal', 'name': '1', 'range': [79, 79], 'children': []}]}]}]}]}]}
2025-01-08 10:11:04,432 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:11:34,292 - INFO - Step 5 result: {'type': 'Program', 'name': 'find_previous_power_of_two', 'range': [0, 80], 'children': [{'type': 'FunctionDecl', 'name': 'find_previous_power_of_two', 'range': [0, 80], 'children': [{'type': 'Parameter', 'name': 'number', 'range': [3, 5], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [9, 9], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [12, 14], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [16, 35], 'children': [{'type': 'Condition', 'name': '', 'range': [17, 28], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [24, 28], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [18, 23], 'children': [{'type': 'Argument', 'name': 'number', 'range': [20, 20], 'children': []}, {'type': 'Argument', 'name': 'int', 'range': [22, 22], 'children': []}]}, {'type': 'BinaryExpression', 'name': '<', 'range': [25, 27], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [25, 25], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [27, 27], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [29, 35], 'children': [{'type': 'RaiseStatement', 'name': '', 'range': [30, 34], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [31, 34], 'children': [{'type': 'Argument', 'name': '"Input must be a non-negative integer"', 'range': [33, 33], 'children': []}]}]}]}]}, {'type': 'IfStatement', 'name': '', 'range': [36, 45], 'children': [{'type': 'Condition', 'name': '', 'range': [37, 41], 'children': [{'type': 'BinaryExpression', 'name': '==', 'range': [38, 40], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [37, 37], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [40, 40], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [42, 45], 'children': [{'type': 'ReturnStatement', 'name': '', 'range': [43, 44], 'children': [{'type': 'Literal', 'name': '0', 'range': [44, 44], 'children': []}]}]}]}, {'type': 'VariableDeclaration', 'name': 'power', 'range': [46, 49], 'children': [{'type': 'Literal', 'name': '1', 'range': [48, 48], 'children': []}]}, {'type': 'WhileStatement', 'name': '', 'range': [50, 68], 'children': [{'type': 'Condition', 'name': '', 'range': [51, 55], 'children': [{'type': 'BinaryExpression', 'name': '<=', 'range': [52, 54], 'children': [{'type': 'Identifier', 'name': 'power', 'range': [51, 51], 'children': []}, {'type': 'Identifier', 'name': 'number', 'range': [54, 54], 'children': []}]}]}, {'type': 'Block', 'name': '', 'range': [56, 68], 'children': [{'type': 'ExpressionStatement', 'name': '', 'range': [57, 61], 'children': [{'type': 'AssignmentExpression', 'name': '<<=', 'range': [58, 60], 'children': [{'type': 'Identifier', 'name': 'power', 'range': [57, 57], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [60, 60], 'children': []}]}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [69, 80], 'children': [{'type': 'ConditionalExpression', 'name': '', 'range': [70, 79], 'children': [{'type': 'Condition', 'name': '', 'range': [75, 77], 'children': [{'type': 'BinaryExpression', 'name': '>', 'range': [76, 76], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [75, 75], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [77, 77], 'children': []}]}]}, {'type': 'Consequent', 'name': '', 'range': [70, 73], 'children': [{'type': 'BinaryExpression', 'name': '>>', 'range': [71, 72], 'children': [{'type': 'Identifier', 'name': 'power', 'range': [70, 70], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [73, 73], 'children': []}]}]}, {'type': 'Alternate', 'name': '', 'range': [79, 79], 'children': [{'type': 'Literal', 'name': '1', 'range': [79, 79], 'children': []}]}]}]}]}]}
2025-01-08 10:11:34,293 - INFO - Completed main AST analysis flow
2025-01-08 10:11:34,293 - INFO - Successfully processed chunk
2025-01-08 10:11:34,305 - INFO - Starting code generation from AST
2025-01-08 10:11:40,174 - INFO - Successfully generated code from AST
2025-01-08 10:11:40,174 - INFO - Starting static code similarity comparison
2025-01-08 10:11:40,177 - INFO - Static similarity result: {'final_score': 60.35, 'length_similarity': 53.84, 'token_similarity': 19.48, 'structure_similarity': 100.0, 'function_similarity': 100, 'complexity_similarity': 14.29, 'variable_similarity': 100}
