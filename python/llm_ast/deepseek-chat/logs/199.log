2025-01-08 10:27:27,651 - INFO - Processing sample 199
2025-01-08 10:27:27,655 - INFO - Starting Step 0: Splitting code into top-level declarations
2025-01-08 10:27:33,667 - INFO - Successfully split code into 4 top-level declarations
2025-01-08 10:27:33,668 - INFO - Processing chunk #0 (size=76 chars, start_index=0)
2025-01-08 10:27:33,669 - INFO - Processing chunk with 76 chars starting at index 0
2025-01-08 10:27:33,669 - INFO - Processing chunk #1 (size=1136 chars, start_index=26)
2025-01-08 10:27:33,670 - INFO - Starting main AST analysis flow
2025-01-08 10:27:33,670 - INFO - Processing chunk with 1136 chars starting at index 26
2025-01-08 10:27:33,670 - INFO - Tokenized code into 26 tokens
2025-01-08 10:27:33,672 - INFO - Starting main AST analysis flow
2025-01-08 10:27:33,674 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:33,684 - INFO - Tokenized code into 73 tokens
2025-01-08 10:27:33,686 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:33,687 - INFO - Processing chunk #2 (size=2 chars, start_index=99)
2025-01-08 10:27:33,687 - INFO - Processing chunk with 2 chars starting at index 99
2025-01-08 10:27:33,687 - INFO - Starting main AST analysis flow
2025-01-08 10:27:33,688 - INFO - Tokenized code into 2 tokens
2025-01-08 10:27:33,688 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:33,689 - INFO - Processing chunk #3 (size=270 chars, start_index=101)
2025-01-08 10:27:33,689 - INFO - Processing chunk with 270 chars starting at index 101
2025-01-08 10:27:33,696 - INFO - Starting main AST analysis flow
2025-01-08 10:27:33,696 - INFO - Tokenized code into 25 tokens
2025-01-08 10:27:33,697 - INFO - Starting Step 1: Initial AST node identification
2025-01-08 10:27:37,401 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [0, 25], 'children': []}
2025-01-08 10:27:37,401 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:38,059 - INFO - Step 1 result: {'error': "Insufficient token data provided for AST analysis. The token list does not contain enough information to identify any top-level declarations in the 'cangjie' code."}
2025-01-08 10:27:38,059 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:38,097 - INFO - Step 1 result: {'type': 'Program', 'name': 'get_index_of_rightmost_set_bit', 'range': [26, 98], 'children': []}
2025-01-08 10:27:38,323 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:39,139 - INFO - Step 1 result: {'type': 'Program', 'name': '', 'range': [101, 125], 'children': [{'type': 'IfStatement', 'name': '', 'range': [101, 107], 'children': []}, {'type': 'ImportStatement', 'name': '', 'range': [112, 114], 'children': []}, {'type': 'FunctionCall', 'name': 'doctest.testmod', 'range': [116, 123], 'children': []}]}
2025-01-08 10:27:39,209 - INFO - Starting Step 2: Detailed AST construction
2025-01-08 10:27:44,190 - INFO - Step 2 result: {'error': "Insufficient token data provided for AST analysis. The token list does not contain enough information to identify any top-level declarations or to build a detailed AST structure for the 'cangjie' code."}
2025-01-08 10:27:44,190 - INFO - Starting Step 3: AST simplification
2025-01-08 10:27:46,642 - INFO - Step 2 result: {'type': 'Program', 'name': '', 'range': [0, 25], 'children': [{'type': 'Reference', 'name': 'https://www.geeksforgeeks.org/position-of-rightmost-set-bit/', 'range': [0, 22], 'children': [{'type': 'URL', 'name': 'https://www.geeksforgeeks.org/position-of-rightmost-set-bit/', 'range': [3, 22], 'children': []}]}]}
2025-01-08 10:27:46,642 - INFO - Starting Step 3: AST simplification
2025-01-08 10:27:50,036 - INFO - Step 2 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [101, 107], 'children': [{'type': 'Condition', 'name': '', 'range': [101, 106], 'children': [{'type': 'Variable', 'name': '__name__', 'range': [102, 102], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [103, 104], 'children': []}, {'type': 'String', 'name': '"__main__"', 'range': [105, 105], 'children': []}]}]}, {'type': 'ImportStatement', 'name': '', 'range': [112, 114], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [113, 113], 'children': []}]}, {'type': 'FunctionCall', 'name': 'doctest.testmod', 'range': [116, 123], 'children': [{'type': 'Argument', 'name': 'verbose', 'range': [120, 122], 'children': [{'type': 'Assignment', 'name': '=', 'range': [121, 121], 'children': []}, {'type': 'Boolean', 'name': 'True', 'range': [122, 122], 'children': []}]}]}]}
2025-01-08 10:27:50,112 - INFO - Starting Step 3: AST simplification
2025-01-08 10:27:51,480 - INFO - Step 3 result: {'error': "Insufficient token data provided for AST analysis. The token list does not contain enough information to identify any top-level declarations or to build a detailed AST structure for the 'cangjie' code."}
2025-01-08 10:27:51,483 - INFO - Starting Step 4: AST normalization
2025-01-08 10:27:59,631 - INFO - Step 3 result: {'type': 'Program', 'name': '', 'range': [0, 25], 'children': [{'type': 'Reference', 'name': 'https://www.geeksforgeeks.org/position-of-rightmost-set-bit/', 'range': [0, 22], 'children': [{'type': 'URL', 'name': 'https://www.geeksforgeeks.org/position-of-rightmost-set-bit/', 'range': [3, 22], 'children': []}]}]}
2025-01-08 10:27:59,655 - INFO - Starting Step 4: AST normalization
2025-01-08 10:27:59,851 - INFO - Step 4 result: {'type': 'Program', 'name': 'cangjie', 'range': [0, 0], 'children': []}
2025-01-08 10:27:59,872 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:28:05,447 - INFO - Step 3 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [101, 107], 'children': [{'type': 'Condition', 'name': '', 'range': [101, 106], 'children': [{'type': 'Variable', 'name': '__name__', 'range': [102, 102], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [103, 104], 'children': []}, {'type': 'String', 'name': '"__main__"', 'range': [105, 105], 'children': []}]}]}, {'type': 'ImportStatement', 'name': '', 'range': [112, 114], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [113, 113], 'children': []}]}, {'type': 'FunctionCall', 'name': 'doctest.testmod', 'range': [116, 123], 'children': [{'type': 'Argument', 'name': 'verbose', 'range': [120, 122], 'children': [{'type': 'Boolean', 'name': 'True', 'range': [122, 122], 'children': []}]}]}]}
2025-01-08 10:28:05,941 - INFO - Starting Step 4: AST normalization
2025-01-08 10:28:08,752 - INFO - Step 5 result: {'type': 'Program', 'name': 'cangjie', 'range': [0, 0], 'children': []}
2025-01-08 10:28:08,763 - INFO - Completed main AST analysis flow
2025-01-08 10:28:08,763 - INFO - Successfully processed chunk
2025-01-08 10:28:10,594 - INFO - Step 4 result: {'type': 'Program', 'name': '', 'range': [0, 25], 'children': [{'type': 'ReferenceStatement', 'name': 'https://www.geeksforgeeks.org/position-of-rightmost-set-bit/', 'range': [0, 22], 'children': [{'type': 'Literal', 'name': 'https://www.geeksforgeeks.org/position-of-rightmost-set-bit/', 'range': [3, 22], 'children': []}]}]}
2025-01-08 10:28:10,604 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:28:10,974 - INFO - Step 2 result: {'type': 'Program', 'name': 'get_index_of_rightmost_set_bit', 'range': [26, 98], 'children': [{'type': 'FunctionDeclaration', 'name': 'get_index_of_rightmost_set_bit', 'range': [26, 98], 'children': [{'type': 'Parameter', 'name': 'number', 'range': [29, 31], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [35, 35], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [38, 40], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [43, 62], 'children': [{'type': 'Condition', 'name': '', 'range': [44, 55], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [51, 51], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [45, 50], 'children': [{'type': 'Argument', 'name': 'number', 'range': [47, 47], 'children': []}, {'type': 'Argument', 'name': 'int', 'range': [49, 49], 'children': []}]}, {'type': 'BinaryExpression', 'name': '<', 'range': [53, 53], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [52, 52], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [54, 54], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [56, 62], 'children': [{'type': 'RaiseStatement', 'name': '', 'range': [57, 61], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [58, 61], 'children': [{'type': 'Argument', 'name': '"Input must be a non-negative integer"', 'range': [60, 60], 'children': []}]}]}]}]}, {'type': 'AssignmentExpression', 'name': 'intermediate', 'range': [64, 74], 'children': [{'type': 'BinaryExpression', 'name': '&', 'range': [67, 67], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [66, 66], 'children': []}, {'type': 'UnaryExpression', 'name': '~', 'range': [68, 68], 'children': [{'type': 'BinaryExpression', 'name': '-', 'range': [71, 71], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [70, 70], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [72, 72], 'children': []}]}]}]}]}, {'type': 'AssignmentExpression', 'name': 'index', 'range': [75, 78], 'children': [{'type': 'Literal', 'name': '0', 'range': [77, 77], 'children': []}]}, {'type': 'WhileStatement', 'name': '', 'range': [79, 93], 'children': [{'type': 'Condition', 'name': 'intermediate', 'range': [80, 80], 'children': []}, {'type': 'Block', 'name': '', 'range': [82, 93], 'children': [{'type': 'AssignmentExpression', 'name': 'intermediate', 'range': [83, 88], 'children': [{'type': 'BinaryExpression', 'name': '>>=', 'range': [85, 86], 'children': [{'type': 'Identifier', 'name': 'intermediate', 'range': [83, 83], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [87, 87], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': 'index', 'range': [89, 93], 'children': [{'type': 'BinaryExpression', 'name': '+=', 'range': [91, 92], 'children': [{'type': 'Identifier', 'name': 'index', 'range': [89, 89], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [92, 92], 'children': []}]}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [94, 98], 'children': [{'type': 'BinaryExpression', 'name': '-', 'range': [96, 96], 'children': [{'type': 'Identifier', 'name': 'index', 'range': [95, 95], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [97, 97], 'children': []}]}]}]}]}
2025-01-08 10:28:10,974 - INFO - Starting Step 3: AST simplification
2025-01-08 10:28:18,404 - INFO - Step 4 result: {'nodes': [{'type': 'IfStatement', 'name': '', 'range': [101, 107], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [101, 106], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [102, 102], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [103, 104], 'children': []}, {'type': 'Literal', 'name': '"__main__"', 'range': [105, 105], 'children': []}]}]}, {'type': 'ImportStatement', 'name': '', 'range': [112, 114], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [113, 113], 'children': []}]}, {'type': 'CallExpression', 'name': 'doctest.testmod', 'range': [116, 123], 'children': [{'type': 'Argument', 'name': 'verbose', 'range': [120, 122], 'children': [{'type': 'Literal', 'name': 'True', 'range': [122, 122], 'children': []}]}]}]}
2025-01-08 10:28:18,405 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:28:20,523 - INFO - Step 5 result: {'type': 'Program', 'name': '', 'range': [0, 25], 'children': [{'type': 'ReferenceStatement', 'name': 'https://www.geeksforgeeks.org/position-of-rightmost-set-bit/', 'range': [0, 22], 'children': [{'type': 'Literal', 'name': 'https://www.geeksforgeeks.org/position-of-rightmost-set-bit/', 'range': [3, 22], 'children': []}]}]}
2025-01-08 10:28:20,523 - INFO - Completed main AST analysis flow
2025-01-08 10:28:20,523 - INFO - Successfully processed chunk
2025-01-08 10:28:28,506 - INFO - Step 5 result: {'nodes': [{'type': 'Program', 'name': 'MainOrSomething', 'range': [101, 123], 'children': [{'type': 'IfStatement', 'name': '', 'range': [101, 107], 'children': [{'type': 'BinaryExpression', 'name': '', 'range': [101, 106], 'children': [{'type': 'Identifier', 'name': '__name__', 'range': [102, 102], 'children': []}, {'type': 'Operator', 'name': '==', 'range': [103, 104], 'children': []}, {'type': 'Literal', 'name': '"__main__"', 'range': [105, 105], 'children': []}]}]}, {'type': 'ImportStatement', 'name': '', 'range': [112, 114], 'children': [{'type': 'Module', 'name': 'doctest', 'range': [113, 113], 'children': []}]}, {'type': 'CallExpression', 'name': 'doctest.testmod', 'range': [116, 123], 'children': [{'type': 'Argument', 'name': 'verbose', 'range': [120, 122], 'children': [{'type': 'Literal', 'name': 'True', 'range': [122, 122], 'children': []}]}]}]}]}
2025-01-08 10:28:28,516 - INFO - Completed main AST analysis flow
2025-01-08 10:28:28,522 - INFO - Successfully processed chunk
2025-01-08 10:28:44,096 - INFO - Step 3 result: {'type': 'Program', 'name': 'get_index_of_rightmost_set_bit', 'range': [26, 98], 'children': [{'type': 'FunctionDeclaration', 'name': 'get_index_of_rightmost_set_bit', 'range': [26, 98], 'children': [{'type': 'Parameter', 'name': 'number', 'range': [29, 31], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [35, 35], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [38, 40], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [43, 62], 'children': [{'type': 'Condition', 'name': '', 'range': [44, 55], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [51, 51], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [45, 50], 'children': [{'type': 'Argument', 'name': 'number', 'range': [47, 47], 'children': []}, {'type': 'Argument', 'name': 'int', 'range': [49, 49], 'children': []}]}, {'type': 'BinaryExpression', 'name': '<', 'range': [53, 53], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [52, 52], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [54, 54], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [56, 62], 'children': [{'type': 'RaiseStatement', 'name': '', 'range': [57, 61], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [58, 61], 'children': [{'type': 'Argument', 'name': '"Input must be a non-negative integer"', 'range': [60, 60], 'children': []}]}]}]}]}, {'type': 'AssignmentExpression', 'name': 'intermediate', 'range': [64, 74], 'children': [{'type': 'BinaryExpression', 'name': '&', 'range': [67, 67], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [66, 66], 'children': []}, {'type': 'UnaryExpression', 'name': '~', 'range': [68, 68], 'children': [{'type': 'BinaryExpression', 'name': '-', 'range': [71, 71], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [70, 70], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [72, 72], 'children': []}]}]}]}]}, {'type': 'AssignmentExpression', 'name': 'index', 'range': [75, 78], 'children': [{'type': 'Literal', 'name': '0', 'range': [77, 77], 'children': []}]}, {'type': 'WhileStatement', 'name': '', 'range': [79, 93], 'children': [{'type': 'Condition', 'name': 'intermediate', 'range': [80, 80], 'children': []}, {'type': 'Block', 'name': '', 'range': [82, 93], 'children': [{'type': 'AssignmentExpression', 'name': 'intermediate', 'range': [83, 88], 'children': [{'type': 'BinaryExpression', 'name': '>>=', 'range': [85, 86], 'children': [{'type': 'Identifier', 'name': 'intermediate', 'range': [83, 83], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [87, 87], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': 'index', 'range': [89, 93], 'children': [{'type': 'BinaryExpression', 'name': '+=', 'range': [91, 92], 'children': [{'type': 'Identifier', 'name': 'index', 'range': [89, 89], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [92, 92], 'children': []}]}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [94, 98], 'children': [{'type': 'BinaryExpression', 'name': '-', 'range': [96, 96], 'children': [{'type': 'Identifier', 'name': 'index', 'range': [95, 95], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [97, 97], 'children': []}]}]}]}]}
2025-01-08 10:28:44,097 - INFO - Starting Step 4: AST normalization
2025-01-08 10:29:10,840 - INFO - Step 4 result: {'type': 'Program', 'name': 'get_index_of_rightmost_set_bit', 'range': [26, 98], 'children': [{'type': 'FunctionDecl', 'name': 'get_index_of_rightmost_set_bit', 'range': [26, 98], 'children': [{'type': 'Parameter', 'name': 'number', 'range': [29, 31], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [35, 35], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [38, 40], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [43, 62], 'children': [{'type': 'Condition', 'name': '', 'range': [44, 55], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [51, 51], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [45, 50], 'children': [{'type': 'Argument', 'name': 'number', 'range': [47, 47], 'children': []}, {'type': 'Argument', 'name': 'int', 'range': [49, 49], 'children': []}]}, {'type': 'BinaryExpression', 'name': '<', 'range': [53, 53], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [52, 52], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [54, 54], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [56, 62], 'children': [{'type': 'RaiseStatement', 'name': '', 'range': [57, 61], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [58, 61], 'children': [{'type': 'Argument', 'name': '"Input must be a non-negative integer"', 'range': [60, 60], 'children': []}]}]}]}]}, {'type': 'AssignmentExpression', 'name': 'intermediate', 'range': [64, 74], 'children': [{'type': 'BinaryExpression', 'name': '&', 'range': [67, 67], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [66, 66], 'children': []}, {'type': 'UnaryExpression', 'name': '~', 'range': [68, 68], 'children': [{'type': 'BinaryExpression', 'name': '-', 'range': [71, 71], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [70, 70], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [72, 72], 'children': []}]}]}]}]}, {'type': 'AssignmentExpression', 'name': 'index', 'range': [75, 78], 'children': [{'type': 'Literal', 'name': '0', 'range': [77, 77], 'children': []}]}, {'type': 'WhileStatement', 'name': '', 'range': [79, 93], 'children': [{'type': 'Condition', 'name': 'intermediate', 'range': [80, 80], 'children': []}, {'type': 'Block', 'name': '', 'range': [82, 93], 'children': [{'type': 'AssignmentExpression', 'name': 'intermediate', 'range': [83, 88], 'children': [{'type': 'BinaryExpression', 'name': '>>=', 'range': [85, 86], 'children': [{'type': 'Identifier', 'name': 'intermediate', 'range': [83, 83], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [87, 87], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': 'index', 'range': [89, 93], 'children': [{'type': 'BinaryExpression', 'name': '+=', 'range': [91, 92], 'children': [{'type': 'Identifier', 'name': 'index', 'range': [89, 89], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [92, 92], 'children': []}]}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [94, 98], 'children': [{'type': 'BinaryExpression', 'name': '-', 'range': [96, 96], 'children': [{'type': 'Identifier', 'name': 'index', 'range': [95, 95], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [97, 97], 'children': []}]}]}]}]}
2025-01-08 10:29:10,840 - INFO - Starting Step 5: Final AST combination
2025-01-08 10:29:37,895 - INFO - Step 5 result: {'type': 'Program', 'name': 'get_index_of_rightmost_set_bit', 'range': [26, 98], 'children': [{'type': 'FunctionDecl', 'name': 'get_index_of_rightmost_set_bit', 'range': [26, 98], 'children': [{'type': 'Parameter', 'name': 'number', 'range': [29, 31], 'children': []}, {'type': 'ReturnType', 'name': 'int', 'range': [35, 35], 'children': []}, {'type': 'Docstring', 'name': '', 'range': [38, 40], 'children': []}, {'type': 'IfStatement', 'name': '', 'range': [43, 62], 'children': [{'type': 'Condition', 'name': '', 'range': [44, 55], 'children': [{'type': 'LogicalExpression', 'name': 'or', 'range': [51, 51], 'children': [{'type': 'CallExpression', 'name': 'isinstance', 'range': [45, 50], 'children': [{'type': 'Argument', 'name': 'number', 'range': [47, 47], 'children': []}, {'type': 'Argument', 'name': 'int', 'range': [49, 49], 'children': []}]}, {'type': 'BinaryExpression', 'name': '<', 'range': [53, 53], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [52, 52], 'children': []}, {'type': 'Literal', 'name': '0', 'range': [54, 54], 'children': []}]}]}]}, {'type': 'Block', 'name': '', 'range': [56, 62], 'children': [{'type': 'RaiseStatement', 'name': '', 'range': [57, 61], 'children': [{'type': 'CallExpression', 'name': 'ValueError', 'range': [58, 61], 'children': [{'type': 'Argument', 'name': '"Input must be a non-negative integer"', 'range': [60, 60], 'children': []}]}]}]}]}, {'type': 'AssignmentExpression', 'name': 'intermediate', 'range': [64, 74], 'children': [{'type': 'BinaryExpression', 'name': '&', 'range': [67, 67], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [66, 66], 'children': []}, {'type': 'UnaryExpression', 'name': '~', 'range': [68, 68], 'children': [{'type': 'BinaryExpression', 'name': '-', 'range': [71, 71], 'children': [{'type': 'Identifier', 'name': 'number', 'range': [70, 70], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [72, 72], 'children': []}]}]}]}]}, {'type': 'AssignmentExpression', 'name': 'index', 'range': [75, 78], 'children': [{'type': 'Literal', 'name': '0', 'range': [77, 77], 'children': []}]}, {'type': 'WhileStatement', 'name': '', 'range': [79, 93], 'children': [{'type': 'Condition', 'name': 'intermediate', 'range': [80, 80], 'children': []}, {'type': 'Block', 'name': '', 'range': [82, 93], 'children': [{'type': 'AssignmentExpression', 'name': 'intermediate', 'range': [83, 88], 'children': [{'type': 'BinaryExpression', 'name': '>>=', 'range': [85, 86], 'children': [{'type': 'Identifier', 'name': 'intermediate', 'range': [83, 83], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [87, 87], 'children': []}]}]}, {'type': 'AssignmentExpression', 'name': 'index', 'range': [89, 93], 'children': [{'type': 'BinaryExpression', 'name': '+=', 'range': [91, 92], 'children': [{'type': 'Identifier', 'name': 'index', 'range': [89, 89], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [92, 92], 'children': []}]}]}]}]}, {'type': 'ReturnStatement', 'name': '', 'range': [94, 98], 'children': [{'type': 'BinaryExpression', 'name': '-', 'range': [96, 96], 'children': [{'type': 'Identifier', 'name': 'index', 'range': [95, 95], 'children': []}, {'type': 'Literal', 'name': '1', 'range': [97, 97], 'children': []}]}]}]}]}
2025-01-08 10:29:37,896 - INFO - Completed main AST analysis flow
2025-01-08 10:29:37,897 - INFO - Successfully processed chunk
2025-01-08 10:29:37,907 - INFO - Starting code generation from AST
2025-01-08 10:29:44,334 - INFO - Successfully generated code from AST
2025-01-08 10:29:44,334 - INFO - Starting static code similarity comparison
2025-01-08 10:29:44,338 - INFO - Static similarity result: {'final_score': 71.71, 'length_similarity': 82.25, 'token_similarity': 71.74, 'structure_similarity': 81.4, 'function_similarity': 0.0, 'complexity_similarity': 75.0, 'variable_similarity': 100}
