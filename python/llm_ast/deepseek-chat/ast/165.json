{
    "type": "Program",
    "name": "Global",
    "range": [
        27,
        249
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "ld_client",
            "range": [
                27,
                66
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        30,
                        30
                    ],
                    "children": [],
                    "content": "mocker"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "client",
                    "range": [
                        34,
                        43
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "mocker.Mock",
                            "range": [
                                36,
                                38
                            ],
                            "children": [],
                            "content": "mocker.Mock"
                        },
                        {
                            "type": "Argument",
                            "name": "spec=LDClient",
                            "range": [
                                40,
                                42
                            ],
                            "children": [],
                            "content": "spec=LDClient"
                        }
                    ],
                    "content": "client=mocker.Mock(spec=LDClient)"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "mocker.patch",
                    "range": [
                        45,
                        54
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "\"ldclient.get\"",
                            "range": [
                                49,
                                49
                            ],
                            "children": [],
                            "content": "\"ldclient.get\""
                        },
                        {
                            "type": "Argument",
                            "name": "return_value=client",
                            "range": [
                                51,
                                53
                            ],
                            "children": [],
                            "content": "return_value=client"
                        }
                    ],
                    "content": "mocker.patch(\"ldclient.get\",return_value=client)"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "client.is_initialized.return_value",
                    "range": [
                        56,
                        62
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "True",
                            "range": [
                                62,
                                62
                            ],
                            "children": [],
                            "content": "True"
                        }
                    ],
                    "content": "client.is_initialized.return_value=True"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return client",
                    "range": [
                        64,
                        65
                    ],
                    "children": [],
                    "content": "return client"
                }
            ],
            "content": "def ld_client(mocker):\nclient=mocker.Mock(spec=LDClient)\nmocker.patch(\"ldclient.get\",return_value=client)\nclient.is_initialized.return_value=True\nreturn client\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_feature_flag_enabled",
            "range": [
                67,
                89
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.mark.asyncio",
                    "range": [
                        67,
                        73
                    ],
                    "children": [],
                    "content": "\n\n@pytest.mark."
                },
                {
                    "type": "FunctionSignature",
                    "name": "test_feature_flag_enabled",
                    "range": [
                        74,
                        80
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                74,
                                79
                            ],
                            "children": [],
                            "content": "asyncio\nasync def test_feature_flag_enabled("
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                75,
                                78
                            ],
                            "children": [],
                            "content": "\nasync def test_feature_flag_enabled"
                        },
                        {
                            "type": "Identifier",
                            "name": "test_feature_flag_enabled",
                            "range": [
                                76,
                                100
                            ],
                            "children": [],
                            "content": "async def test_feature_flag_enabled(ld_client):\nld_client.variation.return_value=True\n\n@feature_flag(\"test-flag\")\nasync def"
                        },
                        {
                            "type": "Parameter",
                            "name": "ld_client",
                            "range": [
                                78,
                                88
                            ],
                            "children": [],
                            "content": "test_feature_flag_enabled(ld_client):\nld_client.variation.return_value"
                        }
                    ],
                    "content": "asyncio\nasync def test_feature_flag_enabled(ld_client"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        81,
                        89
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "ld_client.variation.return_value = True",
                            "range": [
                                82,
                                88
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "ld_client.variation.return_value",
                                    "range": [
                                        82,
                                        86
                                    ],
                                    "children": [],
                                    "content": ":\nld_client.variation"
                                },
                                {
                                    "type": "Literal",
                                    "name": "True",
                                    "range": [
                                        88,
                                        92
                                    ],
                                    "children": [],
                                    "content": "return_value=True\n\n"
                                }
                            ],
                            "content": ":\nld_client.variation.return_value"
                        }
                    ],
                    "content": "):\nld_client.variation.return_value="
                }
            ],
            "content": "\n\n@pytest.mark.asyncio\nasync def test_feature_flag_enabled(ld_client):\nld_client.variation.return_value="
        },
        {
            "type": "FunctionDecl",
            "name": "test_function",
            "range": [
                91,
                109
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@feature_flag",
                    "range": [
                        91,
                        96
                    ],
                    "children": [],
                    "content": "\n\n@feature_flag(\"test-flag\""
                },
                {
                    "type": "FunctionSignature",
                    "name": "test_function",
                    "range": [
                        97,
                        105
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                97,
                                102
                            ],
                            "children": [],
                            "content": ")\nasync def test_function("
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                98,
                                101
                            ],
                            "children": [],
                            "content": "\nasync def test_function"
                        },
                        {
                            "type": "Identifier",
                            "name": "test_function",
                            "range": [
                                99,
                                112
                            ],
                            "children": [],
                            "content": "async def test_function(user_id:str):\nreturn \"success\"\n\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                101,
                                113
                            ],
                            "children": [],
                            "content": "test_function(user_id:str):\nreturn \"success\"\n\nresult"
                        }
                    ],
                    "content": ")\nasync def test_function(user_id:str"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        106,
                        109
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                107,
                                108
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"success\"",
                                    "range": [
                                        108,
                                        116
                                    ],
                                    "children": [],
                                    "content": "\nreturn \"success\"\n\nresult=test_function("
                                }
                            ],
                            "content": ":\n"
                        }
                    ],
                    "content": "):\nreturn"
                }
            ],
            "content": "\n\n@feature_flag(\"test-flag\")\nasync def test_function(user_id:str):\nreturn"
        },
        {
            "type": "VariableDecl",
            "name": "result",
            "range": [
                111,
                119
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "result = test_function",
                    "range": [
                        112,
                        118
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "result",
                            "range": [
                                112,
                                118
                            ],
                            "children": [],
                            "content": "\nresult=test_function(user_id="
                        },
                        {
                            "type": "CallExpression",
                            "name": "test_function",
                            "range": [
                                114,
                                118
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "user_id",
                                    "range": [
                                        115,
                                        117
                                    ],
                                    "children": [],
                                    "content": "test_function(user_id"
                                }
                            ],
                            "content": "=test_function(user_id="
                        }
                    ],
                    "content": "\nresult=test_function(user_id="
                }
            ],
            "content": "\n\nresult=test_function(user_id=\"test-user\""
        },
        {
            "type": "ExpressionStatement",
            "name": "assert result == \"success\"",
            "range": [
                120,
                125
            ],
            "children": [
                {
                    "type": "BinaryExpression",
                    "name": "result == \"success\"",
                    "range": [
                        121,
                        124
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "result",
                            "range": [
                                121,
                                127
                            ],
                            "children": [],
                            "content": "\nassert result==\"success\"\n"
                        },
                        {
                            "type": "Literal",
                            "name": "\"success\"",
                            "range": [
                                124,
                                132
                            ],
                            "children": [],
                            "content": "==\"success\"\nld_client.variation.assert_called_once"
                        }
                    ],
                    "content": "\nassert result="
                }
            ],
            "content": ")\nassert result=="
        },
        {
            "type": "ExpressionStatement",
            "name": "ld_client.variation.assert_called_once",
            "range": [
                126,
                133
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "ld_client.variation.assert_called_once",
                    "range": [
                        127,
                        132
                    ],
                    "children": [],
                    "content": "\nld_client.variation.assert_called_once"
                }
            ],
            "content": "\"success\"\nld_client.variation.assert_called_once("
        },
        {
            "type": "FunctionDecl",
            "name": "test_feature_flag_unauthorized_response",
            "range": [
                142,
                157
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "ld_client.variation.return_value",
                    "range": [
                        150,
                        156
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "False",
                            "range": [
                                156,
                                156
                            ],
                            "children": [],
                            "content": "."
                        }
                    ],
                    "content": "):\nld_client.variation."
                }
            ],
            "content": ".asyncio\nasync def test_feature_flag_unauthorized_response(ld_client):\nld_client.variation.return_value"
        },
        {
            "type": "FunctionDecl",
            "name": "test_function",
            "range": [
                165,
                177
            ],
            "children": [
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        175,
                        176
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"success\"",
                            "range": [
                                176,
                                176
                            ],
                            "children": [],
                            "content": ":"
                        }
                    ],
                    "content": "):"
                }
            ],
            "content": "\"test-flag\")\nasync def test_function(user_id:str):\n"
        },
        {
            "type": "VariableDecl",
            "name": "result",
            "range": [
                179,
                197
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "test_function",
                    "range": [
                        181,
                        186
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "user_id",
                            "range": [
                                183,
                                185
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"test-user\"",
                                    "range": [
                                        185,
                                        185
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "=test_function("
                        }
                    ],
                    "content": "\nresult=test_function(user_id"
                },
                {
                    "type": "AssertStatement",
                    "name": "",
                    "range": [
                        188,
                        196
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "==",
                            "range": [
                                190,
                                191
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "result",
                                    "range": [
                                        189,
                                        189
                                    ],
                                    "children": [],
                                    "content": ")"
                                },
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        192,
                                        196
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "error",
                                            "range": [
                                                193,
                                                195
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"disabled\"",
                                                    "range": [
                                                        195,
                                                        195
                                                    ],
                                                    "children": [],
                                                    "content": "{"
                                                }
                                            ],
                                            "content": "=={"
                                        }
                                    ],
                                    "content": "result=={\"error\""
                                }
                            ],
                            "content": "\nassert"
                        }
                    ],
                    "content": "\"test-user\")\nassert result=={\"error\""
                }
            ],
            "content": "\"success\"\n\nresult=test_function(user_id=\"test-user\")\nassert result=={\"error\":"
        },
        {
            "type": "FunctionDecl",
            "name": "test_mock_flag_variation",
            "range": [
                200,
                249
            ],
            "children": [
                {
                    "type": "BlockStatement",
                    "range": [
                        206,
                        249
                    ],
                    "children": [
                        {
                            "type": "WithStatement",
                            "range": [
                                207,
                                227
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "range": [
                                        208,
                                        213
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mock_flag_variation",
                                            "range": [
                                                208,
                                                208
                                            ],
                                            "content": ":"
                                        },
                                        {
                                            "type": "Literal",
                                            "value": "\"test-flag\"",
                                            "range": [
                                                210,
                                                210
                                            ],
                                            "content": "with"
                                        },
                                        {
                                            "type": "Literal",
                                            "value": "True",
                                            "range": [
                                                212,
                                                212
                                            ],
                                            "content": "("
                                        }
                                    ],
                                    "content": ":\nwith mock_flag_variation(\"test-flag\""
                                },
                                {
                                    "type": "BlockStatement",
                                    "range": [
                                        214,
                                        227
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "range": [
                                                216,
                                                227
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "range": [
                                                        217,
                                                        226
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "range": [
                                                                217,
                                                                219
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "ld_client",
                                                                    "range": [
                                                                        217,
                                                                        217
                                                                    ],
                                                                    "content": ":"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "variation",
                                                                    "range": [
                                                                        219,
                                                                        219
                                                                    ],
                                                                    "content": "assert"
                                                                }
                                                            ],
                                                            "content": ":\nassert"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "\"test-flag\"",
                                                            "range": [
                                                                221,
                                                                221
                                                            ],
                                                            "content": "."
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "None",
                                                            "range": [
                                                                223,
                                                                223
                                                            ],
                                                            "content": "("
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "False",
                                                            "range": [
                                                                225,
                                                                225
                                                            ],
                                                            "content": ","
                                                        }
                                                    ],
                                                    "content": ":\nassert ld_client.variation(\"test-flag\",None"
                                                }
                                            ],
                                            "content": "):\nassert ld_client.variation(\"test-flag\",None,"
                                        }
                                    ],
                                    "content": ",True):\nassert ld_client.variation(\"test-flag\",None,"
                                }
                            ],
                            "content": "):\nwith mock_flag_variation(\"test-flag\",True):\nassert ld_client.variation(\"test-flag\",None,"
                        },
                        {
                            "type": "WithStatement",
                            "range": [
                                229,
                                249
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "range": [
                                        230,
                                        235
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mock_flag_variation",
                                            "range": [
                                                230,
                                                230
                                            ],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "Literal",
                                            "value": "\"test-flag\"",
                                            "range": [
                                                232,
                                                232
                                            ],
                                            "content": "with"
                                        },
                                        {
                                            "type": "Literal",
                                            "value": "False",
                                            "range": [
                                                234,
                                                234
                                            ],
                                            "content": "("
                                        }
                                    ],
                                    "content": "\n\nwith mock_flag_variation(\"test-flag\""
                                },
                                {
                                    "type": "BlockStatement",
                                    "range": [
                                        236,
                                        249
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "range": [
                                                238,
                                                249
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "range": [
                                                        239,
                                                        248
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "range": [
                                                                239,
                                                                241
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "ld_client",
                                                                    "range": [
                                                                        239,
                                                                        239
                                                                    ],
                                                                    "content": ":"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "variation",
                                                                    "range": [
                                                                        241,
                                                                        241
                                                                    ],
                                                                    "content": "assert"
                                                                }
                                                            ],
                                                            "content": ":\nassert"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "\"test-flag\"",
                                                            "range": [
                                                                243,
                                                                243
                                                            ],
                                                            "content": "."
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "None",
                                                            "range": [
                                                                245,
                                                                245
                                                            ],
                                                            "content": "("
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "False",
                                                            "range": [
                                                                247,
                                                                247
                                                            ],
                                                            "content": ","
                                                        }
                                                    ],
                                                    "content": ":\nassert ld_client.variation(\"test-flag\",None"
                                                }
                                            ],
                                            "content": "):\nassert ld_client.variation(\"test-flag\",None,"
                                        }
                                    ],
                                    "content": ",False):\nassert ld_client.variation(\"test-flag\",None,"
                                }
                            ],
                            "content": ")\n\nwith mock_flag_variation(\"test-flag\",False):\nassert ld_client.variation(\"test-flag\",None,"
                        }
                    ],
                    "content": "ld_client):\nwith mock_flag_variation(\"test-flag\",True):\nassert ld_client.variation(\"test-flag\",None,False)\n\nwith mock_flag_variation(\"test-flag\",False):\nassert ld_client.variation(\"test-flag\",None,"
                }
            ],
            "content": "\n\n\ndef test_mock_flag_variation(ld_client):\nwith mock_flag_variation(\"test-flag\",True):\nassert ld_client.variation(\"test-flag\",None,False)\n\nwith mock_flag_variation(\"test-flag\",False):\nassert ld_client.variation(\"test-flag\",None,"
        }
    ],
    "content": "def ld_client(mocker):\nclient=mocker.Mock(spec=LDClient)\nmocker.patch(\"ldclient.get\",return_value=client)\nclient.is_initialized.return_value=True\nreturn client\n\n\n@pytest.mark.asyncio\nasync def test_feature_flag_enabled(ld_client):\nld_client.variation.return_value=True\n\n@feature_flag(\"test-flag\")\nasync def test_function(user_id:str):\nreturn \"success\"\n\nresult=test_function(user_id=\"test-user\")\nassert result==\"success\"\nld_client.variation.assert_called_once()\n\n\n@pytest.mark.asyncio\nasync def test_feature_flag_unauthorized_response(ld_client):\nld_client.variation.return_value=False\n\n@feature_flag(\"test-flag\")\nasync def test_function(user_id:str):\nreturn \"success\"\n\nresult=test_function(user_id=\"test-user\")\nassert result=={\"error\":\"disabled\"}\n\n\ndef test_mock_flag_variation(ld_client):\nwith mock_flag_variation(\"test-flag\",True):\nassert ld_client.variation(\"test-flag\",None,False)\n\nwith mock_flag_variation(\"test-flag\",False):\nassert ld_client.variation(\"test-flag\",None,"
}