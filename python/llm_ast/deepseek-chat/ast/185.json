{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        254
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                1,
                1
            ],
            "children": [],
            "content": "\" \\n In this problem, we want to determine all possible combinations of k \\n numbers out of 1 ... n. We use backtracking to solve this problem. \\n  \\n Time complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))), \\n \""
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                4,
                7
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "annotations",
                    "range": [
                        7,
                        7
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        4,
                        4
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "ModuleSpecifier",
                    "name": "__future__",
                    "range": [
                        5,
                        5
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        6,
                        6
                    ],
                    "children": [],
                    "content": "__future__"
                }
            ],
            "content": "\nfrom __future__ import"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                10,
                13
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "combinations",
                    "range": [
                        13,
                        13
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        10,
                        10
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "ModuleSpecifier",
                    "name": "itertools",
                    "range": [
                        11,
                        11
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        12,
                        12
                    ],
                    "children": [],
                    "content": "itertools"
                }
            ],
            "content": "\nfrom itertools import"
        },
        {
            "type": "FunctionDecl",
            "name": "combination_lists",
            "range": [
                15,
                64
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        17,
                        25
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "n",
                            "range": [
                                18,
                                20
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        20,
                                        20
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "def combination_lists("
                        },
                        {
                            "type": "Parameter",
                            "name": "k",
                            "range": [
                                22,
                                24
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        24,
                                        24
                                    ],
                                    "children": [],
                                    "content": ","
                                }
                            ],
                            "content": ":int,"
                        }
                    ],
                    "content": "\ndef combination_lists(n:int,k"
                },
                {
                    "type": "ReturnType",
                    "name": "returnType",
                    "range": [
                        26,
                        34
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "list",
                            "range": [
                                28,
                                34
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "list",
                                    "range": [
                                        30,
                                        34
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "int",
                                            "range": [
                                                32,
                                                32
                                            ],
                                            "children": [],
                                            "content": "["
                                        }
                                    ],
                                    "content": ">list[list["
                                }
                            ],
                            "content": ")->list[list["
                        }
                    ],
                    "content": ":int)->list[list["
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        36,
                        64
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                37,
                                39
                            ],
                            "children": [],
                            "content": "]:\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                41,
                                63
                            ],
                            "children": [
                                {
                                    "type": "ListComprehension",
                                    "name": "listComprehension",
                                    "range": [
                                        42,
                                        63
                                    ],
                                    "children": [
                                        {
                                            "type": "Expression",
                                            "name": "list",
                                            "range": [
                                                43,
                                                46
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "x",
                                                    "range": [
                                                        45,
                                                        45
                                                    ],
                                                    "children": [],
                                                    "content": "["
                                                }
                                            ],
                                            "content": "\nreturn[list"
                                        },
                                        {
                                            "type": "ForClause",
                                            "name": "forClause",
                                            "range": [
                                                47,
                                                62
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "x",
                                                    "range": [
                                                        48,
                                                        48
                                                    ],
                                                    "children": [],
                                                    "content": "x"
                                                },
                                                {
                                                    "type": "Expression",
                                                    "name": "combinations",
                                                    "range": [
                                                        50,
                                                        62
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "range",
                                                            "range": [
                                                                52,
                                                                59
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "1",
                                                                    "range": [
                                                                        54,
                                                                        54
                                                                    ],
                                                                    "children": [],
                                                                    "content": "("
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "n",
                                                                    "range": [
                                                                        56,
                                                                        56
                                                                    ],
                                                                    "children": [],
                                                                    "content": "("
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "1",
                                                                    "range": [
                                                                        58,
                                                                        58
                                                                    ],
                                                                    "children": [],
                                                                    "content": ","
                                                                }
                                                            ],
                                                            "content": "in combinations(range(1,n"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "k",
                                                            "range": [
                                                                61,
                                                                61
                                                            ],
                                                            "children": [],
                                                            "content": "1"
                                                        }
                                                    ],
                                                    "content": "for x in combinations(range(1,n+1)"
                                                }
                                            ],
                                            "content": "(x)for x in combinations(range(1,n+1)"
                                        }
                                    ],
                                    "content": "\"\"\nreturn[list(x)for x in combinations(range(1,n+1),"
                                }
                            ],
                            "content": "\" \\n     >>> combination_lists(n=4, k=2) \\n     [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]] \\n     \"\"\"\nreturn[list(x)for x in combinations(range(1,n+1),"
                        }
                    ],
                    "content": "]]:\n\"\"\" \\n     >>> combination_lists(n=4, k=2) \\n     [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]] \\n     \"\"\"\nreturn[list(x)for x in combinations(range(1,n+1),k"
                }
            ],
            "content": "\n\n\ndef combination_lists(n:int,k:int)->list[list[int]]:\n\"\"\" \\n     >>> combination_lists(n=4, k=2) \\n     [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]] \\n     \"\"\"\nreturn[list(x)for x in combinations(range(1,n+1),k"
        },
        {
            "type": "FunctionDecl",
            "name": "generate_all_combinations",
            "range": [
                65,
                145
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        67,
                        75
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "n",
                            "range": [
                                68,
                                70
                            ],
                            "children": [],
                            "content": "\n\ndef"
                        },
                        {
                            "type": "Parameter",
                            "name": "k",
                            "range": [
                                72,
                                74
                            ],
                            "children": [],
                            "content": "(n:"
                        }
                    ],
                    "content": "\n\n\ndef generate_all_combinations(n:int"
                },
                {
                    "type": "ReturnType",
                    "name": "returnType",
                    "range": [
                        76,
                        84
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "list",
                            "range": [
                                78,
                                84
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "list",
                                    "range": [
                                        80,
                                        84
                                    ],
                                    "children": [
                                        {
                                            "type": "Type",
                                            "name": "int",
                                            "range": [
                                                82,
                                                84
                                            ],
                                            "children": [],
                                            "content": ">list["
                                        }
                                    ],
                                    "content": ")->list["
                                }
                            ],
                            "content": ":int)->list["
                        }
                    ],
                    "content": ",k:int)->list["
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        87,
                        89
                    ],
                    "children": [],
                    "content": "int]]"
                },
                {
                    "type": "Body",
                    "name": "body",
                    "range": [
                        91,
                        145
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "ifStatement",
                            "range": [
                                91,
                                102
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        92,
                                        94
                                    ],
                                    "children": [],
                                    "content": "\"\"\" \\n     >>> generate_all_combinations(n=4, k=2) \\n     [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]] \\n     >>> generate_all_combinations(n=0, k=0) \\n     [[]] \\n     >>> generate_all_combinations(n=10, k=-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: k must not be negative \\n     >>> generate_all_combinations(n=-1, k=10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: n must not be negative \\n     >>> generate_all_combinations(n=5, k=4) \\n     [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]] \\n     >>> from itertools import combinations \\n     >>> all(generate_all_combinations(n, k) == combination_lists(n, k) \\n     ...     for n in range(1, 6) for k in range(1, 6)) \\n     True \\n     \"\"\""
                                },
                                {
                                    "type": "Body",
                                    "name": "body",
                                    "range": [
                                        97,
                                        101
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raiseStatement",
                                            "range": [
                                                97,
                                                101
                                            ],
                                            "children": [
                                                {
                                                    "type": "Exception",
                                                    "name": "ValueError",
                                                    "range": [
                                                        98,
                                                        101
                                                    ],
                                                    "children": [],
                                                    "content": "<0:\n"
                                                }
                                            ],
                                            "content": "k<0:\n"
                                        }
                                    ],
                                    "content": "k<0:\n"
                                }
                            ],
                            "content": "\n\"\"\" \\n     >>> generate_all_combinations(n=4, k=2) \\n     [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]] \\n     >>> generate_all_combinations(n=0, k=0) \\n     [[]] \\n     >>> generate_all_combinations(n=10, k=-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: k must not be negative \\n     >>> generate_all_combinations(n=-1, k=10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: n must not be negative \\n     >>> generate_all_combinations(n=5, k=4) \\n     [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]] \\n     >>> from itertools import combinations \\n     >>> all(generate_all_combinations(n, k) == combination_lists(n, k) \\n     ...     for n in range(1, 6) for k in range(1, 6)) \\n     True \\n     \"\"\"\nif k<0:\nraise"
                        },
                        {
                            "type": "IfStatement",
                            "name": "ifStatement",
                            "range": [
                                103,
                                114
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        104,
                                        106
                                    ],
                                    "children": [],
                                    "content": "(\"k must not be negative\")"
                                },
                                {
                                    "type": "Body",
                                    "name": "body",
                                    "range": [
                                        109,
                                        113
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raiseStatement",
                                            "range": [
                                                109,
                                                113
                                            ],
                                            "children": [
                                                {
                                                    "type": "Exception",
                                                    "name": "ValueError",
                                                    "range": [
                                                        110,
                                                        113
                                                    ],
                                                    "children": [],
                                                    "content": "<0:\n"
                                                }
                                            ],
                                            "content": "n<0:\n"
                                        }
                                    ],
                                    "content": "n<0:\n"
                                }
                            ],
                            "content": "ValueError(\"k must not be negative\")\nif n<0:\nraise"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "result",
                            "range": [
                                116,
                                127
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "list",
                                    "range": [
                                        118,
                                        124
                                    ],
                                    "children": [
                                        {
                                            "type": "Type",
                                            "name": "list",
                                            "range": [
                                                120,
                                                124
                                            ],
                                            "children": [
                                                {
                                                    "type": "Type",
                                                    "name": "int",
                                                    "range": [
                                                        122,
                                                        124
                                                    ],
                                                    "children": [],
                                                    "content": ":list["
                                                }
                                            ],
                                            "content": "\nresult:list["
                                        }
                                    ],
                                    "content": ")\n\nresult:list["
                                }
                            ],
                            "content": "(\"n must not be negative\")\n\nresult:list[list[int"
                        },
                        {
                            "type": "CallExpression",
                            "name": "create_all_state",
                            "range": [
                                129,
                                141
                            ],
                            "children": [
                                {
                                    "type": "Arguments",
                                    "name": "arguments",
                                    "range": [
                                        130,
                                        141
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "1",
                                            "range": [
                                                131,
                                                131
                                            ],
                                            "children": [],
                                            "content": "["
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "n",
                                            "range": [
                                                133,
                                                133
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "k",
                                            "range": [
                                                135,
                                                135
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "[]",
                                            "range": [
                                                137,
                                                138
                                            ],
                                            "children": [],
                                            "content": ",n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "result",
                                            "range": [
                                                140,
                                                140
                                            ],
                                            "children": [],
                                            "content": "k"
                                        }
                                    ],
                                    "content": "=[]\ncreate_all_state(1,n,k,"
                                }
                            ],
                            "content": "]=[]\ncreate_all_state(1,n,k,"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "returnStatement",
                            "range": [
                                143,
                                144
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "result",
                                    "range": [
                                        144,
                                        144
                                    ],
                                    "children": [],
                                    "content": ","
                                }
                            ],
                            "content": "],"
                        }
                    ],
                    "content": "\n\"\"\" \\n     >>> generate_all_combinations(n=4, k=2) \\n     [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]] \\n     >>> generate_all_combinations(n=0, k=0) \\n     [[]] \\n     >>> generate_all_combinations(n=10, k=-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: k must not be negative \\n     >>> generate_all_combinations(n=-1, k=10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: n must not be negative \\n     >>> generate_all_combinations(n=5, k=4) \\n     [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]] \\n     >>> from itertools import combinations \\n     >>> all(generate_all_combinations(n, k) == combination_lists(n, k) \\n     ...     for n in range(1, 6) for k in range(1, 6)) \\n     True \\n     \"\"\"\nif k<0:\nraise ValueError(\"k must not be negative\")\nif n<0:\nraise ValueError(\"n must not be negative\")\n\nresult:list[list[int]]=[]\ncreate_all_state(1,n,k,[],result"
                }
            ],
            "content": ")]\n\n\ndef generate_all_combinations(n:int,k:int)->list[list[int]]:\n\"\"\" \\n     >>> generate_all_combinations(n=4, k=2) \\n     [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]] \\n     >>> generate_all_combinations(n=0, k=0) \\n     [[]] \\n     >>> generate_all_combinations(n=10, k=-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: k must not be negative \\n     >>> generate_all_combinations(n=-1, k=10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: n must not be negative \\n     >>> generate_all_combinations(n=5, k=4) \\n     [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]] \\n     >>> from itertools import combinations \\n     >>> all(generate_all_combinations(n, k) == combination_lists(n, k) \\n     ...     for n in range(1, 6) for k in range(1, 6)) \\n     True \\n     \"\"\"\nif k<0:\nraise ValueError(\"k must not be negative\")\nif n<0:\nraise ValueError(\"n must not be negative\")\n\nresult:list[list[int]]=[]\ncreate_all_state(1,n,k,[],result"
        },
        {
            "type": "FunctionDecl",
            "name": "create_all_state",
            "range": [
                146,
                254
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        148,
                        183
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "increment",
                            "range": [
                                150,
                                152
                            ],
                            "children": [],
                            "content": "\n\n\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "total_number",
                            "range": [
                                155,
                                157
                            ],
                            "children": [],
                            "content": "(\nincrement"
                        },
                        {
                            "type": "Parameter",
                            "name": "level",
                            "range": [
                                160,
                                162
                            ],
                            "children": [],
                            "content": ",\ntotal_number"
                        },
                        {
                            "type": "Parameter",
                            "name": "current_list",
                            "range": [
                                165,
                                171
                            ],
                            "children": [],
                            "content": ",\nlevel:int,\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "total_list",
                            "range": [
                                173,
                                182
                            ],
                            "children": [],
                            "content": ":list[int],\ntotal_list:list"
                        }
                    ],
                    "content": "return result\n\n\ndef create_all_state(\nincrement:int,\ntotal_number:int,\nlevel:int,\ncurrent_list:list[int],\ntotal_list:list["
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        185,
                        187
                    ],
                    "children": [],
                    "content": "[int]"
                },
                {
                    "type": "Block",
                    "name": "body",
                    "range": [
                        189,
                        254
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                190,
                                208
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "level == 0",
                                    "range": [
                                        191,
                                        194
                                    ],
                                    "children": [],
                                    "content": ")->None"
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        195,
                                        208
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "total_list.append(current_list[:])",
                                            "range": [
                                                197,
                                                205
                                            ],
                                            "children": [],
                                            "content": "if level==0:\ntotal_list."
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                207,
                                                208
                                            ],
                                            "children": [],
                                            "content": "(current_list"
                                        }
                                    ],
                                    "content": ":\nif level==0:\ntotal_list.append(current_list"
                                }
                            ],
                            "content": "\n)->None:\nif level==0:\ntotal_list.append(current_list"
                        },
                        {
                            "type": "ForStatement",
                            "name": "for",
                            "range": [
                                210,
                                254
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "i in range(increment, total_number - level + 2)",
                                    "range": [
                                        211,
                                        222
                                    ],
                                    "children": [],
                                    "content": "])\nreturn\n\nfor i in range(increment"
                                },
                                {
                                    "type": "Block",
                                    "name": "body",
                                    "range": [
                                        223,
                                        254
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "current_list.append(i)",
                                            "range": [
                                                225,
                                                230
                                            ],
                                            "children": [],
                                            "content": "-level+2):"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "create_all_state(i + 1, total_number, level - 1, current_list, total_list)",
                                            "range": [
                                                232,
                                                247
                                            ],
                                            "children": [],
                                            "content": "current_list.append(i)\ncreate_all_state(i+1,total_number,level"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "current_list.pop()",
                                            "range": [
                                                249,
                                                253
                                            ],
                                            "children": [],
                                            "content": "1,current_list,total_list"
                                        }
                                    ],
                                    "content": ",total_number-level+2):\ncurrent_list.append(i)\ncreate_all_state(i+1,total_number,level-1,current_list,total_list)"
                                }
                            ],
                            "content": ":])\nreturn\n\nfor i in range(increment,total_number-level+2):\ncurrent_list.append(i)\ncreate_all_state(i+1,total_number,level-1,current_list,total_list)"
                        }
                    ],
                    "content": ",\n)->None:\nif level==0:\ntotal_list.append(current_list[:])\nreturn\n\nfor i in range(increment,total_number-level+2):\ncurrent_list.append(i)\ncreate_all_state(i+1,total_number,level-1,current_list,total_list)"
                }
            ],
            "content": ")\nreturn result\n\n\ndef create_all_state(\nincrement:int,\ntotal_number:int,\nlevel:int,\ncurrent_list:list[int],\ntotal_list:list[list[int]],\n)->None:\nif level==0:\ntotal_list.append(current_list[:])\nreturn\n\nfor i in range(increment,total_number-level+2):\ncurrent_list.append(i)\ncreate_all_state(i+1,total_number,level-1,current_list,total_list)"
        }
    ],
    "content": "\"\"\" \\n In this problem, we want to determine all possible combinations of k \\n numbers out of 1 ... n. We use backtracking to solve this problem. \\n  \\n Time complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))), \\n \"\"\"\n\nfrom __future__ import annotations\n\nfrom itertools import combinations\n\n\ndef combination_lists(n:int,k:int)->list[list[int]]:\n\"\"\" \\n     >>> combination_lists(n=4, k=2) \\n     [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]] \\n     \"\"\"\nreturn[list(x)for x in combinations(range(1,n+1),k)]\n\n\ndef generate_all_combinations(n:int,k:int)->list[list[int]]:\n\"\"\" \\n     >>> generate_all_combinations(n=4, k=2) \\n     [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]] \\n     >>> generate_all_combinations(n=0, k=0) \\n     [[]] \\n     >>> generate_all_combinations(n=10, k=-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: k must not be negative \\n     >>> generate_all_combinations(n=-1, k=10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: n must not be negative \\n     >>> generate_all_combinations(n=5, k=4) \\n     [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]] \\n     >>> from itertools import combinations \\n     >>> all(generate_all_combinations(n, k) == combination_lists(n, k) \\n     ...     for n in range(1, 6) for k in range(1, 6)) \\n     True \\n     \"\"\"\nif k<0:\nraise ValueError(\"k must not be negative\")\nif n<0:\nraise ValueError(\"n must not be negative\")\n\nresult:list[list[int]]=[]\ncreate_all_state(1,n,k,[],result)\nreturn result\n\n\ndef create_all_state(\nincrement:int,\ntotal_number:int,\nlevel:int,\ncurrent_list:list[int],\ntotal_list:list[list[int]],\n)->None:\nif level==0:\ntotal_list.append(current_list[:])\nreturn\n\nfor i in range(increment,total_number-level+2):\ncurrent_list.append(i)\ncreate_all_state(i+1,total_number,level-1,current_list,total_list)"
}