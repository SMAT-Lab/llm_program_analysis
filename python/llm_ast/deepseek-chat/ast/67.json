{
    "type": "Program",
    "name": "Global",
    "range": [
        95,
        1165
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "on_graph_activate",
            "range": [
                95,
                224
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "on_graph_activate",
                    "range": [
                        95,
                        117
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                95,
                                99
                            ],
                            "children": [],
                            "content": "\n\nasync def on_graph_activate"
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                96,
                                99
                            ],
                            "children": [],
                            "content": "\nasync def on_graph_activate"
                        },
                        {
                            "type": "Identifier",
                            "name": "on_graph_activate",
                            "range": [
                                97,
                                115
                            ],
                            "children": [],
                            "content": "async def on_graph_activate(\ngraph:\"GraphModel\",get_credentials:Callable[[str],\"Credentials | None\"]"
                        },
                        {
                            "type": "ParameterList",
                            "name": "parameters",
                            "range": [
                                98,
                                115
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "graph",
                                    "range": [
                                        100,
                                        102
                                    ],
                                    "children": [],
                                    "content": "(\ngraph"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "get_credentials",
                                    "range": [
                                        104,
                                        113
                                    ],
                                    "children": [],
                                    "content": "\"GraphModel\",get_credentials:Callable[[str],"
                                }
                            ],
                            "content": "def on_graph_activate(\ngraph:\"GraphModel\",get_credentials:Callable[[str],\"Credentials | None\"]"
                        }
                    ],
                    "content": "\n\nasync def on_graph_activate(\ngraph:\"GraphModel\",get_credentials:Callable[[str],\"Credentials | None\"]\n)"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        118,
                        224
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "name": "docstring",
                            "range": [
                                118,
                                120
                            ],
                            "children": [],
                            "content": ":\n\"\""
                        },
                        {
                            "type": "VariableDecl",
                            "name": "updated_nodes",
                            "range": [
                                130,
                                133
                            ],
                            "children": [],
                            "content": "previous_graph_version\nupdated_nodes="
                        },
                        {
                            "type": "ForStatement",
                            "name": "for new_node in graph.nodes",
                            "range": [
                                135,
                                213
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "node_credentials",
                                    "range": [
                                        143,
                                        146
                                    ],
                                    "children": [],
                                    "content": ":\nnode_credentials="
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME)",
                                    "range": [
                                        147,
                                        170
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "node_credentials = get_credentials(creds_meta[\"id\"])",
                                            "range": [
                                                161,
                                                170
                                            ],
                                            "children": [],
                                            "content": ":\nnode_credentials=get_credentials(creds_meta[\"id\"]"
                                        }
                                    ],
                                    "content": "None\nif creds_meta:=new_node.input_default.get(CREDENTIALS_FIELD_NAME):\nnode_credentials=get_credentials(creds_meta[\"id\"]"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "if not node_credentials",
                                    "range": [
                                        171,
                                        187
                                    ],
                                    "children": [
                                        {
                                            "type": "ThrowStatement",
                                            "name": "raise ValueError",
                                            "range": [
                                                176,
                                                187
                                            ],
                                            "children": [],
                                            "content": ":\nraise ValueError(\nf \"Node #{new_node.id} updated with non-existent \"\nf \"credentials #{node_credentials}\"\n"
                                        }
                                    ],
                                    "content": ")\nif not node_credentials:\nraise ValueError(\nf \"Node #{new_node.id} updated with non-existent \"\nf \"credentials #{node_credentials}\"\n"
                                },
                                {
                                    "type": "AwaitExpression",
                                    "name": "await on_node_activate(graph.user_id, new_node, credentials=node_credentials)",
                                    "range": [
                                        189,
                                        205
                                    ],
                                    "children": [],
                                    "content": "\n\nupdated_node=await on_node_activate(\ngraph.user_id,new_node,credentials=node_credentials"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "updated_nodes.append(updated_node)",
                                    "range": [
                                        207,
                                        213
                                    ],
                                    "children": [],
                                    "content": ")\nupdated_nodes.append(updated_node"
                                }
                            ],
                            "content": "]\nfor new_node in graph.nodes:\nnode_credentials=None\nif creds_meta:=new_node.input_default.get(CREDENTIALS_FIELD_NAME):\nnode_credentials=get_credentials(creds_meta[\"id\"])\nif not node_credentials:\nraise ValueError(\nf \"Node #{new_node.id} updated with non-existent \"\nf \"credentials #{node_credentials}\"\n)\n\nupdated_node=await on_node_activate(\ngraph.user_id,new_node,credentials=node_credentials\n)\nupdated_nodes.append(updated_node"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "graph.nodes = updated_nodes",
                            "range": [
                                215,
                                220
                            ],
                            "children": [],
                            "content": "\n\ngraph.nodes="
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return graph",
                            "range": [
                                221,
                                223
                            ],
                            "children": [],
                            "content": "updated_nodes\nreturn"
                        }
                    ],
                    "content": ":\n\"\"\" \\n     Hook to be called when a graph is activated/created. \\n  \\n     ⚠️ Assuming node entities are not re-used between graph versions, ⚠️ \\n     this hook calls `on_node_activate` on all nodes in this graph. \\n  \\n     Params: \\n         get_credentials: `credentials_id` -> Credentials \\n     \"\"\"\n#Compare nodes in new_graph_version with previous_graph_version\nupdated_nodes=[]\nfor new_node in graph.nodes:\nnode_credentials=None\nif creds_meta:=new_node.input_default.get(CREDENTIALS_FIELD_NAME):\nnode_credentials=get_credentials(creds_meta[\"id\"])\nif not node_credentials:\nraise ValueError(\nf \"Node #{new_node.id} updated with non-existent \"\nf \"credentials #{node_credentials}\"\n)\n\nupdated_node=await on_node_activate(\ngraph.user_id,new_node,credentials=node_credentials\n)\nupdated_nodes.append(updated_node)\n\ngraph.nodes=updated_nodes\nreturn graph"
                }
            ],
            "content": "\n\nasync def on_graph_activate(\ngraph:\"GraphModel\",get_credentials:Callable[[str],\"Credentials | None\"]\n):\n\"\"\" \\n     Hook to be called when a graph is activated/created. \\n  \\n     ⚠️ Assuming node entities are not re-used between graph versions, ⚠️ \\n     this hook calls `on_node_activate` on all nodes in this graph. \\n  \\n     Params: \\n         get_credentials: `credentials_id` -> Credentials \\n     \"\"\"\n#Compare nodes in new_graph_version with previous_graph_version\nupdated_nodes=[]\nfor new_node in graph.nodes:\nnode_credentials=None\nif creds_meta:=new_node.input_default.get(CREDENTIALS_FIELD_NAME):\nnode_credentials=get_credentials(creds_meta[\"id\"])\nif not node_credentials:\nraise ValueError(\nf \"Node #{new_node.id} updated with non-existent \"\nf \"credentials #{node_credentials}\"\n)\n\nupdated_node=await on_node_activate(\ngraph.user_id,new_node,credentials=node_credentials\n)\nupdated_nodes.append(updated_node)\n\ngraph.nodes=updated_nodes\nreturn graph"
        },
        {
            "type": "FunctionDecl",
            "name": "on_graph_deactivate",
            "range": [
                225,
                341
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        225,
                        229
                    ],
                    "children": [],
                    "content": "\n\n\nasync def"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        226,
                        229
                    ],
                    "children": [],
                    "content": "\n\nasync def"
                },
                {
                    "type": "FunctionName",
                    "name": "on_graph_deactivate",
                    "range": [
                        227,
                        247
                    ],
                    "children": [],
                    "content": "\nasync def on_graph_deactivate(\ngraph:\"GraphModel\",get_credentials:Callable[[str],\"Credentials | None\"]\n"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        228,
                        245
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "graph",
                            "range": [
                                230,
                                232
                            ],
                            "children": [],
                            "content": "on_graph_deactivate(\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "get_credentials",
                            "range": [
                                234,
                                243
                            ],
                            "children": [],
                            "content": ":\"GraphModel\",get_credentials:Callable[[str]"
                        }
                    ],
                    "content": "async def on_graph_deactivate(\ngraph:\"GraphModel\",get_credentials:Callable[[str],\"Credentials | None\""
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        247,
                        341
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                248,
                                250
                            ],
                            "children": [],
                            "content": "):\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "updated_nodes",
                            "range": [
                                252,
                                255
                            ],
                            "children": [],
                            "content": "\" \\n     Hook to be called when a graph is deactivated/deleted. \\n  \\n     ⚠️ Assuming node entities are not re-used between graph versions, ⚠️ \\n     this hook calls `on_node_deactivate` on all nodes in `graph`. \\n  \\n     Params: \\n         get_credentials: `credentials_id` -> Credentials \\n     \"\"\"\nupdated_nodes"
                        },
                        {
                            "type": "ForStatement",
                            "name": "for_loop",
                            "range": [
                                257,
                                330
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "node",
                                    "range": [
                                        258,
                                        259
                                    ],
                                    "children": [],
                                    "content": "]\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "graph.nodes",
                                    "range": [
                                        260,
                                        262
                                    ],
                                    "children": [],
                                    "content": "for node in"
                                },
                                {
                                    "type": "Block",
                                    "name": "for_body",
                                    "range": [
                                        263,
                                        330
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "name": "node_credentials",
                                            "range": [
                                                265,
                                                267
                                            ],
                                            "children": [],
                                            "content": "nodes:\n"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_statement",
                                            "range": [
                                                269,
                                                292
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "creds_meta",
                                                    "range": [
                                                        270,
                                                        271
                                                    ],
                                                    "children": [],
                                                    "content": "None\n"
                                                },
                                                {
                                                    "type": "Assignment",
                                                    "name": "creds_meta",
                                                    "range": [
                                                        272,
                                                        281
                                                    ],
                                                    "children": [],
                                                    "content": "if creds_meta:=node.input_default.get("
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "get_credentials",
                                                    "range": [
                                                        285,
                                                        291
                                                    ],
                                                    "children": [],
                                                    "content": "\nnode_credentials=get_credentials(creds_meta["
                                                }
                                            ],
                                            "content": "=None\nif creds_meta:=node.input_default.get(CREDENTIALS_FIELD_NAME):\nnode_credentials=get_credentials(creds_meta[\"id\""
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_statement",
                                            "range": [
                                                293,
                                                309
                                            ],
                                            "children": [
                                                {
                                                    "type": "UnaryExpression",
                                                    "name": "not node_credentials",
                                                    "range": [
                                                        294,
                                                        296
                                                    ],
                                                    "children": [],
                                                    "content": ")\nif"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "logger.error",
                                                    "range": [
                                                        298,
                                                        309
                                                    ],
                                                    "children": [],
                                                    "content": "node_credentials:\nlogger.error(\nf \"Node #{node.id} referenced non-existent \"\nf"
                                                }
                                            ],
                                            "content": "])\nif not node_credentials:\nlogger.error(\nf \"Node #{node.id} referenced non-existent \"\nf"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "updated_node",
                                            "range": [
                                                312,
                                                322
                                            ],
                                            "children": [],
                                            "content": ")\n\nupdated_node=await on_node_deactivate(node,credentials"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "updated_nodes.append",
                                            "range": [
                                                324,
                                                329
                                            ],
                                            "children": [],
                                            "content": "node_credentials)\nupdated_nodes.append"
                                        }
                                    ],
                                    "content": "graph.nodes:\nnode_credentials=None\nif creds_meta:=node.input_default.get(CREDENTIALS_FIELD_NAME):\nnode_credentials=get_credentials(creds_meta[\"id\"])\nif not node_credentials:\nlogger.error(\nf \"Node #{node.id} referenced non-existent \"\nf \"credentials #{creds_meta['id']}\"\n)\n\nupdated_node=await on_node_deactivate(node,credentials=node_credentials)\nupdated_nodes.append("
                                }
                            ],
                            "content": "[]\nfor node in graph.nodes:\nnode_credentials=None\nif creds_meta:=node.input_default.get(CREDENTIALS_FIELD_NAME):\nnode_credentials=get_credentials(creds_meta[\"id\"])\nif not node_credentials:\nlogger.error(\nf \"Node #{node.id} referenced non-existent \"\nf \"credentials #{creds_meta['id']}\"\n)\n\nupdated_node=await on_node_deactivate(node,credentials=node_credentials)\nupdated_nodes.append("
                        },
                        {
                            "type": "Identifier",
                            "name": "graph.nodes",
                            "range": [
                                332,
                                336
                            ],
                            "children": [],
                            "content": ")\n\ngraph."
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                338,
                                339
                            ],
                            "children": [],
                            "content": "=updated_nodes"
                        }
                    ],
                    "content": "\n):\n\"\"\" \\n     Hook to be called when a graph is deactivated/deleted. \\n  \\n     ⚠️ Assuming node entities are not re-used between graph versions, ⚠️ \\n     this hook calls `on_node_deactivate` on all nodes in `graph`. \\n  \\n     Params: \\n         get_credentials: `credentials_id` -> Credentials \\n     \"\"\"\nupdated_nodes=[]\nfor node in graph.nodes:\nnode_credentials=None\nif creds_meta:=node.input_default.get(CREDENTIALS_FIELD_NAME):\nnode_credentials=get_credentials(creds_meta[\"id\"])\nif not node_credentials:\nlogger.error(\nf \"Node #{node.id} referenced non-existent \"\nf \"credentials #{creds_meta['id']}\"\n)\n\nupdated_node=await on_node_deactivate(node,credentials=node_credentials)\nupdated_nodes.append(updated_node)\n\ngraph.nodes=updated_nodes\nreturn"
                }
            ],
            "content": "\n\n\nasync def on_graph_deactivate(\ngraph:\"GraphModel\",get_credentials:Callable[[str],\"Credentials | None\"]\n):\n\"\"\" \\n     Hook to be called when a graph is deactivated/deleted. \\n  \\n     ⚠️ Assuming node entities are not re-used between graph versions, ⚠️ \\n     this hook calls `on_node_deactivate` on all nodes in `graph`. \\n  \\n     Params: \\n         get_credentials: `credentials_id` -> Credentials \\n     \"\"\"\nupdated_nodes=[]\nfor node in graph.nodes:\nnode_credentials=None\nif creds_meta:=node.input_default.get(CREDENTIALS_FIELD_NAME):\nnode_credentials=get_credentials(creds_meta[\"id\"])\nif not node_credentials:\nlogger.error(\nf \"Node #{node.id} referenced non-existent \"\nf \"credentials #{creds_meta['id']}\"\n)\n\nupdated_node=await on_node_deactivate(node,credentials=node_credentials)\nupdated_nodes.append(updated_node)\n\ngraph.nodes=updated_nodes\nreturn"
        },
        {
            "type": "FunctionDecl",
            "name": "on_node_activate",
            "range": [
                342,
                378
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        347,
                        349
                    ],
                    "children": [],
                    "content": "def on_node_activate("
                },
                {
                    "type": "Parameter",
                    "name": "node",
                    "range": [
                        352,
                        354
                    ],
                    "children": [],
                    "content": ":str,"
                },
                {
                    "type": "Parameter",
                    "name": "credentials",
                    "range": [
                        360,
                        367
                    ],
                    "children": [],
                    "content": "\n*,\ncredentials:Optional["
                },
                {
                    "type": "ReturnType",
                    "name": "NodeModel",
                    "range": [
                        373,
                        373
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Docstring",
                    "name": "Hook to be called when the node is activated/created",
                    "range": [
                        376,
                        378
                    ],
                    "children": [],
                    "content": ">\"NodeModel\":"
                }
            ],
            "content": "graph\n\n\nasync def on_node_activate(\nuser_id:str,\nnode:\"NodeModel\",\n*,\ncredentials:Optional[\"Credentials\"]=None,\n)->\"NodeModel\":"
        },
        {
            "type": "Block",
            "name": "block",
            "range": [
                381,
                389
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "block",
                    "range": [
                        381,
                        389
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "get_block",
                            "range": [
                                383,
                                388
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "node.block_id",
                                    "range": [
                                        385,
                                        387
                                    ],
                                    "children": [],
                                    "content": "block=get_block"
                                }
                            ],
                            "content": "\n\nblock=get_block("
                        }
                    ],
                    "content": "\"Hook to be called when the node is activated/created\"\"\"\n\nblock=get_block(node"
                }
            ],
            "content": "\"Hook to be called when the node is activated/created\"\"\"\n\nblock=get_block(node"
        },
        {
            "type": "IfStatement",
            "name": "if not block",
            "range": [
                390,
                403
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "not block",
                    "range": [
                        390,
                        392
                    ],
                    "children": [],
                    "content": ".block_id)"
                },
                {
                    "type": "Block",
                    "name": "raise ValueError",
                    "range": [
                        395,
                        402
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "ValueError",
                            "range": [
                                396,
                                401
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "f\"Node #{node.id} is instance of unknown block #{node.block_id}\"",
                                    "range": [
                                        399,
                                        400
                                    ],
                                    "children": [],
                                    "content": "raise ValueError"
                                }
                            ],
                            "content": "block:\nraise ValueError("
                        }
                    ],
                    "content": "not block:\nraise ValueError(\n"
                }
            ],
            "content": ".block_id)\nif not block:\nraise ValueError(\nf"
        },
        {
            "type": "IfStatement",
            "name": "if not block.webhook_config",
            "range": [
                405,
                414
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "not block.webhook_config",
                    "range": [
                        405,
                        410
                    ],
                    "children": [],
                    "content": "\n)\n\nif not"
                },
                {
                    "type": "Block",
                    "name": "return node",
                    "range": [
                        412,
                        414
                    ],
                    "children": [],
                    "content": ".webhook_config:"
                }
            ],
            "content": "\n)\n\nif not block.webhook_config:"
        },
        {
            "type": "Assignment",
            "name": "provider",
            "range": [
                416,
                423
            ],
            "children": [
                {
                    "type": "MemberAccess",
                    "name": "block.webhook_config.provider",
                    "range": [
                        418,
                        422
                    ],
                    "children": [],
                    "content": "\n\nprovider=block"
                }
            ],
            "content": "return node\n\nprovider=block."
        },
        {
            "type": "IfStatement",
            "name": "if provider not in WEBHOOK_MANAGERS_BY_NAME",
            "range": [
                424,
                441
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "provider not in WEBHOOK_MANAGERS_BY_NAME",
                    "range": [
                        424,
                        429
                    ],
                    "children": [],
                    "content": "webhook_config.provider\nif provider"
                },
                {
                    "type": "Block",
                    "name": "raise ValueError",
                    "range": [
                        431,
                        440
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "ValueError",
                            "range": [
                                432,
                                439
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "f\"Block #{block.id} has webhook_config for provider {provider} \"",
                                    "range": [
                                        435,
                                        436
                                    ],
                                    "children": [],
                                    "content": "raise ValueError"
                                },
                                {
                                    "type": "Argument",
                                    "name": "\"which does not support webhooks\"",
                                    "range": [
                                        438,
                                        438
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "WEBHOOK_MANAGERS_BY_NAME:\nraise ValueError(\nf"
                        }
                    ],
                    "content": "in WEBHOOK_MANAGERS_BY_NAME:\nraise ValueError(\nf \"Block #{block.id} has webhook_config for provider {provider} \""
                }
            ],
            "content": "webhook_config.provider\nif provider not in WEBHOOK_MANAGERS_BY_NAME:\nraise ValueError(\nf \"Block #{block.id} has webhook_config for provider {provider} \"\n"
        },
        {
            "type": "CallExpression",
            "name": "logger.debug",
            "range": [
                443,
                451
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "f\"Activating webhook node #{node.id} with config {block.webhook_config}\"",
                    "range": [
                        448,
                        449
                    ],
                    "children": [],
                    "content": ".debug"
                }
            ],
            "content": "\n)\n\nlogger.debug(\n"
        },
        {
            "type": "Assignment",
            "name": "webhooks_manager",
            "range": [
                454,
                462
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "WEBHOOK_MANAGERS_BY_NAME[provider]",
                    "range": [
                        456,
                        461
                    ],
                    "children": [],
                    "content": "\n\nwebhooks_manager=WEBHOOK_MANAGERS_BY_NAME["
                }
            ],
            "content": "\n)\n\nwebhooks_manager=WEBHOOK_MANAGERS_BY_NAME[provider"
        },
        {
            "type": "IfStatement",
            "name": "if auto_setup_webhook",
            "range": [
                464,
                477
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "auto_setup_webhook",
                    "range": [
                        464,
                        466
                    ],
                    "children": [],
                    "content": "()\n"
                },
                {
                    "type": "Block",
                    "name": "try",
                    "range": [
                        478,
                        505
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "resource",
                            "range": [
                                481,
                                497
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "block.webhook_config.resource_format.format",
                                    "range": [
                                        483,
                                        496
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "**node.input_default",
                                            "range": [
                                                491,
                                                495
                                            ],
                                            "children": [],
                                            "content": "resource_format.format(*"
                                        }
                                    ],
                                    "content": ":\nresource=block.webhook_config.resource_format.format(**"
                                }
                            ],
                            "content": "\ntry:\nresource=block.webhook_config.resource_format.format(**node"
                        },
                        {
                            "type": "Catch",
                            "name": "KeyError",
                            "range": [
                                498,
                                505
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "resource",
                                    "range": [
                                        502,
                                        504
                                    ],
                                    "children": [],
                                    "content": "except KeyError:"
                                }
                            ],
                            "content": ".input_default)\nexcept KeyError:\n"
                        }
                    ],
                    "content": "BlockWebhookConfig):\ntry:\nresource=block.webhook_config.resource_format.format(**node.input_default)\nexcept KeyError:\n"
                }
            ],
            "content": "()\n\nif auto_setup_webhook:=isinstance(block.webhook_config,"
        },
        {
            "type": "CallExpression",
            "name": "logger.debug",
            "range": [
                506,
                514
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "f\"Constructed resource string {resource} from input {node.input_default}\"",
                    "range": [
                        511,
                        512
                    ],
                    "children": [],
                    "content": ".debug"
                }
            ],
            "content": "resource=None\nlogger.debug(\n"
        },
        {
            "type": "ElseStatement",
            "name": "else",
            "range": [
                516,
                528
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "resource",
                    "range": [
                        519,
                        521
                    ],
                    "children": [],
                    "content": "\nelse:"
                }
            ],
            "content": "\"Constructed resource string {resource} from input {node.input_default}\"\n)\nelse:\nresource=\"\"#not relevant"
        },
        {
            "type": "Assignment",
            "name": "needs_credentials",
            "range": [
                530,
                539
            ],
            "children": [
                {
                    "type": "MemberAccess",
                    "name": "CREDENTIALS_FIELD_NAME in block.input_schema.model_fields",
                    "range": [
                        532,
                        538
                    ],
                    "children": [],
                    "content": "\n\nneeds_credentials=CREDENTIALS_FIELD_NAME in block"
                }
            ],
            "content": "manual webhooks\n\nneeds_credentials=CREDENTIALS_FIELD_NAME in block."
        },
        {
            "type": "Assignment",
            "name": "credentials_meta",
            "range": [
                540,
                558
            ],
            "children": [
                {
                    "type": "Ternary",
                    "name": "node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None",
                    "range": [
                        542,
                        557
                    ],
                    "children": [],
                    "content": "model_fields\ncredentials_meta=(\nnode.input_default.get(CREDENTIALS_FIELD_NAME)if needs_credentials"
                }
            ],
            "content": "input_schema.model_fields\ncredentials_meta=(\nnode.input_default.get(CREDENTIALS_FIELD_NAME)if needs_credentials else"
        },
        {
            "type": "Assignment",
            "name": "event_filter_input_name",
            "range": [
                559,
                566
            ],
            "children": [
                {
                    "type": "MemberAccess",
                    "name": "block.webhook_config.event_filter_input",
                    "range": [
                        561,
                        565
                    ],
                    "children": [],
                    "content": ")\nevent_filter_input_name=block"
                }
            ],
            "content": "None\n)\nevent_filter_input_name=block."
        },
        {
            "type": "Assignment",
            "name": "has_everything_for_webhook",
            "range": [
                567,
                626
            ],
            "children": [
                {
                    "type": "LogicalExpression",
                    "name": "resource is not None and (credentials_meta or not needs_credentials) and (not event_filter_input_name or (event_filter_input_name in node.input_default and any(is_on for is_on in node.input_default[event_filter_input_name].values()))",
                    "range": [
                        569,
                        625
                    ],
                    "children": [],
                    "content": "event_filter_input\nhas_everything_for_webhook=(\nresource is not None\nand(credentials_meta or not needs_credentials)\nand(\nnot event_filter_input_name\nor(\nevent_filter_input_name in node.input_default\nand any(\nis_on\nfor is_on in node.input_default[event_filter_input_name].values()\n)\n)"
                }
            ],
            "content": "webhook_config.event_filter_input\nhas_everything_for_webhook=(\nresource is not None\nand(credentials_meta or not needs_credentials)\nand(\nnot event_filter_input_name\nor(\nevent_filter_input_name in node.input_default\nand any(\nis_on\nfor is_on in node.input_default[event_filter_input_name].values()\n)\n)\n"
        },
        {
            "type": "IfStatement",
            "name": "if has_everything_for_webhook and resource is not None",
            "range": [
                628,
                644
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "has_everything_for_webhook and resource is not None",
                    "range": [
                        628,
                        635
                    ],
                    "children": [],
                    "content": "\n)\n\nif has_everything_for_webhook and resource"
                },
                {
                    "type": "Block",
                    "name": "logger.debug",
                    "range": [
                        637,
                        643
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "logger.debug",
                            "range": [
                                638,
                                642
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "f\"Node #{node} has everything for a webhook!\"",
                                    "range": [
                                        641,
                                        642
                                    ],
                                    "children": [],
                                    "content": "logger."
                                }
                            ],
                            "content": "None:\nlogger."
                        }
                    ],
                    "content": "not None:\nlogger.debug"
                }
            ],
            "content": "\n)\n\nif has_everything_for_webhook and resource is not None:\nlogger.debug("
        },
        {
            "type": "IfStatement",
            "name": "if credentials_meta and not credentials",
            "range": [
                645,
                663
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "credentials_meta and not credentials",
                    "range": [
                        645,
                        650
                    ],
                    "children": [],
                    "content": "f \"Node #{node} has everything for a webhook!\")\nif credentials_meta"
                },
                {
                    "type": "Block",
                    "name": "raise ValueError",
                    "range": [
                        652,
                        662
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "ValueError",
                            "range": [
                                653,
                                661
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "f\"Cannot set up webhook for node #{node.id}: \"",
                                    "range": [
                                        656,
                                        657
                                    ],
                                    "children": [],
                                    "content": "raise ValueError"
                                },
                                {
                                    "type": "Argument",
                                    "name": "f\"credentials #{credentials_meta['id']} not available\"",
                                    "range": [
                                        659,
                                        660
                                    ],
                                    "children": [],
                                    "content": "\nf"
                                }
                            ],
                            "content": "credentials:\nraise ValueError(\nf \"Cannot set up webhook for node #{node.id}: \""
                        }
                    ],
                    "content": "not credentials:\nraise ValueError(\nf \"Cannot set up webhook for node #{node.id}: \"\n"
                }
            ],
            "content": "f \"Node #{node} has everything for a webhook!\")\nif credentials_meta and not credentials:\nraise ValueError(\nf \"Cannot set up webhook for node #{node.id}: \"\nf"
        },
        {
            "type": "IfStatement",
            "name": "if event_filter_input_name",
            "range": [
                665,
                738
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "event_filter_input_name",
                    "range": [
                        665,
                        667
                    ],
                    "children": [],
                    "content": "\n)\n"
                },
                {
                    "type": "Block",
                    "name": "event_filter",
                    "range": [
                        682,
                        695
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "cast",
                            "range": [
                                684,
                                694
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "dict",
                                    "range": [
                                        686,
                                        686
                                    ],
                                    "children": [],
                                    "content": "event_filter"
                                },
                                {
                                    "type": "Argument",
                                    "name": "node.input_default[event_filter_input_name]",
                                    "range": [
                                        688,
                                        693
                                    ],
                                    "children": [],
                                    "content": "cast(dict,node."
                                }
                            ],
                            "content": "__init__\nevent_filter=cast(dict,node.input_default"
                        }
                    ],
                    "content": "Block.__init__\nevent_filter=cast(dict,node.input_default["
                },
                {
                    "type": "Assignment",
                    "name": "events",
                    "range": [
                        696,
                        730
                    ],
                    "children": [
                        {
                            "type": "ListComprehension",
                            "name": "block.webhook_config.event_format.format(event=event) for event, enabled in event_filter.items() if enabled is True",
                            "range": [
                                698,
                                729
                            ],
                            "children": [],
                            "content": ")\nevents=[\nblock.webhook_config.event_format.format(event=event)\nfor event,enabled in event_filter.items()\nif enabled"
                        }
                    ],
                    "content": "event_filter_input_name])\nevents=[\nblock.webhook_config.event_format.format(event=event)\nfor event,enabled in event_filter.items()\nif enabled is"
                },
                {
                    "type": "CallExpression",
                    "name": "logger.debug",
                    "range": [
                        731,
                        737
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "f\"Webhook events to subscribe to: {', '.join(events)}\"",
                            "range": [
                                735,
                                736
                            ],
                            "children": [],
                            "content": "logger."
                        }
                    ],
                    "content": "True\n]\nlogger.debug"
                }
            ],
            "content": "\n)\n\nif event_filter_input_name:\n#Shape of the event filter is enforced in Block.__init__\nevent_filter=cast(dict,node.input_default[event_filter_input_name])\nevents=[\nblock.webhook_config.event_format.format(event=event)\nfor event,enabled in event_filter.items()\nif enabled is True\n]\nlogger.debug("
        },
        {
            "type": "ElseStatement",
            "name": "else",
            "range": [
                739,
                746
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "events",
                    "range": [
                        742,
                        744
                    ],
                    "children": [],
                    "content": "\nelse:"
                }
            ],
            "content": "f \"Webhook events to subscribe to: {', '.join(events)}\")\nelse:\nevents"
        },
        {
            "type": "IfStatement",
            "name": "if auto_setup_webhook",
            "range": [
                761,
                799
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "auto_setup_webhook",
                    "range": [
                        761,
                        763
                    ],
                    "children": [],
                    "content": "to the node"
                },
                {
                    "type": "Block",
                    "name": "assert credentials is not None",
                    "range": [
                        765,
                        769
                    ],
                    "children": [],
                    "content": "if auto_setup_webhook:\nassert"
                },
                {
                    "type": "Assignment",
                    "name": "new_webhook",
                    "range": [
                        771,
                        798
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "webhooks_manager.get_suitable_auto_webhook",
                            "range": [
                                773,
                                797
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "user_id",
                                    "range": [
                                        779,
                                        779
                                    ],
                                    "children": [],
                                    "content": "."
                                },
                                {
                                    "type": "Argument",
                                    "name": "credentials",
                                    "range": [
                                        782,
                                        782
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Argument",
                                    "name": "block.webhook_config.webhook_type",
                                    "range": [
                                        785,
                                        789
                                    ],
                                    "children": [],
                                    "content": "\ncredentials,\nblock"
                                },
                                {
                                    "type": "Argument",
                                    "name": "resource",
                                    "range": [
                                        792,
                                        792
                                    ],
                                    "children": [],
                                    "content": "."
                                },
                                {
                                    "type": "Argument",
                                    "name": "events",
                                    "range": [
                                        795,
                                        795
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "None\nnew_webhook=await webhooks_manager.get_suitable_auto_webhook(\nuser_id,\ncredentials,\nblock.webhook_config.webhook_type,\nresource,"
                        }
                    ],
                    "content": "is not None\nnew_webhook=await webhooks_manager.get_suitable_auto_webhook(\nuser_id,\ncredentials,\nblock.webhook_config.webhook_type,\nresource,\n"
                }
            ],
            "content": "to the node\nif auto_setup_webhook:\nassert credentials is not None\nnew_webhook=await webhooks_manager.get_suitable_auto_webhook(\nuser_id,\ncredentials,\nblock.webhook_config.webhook_type,\nresource,\nevents"
        },
        {
            "type": "ElseStatement",
            "name": "else",
            "range": [
                800,
                847
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "new_webhook",
                    "range": [
                        820,
                        846
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "webhooks_manager.get_manual_webhook",
                            "range": [
                                822,
                                845
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "user_id",
                                    "range": [
                                        828,
                                        828
                                    ],
                                    "children": [],
                                    "content": "."
                                },
                                {
                                    "type": "Argument",
                                    "name": "node.graph_id",
                                    "range": [
                                        831,
                                        833
                                    ],
                                    "children": [],
                                    "content": "\" \\n         ) \\n         await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials) \\n         if ( \\n             CREDENTIALS_FIELD_NAME in block.input_schema.model_fields \\n             and not credentials \\n         ): \\n             logger.warning( \\n                 f\" Cannot deregister"
                                },
                                {
                                    "type": "Argument",
                                    "name": "block.webhook_config.webhook_type",
                                    "range": [
                                        836,
                                        840
                                    ],
                                    "children": [],
                                    "content": "{webhook.id}"
                                },
                                {
                                    "type": "Argument",
                                    "name": "events",
                                    "range": [
                                        843,
                                        843
                                    ],
                                    "children": [],
                                    "content": "\" \\n                 f\""
                                }
                            ],
                            "content": "}\" \\n             f\" webhook#{webhook.id}\" \\n         ) \\n         await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials) \\n         if ( \\n             CREDENTIALS_FIELD_NAME in block.input_schema.model_fields \\n             and not credentials \\n         ): \\n             logger.warning( \\n                 f\" Cannot deregister webhook#{webhook.id}:credentials \" \\n                 f\"#{"
                        }
                    ],
                    "content": "' if credentials else ''}\" \\n             f\" webhook#{webhook.id}\" \\n         ) \\n         await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials) \\n         if ( \\n             CREDENTIALS_FIELD_NAME in block.input_schema.model_fields \\n             and not credentials \\n         ): \\n             logger.warning( \\n                 f\" Cannot deregister webhook#{webhook.id}:credentials \" \\n                 f\"#{webhook"
                }
            ],
            "content": ",\n)\nelse:\n#Manual webhook->no credentials->don 't register but do create \\n             new_webhook = await webhooks_manager.get_manual_webhook( \\n                 user_id, \\n                 node.graph_id, \\n                 block.webhook_config.webhook_type, \\n                 events, \\n             ) \\n         logger.debug(f\"Acquired webhook: {new_webhook}\") \\n         return await set_node_webhook(node.id, new_webhook.id) \\n     else: \\n         logger.debug(f\"Node #{node.id} does not have everything for a webhook\") \\n  \\n     return node \\n  \\n  \\n async def on_node_deactivate( \\n     node: \"NodeModel\", \\n     *, \\n     credentials: Optional[\"Credentials\"] = None, \\n     webhooks_manager: Optional[\"BaseWebhooksManager\"] = None, \\n ) -> \"NodeModel\": \\n     \"\"\"Hook to be called when node is deactivated/deleted\"\"\" \\n  \\n     logger.debug(f\"Deactivating node #{node.id}\") \\n     block = get_block(node.block_id) \\n     if not block: \\n         raise ValueError( \\n             f\"Node #{node.id} is instance of unknown block #{node.block_id}\" \\n         ) \\n  \\n     if not block.webhook_config: \\n         return node \\n  \\n     provider = block.webhook_config.provider \\n     if provider not in WEBHOOK_MANAGERS_BY_NAME: \\n         raise ValueError( \\n             f\"Block #{block.id} has webhook_config for provider {provider} \" \\n             \"which does not support webhooks\" \\n         ) \\n  \\n     webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]() \\n  \\n     if node.webhook_id: \\n         logger.debug(f\"Node #{node.id} has webhook_id {node.webhook_id}\") \\n         if not node.webhook: \\n             logger.error(f\"Node #{node.id} has webhook_id but no webhook object\") \\n             raise ValueError(\"node.webhook not included\") \\n  \\n         # Detach webhook from node \\n         logger.debug(f\"Detaching webhook from node #{node.id}\") \\n         updated_node = await set_node_webhook(node.id, None) \\n  \\n         # Prune and deregister the webhook if it is no longer used anywhere \\n         webhook = node.webhook \\n         logger.debug( \\n             f\"Pruning{' and deregistering ' if credentials else ''}\" \\n             f\" webhook#{webhook.id}\" \\n         ) \\n         await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials) \\n         if ( \\n             CREDENTIALS_FIELD_NAME in block.input_schema.model_fields \\n             and not credentials \\n         ): \\n             logger.warning( \\n                 f\" Cannot deregister webhook#{webhook.id}:credentials \" \\n                 f\"#{webhook."
        },
        {
            "type": "CallExpression",
            "name": "logger.debug",
            "range": [
                848,
                854
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "f\"Acquired webhook: {new_webhook}\"",
                    "range": [
                        852,
                        853
                    ],
                    "children": [],
                    "content": "\" \\n                 f\"("
                }
            ],
            "content": "credentials_id}not available \" \\n                 f\"({"
        },
        {
            "type": "ReturnStatement",
            "name": "return await set_node_webhook(node.id, new_webhook.id)",
            "range": [
                856,
                868
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "set_node_webhook",
                    "range": [
                        858,
                        867
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "node.id",
                            "range": [
                                860,
                                862
                            ],
                            "children": [],
                            "content": "}webhook ID"
                        },
                        {
                            "type": "Argument",
                            "name": "new_webhook.id",
                            "range": [
                                864,
                                866
                            ],
                            "children": [],
                            "content": "{webhook."
                        }
                    ],
                    "content": ".value}webhook ID:{webhook.provider_webhook_id"
                }
            ],
            "content": ".provider.value}webhook ID:{webhook.provider_webhook_id}"
        },
        {
            "type": "ElseStatement",
            "name": "else",
            "range": [
                869,
                879
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "logger.debug",
                    "range": [
                        872,
                        878
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "f\"Node #{node.id} does not have everything for a webhook\"",
                            "range": [
                                876,
                                877
                            ],
                            "children": [],
                            "content": "id}"
                        }
                    ],
                    "content": "#{node.id}has"
                }
            ],
            "content": ")\" \\n             ) \\n         return updated_node \\n  \\n     logger.debug(f\" Node#{node.id}has no"
        },
        {
            "type": "ReturnStatement",
            "name": "return node",
            "range": [
                881,
                883
            ],
            "children": [],
            "content": ",returning\""
        },
        {
            "type": "FunctionDecl",
            "name": "on_node_deactivate",
            "range": [
                885,
                1165
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "on_node_deactivate",
                    "range": [
                        885,
                        923
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                885,
                                889
                            ],
                            "children": [],
                            "content": "\nreturn node\n"
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                886,
                                889
                            ],
                            "children": [],
                            "content": "return node\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "on_node_deactivate",
                            "range": [
                                887,
                                907
                            ],
                            "children": [],
                            "content": "node\n"
                        },
                        {
                            "type": "ParameterList",
                            "name": "parameters",
                            "range": [
                                888,
                                918
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "node",
                                    "range": [
                                        890,
                                        892
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Parameter",
                                    "name": "credentials",
                                    "range": [
                                        898,
                                        905
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Parameter",
                                    "name": "webhooks_manager",
                                    "range": [
                                        908,
                                        915
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": "\n"
                        },
                        {
                            "type": "ReturnType",
                            "name": "return_type",
                            "range": [
                                919,
                                921
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": "\nreturn node\n"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        924,
                        1165
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                924,
                                926
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.debug",
                            "range": [
                                929,
                                935
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "block",
                            "range": [
                                937,
                                945
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_not_block",
                            "range": [
                                946,
                                959
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        946,
                                        948
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        949,
                                        959
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                951,
                                                958
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_not_block_webhook_config",
                            "range": [
                                961,
                                970
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        961,
                                        963
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        964,
                                        970
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                968,
                                                969
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "provider",
                            "range": [
                                972,
                                979
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_provider_not_in_WEBHOOK_MANAGERS_BY_NAME",
                            "range": [
                                980,
                                997
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        980,
                                        983
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        984,
                                        997
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                987,
                                                996
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "webhooks_manager",
                            "range": [
                                999,
                                1007
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_node_webhook_id",
                            "range": [
                                1009,
                                1043
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        1009,
                                        1013
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        1014,
                                        1043
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "logger.debug",
                                            "range": [
                                                1015,
                                                1021
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_not_node_webhook",
                                            "range": [
                                                1023,
                                                1042
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "condition",
                                                    "range": [
                                                        1023,
                                                        1028
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "then",
                                                    "range": [
                                                        1029,
                                                        1042
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "logger.error",
                                                            "range": [
                                                                1030,
                                                                1036
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        },
                                                        {
                                                            "type": "RaiseStatement",
                                                            "name": "raise",
                                                            "range": [
                                                                1038,
                                                                1041
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Comment",
                            "name": "Detach webhook from node",
                            "range": [
                                1045,
                                1050
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.debug",
                            "range": [
                                1051,
                                1057
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "updated_node",
                            "range": [
                                1059,
                                1070
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Comment",
                            "name": "Prune and deregister the webhook if it is no longer used anywhere",
                            "range": [
                                1072,
                                1085
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "webhook",
                            "range": [
                                1086,
                                1091
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.debug",
                            "range": [
                                1092,
                                1103
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "AwaitExpression",
                            "name": "await",
                            "range": [
                                1105,
                                1116
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_CREDENTIALS_FIELD_NAME_in_block_input_schema_model_fields_and_not_credentials",
                            "range": [
                                1117,
                                1150
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        1117,
                                        1132
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        1133,
                                        1150
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "logger.warning",
                                            "range": [
                                                1135,
                                                1149
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                1151,
                                1152
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.debug",
                            "range": [
                                1155,
                                1161
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                1163,
                                1164
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": "\nreturn node\n"
        }
    ],
    "content": "\n\nasync def on_graph_activate(\ngraph:\"GraphModel\",get_credentials:Callable[[str],\"Credentials | None\"]\n):\n\"\"\" \\n     Hook to be called when a graph is activated/created. \\n  \\n     ⚠️ Assuming node entities are not re-used between graph versions, ⚠️ \\n     this hook calls `on_node_activate` on all nodes in this graph. \\n  \\n     Params: \\n         get_credentials: `credentials_id` -> Credentials \\n     \"\"\"\n#Compare nodes in new_graph_version with previous_graph_version\nupdated_nodes=[]\nfor new_node in graph.nodes:\nnode_credentials=None\nif creds_meta:=new_node.input_default.get(CREDENTIALS_FIELD_NAME):\nnode_credentials=get_credentials(creds_meta[\"id\"])\nif not node_credentials:\nraise ValueError(\nf \"Node #{new_node.id} updated with non-existent \"\nf \"credentials #{node_credentials}\"\n)\n\nupdated_node=await on_node_activate(\ngraph.user_id,new_node,credentials=node_credentials\n)\nupdated_nodes.append(updated_node)\n\ngraph.nodes=updated_nodes\nreturn graph\n\n\nasync def on_graph_deactivate(\ngraph:\"GraphModel\",get_credentials:Callable[[str],\"Credentials | None\"]\n):\n\"\"\" \\n     Hook to be called when a graph is deactivated/deleted. \\n  \\n     ⚠️ Assuming node entities are not re-used between graph versions, ⚠️ \\n     this hook calls `on_node_deactivate` on all nodes in `graph`. \\n  \\n     Params: \\n         get_credentials: `credentials_id` -> Credentials \\n     \"\"\"\nupdated_nodes=[]\nfor node in graph.nodes:\nnode_credentials=None\nif creds_meta:=node.input_default.get(CREDENTIALS_FIELD_NAME):\nnode_credentials=get_credentials(creds_meta[\"id\"])\nif not node_credentials:\nlogger.error(\nf \"Node #{node.id} referenced non-existent \"\nf \"credentials #{creds_meta['id']}\"\n)\n\nupdated_node=await on_node_deactivate(node,credentials=node_credentials)\nupdated_nodes.append(updated_node)\n\ngraph.nodes=updated_nodes\nreturn graph\n\n\nasync def on_node_activate(\nuser_id:str,\nnode:\"NodeModel\",\n*,\ncredentials:Optional[\"Credentials\"]=None,\n)->\"NodeModel\":\n\"\"\"Hook to be called when the node is activated/created\"\"\"\n\nblock=get_block(node.block_id)\nif not block:\nraise ValueError(\nf \"Node #{node.id} is instance of unknown block #{node.block_id}\"\n)\n\nif not block.webhook_config:\nreturn node\n\nprovider=block.webhook_config.provider\nif provider not in WEBHOOK_MANAGERS_BY_NAME:\nraise ValueError(\nf \"Block #{block.id} has webhook_config for provider {provider} \"\n\"which does not support webhooks\"\n)\n\nlogger.debug(\nf \"Activating webhook node #{node.id} with config {block.webhook_config}\"\n)\n\nwebhooks_manager=WEBHOOK_MANAGERS_BY_NAME[provider]()\n\nif auto_setup_webhook:=isinstance(block.webhook_config,BlockWebhookConfig):\ntry:\nresource=block.webhook_config.resource_format.format(**node.input_default)\nexcept KeyError:\nresource=None\nlogger.debug(\nf \"Constructed resource string {resource} from input {node.input_default}\"\n)\nelse:\nresource=\"\"#not relevant for manual webhooks\n\nneeds_credentials=CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\ncredentials_meta=(\nnode.input_default.get(CREDENTIALS_FIELD_NAME)if needs_credentials else None\n)\nevent_filter_input_name=block.webhook_config.event_filter_input\nhas_everything_for_webhook=(\nresource is not None\nand(credentials_meta or not needs_credentials)\nand(\nnot event_filter_input_name\nor(\nevent_filter_input_name in node.input_default\nand any(\nis_on\nfor is_on in node.input_default[event_filter_input_name].values()\n)\n)\n)\n)\n\nif has_everything_for_webhook and resource is not None:\nlogger.debug(f \"Node #{node} has everything for a webhook!\")\nif credentials_meta and not credentials:\nraise ValueError(\nf \"Cannot set up webhook for node #{node.id}: \"\nf \"credentials #{credentials_meta['id']} not available\"\n)\n\nif event_filter_input_name:\n#Shape of the event filter is enforced in Block.__init__\nevent_filter=cast(dict,node.input_default[event_filter_input_name])\nevents=[\nblock.webhook_config.event_format.format(event=event)\nfor event,enabled in event_filter.items()\nif enabled is True\n]\nlogger.debug(f \"Webhook events to subscribe to: {', '.join(events)}\")\nelse:\nevents=[]\n\n#Find/make and attach a suitable webhook to the node\nif auto_setup_webhook:\nassert credentials is not None\nnew_webhook=await webhooks_manager.get_suitable_auto_webhook(\nuser_id,\ncredentials,\nblock.webhook_config.webhook_type,\nresource,\nevents,\n)\nelse:\n#Manual webhook->no credentials->don 't register but do create \\n             new_webhook = await webhooks_manager.get_manual_webhook( \\n                 user_id, \\n                 node.graph_id, \\n                 block.webhook_config.webhook_type, \\n                 events, \\n             ) \\n         logger.debug(f\"Acquired webhook: {new_webhook}\") \\n         return await set_node_webhook(node.id, new_webhook.id) \\n     else: \\n         logger.debug(f\"Node #{node.id} does not have everything for a webhook\") \\n  \\n     return node \\n  \\n  \\n async def on_node_deactivate( \\n     node: \"NodeModel\", \\n     *, \\n     credentials: Optional[\"Credentials\"] = None, \\n     webhooks_manager: Optional[\"BaseWebhooksManager\"] = None, \\n ) -> \"NodeModel\": \\n     \"\"\"Hook to be called when node is deactivated/deleted\"\"\" \\n  \\n     logger.debug(f\"Deactivating node #{node.id}\") \\n     block = get_block(node.block_id) \\n     if not block: \\n         raise ValueError( \\n             f\"Node #{node.id} is instance of unknown block #{node.block_id}\" \\n         ) \\n  \\n     if not block.webhook_config: \\n         return node \\n  \\n     provider = block.webhook_config.provider \\n     if provider not in WEBHOOK_MANAGERS_BY_NAME: \\n         raise ValueError( \\n             f\"Block #{block.id} has webhook_config for provider {provider} \" \\n             \"which does not support webhooks\" \\n         ) \\n  \\n     webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]() \\n  \\n     if node.webhook_id: \\n         logger.debug(f\"Node #{node.id} has webhook_id {node.webhook_id}\") \\n         if not node.webhook: \\n             logger.error(f\"Node #{node.id} has webhook_id but no webhook object\") \\n             raise ValueError(\"node.webhook not included\") \\n  \\n         # Detach webhook from node \\n         logger.debug(f\"Detaching webhook from node #{node.id}\") \\n         updated_node = await set_node_webhook(node.id, None) \\n  \\n         # Prune and deregister the webhook if it is no longer used anywhere \\n         webhook = node.webhook \\n         logger.debug( \\n             f\"Pruning{' and deregistering ' if credentials else ''}\" \\n             f\" webhook#{webhook.id}\" \\n         ) \\n         await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials) \\n         if ( \\n             CREDENTIALS_FIELD_NAME in block.input_schema.model_fields \\n             and not credentials \\n         ): \\n             logger.warning( \\n                 f\" Cannot deregister webhook#{webhook.id}:credentials \" \\n                 f\"#{webhook.credentials_id}not available \" \\n                 f\"({webhook.provider.value}webhook ID:{webhook.provider_webhook_id})\" \\n             ) \\n         return updated_node \\n  \\n     logger.debug(f\" Node#{node.id}has no webhook_id,returning\")\nreturn node\n"
}