{
    "type": "Program",
    "name": "Global",
    "range": [
        18,
        208
    ],
    "children": [
        {
            "type": "ClassDecl",
            "name": "TextFormatter",
            "range": [
                18,
                97
            ],
            "children": [
                {
                    "type": "MethodDecl",
                    "name": "__init__",
                    "range": [
                        22,
                        97
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "name": "# Create a sandboxed environment",
                            "range": [
                                29,
                                34
                            ],
                            "children": [],
                            "content": "#Create a sandboxed environment\n"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)",
                            "range": [
                                35,
                                50
                            ],
                            "children": [],
                            "content": "self.env=SandboxedEnvironment(loader=BaseLoader(),autoescape=True)"
                        },
                        {
                            "type": "Comment",
                            "name": "# Clear any registered filters, tests, and globals to minimize attack surface",
                            "range": [
                                53,
                                67
                            ],
                            "children": [],
                            "content": "#Clear any registered filters,tests,and globals to minimize attack surface\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "self.env.filters.clear()",
                            "range": [
                                68,
                                76
                            ],
                            "children": [],
                            "content": "self.env.filters.clear()"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "self.env.tests.clear()",
                            "range": [
                                77,
                                85
                            ],
                            "children": [],
                            "content": "\nself.env.tests.clear("
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "self.env.globals.clear()",
                            "range": [
                                86,
                                94
                            ],
                            "children": [],
                            "content": ")\nself.env.globals.clear"
                        }
                    ],
                    "content": "def __init__(self):\n#Create a sandboxed environment\nself.env=SandboxedEnvironment(loader=BaseLoader(),autoescape=True)\n\n#Clear any registered filters,tests,and globals to minimize attack surface\nself.env.filters.clear()\nself.env.tests.clear()\nself.env.globals.clear()\n"
                }
            ],
            "content": "class TextFormatter:\ndef __init__(self):\n#Create a sandboxed environment\nself.env=SandboxedEnvironment(loader=BaseLoader(),autoescape=True)\n\n#Clear any registered filters,tests,and globals to minimize attack surface\nself.env.filters.clear()\nself.env.tests.clear()\nself.env.globals.clear()\n"
        },
        {
            "type": "FunctionDecl",
            "name": "format_string",
            "range": [
                99,
                207
            ],
            "children": [
                {
                    "type": "Comment",
                    "name": "# For python.format compatibility: replace all {...} with {{...}}.",
                    "range": [
                        121,
                        143
                    ],
                    "children": [],
                    "content": "#For python.format compatibility:replace all{...}with{{..}}.\n"
                },
                {
                    "type": "Comment",
                    "name": "# But avoid replacing {{...}} to {{{...}}}.",
                    "range": [
                        144,
                        166
                    ],
                    "children": [],
                    "content": "#But avoid replacing{{...}}to{{{...}}}.\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)",
                    "range": [
                        167,
                        180
                    ],
                    "children": [],
                    "content": "template_str=re.sub(r \"(?<!{){[ a-zA-Z0-9_]+}\",r \"{\\g<0>}\",template_str)"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "template = self.env.from_string(template_str)",
                    "range": [
                        182,
                        191
                    ],
                    "children": [],
                    "content": "template=self.env.from_string(template_str)"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return template.render(values or {}, **kwargs)",
                    "range": [
                        193,
                        206
                    ],
                    "children": [],
                    "content": "return template.render(values or{},**kwargs)"
                }
            ],
            "content": "def format_string(self,template_str:str,values=None,**kwargs)->str:\n#For python.format compatibility:replace all{...}with{{..}}.\n#But avoid replacing{{...}}to{{{...}}}.\ntemplate_str=re.sub(r \"(?<!{){[ a-zA-Z0-9_]+}\",r \"{\\g<0>}\",template_str)\ntemplate=self.env.from_string(template_str)\nreturn template.render(values or{},**kwargs)\n"
        }
    ],
    "content": "class TextFormatter:\ndef __init__(self):\n#Create a sandboxed environment\nself.env=SandboxedEnvironment(loader=BaseLoader(),autoescape=True)\n\n#Clear any registered filters,tests,and globals to minimize attack surface\nself.env.filters.clear()\nself.env.tests.clear()\nself.env.globals.clear()\n\ndef format_string(self,template_str:str,values=None,**kwargs)->str:\n#For python.format compatibility:replace all{...}with{{..}}.\n#But avoid replacing{{...}}to{{{...}}}.\ntemplate_str=re.sub(r \"(?<!{){[ a-zA-Z0-9_]+}\",r \"{\\g<0>}\",template_str)\ntemplate=self.env.from_string(template_str)\nreturn template.render(values or{},**kwargs)\n"
}