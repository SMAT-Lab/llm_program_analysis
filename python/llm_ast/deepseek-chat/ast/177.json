{
    "type": "Program",
    "name": "Global",
    "range": [
        24,
        345
    ],
    "children": [
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                24,
                27
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "TYPE_CHECKING",
                    "range": [
                        25,
                        25
                    ],
                    "children": [],
                    "content": "TYPE_CHECKING"
                }
            ],
            "content": "if TYPE_CHECKING:\n"
        },
        {
            "type": "ImportStatement",
            "name": "",
            "range": [
                28,
                32
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "redis",
                    "range": [
                        28,
                        29
                    ],
                    "children": [
                        {
                            "type": "Import",
                            "name": "Redis",
                            "range": [
                                30,
                                31
                            ],
                            "children": [],
                            "content": "import Redis"
                        }
                    ],
                    "content": "from redis"
                }
            ],
            "content": "from redis import Redis\n"
        },
        {
            "type": "ImportStatement",
            "name": "",
            "range": [
                33,
                41
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "redis.lock",
                    "range": [
                        33,
                        36
                    ],
                    "children": [
                        {
                            "type": "Import",
                            "name": "Lock",
                            "range": [
                                37,
                                38
                            ],
                            "children": [],
                            "content": "import Lock"
                        },
                        {
                            "type": "AsAlias",
                            "name": "RedisLock",
                            "range": [
                                39,
                                40
                            ],
                            "children": [],
                            "content": "as RedisLock"
                        }
                    ],
                    "content": "from redis.lock"
                }
            ],
            "content": "from redis.lock import Lock as RedisLock\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                52,
                116
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        55,
                        55
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "redis",
                    "range": [
                        57,
                        57
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "timeout",
                    "range": [
                        61,
                        61
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "AssignmentExpression",
                    "name": "self.redis",
                    "range": [
                        71,
                        75
                    ],
                    "children": [],
                    "content": "\nself.redis="
                },
                {
                    "type": "AssignmentExpression",
                    "name": "self.timeout",
                    "range": [
                        77,
                        81
                    ],
                    "children": [],
                    "content": "\nself.timeout="
                },
                {
                    "type": "AssignmentExpression",
                    "name": "self.locks",
                    "range": [
                        83,
                        94
                    ],
                    "children": [],
                    "content": "\nself.locks:dict[Any,\"RedisLock\"]="
                },
                {
                    "type": "AssignmentExpression",
                    "name": "self.locks_lock",
                    "range": [
                        109,
                        113
                    ],
                    "children": [],
                    "content": "\nself.locks_lock="
                }
            ],
            "content": "\ndef __init__(self,redis:\"Redis\",timeout:int|None=60):\nself.redis=redis\nself.timeout=timeout\nself.locks:dict[Any,\"RedisLock\"]=ExpiringDict(\nmax_len=6000,max_age_seconds=self.timeout\n)\nself.locks_lock=Lock()"
        },
        {
            "type": "FunctionDecl",
            "name": "locked",
            "range": [
                121,
                162
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        124,
                        124
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "key",
                    "range": [
                        126,
                        126
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "AssignmentExpression",
                    "name": "lock",
                    "range": [
                        132,
                        134
                    ],
                    "children": [],
                    "content": "\nlock="
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        141,
                        162
                    ],
                    "children": [
                        {
                            "type": "YieldExpression",
                            "name": "yield",
                            "range": [
                                144,
                                144
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                149,
                                162
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "lock.locked",
                                    "range": [
                                        150,
                                        154
                                    ],
                                    "children": [],
                                    "content": "if lock.locked("
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "lock.release",
                                    "range": [
                                        157,
                                        161
                                    ],
                                    "children": [],
                                    "content": "\nlock.release("
                                }
                            ],
                            "content": "\nif lock.locked():\nlock.release()"
                        }
                    ],
                    "content": "\ntry:\nyield\nfinally:\nif lock.locked():\nlock.release()"
                }
            ],
            "content": "\ndef locked(self,key:Any):\nlock=self.acquire(key)\ntry:\nyield\nfinally:\nif lock.locked():\nlock.release()"
        },
        {
            "type": "FunctionDecl",
            "name": "acquire",
            "range": [
                164,
                243
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        167,
                        167
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "key",
                    "range": [
                        169,
                        169
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "WithStatement",
                    "name": "with",
                    "range": [
                        182,
                        243
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "self.locks_lock",
                            "range": [
                                183,
                                185
                            ],
                            "children": [],
                            "content": "with self."
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                188,
                                243
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "key not in self.locks",
                                    "range": [
                                        189,
                                        195
                                    ],
                                    "children": [],
                                    "content": "if key not in self.locks"
                                },
                                {
                                    "type": "AssignmentExpression",
                                    "name": "self.locks[key]",
                                    "range": [
                                        197,
                                        204
                                    ],
                                    "children": [],
                                    "content": "\nself.locks[key]="
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "self.redis.lock",
                                    "range": [
                                        206,
                                        224
                                    ],
                                    "children": [],
                                    "content": ".redis.lock(\nstr(key),self.timeout,thread_local=False\n"
                                },
                                {
                                    "type": "AssignmentExpression",
                                    "name": "lock",
                                    "range": [
                                        226,
                                        228
                                    ],
                                    "children": [],
                                    "content": "\nlock="
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "lock.acquire",
                                    "range": [
                                        235,
                                        239
                                    ],
                                    "children": [],
                                    "content": "\nlock.acquire("
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return lock",
                                    "range": [
                                        241,
                                        242
                                    ],
                                    "children": [],
                                    "content": "\nreturn"
                                }
                            ],
                            "content": "\nif key not in self.locks:\nself.locks[key]=self.redis.lock(\nstr(key),self.timeout,thread_local=False\n)\nlock=self.locks[key]\nlock.acquire()\nreturn lock"
                        }
                    ],
                    "content": "\nwith self.locks_lock:\nif key not in self.locks:\nself.locks[key]=self.redis.lock(\nstr(key),self.timeout,thread_local=False\n)\nlock=self.locks[key]\nlock.acquire()\nreturn lock"
                }
            ],
            "content": "\ndef acquire(self,key:Any)->\"RedisLock\":\n\"\"\"Acquires and returns a lock with the given key\"\"\"\nwith self.locks_lock:\nif key not in self.locks:\nself.locks[key]=self.redis.lock(\nstr(key),self.timeout,thread_local=False\n)\nlock=self.locks[key]\nlock.acquire()\nreturn lock"
        },
        {
            "type": "FunctionDecl",
            "name": "release",
            "range": [
                245,
                289
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        248,
                        248
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "key",
                    "range": [
                        250,
                        250
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        256,
                        289
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "lock := self.locks.get(key)",
                            "range": [
                                258,
                                269
                            ],
                            "children": [],
                            "content": "(lock:=self.locks.get(key)"
                        },
                        {
                            "type": "LogicalExpression",
                            "name": "and",
                            "range": [
                                270,
                                282
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "lock.locked",
                                    "range": [
                                        271,
                                        275
                                    ],
                                    "children": [],
                                    "content": "and lock.locked("
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "lock.owned",
                                    "range": [
                                        277,
                                        281
                                    ],
                                    "children": [],
                                    "content": "and lock.owned("
                                }
                            ],
                            "content": ")and lock.locked()and lock.owned()"
                        },
                        {
                            "type": "CallExpression",
                            "name": "lock.release",
                            "range": [
                                284,
                                288
                            ],
                            "children": [],
                            "content": "\nlock.release("
                        }
                    ],
                    "content": "\nif(lock:=self.locks.get(key))and lock.locked()and lock.owned():\nlock.release()"
                }
            ],
            "content": "\ndef release(self,key:Any):\nif(lock:=self.locks.get(key))and lock.locked()and lock.owned():\nlock.release()"
        },
        {
            "type": "FunctionDecl",
            "name": "release_all_locks",
            "range": [
                291,
                344
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        294,
                        294
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "CallExpression",
                    "name": "self.locks_lock.acquire",
                    "range": [
                        302,
                        311
                    ],
                    "children": [],
                    "content": "\nself.locks_lock.acquire(blocking=False"
                },
                {
                    "type": "ForStatement",
                    "name": "for",
                    "range": [
                        313,
                        344
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "lock",
                            "range": [
                                314,
                                314
                            ],
                            "children": [],
                            "content": "for"
                        },
                        {
                            "type": "BinaryExpression",
                            "name": "lock in self.locks.values()",
                            "range": [
                                315,
                                323
                            ],
                            "children": [],
                            "content": "lock in self.locks.values()"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                325,
                                344
                            ],
                            "children": [
                                {
                                    "type": "LogicalExpression",
                                    "name": "and",
                                    "range": [
                                        331,
                                        337
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "lock.locked",
                                            "range": [
                                                326,
                                                330
                                            ],
                                            "children": [],
                                            "content": "if lock.locked("
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "lock.owned",
                                            "range": [
                                                332,
                                                336
                                            ],
                                            "children": [],
                                            "content": "and lock.owned("
                                        }
                                    ],
                                    "content": ")and lock.owned()"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "lock.release",
                                    "range": [
                                        339,
                                        343
                                    ],
                                    "children": [],
                                    "content": "\nlock.release("
                                }
                            ],
                            "content": "\nif lock.locked()and lock.owned():\nlock.release()"
                        }
                    ],
                    "content": "\nfor lock in self.locks.values():\nif lock.locked()and lock.owned():\nlock.release()"
                }
            ],
            "content": "\ndef release_all_locks(self):\n\"\"\"Call this on process termination to ensure all locks are released\"\"\"\nself.locks_lock.acquire(blocking=False)\nfor lock in self.locks.values():\nif lock.locked()and lock.owned():\nlock.release()"
        }
    ],
    "content": "if TYPE_CHECKING:\nfrom redis import Redis\nfrom redis.lock import Lock as RedisLock\n\n\nclass RedisKeyedMutex:\n\"\"\" \\n     This class provides a mutex that can be locked and unlocked by a specific key, \\n     using Redis as a distributed locking provider. \\n     It uses an ExpiringDict to automatically clear the mutex after a specified timeout, \\n     in case the key is not unlocked for a specified duration, to prevent memory leaks. \\n     \"\"\"\n\ndef __init__(self,redis:\"Redis\",timeout:int|None=60):\nself.redis=redis\nself.timeout=timeout\nself.locks:dict[Any,\"RedisLock\"]=ExpiringDict(\nmax_len=6000,max_age_seconds=self.timeout\n)\nself.locks_lock=Lock()\n\n@contextmanager\ndef locked(self,key:Any):\nlock=self.acquire(key)\ntry:\nyield\nfinally:\nif lock.locked():\nlock.release()\n\ndef acquire(self,key:Any)->\"RedisLock\":\n\"\"\"Acquires and returns a lock with the given key\"\"\"\nwith self.locks_lock:\nif key not in self.locks:\nself.locks[key]=self.redis.lock(\nstr(key),self.timeout,thread_local=False\n)\nlock=self.locks[key]\nlock.acquire()\nreturn lock\n\ndef release(self,key:Any):\nif(lock:=self.locks.get(key))and lock.locked()and lock.owned():\nlock.release()\n\ndef release_all_locks(self):\n\"\"\"Call this on process termination to ensure all locks are released\"\"\"\nself.locks_lock.acquire(blocking=False)\nfor lock in self.locks.values():\nif lock.locked()and lock.owned():\nlock.release()\n"
}