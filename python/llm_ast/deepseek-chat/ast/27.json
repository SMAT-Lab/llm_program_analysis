{
    "type": "Program",
    "name": "Global",
    "range": [
        64,
        1000
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "mock_websocket",
            "range": [
                64,
                80
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.fixture",
                    "range": [
                        59,
                        63
                    ],
                    "children": [],
                    "content": "\n\n@pytest."
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        73,
                        80
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "AsyncMock",
                            "range": [
                                74,
                                79
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "spec",
                                    "range": [
                                        76,
                                        78
                                    ],
                                    "children": [],
                                    "content": "AsyncMock(spec"
                                }
                            ],
                            "content": "\nreturn AsyncMock(spec="
                        }
                    ],
                    "content": ":\nreturn AsyncMock(spec=WebSocket"
                }
            ],
            "content": "fixture\ndef mock_websocket()->AsyncMock:\nreturn AsyncMock(spec=WebSocket"
        },
        {
            "type": "FunctionDecl",
            "name": "mock_manager",
            "range": [
                86,
                102
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "mock_manager",
                    "range": [
                        86,
                        93
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                86,
                                89
                            ],
                            "content": "pytest.fixture\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "mock_manager",
                            "range": [
                                87,
                                99
                            ],
                            "content": ".fixture\ndef mock_manager()->AsyncMock:\nreturn"
                        },
                        {
                            "type": "ReturnType",
                            "name": "AsyncMock",
                            "range": [
                                90,
                                93
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "->",
                                    "range": [
                                        90,
                                        92
                                    ],
                                    "content": "def mock_manager("
                                },
                                {
                                    "type": "Identifier",
                                    "name": "AsyncMock",
                                    "range": [
                                        92,
                                        101
                                    ],
                                    "content": "()->AsyncMock:\nreturn AsyncMock("
                                }
                            ],
                            "content": "def mock_manager()"
                        }
                    ],
                    "content": "pytest.fixture\ndef mock_manager()"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        94,
                        102
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                95,
                                102
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "return",
                                    "range": [
                                        95,
                                        101
                                    ],
                                    "content": ">AsyncMock:\nreturn AsyncMock("
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "AsyncMock",
                                    "range": [
                                        96,
                                        101
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "AsyncMock",
                                            "range": [
                                                96,
                                                104
                                            ],
                                            "content": "AsyncMock:\nreturn AsyncMock(spec=ConnectionManager"
                                        },
                                        {
                                            "type": "Arguments",
                                            "name": "",
                                            "range": [
                                                97,
                                                101
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "spec",
                                                    "range": [
                                                        98,
                                                        101
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "spec",
                                                            "range": [
                                                                98,
                                                                101
                                                            ],
                                                            "content": "\nreturn AsyncMock("
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "ConnectionManager",
                                                            "range": [
                                                                100,
                                                                117
                                                            ],
                                                            "content": "AsyncMock(spec=ConnectionManager)\n\n\n@pytest.mark.asyncio\nasync def"
                                                        }
                                                    ],
                                                    "content": "\nreturn AsyncMock("
                                                }
                                            ],
                                            "content": ":\nreturn AsyncMock("
                                        }
                                    ],
                                    "content": "AsyncMock:\nreturn AsyncMock("
                                }
                            ],
                            "content": ">AsyncMock:\nreturn AsyncMock(spec"
                        }
                    ],
                    "content": "->AsyncMock:\nreturn AsyncMock(spec"
                }
            ],
            "content": "pytest.fixture\ndef mock_manager()->AsyncMock:\nreturn AsyncMock(spec"
        },
        {
            "type": "Decorator",
            "name": "@pytest.mark.asyncio",
            "range": [
                103,
                109
            ],
            "children": [],
            "content": "=ConnectionManager)\n\n\n@"
        },
        {
            "type": "FunctionDecl",
            "name": "test_websocket_router_subscribe",
            "range": [
                110,
                257
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        110,
                        115
                    ],
                    "children": [],
                    "content": "pytest.mark.asyncio\n"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        111,
                        114
                    ],
                    "children": [],
                    "content": ".mark.asyncio"
                },
                {
                    "type": "Identifier",
                    "name": "test_websocket_router_subscribe",
                    "range": [
                        112,
                        145
                    ],
                    "children": [],
                    "content": "mark.asyncio\nasync def test_websocket_router_subscribe(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(\n"
                },
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        113,
                        123
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "mock_websocket",
                            "range": [
                                115,
                                121
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "AsyncMock",
                                    "range": [
                                        117,
                                        126
                                    ],
                                    "children": [],
                                    "content": "def test_websocket_router_subscribe(\nmock_websocket:AsyncMock,mock_manager:"
                                }
                            ],
                            "content": "\nasync def test_websocket_router_subscribe(\nmock_websocket"
                        },
                        {
                            "type": "Parameter",
                            "name": "mock_manager",
                            "range": [
                                119,
                                125
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "AsyncMock",
                                    "range": [
                                        121,
                                        130
                                    ],
                                    "children": [],
                                    "content": "mock_websocket:AsyncMock,mock_manager:AsyncMock\n)-"
                                }
                            ],
                            "content": "(\nmock_websocket:AsyncMock,mock_manager"
                        }
                    ],
                    "content": ".asyncio\nasync def test_websocket_router_subscribe(\nmock_websocket:AsyncMock"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        124,
                        130
                    ],
                    "children": [],
                    "content": ",mock_manager:AsyncMock\n)-"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        128,
                        257
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_websocket.receive_text.side_effect",
                            "range": [
                                129,
                                166
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "[WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\":\"test_graph\"}).model_dump_json(), WebSocketDisconnect()]",
                                    "range": [
                                        135,
                                        166
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\":\"test_graph\"}).model_dump_json()",
                                            "range": [
                                                137,
                                                159
                                            ],
                                            "children": [],
                                            "content": "receive_text.side_effect=[\nWsMessage(\nmethod=Methods.SUBSCRIBE,data={\"graph_id\":\"test_graph\"}\n"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "WebSocketDisconnect()",
                                            "range": [
                                                161,
                                                164
                                            ],
                                            "children": [],
                                            "content": ".model_dump_json()"
                                        }
                                    ],
                                    "content": "mock_websocket.receive_text.side_effect=[\nWsMessage(\nmethod=Methods.SUBSCRIBE,data={\"graph_id\":\"test_graph\"}\n).model_dump_json(),\n"
                                }
                            ],
                            "content": ")->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(\nmethod=Methods.SUBSCRIBE,data={\"graph_id\":\"test_graph\"}\n).model_dump_json(),\n"
                        },
                        {
                            "type": "AwaitExpression",
                            "name": "await websocket_router(cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager))",
                            "range": [
                                169,
                                187
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "websocket_router(cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager))",
                                    "range": [
                                        170,
                                        187
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "websocket_router",
                                            "range": [
                                                170,
                                                185
                                            ],
                                            "children": [],
                                            "content": ",\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),"
                                        },
                                        {
                                            "type": "Arguments",
                                            "name": "arguments",
                                            "range": [
                                                171,
                                                187
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "cast(WebSocket, mock_websocket)",
                                                    "range": [
                                                        173,
                                                        178
                                                    ],
                                                    "children": [],
                                                    "content": "\n\nawait websocket_router(\n"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "cast(ConnectionManager, mock_manager)",
                                                    "range": [
                                                        180,
                                                        185
                                                    ],
                                                    "children": [],
                                                    "content": "(WebSocket,mock_websocket),"
                                                }
                                            ],
                                            "content": "\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast("
                                        }
                                    ],
                                    "content": ",\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast("
                                }
                            ],
                            "content": "),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast("
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_manager.connect.assert_called_once_with(mock_websocket)",
                            "range": [
                                190,
                                197
                            ],
                            "children": [],
                            "content": "mock_manager)\n)\n\nmock_manager."
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)",
                            "range": [
                                199,
                                208
                            ],
                            "children": [],
                            "content": ".assert_called_once_with(mock_websocket)\nmock_manager.subscribe."
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_websocket.send_text.assert_called_once()",
                            "range": [
                                210,
                                216
                            ],
                            "children": [],
                            "content": "(\"test_graph\",mock_websocket)\nmock_websocket"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]",
                            "range": [
                                218,
                                232
                            ],
                            "children": [],
                            "content": "send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args["
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                            "range": [
                                233,
                                247
                            ],
                            "children": [],
                            "content": "0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args["
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_manager.disconnect.assert_called_once_with(mock_websocket)",
                            "range": [
                                248,
                                255
                            ],
                            "children": [],
                            "content": "0][0]\nmock_manager."
                        }
                    ],
                    "content": "\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(\nmethod=Methods.SUBSCRIBE,data={\"graph_id\":\"test_graph\"}\n).model_dump_json(),\nWebSocketDisconnect(),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager)\n)\n\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_manager.subscribe.assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\nmock_manager.disconnect."
                }
            ],
            "content": "pytest.mark.asyncio\nasync def test_websocket_router_subscribe(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(\nmethod=Methods.SUBSCRIBE,data={\"graph_id\":\"test_graph\"}\n).model_dump_json(),\nWebSocketDisconnect(),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager)\n)\n\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_manager.subscribe.assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\nmock_manager.disconnect."
        },
        {
            "type": "Decorator",
            "name": "@pytest.mark.asyncio",
            "range": [
                258,
                264
            ],
            "children": [],
            "content": "assert_called_once_with(mock_websocket)\n\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_websocket_router_unsubscribe",
            "range": [
                265,
                412
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "test_websocket_router_unsubscribe",
                    "range": [
                        265,
                        282
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                265,
                                270
                            ],
                            "children": [],
                            "content": "@pytest.mark.asyncio"
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                266,
                                269
                            ],
                            "children": [],
                            "content": "pytest.mark."
                        },
                        {
                            "type": "Identifier",
                            "name": "test_websocket_router_unsubscribe",
                            "range": [
                                267,
                                300
                            ],
                            "children": [],
                            "content": ".mark.asyncio\nasync def test_websocket_router_unsubscribe(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage("
                        },
                        {
                            "type": "ParameterList",
                            "name": "",
                            "range": [
                                268,
                                278
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "mock_websocket",
                                    "range": [
                                        270,
                                        276
                                    ],
                                    "children": [],
                                    "content": "asyncio\nasync def test_websocket_router_unsubscribe(\n"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "mock_manager",
                                    "range": [
                                        274,
                                        276
                                    ],
                                    "children": [],
                                    "content": "test_websocket_router_unsubscribe(\n"
                                }
                            ],
                            "content": "mark.asyncio\nasync def test_websocket_router_unsubscribe(\nmock_websocket:"
                        },
                        {
                            "type": "ReturnType",
                            "name": "None",
                            "range": [
                                279,
                                281
                            ],
                            "children": [],
                            "content": "AsyncMock,mock_manager"
                        }
                    ],
                    "content": "@pytest.mark.asyncio\nasync def test_websocket_router_unsubscribe(\nmock_websocket:AsyncMock,mock_manager:"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        283,
                        412
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                284,
                                322
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "",
                                    "range": [
                                        284,
                                        321
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "mock_websocket.receive_text.side_effect",
                                            "range": [
                                                284,
                                                289
                                            ],
                                            "children": [],
                                            "content": "\n)->None:"
                                        },
                                        {
                                            "type": "ArrayExpression",
                                            "name": "",
                                            "range": [
                                                290,
                                                321
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "WsMessage.model_dump_json",
                                                    "range": [
                                                        292,
                                                        314
                                                    ],
                                                    "children": [],
                                                    "content": ".receive_text.side_effect=[\nWsMessage(\nmethod=Methods.UNSUBSCRIBE,data={\"graph_id\":\"test_graph\"}"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "WebSocketDisconnect",
                                                    "range": [
                                                        316,
                                                        319
                                                    ],
                                                    "children": [],
                                                    "content": ").model_dump_json("
                                                }
                                            ],
                                            "content": "\nmock_websocket.receive_text.side_effect=[\nWsMessage(\nmethod=Methods.UNSUBSCRIBE,data={\"graph_id\":\"test_graph\"}\n).model_dump_json(),"
                                        }
                                    ],
                                    "content": "\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(\nmethod=Methods.UNSUBSCRIBE,data={\"graph_id\":\"test_graph\"}\n).model_dump_json(),"
                                }
                            ],
                            "content": "\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(\nmethod=Methods.UNSUBSCRIBE,data={\"graph_id\":\"test_graph\"}\n).model_dump_json(),\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                324,
                                343
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "",
                                    "range": [
                                        324,
                                        342
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "websocket_router",
                                            "range": [
                                                325,
                                                342
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "cast",
                                                    "range": [
                                                        328,
                                                        333
                                                    ],
                                                    "children": [],
                                                    "content": "]\n\nawait websocket_router("
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "cast",
                                                    "range": [
                                                        335,
                                                        340
                                                    ],
                                                    "children": [],
                                                    "content": "cast(WebSocket,mock_websocket)"
                                                }
                                            ],
                                            "content": "),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast"
                                        }
                                    ],
                                    "content": "(),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast"
                                }
                            ],
                            "content": "(),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast("
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                345,
                                353
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "mock_manager.connect.assert_called_once_with",
                                    "range": [
                                        345,
                                        352
                                    ],
                                    "children": [],
                                    "content": ",mock_manager)\n)\n\nmock_manager"
                                }
                            ],
                            "content": ",mock_manager)\n)\n\nmock_manager."
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                354,
                                364
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "mock_manager.unsubscribe.assert_called_once_with",
                                    "range": [
                                        354,
                                        363
                                    ],
                                    "children": [],
                                    "content": "connect.assert_called_once_with(mock_websocket)\nmock_manager.unsubscribe"
                                }
                            ],
                            "content": "connect.assert_called_once_with(mock_websocket)\nmock_manager.unsubscribe."
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                365,
                                372
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "mock_websocket.send_text.assert_called_once",
                                    "range": [
                                        365,
                                        371
                                    ],
                                    "children": [],
                                    "content": "assert_called_once_with(\"test_graph\",mock_websocket)\n"
                                }
                            ],
                            "content": "assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                373,
                                387
                            ],
                            "children": [
                                {
                                    "type": "AssertStatement",
                                    "name": "",
                                    "range": [
                                        373,
                                        387
                                    ],
                                    "children": [],
                                    "content": ".send_text.assert_called_once()\nassert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args"
                                }
                            ],
                            "content": ".send_text.assert_called_once()\nassert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                388,
                                402
                            ],
                            "children": [
                                {
                                    "type": "AssertStatement",
                                    "name": "",
                                    "range": [
                                        388,
                                        402
                                    ],
                                    "children": [],
                                    "content": "[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args"
                                }
                            ],
                            "content": "[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                403,
                                411
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "mock_manager.disconnect.assert_called_once_with",
                                    "range": [
                                        403,
                                        410
                                    ],
                                    "children": [],
                                    "content": "[0][0]\nmock_manager"
                                }
                            ],
                            "content": "[0][0]\nmock_manager."
                        }
                    ],
                    "content": "AsyncMock\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(\nmethod=Methods.UNSUBSCRIBE,data={\"graph_id\":\"test_graph\"}\n).model_dump_json(),\nWebSocketDisconnect(),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager)\n)\n\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_manager.unsubscribe.assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\nmock_manager.disconnect"
                }
            ],
            "content": "@pytest.mark.asyncio\nasync def test_websocket_router_unsubscribe(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(\nmethod=Methods.UNSUBSCRIBE,data={\"graph_id\":\"test_graph\"}\n).model_dump_json(),\nWebSocketDisconnect(),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager)\n)\n\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_manager.unsubscribe.assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\nmock_manager.disconnect"
        },
        {
            "type": "FunctionDecl",
            "name": "test_websocket_router_invalid_method",
            "range": [
                420,
                546
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.mark.asyncio",
                    "range": [
                        413,
                        419
                    ],
                    "children": [],
                    "content": ".assert_called_once_with(mock_websocket)\n\n"
                },
                {
                    "type": "FunctionSignature",
                    "name": "test_websocket_router_invalid_method",
                    "range": [
                        420,
                        437
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                420,
                                425
                            ],
                            "children": [],
                            "content": "\n@pytest.mark."
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                421,
                                424
                            ],
                            "children": [],
                            "content": "@pytest.mark"
                        },
                        {
                            "type": "Identifier",
                            "name": "test_websocket_router_invalid_method",
                            "range": [
                                422,
                                453
                            ],
                            "children": [],
                            "content": "pytest.mark.asyncio\nasync def test_websocket_router_invalid_method(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmock_websocket.receive_text.side_effect=["
                        },
                        {
                            "type": "ParameterList",
                            "name": "",
                            "range": [
                                423,
                                433
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "mock_websocket",
                                    "range": [
                                        425,
                                        431
                                    ],
                                    "children": [],
                                    "content": ".asyncio\nasync def test_websocket_router_invalid_method("
                                },
                                {
                                    "type": "Parameter",
                                    "name": "mock_manager",
                                    "range": [
                                        429,
                                        431
                                    ],
                                    "children": [],
                                    "content": "def test_websocket_router_invalid_method("
                                }
                            ],
                            "content": ".mark.asyncio\nasync def test_websocket_router_invalid_method(\nmock_websocket"
                        },
                        {
                            "type": "ReturnType",
                            "name": "None",
                            "range": [
                                434,
                                437
                            ],
                            "children": [],
                            "content": ":AsyncMock,mock_manager"
                        }
                    ],
                    "content": "\n@pytest.mark.asyncio\nasync def test_websocket_router_invalid_method(\nmock_websocket:AsyncMock,mock_manager"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        438,
                        546
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                439,
                                466
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "",
                                    "range": [
                                        439,
                                        466
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "mock_websocket.receive_text.side_effect",
                                            "range": [
                                                439,
                                                443
                                            ],
                                            "children": [],
                                            "content": "AsyncMock\n)->"
                                        },
                                        {
                                            "type": "ArrayExpression",
                                            "name": "",
                                            "range": [
                                                445,
                                                466
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "WsMessage",
                                                    "range": [
                                                        447,
                                                        459
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "",
                                                            "range": [
                                                                448,
                                                                454
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "AssignmentExpression",
                                                                    "name": "method=Methods.EXECUTION_EVENT",
                                                                    "range": [
                                                                        449,
                                                                        453
                                                                    ],
                                                                    "children": [],
                                                                    "content": "receive_text.side_effect=["
                                                                }
                                                            ],
                                                            "content": ".receive_text.side_effect=[\n"
                                                        },
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "model_dump_json",
                                                            "range": [
                                                                455,
                                                                458
                                                            ],
                                                            "children": [],
                                                            "content": "WsMessage(method="
                                                        }
                                                    ],
                                                    "content": "mock_websocket.receive_text.side_effect=[\nWsMessage(method=Methods"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "WebSocketDisconnect",
                                                    "range": [
                                                        461,
                                                        464
                                                    ],
                                                    "children": [],
                                                    "content": "EXECUTION_EVENT).model_dump_json"
                                                }
                                            ],
                                            "content": ":\nmock_websocket.receive_text.side_effect=[\nWsMessage(method=Methods.EXECUTION_EVENT).model_dump_json()"
                                        }
                                    ],
                                    "content": "AsyncMock\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(method=Methods.EXECUTION_EVENT).model_dump_json()"
                                }
                            ],
                            "content": "AsyncMock\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(method=Methods.EXECUTION_EVENT).model_dump_json()"
                        },
                        {
                            "type": "AwaitExpression",
                            "name": "",
                            "range": [
                                469,
                                488
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "websocket_router",
                                    "range": [
                                        470,
                                        487
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                471,
                                                486
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "cast",
                                                    "range": [
                                                        473,
                                                        478
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "",
                                                            "range": [
                                                                474,
                                                                477
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "WebSocket",
                                                                    "range": [
                                                                        475,
                                                                        483
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\n\nawait websocket_router(\ncast(WebSocket"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "mock_websocket",
                                                                    "range": [
                                                                        477,
                                                                        490
                                                                    ],
                                                                    "children": [],
                                                                    "content": "await websocket_router(\ncast(WebSocket,mock_websocket),cast(ConnectionManager"
                                                                }
                                                            ],
                                                            "content": "]\n\nawait"
                                                        }
                                                    ],
                                                    "content": "\n]\n\nawait websocket_router"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "cast",
                                                    "range": [
                                                        480,
                                                        485
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "",
                                                            "range": [
                                                                481,
                                                                484
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "ConnectionManager",
                                                                    "range": [
                                                                        482,
                                                                        499
                                                                    ],
                                                                    "children": [],
                                                                    "content": "(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager)\n)\n\nmock_manager."
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "mock_manager",
                                                                    "range": [
                                                                        484,
                                                                        496
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",mock_websocket),cast(ConnectionManager,mock_manager)\n)\n"
                                                                }
                                                            ],
                                                            "content": "cast(WebSocket,"
                                                        }
                                                    ],
                                                    "content": "\ncast(WebSocket,mock_websocket"
                                                }
                                            ],
                                            "content": "),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket)"
                                        }
                                    ],
                                    "content": "(),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),"
                                }
                            ],
                            "content": "WebSocketDisconnect(),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                490,
                                498
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "mock_manager.connect.assert_called_once_with",
                                    "range": [
                                        490,
                                        497
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                495,
                                                497
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "mock_websocket",
                                                    "range": [
                                                        496,
                                                        509
                                                    ],
                                                    "children": [],
                                                    "content": "\n\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_websocket.send_text"
                                                }
                                            ],
                                            "content": ")\n\n"
                                        }
                                    ],
                                    "content": "ConnectionManager,mock_manager)\n)\n\n"
                                }
                            ],
                            "content": "ConnectionManager,mock_manager)\n)\n\nmock_manager"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                499,
                                506
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "mock_websocket.send_text.assert_called_once",
                                    "range": [
                                        499,
                                        505
                                    ],
                                    "children": [],
                                    "content": ".connect.assert_called_once_with(mock_websocket)"
                                }
                            ],
                            "content": ".connect.assert_called_once_with(mock_websocket)\n"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "",
                            "range": [
                                507,
                                521
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "in",
                                    "range": [
                                        508,
                                        520
                                    ],
                                    "children": [
                                        {
                                            "type": "StringLiteral",
                                            "name": "\"method\":\"error\"",
                                            "range": [
                                                508,
                                                520
                                            ],
                                            "children": [],
                                            "content": ".send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "mock_websocket.send_text.call_args[0][0]",
                                            "range": [
                                                510,
                                                520
                                            ],
                                            "children": [],
                                            "content": ".assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text"
                                        }
                                    ],
                                    "content": ".send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text"
                                }
                            ],
                            "content": "mock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text."
                        },
                        {
                            "type": "AssertStatement",
                            "name": "",
                            "range": [
                                522,
                                536
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "in",
                                    "range": [
                                        523,
                                        535
                                    ],
                                    "children": [
                                        {
                                            "type": "StringLiteral",
                                            "name": "\"success\":false",
                                            "range": [
                                                523,
                                                535
                                            ],
                                            "children": [],
                                            "content": "[0][0]\nassert '\"success\":false' in mock_websocket.send_text"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "mock_websocket.send_text.call_args[0][0]",
                                            "range": [
                                                525,
                                                535
                                            ],
                                            "children": [],
                                            "content": "][0]\nassert '\"success\":false' in mock_websocket.send_text"
                                        }
                                    ],
                                    "content": "[0][0]\nassert '\"success\":false' in mock_websocket.send_text"
                                }
                            ],
                            "content": "call_args[0][0]\nassert '\"success\":false' in mock_websocket.send_text."
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                537,
                                545
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "mock_manager.disconnect.assert_called_once_with",
                                    "range": [
                                        537,
                                        544
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                542,
                                                544
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "mock_websocket",
                                                    "range": [
                                                        543,
                                                        556
                                                    ],
                                                    "children": [],
                                                    "content": "]\nmock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@"
                                                }
                                            ],
                                            "content": "0]\n"
                                        }
                                    ],
                                    "content": "call_args[0][0]\n"
                                }
                            ],
                            "content": "call_args[0][0]\nmock_manager"
                        }
                    ],
                    "content": ":AsyncMock\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\nWebSocketDisconnect(),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager)\n)\n\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\nmock_manager."
                }
            ],
            "content": "\n@pytest.mark.asyncio\nasync def test_websocket_router_invalid_method(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\nWebSocketDisconnect(),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager)\n)\n\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\nmock_manager."
        },
        {
            "type": "FunctionDecl",
            "name": "test_handle_subscribe_success",
            "range": [
                554,
                664
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.mark.asyncio",
                    "range": [
                        547,
                        553
                    ],
                    "children": [],
                    "content": "disconnect.assert_called_once_with(mock_websocket)\n"
                },
                {
                    "type": "FunctionSignature",
                    "name": "test_handle_subscribe_success",
                    "range": [
                        554,
                        571
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                554,
                                559
                            ],
                            "children": [],
                            "content": "\n\n@pytest.mark"
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                555,
                                558
                            ],
                            "children": [],
                            "content": "\n@pytest."
                        },
                        {
                            "type": "Identifier",
                            "name": "test_handle_subscribe_success",
                            "range": [
                                556,
                                582
                            ],
                            "children": [],
                            "content": "@pytest.mark.asyncio\nasync def test_handle_subscribe_success(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmessage"
                        },
                        {
                            "type": "ParameterList",
                            "name": "",
                            "range": [
                                557,
                                570
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "mock_websocket",
                                    "range": [
                                        559,
                                        566
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mock_websocket",
                                            "range": [
                                                559,
                                                573
                                            ],
                                            "children": [],
                                            "content": "mark.asyncio\nasync def test_handle_subscribe_success(\nmock_websocket:AsyncMock,mock_manager:"
                                        },
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "AsyncMock",
                                            "range": [
                                                560,
                                                569
                                            ],
                                            "children": [],
                                            "content": ".asyncio\nasync def test_handle_subscribe_success(\nmock_websocket:"
                                        }
                                    ],
                                    "content": "mark.asyncio\nasync def test_handle_subscribe_success("
                                },
                                {
                                    "type": "Parameter",
                                    "name": "mock_manager",
                                    "range": [
                                        563,
                                        570
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mock_manager",
                                            "range": [
                                                563,
                                                576
                                            ],
                                            "children": [],
                                            "content": "async def test_handle_subscribe_success(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)"
                                        },
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "AsyncMock",
                                            "range": [
                                                564,
                                                573
                                            ],
                                            "children": [],
                                            "content": "def test_handle_subscribe_success(\nmock_websocket:AsyncMock,mock_manager:"
                                        }
                                    ],
                                    "content": "async def test_handle_subscribe_success(\nmock_websocket:AsyncMock"
                                }
                            ],
                            "content": "pytest.mark.asyncio\nasync def test_handle_subscribe_success(\nmock_websocket:AsyncMock"
                        },
                        {
                            "type": "ReturnType",
                            "name": "None",
                            "range": [
                                568,
                                571
                            ],
                            "children": [],
                            "content": "mock_websocket:AsyncMock,"
                        }
                    ],
                    "content": "\n\n@pytest.mark.asyncio\nasync def test_handle_subscribe_success(\nmock_websocket:AsyncMock,"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        572,
                        664
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "message",
                            "range": [
                                573,
                                591
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "message",
                                    "range": [
                                        573,
                                        580
                                    ],
                                    "children": [],
                                    "content": ":AsyncMock\n)->None:"
                                },
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        574,
                                        575
                                    ],
                                    "children": [],
                                    "content": "AsyncMock\n"
                                },
                                {
                                    "type": "ObjectCreation",
                                    "name": "WsMessage",
                                    "range": [
                                        575,
                                        590
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "WsMessage",
                                            "range": [
                                                575,
                                                584
                                            ],
                                            "children": [],
                                            "content": "\n)->None:\nmessage=WsMessage"
                                        },
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                576,
                                                589
                                            ],
                                            "children": [
                                                {
                                                    "type": "NamedArgument",
                                                    "name": "method",
                                                    "range": [
                                                        577,
                                                        582
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "method",
                                                            "range": [
                                                                577,
                                                                583
                                                            ],
                                                            "children": [],
                                                            "content": "->None:\nmessage="
                                                        },
                                                        {
                                                            "type": "Assignment",
                                                            "name": "=",
                                                            "range": [
                                                                578,
                                                                579
                                                            ],
                                                            "children": [],
                                                            "content": ">None"
                                                        },
                                                        {
                                                            "type": "MemberAccess",
                                                            "name": "Methods.SUBSCRIBE",
                                                            "range": [
                                                                579,
                                                                582
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "Methods",
                                                                    "range": [
                                                                        579,
                                                                        586
                                                                    ],
                                                                    "children": [],
                                                                    "content": "None:\nmessage=WsMessage(method"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "SUBSCRIBE",
                                                                    "range": [
                                                                        581,
                                                                        590
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nmessage=WsMessage(method=Methods.SUBSCRIBE"
                                                                }
                                                            ],
                                                            "content": "None:\nmessage"
                                                        }
                                                    ],
                                                    "content": "->None:\nmessage"
                                                },
                                                {
                                                    "type": "NamedArgument",
                                                    "name": "data",
                                                    "range": [
                                                        583,
                                                        589
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "data",
                                                            "range": [
                                                                583,
                                                                587
                                                            ],
                                                            "children": [],
                                                            "content": "=WsMessage(method="
                                                        },
                                                        {
                                                            "type": "Assignment",
                                                            "name": "=",
                                                            "range": [
                                                                584,
                                                                585
                                                            ],
                                                            "children": [],
                                                            "content": "WsMessage("
                                                        },
                                                        {
                                                            "type": "ObjectLiteral",
                                                            "name": "",
                                                            "range": [
                                                                585,
                                                                589
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Property",
                                                                    "name": "graph_id",
                                                                    "range": [
                                                                        586,
                                                                        589
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "StringLiteral",
                                                                            "name": "test_graph",
                                                                            "range": [
                                                                                588,
                                                                                589
                                                                            ],
                                                                            "children": [],
                                                                            "content": "Methods."
                                                                        }
                                                                    ],
                                                                    "content": "method=Methods."
                                                                }
                                                            ],
                                                            "content": "(method=Methods."
                                                        }
                                                    ],
                                                    "content": "=WsMessage(method=Methods."
                                                }
                                            ],
                                            "content": ")->None:\nmessage=WsMessage(method=Methods."
                                        }
                                    ],
                                    "content": "\n)->None:\nmessage=WsMessage(method=Methods.SUBSCRIBE"
                                }
                            ],
                            "content": ":AsyncMock\n)->None:\nmessage=WsMessage(method=Methods.SUBSCRIBE,"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                593,
                                614
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "",
                                    "range": [
                                        593,
                                        613
                                    ],
                                    "children": [
                                        {
                                            "type": "Keyword",
                                            "name": "await",
                                            "range": [
                                                593,
                                                598
                                            ],
                                            "children": [],
                                            "content": "={\"graph_id\":\"test_graph\"}"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "handle_subscribe",
                                            "range": [
                                                594,
                                                613
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "handle_subscribe",
                                                    "range": [
                                                        594,
                                                        610
                                                    ],
                                                    "children": [],
                                                    "content": "{\"graph_id\":\"test_graph\"})\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket"
                                                },
                                                {
                                                    "type": "ArgumentList",
                                                    "name": "",
                                                    "range": [
                                                        595,
                                                        612
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "cast",
                                                            "range": [
                                                                597,
                                                                602
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "cast",
                                                                    "range": [
                                                                        597,
                                                                        601
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\"test_graph\"})\n\n"
                                                                },
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "",
                                                                    "range": [
                                                                        598,
                                                                        601
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "WebSocket",
                                                                            "range": [
                                                                                599,
                                                                                608
                                                                            ],
                                                                            "children": [],
                                                                            "content": ")\n\nawait handle_subscribe(\ncast(WebSocket"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "mock_websocket",
                                                                            "range": [
                                                                                600,
                                                                                613
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket),cast"
                                                                        }
                                                                    ],
                                                                    "content": "})\n\n"
                                                                }
                                                            ],
                                                            "content": "\"test_graph\"})\n\nawait"
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "cast",
                                                            "range": [
                                                                604,
                                                                609
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "cast",
                                                                    "range": [
                                                                        604,
                                                                        608
                                                                    ],
                                                                    "children": [],
                                                                    "content": "(\ncast(WebSocket"
                                                                },
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "",
                                                                    "range": [
                                                                        605,
                                                                        608
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "ConnectionManager",
                                                                            "range": [
                                                                                606,
                                                                                621
                                                                            ],
                                                                            "children": [],
                                                                            "content": "cast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager),message\n"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "mock_manager",
                                                                            "range": [
                                                                                607,
                                                                                620
                                                                            ],
                                                                            "children": [],
                                                                            "content": "(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager),message"
                                                                        }
                                                                    ],
                                                                    "content": "\ncast(WebSocket"
                                                                }
                                                            ],
                                                            "content": "(\ncast(WebSocket,"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "message",
                                                            "range": [
                                                                611,
                                                                612
                                                            ],
                                                            "children": [],
                                                            "content": "),"
                                                        }
                                                    ],
                                                    "content": "\"graph_id\":\"test_graph\"})\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket),"
                                                }
                                            ],
                                            "content": "{\"graph_id\":\"test_graph\"})\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket),cast"
                                        }
                                    ],
                                    "content": "={\"graph_id\":\"test_graph\"})\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket),cast"
                                }
                            ],
                            "content": "={\"graph_id\":\"test_graph\"})\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket),cast("
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                616,
                                626
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "mock_manager.subscribe.assert_called_once_with",
                                    "range": [
                                        616,
                                        625
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberAccess",
                                            "name": "mock_manager.subscribe.assert_called_once_with",
                                            "range": [
                                                616,
                                                625
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "mock_manager",
                                                    "range": [
                                                        616,
                                                        627
                                                    ],
                                                    "children": [],
                                                    "content": ",mock_manager),message\n)\n\nmock_manager.subscribe"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "subscribe",
                                                    "range": [
                                                        617,
                                                        626
                                                    ],
                                                    "children": [],
                                                    "content": "mock_manager),message\n)\n\nmock_manager."
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "assert_called_once_with",
                                                    "range": [
                                                        618,
                                                        641
                                                    ],
                                                    "children": [],
                                                    "content": "),message\n)\n\nmock_manager.subscribe.assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once("
                                                }
                                            ],
                                            "content": ",mock_manager),message\n)\n\nmock_manager"
                                        },
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                621,
                                                624
                                            ],
                                            "children": [
                                                {
                                                    "type": "StringLiteral",
                                                    "name": "test_graph",
                                                    "range": [
                                                        622,
                                                        623
                                                    ],
                                                    "children": [],
                                                    "content": ")\n"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "mock_websocket",
                                                    "range": [
                                                        624,
                                                        625
                                                    ],
                                                    "children": [],
                                                    "content": "\nmock_manager"
                                                }
                                            ],
                                            "content": "\n)\n\n"
                                        }
                                    ],
                                    "content": ",mock_manager),message\n)\n\nmock_manager"
                                }
                            ],
                            "content": ",mock_manager),message\n)\n\nmock_manager."
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                627,
                                634
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "mock_websocket.send_text.assert_called_once",
                                    "range": [
                                        627,
                                        633
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberAccess",
                                            "name": "mock_websocket.send_text.assert_called_once",
                                            "range": [
                                                627,
                                                633
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "mock_websocket",
                                                    "range": [
                                                        627,
                                                        640
                                                    ],
                                                    "children": [],
                                                    "content": "subscribe.assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "send_text",
                                                    "range": [
                                                        628,
                                                        637
                                                    ],
                                                    "children": [],
                                                    "content": ".assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket."
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "assert_called_once",
                                                    "range": [
                                                        629,
                                                        644
                                                    ],
                                                    "children": [],
                                                    "content": "assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert"
                                                }
                                            ],
                                            "content": "subscribe.assert_called_once_with(\"test_graph\",mock_websocket"
                                        },
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                632,
                                                633
                                            ],
                                            "children": [],
                                            "content": ",mock_websocket"
                                        }
                                    ],
                                    "content": "subscribe.assert_called_once_with(\"test_graph\",mock_websocket"
                                }
                            ],
                            "content": "subscribe.assert_called_once_with(\"test_graph\",mock_websocket)"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "",
                            "range": [
                                635,
                                649
                            ],
                            "children": [
                                {
                                    "type": "StringLiteral",
                                    "name": "\"method\":\"subscribe\"",
                                    "range": [
                                        636,
                                        637
                                    ],
                                    "children": [],
                                    "content": "mock_websocket."
                                },
                                {
                                    "type": "Keyword",
                                    "name": "in",
                                    "range": [
                                        637,
                                        639
                                    ],
                                    "children": [],
                                    "content": ".send_text."
                                },
                                {
                                    "type": "MemberAccess",
                                    "name": "mock_websocket.send_text.call_args[0][0]",
                                    "range": [
                                        638,
                                        649
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mock_websocket",
                                            "range": [
                                                638,
                                                651
                                            ],
                                            "children": [],
                                            "content": "send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "send_text",
                                            "range": [
                                                639,
                                                648
                                            ],
                                            "children": [],
                                            "content": ".assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket."
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "call_args",
                                            "range": [
                                                640,
                                                649
                                            ],
                                            "children": [],
                                            "content": "assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text"
                                        },
                                        {
                                            "type": "NumericLiteral",
                                            "name": "0",
                                            "range": [
                                                643,
                                                644
                                            ],
                                            "children": [],
                                            "content": "\nassert"
                                        },
                                        {
                                            "type": "NumericLiteral",
                                            "name": "0",
                                            "range": [
                                                647,
                                                648
                                            ],
                                            "children": [],
                                            "content": "mock_websocket."
                                        }
                                    ],
                                    "content": "send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text"
                                }
                            ],
                            "content": "\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "",
                            "range": [
                                650,
                                664
                            ],
                            "children": [
                                {
                                    "type": "StringLiteral",
                                    "name": "\"success\":true",
                                    "range": [
                                        651,
                                        652
                                    ],
                                    "children": [],
                                    "content": "call_args["
                                },
                                {
                                    "type": "Keyword",
                                    "name": "in",
                                    "range": [
                                        652,
                                        654
                                    ],
                                    "children": [],
                                    "content": "[0]"
                                },
                                {
                                    "type": "MemberAccess",
                                    "name": "mock_websocket.send_text.call_args[0][0]",
                                    "range": [
                                        653,
                                        664
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mock_websocket",
                                            "range": [
                                                653,
                                                666
                                            ],
                                            "children": [],
                                            "content": "0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "send_text",
                                            "range": [
                                                654,
                                                663
                                            ],
                                            "children": [],
                                            "content": "][0]\nassert '\"success\":true' in mock_websocket."
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "call_args",
                                            "range": [
                                                655,
                                                664
                                            ],
                                            "children": [],
                                            "content": "[0]\nassert '\"success\":true' in mock_websocket.send_text"
                                        },
                                        {
                                            "type": "NumericLiteral",
                                            "name": "0",
                                            "range": [
                                                658,
                                                659
                                            ],
                                            "children": [],
                                            "content": "\nassert"
                                        },
                                        {
                                            "type": "NumericLiteral",
                                            "name": "0",
                                            "range": [
                                                661,
                                                662
                                            ],
                                            "children": [],
                                            "content": "in mock_websocket"
                                        }
                                    ],
                                    "content": "0][0]\nassert '\"success\":true' in mock_websocket.send_text"
                                }
                            ],
                            "content": ".call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text"
                        }
                    ],
                    "content": "mock_manager:AsyncMock\n)->None:\nmessage=WsMessage(method=Methods.SUBSCRIBE,data={\"graph_id\":\"test_graph\"})\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager),message\n)\n\nmock_manager.subscribe.assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text"
                }
            ],
            "content": "\n\n@pytest.mark.asyncio\nasync def test_handle_subscribe_success(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmessage=WsMessage(method=Methods.SUBSCRIBE,data={\"graph_id\":\"test_graph\"})\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager),message\n)\n\nmock_manager.subscribe.assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text"
        },
        {
            "type": "FunctionDecl",
            "name": "test_handle_subscribe_missing_data",
            "range": [
                673,
                773
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.mark.asyncio",
                    "range": [
                        666,
                        671
                    ],
                    "children": [],
                    "content": "call_args[0][0"
                },
                {
                    "type": "FunctionSignature",
                    "name": "test_handle_subscribe_missing_data",
                    "range": [
                        673,
                        689
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "mock_websocket",
                            "range": [
                                678,
                                680
                            ],
                            "children": [],
                            "content": ".mark."
                        },
                        {
                            "type": "Parameter",
                            "name": "mock_manager",
                            "range": [
                                682,
                                684
                            ],
                            "children": [],
                            "content": "\nasync def"
                        },
                        {
                            "type": "ReturnType",
                            "name": "None",
                            "range": [
                                687,
                                689
                            ],
                            "children": [],
                            "content": "\nmock_websocket:"
                        }
                    ],
                    "content": "\n\n\n@pytest.mark.asyncio\nasync def test_handle_subscribe_missing_data(\nmock_websocket:"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        691,
                        773
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "message",
                            "range": [
                                692,
                                701
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        693,
                                        701
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "WsMessage",
                                            "range": [
                                                694,
                                                701
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "method",
                                                    "range": [
                                                        696,
                                                        700
                                                    ],
                                                    "children": [],
                                                    "content": ")->None:"
                                                }
                                            ],
                                            "content": "AsyncMock\n)->None:\n"
                                        }
                                    ],
                                    "content": ":AsyncMock\n)->None:\n"
                                }
                            ],
                            "content": "mock_manager:AsyncMock\n)->None:\n"
                        },
                        {
                            "type": "AwaitExpression",
                            "name": "await",
                            "range": [
                                704,
                                724
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "handle_subscribe",
                                    "range": [
                                        705,
                                        724
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "cast",
                                            "range": [
                                                708,
                                                713
                                            ],
                                            "children": [],
                                            "content": "Methods.SUBSCRIBE)\n\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "cast",
                                            "range": [
                                                715,
                                                720
                                            ],
                                            "children": [],
                                            "content": "handle_subscribe(\ncast(WebSocket"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "message",
                                            "range": [
                                                722,
                                                722
                                            ],
                                            "children": [],
                                            "content": "mock_websocket"
                                        }
                                    ],
                                    "content": "(method=Methods.SUBSCRIBE)\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket),"
                                }
                            ],
                            "content": "WsMessage(method=Methods.SUBSCRIBE)\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket),"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_manager.subscribe.assert_not_called",
                            "range": [
                                727,
                                733
                            ],
                            "children": [],
                            "content": "ConnectionManager,mock_manager),message\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_websocket.send_text.assert_called_once",
                            "range": [
                                735,
                                741
                            ],
                            "children": [],
                            "content": "\n\nmock_manager.subscribe.assert_not_called"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert",
                            "range": [
                                743,
                                757
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "in",
                                    "range": [
                                        745,
                                        757
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"method\":\"error\"",
                                            "range": [
                                                744,
                                                744
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "mock_websocket.send_text.call_args",
                                            "range": [
                                                746,
                                                756
                                            ],
                                            "children": [],
                                            "content": ".send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket"
                                        }
                                    ],
                                    "content": "mock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket."
                                }
                            ],
                            "content": ")\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket."
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert",
                            "range": [
                                758,
                                772
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "in",
                                    "range": [
                                        760,
                                        772
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"success\":false",
                                            "range": [
                                                759,
                                                759
                                            ],
                                            "children": [],
                                            "content": "."
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "mock_websocket.send_text.call_args",
                                            "range": [
                                                761,
                                                771
                                            ],
                                            "children": [],
                                            "content": "[0][0]\nassert '\"success\":false' in mock_websocket"
                                        }
                                    ],
                                    "content": "call_args[0][0]\nassert '\"success\":false' in mock_websocket."
                                }
                            ],
                            "content": "send_text.call_args[0][0]\nassert '\"success\":false' in mock_websocket."
                        }
                    ],
                    "content": ",mock_manager:AsyncMock\n)->None:\nmessage=WsMessage(method=Methods.SUBSCRIBE)\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager),message\n)\n\nmock_manager.subscribe.assert_not_called()\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":false' in mock_websocket.send_text"
                }
            ],
            "content": "\n\n\n@pytest.mark.asyncio\nasync def test_handle_subscribe_missing_data(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmessage=WsMessage(method=Methods.SUBSCRIBE)\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager),message\n)\n\nmock_manager.subscribe.assert_not_called()\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":false' in mock_websocket.send_text"
        },
        {
            "type": "Decorator",
            "name": "@pytest.mark.asyncio",
            "range": [
                774,
                779
            ],
            "children": [],
            "content": ".call_args[0]["
        },
        {
            "type": "FunctionDecl",
            "name": "test_handle_unsubscribe_success",
            "range": [
                781,
                892
            ],
            "children": [
                {
                    "type": "Arguments",
                    "name": "",
                    "range": [
                        783,
                        793
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "mock_websocket",
                            "range": [
                                786,
                                788
                            ],
                            "children": [],
                            "content": "pytest.mark"
                        },
                        {
                            "type": "Argument",
                            "name": "mock_manager",
                            "range": [
                                790,
                                792
                            ],
                            "children": [],
                            "content": "asyncio\nasync"
                        }
                    ],
                    "content": "\n\n@pytest.mark.asyncio\nasync def"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        795,
                        797
                    ],
                    "children": [],
                    "content": "(\nmock_websocket"
                },
                {
                    "type": "Assignment",
                    "name": "message",
                    "range": [
                        800,
                        817
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "WsMessage",
                            "range": [
                                802,
                                817
                            ],
                            "children": [
                                {
                                    "type": "KeywordArgument",
                                    "name": "method",
                                    "range": [
                                        804,
                                        808
                                    ],
                                    "children": [],
                                    "content": "\n)->None"
                                },
                                {
                                    "type": "KeywordArgument",
                                    "name": "data",
                                    "range": [
                                        810,
                                        816
                                    ],
                                    "children": [],
                                    "content": "\nmessage=WsMessage(method="
                                }
                            ],
                            "content": ":AsyncMock\n)->None:\nmessage=WsMessage(method=Methods"
                        }
                    ],
                    "content": ",mock_manager:AsyncMock\n)->None:\nmessage=WsMessage(method=Methods"
                },
                {
                    "type": "AwaitExpression",
                    "name": "await",
                    "range": [
                        820,
                        840
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "handle_unsubscribe",
                            "range": [
                                821,
                                840
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "cast",
                                    "range": [
                                        824,
                                        829
                                    ],
                                    "children": [],
                                    "content": "\"graph_id\":\"test_graph\"})\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "cast",
                                    "range": [
                                        831,
                                        836
                                    ],
                                    "children": [],
                                    "content": "await handle_unsubscribe(\ncast("
                                },
                                {
                                    "type": "Identifier",
                                    "name": "message",
                                    "range": [
                                        838,
                                        838
                                    ],
                                    "children": [],
                                    "content": ","
                                }
                            ],
                            "content": "data={\"graph_id\":\"test_graph\"})\n\nawait handle_unsubscribe(\ncast(WebSocket,mock_websocket)"
                        }
                    ],
                    "content": ",data={\"graph_id\":\"test_graph\"})\n\nawait handle_unsubscribe(\ncast(WebSocket,mock_websocket)"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "mock_manager.unsubscribe.assert_called_once_with",
                    "range": [
                        843,
                        852
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"test_graph\"",
                            "range": [
                                849,
                                849
                            ],
                            "children": [],
                            "content": "message"
                        },
                        {
                            "type": "Identifier",
                            "name": "mock_websocket",
                            "range": [
                                851,
                                851
                            ],
                            "children": [],
                            "content": ")"
                        }
                    ],
                    "content": "(ConnectionManager,mock_manager),message\n)\n"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "mock_websocket.send_text.assert_called_once",
                    "range": [
                        854,
                        860
                    ],
                    "children": [],
                    "content": "mock_manager.unsubscribe.assert_called_once_with(\"test_graph\""
                },
                {
                    "type": "AssertStatement",
                    "name": "assert",
                    "range": [
                        862,
                        875
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "'\"method\":\"unsubscribe\"'",
                            "range": [
                                863,
                                863
                            ],
                            "children": [],
                            "content": ")"
                        },
                        {
                            "type": "BinaryExpression",
                            "name": "in",
                            "range": [
                                864,
                                864
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "MemberExpression",
                            "name": "mock_websocket.send_text.call_args",
                            "range": [
                                865,
                                875
                            ],
                            "children": [],
                            "content": "mock_websocket.send_text.assert_called_once()\nassert '\"method\":\"unsubscribe\"' in"
                        }
                    ],
                    "content": "mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"unsubscribe\"' in"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert",
                    "range": [
                        877,
                        890
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "'\"success\":true'",
                            "range": [
                                878,
                                878
                            ],
                            "children": [],
                            "content": "send_text"
                        },
                        {
                            "type": "BinaryExpression",
                            "name": "in",
                            "range": [
                                879,
                                879
                            ],
                            "children": [],
                            "content": "."
                        },
                        {
                            "type": "MemberExpression",
                            "name": "mock_websocket.send_text.call_args",
                            "range": [
                                880,
                                890
                            ],
                            "children": [],
                            "content": "call_args[0][0]\nassert '\"success\":true' in"
                        }
                    ],
                    "content": ".send_text.call_args[0][0]\nassert '\"success\":true' in"
                }
            ],
            "content": "]\n\n\n@pytest.mark.asyncio\nasync def test_handle_unsubscribe_success(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmessage=WsMessage(method=Methods.UNSUBSCRIBE,data={\"graph_id\":\"test_graph\"})\n\nawait handle_unsubscribe(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager),message\n)\n\nmock_manager.unsubscribe.assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket."
        },
        {
            "type": "FunctionDecl",
            "name": "test_handle_unsubscribe_missing_data",
            "range": [
                900,
                1000
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.mark.asyncio",
                    "range": [
                        893,
                        899
                    ],
                    "children": [],
                    "content": "send_text.call_args[0]["
                },
                {
                    "type": "FunctionSignature",
                    "name": "test_handle_unsubscribe_missing_data",
                    "range": [
                        900,
                        917
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                900,
                                905
                            ],
                            "children": [],
                            "content": "0]\n\n\n@"
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                901,
                                904
                            ],
                            "children": [],
                            "content": "]\n\n\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "test_handle_unsubscribe_missing_data",
                            "range": [
                                902,
                                933
                            ],
                            "children": [],
                            "content": "\n\n\n@pytest.mark.asyncio\nasync def test_handle_unsubscribe_missing_data(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmessage=WsMessage"
                        },
                        {
                            "type": "ParameterList",
                            "name": "",
                            "range": [
                                903,
                                913
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "mock_websocket",
                                    "range": [
                                        905,
                                        911
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "AsyncMock",
                                            "range": [
                                                907,
                                                911
                                            ],
                                            "children": [],
                                            "content": ".mark.asyncio\n"
                                        }
                                    ],
                                    "content": "@pytest.mark.asyncio\n"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "mock_manager",
                                    "range": [
                                        909,
                                        911
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "AsyncMock",
                                            "range": [
                                                911,
                                                911
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": ".asyncio\n"
                                }
                            ],
                            "content": "\n\n@pytest.mark.asyncio\nasync def"
                        },
                        {
                            "type": "ReturnType",
                            "name": "None",
                            "range": [
                                914,
                                917
                            ],
                            "children": [],
                            "content": "test_handle_unsubscribe_missing_data(\nmock_websocket"
                        }
                    ],
                    "content": "0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_unsubscribe_missing_data(\nmock_websocket"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        918,
                        1000
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "message",
                            "range": [
                                919,
                                929
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        920,
                                        920
                                    ],
                                    "children": [],
                                    "content": ","
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "WsMessage",
                                    "range": [
                                        921,
                                        928
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "method=Methods.UNSUBSCRIBE",
                                            "range": [
                                                923,
                                                927
                                            ],
                                            "children": [],
                                            "content": "AsyncMock\n)->"
                                        }
                                    ],
                                    "content": "mock_manager:AsyncMock\n)->None"
                                }
                            ],
                            "content": "AsyncMock,mock_manager:AsyncMock\n)->None:"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "await handle_unsubscribe",
                            "range": [
                                931,
                                951
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        931,
                                        936
                                    ],
                                    "children": [],
                                    "content": "message=WsMessage(method="
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "handle_unsubscribe",
                                    "range": [
                                        932,
                                        950
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "cast(WebSocket, mock_websocket)",
                                            "range": [
                                                935,
                                                940
                                            ],
                                            "children": [],
                                            "content": "method=Methods.UNSUBSCRIBE)"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "cast(ConnectionManager, mock_manager)",
                                            "range": [
                                                942,
                                                947
                                            ],
                                            "children": [],
                                            "content": "\nawait handle_unsubscribe(\ncast"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "message",
                                            "range": [
                                                949,
                                                949
                                            ],
                                            "children": [],
                                            "content": "WebSocket"
                                        }
                                    ],
                                    "content": "=WsMessage(method=Methods.UNSUBSCRIBE)\n\nawait handle_unsubscribe(\ncast(WebSocket,"
                                }
                            ],
                            "content": "message=WsMessage(method=Methods.UNSUBSCRIBE)\n\nawait handle_unsubscribe(\ncast(WebSocket,mock_websocket"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_manager.unsubscribe.assert_not_called",
                            "range": [
                                954,
                                961
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert_not_called",
                                    "range": [
                                        958,
                                        960
                                    ],
                                    "children": [],
                                    "content": "mock_manager),"
                                }
                            ],
                            "content": "cast(ConnectionManager,mock_manager),message"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_websocket.send_text.assert_called_once",
                            "range": [
                                962,
                                969
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert_called_once",
                                    "range": [
                                        966,
                                        968
                                    ],
                                    "children": [],
                                    "content": "mock_manager.unsubscribe"
                                }
                            ],
                            "content": "\n)\n\nmock_manager.unsubscribe."
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
                            "range": [
                                970,
                                984
                            ],
                            "children": [],
                            "content": "assert_not_called()\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                            "range": [
                                985,
                                999
                            ],
                            "children": [],
                            "content": "mock_websocket.send_text.call_args[0][0]\nassert '\"success\":false' in"
                        }
                    ],
                    "content": ":AsyncMock,mock_manager:AsyncMock\n)->None:\nmessage=WsMessage(method=Methods.UNSUBSCRIBE)\n\nawait handle_unsubscribe(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager),message\n)\n\nmock_manager.unsubscribe.assert_not_called()\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":false' in mock_websocket"
                }
            ],
            "content": "0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_unsubscribe_missing_data(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmessage=WsMessage(method=Methods.UNSUBSCRIBE)\n\nawait handle_unsubscribe(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager),message\n)\n\nmock_manager.unsubscribe.assert_not_called()\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":false' in mock_websocket"
        }
    ],
    "content": "fixture\ndef mock_websocket()->AsyncMock:\nreturn AsyncMock(spec=WebSocket)\n\n\n@pytest.fixture\ndef mock_manager()->AsyncMock:\nreturn AsyncMock(spec=ConnectionManager)\n\n\n@pytest.mark.asyncio\nasync def test_websocket_router_subscribe(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(\nmethod=Methods.SUBSCRIBE,data={\"graph_id\":\"test_graph\"}\n).model_dump_json(),\nWebSocketDisconnect(),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager)\n)\n\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_manager.subscribe.assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\nmock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\nasync def test_websocket_router_unsubscribe(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(\nmethod=Methods.UNSUBSCRIBE,data={\"graph_id\":\"test_graph\"}\n).model_dump_json(),\nWebSocketDisconnect(),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager)\n)\n\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_manager.unsubscribe.assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\nmock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\nasync def test_websocket_router_invalid_method(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmock_websocket.receive_text.side_effect=[\nWsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\nWebSocketDisconnect(),\n]\n\nawait websocket_router(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager)\n)\n\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\nmock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\nasync def test_handle_subscribe_success(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmessage=WsMessage(method=Methods.SUBSCRIBE,data={\"graph_id\":\"test_graph\"})\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager),message\n)\n\nmock_manager.subscribe.assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_subscribe_missing_data(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmessage=WsMessage(method=Methods.SUBSCRIBE)\n\nawait handle_subscribe(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager),message\n)\n\nmock_manager.subscribe.assert_not_called()\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_unsubscribe_success(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmessage=WsMessage(method=Methods.UNSUBSCRIBE,data={\"graph_id\":\"test_graph\"})\n\nawait handle_unsubscribe(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager),message\n)\n\nmock_manager.unsubscribe.assert_called_once_with(\"test_graph\",mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_unsubscribe_missing_data(\nmock_websocket:AsyncMock,mock_manager:AsyncMock\n)->None:\nmessage=WsMessage(method=Methods.UNSUBSCRIBE)\n\nawait handle_unsubscribe(\ncast(WebSocket,mock_websocket),cast(ConnectionManager,mock_manager),message\n)\n\nmock_manager.unsubscribe.assert_not_called()\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":false' in mock_websocket"
}