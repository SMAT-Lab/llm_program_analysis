{
    "type": "Program",
    "name": "Global",
    "range": [
        40,
        708
    ],
    "children": [
        {
            "type": "EnumDeclaration",
            "name": "Operation",
            "range": [
                40,
                67
            ],
            "children": [
                {
                    "type": "EnumMember",
                    "name": "ADD",
                    "range": [
                        47,
                        49
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "value": "\"Add\"",
                            "range": [
                                49,
                                49
                            ],
                            "children": [],
                            "content": "\"Add\""
                        }
                    ],
                    "content": "ADD=\"Add\""
                },
                {
                    "type": "EnumMember",
                    "name": "SUBTRACT",
                    "range": [
                        51,
                        53
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "value": "\"Subtract\"",
                            "range": [
                                53,
                                53
                            ],
                            "children": [],
                            "content": "\"Subtract\""
                        }
                    ],
                    "content": "SUBTRACT=\"Subtract\""
                },
                {
                    "type": "EnumMember",
                    "name": "MULTIPLY",
                    "range": [
                        55,
                        57
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "value": "\"Multiply\"",
                            "range": [
                                57,
                                57
                            ],
                            "children": [],
                            "content": "\"Multiply\""
                        }
                    ],
                    "content": "MULTIPLY=\"Multiply\""
                },
                {
                    "type": "EnumMember",
                    "name": "DIVIDE",
                    "range": [
                        59,
                        61
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "value": "\"Divide\"",
                            "range": [
                                61,
                                61
                            ],
                            "children": [],
                            "content": "\"Divide\""
                        }
                    ],
                    "content": "DIVIDE=\"Divide\""
                },
                {
                    "type": "EnumMember",
                    "name": "POWER",
                    "range": [
                        63,
                        65
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "value": "\"Power\"",
                            "range": [
                                65,
                                65
                            ],
                            "children": [],
                            "content": "\"Power\""
                        }
                    ],
                    "content": "POWER=\"Power\""
                }
            ],
            "content": "class Operation(Enum):\nADD=\"Add\"\nSUBTRACT=\"Subtract\"\nMULTIPLY=\"Multiply\"\nDIVIDE=\"Divide\"\nPOWER=\"Power\"\n\n"
        },
        {
            "type": "ClassDecl",
            "name": "CalculatorBlock",
            "range": [
                68,
                74
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "Block",
                    "range": [
                        70,
                        72
                    ],
                    "children": [],
                    "content": "CalculatorBlock(Block"
                }
            ],
            "content": "\nclass CalculatorBlock(Block):"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                75,
                81
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BlockSchema",
                    "range": [
                        77,
                        79
                    ],
                    "children": [],
                    "content": "Input(BlockSchema"
                }
            ],
            "content": "\nclass Input(BlockSchema):"
        },
        {
            "type": "VariableDecl",
            "name": "operation",
            "range": [
                82,
                100
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "Operation",
                    "range": [
                        83,
                        84
                    ],
                    "children": [],
                    "content": "operation:"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        85,
                        85
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "SchemaField",
                            "range": [
                                86,
                                99
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        89,
                                        91
                                    ],
                                    "children": [],
                                    "content": "\ndescription="
                                },
                                {
                                    "type": "Argument",
                                    "name": "placeholder",
                                    "range": [
                                        94,
                                        96
                                    ],
                                    "children": [],
                                    "content": "\nplaceholder="
                                }
                            ],
                            "content": "=SchemaField(\ndescription=\"Choose the math operation you want to perform\",\nplaceholder=\"Select an operation\",\n"
                        }
                    ],
                    "content": "Operation"
                }
            ],
            "content": "\noperation:Operation=SchemaField(\ndescription=\"Choose the math operation you want to perform\",\nplaceholder=\"Select an operation\",\n)"
        },
        {
            "type": "VariableDecl",
            "name": "a",
            "range": [
                101,
                117
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "float",
                    "range": [
                        102,
                        103
                    ],
                    "children": [],
                    "content": "a:"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        104,
                        104
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "SchemaField",
                            "range": [
                                105,
                                116
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        108,
                                        110
                                    ],
                                    "children": [],
                                    "content": "\ndescription="
                                },
                                {
                                    "type": "Argument",
                                    "name": "placeholder",
                                    "range": [
                                        112,
                                        114
                                    ],
                                    "children": [],
                                    "content": ",placeholder="
                                }
                            ],
                            "content": "=SchemaField(\ndescription=\"Enter the first number (A)\",placeholder=\"For example: 10\"\n"
                        }
                    ],
                    "content": "float"
                }
            ],
            "content": "\na:float=SchemaField(\ndescription=\"Enter the first number (A)\",placeholder=\"For example: 10\"\n)"
        },
        {
            "type": "VariableDecl",
            "name": "b",
            "range": [
                118,
                134
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "float",
                    "range": [
                        119,
                        120
                    ],
                    "children": [],
                    "content": "b:"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        121,
                        121
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "SchemaField",
                            "range": [
                                122,
                                133
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        125,
                                        127
                                    ],
                                    "children": [],
                                    "content": "\ndescription="
                                },
                                {
                                    "type": "Argument",
                                    "name": "placeholder",
                                    "range": [
                                        129,
                                        131
                                    ],
                                    "children": [],
                                    "content": ",placeholder="
                                }
                            ],
                            "content": "=SchemaField(\ndescription=\"Enter the second number (B)\",placeholder=\"For example: 5\"\n"
                        }
                    ],
                    "content": "float"
                }
            ],
            "content": "\nb:float=SchemaField(\ndescription=\"Enter the second number (B)\",placeholder=\"For example: 5\"\n)"
        },
        {
            "type": "VariableDecl",
            "name": "round_result",
            "range": [
                135,
                153
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "bool",
                    "range": [
                        136,
                        137
                    ],
                    "children": [],
                    "content": "round_result:"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        138,
                        138
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "SchemaField",
                            "range": [
                                139,
                                152
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        142,
                                        144
                                    ],
                                    "children": [],
                                    "content": "\ndescription="
                                },
                                {
                                    "type": "Argument",
                                    "name": "default",
                                    "range": [
                                        147,
                                        149
                                    ],
                                    "children": [],
                                    "content": "\ndefault="
                                }
                            ],
                            "content": "=SchemaField(\ndescription=\"Do you want to round the result to a whole number?\",\ndefault=False,\n"
                        }
                    ],
                    "content": "bool"
                }
            ],
            "content": "\nround_result:bool=SchemaField(\ndescription=\"Do you want to round the result to a whole number?\",\ndefault=False,\n)"
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                155,
                161
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BlockSchema",
                    "range": [
                        157,
                        159
                    ],
                    "children": [],
                    "content": "Output(BlockSchema"
                }
            ],
            "content": "\nclass Output(BlockSchema):"
        },
        {
            "type": "VariableDecl",
            "name": "result",
            "range": [
                162,
                172
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "float",
                    "range": [
                        163,
                        164
                    ],
                    "children": [],
                    "content": "result:"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        165,
                        165
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "SchemaField",
                            "range": [
                                166,
                                171
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        168,
                                        170
                                    ],
                                    "children": [],
                                    "content": "(description="
                                }
                            ],
                            "content": "=SchemaField(description=\"The result of your calculation\""
                        }
                    ],
                    "content": "float"
                }
            ],
            "content": "\nresult:float=SchemaField(description=\"The result of your calculation\")"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                174,
                273
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        177,
                        178
                    ],
                    "children": [],
                    "content": "(self"
                },
                {
                    "type": "SuperCall",
                    "name": "super",
                    "range": [
                        181,
                        185
                    ],
                    "children": [],
                    "content": "\nsuper()."
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        189,
                        189
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\"",
                            "range": [
                                190,
                                190
                            ],
                            "children": [],
                            "content": "="
                        }
                    ],
                    "content": "id"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        194,
                        194
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "CalculatorBlock.Input",
                            "range": [
                                195,
                                197
                            ],
                            "children": [],
                            "content": "=CalculatorBlock."
                        }
                    ],
                    "content": "input_schema"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        201,
                        201
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "CalculatorBlock.Output",
                            "range": [
                                202,
                                204
                            ],
                            "children": [],
                            "content": "=CalculatorBlock."
                        }
                    ],
                    "content": "output_schema"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        208,
                        208
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"Performs a mathematical operation on two numbers.\"",
                            "range": [
                                209,
                                209
                            ],
                            "children": [],
                            "content": "="
                        }
                    ],
                    "content": "description"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        213,
                        213
                    ],
                    "children": [
                        {
                            "type": "ObjectLiteral",
                            "name": "{BlockCategory.LOGIC}",
                            "range": [
                                214,
                                218
                            ],
                            "children": [],
                            "content": "={BlockCategory.LOGIC"
                        }
                    ],
                    "content": "categories"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        222,
                        222
                    ],
                    "children": [
                        {
                            "type": "ObjectLiteral",
                            "name": "{\"operation\": Operation.ADD.value, \"a\": 10.0, \"b\": 5.0, \"round_result\": False}",
                            "range": [
                                223,
                                253
                            ],
                            "children": [],
                            "content": "={\n\"operation\":Operation.ADD.value,\n\"a\":10.0,\n\"b\":5.0,\n\"round_result\":False,\n"
                        }
                    ],
                    "content": "test_input"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        257,
                        257
                    ],
                    "children": [
                        {
                            "type": "ArrayLiteral",
                            "name": "[(\"result\", 15.0)]",
                            "range": [
                                258,
                                269
                            ],
                            "children": [],
                            "content": "=[\n(\"result\",15.0),\n"
                        }
                    ],
                    "content": "test_output"
                }
            ],
            "content": "\ndef __init__(self):\nsuper().__init__(\nid=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\ninput_schema=CalculatorBlock.Input,\noutput_schema=CalculatorBlock.Output,\ndescription=\"Performs a mathematical operation on two numbers.\",\ncategories={BlockCategory.LOGIC},\ntest_input={\n\"operation\":Operation.ADD.value,\n\"a\":10.0,\n\"b\":5.0,\n\"round_result\":False,\n},\ntest_output=[\n(\"result\",15.0),\n],\n)"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                275,
                463
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        278,
                        279
                    ],
                    "children": [],
                    "content": "(self"
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        280,
                        281
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Input",
                            "range": [
                                282,
                                283
                            ],
                            "children": [],
                            "content": ":Input"
                        }
                    ],
                    "content": ",input_data"
                },
                {
                    "type": "Parameter",
                    "name": "kwargs",
                    "range": [
                        286,
                        287
                    ],
                    "children": [],
                    "content": "*kwargs"
                },
                {
                    "type": "ReturnType",
                    "name": "BlockOutput",
                    "range": [
                        290,
                        291
                    ],
                    "children": [],
                    "content": ">BlockOutput"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        294,
                        294
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "input_data.operation",
                            "range": [
                                295,
                                297
                            ],
                            "children": [],
                            "content": "=input_data."
                        }
                    ],
                    "content": "operation"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        300,
                        300
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "input_data.a",
                            "range": [
                                301,
                                303
                            ],
                            "children": [],
                            "content": "=input_data."
                        }
                    ],
                    "content": "a"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        306,
                        306
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "input_data.b",
                            "range": [
                                307,
                                309
                            ],
                            "children": [],
                            "content": "=input_data."
                        }
                    ],
                    "content": "b"
                },
                {
                    "type": "ObjectLiteral",
                    "name": "{Operation.ADD: operator.add, Operation.SUBTRACT: operator.sub, Operation.MULTIPLY: operator.mul, Operation.DIVIDE: operator.truediv, Operation.POWER: operator.pow}",
                    "range": [
                        314,
                        361
                    ],
                    "children": [],
                    "content": "={\nOperation.ADD:operator.add,\nOperation.SUBTRACT:operator.sub,\nOperation.MULTIPLY:operator.mul,\nOperation.DIVIDE:operator.truediv,\nOperation.POWER:operator.pow,\n"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        365,
                        365
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "operations[operation]",
                            "range": [
                                366,
                                369
                            ],
                            "children": [],
                            "content": "=operations[operation"
                        }
                    ],
                    "content": "op_func"
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        372,
                        463
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                375,
                                394
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        377,
                                        378
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "operation",
                                            "range": [
                                                376,
                                                376
                                            ],
                                            "children": [],
                                            "content": "if"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "Operation.DIVIDE",
                                            "range": [
                                                379,
                                                381
                                            ],
                                            "children": [],
                                            "content": "=Operation."
                                        }
                                    ],
                                    "content": "operation="
                                },
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        384,
                                        385
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "b",
                                            "range": [
                                                383,
                                                383
                                            ],
                                            "children": [],
                                            "content": "and"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "0",
                                            "range": [
                                                386,
                                                386
                                            ],
                                            "children": [],
                                            "content": "="
                                        }
                                    ],
                                    "content": "b="
                                },
                                {
                                    "type": "ThrowStatement",
                                    "name": "raise",
                                    "range": [
                                        389,
                                        393
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "ZeroDivisionError",
                                            "range": [
                                                390,
                                                392
                                            ],
                                            "children": [],
                                            "content": "raise ZeroDivisionError("
                                        }
                                    ],
                                    "content": "\nraise ZeroDivisionError(\"Cannot divide by zero\""
                                }
                            ],
                            "content": "\nif operation==Operation.DIVIDE and b==0:\nraise ZeroDivisionError(\"Cannot divide by zero\")"
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                397,
                                397
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "op_func",
                                    "range": [
                                        398,
                                        403
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "a",
                                            "range": [
                                                400,
                                                400
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "b",
                                            "range": [
                                                402,
                                                402
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": "=op_func(a,b"
                                }
                            ],
                            "content": "result"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                406,
                                418
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "input_data.round_result",
                                    "range": [
                                        407,
                                        409
                                    ],
                                    "children": [],
                                    "content": "if input_data."
                                },
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        413,
                                        413
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "round",
                                            "range": [
                                                414,
                                                417
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "result",
                                                    "range": [
                                                        416,
                                                        416
                                                    ],
                                                    "children": [],
                                                    "content": "("
                                                }
                                            ],
                                            "content": "=round(result"
                                        }
                                    ],
                                    "content": "result"
                                }
                            ],
                            "content": "\nif input_data.round_result:\nresult=round(result)"
                        },
                        {
                            "type": "YieldExpression",
                            "name": "yield",
                            "range": [
                                420,
                                424
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"result\"",
                                    "range": [
                                        421,
                                        421
                                    ],
                                    "children": [],
                                    "content": "yield"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "result",
                                    "range": [
                                        423,
                                        423
                                    ],
                                    "children": [],
                                    "content": ","
                                }
                            ],
                            "content": "\nyield \"result\",result"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except",
                            "range": [
                                426,
                                444
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "ZeroDivisionError",
                                    "range": [
                                        427,
                                        427
                                    ],
                                    "children": [],
                                    "content": "except"
                                },
                                {
                                    "type": "YieldExpression",
                                    "name": "yield",
                                    "range": [
                                        430,
                                        436
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"result\"",
                                            "range": [
                                                431,
                                                431
                                            ],
                                            "children": [],
                                            "content": "yield"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "float",
                                            "range": [
                                                433,
                                                435
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"inf\"",
                                                    "range": [
                                                        435,
                                                        435
                                                    ],
                                                    "children": [],
                                                    "content": "("
                                                }
                                            ],
                                            "content": ",float("
                                        }
                                    ],
                                    "content": "\nyield \"result\",float(\"inf\""
                                }
                            ],
                            "content": "\nexcept ZeroDivisionError:\nyield \"result\",float(\"inf\")#Return infinity for division by zero"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except",
                            "range": [
                                445,
                                462
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "Exception",
                                    "range": [
                                        446,
                                        446
                                    ],
                                    "children": [],
                                    "content": "except"
                                },
                                {
                                    "type": "YieldExpression",
                                    "name": "yield",
                                    "range": [
                                        449,
                                        455
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"result\"",
                                            "range": [
                                                450,
                                                450
                                            ],
                                            "children": [],
                                            "content": "yield"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "float",
                                            "range": [
                                                452,
                                                454
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"nan\"",
                                                    "range": [
                                                        454,
                                                        454
                                                    ],
                                                    "children": [],
                                                    "content": "("
                                                }
                                            ],
                                            "content": ",float("
                                        }
                                    ],
                                    "content": "\nyield \"result\",float(\"nan\""
                                }
                            ],
                            "content": "\nexcept Exception:\nyield \"result\",float(\"nan\")#Return NaN for other errors"
                        }
                    ],
                    "content": "\ntry:\nif operation==Operation.DIVIDE and b==0:\nraise ZeroDivisionError(\"Cannot divide by zero\")\n\nresult=op_func(a,b)\n\nif input_data.round_result:\nresult=round(result)\n\nyield \"result\",result\n\nexcept ZeroDivisionError:\nyield \"result\",float(\"inf\")#Return infinity for division by zero\nexcept Exception:\nyield \"result\",float(\"nan\")#Return NaN for other errors\n"
                }
            ],
            "content": "\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\noperation=input_data.operation\na=input_data.a\nb=input_data.b\n\noperations={\nOperation.ADD:operator.add,\nOperation.SUBTRACT:operator.sub,\nOperation.MULTIPLY:operator.mul,\nOperation.DIVIDE:operator.truediv,\nOperation.POWER:operator.pow,\n}\n\nop_func=operations[operation]\n\ntry:\nif operation==Operation.DIVIDE and b==0:\nraise ZeroDivisionError(\"Cannot divide by zero\")\n\nresult=op_func(a,b)\n\nif input_data.round_result:\nresult=round(result)\n\nyield \"result\",result\n\nexcept ZeroDivisionError:\nyield \"result\",float(\"inf\")#Return infinity for division by zero\nexcept Exception:\nyield \"result\",float(\"nan\")#Return NaN for other errors\n"
        },
        {
            "type": "ClassDecl",
            "name": "CountItemsBlock",
            "range": [
                464,
                470
            ],
            "children": [],
            "content": "\n\nclass CountItemsBlock(Block)"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                471,
                477
            ],
            "children": [],
            "content": ":\nclass Input(BlockSchema)"
        },
        {
            "type": "VariableDecl",
            "name": "collection",
            "range": [
                478,
                496
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "Any",
                    "range": [
                        480,
                        480
                    ],
                    "children": [],
                    "content": "collection"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        481,
                        481
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "SchemaField",
                            "range": [
                                482,
                                495
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        485,
                                        487
                                    ],
                                    "children": [],
                                    "content": "(\ndescription"
                                },
                                {
                                    "type": "Argument",
                                    "name": "placeholder",
                                    "range": [
                                        490,
                                        492
                                    ],
                                    "children": [],
                                    "content": ",\nplaceholder"
                                }
                            ],
                            "content": "Any=SchemaField(\ndescription=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\nplaceholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\","
                        }
                    ],
                    "content": ":"
                }
            ],
            "content": ":\ncollection:Any=SchemaField(\ndescription=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\nplaceholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n"
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                498,
                504
            ],
            "children": [],
            "content": "\n\nclass Output(BlockSchema)"
        },
        {
            "type": "VariableDecl",
            "name": "count",
            "range": [
                505,
                515
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "int",
                    "range": [
                        507,
                        507
                    ],
                    "children": [],
                    "content": "count"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        508,
                        508
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "SchemaField",
                            "range": [
                                509,
                                514
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        511,
                                        513
                                    ],
                                    "children": [],
                                    "content": "SchemaField(description"
                                }
                            ],
                            "content": "int=SchemaField(description="
                        }
                    ],
                    "content": ":"
                }
            ],
            "content": ":\ncount:int=SchemaField(description=\"The number of items in the collection\""
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                517,
                598
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        519,
                        521
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                520,
                                520
                            ],
                            "children": [],
                            "content": "__init__"
                        }
                    ],
                    "content": "def __init__("
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        522,
                        598
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "super",
                            "range": [
                                524,
                                529
                            ],
                            "children": [],
                            "content": ":\nsuper()."
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                532,
                                532
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\"",
                                    "range": [
                                        533,
                                        533
                                    ],
                                    "children": [],
                                    "content": "id"
                                }
                            ],
                            "content": "\n"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                537,
                                537
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "CountItemsBlock.Input",
                                    "range": [
                                        538,
                                        541
                                    ],
                                    "children": [],
                                    "content": "input_schema=CountItemsBlock."
                                }
                            ],
                            "content": "\n"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                544,
                                544
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "CountItemsBlock.Output",
                                    "range": [
                                        545,
                                        548
                                    ],
                                    "children": [],
                                    "content": "output_schema=CountItemsBlock."
                                }
                            ],
                            "content": "\n"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                551,
                                551
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Counts the number of items in a collection.\"",
                                    "range": [
                                        552,
                                        552
                                    ],
                                    "children": [],
                                    "content": "description"
                                }
                            ],
                            "content": "\n"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                556,
                                556
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        557,
                                        561
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "BlockCategory.LOGIC",
                                            "range": [
                                                558,
                                                560
                                            ],
                                            "children": [],
                                            "content": "={BlockCategory"
                                        }
                                    ],
                                    "content": "categories={BlockCategory."
                                }
                            ],
                            "content": "\n"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                565,
                                565
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        566,
                                        580
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "\"collection\"",
                                            "range": [
                                                567,
                                                567
                                            ],
                                            "children": [],
                                            "content": "="
                                        },
                                        {
                                            "type": "ArrayExpression",
                                            "name": "",
                                            "range": [
                                                569,
                                                579
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "1",
                                                    "range": [
                                                        570,
                                                        570
                                                    ],
                                                    "children": [],
                                                    "content": ":"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "2",
                                                    "range": [
                                                        572,
                                                        572
                                                    ],
                                                    "children": [],
                                                    "content": "1"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "3",
                                                    "range": [
                                                        574,
                                                        574
                                                    ],
                                                    "children": [],
                                                    "content": "2"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "4",
                                                    "range": [
                                                        576,
                                                        576
                                                    ],
                                                    "children": [],
                                                    "content": "3"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "5",
                                                    "range": [
                                                        578,
                                                        578
                                                    ],
                                                    "children": [],
                                                    "content": "4"
                                                }
                                            ],
                                            "content": "\"collection\":[1,2,3,4,"
                                        }
                                    ],
                                    "content": "test_input={\"collection\":[1,2,3,4,5"
                                }
                            ],
                            "content": "\n"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                584,
                                584
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "",
                                    "range": [
                                        585,
                                        594
                                    ],
                                    "children": [
                                        {
                                            "type": "TupleExpression",
                                            "name": "",
                                            "range": [
                                                587,
                                                591
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"count\"",
                                                    "range": [
                                                        588,
                                                        588
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "5",
                                                    "range": [
                                                        590,
                                                        590
                                                    ],
                                                    "children": [],
                                                    "content": "\"count\""
                                                }
                                            ],
                                            "content": "[\n(\"count\","
                                        }
                                    ],
                                    "content": "test_output=[\n(\"count\",5),"
                                }
                            ],
                            "content": "\n"
                        }
                    ],
                    "content": "self):\nsuper().__init__(\nid=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\ninput_schema=CountItemsBlock.Input,\noutput_schema=CountItemsBlock.Output,\ndescription=\"Counts the number of items in a collection.\",\ncategories={BlockCategory.LOGIC},\ntest_input={\"collection\":[1,2,3,4,5]},\ntest_output=[\n(\"count\",5),\n],\n"
                }
            ],
            "content": "\n\ndef __init__(self):\nsuper().__init__(\nid=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\ninput_schema=CountItemsBlock.Input,\noutput_schema=CountItemsBlock.Output,\ndescription=\"Counts the number of items in a collection.\",\ncategories={BlockCategory.LOGIC},\ntest_input={\"collection\":[1,2,3,4,5]},\ntest_output=[\n(\"count\",5),\n],\n"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                600,
                708
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        602,
                        612
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                603,
                                603
                            ],
                            "children": [],
                            "content": "run"
                        },
                        {
                            "type": "Parameter",
                            "name": "input_data",
                            "range": [
                                605,
                                605
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "Input",
                                    "range": [
                                        607,
                                        607
                                    ],
                                    "children": [],
                                    "content": "input_data"
                                }
                            ],
                            "content": "self"
                        },
                        {
                            "type": "Parameter",
                            "name": "kwargs",
                            "range": [
                                611,
                                611
                            ],
                            "children": [],
                            "content": "*"
                        }
                    ],
                    "content": "def run(self,input_data:Input,**"
                },
                {
                    "type": "ReturnTypeAnnotation",
                    "name": "BlockOutput",
                    "range": [
                        615,
                        615
                    ],
                    "children": [],
                    "content": "-"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        617,
                        708
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                619,
                                619
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "input_data.collection",
                                    "range": [
                                        620,
                                        622
                                    ],
                                    "children": [],
                                    "content": "collection=input_data"
                                }
                            ],
                            "content": "\n"
                        },
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                625,
                                707
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        626,
                                        689
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "",
                                            "range": [
                                                628,
                                                682
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "",
                                                    "range": [
                                                        629,
                                                        644
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "isinstance",
                                                            "range": [
                                                                629,
                                                                644
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "collection",
                                                                    "range": [
                                                                        631,
                                                                        631
                                                                    ],
                                                                    "children": [],
                                                                    "content": "isinstance"
                                                                },
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "",
                                                                    "range": [
                                                                        633,
                                                                        643
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "str",
                                                                            "range": [
                                                                                634,
                                                                                634
                                                                            ],
                                                                            "children": [],
                                                                            "content": ","
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "list",
                                                                            "range": [
                                                                                636,
                                                                                636
                                                                            ],
                                                                            "children": [],
                                                                            "content": "str"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "tuple",
                                                                            "range": [
                                                                                638,
                                                                                638
                                                                            ],
                                                                            "children": [],
                                                                            "content": "list"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "set",
                                                                            "range": [
                                                                                640,
                                                                                640
                                                                            ],
                                                                            "children": [],
                                                                            "content": "tuple"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "dict",
                                                                            "range": [
                                                                                642,
                                                                                642
                                                                            ],
                                                                            "children": [],
                                                                            "content": "set"
                                                                        }
                                                                    ],
                                                                    "content": "collection,(str,list,tuple,set,"
                                                                }
                                                            ],
                                                            "content": "\nif isinstance(collection,(str,list,tuple,set,dict"
                                                        }
                                                    ],
                                                    "content": "\nif isinstance(collection,(str,list,tuple,set,dict"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "",
                                                    "range": [
                                                        645,
                                                        653
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "=",
                                                            "range": [
                                                                648,
                                                                648
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "len",
                                                                    "range": [
                                                                        649,
                                                                        652
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "collection",
                                                                            "range": [
                                                                                651,
                                                                                651
                                                                            ],
                                                                            "children": [],
                                                                            "content": "len"
                                                                        }
                                                                    ],
                                                                    "content": "count=len("
                                                                }
                                                            ],
                                                            "content": "\n"
                                                        }
                                                    ],
                                                    "content": ")):\ncount=len(collection"
                                                },
                                                {
                                                    "type": "ElseIfStatement",
                                                    "name": "",
                                                    "range": [
                                                        654,
                                                        673
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Condition",
                                                            "name": "",
                                                            "range": [
                                                                655,
                                                                661
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "hasattr",
                                                                    "range": [
                                                                        655,
                                                                        661
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "collection",
                                                                            "range": [
                                                                                657,
                                                                                657
                                                                            ],
                                                                            "children": [],
                                                                            "content": "hasattr"
                                                                        },
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "\"__iter__\"",
                                                                            "range": [
                                                                                659,
                                                                                659
                                                                            ],
                                                                            "children": [],
                                                                            "content": "collection"
                                                                        }
                                                                    ],
                                                                    "content": "\nelif hasattr(collection,\"__iter__\""
                                                                }
                                                            ],
                                                            "content": "\nelif hasattr(collection,\"__iter__\""
                                                        },
                                                        {
                                                            "type": "Block",
                                                            "name": "",
                                                            "range": [
                                                                662,
                                                                673
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "AssignmentExpression",
                                                                    "name": "=",
                                                                    "range": [
                                                                        664,
                                                                        664
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "sum",
                                                                            "range": [
                                                                                665,
                                                                                672
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Argument",
                                                                                    "name": "1",
                                                                                    "range": [
                                                                                        667,
                                                                                        667
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "sum"
                                                                                },
                                                                                {
                                                                                    "type": "ForStatement",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        668,
                                                                                        671
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "VariableDecl",
                                                                                            "name": "_",
                                                                                            "range": [
                                                                                                669,
                                                                                                669
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "1"
                                                                                        },
                                                                                        {
                                                                                            "type": "Expression",
                                                                                            "name": "collection",
                                                                                            "range": [
                                                                                                671,
                                                                                                671
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "_"
                                                                                        }
                                                                                    ],
                                                                                    "content": "(1for _"
                                                                                }
                                                                            ],
                                                                            "content": "count=sum(1for _ in"
                                                                        }
                                                                    ],
                                                                    "content": "\n"
                                                                }
                                                            ],
                                                            "content": "):\ncount=sum(1for _ in collection"
                                                        }
                                                    ],
                                                    "content": ")\nelif hasattr(collection,\"__iter__\"):\ncount=sum(1for _ in collection"
                                                },
                                                {
                                                    "type": "ElseStatement",
                                                    "name": "",
                                                    "range": [
                                                        674,
                                                        682
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Block",
                                                            "name": "",
                                                            "range": [
                                                                675,
                                                                682
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ThrowStatement",
                                                                    "name": "",
                                                                    "range": [
                                                                        677,
                                                                        681
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "NewExpression",
                                                                            "name": "ValueError",
                                                                            "range": [
                                                                                678,
                                                                                681
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Argument",
                                                                                    "name": "\"Input is not a countable collection\"",
                                                                                    "range": [
                                                                                        680,
                                                                                        680
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "ValueError"
                                                                                }
                                                                            ],
                                                                            "content": "\nraise ValueError("
                                                                        }
                                                                    ],
                                                                    "content": ":\nraise ValueError("
                                                                }
                                                            ],
                                                            "content": "\nelse:\nraise ValueError(\"Input is not a countable collection\""
                                                        }
                                                    ],
                                                    "content": ")\nelse:\nraise ValueError(\"Input is not a countable collection\""
                                                }
                                            ],
                                            "content": ":\nif isinstance(collection,(str,list,tuple,set,dict)):\ncount=len(collection)\nelif hasattr(collection,\"__iter__\"):\ncount=sum(1for _ in collection)\nelse:\nraise ValueError(\"Input is not a countable collection\""
                                        },
                                        {
                                            "type": "YieldStatement",
                                            "name": "",
                                            "range": [
                                                684,
                                                688
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"count\"",
                                                    "range": [
                                                        685,
                                                        685
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "Expression",
                                                    "name": "count",
                                                    "range": [
                                                        687,
                                                        687
                                                    ],
                                                    "children": [],
                                                    "content": "\"count\""
                                                }
                                            ],
                                            "content": "\n\nyield \"count\","
                                        }
                                    ],
                                    "content": "\ntry:\nif isinstance(collection,(str,list,tuple,set,dict)):\ncount=len(collection)\nelif hasattr(collection,\"__iter__\"):\ncount=sum(1for _ in collection)\nelse:\nraise ValueError(\"Input is not a countable collection\")\n\nyield \"count\",count"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "",
                                    "range": [
                                        690,
                                        707
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "",
                                            "range": [
                                                691,
                                                707
                                            ],
                                            "children": [
                                                {
                                                    "type": "YieldStatement",
                                                    "name": "",
                                                    "range": [
                                                        694,
                                                        698
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"count\"",
                                                            "range": [
                                                                695,
                                                                695
                                                            ],
                                                            "children": [],
                                                            "content": "\n"
                                                        },
                                                        {
                                                            "type": "UnaryExpression",
                                                            "name": "-",
                                                            "range": [
                                                                697,
                                                                697
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "1",
                                                                    "range": [
                                                                        698,
                                                                        698
                                                                    ],
                                                                    "children": [],
                                                                    "content": ","
                                                                }
                                                            ],
                                                            "content": "\"count\""
                                                        }
                                                    ],
                                                    "content": ":\nyield \"count\","
                                                }
                                            ],
                                            "content": "\nexcept Exception:\nyield \"count\",-1#Return-1to indicate an"
                                        }
                                    ],
                                    "content": "\n\nexcept Exception:\nyield \"count\",-1#Return-1to indicate an"
                                }
                            ],
                            "content": "\n\ntry:\nif isinstance(collection,(str,list,tuple,set,dict)):\ncount=len(collection)\nelif hasattr(collection,\"__iter__\"):\ncount=sum(1for _ in collection)\nelse:\nraise ValueError(\"Input is not a countable collection\")\n\nyield \"count\",count\n\nexcept Exception:\nyield \"count\",-1#Return-1to indicate an"
                        }
                    ],
                    "content": "BlockOutput:\ncollection=input_data.collection\n\ntry:\nif isinstance(collection,(str,list,tuple,set,dict)):\ncount=len(collection)\nelif hasattr(collection,\"__iter__\"):\ncount=sum(1for _ in collection)\nelse:\nraise ValueError(\"Input is not a countable collection\")\n\nyield \"count\",count\n\nexcept Exception:\nyield \"count\",-1#Return-1to indicate an error"
                }
            ],
            "content": "\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\ncollection=input_data.collection\n\ntry:\nif isinstance(collection,(str,list,tuple,set,dict)):\ncount=len(collection)\nelif hasattr(collection,\"__iter__\"):\ncount=sum(1for _ in collection)\nelse:\nraise ValueError(\"Input is not a countable collection\")\n\nyield \"count\",count\n\nexcept Exception:\nyield \"count\",-1#Return-1to indicate an error"
        }
    ],
    "content": "class Operation(Enum):\nADD=\"Add\"\nSUBTRACT=\"Subtract\"\nMULTIPLY=\"Multiply\"\nDIVIDE=\"Divide\"\nPOWER=\"Power\"\n\n\nclass CalculatorBlock(Block):\nclass Input(BlockSchema):\noperation:Operation=SchemaField(\ndescription=\"Choose the math operation you want to perform\",\nplaceholder=\"Select an operation\",\n)\na:float=SchemaField(\ndescription=\"Enter the first number (A)\",placeholder=\"For example: 10\"\n)\nb:float=SchemaField(\ndescription=\"Enter the second number (B)\",placeholder=\"For example: 5\"\n)\nround_result:bool=SchemaField(\ndescription=\"Do you want to round the result to a whole number?\",\ndefault=False,\n)\n\nclass Output(BlockSchema):\nresult:float=SchemaField(description=\"The result of your calculation\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\ninput_schema=CalculatorBlock.Input,\noutput_schema=CalculatorBlock.Output,\ndescription=\"Performs a mathematical operation on two numbers.\",\ncategories={BlockCategory.LOGIC},\ntest_input={\n\"operation\":Operation.ADD.value,\n\"a\":10.0,\n\"b\":5.0,\n\"round_result\":False,\n},\ntest_output=[\n(\"result\",15.0),\n],\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\noperation=input_data.operation\na=input_data.a\nb=input_data.b\n\noperations={\nOperation.ADD:operator.add,\nOperation.SUBTRACT:operator.sub,\nOperation.MULTIPLY:operator.mul,\nOperation.DIVIDE:operator.truediv,\nOperation.POWER:operator.pow,\n}\n\nop_func=operations[operation]\n\ntry:\nif operation==Operation.DIVIDE and b==0:\nraise ZeroDivisionError(\"Cannot divide by zero\")\n\nresult=op_func(a,b)\n\nif input_data.round_result:\nresult=round(result)\n\nyield \"result\",result\n\nexcept ZeroDivisionError:\nyield \"result\",float(\"inf\")#Return infinity for division by zero\nexcept Exception:\nyield \"result\",float(\"nan\")#Return NaN for other errors\n\n\nclass CountItemsBlock(Block):\nclass Input(BlockSchema):\ncollection:Any=SchemaField(\ndescription=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\nplaceholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n)\n\nclass Output(BlockSchema):\ncount:int=SchemaField(description=\"The number of items in the collection\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\ninput_schema=CountItemsBlock.Input,\noutput_schema=CountItemsBlock.Output,\ndescription=\"Counts the number of items in a collection.\",\ncategories={BlockCategory.LOGIC},\ntest_input={\"collection\":[1,2,3,4,5]},\ntest_output=[\n(\"count\",5),\n],\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\ncollection=input_data.collection\n\ntry:\nif isinstance(collection,(str,list,tuple,set,dict)):\ncount=len(collection)\nelif hasattr(collection,\"__iter__\"):\ncount=sum(1for _ in collection)\nelse:\nraise ValueError(\"Input is not a countable collection\")\n\nyield \"count\",count\n\nexcept Exception:\nyield \"count\",-1#Return-1to indicate an error"
}