{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        57
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "binary_coded_decimal",
            "range": [
                0,
                57
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "number",
                    "range": [
                        3,
                        5
                    ],
                    "children": [],
                    "content": "number:int"
                },
                {
                    "type": "ReturnType",
                    "name": "str",
                    "range": [
                        7,
                        9
                    ],
                    "children": [],
                    "content": "->str"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        12,
                        14
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Find binary coded decimal (bcd) of integer base 10. \\n     Each digit of the number is represented by a 4-bit binary. \\n     Example: \\n     >>> binary_coded_decimal(-2) \\n     '0b0000' \\n     >>> binary_coded_decimal(-1) \\n     '0b0000' \\n     >>> binary_coded_decimal(0) \\n     '0b0000' \\n     >>> binary_coded_decimal(3) \\n     '0b0011' \\n     >>> binary_coded_decimal(2) \\n     '0b0010' \\n     >>> binary_coded_decimal(12) \\n     '0b00010010' \\n     >>> binary_coded_decimal(987) \\n     '0b100110000111' \\n     \"\"\""
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        16,
                        56
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "+",
                            "range": [
                                17,
                                19
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"0b\"",
                                    "range": [
                                        17,
                                        17
                                    ],
                                    "children": [],
                                    "content": "\"0b\""
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "join",
                                    "range": [
                                        19,
                                        56
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"\"",
                                            "range": [
                                                19,
                                                19
                                            ],
                                            "children": [],
                                            "content": "\"\""
                                        },
                                        {
                                            "type": "ListComprehension",
                                            "name": "",
                                            "range": [
                                                21,
                                                56
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "str",
                                                    "range": [
                                                        24,
                                                        33
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "bin",
                                                            "range": [
                                                                26,
                                                                32
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "int",
                                                                    "range": [
                                                                        28,
                                                                        31
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "digit",
                                                                            "range": [
                                                                                30,
                                                                                30
                                                                            ],
                                                                            "children": [],
                                                                            "content": "digit"
                                                                        }
                                                                    ],
                                                                    "content": "int(digit)"
                                                                }
                                                            ],
                                                            "content": "bin(int(digit))"
                                                        }
                                                    ],
                                                    "content": "str(bin(int(digit)))"
                                                },
                                                {
                                                    "type": "SliceExpression",
                                                    "name": "",
                                                    "range": [
                                                        34,
                                                        37
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "2",
                                                            "range": [
                                                                35,
                                                                35
                                                            ],
                                                            "children": [],
                                                            "content": "2"
                                                        }
                                                    ],
                                                    "content": "[2:]"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "zfill",
                                                    "range": [
                                                        38,
                                                        42
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "4",
                                                            "range": [
                                                                41,
                                                                41
                                                            ],
                                                            "children": [],
                                                            "content": "4"
                                                        }
                                                    ],
                                                    "content": ".zfill(4)"
                                                },
                                                {
                                                    "type": "ForStatement",
                                                    "name": "",
                                                    "range": [
                                                        43,
                                                        55
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "digit",
                                                            "range": [
                                                                44,
                                                                44
                                                            ],
                                                            "children": [],
                                                            "content": "digit"
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "str",
                                                            "range": [
                                                                46,
                                                                54
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "max",
                                                                    "range": [
                                                                        48,
                                                                        53
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "0",
                                                                            "range": [
                                                                                50,
                                                                                50
                                                                            ],
                                                                            "children": [],
                                                                            "content": "0"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "number",
                                                                            "range": [
                                                                                52,
                                                                                52
                                                                            ],
                                                                            "children": [],
                                                                            "content": "number"
                                                                        }
                                                                    ],
                                                                    "content": "max(0,number)"
                                                                }
                                                            ],
                                                            "content": "str(max(0,number))"
                                                        }
                                                    ],
                                                    "content": "for digit in str(max(0,number))\n"
                                                }
                                            ],
                                            "content": "join(\nstr(bin(int(digit)))[2:].zfill(4)for digit in str(max(0,number))\n)"
                                        }
                                    ],
                                    "content": "\"\".join(\nstr(bin(int(digit)))[2:].zfill(4)for digit in str(max(0,number))\n)"
                                }
                            ],
                            "content": "\"0b\"+\"\""
                        }
                    ],
                    "content": "return \"0b\"+\"\".join(\nstr(bin(int(digit)))[2:].zfill(4)for digit in str(max(0,number))\n)"
                }
            ],
            "content": "def binary_coded_decimal(number:int)->str:\n\"\"\" \\n     Find binary coded decimal (bcd) of integer base 10. \\n     Each digit of the number is represented by a 4-bit binary. \\n     Example: \\n     >>> binary_coded_decimal(-2) \\n     '0b0000' \\n     >>> binary_coded_decimal(-1) \\n     '0b0000' \\n     >>> binary_coded_decimal(0) \\n     '0b0000' \\n     >>> binary_coded_decimal(3) \\n     '0b0011' \\n     >>> binary_coded_decimal(2) \\n     '0b0010' \\n     >>> binary_coded_decimal(12) \\n     '0b00010010' \\n     >>> binary_coded_decimal(987) \\n     '0b100110000111' \\n     \"\"\"\nreturn \"0b\"+\"\".join(\nstr(bin(int(digit)))[2:].zfill(4)for digit in str(max(0,number))\n)\n"
        }
    ],
    "content": "def binary_coded_decimal(number:int)->str:\n\"\"\" \\n     Find binary coded decimal (bcd) of integer base 10. \\n     Each digit of the number is represented by a 4-bit binary. \\n     Example: \\n     >>> binary_coded_decimal(-2) \\n     '0b0000' \\n     >>> binary_coded_decimal(-1) \\n     '0b0000' \\n     >>> binary_coded_decimal(0) \\n     '0b0000' \\n     >>> binary_coded_decimal(3) \\n     '0b0011' \\n     >>> binary_coded_decimal(2) \\n     '0b0010' \\n     >>> binary_coded_decimal(12) \\n     '0b00010010' \\n     >>> binary_coded_decimal(987) \\n     '0b100110000111' \\n     \"\"\"\nreturn \"0b\"+\"\".join(\nstr(bin(int(digit)))[2:].zfill(4)for digit in str(max(0,number))\n)\n"
}