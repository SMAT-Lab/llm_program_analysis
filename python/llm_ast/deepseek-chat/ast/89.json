{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        129
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                0,
                23
            ],
            "children": [
                {
                    "type": "Text",
                    "name": "",
                    "range": [
                        1,
                        23
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "Information",
                            "range": [
                                1,
                                11
                            ],
                            "children": [],
                            "content": "Information on2's complement: https://en.wikipedia.org/wiki/Two%27s_complement \\n  \\n  \\n def twos_complement(number: int) -> str: \\n     \"\"\" \\n     Take in a negative integer ' number '. \\n     Return the two' s complement representation of 'number'"
                        },
                        {
                            "type": "Identifier",
                            "name": "on",
                            "range": [
                                12,
                                13
                            ],
                            "children": [],
                            "content": ".\n"
                        },
                        {
                            "type": "Literal",
                            "name": "2",
                            "range": [
                                14,
                                14
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "'s",
                            "range": [
                                15,
                                16
                            ],
                            "children": [],
                            "content": ">>"
                        },
                        {
                            "type": "Identifier",
                            "name": "complement",
                            "range": [
                                17,
                                26
                            ],
                            "children": [],
                            "content": ">twos_complement(0)\n'0b0'\n>>"
                        }
                    ],
                    "content": "Information on2's complement: https://en.wikipedia.org/wiki/Two%27s_complement \\n  \\n  \\n def twos_complement(number: int) -> str: \\n     \"\"\" \\n     Take in a negative integer ' number '. \\n     Return the two' s complement representation of 'number'.\n\n>>>twos_complement(0)\n'0b0'"
                }
            ],
            "content": "#Information on2's complement: https://en.wikipedia.org/wiki/Two%27s_complement \\n  \\n  \\n def twos_complement(number: int) -> str: \\n     \"\"\" \\n     Take in a negative integer ' number '. \\n     Return the two' s complement representation of 'number'.\n\n>>>twos_complement(0)\n'0b0'"
        },
        {
            "type": "Newline",
            "name": "",
            "range": [
                24,
                26
            ],
            "children": [],
            "content": "\n>>"
        },
        {
            "type": "FunctionDecl",
            "name": "twos_complement",
            "range": [
                27,
                129
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "number",
                    "range": [
                        30,
                        32
                    ],
                    "children": [],
                    "content": "-1)"
                },
                {
                    "type": "ReturnType",
                    "name": "str",
                    "range": [
                        36,
                        36
                    ],
                    "children": [],
                    "content": ">"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        39,
                        41
                    ],
                    "children": [],
                    "content": "twos_complement(-"
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        43,
                        54
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                44,
                                46
                            ],
                            "children": [],
                            "content": "\n'0b1011'\n"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "",
                            "range": [
                                49,
                                53
                            ],
                            "children": [
                                {
                                    "type": "ExceptionType",
                                    "name": "ValueError",
                                    "range": [
                                        50,
                                        50
                                    ],
                                    "children": [],
                                    "content": "twos_complement"
                                },
                                {
                                    "type": "ExceptionMessage",
                                    "name": "",
                                    "range": [
                                        52,
                                        52
                                    ],
                                    "children": [],
                                    "content": "-"
                                }
                            ],
                            "content": ">twos_complement(-17"
                        }
                    ],
                    "content": ")\n'0b1011'\n>>>twos_complement(-17)"
                },
                {
                    "type": "VariableDecl",
                    "name": "binary_number_length",
                    "range": [
                        55,
                        68
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "",
                            "range": [
                                56,
                                67
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "len",
                                    "range": [
                                        57,
                                        67
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "bin",
                                            "range": [
                                                59,
                                                66
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "number",
                                                    "range": [
                                                        61,
                                                        61
                                                    ],
                                                    "children": [],
                                                    "content": "twos_complement"
                                                }
                                            ],
                                            "content": ">>twos_complement(-207)\n"
                                        }
                                    ],
                                    "content": "\n>>>twos_complement(-207)\n'0b100110001'"
                                }
                            ],
                            "content": "'0b101111'\n>>>twos_complement(-207)\n'0b100110001'"
                        }
                    ],
                    "content": "\n'0b101111'\n>>>twos_complement(-207)\n'0b100110001'\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "twos_complement_number",
                    "range": [
                        69,
                        89
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "",
                            "range": [
                                70,
                                88
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "bin",
                                    "range": [
                                        71,
                                        88
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "",
                                            "range": [
                                                73,
                                                83
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "abs",
                                                    "range": [
                                                        73,
                                                        76
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "number",
                                                            "range": [
                                                                75,
                                                                75
                                                            ],
                                                            "children": [],
                                                            "content": ")"
                                                        }
                                                    ],
                                                    "content": "(1)\n"
                                                },
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "",
                                                    "range": [
                                                        77,
                                                        83
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "LeftOperand",
                                                            "name": "",
                                                            "range": [
                                                                77,
                                                                77
                                                            ],
                                                            "children": [],
                                                            "content": "Traceback"
                                                        },
                                                        {
                                                            "type": "Operator",
                                                            "name": "-",
                                                            "range": [
                                                                77,
                                                                77
                                                            ],
                                                            "children": [],
                                                            "content": "Traceback"
                                                        },
                                                        {
                                                            "type": "RightOperand",
                                                            "name": "",
                                                            "range": [
                                                                78,
                                                                83
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "1",
                                                                    "range": [
                                                                        79,
                                                                        79
                                                                    ],
                                                                    "children": [],
                                                                    "content": "most"
                                                                },
                                                                {
                                                                    "type": "BinaryExpression",
                                                                    "name": "",
                                                                    "range": [
                                                                        80,
                                                                        83
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "LeftOperand",
                                                                            "name": "",
                                                                            "range": [
                                                                                80,
                                                                                80
                                                                            ],
                                                                            "children": [],
                                                                            "content": "recent"
                                                                        },
                                                                        {
                                                                            "type": "Operator",
                                                                            "name": "<<",
                                                                            "range": [
                                                                                80,
                                                                                81
                                                                            ],
                                                                            "children": [],
                                                                            "content": "recent call"
                                                                        },
                                                                        {
                                                                            "type": "RightOperand",
                                                                            "name": "binary_number_length",
                                                                            "range": [
                                                                                82,
                                                                                82
                                                                            ],
                                                                            "children": [],
                                                                            "content": "last"
                                                                        }
                                                                    ],
                                                                    "content": "recent call last)"
                                                                }
                                                            ],
                                                            "content": "(most recent call last)"
                                                        }
                                                    ],
                                                    "content": "Traceback(most recent call last)"
                                                }
                                            ],
                                            "content": "(1)\nTraceback(most recent call last)"
                                        }
                                    ],
                                    "content": ">twos_complement(1)\nTraceback(most recent call last):\n..."
                                }
                            ],
                            "content": ">>twos_complement(1)\nTraceback(most recent call last):\n..."
                        }
                    ],
                    "content": ">>>twos_complement(1)\nTraceback(most recent call last):\n...\n"
                },
                {
                    "type": "Assignment",
                    "name": "twos_complement_number",
                    "range": [
                        90,
                        124
                    ],
                    "children": [
                        {
                            "type": "ConditionalExpression",
                            "name": "",
                            "range": [
                                92,
                                123
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        115,
                                        118
                                    ],
                                    "children": [],
                                    "content": "b \" + twos_complement_number \\n  \\n  \\n if __name__ == \" __main__\""
                                },
                                {
                                    "type": "TrueBranch",
                                    "name": "",
                                    "range": [
                                        94,
                                        113
                                    ],
                                    "children": [
                                        {
                                            "type": "StringConcatenation",
                                            "name": "",
                                            "range": [
                                                96,
                                                111
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "1",
                                                    "range": [
                                                        96,
                                                        96
                                                    ],
                                                    "children": [],
                                                    "content": "negative"
                                                },
                                                {
                                                    "type": "StringRepetition",
                                                    "name": "",
                                                    "range": [
                                                        98,
                                                        108
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "0",
                                                            "range": [
                                                                99,
                                                                99
                                                            ],
                                                            "children": [],
                                                            "content": "\"\""
                                                        },
                                                        {
                                                            "type": "BinaryExpression",
                                                            "name": "",
                                                            "range": [
                                                                101,
                                                                108
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "LeftOperand",
                                                                    "name": "binary_number_length",
                                                                    "range": [
                                                                        102,
                                                                        102
                                                                    ],
                                                                    "children": [],
                                                                    "content": "must"
                                                                },
                                                                {
                                                                    "type": "Operator",
                                                                    "name": "-",
                                                                    "range": [
                                                                        103,
                                                                        103
                                                                    ],
                                                                    "children": [],
                                                                    "content": "be"
                                                                },
                                                                {
                                                                    "type": "RightOperand",
                                                                    "name": "",
                                                                    "range": [
                                                                        104,
                                                                        108
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "len",
                                                                            "range": [
                                                                                104,
                                                                                107
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Argument",
                                                                                    "name": "twos_complement_number",
                                                                                    "range": [
                                                                                        106,
                                                                                        106
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "integer"
                                                                                }
                                                                            ],
                                                                            "content": "a negative integer \") \\n     binary_number_length = len(bin(number)[3:]) \\n     twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:] \\n     twos_complement_number = ( \\n         ( \\n             \""
                                                                        }
                                                                    ],
                                                                    "content": "a negative integer \") \\n     binary_number_length = len(bin(number)[3:]) \\n     twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:] \\n     twos_complement_number = ( \\n         ( \\n             \"1"
                                                                }
                                                            ],
                                                            "content": "input must be a negative integer \") \\n     binary_number_length = len(bin(number)[3:]) \\n     twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:] \\n     twos_complement_number = ( \\n         ( \\n             \"1"
                                                        }
                                                    ],
                                                    "content": "\n\"\"\" \\n     if number > 0: \\n         raise ValueError(\" input must be a negative integer \") \\n     binary_number_length = len(bin(number)[3:]) \\n     twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:] \\n     twos_complement_number = ( \\n         ( \\n             \"1"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "twos_complement_number",
                                                    "range": [
                                                        111,
                                                        111
                                                    ],
                                                    "children": [],
                                                    "content": "\" * (binary_number_length - len(twos_complement_number)) \\n             + twos_complement_number \\n         ) \\n         if number < 0 \\n         else \""
                                                }
                                            ],
                                            "content": "negative integer\n\"\"\" \\n     if number > 0: \\n         raise ValueError(\" input must be a negative integer \") \\n     binary_number_length = len(bin(number)[3:]) \\n     twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:] \\n     twos_complement_number = ( \\n         ( \\n             \"1\" \\n             + \"0\" * (binary_number_length - len(twos_complement_number)) \\n             + twos_complement_number \\n         ) \\n         if number < 0 \\n         else \""
                                        }
                                    ],
                                    "content": "be a negative integer\n\"\"\" \\n     if number > 0: \\n         raise ValueError(\" input must be a negative integer \") \\n     binary_number_length = len(bin(number)[3:]) \\n     twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:] \\n     twos_complement_number = ( \\n         ( \\n             \"1\" \\n             + \"0\" * (binary_number_length - len(twos_complement_number)) \\n             + twos_complement_number \\n         ) \\n         if number < 0 \\n         else \"0\" \\n     ) \\n     return \""
                                },
                                {
                                    "type": "FalseBranch",
                                    "name": "",
                                    "range": [
                                        121,
                                        121
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "0",
                                            "range": [
                                                121,
                                                121
                                            ],
                                            "children": [],
                                            "content": "import"
                                        }
                                    ],
                                    "content": "import"
                                }
                            ],
                            "content": "input must be a negative integer\n\"\"\" \\n     if number > 0: \\n         raise ValueError(\" input must be a negative integer \") \\n     binary_number_length = len(bin(number)[3:]) \\n     twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:] \\n     twos_complement_number = ( \\n         ( \\n             \"1\" \\n             + \"0\" * (binary_number_length - len(twos_complement_number)) \\n             + twos_complement_number \\n         ) \\n         if number < 0 \\n         else \"0\" \\n     ) \\n     return \"0b \" + twos_complement_number \\n  \\n  \\n if __name__ == \" __main__\":\nimport doctest\n"
                        }
                    ],
                    "content": "ValueError:input must be a negative integer\n\"\"\" \\n     if number > 0: \\n         raise ValueError(\" input must be a negative integer \") \\n     binary_number_length = len(bin(number)[3:]) \\n     twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:] \\n     twos_complement_number = ( \\n         ( \\n             \"1\" \\n             + \"0\" * (binary_number_length - len(twos_complement_number)) \\n             + twos_complement_number \\n         ) \\n         if number < 0 \\n         else \"0\" \\n     ) \\n     return \"0b \" + twos_complement_number \\n  \\n  \\n if __name__ == \" __main__\":\nimport doctest\n\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        125,
                        129
                    ],
                    "children": [
                        {
                            "type": "StringConcatenation",
                            "name": "",
                            "range": [
                                126,
                                128
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "0b",
                                    "range": [
                                        126,
                                        126
                                    ],
                                    "children": [],
                                    "content": "."
                                },
                                {
                                    "type": "Identifier",
                                    "name": "twos_complement_number",
                                    "range": [
                                        128,
                                        128
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": ".testmod("
                        }
                    ],
                    "content": "doctest.testmod()"
                }
            ],
            "content": ">twos_complement(-1)\n'0b11'\n>>>twos_complement(-5)\n'0b1011'\n>>>twos_complement(-17)\n'0b101111'\n>>>twos_complement(-207)\n'0b100110001'\n>>>twos_complement(1)\nTraceback(most recent call last):\n...\nValueError:input must be a negative integer\n\"\"\" \\n     if number > 0: \\n         raise ValueError(\" input must be a negative integer \") \\n     binary_number_length = len(bin(number)[3:]) \\n     twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:] \\n     twos_complement_number = ( \\n         ( \\n             \"1\" \\n             + \"0\" * (binary_number_length - len(twos_complement_number)) \\n             + twos_complement_number \\n         ) \\n         if number < 0 \\n         else \"0\" \\n     ) \\n     return \"0b \" + twos_complement_number \\n  \\n  \\n if __name__ == \" __main__\":\nimport doctest\n\ndoctest.testmod()"
        }
    ],
    "content": "#Information on2's complement: https://en.wikipedia.org/wiki/Two%27s_complement \\n  \\n  \\n def twos_complement(number: int) -> str: \\n     \"\"\" \\n     Take in a negative integer ' number '. \\n     Return the two' s complement representation of 'number'.\n\n>>>twos_complement(0)\n'0b0'\n>>>twos_complement(-1)\n'0b11'\n>>>twos_complement(-5)\n'0b1011'\n>>>twos_complement(-17)\n'0b101111'\n>>>twos_complement(-207)\n'0b100110001'\n>>>twos_complement(1)\nTraceback(most recent call last):\n...\nValueError:input must be a negative integer\n\"\"\" \\n     if number > 0: \\n         raise ValueError(\" input must be a negative integer \") \\n     binary_number_length = len(bin(number)[3:]) \\n     twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:] \\n     twos_complement_number = ( \\n         ( \\n             \"1\" \\n             + \"0\" * (binary_number_length - len(twos_complement_number)) \\n             + twos_complement_number \\n         ) \\n         if number < 0 \\n         else \"0\" \\n     ) \\n     return \"0b \" + twos_complement_number \\n  \\n  \\n if __name__ == \" __main__\":\nimport doctest\n\ndoctest.testmod()"
}