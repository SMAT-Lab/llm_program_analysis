{
    "type": "Program",
    "name": "Global",
    "range": [
        67,
        1307
    ],
    "children": [
        {
            "type": "VariableDeclaration",
            "name": "PineconeCredentials",
            "range": [
                67,
                70
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        68,
                        69
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "APIKeyCredentials",
                            "range": [
                                69,
                                69
                            ],
                            "children": [],
                            "content": "APIKeyCredentials"
                        }
                    ],
                    "content": "=APIKeyCredentials"
                }
            ],
            "content": "PineconeCredentials=APIKeyCredentials\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "PineconeCredentialsInput",
            "range": [
                71,
                91
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        72,
                        73
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "CredentialsMetaInput",
                            "range": [
                                73,
                                73
                            ],
                            "children": [],
                            "content": "CredentialsMetaInput"
                        }
                    ],
                    "content": "=CredentialsMetaInput"
                },
                {
                    "type": "ArrayExpression",
                    "name": "",
                    "range": [
                        74,
                        90
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "",
                            "range": [
                                76,
                                81
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "",
                                    "range": [
                                        78,
                                        80
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "ProviderName",
                                            "range": [
                                                78,
                                                78
                                            ],
                                            "children": [],
                                            "content": "ProviderName"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "PINECONE",
                                            "range": [
                                                80,
                                                80
                                            ],
                                            "children": [],
                                            "content": "PINECONE"
                                        }
                                    ],
                                    "content": "ProviderName.PINECONE"
                                }
                            ],
                            "content": "Literal[ProviderName.PINECONE]"
                        },
                        {
                            "type": "StringLiteral",
                            "name": "api_key",
                            "range": [
                                84,
                                87
                            ],
                            "children": [],
                            "content": "Literal[\"api_key\"]"
                        }
                    ],
                    "content": "[\nLiteral[ProviderName.PINECONE],\nLiteral[\"api_key\"],\n]"
                }
            ],
            "content": "PineconeCredentialsInput=CredentialsMetaInput[\nLiteral[ProviderName.PINECONE],\nLiteral[\"api_key\"],\n]\n"
        },
        {
            "type": "FunctionDecl",
            "name": "PineconeCredentialsField",
            "range": [
                92,
                115
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "PineconeCredentialsField",
                    "range": [
                        92,
                        98
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                92,
                                92
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "PineconeCredentialsField",
                            "range": [
                                93,
                                93
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "ReturnType",
                            "name": "-> PineconeCredentialsInput",
                            "range": [
                                96,
                                98
                            ],
                            "children": [],
                            "content": "()-"
                        }
                    ],
                    "content": "\n\ndef PineconeCredentialsField()-"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        99,
                        115
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "\"\"\"Creates a Pinecone credentials input on a block.\"\"\"",
                            "range": [
                                101,
                                103
                            ],
                            "children": [],
                            "content": ":\n\"\""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return CredentialsField",
                            "range": [
                                105,
                                106
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "return",
                                    "range": [
                                        105,
                                        105
                                    ],
                                    "children": [],
                                    "content": "\"\""
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "CredentialsField",
                                    "range": [
                                        106,
                                        106
                                    ],
                                    "children": [
                                        {
                                            "type": "NamedArgument",
                                            "name": "description=\"The Pinecone integration can be used with an API Key.\"",
                                            "range": [
                                                109,
                                                111
                                            ],
                                            "children": [],
                                            "content": "(\ndescription"
                                        }
                                    ],
                                    "content": "\n"
                                }
                            ],
                            "content": "\"\"\n"
                        }
                    ],
                    "content": ">PineconeCredentialsInput:\n\"\"\"Creates a Pinecone credentials input on a block.\"\"\"\nreturn CredentialsField(\ndescription=\"The Pinecone integration can be used with an API Key.\",\n"
                }
            ],
            "content": "\n\ndef PineconeCredentialsField()->PineconeCredentialsInput:\n\"\"\"Creates a Pinecone credentials input on a block.\"\"\"\nreturn CredentialsField(\ndescription=\"The Pinecone integration can be used with an API Key.\",\n"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                123,
                216
            ],
            "children": [
                {
                    "type": "VariableDecl",
                    "name": "credentials",
                    "range": [
                        130,
                        137
                    ],
                    "children": [],
                    "content": "BlockSchema):\ncredentials:PineconeCredentialsInput="
                },
                {
                    "type": "VariableDecl",
                    "name": "index_name",
                    "range": [
                        138,
                        148
                    ],
                    "children": [],
                    "content": "PineconeCredentialsField()\nindex_name:str=SchemaField(description"
                },
                {
                    "type": "VariableDecl",
                    "name": "dimension",
                    "range": [
                        149,
                        165
                    ],
                    "children": [],
                    "content": "=\"Name of the Pinecone index\")\ndimension:int=SchemaField(\ndescription=\"Dimension of the vectors\",default="
                },
                {
                    "type": "VariableDecl",
                    "name": "metric",
                    "range": [
                        166,
                        182
                    ],
                    "children": [],
                    "content": "768\n)\nmetric:str=SchemaField(\ndescription=\"Distance metric for the index\",default="
                },
                {
                    "type": "VariableDecl",
                    "name": "cloud",
                    "range": [
                        183,
                        199
                    ],
                    "children": [],
                    "content": "\"cosine\"\n)\ncloud:str=SchemaField(\ndescription=\"Cloud provider for serverless\",default="
                },
                {
                    "type": "VariableDecl",
                    "name": "region",
                    "range": [
                        200,
                        216
                    ],
                    "children": [],
                    "content": "\"aws\"\n)\nregion:str=SchemaField(\ndescription=\"Region for serverless\",default="
                }
            ],
            "content": "Block):\nclass Input(BlockSchema):\ncredentials:PineconeCredentialsInput=PineconeCredentialsField()\nindex_name:str=SchemaField(description=\"Name of the Pinecone index\")\ndimension:int=SchemaField(\ndescription=\"Dimension of the vectors\",default=768\n)\nmetric:str=SchemaField(\ndescription=\"Distance metric for the index\",default=\"cosine\"\n)\ncloud:str=SchemaField(\ndescription=\"Cloud provider for serverless\",default=\"aws\"\n)\nregion:str=SchemaField(\ndescription=\"Region for serverless\",default="
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                218,
                246
            ],
            "children": [
                {
                    "type": "VariableDecl",
                    "name": "index",
                    "range": [
                        225,
                        235
                    ],
                    "children": [],
                    "content": "BlockSchema):\nindex:str=SchemaField(description"
                },
                {
                    "type": "VariableDecl",
                    "name": "message",
                    "range": [
                        236,
                        246
                    ],
                    "children": [],
                    "content": "=\"Name of the initialized Pinecone index\")\nmessage:str=SchemaField(description"
                }
            ],
            "content": "\n)\n\nclass Output(BlockSchema):\nindex:str=SchemaField(description=\"Name of the initialized Pinecone index\")\nmessage:str=SchemaField(description"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                248,
                296
            ],
            "children": [],
            "content": "\"Status message\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\",\ndescription=\"Initializes a Pinecone index\",\ncategories={BlockCategory.LOGIC},\ninput_schema=PineconeInitBlock.Input,\noutput_schema=PineconeInitBlock.Output"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                298,
                454
            ],
            "children": [],
            "content": "\n)\n\ndef run(\nself,input_data:Input,*,credentials:APIKeyCredentials,**kwargs\n)->BlockOutput:\npc=Pinecone(api_key=credentials.api_key.get_secret_value())\n\ntry:\nexisting_indexes=pc.list_indexes()\nif input_data.index_name not in[index.name for index in existing_indexes]:\npc.create_index(\nname=input_data.index_name,\ndimension=input_data.dimension,\nmetric=input_data.metric,\nspec=ServerlessSpec(\ncloud=input_data.cloud,region=input_data.region\n),\n)\nmessage=f \"Created new index: {input_data.index_name}\"\nelse:\nmessage=f \"Using existing index: {input_data.index_name}\"\n\nyield \"index\",input_data.index_name\nyield \"message\",message\nexcept Exception as e:\nyield \"message\","
        },
        {
            "type": "ClassDecl",
            "name": "PineconeQueryBlock",
            "range": [
                455,
                461
            ],
            "children": [],
            "content": "f \"Error initializing Pinecone index: {str(e)}\"\n\n\nclass PineconeQueryBlock"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                462,
                468
            ],
            "children": [],
            "content": "(Block):\nclass Input"
        },
        {
            "type": "VariableDecl",
            "name": "credentials",
            "range": [
                469,
                476
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        470,
                        471
                    ],
                    "children": [],
                    "content": "BlockSchema)"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        472,
                        475
                    ],
                    "children": [],
                    "content": ":\ncredentials:"
                }
            ],
            "content": "(BlockSchema):\ncredentials:PineconeCredentialsInput"
        },
        {
            "type": "VariableDecl",
            "name": "query_vector",
            "range": [
                477,
                487
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        478,
                        479
                    ],
                    "children": [],
                    "content": "PineconeCredentialsField("
                },
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        480,
                        486
                    ],
                    "children": [],
                    "content": ")\nquery_vector:list=SchemaField"
                }
            ],
            "content": "=PineconeCredentialsField()\nquery_vector:list=SchemaField("
        },
        {
            "type": "VariableDecl",
            "name": "namespace",
            "range": [
                488,
                504
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        489,
                        490
                    ],
                    "children": [],
                    "content": "=\"Query vector\""
                },
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        491,
                        503
                    ],
                    "children": [],
                    "content": ")\nnamespace:str=SchemaField(\ndescription=\"Namespace to query in Pinecone\","
                }
            ],
            "content": "description=\"Query vector\")\nnamespace:str=SchemaField(\ndescription=\"Namespace to query in Pinecone\",default"
        },
        {
            "type": "VariableDecl",
            "name": "top_k",
            "range": [
                505,
                521
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        506,
                        507
                    ],
                    "children": [],
                    "content": "\"\"\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        508,
                        520
                    ],
                    "children": [],
                    "content": ")\ntop_k:int=SchemaField(\ndescription=\"Number of top results to return\","
                }
            ],
            "content": "=\"\"\n)\ntop_k:int=SchemaField(\ndescription=\"Number of top results to return\",default"
        },
        {
            "type": "VariableDecl",
            "name": "include_values",
            "range": [
                522,
                540
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        523,
                        524
                    ],
                    "children": [],
                    "content": "3\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        525,
                        539
                    ],
                    "children": [],
                    "content": ")\ninclude_values:bool=SchemaField(\ndescription=\"Whether to include vector values in the response\",\ndefault"
                }
            ],
            "content": "=3\n)\ninclude_values:bool=SchemaField(\ndescription=\"Whether to include vector values in the response\",\ndefault="
        },
        {
            "type": "VariableDecl",
            "name": "include_metadata",
            "range": [
                541,
                557
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        542,
                        543
                    ],
                    "children": [],
                    "content": ",\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        544,
                        556
                    ],
                    "children": [],
                    "content": ")\ninclude_metadata:bool=SchemaField(\ndescription=\"Whether to include metadata in the response\","
                }
            ],
            "content": "False,\n)\ninclude_metadata:bool=SchemaField(\ndescription=\"Whether to include metadata in the response\",default"
        },
        {
            "type": "VariableDecl",
            "name": "host",
            "range": [
                558,
                572
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        559,
                        560
                    ],
                    "children": [],
                    "content": "True\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        561,
                        571
                    ],
                    "children": [],
                    "content": ")\nhost:str=SchemaField(description=\"Host for pinecone\""
                }
            ],
            "content": "=True\n)\nhost:str=SchemaField(description=\"Host for pinecone\","
        },
        {
            "type": "VariableDecl",
            "name": "idx_name",
            "range": [
                573,
                583
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        574,
                        575
                    ],
                    "children": [],
                    "content": "=\"\""
                },
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        576,
                        582
                    ],
                    "children": [],
                    "content": ")\nidx_name:str=SchemaField"
                }
            ],
            "content": "default=\"\")\nidx_name:str=SchemaField("
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                585,
                591
            ],
            "children": [],
            "content": "=\"Index name for pinecone\")\n\nclass Output"
        },
        {
            "type": "VariableDecl",
            "name": "results",
            "range": [
                592,
                602
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        593,
                        594
                    ],
                    "children": [],
                    "content": "BlockSchema)"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        595,
                        601
                    ],
                    "children": [],
                    "content": ":\nresults:Any=SchemaField"
                }
            ],
            "content": "(BlockSchema):\nresults:Any=SchemaField("
        },
        {
            "type": "VariableDecl",
            "name": "combined_results",
            "range": [
                603,
                615
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        604,
                        605
                    ],
                    "children": [],
                    "content": "=\"Query results from Pinecone\""
                },
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        606,
                        614
                    ],
                    "children": [],
                    "content": ")\ncombined_results:Any=SchemaField(\n"
                }
            ],
            "content": "description=\"Query results from Pinecone\")\ncombined_results:Any=SchemaField(\ndescription"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                617,
                665
            ],
            "children": [
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        623,
                        665
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                624,
                                665
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "",
                                    "range": [
                                        624,
                                        665
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "",
                                            "range": [
                                                624,
                                                629
                                            ],
                                            "children": [],
                                            "content": "(self):\nsuper"
                                        },
                                        {
                                            "type": "Arguments",
                                            "name": "",
                                            "range": [
                                                629,
                                                665
                                            ],
                                            "children": [],
                                            "content": "super().__init__(\nid=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\ndescription=\"Queries a Pinecone index\",\ncategories={BlockCategory.LOGIC},\ninput_schema=PineconeQueryBlock.Input,\noutput_schema=PineconeQueryBlock."
                                        }
                                    ],
                                    "content": "(self):\nsuper().__init__(\nid=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\ndescription=\"Queries a Pinecone index\",\ncategories={BlockCategory.LOGIC},\ninput_schema=PineconeQueryBlock.Input,\noutput_schema=PineconeQueryBlock."
                                }
                            ],
                            "content": "(self):\nsuper().__init__(\nid=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\ndescription=\"Queries a Pinecone index\",\ncategories={BlockCategory.LOGIC},\ninput_schema=PineconeQueryBlock.Input,\noutput_schema=PineconeQueryBlock."
                        }
                    ],
                    "content": "__init__(self):\nsuper().__init__(\nid=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\ndescription=\"Queries a Pinecone index\",\ncategories={BlockCategory.LOGIC},\ninput_schema=PineconeQueryBlock.Input,\noutput_schema=PineconeQueryBlock."
                }
            ],
            "content": "\"Combined results from Pinecone\"\n)\n\ndef __init__(self):\nsuper().__init__(\nid=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\ndescription=\"Queries a Pinecone index\",\ncategories={BlockCategory.LOGIC},\ninput_schema=PineconeQueryBlock.Input,\noutput_schema=PineconeQueryBlock."
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                667,
                955
            ],
            "children": [
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        697,
                        955
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                698,
                                955
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        700,
                                        935
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                701,
                                                722
                                            ],
                                            "children": [
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "",
                                                    "range": [
                                                        708,
                                                        721
                                                    ],
                                                    "children": [],
                                                    "content": "a new client instance\npc=Pinecone(api_key=credentials.api_key"
                                                }
                                            ],
                                            "content": ":\ntry:\n#Create a new client instance\npc=Pinecone(api_key=credentials.api_key."
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                724,
                                                739
                                            ],
                                            "children": [
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "",
                                                    "range": [
                                                        729,
                                                        738
                                                    ],
                                                    "children": [],
                                                    "content": "#Get the index\nidx=pc.Index"
                                                }
                                            ],
                                            "content": "())\n\n#Get the index\nidx=pc.Index("
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "",
                                            "range": [
                                                741,
                                                790
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "",
                                                    "range": [
                                                        770,
                                                        790
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "IfStatement",
                                                            "name": "",
                                                            "range": [
                                                                771,
                                                                789
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "BlockStatement",
                                                                    "name": "",
                                                                    "range": [
                                                                        782,
                                                                        789
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "name": "",
                                                                            "range": [
                                                                                783,
                                                                                789
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "AssignmentExpression",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        783,
                                                                                        789
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": ",list):\nquery_vector="
                                                                                }
                                                                            ],
                                                                            "content": ",list):\nquery_vector="
                                                                        }
                                                                    ],
                                                                    "content": "],list):\nquery_vector="
                                                                }
                                                            ],
                                                            "content": ")>0:\nif isinstance(query_vector[0],list):\nquery_vector="
                                                        }
                                                    ],
                                                    "content": "query_vector)>0:\nif isinstance(query_vector[0],list):\nquery_vector=query_vector"
                                                }
                                            ],
                                            "content": ".idx_name)\n\n#Ensure query_vector is in correct format\nquery_vector=input_data.query_vector\nif isinstance(query_vector,list)and len(query_vector)>0:\nif isinstance(query_vector[0],list):\nquery_vector=query_vector"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                791,
                                                836
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "",
                                                    "range": [
                                                        791,
                                                        836
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "",
                                                            "range": [
                                                                791,
                                                                796
                                                            ],
                                                            "children": [],
                                                            "content": "[0]\n\nresults"
                                                        },
                                                        {
                                                            "type": "Arguments",
                                                            "name": "",
                                                            "range": [
                                                                796,
                                                                836
                                                            ],
                                                            "children": [],
                                                            "content": "results=idx.query(\nnamespace=input_data.namespace,\nvector=query_vector,\ntop_k=input_data.top_k,\ninclude_values=input_data.include_values,\ninclude_metadata=input_data.include_metadata,\n)"
                                                        }
                                                    ],
                                                    "content": "[0]\n\nresults=idx.query(\nnamespace=input_data.namespace,\nvector=query_vector,\ntop_k=input_data.top_k,\ninclude_values=input_data.include_values,\ninclude_metadata=input_data.include_metadata,\n)"
                                                }
                                            ],
                                            "content": "[0]\n\nresults=idx.query(\nnamespace=input_data.namespace,\nvector=query_vector,\ntop_k=input_data.top_k,\ninclude_values=input_data.include_values,\ninclude_metadata=input_data.include_metadata,\n)"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                841,
                                                898
                                            ],
                                            "children": [
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "",
                                                    "range": [
                                                        890,
                                                        898
                                                    ],
                                                    "children": [],
                                                    "content": "\"text\")\n]\ncombined_text=\"\\n\\n\"."
                                                }
                                            ],
                                            "content": "#type:ignore\ncombined_text=\"\"\nif results[\"matches\"]:\ntexts=[\nmatch[\"metadata\"][\"text\"]\nfor match in results[\"matches\"]\nif match.get(\"metadata\",{}).get(\"text\")\n]\ncombined_text=\"\\n\\n\"."
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                910,
                                                929
                                            ],
                                            "children": [
                                                {
                                                    "type": "YieldExpression",
                                                    "name": "",
                                                    "range": [
                                                        910,
                                                        929
                                                    ],
                                                    "children": [],
                                                    "content": "matches and combined text\nyield \"results\",{\n\"matches\":results[\"matches\"],\n\"combined_text\":"
                                                }
                                            ],
                                            "content": "matches and combined text\nyield \"results\",{\n\"matches\":results[\"matches\"],\n\"combined_text\":"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                930,
                                                934
                                            ],
                                            "children": [
                                                {
                                                    "type": "YieldExpression",
                                                    "name": "",
                                                    "range": [
                                                        930,
                                                        934
                                                    ],
                                                    "children": [],
                                                    "content": "combined_text,\n}\n"
                                                }
                                            ],
                                            "content": "combined_text,\n}\n"
                                        }
                                    ],
                                    "content": "BlockOutput:\ntry:\n#Create a new client instance\npc=Pinecone(api_key=credentials.api_key.get_secret_value())\n\n#Get the index\nidx=pc.Index(input_data.idx_name)\n\n#Ensure query_vector is in correct format\nquery_vector=input_data.query_vector\nif isinstance(query_vector,list)and len(query_vector)>0:\nif isinstance(query_vector[0],list):\nquery_vector=query_vector[0]\n\nresults=idx.query(\nnamespace=input_data.namespace,\nvector=query_vector,\ntop_k=input_data.top_k,\ninclude_values=input_data.include_values,\ninclude_metadata=input_data.include_metadata,\n).to_dict()#type:ignore\ncombined_text=\"\"\nif results[\"matches\"]:\ntexts=[\nmatch[\"metadata\"][\"text\"]\nfor match in results[\"matches\"]\nif match.get(\"metadata\",{}).get(\"text\")\n]\ncombined_text=\"\\n\\n\".join(texts)\n\n#Return both the raw matches and combined text\nyield \"results\",{\n\"matches\":results[\"matches\"],\n\"combined_text\":combined_text,\n}\nyield"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "",
                                    "range": [
                                        936,
                                        955
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                940,
                                                955
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        942,
                                                        946
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "",
                                                            "range": [
                                                                942,
                                                                946
                                                            ],
                                                            "children": [],
                                                            "content": "Exception as e:\n"
                                                        }
                                                    ],
                                                    "content": "Exception as e:\n"
                                                },
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "",
                                                    "range": [
                                                        947,
                                                        954
                                                    ],
                                                    "children": [],
                                                    "content": "error_msg=f \"Error querying Pinecone: {str(e)}\"\nraise RuntimeError("
                                                }
                                            ],
                                            "content": "\nexcept Exception as e:\nerror_msg=f \"Error querying Pinecone: {str(e)}\"\nraise RuntimeError(error_msg"
                                        }
                                    ],
                                    "content": "\"combined_results\",combined_text\n\nexcept Exception as e:\nerror_msg=f \"Error querying Pinecone: {str(e)}\"\nraise RuntimeError(error_msg"
                                }
                            ],
                            "content": "->BlockOutput:\ntry:\n#Create a new client instance\npc=Pinecone(api_key=credentials.api_key.get_secret_value())\n\n#Get the index\nidx=pc.Index(input_data.idx_name)\n\n#Ensure query_vector is in correct format\nquery_vector=input_data.query_vector\nif isinstance(query_vector,list)and len(query_vector)>0:\nif isinstance(query_vector[0],list):\nquery_vector=query_vector[0]\n\nresults=idx.query(\nnamespace=input_data.namespace,\nvector=query_vector,\ntop_k=input_data.top_k,\ninclude_values=input_data.include_values,\ninclude_metadata=input_data.include_metadata,\n).to_dict()#type:ignore\ncombined_text=\"\"\nif results[\"matches\"]:\ntexts=[\nmatch[\"metadata\"][\"text\"]\nfor match in results[\"matches\"]\nif match.get(\"metadata\",{}).get(\"text\")\n]\ncombined_text=\"\\n\\n\".join(texts)\n\n#Return both the raw matches and combined text\nyield \"results\",{\n\"matches\":results[\"matches\"],\n\"combined_text\":combined_text,\n}\nyield \"combined_results\",combined_text\n\nexcept Exception as e:\nerror_msg=f \"Error querying Pinecone: {str(e)}\"\nraise RuntimeError(error_msg"
                        }
                    ],
                    "content": ")->BlockOutput:\ntry:\n#Create a new client instance\npc=Pinecone(api_key=credentials.api_key.get_secret_value())\n\n#Get the index\nidx=pc.Index(input_data.idx_name)\n\n#Ensure query_vector is in correct format\nquery_vector=input_data.query_vector\nif isinstance(query_vector,list)and len(query_vector)>0:\nif isinstance(query_vector[0],list):\nquery_vector=query_vector[0]\n\nresults=idx.query(\nnamespace=input_data.namespace,\nvector=query_vector,\ntop_k=input_data.top_k,\ninclude_values=input_data.include_values,\ninclude_metadata=input_data.include_metadata,\n).to_dict()#type:ignore\ncombined_text=\"\"\nif results[\"matches\"]:\ntexts=[\nmatch[\"metadata\"][\"text\"]\nfor match in results[\"matches\"]\nif match.get(\"metadata\",{}).get(\"text\")\n]\ncombined_text=\"\\n\\n\".join(texts)\n\n#Return both the raw matches and combined text\nyield \"results\",{\n\"matches\":results[\"matches\"],\n\"combined_text\":combined_text,\n}\nyield \"combined_results\",combined_text\n\nexcept Exception as e:\nerror_msg=f \"Error querying Pinecone: {str(e)}\"\nraise RuntimeError(error_msg"
                }
            ],
            "content": ",\n)\n\ndef run(\nself,\ninput_data:Input,\n*,\ncredentials:APIKeyCredentials,\n**kwargs,\n)->BlockOutput:\ntry:\n#Create a new client instance\npc=Pinecone(api_key=credentials.api_key.get_secret_value())\n\n#Get the index\nidx=pc.Index(input_data.idx_name)\n\n#Ensure query_vector is in correct format\nquery_vector=input_data.query_vector\nif isinstance(query_vector,list)and len(query_vector)>0:\nif isinstance(query_vector[0],list):\nquery_vector=query_vector[0]\n\nresults=idx.query(\nnamespace=input_data.namespace,\nvector=query_vector,\ntop_k=input_data.top_k,\ninclude_values=input_data.include_values,\ninclude_metadata=input_data.include_metadata,\n).to_dict()#type:ignore\ncombined_text=\"\"\nif results[\"matches\"]:\ntexts=[\nmatch[\"metadata\"][\"text\"]\nfor match in results[\"matches\"]\nif match.get(\"metadata\",{}).get(\"text\")\n]\ncombined_text=\"\\n\\n\".join(texts)\n\n#Return both the raw matches and combined text\nyield \"results\",{\n\"matches\":results[\"matches\"],\n\"combined_text\":combined_text,\n}\nyield \"combined_results\",combined_text\n\nexcept Exception as e:\nerror_msg=f \"Error querying Pinecone: {str(e)}\"\nraise RuntimeError(error_msg"
        },
        {
            "type": "ClassDecl",
            "name": "PineconeInsertBlock",
            "range": [
                956,
                962
            ],
            "children": [
                {
                    "type": "ClassBody",
                    "name": "",
                    "range": [
                        962,
                        962
                    ],
                    "children": [],
                    "content": "class"
                }
            ],
            "content": ")from e\n\n\nclass"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                963,
                969
            ],
            "children": [
                {
                    "type": "ClassBody",
                    "name": "",
                    "range": [
                        968,
                        969
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "credentials",
                            "range": [
                                970,
                                977
                            ],
                            "children": [],
                            "content": "Input(BlockSchema):\ncredentials:"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "index",
                            "range": [
                                978,
                                988
                            ],
                            "children": [],
                            "content": "PineconeCredentialsInput=PineconeCredentialsField()\nindex:str=SchemaField"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "chunks",
                            "range": [
                                989,
                                999
                            ],
                            "children": [],
                            "content": "(description=\"Initialized Pinecone index\")\nchunks:list=SchemaField"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "embeddings",
                            "range": [
                                1000,
                                1012
                            ],
                            "children": [],
                            "content": "(description=\"List of text chunks to ingest\")\nembeddings:list=SchemaField(\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "namespace",
                            "range": [
                                1013,
                                1029
                            ],
                            "children": [],
                            "content": "description=\"List of embeddings corresponding to the chunks\"\n)\nnamespace:str=SchemaField(\ndescription=\"Namespace to use in Pinecone\","
                        },
                        {
                            "type": "VariableDecl",
                            "name": "metadata",
                            "range": [
                                1030,
                                1047
                            ],
                            "children": [],
                            "content": "default=\"\"\n)\nmetadata:dict=SchemaField(\ndescription=\"Additional metadata to store with each vector\",default"
                        }
                    ],
                    "content": "\nclass"
                }
            ],
            "content": "PineconeInsertBlock(Block):\nclass"
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                1049,
                1055
            ],
            "children": [
                {
                    "type": "ClassBody",
                    "name": "",
                    "range": [
                        1054,
                        1055
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "upsert_response",
                            "range": [
                                1056,
                                1068
                            ],
                            "children": [],
                            "content": "Output(BlockSchema):\nupsert_response:str=SchemaField(\n"
                        }
                    ],
                    "content": "\nclass"
                }
            ],
            "content": "{}\n)\n\nclass"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                1070,
                1118
            ],
            "children": [
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        1075,
                        1118
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                1077,
                                1080
                            ],
                            "children": [],
                            "content": "__init__(self)"
                        },
                        {
                            "type": "CallExpression",
                            "name": "__init__",
                            "range": [
                                1081,
                                1117
                            ],
                            "children": [],
                            "content": ":\nsuper().__init__(\nid=\"477f2168-cd91-475a-8146-9499a5982434\",\ndescription=\"Upload data to a Pinecone index\",\ncategories={BlockCategory.LOGIC},\ninput_schema=PineconeInsertBlock.Input,\noutput_schema="
                        }
                    ],
                    "content": "\ndef __init__(self):\nsuper().__init__(\nid=\"477f2168-cd91-475a-8146-9499a5982434\",\ndescription=\"Upload data to a Pinecone index\",\ncategories={BlockCategory.LOGIC},\ninput_schema=PineconeInsertBlock.Input,\noutput_schema=PineconeInsertBlock"
                }
            ],
            "content": "=\"Response from Pinecone upsert operation\"\n)\n\ndef __init__(self):\nsuper().__init__(\nid=\"477f2168-cd91-475a-8146-9499a5982434\",\ndescription=\"Upload data to a Pinecone index\",\ncategories={BlockCategory.LOGIC},\ninput_schema=PineconeInsertBlock.Input,\noutput_schema=PineconeInsertBlock"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                1120,
                1306
            ],
            "children": [
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        1149,
                        1306
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                1151,
                                1306
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        1153,
                                        1287
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "name": "pc",
                                            "range": [
                                                1161,
                                                1175
                                            ],
                                            "children": [],
                                            "content": "Create a new client instance\npc=Pinecone(api_key=credentials.api_key"
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "idx",
                                            "range": [
                                                1182,
                                                1192
                                            ],
                                            "children": [],
                                            "content": "\n#Get the index\nidx=pc.Index"
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "vectors",
                                            "range": [
                                                1194,
                                                1198
                                            ],
                                            "children": [],
                                            "content": "input_data.index)\n"
                                        },
                                        {
                                            "type": "ForStatement",
                                            "name": "",
                                            "range": [
                                                1199,
                                                1265
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "",
                                                    "range": [
                                                        1215,
                                                        1265
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "VariableDecl",
                                                            "name": "vector_metadata",
                                                            "range": [
                                                                1216,
                                                                1225
                                                            ],
                                                            "children": [],
                                                            "content": "input_data.embeddings):\nvector_metadata=input_data."
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "",
                                                            "range": [
                                                                1226,
                                                                1232
                                                            ],
                                                            "children": [],
                                                            "content": "metadata.copy()\nvector_metadata"
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "append",
                                                            "range": [
                                                                1233,
                                                                1264
                                                            ],
                                                            "children": [],
                                                            "content": "[\"text\"]=chunk\nvectors.append(\n{\n\"id\":str(uuid.uuid4()),\n\"values\":embedding,\n\"metadata\":"
                                                        }
                                                    ],
                                                    "content": ",input_data.embeddings):\nvector_metadata=input_data.metadata.copy()\nvector_metadata[\"text\"]=chunk\nvectors.append(\n{\n\"id\":str(uuid.uuid4()),\n\"values\":embedding,\n\"metadata\":vector_metadata"
                                                }
                                            ],
                                            "content": "\nvectors=[]\nfor chunk,embedding in zip(input_data.chunks,input_data.embeddings):\nvector_metadata=input_data.metadata.copy()\nvector_metadata[\"text\"]=chunk\nvectors.append(\n{\n\"id\":str(uuid.uuid4()),\n\"values\":embedding,\n\"metadata\":vector_metadata"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "upsert",
                                            "range": [
                                                1266,
                                                1280
                                            ],
                                            "children": [],
                                            "content": ",\n}\n)\nidx.upsert(vectors=vectors,namespace"
                                        },
                                        {
                                            "type": "YieldExpression",
                                            "name": "",
                                            "range": [
                                                1282,
                                                1286
                                            ],
                                            "children": [],
                                            "content": "input_data.namespace)\n"
                                        }
                                    ],
                                    "content": ">BlockOutput:\ntry:\n#Create a new client instance\npc=Pinecone(api_key=credentials.api_key.get_secret_value())\n\n#Get the index\nidx=pc.Index(input_data.index)\n\nvectors=[]\nfor chunk,embedding in zip(input_data.chunks,input_data.embeddings):\nvector_metadata=input_data.metadata.copy()\nvector_metadata[\"text\"]=chunk\nvectors.append(\n{\n\"id\":str(uuid.uuid4()),\n\"values\":embedding,\n\"metadata\":vector_metadata,\n}\n)\nidx.upsert(vectors=vectors,namespace=input_data.namespace)\n\n"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "",
                                    "range": [
                                        1288,
                                        1306
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                1293,
                                                1306
                                            ],
                                            "children": [
                                                {
                                                    "type": "VariableDecl",
                                                    "name": "error_msg",
                                                    "range": [
                                                        1294,
                                                        1298
                                                    ],
                                                    "children": [],
                                                    "content": "except Exception as e:"
                                                },
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "",
                                                    "range": [
                                                        1299,
                                                        1306
                                                    ],
                                                    "children": [],
                                                    "content": "\nerror_msg=f \"Error uploading to Pinecone: {str(e)}\"\nraise RuntimeError"
                                                }
                                            ],
                                            "content": "\nexcept Exception as e:\nerror_msg=f \"Error uploading to Pinecone: {str(e)}\"\nraise RuntimeError"
                                        }
                                    ],
                                    "content": "yield \"upsert_response\",\"successfully upserted\"\n\nexcept Exception as e:\nerror_msg=f \"Error uploading to Pinecone: {str(e)}\"\nraise RuntimeError"
                                }
                            ],
                            "content": ")->BlockOutput:\ntry:\n#Create a new client instance\npc=Pinecone(api_key=credentials.api_key.get_secret_value())\n\n#Get the index\nidx=pc.Index(input_data.index)\n\nvectors=[]\nfor chunk,embedding in zip(input_data.chunks,input_data.embeddings):\nvector_metadata=input_data.metadata.copy()\nvector_metadata[\"text\"]=chunk\nvectors.append(\n{\n\"id\":str(uuid.uuid4()),\n\"values\":embedding,\n\"metadata\":vector_metadata,\n}\n)\nidx.upsert(vectors=vectors,namespace=input_data.namespace)\n\nyield \"upsert_response\",\"successfully upserted\"\n\nexcept Exception as e:\nerror_msg=f \"Error uploading to Pinecone: {str(e)}\"\nraise RuntimeError"
                        }
                    ],
                    "content": ",\n)->BlockOutput:\ntry:\n#Create a new client instance\npc=Pinecone(api_key=credentials.api_key.get_secret_value())\n\n#Get the index\nidx=pc.Index(input_data.index)\n\nvectors=[]\nfor chunk,embedding in zip(input_data.chunks,input_data.embeddings):\nvector_metadata=input_data.metadata.copy()\nvector_metadata[\"text\"]=chunk\nvectors.append(\n{\n\"id\":str(uuid.uuid4()),\n\"values\":embedding,\n\"metadata\":vector_metadata,\n}\n)\nidx.upsert(vectors=vectors,namespace=input_data.namespace)\n\nyield \"upsert_response\",\"successfully upserted\"\n\nexcept Exception as e:\nerror_msg=f \"Error uploading to Pinecone: {str(e)}\"\nraise RuntimeError"
                }
            ],
            "content": "Output,\n)\n\ndef run(\nself,\ninput_data:Input,\n*,\ncredentials:APIKeyCredentials,\n**kwargs,\n)->BlockOutput:\ntry:\n#Create a new client instance\npc=Pinecone(api_key=credentials.api_key.get_secret_value())\n\n#Get the index\nidx=pc.Index(input_data.index)\n\nvectors=[]\nfor chunk,embedding in zip(input_data.chunks,input_data.embeddings):\nvector_metadata=input_data.metadata.copy()\nvector_metadata[\"text\"]=chunk\nvectors.append(\n{\n\"id\":str(uuid.uuid4()),\n\"values\":embedding,\n\"metadata\":vector_metadata,\n}\n)\nidx.upsert(vectors=vectors,namespace=input_data.namespace)\n\nyield \"upsert_response\",\"successfully upserted\"\n\nexcept Exception as e:\nerror_msg=f \"Error uploading to Pinecone: {str(e)}\"\nraise RuntimeError"
        }
    ],
    "content": "PineconeCredentials=APIKeyCredentials\nPineconeCredentialsInput=CredentialsMetaInput[\nLiteral[ProviderName.PINECONE],\nLiteral[\"api_key\"],\n]\n\n\ndef PineconeCredentialsField()->PineconeCredentialsInput:\n\"\"\"Creates a Pinecone credentials input on a block.\"\"\"\nreturn CredentialsField(\ndescription=\"The Pinecone integration can be used with an API Key.\",\n)\n\n\nclass PineconeInitBlock(Block):\nclass Input(BlockSchema):\ncredentials:PineconeCredentialsInput=PineconeCredentialsField()\nindex_name:str=SchemaField(description=\"Name of the Pinecone index\")\ndimension:int=SchemaField(\ndescription=\"Dimension of the vectors\",default=768\n)\nmetric:str=SchemaField(\ndescription=\"Distance metric for the index\",default=\"cosine\"\n)\ncloud:str=SchemaField(\ndescription=\"Cloud provider for serverless\",default=\"aws\"\n)\nregion:str=SchemaField(\ndescription=\"Region for serverless\",default=\"us-east-1\"\n)\n\nclass Output(BlockSchema):\nindex:str=SchemaField(description=\"Name of the initialized Pinecone index\")\nmessage:str=SchemaField(description=\"Status message\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\",\ndescription=\"Initializes a Pinecone index\",\ncategories={BlockCategory.LOGIC},\ninput_schema=PineconeInitBlock.Input,\noutput_schema=PineconeInitBlock.Output,\n)\n\ndef run(\nself,input_data:Input,*,credentials:APIKeyCredentials,**kwargs\n)->BlockOutput:\npc=Pinecone(api_key=credentials.api_key.get_secret_value())\n\ntry:\nexisting_indexes=pc.list_indexes()\nif input_data.index_name not in[index.name for index in existing_indexes]:\npc.create_index(\nname=input_data.index_name,\ndimension=input_data.dimension,\nmetric=input_data.metric,\nspec=ServerlessSpec(\ncloud=input_data.cloud,region=input_data.region\n),\n)\nmessage=f \"Created new index: {input_data.index_name}\"\nelse:\nmessage=f \"Using existing index: {input_data.index_name}\"\n\nyield \"index\",input_data.index_name\nyield \"message\",message\nexcept Exception as e:\nyield \"message\",f \"Error initializing Pinecone index: {str(e)}\"\n\n\nclass PineconeQueryBlock(Block):\nclass Input(BlockSchema):\ncredentials:PineconeCredentialsInput=PineconeCredentialsField()\nquery_vector:list=SchemaField(description=\"Query vector\")\nnamespace:str=SchemaField(\ndescription=\"Namespace to query in Pinecone\",default=\"\"\n)\ntop_k:int=SchemaField(\ndescription=\"Number of top results to return\",default=3\n)\ninclude_values:bool=SchemaField(\ndescription=\"Whether to include vector values in the response\",\ndefault=False,\n)\ninclude_metadata:bool=SchemaField(\ndescription=\"Whether to include metadata in the response\",default=True\n)\nhost:str=SchemaField(description=\"Host for pinecone\",default=\"\")\nidx_name:str=SchemaField(description=\"Index name for pinecone\")\n\nclass Output(BlockSchema):\nresults:Any=SchemaField(description=\"Query results from Pinecone\")\ncombined_results:Any=SchemaField(\ndescription=\"Combined results from Pinecone\"\n)\n\ndef __init__(self):\nsuper().__init__(\nid=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\ndescription=\"Queries a Pinecone index\",\ncategories={BlockCategory.LOGIC},\ninput_schema=PineconeQueryBlock.Input,\noutput_schema=PineconeQueryBlock.Output,\n)\n\ndef run(\nself,\ninput_data:Input,\n*,\ncredentials:APIKeyCredentials,\n**kwargs,\n)->BlockOutput:\ntry:\n#Create a new client instance\npc=Pinecone(api_key=credentials.api_key.get_secret_value())\n\n#Get the index\nidx=pc.Index(input_data.idx_name)\n\n#Ensure query_vector is in correct format\nquery_vector=input_data.query_vector\nif isinstance(query_vector,list)and len(query_vector)>0:\nif isinstance(query_vector[0],list):\nquery_vector=query_vector[0]\n\nresults=idx.query(\nnamespace=input_data.namespace,\nvector=query_vector,\ntop_k=input_data.top_k,\ninclude_values=input_data.include_values,\ninclude_metadata=input_data.include_metadata,\n).to_dict()#type:ignore\ncombined_text=\"\"\nif results[\"matches\"]:\ntexts=[\nmatch[\"metadata\"][\"text\"]\nfor match in results[\"matches\"]\nif match.get(\"metadata\",{}).get(\"text\")\n]\ncombined_text=\"\\n\\n\".join(texts)\n\n#Return both the raw matches and combined text\nyield \"results\",{\n\"matches\":results[\"matches\"],\n\"combined_text\":combined_text,\n}\nyield \"combined_results\",combined_text\n\nexcept Exception as e:\nerror_msg=f \"Error querying Pinecone: {str(e)}\"\nraise RuntimeError(error_msg)from e\n\n\nclass PineconeInsertBlock(Block):\nclass Input(BlockSchema):\ncredentials:PineconeCredentialsInput=PineconeCredentialsField()\nindex:str=SchemaField(description=\"Initialized Pinecone index\")\nchunks:list=SchemaField(description=\"List of text chunks to ingest\")\nembeddings:list=SchemaField(\ndescription=\"List of embeddings corresponding to the chunks\"\n)\nnamespace:str=SchemaField(\ndescription=\"Namespace to use in Pinecone\",default=\"\"\n)\nmetadata:dict=SchemaField(\ndescription=\"Additional metadata to store with each vector\",default={}\n)\n\nclass Output(BlockSchema):\nupsert_response:str=SchemaField(\ndescription=\"Response from Pinecone upsert operation\"\n)\n\ndef __init__(self):\nsuper().__init__(\nid=\"477f2168-cd91-475a-8146-9499a5982434\",\ndescription=\"Upload data to a Pinecone index\",\ncategories={BlockCategory.LOGIC},\ninput_schema=PineconeInsertBlock.Input,\noutput_schema=PineconeInsertBlock.Output,\n)\n\ndef run(\nself,\ninput_data:Input,\n*,\ncredentials:APIKeyCredentials,\n**kwargs,\n)->BlockOutput:\ntry:\n#Create a new client instance\npc=Pinecone(api_key=credentials.api_key.get_secret_value())\n\n#Get the index\nidx=pc.Index(input_data.index)\n\nvectors=[]\nfor chunk,embedding in zip(input_data.chunks,input_data.embeddings):\nvector_metadata=input_data.metadata.copy()\nvector_metadata[\"text\"]=chunk\nvectors.append(\n{\n\"id\":str(uuid.uuid4()),\n\"values\":embedding,\n\"metadata\":vector_metadata,\n}\n)\nidx.upsert(vectors=vectors,namespace=input_data.namespace)\n\nyield \"upsert_response\",\"successfully upserted\"\n\nexcept Exception as e:\nerror_msg=f \"Error uploading to Pinecone: {str(e)}\"\nraise RuntimeError("
}