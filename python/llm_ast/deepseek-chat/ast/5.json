{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        246
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                1,
                1
            ],
            "children": [
                {
                    "type": "Text",
                    "name": "",
                    "range": [
                        1,
                        1
                    ],
                    "children": [],
                    "content": "\" \\n The sum-of-subsetsproblem states that a set of non-negative integers, and a \\n value M, determine all possible subsets of the given set whose summation sum \\n equal to given M. \\n  \\n Summation of the chosen numbers must be equal to given number M and one number \\n can be used only once. \\n \""
                }
            ],
            "content": "\" \\n The sum-of-subsetsproblem states that a set of non-negative integers, and a \\n value M, determine all possible subsets of the given set whose summation sum \\n equal to given M. \\n  \\n Summation of the chosen numbers must be equal to given number M and one number \\n can be used only once. \\n \""
        },
        {
            "type": "NewLine",
            "name": "",
            "range": [
                3,
                3
            ],
            "children": [],
            "content": "\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "annotations",
            "range": [
                4,
                8
            ],
            "children": [
                {
                    "type": "ModuleSpecifier",
                    "name": "__future__",
                    "range": [
                        5,
                        5
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "annotations",
                    "range": [
                        7,
                        7
                    ],
                    "children": [],
                    "content": "import"
                }
            ],
            "content": "\nfrom __future__ import annotations"
        },
        {
            "type": "FunctionDecl",
            "name": "generate_sum_of_subsets_soln",
            "range": [
                9,
                85
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        11,
                        22
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "nums",
                            "range": [
                                12,
                                17
                            ],
                            "children": [],
                            "content": "def generate_sum_of_subsets_soln(nums:list"
                        },
                        {
                            "type": "Parameter",
                            "name": "max_sum",
                            "range": [
                                19,
                                21
                            ],
                            "children": [],
                            "content": "int],"
                        }
                    ],
                    "content": "\ndef generate_sum_of_subsets_soln(nums:list[int],max_sum"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        23,
                        31
                    ],
                    "children": [],
                    "content": ":int)->list[list["
                },
                {
                    "type": "VariableDecl",
                    "name": "result",
                    "range": [
                        34,
                        45
                    ],
                    "children": [],
                    "content": "]:\nresult:list[list[int]]"
                },
                {
                    "type": "VariableDecl",
                    "name": "path",
                    "range": [
                        47,
                        55
                    ],
                    "children": [],
                    "content": "[]\npath:list[int]"
                },
                {
                    "type": "AssignmentExpr",
                    "name": "num_index",
                    "range": [
                        57,
                        59
                    ],
                    "children": [],
                    "content": "[]\n"
                },
                {
                    "type": "AssignmentExpr",
                    "name": "remaining_nums_sum",
                    "range": [
                        61,
                        66
                    ],
                    "children": [],
                    "content": "=0\nremaining_nums_sum=sum"
                },
                {
                    "type": "CallExpr",
                    "name": "create_state_space_tree",
                    "range": [
                        68,
                        81
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "nums",
                            "range": [
                                70,
                                70
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Argument",
                            "name": "max_sum",
                            "range": [
                                72,
                                72
                            ],
                            "children": [],
                            "content": "("
                        },
                        {
                            "type": "Argument",
                            "name": "num_index",
                            "range": [
                                74,
                                74
                            ],
                            "children": [],
                            "content": ","
                        },
                        {
                            "type": "Argument",
                            "name": "path",
                            "range": [
                                76,
                                76
                            ],
                            "children": [],
                            "content": ","
                        },
                        {
                            "type": "Argument",
                            "name": "result",
                            "range": [
                                78,
                                78
                            ],
                            "children": [],
                            "content": ","
                        },
                        {
                            "type": "Argument",
                            "name": "remaining_nums_sum",
                            "range": [
                                80,
                                80
                            ],
                            "children": [],
                            "content": ","
                        }
                    ],
                    "content": "nums)\ncreate_state_space_tree(nums,max_sum,num_index,path,result"
                },
                {
                    "type": "ReturnStmt",
                    "name": "return",
                    "range": [
                        83,
                        84
                    ],
                    "children": [],
                    "content": "remaining_nums_sum)"
                }
            ],
            "content": "\n\n\ndef generate_sum_of_subsets_soln(nums:list[int],max_sum:int)->list[list[int]]:\nresult:list[list[int]]=[]\npath:list[int]=[]\nnum_index=0\nremaining_nums_sum=sum(nums)\ncreate_state_space_tree(nums,max_sum,num_index,path,result,remaining_nums_sum)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "create_state_space_tree",
            "range": [
                86,
                234
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "range": [
                        88,
                        132
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "nums",
                            "range": [
                                90,
                                95
                            ],
                            "children": [],
                            "content": "\ndef create_state_space_tree(\nnums"
                        },
                        {
                            "type": "Parameter",
                            "name": "max_sum",
                            "range": [
                                98,
                                100
                            ],
                            "children": [],
                            "content": "[int]"
                        },
                        {
                            "type": "Parameter",
                            "name": "num_index",
                            "range": [
                                103,
                                105
                            ],
                            "children": [],
                            "content": "max_sum:int"
                        },
                        {
                            "type": "Parameter",
                            "name": "path",
                            "range": [
                                108,
                                113
                            ],
                            "children": [],
                            "content": "num_index:int,\npath"
                        },
                        {
                            "type": "Parameter",
                            "name": "result",
                            "range": [
                                116,
                                124
                            ],
                            "children": [],
                            "content": "[int],\nresult:list["
                        },
                        {
                            "type": "Parameter",
                            "name": "remaining_nums_sum",
                            "range": [
                                127,
                                129
                            ],
                            "children": [],
                            "content": "int]]"
                        }
                    ],
                    "content": "\n\n\ndef create_state_space_tree(\nnums:list[int],\nmax_sum:int,\nnum_index:int,\npath:list[int],\nresult:list[list[int]],\nremaining_nums_sum"
                },
                {
                    "type": "ReturnType",
                    "range": [
                        133,
                        135
                    ],
                    "children": [],
                    "content": ":int,"
                },
                {
                    "type": "Docstring",
                    "range": [
                        138,
                        140
                    ],
                    "children": [],
                    "content": "->None"
                },
                {
                    "type": "IfStatement",
                    "range": [
                        142,
                        163
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "range": [
                                143,
                                160
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "operator": ">",
                                    "range": [
                                        143,
                                        148
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "sum",
                                            "range": [
                                                143,
                                                146
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "path",
                                                    "range": [
                                                        145,
                                                        145
                                                    ],
                                                    "children": [],
                                                    "content": "\"\""
                                                }
                                            ],
                                            "content": "\"\"\" \\n     Creates a state space tree to iterate through each branch using DFS. \\n     It terminates the branching of a node when any of the two conditions \\n     given below satisfy. \\n     This algorithm follows depth-fist-search and backtracks when the node is not \\n     branchable. \\n  \\n     \"\"\"\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "max_sum",
                                            "range": [
                                                148,
                                                148
                                            ],
                                            "children": [],
                                            "content": "sum"
                                        }
                                    ],
                                    "content": "\"\"\" \\n     Creates a state space tree to iterate through each branch using DFS. \\n     It terminates the branching of a node when any of the two conditions \\n     given below satisfy. \\n     This algorithm follows depth-fist-search and backtracks when the node is not \\n     branchable. \\n  \\n     \"\"\"\nif sum"
                                },
                                {
                                    "type": "BinaryExpression",
                                    "operator": "<",
                                    "range": [
                                        150,
                                        159
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "range": [
                                                151,
                                                157
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "remaining_nums_sum",
                                                    "range": [
                                                        151,
                                                        151
                                                    ],
                                                    "children": [],
                                                    "content": ")"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "sum",
                                                    "range": [
                                                        153,
                                                        156
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "path",
                                                            "range": [
                                                                155,
                                                                155
                                                            ],
                                                            "children": [],
                                                            "content": "("
                                                        }
                                                    ],
                                                    "content": "max_sum or(remaining_nums_sum"
                                                }
                                            ],
                                            "content": ")>max_sum or(remaining_nums_sum+"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "max_sum",
                                            "range": [
                                                159,
                                                159
                                            ],
                                            "children": [],
                                            "content": "("
                                        }
                                    ],
                                    "content": "path)>max_sum or(remaining_nums_sum+sum("
                                }
                            ],
                            "content": "\"\"\" \\n     Creates a state space tree to iterate through each branch using DFS. \\n     It terminates the branching of a node when any of the two conditions \\n     given below satisfy. \\n     This algorithm follows depth-fist-search and backtracks when the node is not \\n     branchable. \\n  \\n     \"\"\"\nif sum(path)>max_sum or(remaining_nums_sum+sum(path"
                        },
                        {
                            "type": "ReturnStatement",
                            "range": [
                                162,
                                163
                            ],
                            "children": [],
                            "content": ")<"
                        }
                    ],
                    "content": "\n\"\"\" \\n     Creates a state space tree to iterate through each branch using DFS. \\n     It terminates the branching of a node when any of the two conditions \\n     given below satisfy. \\n     This algorithm follows depth-fist-search and backtracks when the node is not \\n     branchable. \\n  \\n     \"\"\"\nif sum(path)>max_sum or(remaining_nums_sum+sum(path))<"
                },
                {
                    "type": "IfStatement",
                    "range": [
                        164,
                        182
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "range": [
                                165,
                                172
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "operator": "==",
                                    "range": [
                                        165,
                                        171
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "sum",
                                            "range": [
                                                165,
                                                168
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "path",
                                                    "range": [
                                                        167,
                                                        167
                                                    ],
                                                    "children": [],
                                                    "content": "return"
                                                }
                                            ],
                                            "content": ":\nreturn\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "max_sum",
                                            "range": [
                                                171,
                                                171
                                            ],
                                            "children": [],
                                            "content": "("
                                        }
                                    ],
                                    "content": ":\nreturn\nif sum("
                                }
                            ],
                            "content": ":\nreturn\nif sum(path"
                        },
                        {
                            "type": "ExpressionStatement",
                            "range": [
                                174,
                                180
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "append",
                                    "range": [
                                        175,
                                        179
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "path",
                                            "range": [
                                                178,
                                                178
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "=max_sum:\nresult"
                                }
                            ],
                            "content": "==max_sum:\nresult."
                        },
                        {
                            "type": "ReturnStatement",
                            "range": [
                                181,
                                182
                            ],
                            "children": [],
                            "content": "append("
                        }
                    ],
                    "content": "max_sum:\nreturn\nif sum(path)==max_sum:\nresult.append("
                },
                {
                    "type": "ForStatement",
                    "range": [
                        183,
                        234
                    ],
                    "children": [
                        {
                            "type": "Initialization",
                            "range": [
                                184,
                                194
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclaration",
                                    "name": "index",
                                    "range": [
                                        184,
                                        184
                                    ],
                                    "children": [],
                                    "content": ")"
                                },
                                {
                                    "type": "RangeExpression",
                                    "range": [
                                        186,
                                        194
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "num_index",
                                            "range": [
                                                188,
                                                188
                                            ],
                                            "children": [],
                                            "content": "for"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "len",
                                            "range": [
                                                190,
                                                193
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "nums",
                                                    "range": [
                                                        192,
                                                        192
                                                    ],
                                                    "children": [],
                                                    "content": "("
                                                }
                                            ],
                                            "content": "in range(num_index"
                                        }
                                    ],
                                    "content": "return\nfor index in range(num_index,"
                                }
                            ],
                            "content": ")\nreturn\nfor index in range(num_index,"
                        },
                        {
                            "type": "Body",
                            "range": [
                                197,
                                233
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "create_state_space_tree",
                                    "range": [
                                        197,
                                        233
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "nums",
                                            "range": [
                                                200,
                                                200
                                            ],
                                            "children": [],
                                            "content": ":"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "max_sum",
                                            "range": [
                                                203,
                                                203
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "index + 1",
                                            "range": [
                                                206,
                                                208
                                            ],
                                            "children": [],
                                            "content": ",\nmax_sum"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "[*path, nums[index]]",
                                            "range": [
                                                211,
                                                219
                                            ],
                                            "children": [],
                                            "content": "index+1,\n[*path,"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "result",
                                            "range": [
                                                222,
                                                222
                                            ],
                                            "children": [],
                                            "content": "index"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "remaining_nums_sum - nums[index]",
                                            "range": [
                                                225,
                                                230
                                            ],
                                            "children": [],
                                            "content": ",\nresult,\nremaining_nums_sum"
                                        }
                                    ],
                                    "content": "nums)):\ncreate_state_space_tree(\nnums,\nmax_sum,\nindex+1,\n[*path,nums[index]],\nresult,\nremaining_nums_sum-nums["
                                }
                            ],
                            "content": "nums)):\ncreate_state_space_tree(\nnums,\nmax_sum,\nindex+1,\n[*path,nums[index]],\nresult,\nremaining_nums_sum-nums["
                        }
                    ],
                    "content": "path)\nreturn\nfor index in range(num_index,len(nums)):\ncreate_state_space_tree(\nnums,\nmax_sum,\nindex+1,\n[*path,nums[index]],\nresult,\nremaining_nums_sum-nums[index"
                }
            ],
            "content": "return result\n\n\ndef create_state_space_tree(\nnums:list[int],\nmax_sum:int,\nnum_index:int,\npath:list[int],\nresult:list[list[int]],\nremaining_nums_sum:int,\n)->None:\n\"\"\" \\n     Creates a state space tree to iterate through each branch using DFS. \\n     It terminates the branching of a node when any of the two conditions \\n     given below satisfy. \\n     This algorithm follows depth-fist-search and backtracks when the node is not \\n     branchable. \\n  \\n     \"\"\"\nif sum(path)>max_sum or(remaining_nums_sum+sum(path))<max_sum:\nreturn\nif sum(path)==max_sum:\nresult.append(path)\nreturn\nfor index in range(num_index,len(nums)):\ncreate_state_space_tree(\nnums,\nmax_sum,\nindex+1,\n[*path,nums[index]],\nresult,\nremaining_nums_sum-nums[index"
        },
        {
            "type": "Literal",
            "name": "",
            "range": [
                235,
                235
            ],
            "children": [],
            "content": "]"
        },
        {
            "type": "Literal",
            "name": "",
            "range": [
                236,
                244
            ],
            "children": [
                {
                    "type": "ExpressionStatement",
                    "name": "",
                    "range": [
                        236,
                        240
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "print",
                            "range": [
                                236,
                                240
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        236,
                                        240
                                    ],
                                    "children": [],
                                    "content": ",\n)\n\n"
                                }
                            ],
                            "content": ",\n)\n\n"
                        }
                    ],
                    "content": ",\n)\n\n"
                },
                {
                    "type": "VariableDeclaration",
                    "name": "nums",
                    "range": [
                        240,
                        240
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "",
                            "range": [
                                240,
                                240
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "map",
                                    "range": [
                                        240,
                                        240
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "int",
                                            "range": [
                                                240,
                                                240
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "input",
                                            "range": [
                                                240,
                                                240
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "\n"
                                }
                            ],
                            "content": "\n"
                        }
                    ],
                    "content": "\n"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "",
                    "range": [
                        240,
                        244
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "print",
                            "range": [
                                240,
                                244
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        240,
                                        244
                                    ],
                                    "children": [],
                                    "content": "\n\n\"\"\" \\n remove the comment to take an input from the user \\n  \\n print(\" Enter"
                                }
                            ],
                            "content": "\n\n\"\"\" \\n remove the comment to take an input from the user \\n  \\n print(\" Enter"
                        }
                    ],
                    "content": "\n\n\"\"\" \\n remove the comment to take an input from the user \\n  \\n print(\" Enter"
                },
                {
                    "type": "VariableDeclaration",
                    "name": "max_sum",
                    "range": [
                        244,
                        244
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "int",
                            "range": [
                                244,
                                244
                            ],
                            "children": [],
                            "content": "Enter"
                        },
                        {
                            "type": "CallExpression",
                            "name": "input",
                            "range": [
                                244,
                                244
                            ],
                            "children": [],
                            "content": "Enter"
                        }
                    ],
                    "content": "Enter"
                }
            ],
            "content": ",\n)\n\n\n\"\"\" \\n remove the comment to take an input from the user \\n  \\n print(\" Enter"
        },
        {
            "type": "Literal",
            "name": "",
            "range": [
                245,
                245
            ],
            "children": [],
            "content": "the"
        },
        {
            "type": "EmptyStatement",
            "name": "",
            "range": [
                246,
                246
            ],
            "children": [],
            "content": "elements"
        }
    ],
    "content": "\"\"\" \\n The sum-of-subsetsproblem states that a set of non-negative integers, and a \\n value M, determine all possible subsets of the given set whose summation sum \\n equal to given M. \\n  \\n Summation of the chosen numbers must be equal to given number M and one number \\n can be used only once. \\n \"\"\"\n\nfrom __future__ import annotations\n\n\ndef generate_sum_of_subsets_soln(nums:list[int],max_sum:int)->list[list[int]]:\nresult:list[list[int]]=[]\npath:list[int]=[]\nnum_index=0\nremaining_nums_sum=sum(nums)\ncreate_state_space_tree(nums,max_sum,num_index,path,result,remaining_nums_sum)\nreturn result\n\n\ndef create_state_space_tree(\nnums:list[int],\nmax_sum:int,\nnum_index:int,\npath:list[int],\nresult:list[list[int]],\nremaining_nums_sum:int,\n)->None:\n\"\"\" \\n     Creates a state space tree to iterate through each branch using DFS. \\n     It terminates the branching of a node when any of the two conditions \\n     given below satisfy. \\n     This algorithm follows depth-fist-search and backtracks when the node is not \\n     branchable. \\n  \\n     \"\"\"\nif sum(path)>max_sum or(remaining_nums_sum+sum(path))<max_sum:\nreturn\nif sum(path)==max_sum:\nresult.append(path)\nreturn\nfor index in range(num_index,len(nums)):\ncreate_state_space_tree(\nnums,\nmax_sum,\nindex+1,\n[*path,nums[index]],\nresult,\nremaining_nums_sum-nums[index],\n)\n\n\n\"\"\" \\n remove the comment to take an input from the user \\n  \\n print(\" Enter the elements"
}