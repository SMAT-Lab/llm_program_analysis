{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        924
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                2
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "logging",
                    "range": [
                        1,
                        1
                    ],
                    "children": [],
                    "content": "logging"
                }
            ],
            "content": "import logging\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                3,
                7
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "contextlib",
                    "range": [
                        4,
                        4
                    ],
                    "children": [],
                    "content": "contextlib"
                },
                {
                    "type": "ImportClause",
                    "name": "contextmanager",
                    "range": [
                        6,
                        6
                    ],
                    "children": [],
                    "content": "contextmanager"
                }
            ],
            "content": "from contextlib import contextmanager\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                8,
                12
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "datetime",
                    "range": [
                        9,
                        9
                    ],
                    "children": [],
                    "content": "datetime"
                },
                {
                    "type": "ImportClause",
                    "name": "datetime",
                    "range": [
                        11,
                        11
                    ],
                    "children": [],
                    "content": "datetime"
                }
            ],
            "content": "from datetime import datetime\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                13,
                17
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "typing",
                    "range": [
                        14,
                        14
                    ],
                    "children": [],
                    "content": "typing"
                },
                {
                    "type": "ImportClause",
                    "name": "TYPE_CHECKING",
                    "range": [
                        16,
                        16
                    ],
                    "children": [],
                    "content": "TYPE_CHECKING"
                }
            ],
            "content": "from typing import TYPE_CHECKING\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                19,
                27
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "autogpt_libs.utils.synchronize",
                    "range": [
                        20,
                        24
                    ],
                    "children": [],
                    "content": "autogpt_libs.utils.synchronize"
                },
                {
                    "type": "ImportClause",
                    "name": "RedisKeyedMutex",
                    "range": [
                        26,
                        26
                    ],
                    "children": [],
                    "content": "RedisKeyedMutex"
                }
            ],
            "content": "from autogpt_libs.utils.synchronize import RedisKeyedMutex\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                28,
                36
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "redis.lock",
                    "range": [
                        29,
                        31
                    ],
                    "children": [],
                    "content": "redis.lock"
                },
                {
                    "type": "ImportClause",
                    "name": "Lock",
                    "range": [
                        33,
                        33
                    ],
                    "children": [],
                    "content": "Lock"
                },
                {
                    "type": "Alias",
                    "name": "RedisLock",
                    "range": [
                        35,
                        35
                    ],
                    "children": [],
                    "content": "RedisLock"
                }
            ],
            "content": "from redis.lock import Lock as RedisLock\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                38,
                44
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "backend.data",
                    "range": [
                        39,
                        41
                    ],
                    "children": [],
                    "content": "backend.data"
                },
                {
                    "type": "ImportClause",
                    "name": "redis",
                    "range": [
                        43,
                        43
                    ],
                    "children": [],
                    "content": "redis"
                }
            ],
            "content": "from backend.data import redis\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                45,
                53
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "backend.data.model",
                    "range": [
                        46,
                        50
                    ],
                    "children": [],
                    "content": "backend.data.model"
                },
                {
                    "type": "ImportClause",
                    "name": "Credentials",
                    "range": [
                        52,
                        52
                    ],
                    "children": [],
                    "content": "Credentials"
                }
            ],
            "content": "from backend.data.model import Credentials\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                54,
                62
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "backend.integrations.credentials_store",
                    "range": [
                        55,
                        59
                    ],
                    "children": [],
                    "content": "backend.integrations.credentials_store"
                },
                {
                    "type": "ImportClause",
                    "name": "IntegrationCredentialsStore",
                    "range": [
                        61,
                        61
                    ],
                    "children": [],
                    "content": "IntegrationCredentialsStore"
                }
            ],
            "content": "from backend.integrations.credentials_store import IntegrationCredentialsStore\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                63,
                71
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "backend.integrations.oauth",
                    "range": [
                        64,
                        68
                    ],
                    "children": [],
                    "content": "backend.integrations.oauth"
                },
                {
                    "type": "ImportClause",
                    "name": "HANDLERS_BY_NAME",
                    "range": [
                        70,
                        70
                    ],
                    "children": [],
                    "content": "HANDLERS_BY_NAME"
                }
            ],
            "content": "from backend.integrations.oauth import HANDLERS_BY_NAME\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                72,
                80
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "backend.util.exceptions",
                    "range": [
                        73,
                        77
                    ],
                    "children": [],
                    "content": "backend.util.exceptions"
                },
                {
                    "type": "ImportClause",
                    "name": "MissingConfigError",
                    "range": [
                        79,
                        79
                    ],
                    "children": [],
                    "content": "MissingConfigError"
                }
            ],
            "content": "from backend.util.exceptions import MissingConfigError\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                81,
                89
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "backend.util.settings",
                    "range": [
                        82,
                        86
                    ],
                    "children": [],
                    "content": "backend.util.settings"
                },
                {
                    "type": "ImportClause",
                    "name": "Settings",
                    "range": [
                        88,
                        88
                    ],
                    "children": [],
                    "content": "Settings"
                }
            ],
            "content": "from backend.util.settings import Settings\n"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                91,
                103
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "TYPE_CHECKING",
                    "range": [
                        92,
                        92
                    ],
                    "children": [],
                    "content": "TYPE_CHECKING"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        93,
                        103
                    ],
                    "children": [
                        {
                            "type": "ImportDeclaration",
                            "name": "",
                            "range": [
                                95,
                                103
                            ],
                            "children": [
                                {
                                    "type": "FromClause",
                                    "name": "backend.integrations.oauth",
                                    "range": [
                                        96,
                                        100
                                    ],
                                    "children": [],
                                    "content": "backend.integrations.oauth"
                                },
                                {
                                    "type": "ImportClause",
                                    "name": "BaseOAuthHandler",
                                    "range": [
                                        102,
                                        102
                                    ],
                                    "children": [],
                                    "content": "BaseOAuthHandler"
                                }
                            ],
                            "content": "from backend.integrations.oauth import BaseOAuthHandler\n"
                        }
                    ],
                    "content": ":\nfrom backend.integrations.oauth import BaseOAuthHandler\n"
                }
            ],
            "content": "if TYPE_CHECKING:\nfrom backend.integrations.oauth import BaseOAuthHandler\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "logger",
            "range": [
                105,
                113
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        106,
                        112
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "logging.getLogger",
                            "range": [
                                107,
                                112
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "__name__",
                                    "range": [
                                        111,
                                        111
                                    ],
                                    "children": [],
                                    "content": "__name__"
                                }
                            ],
                            "content": "logging.getLogger(__name__)"
                        }
                    ],
                    "content": "=logging.getLogger(__name__)"
                }
            ],
            "content": "logger=logging.getLogger(__name__)\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "settings",
            "range": [
                114,
                119
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        115,
                        118
                    ],
                    "children": [
                        {
                            "type": "NewExpression",
                            "name": "Settings",
                            "range": [
                                116,
                                118
                            ],
                            "children": [],
                            "content": "Settings()"
                        }
                    ],
                    "content": "=Settings()"
                }
            ],
            "content": "settings=Settings()\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                132,
                163
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "redis_conn",
                    "range": [
                        139,
                        145
                    ],
                    "children": [],
                    "content": "\nredis_conn=redis.get_redis("
                },
                {
                    "type": "Assignment",
                    "name": "self._locks",
                    "range": [
                        147,
                        154
                    ],
                    "children": [],
                    "content": "\nself._locks=RedisKeyedMutex(redis_conn"
                },
                {
                    "type": "Assignment",
                    "name": "self.store",
                    "range": [
                        156,
                        162
                    ],
                    "children": [],
                    "content": "\nself.store=IntegrationCredentialsStore("
                }
            ],
            "content": "\ndef __init__(self):\nredis_conn=redis.get_redis()\nself._locks=RedisKeyedMutex(redis_conn)\nself.store=IntegrationCredentialsStore()"
        },
        {
            "type": "FunctionDecl",
            "name": "create",
            "range": [
                165,
                194
            ],
            "children": [
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        183,
                        193
                    ],
                    "children": [],
                    "content": "\nreturn self.store.add_creds(user_id,credentials"
                }
            ],
            "content": "\ndef create(self,user_id:str,credentials:Credentials)->None:\nreturn self.store.add_creds(user_id,credentials)"
        },
        {
            "type": "FunctionDecl",
            "name": "exists",
            "range": [
                196,
                228
            ],
            "children": [
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        214,
                        227
                    ],
                    "children": [],
                    "content": "\nreturn self.store.get_creds_by_id(user_id,credentials_id)is not"
                }
            ],
            "content": "\ndef exists(self,user_id:str,credentials_id:str)->bool:\nreturn self.store.get_creds_by_id(user_id,credentials_id)is not None"
        },
        {
            "type": "FunctionDecl",
            "name": "get",
            "range": [
                230,
                448
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "credentials",
                    "range": [
                        258,
                        269
                    ],
                    "children": [],
                    "content": "\ncredentials=self.store.get_creds_by_id(user_id,credentials_id"
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        271,
                        277
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                276,
                                277
                            ],
                            "children": [],
                            "content": "\nreturn"
                        }
                    ],
                    "content": "\nif not credentials:\nreturn"
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        287,
                        294
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "logger.debug",
                            "range": [
                                300,
                                314
                            ],
                            "children": [],
                            "content": "\nlogger.debug(\nf \"Credentials #{credentials.id} expire at \"\nf \"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\nf \"current time is {datetime.now()}\"\n"
                        },
                        {
                            "type": "WithStatement",
                            "name": "with",
                            "range": [
                                317,
                                328
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "oauth_handler",
                                    "range": [
                                        330,
                                        337
                                    ],
                                    "children": [],
                                    "content": "\noauth_handler=_get_provider_oauth_handler(credentials.provider"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "if",
                                    "range": [
                                        339,
                                        346
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "logger.debug",
                                            "range": [
                                                348,
                                                359
                                            ],
                                            "children": [],
                                            "content": "\nlogger.debug(\nf \"Refreshing '{credentials.provider}' \"\nf \"credentials #{credentials.id}\"\n"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if",
                                            "range": [
                                                365,
                                                367
                                            ],
                                            "children": [
                                                {
                                                    "type": "Assignment",
                                                    "name": "_lock",
                                                    "range": [
                                                        381,
                                                        390
                                                    ],
                                                    "children": [],
                                                    "content": "\n_lock=self._acquire_lock(user_id,credentials_id"
                                                }
                                            ],
                                            "content": "\nif lock"
                                        },
                                        {
                                            "type": "Assignment",
                                            "name": "fresh_credentials",
                                            "range": [
                                                393,
                                                400
                                            ],
                                            "children": [],
                                            "content": "\nfresh_credentials=oauth_handler.refresh_tokens(credentials"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "self.store.update_creds",
                                            "range": [
                                                402,
                                                411
                                            ],
                                            "children": [],
                                            "content": "\nself.store.update_creds(user_id,fresh_credentials"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if",
                                            "range": [
                                                413,
                                                421
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "_lock.release",
                                                    "range": [
                                                        423,
                                                        427
                                                    ],
                                                    "children": [],
                                                    "content": "\n_lock.release("
                                                }
                                            ],
                                            "content": "\nif _lock and _lock.locked()"
                                        },
                                        {
                                            "type": "Assignment",
                                            "name": "credentials",
                                            "range": [
                                                430,
                                                432
                                            ],
                                            "children": [],
                                            "content": "\ncredentials="
                                        }
                                    ],
                                    "content": "\nif oauth_handler.needs_refresh(credentials)"
                                }
                            ],
                            "content": "\nwith self._locked(user_id,credentials_id,\"refresh\")"
                        }
                    ],
                    "content": "\nif credentials.type==\"oauth2\""
                },
                {
                    "type": "ElseStatement",
                    "name": "else",
                    "range": [
                        434,
                        435
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "logger.debug",
                            "range": [
                                437,
                                443
                            ],
                            "children": [],
                            "content": "\nlogger.debug(f \"Credentials #{credentials.id} never expire\""
                        }
                    ],
                    "content": "\nelse"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        446,
                        447
                    ],
                    "children": [],
                    "content": "\nreturn"
                }
            ],
            "content": "\ndef get(\nself,user_id:str,credentials_id:str,lock:bool=True\n)->Credentials|None:\ncredentials=self.store.get_creds_by_id(user_id,credentials_id)\nif not credentials:\nreturn None\n\n#Refresh OAuth credentials if needed\nif credentials.type==\"oauth2\" and credentials.access_token_expires_at:\nlogger.debug(\nf \"Credentials #{credentials.id} expire at \"\nf \"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\nf \"current time is {datetime.now()}\"\n)\n\nwith self._locked(user_id,credentials_id,\"refresh\"):\noauth_handler=_get_provider_oauth_handler(credentials.provider)\nif oauth_handler.needs_refresh(credentials):\nlogger.debug(\nf \"Refreshing '{credentials.provider}' \"\nf \"credentials #{credentials.id}\"\n)\n_lock=None\nif lock:\n#Wait until the credentials are no longer in use anywhere\n_lock=self._acquire_lock(user_id,credentials_id)\n\nfresh_credentials=oauth_handler.refresh_tokens(credentials)\nself.store.update_creds(user_id,fresh_credentials)\nif _lock and _lock.locked():\n_lock.release()\n\ncredentials=fresh_credentials\nelse:\nlogger.debug(f \"Credentials #{credentials.id} never expire\")\n\nreturn credentials"
        },
        {
            "type": "FunctionDecl",
            "name": "acquire",
            "range": [
                450,
                568
            ],
            "children": [
                {
                    "type": "WithStatement",
                    "name": "with",
                    "range": [
                        511,
                        522
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "lock",
                            "range": [
                                524,
                                533
                            ],
                            "children": [],
                            "content": "\nlock=self._acquire_lock(user_id,credentials_id"
                        },
                        {
                            "type": "Assignment",
                            "name": "credentials",
                            "range": [
                                535,
                                548
                            ],
                            "children": [],
                            "content": "\ncredentials=self.get(user_id,credentials_id,lock=False"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                550,
                                553
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise",
                                    "range": [
                                        555,
                                        562
                                    ],
                                    "children": [],
                                    "content": "\nraise ValueError(\nf \"Credentials #{credentials_id} for user #{user_id} not found\"\n"
                                }
                            ],
                            "content": "\nif not credentials"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                564,
                                567
                            ],
                            "children": [],
                            "content": "\nreturn credentials,"
                        }
                    ],
                    "content": "\nwith self._locked(user_id,credentials_id,\"!time_sensitive\")"
                }
            ],
            "content": "\ndef acquire(\nself,user_id:str,credentials_id:str\n)->tuple[Credentials,RedisLock]:\n\"\"\" \\n         ⚠️ WARNING: this locks credentials system-wide and blocks both acquiring \\n         and updating them elsewhere until the lock is released. \\n         See the class docstring for more info. \\n         \"\"\"\n#Use a low-priority(!time_sensitive)locking queue on top of the general lock\n#to allow priority access for refreshing/updating the tokens.\nwith self._locked(user_id,credentials_id,\"!time_sensitive\"):\nlock=self._acquire_lock(user_id,credentials_id)\ncredentials=self.get(user_id,credentials_id,lock=False)\nif not credentials:\nraise ValueError(\nf \"Credentials #{credentials_id} for user #{user_id} not found\"\n)\nreturn credentials,lock"
        },
        {
            "type": "FunctionDecl",
            "name": "update",
            "range": [
                570,
                611
            ],
            "children": [
                {
                    "type": "WithStatement",
                    "name": "with",
                    "range": [
                        588,
                        599
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "self.store.update_creds",
                            "range": [
                                601,
                                610
                            ],
                            "children": [],
                            "content": "\nself.store.update_creds(user_id,updated"
                        }
                    ],
                    "content": "\nwith self._locked(user_id,updated.id)"
                }
            ],
            "content": "\ndef update(self,user_id:str,updated:Credentials)->None:\nwith self._locked(user_id,updated.id):\nself.store.update_creds(user_id,updated)"
        },
        {
            "type": "FunctionDecl",
            "name": "delete",
            "range": [
                613,
                652
            ],
            "children": [
                {
                    "type": "WithStatement",
                    "name": "with",
                    "range": [
                        631,
                        640
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "self.store.delete_creds_by_id",
                            "range": [
                                642,
                                651
                            ],
                            "children": [],
                            "content": "\nself.store.delete_creds_by_id(user_id,credentials_id"
                        }
                    ],
                    "content": "\nwith self._locked(user_id,credentials_id)"
                }
            ],
            "content": "\ndef delete(self,user_id:str,credentials_id:str)->None:\nwith self._locked(user_id,credentials_id):\nself.store.delete_creds_by_id(user_id,credentials_id)"
        },
        {
            "type": "FunctionDecl",
            "name": "_acquire_lock",
            "range": [
                664,
                714
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "key",
                    "range": [
                        687,
                        703
                    ],
                    "children": [],
                    "content": "\nkey=(\nf \"user:{user_id}\",\nf \"credentials:{credentials_id}\",\n*args,\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        705,
                        713
                    ],
                    "children": [],
                    "content": "\nreturn self._locks.acquire(key"
                }
            ],
            "content": "\ndef _acquire_lock(self,user_id:str,credentials_id:str,*args:str)->RedisLock:\nkey=(\nf \"user:{user_id}\",\nf \"credentials:{credentials_id}\",\n*args,\n)\nreturn self._locks.acquire(key)"
        },
        {
            "type": "FunctionDecl",
            "name": "_locked",
            "range": [
                719,
                774
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "lock",
                    "range": [
                        739,
                        751
                    ],
                    "children": [],
                    "content": "\nlock=self._acquire_lock(user_id,credentials_id,*args"
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        753,
                        754
                    ],
                    "children": [
                        {
                            "type": "YieldStatement",
                            "name": "yield",
                            "range": [
                                756,
                                757
                            ],
                            "children": [],
                            "content": "\nyield"
                        }
                    ],
                    "content": "\ntry"
                },
                {
                    "type": "FinallyStatement",
                    "name": "finally",
                    "range": [
                        758,
                        759
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                761,
                                767
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "lock.release",
                                    "range": [
                                        769,
                                        773
                                    ],
                                    "children": [],
                                    "content": "\nlock.release("
                                }
                            ],
                            "content": "\nif lock.locked()"
                        }
                    ],
                    "content": "\nfinally"
                }
            ],
            "content": "\ndef _locked(self,user_id:str,credentials_id:str,*args:str):\nlock=self._acquire_lock(user_id,credentials_id,*args)\ntry:\nyield\nfinally:\nif lock.locked():\nlock.release()"
        },
        {
            "type": "FunctionDecl",
            "name": "release_all_locks",
            "range": [
                776,
                804
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "self._locks.release_all_locks",
                    "range": [
                        787,
                        793
                    ],
                    "children": [],
                    "content": "\nself._locks.release_all_locks("
                },
                {
                    "type": "CallExpression",
                    "name": "self.store.locks.release_all_locks",
                    "range": [
                        795,
                        803
                    ],
                    "children": [],
                    "content": "\nself.store.locks.release_all_locks("
                }
            ],
            "content": "\ndef release_all_locks(self):\n\"\"\"Call this on process termination to ensure all locks are released\"\"\"\nself._locks.release_all_locks()\nself.store.locks.release_all_locks()"
        },
        {
            "type": "FunctionDecl",
            "name": "_get_provider_oauth_handler",
            "range": [
                806,
                923
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "provider_name",
                    "range": [
                        809,
                        811
                    ],
                    "children": [],
                    "content": "_get_provider_oauth_handler(provider_name"
                },
                {
                    "type": "ReturnType",
                    "name": "BaseOAuthHandler",
                    "range": [
                        813,
                        815
                    ],
                    "children": [],
                    "content": "str)-"
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        818,
                        831
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                819,
                                822
                            ],
                            "children": [],
                            "content": "\nif provider_name not"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "",
                            "range": [
                                825,
                                830
                            ],
                            "children": [
                                {
                                    "type": "Exception",
                                    "name": "KeyError",
                                    "range": [
                                        826,
                                        830
                                    ],
                                    "children": [],
                                    "content": "\nraise KeyError(f"
                                }
                            ],
                            "content": ":\nraise KeyError(f"
                        }
                    ],
                    "content": ":\nif provider_name not in HANDLERS_BY_NAME:\nraise KeyError(f \"Unknown provider '{provider_name}'\""
                },
                {
                    "type": "Assignment",
                    "name": "client_id",
                    "range": [
                        833,
                        843
                    ],
                    "children": [],
                    "content": "\n\nclient_id=getattr(settings.secrets,f"
                },
                {
                    "type": "Assignment",
                    "name": "client_secret",
                    "range": [
                        845,
                        855
                    ],
                    "children": [],
                    "content": ")\nclient_secret=getattr(settings.secrets,f"
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        857,
                        875
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                858,
                                863
                            ],
                            "children": [],
                            "content": "\nif not(client_id and"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "",
                            "range": [
                                866,
                                874
                            ],
                            "children": [
                                {
                                    "type": "Exception",
                                    "name": "MissingConfigError",
                                    "range": [
                                        867,
                                        874
                                    ],
                                    "children": [],
                                    "content": "\nraise MissingConfigError(\nf \"Integration with provider '{provider_name}' is not configured\","
                                }
                            ],
                            "content": ":\nraise MissingConfigError(\nf \"Integration with provider '{provider_name}' is not configured\","
                        }
                    ],
                    "content": ")\nif not(client_id and client_secret):\nraise MissingConfigError(\nf \"Integration with provider '{provider_name}' is not configured\",\n"
                },
                {
                    "type": "Assignment",
                    "name": "handler_class",
                    "range": [
                        877,
                        882
                    ],
                    "children": [],
                    "content": "\n\nhandler_class=HANDLERS_BY_NAME["
                },
                {
                    "type": "Assignment",
                    "name": "frontend_base_url",
                    "range": [
                        884,
                        900
                    ],
                    "children": [],
                    "content": "]\nfrontend_base_url=(\nsettings.config.frontend_base_url or settings.config.platform_base_url"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        902,
                        922
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "handler_class",
                            "range": [
                                903,
                                922
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "client_id",
                                    "range": [
                                        906,
                                        908
                                    ],
                                    "children": [],
                                    "content": "(\nclient_id"
                                },
                                {
                                    "type": "Argument",
                                    "name": "client_secret",
                                    "range": [
                                        911,
                                        913
                                    ],
                                    "children": [],
                                    "content": ",\nclient_secret"
                                },
                                {
                                    "type": "Argument",
                                    "name": "redirect_uri",
                                    "range": [
                                        916,
                                        919
                                    ],
                                    "children": [],
                                    "content": ",\nredirect_uri="
                                }
                            ],
                            "content": "\nreturn handler_class(\nclient_id=client_id,\nclient_secret=client_secret,\nredirect_uri=f \"{frontend_base_url}/auth/integrations/oauth_callback\","
                        }
                    ],
                    "content": ")\nreturn handler_class(\nclient_id=client_id,\nclient_secret=client_secret,\nredirect_uri=f \"{frontend_base_url}/auth/integrations/oauth_callback\","
                }
            ],
            "content": "\n\ndef _get_provider_oauth_handler(provider_name:str)->\"BaseOAuthHandler\":\nif provider_name not in HANDLERS_BY_NAME:\nraise KeyError(f \"Unknown provider '{provider_name}'\")\n\nclient_id=getattr(settings.secrets,f \"{provider_name}_client_id\")\nclient_secret=getattr(settings.secrets,f \"{provider_name}_client_secret\")\nif not(client_id and client_secret):\nraise MissingConfigError(\nf \"Integration with provider '{provider_name}' is not configured\",\n)\n\nhandler_class=HANDLERS_BY_NAME[provider_name]\nfrontend_base_url=(\nsettings.config.frontend_base_url or settings.config.platform_base_url\n)\nreturn handler_class(\nclient_id=client_id,\nclient_secret=client_secret,\nredirect_uri=f \"{frontend_base_url}/auth/integrations/oauth_callback\",\n"
        }
    ],
    "content": "import logging\nfrom contextlib import contextmanager\nfrom datetime import datetime\nfrom typing import TYPE_CHECKING\n\nfrom autogpt_libs.utils.synchronize import RedisKeyedMutex\nfrom redis.lock import Lock as RedisLock\n\nfrom backend.data import redis\nfrom backend.data.model import Credentials\nfrom backend.integrations.credentials_store import IntegrationCredentialsStore\nfrom backend.integrations.oauth import HANDLERS_BY_NAME\nfrom backend.util.exceptions import MissingConfigError\nfrom backend.util.settings import Settings\n\nif TYPE_CHECKING:\nfrom backend.integrations.oauth import BaseOAuthHandler\n\nlogger=logging.getLogger(__name__)\nsettings=Settings()\n\n\nclass IntegrationCredentialsManager:\n\"\"\" \\n     Handles the lifecycle of integration credentials. \\n     - Automatically refreshes requested credentials if needed. \\n     - Uses locking mechanisms to ensure system-wide consistency and \\n       prevent invalidation of in-use tokens. \\n  \\n     ### ⚠️ Gotcha \\n     With `acquire(..)`, credentials can only be in use in one place at a time (e.g. one \\n     block execution). \\n  \\n     ### Locking mechanism \\n     - Because *getting* credentials can result in a refresh (= *invalidation* + \\n       *replacement*) of the stored credentials, *getting* is an operation that \\n       potentially requires read/write access. \\n     - Checking whether a token has to be refreshed is subject to an additional `refresh` \\n       scoped lock to prevent unnecessary sequential refreshes when multiple executions \\n       try to access the same credentials simultaneously. \\n     - We MUST lock credentials while in use to prevent them from being invalidated while \\n       they are in use, e.g. because they are being refreshed by a different part \\n       of the system. \\n     - The `!time_sensitive` lock in `acquire(..)` is part of a two-tier locking \\n       mechanism in which *updating* gets priority over *getting* credentials. \\n       This is to prevent a long queue of waiting *get* requests from blocking essential \\n       credential refreshes or user-initiated updates. \\n  \\n     It is possible to implement a reader/writer locking system where either multiple \\n     readers or a single writer can have simultaneous access, but this would add a lot of \\n     complexity to the mechanism. I don't expect the current (\" simple \") mechanism to \\n     cause so much latency that it's worth implementing. \\n     \"\"\"\n\ndef __init__(self):\nredis_conn=redis.get_redis()\nself._locks=RedisKeyedMutex(redis_conn)\nself.store=IntegrationCredentialsStore()\n\ndef create(self,user_id:str,credentials:Credentials)->None:\nreturn self.store.add_creds(user_id,credentials)\n\ndef exists(self,user_id:str,credentials_id:str)->bool:\nreturn self.store.get_creds_by_id(user_id,credentials_id)is not None\n\ndef get(\nself,user_id:str,credentials_id:str,lock:bool=True\n)->Credentials|None:\ncredentials=self.store.get_creds_by_id(user_id,credentials_id)\nif not credentials:\nreturn None\n\n#Refresh OAuth credentials if needed\nif credentials.type==\"oauth2\" and credentials.access_token_expires_at:\nlogger.debug(\nf \"Credentials #{credentials.id} expire at \"\nf \"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\nf \"current time is {datetime.now()}\"\n)\n\nwith self._locked(user_id,credentials_id,\"refresh\"):\noauth_handler=_get_provider_oauth_handler(credentials.provider)\nif oauth_handler.needs_refresh(credentials):\nlogger.debug(\nf \"Refreshing '{credentials.provider}' \"\nf \"credentials #{credentials.id}\"\n)\n_lock=None\nif lock:\n#Wait until the credentials are no longer in use anywhere\n_lock=self._acquire_lock(user_id,credentials_id)\n\nfresh_credentials=oauth_handler.refresh_tokens(credentials)\nself.store.update_creds(user_id,fresh_credentials)\nif _lock and _lock.locked():\n_lock.release()\n\ncredentials=fresh_credentials\nelse:\nlogger.debug(f \"Credentials #{credentials.id} never expire\")\n\nreturn credentials\n\ndef acquire(\nself,user_id:str,credentials_id:str\n)->tuple[Credentials,RedisLock]:\n\"\"\" \\n         ⚠️ WARNING: this locks credentials system-wide and blocks both acquiring \\n         and updating them elsewhere until the lock is released. \\n         See the class docstring for more info. \\n         \"\"\"\n#Use a low-priority(!time_sensitive)locking queue on top of the general lock\n#to allow priority access for refreshing/updating the tokens.\nwith self._locked(user_id,credentials_id,\"!time_sensitive\"):\nlock=self._acquire_lock(user_id,credentials_id)\ncredentials=self.get(user_id,credentials_id,lock=False)\nif not credentials:\nraise ValueError(\nf \"Credentials #{credentials_id} for user #{user_id} not found\"\n)\nreturn credentials,lock\n\ndef update(self,user_id:str,updated:Credentials)->None:\nwith self._locked(user_id,updated.id):\nself.store.update_creds(user_id,updated)\n\ndef delete(self,user_id:str,credentials_id:str)->None:\nwith self._locked(user_id,credentials_id):\nself.store.delete_creds_by_id(user_id,credentials_id)\n\n#--Locking utilities--#\n\ndef _acquire_lock(self,user_id:str,credentials_id:str,*args:str)->RedisLock:\nkey=(\nf \"user:{user_id}\",\nf \"credentials:{credentials_id}\",\n*args,\n)\nreturn self._locks.acquire(key)\n\n@contextmanager\ndef _locked(self,user_id:str,credentials_id:str,*args:str):\nlock=self._acquire_lock(user_id,credentials_id,*args)\ntry:\nyield\nfinally:\nif lock.locked():\nlock.release()\n\ndef release_all_locks(self):\n\"\"\"Call this on process termination to ensure all locks are released\"\"\"\nself._locks.release_all_locks()\nself.store.locks.release_all_locks()\n\n\ndef _get_provider_oauth_handler(provider_name:str)->\"BaseOAuthHandler\":\nif provider_name not in HANDLERS_BY_NAME:\nraise KeyError(f \"Unknown provider '{provider_name}'\")\n\nclient_id=getattr(settings.secrets,f \"{provider_name}_client_id\")\nclient_secret=getattr(settings.secrets,f \"{provider_name}_client_secret\")\nif not(client_id and client_secret):\nraise MissingConfigError(\nf \"Integration with provider '{provider_name}' is not configured\",\n)\n\nhandler_class=HANDLERS_BY_NAME[provider_name]\nfrontend_base_url=(\nsettings.config.frontend_base_url or settings.config.platform_base_url\n)\nreturn handler_class(\nclient_id=client_id,\nclient_secret=client_secret,\nredirect_uri=f \"{frontend_base_url}/auth/integrations/oauth_callback\",\n)"
}