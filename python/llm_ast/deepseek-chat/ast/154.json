{
    "type": "Program",
    "name": "Global",
    "range": [
        55,
        793
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                61,
                100
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        64,
                        64
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "Parameter",
                    "name": "code",
                    "range": [
                        66,
                        68
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                68,
                                68
                            ],
                            "children": [],
                            "content": "int"
                        }
                    ],
                    "content": "code:int"
                },
                {
                    "type": "Parameter",
                    "name": "headers",
                    "range": [
                        70,
                        72
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "dict",
                            "range": [
                                72,
                                72
                            ],
                            "children": [],
                            "content": "dict"
                        }
                    ],
                    "content": "headers:dict"
                },
                {
                    "type": "Parameter",
                    "name": "text",
                    "range": [
                        74,
                        76
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                76,
                                76
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "text:str"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        80,
                        80
                    ],
                    "children": [],
                    "content": "None"
                },
                {
                    "type": "Assignment",
                    "name": "status_code",
                    "range": [
                        83,
                        87
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "code",
                            "range": [
                                87,
                                87
                            ],
                            "children": [],
                            "content": "code"
                        }
                    ],
                    "content": "self.status_code=code"
                },
                {
                    "type": "Assignment",
                    "name": "headers",
                    "range": [
                        89,
                        93
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "headers",
                            "range": [
                                93,
                                93
                            ],
                            "children": [],
                            "content": "headers"
                        }
                    ],
                    "content": "self.headers=headers"
                },
                {
                    "type": "Assignment",
                    "name": "text",
                    "range": [
                        95,
                        99
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "text",
                            "range": [
                                99,
                                99
                            ],
                            "children": [],
                            "content": "text"
                        }
                    ],
                    "content": "self.text=text"
                }
            ],
            "content": "def __init__(self,code:int,headers:dict,text:str)->None:\nself.status_code=code\nself.headers=headers\nself.text=text\n"
        },
        {
            "type": "FunctionDecl",
            "name": "setUp",
            "range": [
                112,
                195
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "self.duplicate_links",
                    "range": [
                        119,
                        137
                    ],
                    "children": [],
                    "content": "\nself.duplicate_links=[\n'https://www.example.com',\n'https://www.example.com',\n'https://www.example.com',\n'https://www.anotherexample.com',\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "self.no_duplicate_links",
                    "range": [
                        139,
                        154
                    ],
                    "children": [],
                    "content": "\nself.no_duplicate_links=[\n'https://www.firstexample.com',\n'https://www.secondexample.com',\n'https://www.anotherexample.com',\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "self.code_200",
                    "range": [
                        156,
                        162
                    ],
                    "children": [],
                    "content": "\n\nself.code_200=200"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "self.code_403",
                    "range": [
                        163,
                        168
                    ],
                    "children": [],
                    "content": "\nself.code_403=403"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "self.code_503",
                    "range": [
                        169,
                        174
                    ],
                    "children": [],
                    "content": "\nself.code_503=503"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "self.cloudflare_headers",
                    "range": [
                        175,
                        185
                    ],
                    "children": [],
                    "content": "\n\nself.cloudflare_headers={'Server':'cloudflare'}"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "self.no_cloudflare_headers",
                    "range": [
                        186,
                        195
                    ],
                    "children": [],
                    "content": "\nself.no_cloudflare_headers={'Server':'google'}"
                }
            ],
            "content": "\ndef setUp(self):\nself.duplicate_links=[\n'https://www.example.com',\n'https://www.example.com',\n'https://www.example.com',\n'https://www.anotherexample.com',\n]\nself.no_duplicate_links=[\n'https://www.firstexample.com',\n'https://www.secondexample.com',\n'https://www.anotherexample.com',\n]\n\nself.code_200=200\nself.code_403=403\nself.code_503=503\n\nself.cloudflare_headers={'Server':'cloudflare'}\nself.no_cloudflare_headers={'Server':'google'}"
        },
        {
            "type": "FunctionDecl",
            "name": "test_find_link_in_text",
            "range": [
                210,
                277
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "text",
                    "range": [
                        217,
                        221
                    ],
                    "children": [],
                    "content": "\ntext=\"\"\" \\n             # this is valid \\n  \\n             http://example.com?param1=1&param2=2#anchor \\n             https://www.example.com?param1=1&param2=2#anchor \\n             https://www.example.com.br \\n             https://www.example.com.gov.br \\n             [Example](https://www.example.com?param1=1&param2=2#anchor) \\n             lorem ipsum https://www.example.com?param1=1&param2=2#anchor \\n             https://www.example.com?param1=1&param2=2#anchor lorem ipsum \\n  \\n             # this not is valid \\n  \\n             example.com \\n             https:example.com \\n             https:/example.com \\n             https//example.com \\n             https//.com \\n         \""
                },
                {
                    "type": "CallExpression",
                    "name": "find_links_in_text",
                    "range": [
                        224,
                        230
                    ],
                    "children": [],
                    "content": "\nlinks=find_links_in_text(text)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertIsInstance",
                    "range": [
                        232,
                        240
                    ],
                    "children": [],
                    "content": "\nself.assertIsInstance(links,list)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertEqual",
                    "range": [
                        241,
                        252
                    ],
                    "children": [],
                    "content": "\nself.assertEqual(len(links),7)"
                },
                {
                    "type": "ForStatement",
                    "name": "for link in links",
                    "range": [
                        254,
                        276
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "self.subTest",
                            "range": [
                                260,
                                266
                            ],
                            "children": [],
                            "content": "\nwith self.subTest()"
                        },
                        {
                            "type": "CallExpression",
                            "name": "self.assertIsInstance",
                            "range": [
                                268,
                                276
                            ],
                            "children": [],
                            "content": "\nself.assertIsInstance(link,str)"
                        }
                    ],
                    "content": "\nfor link in links:\nwith self.subTest():\nself.assertIsInstance(link,str)"
                }
            ],
            "content": "\ndef test_find_link_in_text(self):\ntext=\"\"\" \\n             # this is valid \\n  \\n             http://example.com?param1=1&param2=2#anchor \\n             https://www.example.com?param1=1&param2=2#anchor \\n             https://www.example.com.br \\n             https://www.example.com.gov.br \\n             [Example](https://www.example.com?param1=1&param2=2#anchor) \\n             lorem ipsum https://www.example.com?param1=1&param2=2#anchor \\n             https://www.example.com?param1=1&param2=2#anchor lorem ipsum \\n  \\n             # this not is valid \\n  \\n             example.com \\n             https:example.com \\n             https:/example.com \\n             https//example.com \\n             https//.com \\n         \"\"\"\n\nlinks=find_links_in_text(text)\n\nself.assertIsInstance(links,list)\nself.assertEqual(len(links),7)\n\nfor link in links:\nwith self.subTest():\nself.assertIsInstance(link,str)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_find_link_in_text_with_invalid_argument",
            "range": [
                278,
                308
            ],
            "children": [
                {
                    "type": "WithStatement",
                    "name": "with self.assertRaises",
                    "range": [
                        285,
                        307
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "find_links_in_text",
                            "range": [
                                294,
                                297
                            ],
                            "children": [],
                            "content": "\nfind_links_in_text()"
                        },
                        {
                            "type": "CallExpression",
                            "name": "find_links_in_text",
                            "range": [
                                298,
                                302
                            ],
                            "children": [],
                            "content": "\nfind_links_in_text(1)"
                        },
                        {
                            "type": "CallExpression",
                            "name": "find_links_in_text",
                            "range": [
                                303,
                                307
                            ],
                            "children": [],
                            "content": "\nfind_links_in_text(True)"
                        }
                    ],
                    "content": "\nwith self.assertRaises(TypeError):\nfind_links_in_text()\nfind_links_in_text(1)\nfind_links_in_text(True)"
                }
            ],
            "content": "\ndef test_find_link_in_text_with_invalid_argument(self):\nwith self.assertRaises(TypeError):\nfind_links_in_text()\nfind_links_in_text(1)\nfind_links_in_text(True)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_if_check_duplicate_links_has_the_correct_return",
            "range": [
                309,
                424
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "result_1",
                    "range": [
                        316,
                        324
                    ],
                    "children": [],
                    "content": "\nresult_1=check_duplicate_links(self.duplicate_links)"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "result_2",
                    "range": [
                        325,
                        333
                    ],
                    "children": [],
                    "content": "\nresult_2=check_duplicate_links(self.no_duplicate_links)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertIsInstance",
                    "range": [
                        335,
                        343
                    ],
                    "children": [],
                    "content": "\nself.assertIsInstance(result_1,tuple)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertIsInstance",
                    "range": [
                        344,
                        352
                    ],
                    "children": [],
                    "content": "\nself.assertIsInstance(result_2,tuple)"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "has_duplicate_links, links",
                    "range": [
                        354,
                        359
                    ],
                    "children": [],
                    "content": "\nhas_duplicate_links,links=result_1"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "no_duplicate_links, no_links",
                    "range": [
                        360,
                        365
                    ],
                    "children": [],
                    "content": "\nno_duplicate_links,no_links=result_2"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertTrue",
                    "range": [
                        367,
                        373
                    ],
                    "children": [],
                    "content": "\nself.assertTrue(has_duplicate_links)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertFalse",
                    "range": [
                        374,
                        380
                    ],
                    "children": [],
                    "content": "\nself.assertFalse(no_duplicate_links)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertIsInstance",
                    "range": [
                        382,
                        390
                    ],
                    "children": [],
                    "content": "\nself.assertIsInstance(links,list)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertIsInstance",
                    "range": [
                        391,
                        399
                    ],
                    "children": [],
                    "content": "\nself.assertIsInstance(no_links,list)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertEqual",
                    "range": [
                        401,
                        412
                    ],
                    "children": [],
                    "content": "\nself.assertEqual(len(links),2)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertEqual",
                    "range": [
                        413,
                        424
                    ],
                    "children": [],
                    "content": "\nself.assertEqual(len(no_links),0)"
                }
            ],
            "content": "\ndef test_if_check_duplicate_links_has_the_correct_return(self):\nresult_1=check_duplicate_links(self.duplicate_links)\nresult_2=check_duplicate_links(self.no_duplicate_links)\n\nself.assertIsInstance(result_1,tuple)\nself.assertIsInstance(result_2,tuple)\n\nhas_duplicate_links,links=result_1\nno_duplicate_links,no_links=result_2\n\nself.assertTrue(has_duplicate_links)\nself.assertFalse(no_duplicate_links)\n\nself.assertIsInstance(links,list)\nself.assertIsInstance(no_links,list)\n\nself.assertEqual(len(links),2)\nself.assertEqual(len(no_links),0)"
        },
        {
            "type": "FunctionDecl",
            "name": "test_if_fake_user_agent_has_a_str_as_return",
            "range": [
                426,
                448
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "user_agent",
                    "range": [
                        433,
                        438
                    ],
                    "children": [],
                    "content": "\nuser_agent=fake_user_agent()"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertIsInstance",
                    "range": [
                        439,
                        447
                    ],
                    "children": [],
                    "content": "\nself.assertIsInstance(user_agent,str)"
                }
            ],
            "content": "\ndef test_if_fake_user_agent_has_a_str_as_return(self):\nuser_agent=fake_user_agent()\nself.assertIsInstance(user_agent,str)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_host_from_link",
            "range": [
                449,
                565
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "links",
                    "range": [
                        456,
                        481
                    ],
                    "children": [],
                    "content": "\nlinks=[\n'example.com',\n'https://example.com',\n'https://www.example.com',\n'https://www.example.com.br',\n'https://www.example.com/route',\n'https://www.example.com?p=1&q=2',\n'https://www.example.com#anchor'\n]"
                },
                {
                    "type": "ForStatement",
                    "name": "for link in links",
                    "range": [
                        483,
                        550
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "host",
                            "range": [
                                489,
                                495
                            ],
                            "children": [],
                            "content": "\nhost=get_host_from_link(link)"
                        },
                        {
                            "type": "CallExpression",
                            "name": "self.subTest",
                            "range": [
                                497,
                                503
                            ],
                            "children": [],
                            "content": "\nwith self.subTest()"
                        },
                        {
                            "type": "CallExpression",
                            "name": "self.assertIsInstance",
                            "range": [
                                505,
                                513
                            ],
                            "children": [],
                            "content": "\nself.assertIsInstance(host,str)"
                        },
                        {
                            "type": "CallExpression",
                            "name": "self.assertNotIn",
                            "range": [
                                515,
                                523
                            ],
                            "children": [],
                            "content": "\nself.assertNotIn('://',host)"
                        },
                        {
                            "type": "CallExpression",
                            "name": "self.assertNotIn",
                            "range": [
                                524,
                                532
                            ],
                            "children": [],
                            "content": "\nself.assertNotIn('/',host)"
                        },
                        {
                            "type": "CallExpression",
                            "name": "self.assertNotIn",
                            "range": [
                                533,
                                541
                            ],
                            "children": [],
                            "content": "\nself.assertNotIn('?',host)"
                        },
                        {
                            "type": "CallExpression",
                            "name": "self.assertNotIn",
                            "range": [
                                542,
                                550
                            ],
                            "children": [],
                            "content": "\nself.assertNotIn('#',host)"
                        }
                    ],
                    "content": "\nfor link in links:\nhost=get_host_from_link(link)\n\nwith self.subTest():\nself.assertIsInstance(host,str)\n\nself.assertNotIn('://',host)\nself.assertNotIn('/',host)\nself.assertNotIn('?',host)\nself.assertNotIn('#',host)"
                },
                {
                    "type": "WithStatement",
                    "name": "with self.assertRaises",
                    "range": [
                        552,
                        564
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "get_host_from_link",
                            "range": [
                                561,
                                564
                            ],
                            "children": [],
                            "content": "\nget_host_from_link()"
                        }
                    ],
                    "content": "\nwith self.assertRaises(TypeError):\nget_host_from_link()"
                }
            ],
            "content": "\ndef test_get_host_from_link(self):\nlinks=[\n'example.com',\n'https://example.com',\n'https://www.example.com',\n'https://www.example.com.br',\n'https://www.example.com/route',\n'https://www.example.com?p=1&q=2',\n'https://www.example.com#anchor'\n]\n\nfor link in links:\nhost=get_host_from_link(link)\n\nwith self.subTest():\nself.assertIsInstance(host,str)\n\nself.assertNotIn('://',host)\nself.assertNotIn('/',host)\nself.assertNotIn('?',host)\nself.assertNotIn('#',host)\n\nwith self.assertRaises(TypeError):\nget_host_from_link()\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_has_cloudflare_protection_with_code_403_and_503_in_response",
            "range": [
                566,
                658
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "resp_with_cloudflare_protection_code_403",
                    "range": [
                        573,
                        598
                    ],
                    "children": [],
                    "content": "\nresp_with_cloudflare_protection_code_403=FakeResponse(\ncode=self.code_403,\nheaders=self.cloudflare_headers,\ntext=self.text_with_cloudflare_flags\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "resp_with_cloudflare_protection_code_503",
                    "range": [
                        601,
                        627
                    ],
                    "children": [],
                    "content": "\nresp_with_cloudflare_protection_code_503=FakeResponse(\ncode=self.code_503,\nheaders=self.cloudflare_headers,\ntext=self.text_with_cloudflare_flags\n)"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "result1",
                    "range": [
                        629,
                        635
                    ],
                    "children": [],
                    "content": "\nresult1=has_cloudflare_protection(resp_with_cloudflare_protection_code_403)"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "result2",
                    "range": [
                        636,
                        642
                    ],
                    "children": [],
                    "content": "\nresult2=has_cloudflare_protection(resp_with_cloudflare_protection_code_503)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertTrue",
                    "range": [
                        644,
                        650
                    ],
                    "children": [],
                    "content": "\nself.assertTrue(result1)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertTrue",
                    "range": [
                        651,
                        657
                    ],
                    "children": [],
                    "content": "\nself.assertTrue(result2)"
                }
            ],
            "content": "\ndef test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\nresp_with_cloudflare_protection_code_403=FakeResponse(\ncode=self.code_403,\nheaders=self.cloudflare_headers,\ntext=self.text_with_cloudflare_flags\n)\n\nresp_with_cloudflare_protection_code_503=FakeResponse(\ncode=self.code_503,\nheaders=self.cloudflare_headers,\ntext=self.text_with_cloudflare_flags\n)\n\nresult1=has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\nresult2=has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n\nself.assertTrue(result1)\nself.assertTrue(result2)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_has_cloudflare_protection_when_there_is_no_protection",
            "range": [
                659,
                793
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "resp_without_cloudflare_protection1",
                    "range": [
                        666,
                        691
                    ],
                    "children": [],
                    "content": "\nresp_without_cloudflare_protection1=FakeResponse(\ncode=self.code_200,\nheaders=self.no_cloudflare_headers,\ntext=self.text_without_cloudflare_flags\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "resp_without_cloudflare_protection2",
                    "range": [
                        694,
                        720
                    ],
                    "children": [],
                    "content": "\nresp_without_cloudflare_protection2=FakeResponse(\ncode=self.code_403,\nheaders=self.no_cloudflare_headers,\ntext=self.text_without_cloudflare_flags\n)"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "resp_without_cloudflare_protection3",
                    "range": [
                        723,
                        748
                    ],
                    "children": [],
                    "content": "resp_without_cloudflare_protection3=FakeResponse(\ncode=self.code_503,\nheaders=self.no_cloudflare_headers,\ntext=self.text_without_cloudflare_flags\n)"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "result1",
                    "range": [
                        750,
                        756
                    ],
                    "children": [],
                    "content": "\nresult1=has_cloudflare_protection(resp_without_cloudflare_protection1)"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "result2",
                    "range": [
                        757,
                        763
                    ],
                    "children": [],
                    "content": "\nresult2=has_cloudflare_protection(resp_without_cloudflare_protection2)"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "result3",
                    "range": [
                        764,
                        770
                    ],
                    "children": [],
                    "content": "\nresult3=has_cloudflare_protection(resp_without_cloudflare_protection3)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertFalse",
                    "range": [
                        772,
                        778
                    ],
                    "children": [],
                    "content": "\nself.assertFalse(result1)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertFalse",
                    "range": [
                        779,
                        785
                    ],
                    "children": [],
                    "content": "\nself.assertFalse(result2)"
                },
                {
                    "type": "CallExpression",
                    "name": "self.assertFalse",
                    "range": [
                        786,
                        792
                    ],
                    "children": [],
                    "content": "\nself.assertFalse(result3)"
                }
            ],
            "content": "\ndef test_has_cloudflare_protection_when_there_is_no_protection(self):\nresp_without_cloudflare_protection1=FakeResponse(\ncode=self.code_200,\nheaders=self.no_cloudflare_headers,\ntext=self.text_without_cloudflare_flags\n)\n\nresp_without_cloudflare_protection2=FakeResponse(\ncode=self.code_403,\nheaders=self.no_cloudflare_headers,\ntext=self.text_without_cloudflare_flags\n)\n\nresp_without_cloudflare_protection3=FakeResponse(\ncode=self.code_503,\nheaders=self.no_cloudflare_headers,\ntext=self.text_without_cloudflare_flags\n)\n\nresult1=has_cloudflare_protection(resp_without_cloudflare_protection1)\nresult2=has_cloudflare_protection(resp_without_cloudflare_protection2)\nresult3=has_cloudflare_protection(resp_without_cloudflare_protection3)\n\nself.assertFalse(result1)\nself.assertFalse(result2)\nself.assertFalse(result3)\n"
        }
    ],
    "content": "class FakeResponse():\ndef __init__(self,code:int,headers:dict,text:str)->None:\nself.status_code=code\nself.headers=headers\nself.text=text\n\n\nclass TestValidateLinks(unittest.TestCase):\n\ndef setUp(self):\nself.duplicate_links=[\n'https://www.example.com',\n'https://www.example.com',\n'https://www.example.com',\n'https://www.anotherexample.com',\n]\nself.no_duplicate_links=[\n'https://www.firstexample.com',\n'https://www.secondexample.com',\n'https://www.anotherexample.com',\n]\n\nself.code_200=200\nself.code_403=403\nself.code_503=503\n\nself.cloudflare_headers={'Server':'cloudflare'}\nself.no_cloudflare_headers={'Server':'google'}\n\nself.text_with_cloudflare_flags='403 Forbidden Cloudflare We are checking your browser...'\nself.text_without_cloudflare_flags='Lorem Ipsum'\n\ndef test_find_link_in_text(self):\ntext=\"\"\" \\n             # this is valid \\n  \\n             http://example.com?param1=1&param2=2#anchor \\n             https://www.example.com?param1=1&param2=2#anchor \\n             https://www.example.com.br \\n             https://www.example.com.gov.br \\n             [Example](https://www.example.com?param1=1&param2=2#anchor) \\n             lorem ipsum https://www.example.com?param1=1&param2=2#anchor \\n             https://www.example.com?param1=1&param2=2#anchor lorem ipsum \\n  \\n             # this not is valid \\n  \\n             example.com \\n             https:example.com \\n             https:/example.com \\n             https//example.com \\n             https//.com \\n         \"\"\"\n\nlinks=find_links_in_text(text)\n\nself.assertIsInstance(links,list)\nself.assertEqual(len(links),7)\n\nfor link in links:\nwith self.subTest():\nself.assertIsInstance(link,str)\n\ndef test_find_link_in_text_with_invalid_argument(self):\nwith self.assertRaises(TypeError):\nfind_links_in_text()\nfind_links_in_text(1)\nfind_links_in_text(True)\n\ndef test_if_check_duplicate_links_has_the_correct_return(self):\nresult_1=check_duplicate_links(self.duplicate_links)\nresult_2=check_duplicate_links(self.no_duplicate_links)\n\nself.assertIsInstance(result_1,tuple)\nself.assertIsInstance(result_2,tuple)\n\nhas_duplicate_links,links=result_1\nno_duplicate_links,no_links=result_2\n\nself.assertTrue(has_duplicate_links)\nself.assertFalse(no_duplicate_links)\n\nself.assertIsInstance(links,list)\nself.assertIsInstance(no_links,list)\n\nself.assertEqual(len(links),2)\nself.assertEqual(len(no_links),0)\n\ndef test_if_fake_user_agent_has_a_str_as_return(self):\nuser_agent=fake_user_agent()\nself.assertIsInstance(user_agent,str)\n\ndef test_get_host_from_link(self):\nlinks=[\n'example.com',\n'https://example.com',\n'https://www.example.com',\n'https://www.example.com.br',\n'https://www.example.com/route',\n'https://www.example.com?p=1&q=2',\n'https://www.example.com#anchor'\n]\n\nfor link in links:\nhost=get_host_from_link(link)\n\nwith self.subTest():\nself.assertIsInstance(host,str)\n\nself.assertNotIn('://',host)\nself.assertNotIn('/',host)\nself.assertNotIn('?',host)\nself.assertNotIn('#',host)\n\nwith self.assertRaises(TypeError):\nget_host_from_link()\n\ndef test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\nresp_with_cloudflare_protection_code_403=FakeResponse(\ncode=self.code_403,\nheaders=self.cloudflare_headers,\ntext=self.text_with_cloudflare_flags\n)\n\nresp_with_cloudflare_protection_code_503=FakeResponse(\ncode=self.code_503,\nheaders=self.cloudflare_headers,\ntext=self.text_with_cloudflare_flags\n)\n\nresult1=has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\nresult2=has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n\nself.assertTrue(result1)\nself.assertTrue(result2)\n\ndef test_has_cloudflare_protection_when_there_is_no_protection(self):\nresp_without_cloudflare_protection1=FakeResponse(\ncode=self.code_200,\nheaders=self.no_cloudflare_headers,\ntext=self.text_without_cloudflare_flags\n)\n\nresp_without_cloudflare_protection2=FakeResponse(\ncode=self.code_403,\nheaders=self.no_cloudflare_headers,\ntext=self.text_without_cloudflare_flags\n)\n\nresp_without_cloudflare_protection3=FakeResponse(\ncode=self.code_503,\nheaders=self.no_cloudflare_headers,\ntext=self.text_without_cloudflare_flags\n)\n\nresult1=has_cloudflare_protection(resp_without_cloudflare_protection1)\nresult2=has_cloudflare_protection(resp_without_cloudflare_protection2)\nresult3=has_cloudflare_protection(resp_without_cloudflare_protection3)\n\nself.assertFalse(result1)\nself.assertFalse(result2)\nself.assertFalse(result3)\n"
}