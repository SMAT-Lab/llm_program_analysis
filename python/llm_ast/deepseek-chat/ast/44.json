{
    "type": "Program",
    "name": "Global",
    "range": [
        82,
        612
    ],
    "children": [
        {
            "type": "AssignmentExpression",
            "name": "=",
            "range": [
                82,
                116
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "TEST_CREDENTIALS",
                    "range": [
                        82,
                        82
                    ],
                    "children": [],
                    "content": "TEST_CREDENTIALS"
                },
                {
                    "type": "CallExpression",
                    "name": "APIKeyCredentials",
                    "range": [
                        84,
                        115
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "id",
                            "range": [
                                87,
                                89
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"01234567-89ab-cdef-0123-456789abcdef\"",
                                    "range": [
                                        89,
                                        89
                                    ],
                                    "children": [],
                                    "content": "\"01234567-89ab-cdef-0123-456789abcdef\""
                                }
                            ],
                            "content": "id=\"01234567-89ab-cdef-0123-456789abcdef\""
                        },
                        {
                            "type": "Argument",
                            "name": "provider",
                            "range": [
                                92,
                                94
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"medium\"",
                                    "range": [
                                        94,
                                        94
                                    ],
                                    "children": [],
                                    "content": "\"medium\""
                                }
                            ],
                            "content": "provider=\"medium\""
                        },
                        {
                            "type": "Argument",
                            "name": "api_key",
                            "range": [
                                97,
                                102
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SecretStr",
                                    "range": [
                                        99,
                                        102
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"mock-medium-api-key\"",
                                            "range": [
                                                101,
                                                101
                                            ],
                                            "children": [],
                                            "content": "\"mock-medium-api-key\""
                                        }
                                    ],
                                    "content": "SecretStr(\"mock-medium-api-key\")"
                                }
                            ],
                            "content": "api_key=SecretStr(\"mock-medium-api-key\")"
                        },
                        {
                            "type": "Argument",
                            "name": "title",
                            "range": [
                                105,
                                107
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Mock Medium API key\"",
                                    "range": [
                                        107,
                                        107
                                    ],
                                    "children": [],
                                    "content": "\"Mock Medium API key\""
                                }
                            ],
                            "content": "title=\"Mock Medium API key\""
                        },
                        {
                            "type": "Argument",
                            "name": "expires_at",
                            "range": [
                                110,
                                112
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "None",
                                    "range": [
                                        112,
                                        112
                                    ],
                                    "children": [],
                                    "content": "None"
                                }
                            ],
                            "content": "expires_at=None"
                        }
                    ],
                    "content": "APIKeyCredentials(\nid=\"01234567-89ab-cdef-0123-456789abcdef\",\nprovider=\"medium\",\napi_key=SecretStr(\"mock-medium-api-key\"),\ntitle=\"Mock Medium API key\",\nexpires_at=None,\n)"
                }
            ],
            "content": "TEST_CREDENTIALS=APIKeyCredentials(\nid=\"01234567-89ab-cdef-0123-456789abcdef\",\nprovider=\"medium\",\napi_key=SecretStr(\"mock-medium-api-key\"),\ntitle=\"Mock Medium API key\",\nexpires_at=None,\n)\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "TEST_CREDENTIALS_INPUT",
            "range": [
                117,
                150
            ],
            "children": [
                {
                    "type": "ObjectExpression",
                    "name": "",
                    "range": [
                        119,
                        149
                    ],
                    "children": [
                        {
                            "type": "Property",
                            "name": "provider",
                            "range": [
                                121,
                                125
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"provider\"",
                                    "range": [
                                        121,
                                        121
                                    ],
                                    "children": [],
                                    "content": "\"provider\""
                                },
                                {
                                    "type": "Identifier",
                                    "name": "TEST_CREDENTIALS",
                                    "range": [
                                        123,
                                        123
                                    ],
                                    "children": [],
                                    "content": "TEST_CREDENTIALS"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "provider",
                                    "range": [
                                        125,
                                        125
                                    ],
                                    "children": [],
                                    "content": "provider"
                                }
                            ],
                            "content": "\"provider\":TEST_CREDENTIALS.provider"
                        },
                        {
                            "type": "Property",
                            "name": "id",
                            "range": [
                                128,
                                132
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"id\"",
                                    "range": [
                                        128,
                                        128
                                    ],
                                    "children": [],
                                    "content": "\"id\""
                                },
                                {
                                    "type": "Identifier",
                                    "name": "TEST_CREDENTIALS",
                                    "range": [
                                        130,
                                        130
                                    ],
                                    "children": [],
                                    "content": "TEST_CREDENTIALS"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "id",
                                    "range": [
                                        132,
                                        132
                                    ],
                                    "children": [],
                                    "content": "id"
                                }
                            ],
                            "content": "\"id\":TEST_CREDENTIALS.id"
                        },
                        {
                            "type": "Property",
                            "name": "type",
                            "range": [
                                135,
                                139
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"type\"",
                                    "range": [
                                        135,
                                        135
                                    ],
                                    "children": [],
                                    "content": "\"type\""
                                },
                                {
                                    "type": "Identifier",
                                    "name": "TEST_CREDENTIALS",
                                    "range": [
                                        137,
                                        137
                                    ],
                                    "children": [],
                                    "content": "TEST_CREDENTIALS"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "type",
                                    "range": [
                                        139,
                                        139
                                    ],
                                    "children": [],
                                    "content": "type"
                                }
                            ],
                            "content": "\"type\":TEST_CREDENTIALS.type"
                        },
                        {
                            "type": "Property",
                            "name": "title",
                            "range": [
                                142,
                                146
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"title\"",
                                    "range": [
                                        142,
                                        142
                                    ],
                                    "children": [],
                                    "content": "\"title\""
                                },
                                {
                                    "type": "Identifier",
                                    "name": "TEST_CREDENTIALS",
                                    "range": [
                                        144,
                                        144
                                    ],
                                    "children": [],
                                    "content": "TEST_CREDENTIALS"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "type",
                                    "range": [
                                        146,
                                        146
                                    ],
                                    "children": [],
                                    "content": "type"
                                }
                            ],
                            "content": "\"title\":TEST_CREDENTIALS.type"
                        }
                    ],
                    "content": "{\n\"provider\":TEST_CREDENTIALS.provider,\n\"id\":TEST_CREDENTIALS.id,\n\"type\":TEST_CREDENTIALS.type,\n\"title\":TEST_CREDENTIALS.type,\n}"
                }
            ],
            "content": "TEST_CREDENTIALS_INPUT={\n\"provider\":TEST_CREDENTIALS.provider,\n\"id\":TEST_CREDENTIALS.id,\n\"type\":TEST_CREDENTIALS.type,\n\"title\":TEST_CREDENTIALS.type,\n}\n"
        },
        {
            "type": "EnumDecl",
            "name": "PublishToMediumStatus",
            "range": [
                151,
                172
            ],
            "children": [
                {
                    "type": "EnumMember",
                    "name": "PUBLIC",
                    "range": [
                        160,
                        162
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "value": "\"public\"",
                            "range": [
                                162,
                                162
                            ],
                            "content": "PUBLIC"
                        }
                    ],
                    "content": ":\nPUBLIC"
                },
                {
                    "type": "EnumMember",
                    "name": "DRAFT",
                    "range": [
                        164,
                        166
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "value": "\"draft\"",
                            "range": [
                                166,
                                166
                            ],
                            "content": "DRAFT"
                        }
                    ],
                    "content": "\"public\"\nDRAFT"
                },
                {
                    "type": "EnumMember",
                    "name": "UNLISTED",
                    "range": [
                        168,
                        170
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "value": "\"unlisted\"",
                            "range": [
                                170,
                                170
                            ],
                            "content": "UNLISTED"
                        }
                    ],
                    "content": "\"draft\"\nUNLISTED"
                }
            ],
            "content": "\n\nclass PublishToMediumStatus(str,Enum):\nPUBLIC=\"public\"\nDRAFT=\"draft\"\nUNLISTED=\"unlisted\""
        },
        {
            "type": "ClassDecl",
            "name": "PublishToMediumBlock",
            "range": [
                173,
                612
            ],
            "children": [
                {
                    "type": "ClassBody",
                    "name": "",
                    "range": [
                        179,
                        612
                    ],
                    "children": [
                        {
                            "type": "ClassDecl",
                            "name": "Input",
                            "range": [
                                180,
                                340
                            ],
                            "children": [
                                {
                                    "type": "ClassBody",
                                    "name": "",
                                    "range": [
                                        186,
                                        340
                                    ],
                                    "children": [
                                        {
                                            "type": "FieldDecl",
                                            "name": "author_id",
                                            "range": [
                                                187,
                                                217
                                            ],
                                            "children": [
                                                {
                                                    "type": "TypeAnnotation",
                                                    "name": "BlockSecret",
                                                    "range": [
                                                        189,
                                                        189
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "Assignment",
                                                    "name": "=",
                                                    "range": [
                                                        190,
                                                        190
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "SecretField",
                                                            "range": [
                                                                191,
                                                                217
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "",
                                                                    "range": [
                                                                        192,
                                                                        217
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "KeyValuePair",
                                                                            "name": "key",
                                                                            "range": [
                                                                                194,
                                                                                196
                                                                            ],
                                                                            "children": [],
                                                                            "content": "SecretField(\n"
                                                                        },
                                                                        {
                                                                            "type": "KeyValuePair",
                                                                            "name": "description",
                                                                            "range": [
                                                                                199,
                                                                                216
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\"medium_author_id\",\ndescription=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \" Authorization:Bearer YOUR_ACCESS_TOKEN \" https://api.medium.com/v1/me\" the response will contain the authorId"
                                                                        }
                                                                    ],
                                                                    "content": "BlockSecret=SecretField(\nkey=\"medium_author_id\",\ndescription=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \" Authorization:Bearer YOUR_ACCESS_TOKEN \" https://api.medium.com/v1/me\" the response will contain the authorId field"
                                                                }
                                                            ],
                                                            "content": ":BlockSecret=SecretField(\nkey=\"medium_author_id\",\ndescription=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \" Authorization:Bearer YOUR_ACCESS_TOKEN \" https://api.medium.com/v1/me\" the response will contain the authorId field"
                                                        }
                                                    ],
                                                    "content": "author_id"
                                                }
                                            ],
                                            "content": "):\nauthor_id:BlockSecret=SecretField(\nkey=\"medium_author_id\",\ndescription=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \" Authorization:Bearer YOUR_ACCESS_TOKEN \" https://api.medium.com/v1/me\" the response will contain the authorId field"
                                        },
                                        {
                                            "type": "FieldDecl",
                                            "name": "title",
                                            "range": [
                                                221,
                                                221
                                            ],
                                            "children": [],
                                            "content": "Enter"
                                        },
                                        {
                                            "type": "FieldDecl",
                                            "name": "content",
                                            "range": [
                                                221,
                                                221
                                            ],
                                            "children": [],
                                            "content": "Enter"
                                        },
                                        {
                                            "type": "FieldDecl",
                                            "name": "content_format",
                                            "range": [
                                                221,
                                                221
                                            ],
                                            "children": [],
                                            "content": "Enter"
                                        },
                                        {
                                            "type": "FieldDecl",
                                            "name": "tags",
                                            "range": [
                                                221,
                                                221
                                            ],
                                            "children": [],
                                            "content": "Enter"
                                        },
                                        {
                                            "type": "FieldDecl",
                                            "name": "canonical_url",
                                            "range": [
                                                221,
                                                221
                                            ],
                                            "children": [],
                                            "content": "Enter"
                                        },
                                        {
                                            "type": "FieldDecl",
                                            "name": "publish_status",
                                            "range": [
                                                221,
                                                221
                                            ],
                                            "children": [],
                                            "content": "Enter"
                                        },
                                        {
                                            "type": "FieldDecl",
                                            "name": "license",
                                            "range": [
                                                221,
                                                221
                                            ],
                                            "children": [],
                                            "content": "Enter"
                                        },
                                        {
                                            "type": "FieldDecl",
                                            "name": "notify_followers",
                                            "range": [
                                                221,
                                                221
                                            ],
                                            "children": [],
                                            "content": "Enter"
                                        },
                                        {
                                            "type": "FieldDecl",
                                            "name": "credentials",
                                            "range": [
                                                221,
                                                221
                                            ],
                                            "children": [],
                                            "content": "Enter"
                                        }
                                    ],
                                    "content": "BlockSchema):\nauthor_id:BlockSecret=SecretField(\nkey=\"medium_author_id\",\ndescription=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \" Authorization:Bearer YOUR_ACCESS_TOKEN \" https://api.medium.com/v1/me\" the response will contain the authorId field.\"\"\", \\n             placeholder=\" Enter the author 's Medium AuthorID\", \\n         ) \\n         title: str = SchemaField( \\n             description=\"The title of your Medium post\", \\n             placeholder=\"Enter your post title\", \\n         ) \\n         content: str = SchemaField( \\n             description=\"The main content of your Medium post\", \\n             placeholder=\"Enter your post content\", \\n         ) \\n         content_format: str = SchemaField( \\n             description=\"The format of the content: ' html ' or ' markdown '\", \\n             placeholder=\"html\", \\n         ) \\n         tags: List[str] = SchemaField( \\n             description=\"List of tags for your Medium post (up to 5)\", \\n             placeholder=\"[' technology', 'AI', 'blogging ']\", \\n         ) \\n         canonical_url: str | None = SchemaField( \\n             default=None, \\n             description=\"The original home of this content, if it was originally published elsewhere\", \\n             placeholder=\"https://yourblog.com/original-post\", \\n         ) \\n         publish_status: PublishToMediumStatus = SchemaField( \\n             description=\"The publish status\", \\n             placeholder=PublishToMediumStatus.DRAFT, \\n         ) \\n         license: str = SchemaField( \\n             default=\"all-rights-reserved\", \\n             description=\"The license of the post: ' all-rights-reserved', 'cc-40-by', 'cc-40-by-sa', 'cc-40-by-nd', 'cc-40-by-nc', 'cc-40-by-nc-nd', 'cc-40-by-nc-sa', 'cc-40-zero', 'public-domain'\", \\n             placeholder=\" all-rights-reserved \", \\n         ) \\n         notify_followers: bool = SchemaField( \\n             default=False, \\n             description=\" Whether to notify followers that the user has published \", \\n             placeholder=\" False \", \\n         ) \\n         credentials: CredentialsMetaInput[ \\n             Literal[ProviderName.MEDIUM], Literal[\" api_key \"] \\n         ] = CredentialsField( \\n             description=\" The Medium integration can be used with any API key with sufficient permissions for the blocks it is used"
                                }
                            ],
                            "content": "):\nclass Input(BlockSchema):\nauthor_id:BlockSecret=SecretField(\nkey=\"medium_author_id\",\ndescription=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \" Authorization:Bearer YOUR_ACCESS_TOKEN \" https://api.medium.com/v1/me\" the response will contain the authorId field.\"\"\", \\n             placeholder=\" Enter the author 's Medium AuthorID\", \\n         ) \\n         title: str = SchemaField( \\n             description=\"The title of your Medium post\", \\n             placeholder=\"Enter your post title\", \\n         ) \\n         content: str = SchemaField( \\n             description=\"The main content of your Medium post\", \\n             placeholder=\"Enter your post content\", \\n         ) \\n         content_format: str = SchemaField( \\n             description=\"The format of the content: ' html ' or ' markdown '\", \\n             placeholder=\"html\", \\n         ) \\n         tags: List[str] = SchemaField( \\n             description=\"List of tags for your Medium post (up to 5)\", \\n             placeholder=\"[' technology', 'AI', 'blogging ']\", \\n         ) \\n         canonical_url: str | None = SchemaField( \\n             default=None, \\n             description=\"The original home of this content, if it was originally published elsewhere\", \\n             placeholder=\"https://yourblog.com/original-post\", \\n         ) \\n         publish_status: PublishToMediumStatus = SchemaField( \\n             description=\"The publish status\", \\n             placeholder=PublishToMediumStatus.DRAFT, \\n         ) \\n         license: str = SchemaField( \\n             default=\"all-rights-reserved\", \\n             description=\"The license of the post: ' all-rights-reserved', 'cc-40-by', 'cc-40-by-sa', 'cc-40-by-nd', 'cc-40-by-nc', 'cc-40-by-nc-nd', 'cc-40-by-nc-sa', 'cc-40-zero', 'public-domain'\", \\n             placeholder=\" all-rights-reserved \", \\n         ) \\n         notify_followers: bool = SchemaField( \\n             default=False, \\n             description=\" Whether to notify followers that the user has published \", \\n             placeholder=\" False \", \\n         ) \\n         credentials: CredentialsMetaInput[ \\n             Literal[ProviderName.MEDIUM], Literal[\" api_key \"] \\n         ] = CredentialsField( \\n             description=\" The Medium integration can be used with any API key with sufficient permissions for the blocks it is used"
                        },
                        {
                            "type": "ClassDecl",
                            "name": "Output",
                            "range": [
                                340,
                                386
                            ],
                            "children": [
                                {
                                    "type": "ClassBody",
                                    "name": "",
                                    "range": [
                                        340,
                                        386
                                    ],
                                    "children": [
                                        {
                                            "type": "FieldDecl",
                                            "name": "post_id",
                                            "range": [
                                                341,
                                                341
                                            ],
                                            "children": [],
                                            "content": "on"
                                        },
                                        {
                                            "type": "FieldDecl",
                                            "name": "post_url",
                                            "range": [
                                                341,
                                                341
                                            ],
                                            "children": [],
                                            "content": "on"
                                        },
                                        {
                                            "type": "FieldDecl",
                                            "name": "published_at",
                                            "range": [
                                                341,
                                                341
                                            ],
                                            "children": [],
                                            "content": "on"
                                        },
                                        {
                                            "type": "FieldDecl",
                                            "name": "error",
                                            "range": [
                                                341,
                                                341
                                            ],
                                            "children": [],
                                            "content": "on"
                                        }
                                    ],
                                    "content": "used on.\", \\n         ) \\n  \\n     class Output(BlockSchema): \\n         post_id: str = SchemaField(description=\" The ID of the created Medium post \") \\n         post_url: str = SchemaField(description=\" The URL of the created Medium post \") \\n         published_at: int = SchemaField( \\n             description=\" The timestamp when the post was published \" \\n         ) \\n         error: str = SchemaField( \\n             description=\" Error message if the post creation failed \" \\n         ) \\n  \\n     def __init__(self): \\n         super().__init__( \\n             id=\"3f7b2dcb-4a78-4e3f-b0f1-"
                                }
                            ],
                            "content": "used on.\", \\n         ) \\n  \\n     class Output(BlockSchema): \\n         post_id: str = SchemaField(description=\" The ID of the created Medium post \") \\n         post_url: str = SchemaField(description=\" The URL of the created Medium post \") \\n         published_at: int = SchemaField( \\n             description=\" The timestamp when the post was published \" \\n         ) \\n         error: str = SchemaField( \\n             description=\" Error message if the post creation failed \" \\n         ) \\n  \\n     def __init__(self): \\n         super().__init__( \\n             id=\"3f7b2dcb-4a78-4e3f-b0f1-"
                        },
                        {
                            "type": "MethodDecl",
                            "name": "__init__",
                            "range": [
                                386,
                                612
                            ],
                            "children": [],
                            "content": "-88132e1b89df \", \\n             input_schema=PublishToMediumBlock.Input, \\n             output_schema=PublishToMediumBlock.Output, \\n             description=\" Publishes a post to Medium.\", \\n             categories={BlockCategory.SOCIAL}, \\n             test_input={ \\n                 \" author_id\": \"1234567890abcdef \", \\n                 \" title\": \"Test Post \", \\n                 \" content\": \"<h1>Test Content</h1><p>This is a test post.</p>\", \\n                 \" content_format\": \"html \", \\n                 \" tags\": [\"test\", \"automation \"], \\n                 \" license\": \"all-rights-reserved \", \\n                 \" notify_followers \": False, \\n                 \" publish_status \": PublishToMediumStatus.DRAFT.value, \\n                 \" credentials \": TEST_CREDENTIALS_INPUT, \\n             }, \\n             test_output=[ \\n                 (\" post_id\", \"e6f36a \"), \\n                 (\" post_url\", \"https://medium.com/@username/test-post-e6f36a \"), \\n                 (\" published_at \", 1626282600), \\n             ], \\n             test_mock={ \\n                 \" create_post \": lambda *args, **kwargs: { \\n                     \" data \": { \\n                         \" id\": \"e6f36a \", \\n                         \" url\": \"https://medium.com/@username/test-post-e6f36a \", \\n                         \" authorId\": \"1234567890abcdef \", \\n                         \" publishedAt \": 1626282600, \\n                     } \\n                 } \\n             }, \\n             test_credentials=TEST_CREDENTIALS, \\n         ) \\n  \\n     def create_post( \\n         self, \\n         api_key: SecretStr, \\n         author_id, \\n         title, \\n         content, \\n         content_format, \\n         tags, \\n         canonical_url, \\n         publish_status, \\n         license, \\n         notify_followers, \\n     ): \\n         headers = { \\n             \" Authorization \": f\" Bearer{api_key.get_secret_value()}\", \\n             \" Content-Type\": \"application/json \", \\n             \" Accept\": \"application/json \", \\n         } \\n  \\n         data = { \\n             \" title \": title, \\n             \" content \": content, \\n             \" contentFormat \": content_format, \\n             \" tags \": tags, \\n             \" canonicalUrl \": canonical_url, \\n             \" publishStatus \": publish_status, \\n             \" license \": license, \\n             \" notifyFollowers \": notify_followers, \\n         } \\n  \\n         response = requests.post( \\n             f\" https://api.medium.com/v1/users/{author_id}/posts \", \\n             headers=headers, \\n             json=data, \\n         ) \\n  \\n         return response.json() \\n  \\n     def run( \\n         self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs \\n     ) -> BlockOutput: \\n         response = self.create_post( \\n             credentials.api_key, \\n             input_data.author_id.get_secret_value(), \\n             input_data.title, \\n             input_data.content, \\n             input_data.content_format, \\n             input_data.tags, \\n             input_data.canonical_url, \\n             input_data.publish_status, \\n             input_data.license, \\n             input_data.notify_followers, \\n         ) \\n  \\n         if \" data \" in response: \\n             yield \" post_id \", response[\" data\"][\"id \"] \\n             yield \" post_url \", response[\" data\"][\"url \"] \\n             yield \" published_at \", response[\" data\"][\"publishedAt \"] \\n         else: \\n             error_message = response.get(\" errors \", [{}])[0].get( \\n                 \" message\", \"Unknown error occurred \" \\n             ) \\n             raise RuntimeError(f\" Failed to create Medium post:{error_message}"
                        },
                        {
                            "type": "MethodDecl",
                            "name": "create_post",
                            "range": [
                                386,
                                612
                            ],
                            "children": [],
                            "content": "-88132e1b89df \", \\n             input_schema=PublishToMediumBlock.Input, \\n             output_schema=PublishToMediumBlock.Output, \\n             description=\" Publishes a post to Medium.\", \\n             categories={BlockCategory.SOCIAL}, \\n             test_input={ \\n                 \" author_id\": \"1234567890abcdef \", \\n                 \" title\": \"Test Post \", \\n                 \" content\": \"<h1>Test Content</h1><p>This is a test post.</p>\", \\n                 \" content_format\": \"html \", \\n                 \" tags\": [\"test\", \"automation \"], \\n                 \" license\": \"all-rights-reserved \", \\n                 \" notify_followers \": False, \\n                 \" publish_status \": PublishToMediumStatus.DRAFT.value, \\n                 \" credentials \": TEST_CREDENTIALS_INPUT, \\n             }, \\n             test_output=[ \\n                 (\" post_id\", \"e6f36a \"), \\n                 (\" post_url\", \"https://medium.com/@username/test-post-e6f36a \"), \\n                 (\" published_at \", 1626282600), \\n             ], \\n             test_mock={ \\n                 \" create_post \": lambda *args, **kwargs: { \\n                     \" data \": { \\n                         \" id\": \"e6f36a \", \\n                         \" url\": \"https://medium.com/@username/test-post-e6f36a \", \\n                         \" authorId\": \"1234567890abcdef \", \\n                         \" publishedAt \": 1626282600, \\n                     } \\n                 } \\n             }, \\n             test_credentials=TEST_CREDENTIALS, \\n         ) \\n  \\n     def create_post( \\n         self, \\n         api_key: SecretStr, \\n         author_id, \\n         title, \\n         content, \\n         content_format, \\n         tags, \\n         canonical_url, \\n         publish_status, \\n         license, \\n         notify_followers, \\n     ): \\n         headers = { \\n             \" Authorization \": f\" Bearer{api_key.get_secret_value()}\", \\n             \" Content-Type\": \"application/json \", \\n             \" Accept\": \"application/json \", \\n         } \\n  \\n         data = { \\n             \" title \": title, \\n             \" content \": content, \\n             \" contentFormat \": content_format, \\n             \" tags \": tags, \\n             \" canonicalUrl \": canonical_url, \\n             \" publishStatus \": publish_status, \\n             \" license \": license, \\n             \" notifyFollowers \": notify_followers, \\n         } \\n  \\n         response = requests.post( \\n             f\" https://api.medium.com/v1/users/{author_id}/posts \", \\n             headers=headers, \\n             json=data, \\n         ) \\n  \\n         return response.json() \\n  \\n     def run( \\n         self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs \\n     ) -> BlockOutput: \\n         response = self.create_post( \\n             credentials.api_key, \\n             input_data.author_id.get_secret_value(), \\n             input_data.title, \\n             input_data.content, \\n             input_data.content_format, \\n             input_data.tags, \\n             input_data.canonical_url, \\n             input_data.publish_status, \\n             input_data.license, \\n             input_data.notify_followers, \\n         ) \\n  \\n         if \" data \" in response: \\n             yield \" post_id \", response[\" data\"][\"id \"] \\n             yield \" post_url \", response[\" data\"][\"url \"] \\n             yield \" published_at \", response[\" data\"][\"publishedAt \"] \\n         else: \\n             error_message = response.get(\" errors \", [{}])[0].get( \\n                 \" message\", \"Unknown error occurred \" \\n             ) \\n             raise RuntimeError(f\" Failed to create Medium post:{error_message}"
                        },
                        {
                            "type": "MethodDecl",
                            "name": "run",
                            "range": [
                                386,
                                612
                            ],
                            "children": [],
                            "content": "-88132e1b89df \", \\n             input_schema=PublishToMediumBlock.Input, \\n             output_schema=PublishToMediumBlock.Output, \\n             description=\" Publishes a post to Medium.\", \\n             categories={BlockCategory.SOCIAL}, \\n             test_input={ \\n                 \" author_id\": \"1234567890abcdef \", \\n                 \" title\": \"Test Post \", \\n                 \" content\": \"<h1>Test Content</h1><p>This is a test post.</p>\", \\n                 \" content_format\": \"html \", \\n                 \" tags\": [\"test\", \"automation \"], \\n                 \" license\": \"all-rights-reserved \", \\n                 \" notify_followers \": False, \\n                 \" publish_status \": PublishToMediumStatus.DRAFT.value, \\n                 \" credentials \": TEST_CREDENTIALS_INPUT, \\n             }, \\n             test_output=[ \\n                 (\" post_id\", \"e6f36a \"), \\n                 (\" post_url\", \"https://medium.com/@username/test-post-e6f36a \"), \\n                 (\" published_at \", 1626282600), \\n             ], \\n             test_mock={ \\n                 \" create_post \": lambda *args, **kwargs: { \\n                     \" data \": { \\n                         \" id\": \"e6f36a \", \\n                         \" url\": \"https://medium.com/@username/test-post-e6f36a \", \\n                         \" authorId\": \"1234567890abcdef \", \\n                         \" publishedAt \": 1626282600, \\n                     } \\n                 } \\n             }, \\n             test_credentials=TEST_CREDENTIALS, \\n         ) \\n  \\n     def create_post( \\n         self, \\n         api_key: SecretStr, \\n         author_id, \\n         title, \\n         content, \\n         content_format, \\n         tags, \\n         canonical_url, \\n         publish_status, \\n         license, \\n         notify_followers, \\n     ): \\n         headers = { \\n             \" Authorization \": f\" Bearer{api_key.get_secret_value()}\", \\n             \" Content-Type\": \"application/json \", \\n             \" Accept\": \"application/json \", \\n         } \\n  \\n         data = { \\n             \" title \": title, \\n             \" content \": content, \\n             \" contentFormat \": content_format, \\n             \" tags \": tags, \\n             \" canonicalUrl \": canonical_url, \\n             \" publishStatus \": publish_status, \\n             \" license \": license, \\n             \" notifyFollowers \": notify_followers, \\n         } \\n  \\n         response = requests.post( \\n             f\" https://api.medium.com/v1/users/{author_id}/posts \", \\n             headers=headers, \\n             json=data, \\n         ) \\n  \\n         return response.json() \\n  \\n     def run( \\n         self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs \\n     ) -> BlockOutput: \\n         response = self.create_post( \\n             credentials.api_key, \\n             input_data.author_id.get_secret_value(), \\n             input_data.title, \\n             input_data.content, \\n             input_data.content_format, \\n             input_data.tags, \\n             input_data.canonical_url, \\n             input_data.publish_status, \\n             input_data.license, \\n             input_data.notify_followers, \\n         ) \\n  \\n         if \" data \" in response: \\n             yield \" post_id \", response[\" data\"][\"id \"] \\n             yield \" post_url \", response[\" data\"][\"url \"] \\n             yield \" published_at \", response[\" data\"][\"publishedAt \"] \\n         else: \\n             error_message = response.get(\" errors \", [{}])[0].get( \\n                 \" message\", \"Unknown error occurred \" \\n             ) \\n             raise RuntimeError(f\" Failed to create Medium post:{error_message}"
                        }
                    ],
                    "content": "Block):\nclass Input(BlockSchema):\nauthor_id:BlockSecret=SecretField(\nkey=\"medium_author_id\",\ndescription=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \" Authorization:Bearer YOUR_ACCESS_TOKEN \" https://api.medium.com/v1/me\" the response will contain the authorId field.\"\"\", \\n             placeholder=\" Enter the author 's Medium AuthorID\", \\n         ) \\n         title: str = SchemaField( \\n             description=\"The title of your Medium post\", \\n             placeholder=\"Enter your post title\", \\n         ) \\n         content: str = SchemaField( \\n             description=\"The main content of your Medium post\", \\n             placeholder=\"Enter your post content\", \\n         ) \\n         content_format: str = SchemaField( \\n             description=\"The format of the content: ' html ' or ' markdown '\", \\n             placeholder=\"html\", \\n         ) \\n         tags: List[str] = SchemaField( \\n             description=\"List of tags for your Medium post (up to 5)\", \\n             placeholder=\"[' technology', 'AI', 'blogging ']\", \\n         ) \\n         canonical_url: str | None = SchemaField( \\n             default=None, \\n             description=\"The original home of this content, if it was originally published elsewhere\", \\n             placeholder=\"https://yourblog.com/original-post\", \\n         ) \\n         publish_status: PublishToMediumStatus = SchemaField( \\n             description=\"The publish status\", \\n             placeholder=PublishToMediumStatus.DRAFT, \\n         ) \\n         license: str = SchemaField( \\n             default=\"all-rights-reserved\", \\n             description=\"The license of the post: ' all-rights-reserved', 'cc-40-by', 'cc-40-by-sa', 'cc-40-by-nd', 'cc-40-by-nc', 'cc-40-by-nc-nd', 'cc-40-by-nc-sa', 'cc-40-zero', 'public-domain'\", \\n             placeholder=\" all-rights-reserved \", \\n         ) \\n         notify_followers: bool = SchemaField( \\n             default=False, \\n             description=\" Whether to notify followers that the user has published \", \\n             placeholder=\" False \", \\n         ) \\n         credentials: CredentialsMetaInput[ \\n             Literal[ProviderName.MEDIUM], Literal[\" api_key \"] \\n         ] = CredentialsField( \\n             description=\" The Medium integration can be used with any API key with sufficient permissions for the blocks it is used on.\", \\n         ) \\n  \\n     class Output(BlockSchema): \\n         post_id: str = SchemaField(description=\" The ID of the created Medium post \") \\n         post_url: str = SchemaField(description=\" The URL of the created Medium post \") \\n         published_at: int = SchemaField( \\n             description=\" The timestamp when the post was published \" \\n         ) \\n         error: str = SchemaField( \\n             description=\" Error message if the post creation failed \" \\n         ) \\n  \\n     def __init__(self): \\n         super().__init__( \\n             id=\"3f7b2dcb-4a78-4e3f-b0f1-88132e1b89df \", \\n             input_schema=PublishToMediumBlock.Input, \\n             output_schema=PublishToMediumBlock.Output, \\n             description=\" Publishes a post to Medium.\", \\n             categories={BlockCategory.SOCIAL}, \\n             test_input={ \\n                 \" author_id\": \"1234567890abcdef \", \\n                 \" title\": \"Test Post \", \\n                 \" content\": \"<h1>Test Content</h1><p>This is a test post.</p>\", \\n                 \" content_format\": \"html \", \\n                 \" tags\": [\"test\", \"automation \"], \\n                 \" license\": \"all-rights-reserved \", \\n                 \" notify_followers \": False, \\n                 \" publish_status \": PublishToMediumStatus.DRAFT.value, \\n                 \" credentials \": TEST_CREDENTIALS_INPUT, \\n             }, \\n             test_output=[ \\n                 (\" post_id\", \"e6f36a \"), \\n                 (\" post_url\", \"https://medium.com/@username/test-post-e6f36a \"), \\n                 (\" published_at \", 1626282600), \\n             ], \\n             test_mock={ \\n                 \" create_post \": lambda *args, **kwargs: { \\n                     \" data \": { \\n                         \" id\": \"e6f36a \", \\n                         \" url\": \"https://medium.com/@username/test-post-e6f36a \", \\n                         \" authorId\": \"1234567890abcdef \", \\n                         \" publishedAt \": 1626282600, \\n                     } \\n                 } \\n             }, \\n             test_credentials=TEST_CREDENTIALS, \\n         ) \\n  \\n     def create_post( \\n         self, \\n         api_key: SecretStr, \\n         author_id, \\n         title, \\n         content, \\n         content_format, \\n         tags, \\n         canonical_url, \\n         publish_status, \\n         license, \\n         notify_followers, \\n     ): \\n         headers = { \\n             \" Authorization \": f\" Bearer{api_key.get_secret_value()}\", \\n             \" Content-Type\": \"application/json \", \\n             \" Accept\": \"application/json \", \\n         } \\n  \\n         data = { \\n             \" title \": title, \\n             \" content \": content, \\n             \" contentFormat \": content_format, \\n             \" tags \": tags, \\n             \" canonicalUrl \": canonical_url, \\n             \" publishStatus \": publish_status, \\n             \" license \": license, \\n             \" notifyFollowers \": notify_followers, \\n         } \\n  \\n         response = requests.post( \\n             f\" https://api.medium.com/v1/users/{author_id}/posts \", \\n             headers=headers, \\n             json=data, \\n         ) \\n  \\n         return response.json() \\n  \\n     def run( \\n         self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs \\n     ) -> BlockOutput: \\n         response = self.create_post( \\n             credentials.api_key, \\n             input_data.author_id.get_secret_value(), \\n             input_data.title, \\n             input_data.content, \\n             input_data.content_format, \\n             input_data.tags, \\n             input_data.canonical_url, \\n             input_data.publish_status, \\n             input_data.license, \\n             input_data.notify_followers, \\n         ) \\n  \\n         if \" data \" in response: \\n             yield \" post_id \", response[\" data\"][\"id \"] \\n             yield \" post_url \", response[\" data\"][\"url \"] \\n             yield \" published_at \", response[\" data\"][\"publishedAt \"] \\n         else: \\n             error_message = response.get(\" errors \", [{}])[0].get( \\n                 \" message\", \"Unknown error occurred \" \\n             ) \\n             raise RuntimeError(f\" Failed to create Medium post:{error_message}"
                }
            ],
            "content": "\n\n\nclass PublishToMediumBlock(Block):\nclass Input(BlockSchema):\nauthor_id:BlockSecret=SecretField(\nkey=\"medium_author_id\",\ndescription=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \" Authorization:Bearer YOUR_ACCESS_TOKEN \" https://api.medium.com/v1/me\" the response will contain the authorId field.\"\"\", \\n             placeholder=\" Enter the author 's Medium AuthorID\", \\n         ) \\n         title: str = SchemaField( \\n             description=\"The title of your Medium post\", \\n             placeholder=\"Enter your post title\", \\n         ) \\n         content: str = SchemaField( \\n             description=\"The main content of your Medium post\", \\n             placeholder=\"Enter your post content\", \\n         ) \\n         content_format: str = SchemaField( \\n             description=\"The format of the content: ' html ' or ' markdown '\", \\n             placeholder=\"html\", \\n         ) \\n         tags: List[str] = SchemaField( \\n             description=\"List of tags for your Medium post (up to 5)\", \\n             placeholder=\"[' technology', 'AI', 'blogging ']\", \\n         ) \\n         canonical_url: str | None = SchemaField( \\n             default=None, \\n             description=\"The original home of this content, if it was originally published elsewhere\", \\n             placeholder=\"https://yourblog.com/original-post\", \\n         ) \\n         publish_status: PublishToMediumStatus = SchemaField( \\n             description=\"The publish status\", \\n             placeholder=PublishToMediumStatus.DRAFT, \\n         ) \\n         license: str = SchemaField( \\n             default=\"all-rights-reserved\", \\n             description=\"The license of the post: ' all-rights-reserved', 'cc-40-by', 'cc-40-by-sa', 'cc-40-by-nd', 'cc-40-by-nc', 'cc-40-by-nc-nd', 'cc-40-by-nc-sa', 'cc-40-zero', 'public-domain'\", \\n             placeholder=\" all-rights-reserved \", \\n         ) \\n         notify_followers: bool = SchemaField( \\n             default=False, \\n             description=\" Whether to notify followers that the user has published \", \\n             placeholder=\" False \", \\n         ) \\n         credentials: CredentialsMetaInput[ \\n             Literal[ProviderName.MEDIUM], Literal[\" api_key \"] \\n         ] = CredentialsField( \\n             description=\" The Medium integration can be used with any API key with sufficient permissions for the blocks it is used on.\", \\n         ) \\n  \\n     class Output(BlockSchema): \\n         post_id: str = SchemaField(description=\" The ID of the created Medium post \") \\n         post_url: str = SchemaField(description=\" The URL of the created Medium post \") \\n         published_at: int = SchemaField( \\n             description=\" The timestamp when the post was published \" \\n         ) \\n         error: str = SchemaField( \\n             description=\" Error message if the post creation failed \" \\n         ) \\n  \\n     def __init__(self): \\n         super().__init__( \\n             id=\"3f7b2dcb-4a78-4e3f-b0f1-88132e1b89df \", \\n             input_schema=PublishToMediumBlock.Input, \\n             output_schema=PublishToMediumBlock.Output, \\n             description=\" Publishes a post to Medium.\", \\n             categories={BlockCategory.SOCIAL}, \\n             test_input={ \\n                 \" author_id\": \"1234567890abcdef \", \\n                 \" title\": \"Test Post \", \\n                 \" content\": \"<h1>Test Content</h1><p>This is a test post.</p>\", \\n                 \" content_format\": \"html \", \\n                 \" tags\": [\"test\", \"automation \"], \\n                 \" license\": \"all-rights-reserved \", \\n                 \" notify_followers \": False, \\n                 \" publish_status \": PublishToMediumStatus.DRAFT.value, \\n                 \" credentials \": TEST_CREDENTIALS_INPUT, \\n             }, \\n             test_output=[ \\n                 (\" post_id\", \"e6f36a \"), \\n                 (\" post_url\", \"https://medium.com/@username/test-post-e6f36a \"), \\n                 (\" published_at \", 1626282600), \\n             ], \\n             test_mock={ \\n                 \" create_post \": lambda *args, **kwargs: { \\n                     \" data \": { \\n                         \" id\": \"e6f36a \", \\n                         \" url\": \"https://medium.com/@username/test-post-e6f36a \", \\n                         \" authorId\": \"1234567890abcdef \", \\n                         \" publishedAt \": 1626282600, \\n                     } \\n                 } \\n             }, \\n             test_credentials=TEST_CREDENTIALS, \\n         ) \\n  \\n     def create_post( \\n         self, \\n         api_key: SecretStr, \\n         author_id, \\n         title, \\n         content, \\n         content_format, \\n         tags, \\n         canonical_url, \\n         publish_status, \\n         license, \\n         notify_followers, \\n     ): \\n         headers = { \\n             \" Authorization \": f\" Bearer{api_key.get_secret_value()}\", \\n             \" Content-Type\": \"application/json \", \\n             \" Accept\": \"application/json \", \\n         } \\n  \\n         data = { \\n             \" title \": title, \\n             \" content \": content, \\n             \" contentFormat \": content_format, \\n             \" tags \": tags, \\n             \" canonicalUrl \": canonical_url, \\n             \" publishStatus \": publish_status, \\n             \" license \": license, \\n             \" notifyFollowers \": notify_followers, \\n         } \\n  \\n         response = requests.post( \\n             f\" https://api.medium.com/v1/users/{author_id}/posts \", \\n             headers=headers, \\n             json=data, \\n         ) \\n  \\n         return response.json() \\n  \\n     def run( \\n         self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs \\n     ) -> BlockOutput: \\n         response = self.create_post( \\n             credentials.api_key, \\n             input_data.author_id.get_secret_value(), \\n             input_data.title, \\n             input_data.content, \\n             input_data.content_format, \\n             input_data.tags, \\n             input_data.canonical_url, \\n             input_data.publish_status, \\n             input_data.license, \\n             input_data.notify_followers, \\n         ) \\n  \\n         if \" data \" in response: \\n             yield \" post_id \", response[\" data\"][\"id \"] \\n             yield \" post_url \", response[\" data\"][\"url \"] \\n             yield \" published_at \", response[\" data\"][\"publishedAt \"] \\n         else: \\n             error_message = response.get(\" errors \", [{}])[0].get( \\n                 \" message\", \"Unknown error occurred \" \\n             ) \\n             raise RuntimeError(f\" Failed to create Medium post:{error_message}"
        }
    ],
    "content": "TEST_CREDENTIALS=APIKeyCredentials(\nid=\"01234567-89ab-cdef-0123-456789abcdef\",\nprovider=\"medium\",\napi_key=SecretStr(\"mock-medium-api-key\"),\ntitle=\"Mock Medium API key\",\nexpires_at=None,\n)\nTEST_CREDENTIALS_INPUT={\n\"provider\":TEST_CREDENTIALS.provider,\n\"id\":TEST_CREDENTIALS.id,\n\"type\":TEST_CREDENTIALS.type,\n\"title\":TEST_CREDENTIALS.type,\n}\n\n\nclass PublishToMediumStatus(str,Enum):\nPUBLIC=\"public\"\nDRAFT=\"draft\"\nUNLISTED=\"unlisted\"\n\n\nclass PublishToMediumBlock(Block):\nclass Input(BlockSchema):\nauthor_id:BlockSecret=SecretField(\nkey=\"medium_author_id\",\ndescription=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \" Authorization:Bearer YOUR_ACCESS_TOKEN \" https://api.medium.com/v1/me\" the response will contain the authorId field.\"\"\", \\n             placeholder=\" Enter the author 's Medium AuthorID\", \\n         ) \\n         title: str = SchemaField( \\n             description=\"The title of your Medium post\", \\n             placeholder=\"Enter your post title\", \\n         ) \\n         content: str = SchemaField( \\n             description=\"The main content of your Medium post\", \\n             placeholder=\"Enter your post content\", \\n         ) \\n         content_format: str = SchemaField( \\n             description=\"The format of the content: ' html ' or ' markdown '\", \\n             placeholder=\"html\", \\n         ) \\n         tags: List[str] = SchemaField( \\n             description=\"List of tags for your Medium post (up to 5)\", \\n             placeholder=\"[' technology', 'AI', 'blogging ']\", \\n         ) \\n         canonical_url: str | None = SchemaField( \\n             default=None, \\n             description=\"The original home of this content, if it was originally published elsewhere\", \\n             placeholder=\"https://yourblog.com/original-post\", \\n         ) \\n         publish_status: PublishToMediumStatus = SchemaField( \\n             description=\"The publish status\", \\n             placeholder=PublishToMediumStatus.DRAFT, \\n         ) \\n         license: str = SchemaField( \\n             default=\"all-rights-reserved\", \\n             description=\"The license of the post: ' all-rights-reserved', 'cc-40-by', 'cc-40-by-sa', 'cc-40-by-nd', 'cc-40-by-nc', 'cc-40-by-nc-nd', 'cc-40-by-nc-sa', 'cc-40-zero', 'public-domain'\", \\n             placeholder=\" all-rights-reserved \", \\n         ) \\n         notify_followers: bool = SchemaField( \\n             default=False, \\n             description=\" Whether to notify followers that the user has published \", \\n             placeholder=\" False \", \\n         ) \\n         credentials: CredentialsMetaInput[ \\n             Literal[ProviderName.MEDIUM], Literal[\" api_key \"] \\n         ] = CredentialsField( \\n             description=\" The Medium integration can be used with any API key with sufficient permissions for the blocks it is used on.\", \\n         ) \\n  \\n     class Output(BlockSchema): \\n         post_id: str = SchemaField(description=\" The ID of the created Medium post \") \\n         post_url: str = SchemaField(description=\" The URL of the created Medium post \") \\n         published_at: int = SchemaField( \\n             description=\" The timestamp when the post was published \" \\n         ) \\n         error: str = SchemaField( \\n             description=\" Error message if the post creation failed \" \\n         ) \\n  \\n     def __init__(self): \\n         super().__init__( \\n             id=\"3f7b2dcb-4a78-4e3f-b0f1-88132e1b89df \", \\n             input_schema=PublishToMediumBlock.Input, \\n             output_schema=PublishToMediumBlock.Output, \\n             description=\" Publishes a post to Medium.\", \\n             categories={BlockCategory.SOCIAL}, \\n             test_input={ \\n                 \" author_id\": \"1234567890abcdef \", \\n                 \" title\": \"Test Post \", \\n                 \" content\": \"<h1>Test Content</h1><p>This is a test post.</p>\", \\n                 \" content_format\": \"html \", \\n                 \" tags\": [\"test\", \"automation \"], \\n                 \" license\": \"all-rights-reserved \", \\n                 \" notify_followers \": False, \\n                 \" publish_status \": PublishToMediumStatus.DRAFT.value, \\n                 \" credentials \": TEST_CREDENTIALS_INPUT, \\n             }, \\n             test_output=[ \\n                 (\" post_id\", \"e6f36a \"), \\n                 (\" post_url\", \"https://medium.com/@username/test-post-e6f36a \"), \\n                 (\" published_at \", 1626282600), \\n             ], \\n             test_mock={ \\n                 \" create_post \": lambda *args, **kwargs: { \\n                     \" data \": { \\n                         \" id\": \"e6f36a \", \\n                         \" url\": \"https://medium.com/@username/test-post-e6f36a \", \\n                         \" authorId\": \"1234567890abcdef \", \\n                         \" publishedAt \": 1626282600, \\n                     } \\n                 } \\n             }, \\n             test_credentials=TEST_CREDENTIALS, \\n         ) \\n  \\n     def create_post( \\n         self, \\n         api_key: SecretStr, \\n         author_id, \\n         title, \\n         content, \\n         content_format, \\n         tags, \\n         canonical_url, \\n         publish_status, \\n         license, \\n         notify_followers, \\n     ): \\n         headers = { \\n             \" Authorization \": f\" Bearer{api_key.get_secret_value()}\", \\n             \" Content-Type\": \"application/json \", \\n             \" Accept\": \"application/json \", \\n         } \\n  \\n         data = { \\n             \" title \": title, \\n             \" content \": content, \\n             \" contentFormat \": content_format, \\n             \" tags \": tags, \\n             \" canonicalUrl \": canonical_url, \\n             \" publishStatus \": publish_status, \\n             \" license \": license, \\n             \" notifyFollowers \": notify_followers, \\n         } \\n  \\n         response = requests.post( \\n             f\" https://api.medium.com/v1/users/{author_id}/posts \", \\n             headers=headers, \\n             json=data, \\n         ) \\n  \\n         return response.json() \\n  \\n     def run( \\n         self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs \\n     ) -> BlockOutput: \\n         response = self.create_post( \\n             credentials.api_key, \\n             input_data.author_id.get_secret_value(), \\n             input_data.title, \\n             input_data.content, \\n             input_data.content_format, \\n             input_data.tags, \\n             input_data.canonical_url, \\n             input_data.publish_status, \\n             input_data.license, \\n             input_data.notify_followers, \\n         ) \\n  \\n         if \" data \" in response: \\n             yield \" post_id \", response[\" data\"][\"id \"] \\n             yield \" post_url \", response[\" data\"][\"url \"] \\n             yield \" published_at \", response[\" data\"][\"publishedAt \"] \\n         else: \\n             error_message = response.get(\" errors \", [{}])[0].get( \\n                 \" message\", \"Unknown error occurred \" \\n             ) \\n             raise RuntimeError(f\" Failed to create Medium post:{error_message}"
}