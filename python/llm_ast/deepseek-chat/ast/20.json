{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        119
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                1,
                1
            ],
            "children": [],
            "content": "\" \\n Calculates the sum of two non-negative integers using bitwise operators \\n Wikipedia explanation: https://en.wikipedia.org/wiki/Binary_number \\n \""
        },
        {
            "type": "FunctionDecl",
            "name": "bitwise_addition_recursive",
            "range": [
                4,
                101
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        6,
                        14
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "number",
                            "range": [
                                7,
                                9
                            ],
                            "children": [],
                            "content": "bitwise_addition_recursive(number"
                        },
                        {
                            "type": "Parameter",
                            "name": "other_number",
                            "range": [
                                11,
                                13
                            ],
                            "children": [],
                            "content": "int,other_number"
                        }
                    ],
                    "content": "def bitwise_addition_recursive(number:int,other_number:"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        15,
                        17
                    ],
                    "children": [],
                    "content": "int)-"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        20,
                        22
                    ],
                    "children": [],
                    "content": ":\n\"\""
                },
                {
                    "type": "Body",
                    "name": "body",
                    "range": [
                        25,
                        101
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                25,
                                48
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        26,
                                        40
                                    ],
                                    "children": [],
                                    "content": "\nif not isinstance(number,int)or not isinstance(other_number,"
                                },
                                {
                                    "type": "Body",
                                    "name": "body",
                                    "range": [
                                        43,
                                        47
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise_statement",
                                            "range": [
                                                43,
                                                47
                                            ],
                                            "children": [],
                                            "content": ":\nraise TypeError("
                                        }
                                    ],
                                    "content": ":\nraise TypeError("
                                }
                            ],
                            "content": "\n\nif not isinstance(number,int)or not isinstance(other_number,int):\nraise TypeError(\"Both arguments MUST be integers!\""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                50,
                                65
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        51,
                                        57
                                    ],
                                    "children": [],
                                    "content": "\nif number<0or other_number"
                                },
                                {
                                    "type": "Body",
                                    "name": "body",
                                    "range": [
                                        60,
                                        64
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise_statement",
                                            "range": [
                                                60,
                                                64
                                            ],
                                            "children": [],
                                            "content": ":\nraise ValueError("
                                        }
                                    ],
                                    "content": ":\nraise ValueError("
                                }
                            ],
                            "content": "\n\nif number<0or other_number<0:\nraise ValueError(\"Both arguments MUST be non-negative!\""
                        },
                        {
                            "type": "Assignment",
                            "name": "assignment",
                            "range": [
                                67,
                                72
                            ],
                            "children": [],
                            "content": "\n\nbitwise_sum=number^"
                        },
                        {
                            "type": "Assignment",
                            "name": "assignment",
                            "range": [
                                73,
                                78
                            ],
                            "children": [],
                            "content": "other_number\ncarry=number&"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                80,
                                89
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        81,
                                        84
                                    ],
                                    "children": [],
                                    "content": "\nif carry="
                                },
                                {
                                    "type": "Body",
                                    "name": "body",
                                    "range": [
                                        87,
                                        88
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return_statement",
                                            "range": [
                                                87,
                                                88
                                            ],
                                            "children": [],
                                            "content": ":\n"
                                        }
                                    ],
                                    "content": ":\n"
                                }
                            ],
                            "content": "\n\nif carry==0:\nreturn"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_statement",
                            "range": [
                                91,
                                101
                            ],
                            "children": [],
                            "content": "\n\nreturn bitwise_addition_recursive(bitwise_sum,carry<<1"
                        }
                    ],
                    "content": "\n\nif not isinstance(number,int)or not isinstance(other_number,int):\nraise TypeError(\"Both arguments MUST be integers!\")\n\nif number<0or other_number<0:\nraise ValueError(\"Both arguments MUST be non-negative!\")\n\nbitwise_sum=number^other_number\ncarry=number&other_number\n\nif carry==0:\nreturn bitwise_sum\n\nreturn bitwise_addition_recursive(bitwise_sum,carry<<1"
                }
            ],
            "content": "\n\ndef bitwise_addition_recursive(number:int,other_number:int)->int:\n\"\"\" \\n     >>> bitwise_addition_recursive(4, 5) \\n     9 \\n     >>> bitwise_addition_recursive(8, 9) \\n     17 \\n     >>> bitwise_addition_recursive(0, 4) \\n     4 \\n     >>> bitwise_addition_recursive(4.5, 9) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Both arguments MUST be integers! \\n     >>> bitwise_addition_recursive('4', 9) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Both arguments MUST be integers! \\n     >>> bitwise_addition_recursive('4.5', 9) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Both arguments MUST be integers! \\n     >>> bitwise_addition_recursive(-1, 9) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Both arguments MUST be non-negative! \\n     >>> bitwise_addition_recursive(1, -9) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Both arguments MUST be non-negative! \\n     \"\"\"\n\nif not isinstance(number,int)or not isinstance(other_number,int):\nraise TypeError(\"Both arguments MUST be integers!\")\n\nif number<0or other_number<0:\nraise ValueError(\"Both arguments MUST be non-negative!\")\n\nbitwise_sum=number^other_number\ncarry=number&other_number\n\nif carry==0:\nreturn bitwise_sum\n\nreturn bitwise_addition_recursive(bitwise_sum,carry<<1"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                102,
                108
            ],
            "children": [
                {
                    "type": "BinaryExpression",
                    "name": "",
                    "range": [
                        103,
                        106
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "__name__",
                            "range": [
                                103,
                                103
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Operator",
                            "name": "==",
                            "range": [
                                104,
                                105
                            ],
                            "children": [],
                            "content": "\n\n"
                        },
                        {
                            "type": "Literal",
                            "name": "\"__main__\"",
                            "range": [
                                106,
                                106
                            ],
                            "children": [],
                            "content": "if"
                        }
                    ],
                    "content": "\n\n\nif"
                }
            ],
            "content": ")\n\n\nif __name__="
        },
        {
            "type": "ImportStatement",
            "name": "doctest",
            "range": [
                109,
                111
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "doctest",
                    "range": [
                        110,
                        110
                    ],
                    "children": [],
                    "content": "\"__main__\""
                }
            ],
            "content": "=\"__main__\":"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                113,
                118
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "",
                    "range": [
                        113,
                        117
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "",
                            "range": [
                                113,
                                115
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "doctest",
                                    "range": [
                                        113,
                                        113
                                    ],
                                    "children": [],
                                    "content": "import"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "testmod",
                                    "range": [
                                        115,
                                        115
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "import doctest\n"
                        }
                    ],
                    "content": "import doctest\n\ndoctest"
                }
            ],
            "content": "import doctest\n\ndoctest."
        }
    ],
    "content": "\"\"\" \\n Calculates the sum of two non-negative integers using bitwise operators \\n Wikipedia explanation: https://en.wikipedia.org/wiki/Binary_number \\n \"\"\"\n\n\ndef bitwise_addition_recursive(number:int,other_number:int)->int:\n\"\"\" \\n     >>> bitwise_addition_recursive(4, 5) \\n     9 \\n     >>> bitwise_addition_recursive(8, 9) \\n     17 \\n     >>> bitwise_addition_recursive(0, 4) \\n     4 \\n     >>> bitwise_addition_recursive(4.5, 9) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Both arguments MUST be integers! \\n     >>> bitwise_addition_recursive('4', 9) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Both arguments MUST be integers! \\n     >>> bitwise_addition_recursive('4.5', 9) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Both arguments MUST be integers! \\n     >>> bitwise_addition_recursive(-1, 9) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Both arguments MUST be non-negative! \\n     >>> bitwise_addition_recursive(1, -9) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Both arguments MUST be non-negative! \\n     \"\"\"\n\nif not isinstance(number,int)or not isinstance(other_number,int):\nraise TypeError(\"Both arguments MUST be integers!\")\n\nif number<0or other_number<0:\nraise ValueError(\"Both arguments MUST be non-negative!\")\n\nbitwise_sum=number^other_number\ncarry=number&other_number\n\nif carry==0:\nreturn bitwise_sum\n\nreturn bitwise_addition_recursive(bitwise_sum,carry<<1)\n\n\nif __name__==\"__main__\":\nimport doctest\n\ndoctest.testmod"
}