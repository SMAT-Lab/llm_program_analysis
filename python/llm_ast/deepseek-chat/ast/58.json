{
    "type": "Program",
    "name": "Global",
    "range": [
        37,
        614
    ],
    "children": [
        {
            "type": "EnumMember",
            "name": "EQUAL",
            "range": [
                44,
                46
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\"==\"",
                    "range": [
                        46,
                        46
                    ],
                    "children": [],
                    "content": "\"==\""
                }
            ],
            "content": "EQUAL=\"==\""
        },
        {
            "type": "EnumMember",
            "name": "NOT_EQUAL",
            "range": [
                48,
                50
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\"!=\"",
                    "range": [
                        50,
                        50
                    ],
                    "children": [],
                    "content": "\"!=\""
                }
            ],
            "content": "NOT_EQUAL=\"!=\""
        },
        {
            "type": "EnumMember",
            "name": "GREATER_THAN",
            "range": [
                52,
                54
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\">\"",
                    "range": [
                        54,
                        54
                    ],
                    "children": [],
                    "content": "\">\""
                }
            ],
            "content": "GREATER_THAN=\">\""
        },
        {
            "type": "EnumMember",
            "name": "LESS_THAN",
            "range": [
                56,
                58
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\"<\"",
                    "range": [
                        58,
                        58
                    ],
                    "children": [],
                    "content": "\"<\""
                }
            ],
            "content": "LESS_THAN=\"<\""
        },
        {
            "type": "EnumMember",
            "name": "GREATER_THAN_OR_EQUAL",
            "range": [
                60,
                62
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\">=\"",
                    "range": [
                        62,
                        62
                    ],
                    "children": [],
                    "content": "\">=\""
                }
            ],
            "content": "GREATER_THAN_OR_EQUAL=\">=\""
        },
        {
            "type": "EnumMember",
            "name": "LESS_THAN_OR_EQUAL",
            "range": [
                64,
                66
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\"<=\"",
                    "range": [
                        66,
                        66
                    ],
                    "children": [],
                    "content": "\"<=\""
                }
            ],
            "content": "LESS_THAN_OR_EQUAL=\"<=\""
        },
        {
            "type": "ClassDecl",
            "name": "ConditionBlock",
            "range": [
                69,
                74
            ],
            "children": [
                {
                    "type": "ClassBody",
                    "children": [
                        {
                            "type": "ClassDecl",
                            "name": "Input",
                            "range": [
                                76,
                                81
                            ],
                            "children": [
                                {
                                    "type": "ClassBody",
                                    "children": [
                                        {
                                            "type": "FieldDefinition",
                                            "name": "value1",
                                            "range": [
                                                83,
                                                100
                                            ],
                                            "children": [
                                                {
                                                    "type": "SchemaField",
                                                    "range": [
                                                        87,
                                                        100
                                                    ],
                                                    "content": "=SchemaField(\ndescription=\"Enter the first value for comparison\",\nplaceholder=\"For example: 10 or 'hello' or True\",\n"
                                                }
                                            ],
                                            "content": "\nvalue1:Any=SchemaField(\ndescription=\"Enter the first value for comparison\",\nplaceholder=\"For example: 10 or 'hello' or True\",\n"
                                        },
                                        {
                                            "type": "FieldDefinition",
                                            "name": "operator",
                                            "range": [
                                                102,
                                                119
                                            ],
                                            "children": [
                                                {
                                                    "type": "SchemaField",
                                                    "range": [
                                                        106,
                                                        119
                                                    ],
                                                    "content": "=SchemaField(\ndescription=\"Choose the comparison operator\",\nplaceholder=\"Select an operator\",\n"
                                                }
                                            ],
                                            "content": "\noperator:ComparisonOperator=SchemaField(\ndescription=\"Choose the comparison operator\",\nplaceholder=\"Select an operator\",\n"
                                        },
                                        {
                                            "type": "FieldDefinition",
                                            "name": "value2",
                                            "range": [
                                                121,
                                                138
                                            ],
                                            "children": [
                                                {
                                                    "type": "SchemaField",
                                                    "range": [
                                                        125,
                                                        138
                                                    ],
                                                    "content": "=SchemaField(\ndescription=\"Enter the second value for comparison\",\nplaceholder=\"For example: 20 or 'world' or False\",\n"
                                                }
                                            ],
                                            "content": "\nvalue2:Any=SchemaField(\ndescription=\"Enter the second value for comparison\",\nplaceholder=\"For example: 20 or 'world' or False\",\n"
                                        },
                                        {
                                            "type": "FieldDefinition",
                                            "name": "yes_value",
                                            "range": [
                                                140,
                                                162
                                            ],
                                            "children": [
                                                {
                                                    "type": "SchemaField",
                                                    "range": [
                                                        144,
                                                        162
                                                    ],
                                                    "content": "=SchemaField(\ndescription=\"(Optional) Value to output if the condition is true. If not provided, value1 will be used.\",\nplaceholder=\"Leave empty to use value1, or enter a specific value\",\ndefault=None,\n"
                                                }
                                            ],
                                            "content": "\nyes_value:Any=SchemaField(\ndescription=\"(Optional) Value to output if the condition is true. If not provided, value1 will be used.\",\nplaceholder=\"Leave empty to use value1, or enter a specific value\",\ndefault=None,\n"
                                        },
                                        {
                                            "type": "FieldDefinition",
                                            "name": "no_value",
                                            "range": [
                                                164,
                                                186
                                            ],
                                            "children": [
                                                {
                                                    "type": "SchemaField",
                                                    "range": [
                                                        168,
                                                        186
                                                    ],
                                                    "content": "=SchemaField(\ndescription=\"(Optional) Value to output if the condition is false. If not provided, value1 will be used.\",\nplaceholder=\"Leave empty to use value1, or enter a specific value\",\ndefault=None,\n"
                                                }
                                            ],
                                            "content": "\nno_value:Any=SchemaField(\ndescription=\"(Optional) Value to output if the condition is false. If not provided, value1 will be used.\",\nplaceholder=\"Leave empty to use value1, or enter a specific value\",\ndefault=None,\n"
                                        }
                                    ]
                                }
                            ],
                            "content": "\nclass Input(BlockSchema)"
                        },
                        {
                            "type": "ClassDecl",
                            "name": "Output",
                            "range": [
                                189,
                                194
                            ],
                            "children": [
                                {
                                    "type": "ClassBody",
                                    "children": [
                                        {
                                            "type": "FieldDefinition",
                                            "name": "result",
                                            "range": [
                                                196,
                                                207
                                            ],
                                            "children": [
                                                {
                                                    "type": "SchemaField",
                                                    "range": [
                                                        200,
                                                        207
                                                    ],
                                                    "content": "=SchemaField(\ndescription=\"The result of the condition evaluation (True or False)\"\n"
                                                }
                                            ],
                                            "content": "\nresult:bool=SchemaField(\ndescription=\"The result of the condition evaluation (True or False)\"\n"
                                        },
                                        {
                                            "type": "FieldDefinition",
                                            "name": "yes_output",
                                            "range": [
                                                209,
                                                220
                                            ],
                                            "children": [
                                                {
                                                    "type": "SchemaField",
                                                    "range": [
                                                        213,
                                                        220
                                                    ],
                                                    "content": "=SchemaField(\ndescription=\"The output value if the condition is true\"\n"
                                                }
                                            ],
                                            "content": "\nyes_output:Any=SchemaField(\ndescription=\"The output value if the condition is true\"\n"
                                        },
                                        {
                                            "type": "FieldDefinition",
                                            "name": "no_output",
                                            "range": [
                                                222,
                                                233
                                            ],
                                            "children": [
                                                {
                                                    "type": "SchemaField",
                                                    "range": [
                                                        226,
                                                        233
                                                    ],
                                                    "content": "=SchemaField(\ndescription=\"The output value if the condition is false\"\n"
                                                }
                                            ],
                                            "content": "\nno_output:Any=SchemaField(\ndescription=\"The output value if the condition is false\"\n"
                                        }
                                    ]
                                }
                            ],
                            "content": "\nclass Output(BlockSchema)"
                        }
                    ]
                }
            ],
            "content": "\nclass ConditionBlock(Block)"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                236,
                341
            ],
            "children": [
                {
                    "type": "BlockStatement",
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "range": [
                                243,
                                340
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "range": [
                                        243,
                                        340
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "range": [
                                                243,
                                                247
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "super",
                                                    "range": [
                                                        243,
                                                        247
                                                    ],
                                                    "content": "\nsuper()."
                                                }
                                            ],
                                            "content": "\nsuper()."
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "__init__",
                                            "range": [
                                                247,
                                                248
                                            ],
                                            "content": ".__init__"
                                        },
                                        {
                                            "type": "ObjectExpression",
                                            "range": [
                                                249,
                                                340
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "key": "id",
                                                    "value": "715696a0-e1da-45c8-b209-c2fa9c3b0be6",
                                                    "range": [
                                                        250,
                                                        253
                                                    ],
                                                    "content": "\nid=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\""
                                                },
                                                {
                                                    "type": "Property",
                                                    "key": "input_schema",
                                                    "value": "ConditionBlock.Input",
                                                    "range": [
                                                        255,
                                                        260
                                                    ],
                                                    "content": "\ninput_schema=ConditionBlock.Input"
                                                },
                                                {
                                                    "type": "Property",
                                                    "key": "output_schema",
                                                    "value": "ConditionBlock.Output",
                                                    "range": [
                                                        262,
                                                        267
                                                    ],
                                                    "content": "\noutput_schema=ConditionBlock.Output"
                                                },
                                                {
                                                    "type": "Property",
                                                    "key": "description",
                                                    "value": "Handles conditional logic based on comparison operators",
                                                    "range": [
                                                        269,
                                                        272
                                                    ],
                                                    "content": "\ndescription=\"Handles conditional logic based on comparison operators\""
                                                },
                                                {
                                                    "type": "Property",
                                                    "key": "categories",
                                                    "value": "{BlockCategory.LOGIC}",
                                                    "range": [
                                                        274,
                                                        281
                                                    ],
                                                    "content": "\ncategories={BlockCategory.LOGIC}"
                                                },
                                                {
                                                    "type": "Property",
                                                    "key": "test_input",
                                                    "value": {
                                                        "value1": 10,
                                                        "operator": "ComparisonOperator.GREATER_THAN.value",
                                                        "value2": 5,
                                                        "yes_value": "Greater",
                                                        "no_value": "Not greater"
                                                    },
                                                    "range": [
                                                        283,
                                                        317
                                                    ],
                                                    "content": "\ntest_input={\n\"value1\":10,\n\"operator\":ComparisonOperator.GREATER_THAN.value,\n\"value2\":5,\n\"yes_value\":\"Greater\",\n\"no_value\":\"Not greater\",\n}"
                                                },
                                                {
                                                    "type": "Property",
                                                    "key": "test_output",
                                                    "value": [
                                                        [
                                                            "result",
                                                            true
                                                        ],
                                                        [
                                                            "yes_output",
                                                            "Greater"
                                                        ]
                                                    ],
                                                    "range": [
                                                        319,
                                                        338
                                                    ],
                                                    "content": "\ntest_output=[\n(\"result\",True),\n(\"yes_output\",\"Greater\"),\n]"
                                                }
                                            ],
                                            "content": "(\nid=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\ninput_schema=ConditionBlock.Input,\noutput_schema=ConditionBlock.Output,\ndescription=\"Handles conditional logic based on comparison operators\",\ncategories={BlockCategory.LOGIC},\ntest_input={\n\"value1\":10,\n\"operator\":ComparisonOperator.GREATER_THAN.value,\n\"value2\":5,\n\"yes_value\":\"Greater\",\n\"no_value\":\"Not greater\",\n},\ntest_output=[\n(\"result\",True),\n(\"yes_output\",\"Greater\"),\n],\n"
                                        }
                                    ],
                                    "content": "\nsuper().__init__(\nid=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\ninput_schema=ConditionBlock.Input,\noutput_schema=ConditionBlock.Output,\ndescription=\"Handles conditional logic based on comparison operators\",\ncategories={BlockCategory.LOGIC},\ntest_input={\n\"value1\":10,\n\"operator\":ComparisonOperator.GREATER_THAN.value,\n\"value2\":5,\n\"yes_value\":\"Greater\",\n\"no_value\":\"Not greater\",\n},\ntest_output=[\n(\"result\",True),\n(\"yes_output\",\"Greater\"),\n],\n"
                                }
                            ],
                            "content": "\nsuper().__init__(\nid=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\ninput_schema=ConditionBlock.Input,\noutput_schema=ConditionBlock.Output,\ndescription=\"Handles conditional logic based on comparison operators\",\ncategories={BlockCategory.LOGIC},\ntest_input={\n\"value1\":10,\n\"operator\":ComparisonOperator.GREATER_THAN.value,\n\"value2\":5,\n\"yes_value\":\"Greater\",\n\"no_value\":\"Not greater\",\n},\ntest_output=[\n(\"result\",True),\n(\"yes_output\",\"Greater\"),\n],\n"
                        }
                    ]
                }
            ],
            "content": "\ndef __init__(self):\nsuper().__init__(\nid=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\ninput_schema=ConditionBlock.Input,\noutput_schema=ConditionBlock.Output,\ndescription=\"Handles conditional logic based on comparison operators\",\ncategories={BlockCategory.LOGIC},\ntest_input={\n\"value1\":10,\n\"operator\":ComparisonOperator.GREATER_THAN.value,\n\"value2\":5,\n\"yes_value\":\"Greater\",\n\"no_value\":\"Not greater\",\n},\ntest_output=[\n(\"result\",True),\n(\"yes_output\",\"Greater\"),\n],\n)"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                343,
                614
            ],
            "children": [
                {
                    "type": "BlockStatement",
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "range": [
                                361,
                                366
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "operator",
                                        "range": [
                                            361,
                                            366
                                        ],
                                        "content": "\noperator=input_data.operator"
                                    },
                                    "init": {
                                        "type": "MemberExpression",
                                        "range": [
                                            363,
                                            366
                                        ],
                                        "children": [
                                            {
                                                "type": "Identifier",
                                                "name": "input_data",
                                                "range": [
                                                    363,
                                                    366
                                                ],
                                                "content": "=input_data.operator"
                                            }
                                        ],
                                        "content": "=input_data.operator"
                                    }
                                }
                            ],
                            "content": "\noperator=input_data.operator"
                        },
                        {
                            "type": "VariableDeclaration",
                            "range": [
                                368,
                                408
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "value1",
                                        "range": [
                                            368,
                                            373
                                        ],
                                        "content": "\nvalue1=input_data.value1"
                                    },
                                    "init": {
                                        "type": "MemberExpression",
                                        "range": [
                                            370,
                                            373
                                        ],
                                        "children": [
                                            {
                                                "type": "Identifier",
                                                "name": "input_data",
                                                "range": [
                                                    370,
                                                    373
                                                ],
                                                "content": "=input_data.value1"
                                            }
                                        ],
                                        "content": "=input_data.value1"
                                    }
                                }
                            ],
                            "content": "\nvalue1=input_data.value1\nif isinstance(value1,str):\ntry:\nvalue1=float(value1.strip())\nexcept ValueError:\nvalue1=value1.strip()"
                        },
                        {
                            "type": "IfStatement",
                            "range": [
                                374,
                                408
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "range": [
                                        375,
                                        380
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "isinstance",
                                            "range": [
                                                375,
                                                380
                                            ],
                                            "content": "if isinstance(value1,str"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "value1",
                                            "range": [
                                                377,
                                                380
                                            ],
                                            "content": "(value1,str"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "str",
                                            "range": [
                                                379,
                                                380
                                            ],
                                            "content": ",str"
                                        }
                                    ],
                                    "content": "if isinstance(value1,str"
                                },
                                {
                                    "type": "BlockStatement",
                                    "children": [
                                        {
                                            "type": "TryStatement",
                                            "range": [
                                                383,
                                                408
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "range": [
                                                                386,
                                                                396
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "value1",
                                                                        "range": [
                                                                            386,
                                                                            396
                                                                        ],
                                                                        "content": "\nvalue1=float(value1.strip())"
                                                                    },
                                                                    "right": {
                                                                        "type": "CallExpression",
                                                                        "range": [
                                                                            388,
                                                                            396
                                                                        ],
                                                                        "children": [
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "float",
                                                                                "range": [
                                                                                    388,
                                                                                    396
                                                                                ],
                                                                                "content": "=float(value1.strip())"
                                                                            },
                                                                            {
                                                                                "type": "CallExpression",
                                                                                "range": [
                                                                                    390,
                                                                                    396
                                                                                ],
                                                                                "children": [
                                                                                    {
                                                                                        "type": "MemberExpression",
                                                                                        "range": [
                                                                                            390,
                                                                                            396
                                                                                        ],
                                                                                        "children": [
                                                                                            {
                                                                                                "type": "Identifier",
                                                                                                "name": "value1",
                                                                                                "range": [
                                                                                                    390,
                                                                                                    396
                                                                                                ],
                                                                                                "content": "(value1.strip())"
                                                                                            }
                                                                                        ],
                                                                                        "content": "(value1.strip())"
                                                                                    }
                                                                                ],
                                                                                "content": "(value1.strip())"
                                                                            }
                                                                        ],
                                                                        "content": "=float(value1.strip())"
                                                                    }
                                                                }
                                                            ],
                                                            "content": "\nvalue1=float(value1.strip())"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "CatchClause",
                                                    "param": {
                                                        "type": "Identifier",
                                                        "name": "ValueError",
                                                        "range": [
                                                            398,
                                                            399
                                                        ],
                                                        "content": "except ValueError"
                                                    },
                                                    "body": {
                                                        "type": "BlockStatement",
                                                        "children": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "range": [
                                                                    401,
                                                                    408
                                                                ],
                                                                "children": [
                                                                    {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "Identifier",
                                                                            "name": "value1",
                                                                            "range": [
                                                                                401,
                                                                                408
                                                                            ],
                                                                            "content": "\nvalue1=value1.strip()"
                                                                        },
                                                                        "right": {
                                                                            "type": "CallExpression",
                                                                            "range": [
                                                                                403,
                                                                                408
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "range": [
                                                                                        403,
                                                                                        408
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "value1",
                                                                                            "range": [
                                                                                                403,
                                                                                                408
                                                                                            ],
                                                                                            "content": "=value1.strip()"
                                                                                        }
                                                                                    ],
                                                                                    "content": "=value1.strip()"
                                                                                }
                                                                            ],
                                                                            "content": "=value1.strip()"
                                                                        }
                                                                    }
                                                                ],
                                                                "content": "\nvalue1=value1.strip()"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "content": "\ntry:\nvalue1=float(value1.strip())\nexcept ValueError:\nvalue1=value1.strip()"
                                        }
                                    ]
                                }
                            ],
                            "content": "\nif isinstance(value1,str):\ntry:\nvalue1=float(value1.strip())\nexcept ValueError:\nvalue1=value1.strip()"
                        },
                        {
                            "type": "VariableDeclaration",
                            "range": [
                                410,
                                450
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "value2",
                                        "range": [
                                            410,
                                            415
                                        ],
                                        "content": "\nvalue2=input_data.value2"
                                    },
                                    "init": {
                                        "type": "MemberExpression",
                                        "range": [
                                            412,
                                            415
                                        ],
                                        "children": [
                                            {
                                                "type": "Identifier",
                                                "name": "input_data",
                                                "range": [
                                                    412,
                                                    415
                                                ],
                                                "content": "=input_data.value2"
                                            }
                                        ],
                                        "content": "=input_data.value2"
                                    }
                                }
                            ],
                            "content": "\nvalue2=input_data.value2\nif isinstance(value2,str):\ntry:\nvalue2=float(value2.strip())\nexcept ValueError:\nvalue2=value2.strip()"
                        },
                        {
                            "type": "IfStatement",
                            "range": [
                                416,
                                450
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "range": [
                                        417,
                                        422
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "isinstance",
                                            "range": [
                                                417,
                                                422
                                            ],
                                            "content": "if isinstance(value2,str"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "value2",
                                            "range": [
                                                419,
                                                422
                                            ],
                                            "content": "(value2,str"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "str",
                                            "range": [
                                                421,
                                                422
                                            ],
                                            "content": ",str"
                                        }
                                    ],
                                    "content": "if isinstance(value2,str"
                                },
                                {
                                    "type": "BlockStatement",
                                    "children": [
                                        {
                                            "type": "TryStatement",
                                            "range": [
                                                425,
                                                450
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "range": [
                                                                428,
                                                                438
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "value2",
                                                                        "range": [
                                                                            428,
                                                                            438
                                                                        ],
                                                                        "content": "\nvalue2=float(value2.strip())"
                                                                    },
                                                                    "right": {
                                                                        "type": "CallExpression",
                                                                        "range": [
                                                                            430,
                                                                            438
                                                                        ],
                                                                        "children": [
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "float",
                                                                                "range": [
                                                                                    430,
                                                                                    438
                                                                                ],
                                                                                "content": "=float(value2.strip())"
                                                                            },
                                                                            {
                                                                                "type": "CallExpression",
                                                                                "range": [
                                                                                    432,
                                                                                    438
                                                                                ],
                                                                                "children": [
                                                                                    {
                                                                                        "type": "MemberExpression",
                                                                                        "range": [
                                                                                            432,
                                                                                            438
                                                                                        ],
                                                                                        "children": [
                                                                                            {
                                                                                                "type": "Identifier",
                                                                                                "name": "value2",
                                                                                                "range": [
                                                                                                    432,
                                                                                                    438
                                                                                                ],
                                                                                                "content": "(value2.strip())"
                                                                                            }
                                                                                        ],
                                                                                        "content": "(value2.strip())"
                                                                                    }
                                                                                ],
                                                                                "content": "(value2.strip())"
                                                                            }
                                                                        ],
                                                                        "content": "=float(value2.strip())"
                                                                    }
                                                                }
                                                            ],
                                                            "content": "\nvalue2=float(value2.strip())"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "CatchClause",
                                                    "param": {
                                                        "type": "Identifier",
                                                        "name": "ValueError",
                                                        "range": [
                                                            440,
                                                            441
                                                        ],
                                                        "content": "except ValueError"
                                                    },
                                                    "body": {
                                                        "type": "BlockStatement",
                                                        "children": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "range": [
                                                                    443,
                                                                    450
                                                                ],
                                                                "children": [
                                                                    {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                            "type": "Identifier",
                                                                            "name": "value2",
                                                                            "range": [
                                                                                443,
                                                                                450
                                                                            ],
                                                                            "content": "\nvalue2=value2.strip()"
                                                                        },
                                                                        "right": {
                                                                            "type": "CallExpression",
                                                                            "range": [
                                                                                445,
                                                                                450
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "range": [
                                                                                        445,
                                                                                        450
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "value2",
                                                                                            "range": [
                                                                                                445,
                                                                                                450
                                                                                            ],
                                                                                            "content": "=value2.strip()"
                                                                                        }
                                                                                    ],
                                                                                    "content": "=value2.strip()"
                                                                                }
                                                                            ],
                                                                            "content": "=value2.strip()"
                                                                        }
                                                                    }
                                                                ],
                                                                "content": "\nvalue2=value2.strip()"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "content": "\ntry:\nvalue2=float(value2.strip())\nexcept ValueError:\nvalue2=value2.strip()"
                                        }
                                    ]
                                }
                            ],
                            "content": "\nif isinstance(value2,str):\ntry:\nvalue2=float(value2.strip())\nexcept ValueError:\nvalue2=value2.strip()"
                        },
                        {
                            "type": "VariableDeclaration",
                            "range": [
                                452,
                                466
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "yes_value",
                                        "range": [
                                            452,
                                            457
                                        ],
                                        "content": "\nyes_value=input_data.yes_value"
                                    },
                                    "init": {
                                        "type": "ConditionalExpression",
                                        "test": {
                                            "type": "BinaryExpression",
                                            "operator": "is not",
                                            "left": {
                                                "type": "MemberExpression",
                                                "range": [
                                                    458,
                                                    463
                                                ],
                                                "children": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "input_data",
                                                        "range": [
                                                            458,
                                                            463
                                                        ],
                                                        "content": "if input_data.yes_value is not"
                                                    }
                                                ],
                                                "content": "if input_data.yes_value is not"
                                            },
                                            "right": {
                                                "type": "Identifier",
                                                "name": "None",
                                                "range": [
                                                    462,
                                                    463
                                                ],
                                                "content": "is not"
                                            }
                                        },
                                        "consequent": {
                                            "type": "MemberExpression",
                                            "range": [
                                                458,
                                                463
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "input_data",
                                                    "range": [
                                                        458,
                                                        463
                                                    ],
                                                    "content": "if input_data.yes_value is not"
                                                }
                                            ],
                                            "content": "if input_data.yes_value is not"
                                        },
                                        "alternate": {
                                            "type": "Identifier",
                                            "name": "value1",
                                            "range": [
                                                465,
                                                466
                                            ],
                                            "content": "else value1"
                                        }
                                    }
                                }
                            ],
                            "content": "\nyes_value=input_data.yes_value if input_data.yes_value is not None else value1"
                        },
                        {
                            "type": "VariableDeclaration",
                            "range": [
                                467,
                                481
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "no_value",
                                        "range": [
                                            467,
                                            472
                                        ],
                                        "content": "\nno_value=input_data.no_value"
                                    },
                                    "init": {
                                        "type": "ConditionalExpression",
                                        "test": {
                                            "type": "BinaryExpression",
                                            "operator": "is not",
                                            "left": {
                                                "type": "MemberExpression",
                                                "range": [
                                                    473,
                                                    478
                                                ],
                                                "children": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "input_data",
                                                        "range": [
                                                            473,
                                                            478
                                                        ],
                                                        "content": "if input_data.no_value is not"
                                                    }
                                                ],
                                                "content": "if input_data.no_value is not"
                                            },
                                            "right": {
                                                "type": "Identifier",
                                                "name": "None",
                                                "range": [
                                                    477,
                                                    478
                                                ],
                                                "content": "is not"
                                            }
                                        },
                                        "consequent": {
                                            "type": "MemberExpression",
                                            "range": [
                                                473,
                                                478
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "input_data",
                                                    "range": [
                                                        473,
                                                        478
                                                    ],
                                                    "content": "if input_data.no_value is not"
                                                }
                                            ],
                                            "content": "if input_data.no_value is not"
                                        },
                                        "alternate": {
                                            "type": "Identifier",
                                            "name": "value2",
                                            "range": [
                                                480,
                                                481
                                            ],
                                            "content": "else value2"
                                        }
                                    }
                                }
                            ],
                            "content": "\nno_value=input_data.no_value if input_data.no_value is not None else value2"
                        },
                        {
                            "type": "VariableDeclaration",
                            "range": [
                                483,
                                575
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "comparison_funcs",
                                        "range": [
                                            483,
                                            484
                                        ],
                                        "content": "\ncomparison_funcs"
                                    },
                                    "init": {
                                        "type": "ObjectExpression",
                                        "range": [
                                            485,
                                            575
                                        ],
                                        "children": [
                                            {
                                                "type": "Property",
                                                "key": "ComparisonOperator.EQUAL",
                                                "value": {
                                                    "type": "ArrowFunctionExpression",
                                                    "params": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "a",
                                                            "range": [
                                                                492,
                                                                493
                                                            ],
                                                            "content": "lambda a"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "b",
                                                            "range": [
                                                                494,
                                                                495
                                                            ],
                                                            "content": ",b"
                                                        }
                                                    ],
                                                    "body": {
                                                        "type": "BinaryExpression",
                                                        "operator": "==",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "a",
                                                            "range": [
                                                                496,
                                                                497
                                                            ],
                                                            "content": ":a"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "b",
                                                            "range": [
                                                                498,
                                                                499
                                                            ],
                                                            "content": "=="
                                                        }
                                                    }
                                                },
                                                "range": [
                                                    487,
                                                    500
                                                ],
                                                "content": "\nComparisonOperator.EQUAL:lambda a,b:a==b"
                                            },
                                            {
                                                "type": "Property",
                                                "key": "ComparisonOperator.NOT_EQUAL",
                                                "value": {
                                                    "type": "ArrowFunctionExpression",
                                                    "params": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "a",
                                                            "range": [
                                                                507,
                                                                508
                                                            ],
                                                            "content": "lambda a"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "b",
                                                            "range": [
                                                                509,
                                                                510
                                                            ],
                                                            "content": ",b"
                                                        }
                                                    ],
                                                    "body": {
                                                        "type": "BinaryExpression",
                                                        "operator": "!=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "a",
                                                            "range": [
                                                                511,
                                                                512
                                                            ],
                                                            "content": ":a"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "b",
                                                            "range": [
                                                                513,
                                                                514
                                                            ],
                                                            "content": "!="
                                                        }
                                                    }
                                                },
                                                "range": [
                                                    502,
                                                    515
                                                ],
                                                "content": "\nComparisonOperator.NOT_EQUAL:lambda a,b:a!=b"
                                            },
                                            {
                                                "type": "Property",
                                                "key": "ComparisonOperator.GREATER_THAN",
                                                "value": {
                                                    "type": "ArrowFunctionExpression",
                                                    "params": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "a",
                                                            "range": [
                                                                522,
                                                                523
                                                            ],
                                                            "content": "lambda a"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "b",
                                                            "range": [
                                                                524,
                                                                525
                                                            ],
                                                            "content": ",b"
                                                        }
                                                    ],
                                                    "body": {
                                                        "type": "BinaryExpression",
                                                        "operator": ">",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "a",
                                                            "range": [
                                                                526,
                                                                527
                                                            ],
                                                            "content": ":a"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "b",
                                                            "range": [
                                                                528,
                                                                529
                                                            ],
                                                            "content": ">b"
                                                        }
                                                    }
                                                },
                                                "range": [
                                                    517,
                                                    530
                                                ],
                                                "content": "\nComparisonOperator.GREATER_THAN:lambda a,b:a>b,"
                                            },
                                            {
                                                "type": "Property",
                                                "key": "ComparisonOperator.LESS_THAN",
                                                "value": {
                                                    "type": "ArrowFunctionExpression",
                                                    "params": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "a",
                                                            "range": [
                                                                536,
                                                                537
                                                            ],
                                                            "content": "lambda a"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "b",
                                                            "range": [
                                                                538,
                                                                539
                                                            ],
                                                            "content": ",b"
                                                        }
                                                    ],
                                                    "body": {
                                                        "type": "BinaryExpression",
                                                        "operator": "<",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "a",
                                                            "range": [
                                                                540,
                                                                541
                                                            ],
                                                            "content": ":a"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "b",
                                                            "range": [
                                                                542,
                                                                543
                                                            ],
                                                            "content": "<b"
                                                        }
                                                    }
                                                },
                                                "range": [
                                                    532,
                                                    544
                                                ],
                                                "content": "ComparisonOperator.LESS_THAN:lambda a,b:a<b,"
                                            },
                                            {
                                                "type": "Property",
                                                "key": "ComparisonOperator.GREATER_THAN_OR_EQUAL",
                                                "value": {
                                                    "type": "ArrowFunctionExpression",
                                                    "params": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "a",
                                                            "range": [
                                                                550,
                                                                551
                                                            ],
                                                            "content": "lambda a"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "b",
                                                            "range": [
                                                                552,
                                                                553
                                                            ],
                                                            "content": ",b"
                                                        }
                                                    ],
                                                    "body": {
                                                        "type": "BinaryExpression",
                                                        "operator": ">=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "a",
                                                            "range": [
                                                                554,
                                                                555
                                                            ],
                                                            "content": ":a"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "b",
                                                            "range": [
                                                                556,
                                                                557
                                                            ],
                                                            "content": ">="
                                                        }
                                                    }
                                                },
                                                "range": [
                                                    546,
                                                    558
                                                ],
                                                "content": "ComparisonOperator.GREATER_THAN_OR_EQUAL:lambda a,b:a>=b"
                                            },
                                            {
                                                "type": "Property",
                                                "key": "ComparisonOperator.LESS_THAN_OR_EQUAL",
                                                "value": {
                                                    "type": "ArrowFunctionExpression",
                                                    "params": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "a",
                                                            "range": [
                                                                564,
                                                                565
                                                            ],
                                                            "content": ":lambda"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "b",
                                                            "range": [
                                                                566,
                                                                567
                                                            ],
                                                            "content": "a,"
                                                        }
                                                    ],
                                                    "body": {
                                                        "type": "BinaryExpression",
                                                        "operator": "<=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "a",
                                                            "range": [
                                                                568,
                                                                569
                                                            ],
                                                            "content": "b:"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "b",
                                                            "range": [
                                                                570,
                                                                571
                                                            ],
                                                            "content": "a<"
                                                        }
                                                    }
                                                },
                                                "range": [
                                                    560,
                                                    573
                                                ],
                                                "content": "\nComparisonOperator.LESS_THAN_OR_EQUAL:lambda a,b:a<=b"
                                            }
                                        ],
                                        "content": "={\nComparisonOperator.EQUAL:lambda a,b:a==b,\nComparisonOperator.NOT_EQUAL:lambda a,b:a!=b,\nComparisonOperator.GREATER_THAN:lambda a,b:a>b,\nComparisonOperator.LESS_THAN:lambda a,b:a<b,\nComparisonOperator.GREATER_THAN_OR_EQUAL:lambda a,b:a>=b,\nComparisonOperator.LESS_THAN_OR_EQUAL:lambda a,b:a<=b,\n"
                                    }
                                }
                            ],
                            "content": "\ncomparison_funcs={\nComparisonOperator.EQUAL:lambda a,b:a==b,\nComparisonOperator.NOT_EQUAL:lambda a,b:a!=b,\nComparisonOperator.GREATER_THAN:lambda a,b:a>b,\nComparisonOperator.LESS_THAN:lambda a,b:a<b,\nComparisonOperator.GREATER_THAN_OR_EQUAL:lambda a,b:a>=b,\nComparisonOperator.LESS_THAN_OR_EQUAL:lambda a,b:a<=b,\n"
                        },
                        {
                            "type": "VariableDeclaration",
                            "range": [
                                578,
                                589
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "result",
                                        "range": [
                                            578,
                                            579
                                        ],
                                        "content": "\nresult"
                                    },
                                    "init": {
                                        "type": "CallExpression",
                                        "range": [
                                            580,
                                            589
                                        ],
                                        "children": [
                                            {
                                                "type": "MemberExpression",
                                                "range": [
                                                    580,
                                                    583
                                                ],
                                                "children": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "comparison_funcs",
                                                        "range": [
                                                            580,
                                                            583
                                                        ],
                                                        "content": "=comparison_funcs[operator"
                                                    }
                                                ],
                                                "content": "=comparison_funcs[operator"
                                            },
                                            {
                                                "type": "Identifier",
                                                "name": "operator",
                                                "range": [
                                                    582,
                                                    583
                                                ],
                                                "content": "[operator"
                                            },
                                            {
                                                "type": "Identifier",
                                                "name": "value1",
                                                "range": [
                                                    585,
                                                    586
                                                ],
                                                "content": "(value1"
                                            },
                                            {
                                                "type": "Identifier",
                                                "name": "value2",
                                                "range": [
                                                    587,
                                                    588
                                                ],
                                                "content": ",value2"
                                            }
                                        ],
                                        "content": "=comparison_funcs[operator](value1,value2)"
                                    }
                                }
                            ],
                            "content": "\nresult=comparison_funcs[operator](value1,value2)"
                        },
                        {
                            "type": "ExpressionStatement",
                            "range": [
                                591,
                                595
                            ],
                            "children": [
                                {
                                    "type": "YieldExpression",
                                    "argument": {
                                        "type": "ArrayExpression",
                                        "elements": [
                                            {
                                                "type": "Literal",
                                                "value": "result",
                                                "range": [
                                                    592,
                                                    593
                                                ],
                                                "content": "yield \"result\""
                                            },
                                            {
                                                "type": "Identifier",
                                                "name": "result",
                                                "range": [
                                                    594,
                                                    595
                                                ],
                                                "content": ",result"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "content": "\nyield \"result\",result"
                        },
                        {
                            "type": "IfStatement",
                            "range": [
                                597,
                                613
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "result",
                                    "range": [
                                        598,
                                        599
                                    ],
                                    "content": "if result"
                                },
                                {
                                    "type": "BlockStatement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "range": [
                                                601,
                                                605
                                            ],
                                            "children": [
                                                {
                                                    "type": "YieldExpression",
                                                    "argument": {
                                                        "type": "ArrayExpression",
                                                        "elements": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "yes_output",
                                                                "range": [
                                                                    602,
                                                                    603
                                                                ],
                                                                "content": "yield \"yes_output\""
                                                            },
                                                            {
                                                                "type": "Identifier",
                                                                "name": "yes_value",
                                                                "range": [
                                                                    604,
                                                                    605
                                                                ],
                                                                "content": ",yes_value"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "content": "\nyield \"yes_output\",yes_value"
                                        }
                                    ]
                                },
                                {
                                    "type": "BlockStatement",
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "range": [
                                                609,
                                                613
                                            ],
                                            "children": [
                                                {
                                                    "type": "YieldExpression",
                                                    "argument": {
                                                        "type": "ArrayExpression",
                                                        "elements": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "no_output",
                                                                "range": [
                                                                    610,
                                                                    611
                                                                ],
                                                                "content": "yield \"no_output\""
                                                            },
                                                            {
                                                                "type": "Identifier",
                                                                "name": "no_value",
                                                                "range": [
                                                                    612,
                                                                    613
                                                                ],
                                                                "content": ",no_value"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "content": "\nyield \"no_output\",no_value"
                                        }
                                    ]
                                }
                            ],
                            "content": "\nif result:\nyield \"yes_output\",yes_value\nelse:\nyield \"no_output\",no_value"
                        }
                    ]
                }
            ],
            "content": "\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\noperator=input_data.operator\n\nvalue1=input_data.value1\nif isinstance(value1,str):\ntry:\nvalue1=float(value1.strip())\nexcept ValueError:\nvalue1=value1.strip()\n\nvalue2=input_data.value2\nif isinstance(value2,str):\ntry:\nvalue2=float(value2.strip())\nexcept ValueError:\nvalue2=value2.strip()\n\nyes_value=input_data.yes_value if input_data.yes_value is not None else value1\nno_value=input_data.no_value if input_data.no_value is not None else value2\n\ncomparison_funcs={\nComparisonOperator.EQUAL:lambda a,b:a==b,\nComparisonOperator.NOT_EQUAL:lambda a,b:a!=b,\nComparisonOperator.GREATER_THAN:lambda a,b:a>b,\nComparisonOperator.LESS_THAN:lambda a,b:a<b,\nComparisonOperator.GREATER_THAN_OR_EQUAL:lambda a,b:a>=b,\nComparisonOperator.LESS_THAN_OR_EQUAL:lambda a,b:a<=b,\n}\n\nresult=comparison_funcs[operator](value1,value2)\n\nyield \"result\",result\n\nif result:\nyield \"yes_output\",yes_value\nelse:\nyield \"no_output\",no_value\n"
        }
    ],
    "content": "class ComparisonOperator(Enum):\nEQUAL=\"==\"\nNOT_EQUAL=\"!=\"\nGREATER_THAN=\">\"\nLESS_THAN=\"<\"\nGREATER_THAN_OR_EQUAL=\">=\"\nLESS_THAN_OR_EQUAL=\"<=\"\n\n\nclass ConditionBlock(Block):\nclass Input(BlockSchema):\nvalue1:Any=SchemaField(\ndescription=\"Enter the first value for comparison\",\nplaceholder=\"For example: 10 or 'hello' or True\",\n)\noperator:ComparisonOperator=SchemaField(\ndescription=\"Choose the comparison operator\",\nplaceholder=\"Select an operator\",\n)\nvalue2:Any=SchemaField(\ndescription=\"Enter the second value for comparison\",\nplaceholder=\"For example: 20 or 'world' or False\",\n)\nyes_value:Any=SchemaField(\ndescription=\"(Optional) Value to output if the condition is true. If not provided, value1 will be used.\",\nplaceholder=\"Leave empty to use value1, or enter a specific value\",\ndefault=None,\n)\nno_value:Any=SchemaField(\ndescription=\"(Optional) Value to output if the condition is false. If not provided, value1 will be used.\",\nplaceholder=\"Leave empty to use value1, or enter a specific value\",\ndefault=None,\n)\n\nclass Output(BlockSchema):\nresult:bool=SchemaField(\ndescription=\"The result of the condition evaluation (True or False)\"\n)\nyes_output:Any=SchemaField(\ndescription=\"The output value if the condition is true\"\n)\nno_output:Any=SchemaField(\ndescription=\"The output value if the condition is false\"\n)\n\ndef __init__(self):\nsuper().__init__(\nid=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\ninput_schema=ConditionBlock.Input,\noutput_schema=ConditionBlock.Output,\ndescription=\"Handles conditional logic based on comparison operators\",\ncategories={BlockCategory.LOGIC},\ntest_input={\n\"value1\":10,\n\"operator\":ComparisonOperator.GREATER_THAN.value,\n\"value2\":5,\n\"yes_value\":\"Greater\",\n\"no_value\":\"Not greater\",\n},\ntest_output=[\n(\"result\",True),\n(\"yes_output\",\"Greater\"),\n],\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\noperator=input_data.operator\n\nvalue1=input_data.value1\nif isinstance(value1,str):\ntry:\nvalue1=float(value1.strip())\nexcept ValueError:\nvalue1=value1.strip()\n\nvalue2=input_data.value2\nif isinstance(value2,str):\ntry:\nvalue2=float(value2.strip())\nexcept ValueError:\nvalue2=value2.strip()\n\nyes_value=input_data.yes_value if input_data.yes_value is not None else value1\nno_value=input_data.no_value if input_data.no_value is not None else value2\n\ncomparison_funcs={\nComparisonOperator.EQUAL:lambda a,b:a==b,\nComparisonOperator.NOT_EQUAL:lambda a,b:a!=b,\nComparisonOperator.GREATER_THAN:lambda a,b:a>b,\nComparisonOperator.LESS_THAN:lambda a,b:a<b,\nComparisonOperator.GREATER_THAN_OR_EQUAL:lambda a,b:a>=b,\nComparisonOperator.LESS_THAN_OR_EQUAL:lambda a,b:a<=b,\n}\n\nresult=comparison_funcs[operator](value1,value2)\n\nyield \"result\",result\n\nif result:\nyield \"yes_output\",yes_value\nelse:\nyield \"no_output\",no_value\n"
}