{
    "type": "Program",
    "name": "Global",
    "range": [
        106,
        1056
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "get_client",
            "range": [
                106,
                125
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "get_client",
                    "range": [
                        106,
                        113
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                106,
                                106
                            ],
                            "children": [],
                            "content": "def"
                        },
                        {
                            "type": "Identifier",
                            "name": "get_client",
                            "range": [
                                107,
                                107
                            ],
                            "children": [],
                            "content": "get_client"
                        },
                        {
                            "type": "ReturnType",
                            "name": "-> LDClient",
                            "range": [
                                110,
                                112
                            ],
                            "children": [],
                            "content": "->LDClient"
                        }
                    ],
                    "content": "def get_client()->LDClient:"
                },
                {
                    "type": "FunctionBody",
                    "name": "get_client",
                    "range": [
                        114,
                        125
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "\"\"\"Get the LaunchDarkly client singleton.\"\"\"",
                            "range": [
                                115,
                                117
                            ],
                            "children": [],
                            "content": "\"\"\"Get the LaunchDarkly client singleton.\"\"\""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return ldclient.get()",
                            "range": [
                                119,
                                124
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "return",
                                    "range": [
                                        119,
                                        119
                                    ],
                                    "children": [],
                                    "content": "return"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "ldclient.get()",
                                    "range": [
                                        120,
                                        124
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "ldclient",
                                            "range": [
                                                120,
                                                120
                                            ],
                                            "children": [],
                                            "content": "ldclient"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "get",
                                            "range": [
                                                122,
                                                122
                                            ],
                                            "children": [],
                                            "content": "get"
                                        }
                                    ],
                                    "content": "ldclient.get()"
                                }
                            ],
                            "content": "return ldclient.get()"
                        }
                    ],
                    "content": "\n\"\"\"Get the LaunchDarkly client singleton.\"\"\"\nreturn ldclient.get()\n"
                }
            ],
            "content": "def get_client()->LDClient:\n\"\"\"Get the LaunchDarkly client singleton.\"\"\"\nreturn ldclient.get()\n"
        },
        {
            "type": "FunctionDecl",
            "name": "initialize_launchdarkly",
            "range": [
                127,
                213
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        129,
                        130
                    ],
                    "children": [],
                    "content": "initialize_launchdarkly("
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        131,
                        133
                    ],
                    "children": [],
                    "content": ")->"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        134,
                        213
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "sdk_key",
                            "range": [
                                136,
                                140
                            ],
                            "children": [],
                            "content": "\nsdk_key=SETTINGS."
                        },
                        {
                            "type": "CallExpression",
                            "name": "logger.debug",
                            "range": [
                                142,
                                150
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        148,
                                        148
                                    ],
                                    "children": [],
                                    "content": "f"
                                }
                            ],
                            "content": "\nlogger.debug(\nf \"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                153,
                                166
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        154,
                                        155
                                    ],
                                    "children": [],
                                    "content": "if not"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        156,
                                        166
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "logger.warning",
                                            "range": [
                                                158,
                                                163
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "",
                                                    "range": [
                                                        162,
                                                        162
                                                    ],
                                                    "children": [],
                                                    "content": "("
                                                }
                                            ],
                                            "content": "\nlogger.warning(\"LaunchDarkly SDK key not configured\""
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "",
                                            "range": [
                                                165,
                                                165
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "sdk_key:\nlogger.warning(\"LaunchDarkly SDK key not configured\")\nreturn"
                                }
                            ],
                            "content": "\nif not sdk_key:\nlogger.warning(\"LaunchDarkly SDK key not configured\")\nreturn"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "config",
                            "range": [
                                168,
                                173
                            ],
                            "children": [],
                            "content": "\nconfig=Config(sdk_key"
                        },
                        {
                            "type": "CallExpression",
                            "name": "ldclient.set_config",
                            "range": [
                                175,
                                180
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "config",
                                    "range": [
                                        179,
                                        179
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "\nldclient.set_config(config"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                183,
                                211
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        184,
                                        192
                                    ],
                                    "children": [],
                                    "content": "if ldclient.get().is_initialized("
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        193,
                                        211
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "logger.info",
                                            "range": [
                                                195,
                                                200
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "",
                                                    "range": [
                                                        199,
                                                        199
                                                    ],
                                                    "children": [],
                                                    "content": "("
                                                }
                                            ],
                                            "content": "\nlogger.info(\"LaunchDarkly client initialized successfully\""
                                        },
                                        {
                                            "type": "ElseStatement",
                                            "name": "",
                                            "range": [
                                                202,
                                                211
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "",
                                                    "range": [
                                                        203,
                                                        211
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "logger.error",
                                                            "range": [
                                                                205,
                                                                210
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "",
                                                                    "range": [
                                                                        209,
                                                                        209
                                                                    ],
                                                                    "children": [],
                                                                    "content": "("
                                                                }
                                                            ],
                                                            "content": "\nlogger.error(\"LaunchDarkly client failed to initialize\""
                                                        }
                                                    ],
                                                    "content": "else:\nlogger.error(\"LaunchDarkly client failed to initialize\")"
                                                }
                                            ],
                                            "content": "\nelse:\nlogger.error(\"LaunchDarkly client failed to initialize\")"
                                        }
                                    ],
                                    "content": "):\nlogger.info(\"LaunchDarkly client initialized successfully\")\nelse:\nlogger.error(\"LaunchDarkly client failed to initialize\")"
                                }
                            ],
                            "content": "\nif ldclient.get().is_initialized():\nlogger.info(\"LaunchDarkly client initialized successfully\")\nelse:\nlogger.error(\"LaunchDarkly client failed to initialize\")"
                        }
                    ],
                    "content": "None:\nsdk_key=SETTINGS.launch_darkly_sdk_key\nlogger.debug(\nf \"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n)\n\nif not sdk_key:\nlogger.warning(\"LaunchDarkly SDK key not configured\")\nreturn\n\nconfig=Config(sdk_key)\nldclient.set_config(config)\n\nif ldclient.get().is_initialized():\nlogger.info(\"LaunchDarkly client initialized successfully\")\nelse:\nlogger.error(\"LaunchDarkly client failed to initialize\")\n\n"
                }
            ],
            "content": "\ndef initialize_launchdarkly()->None:\nsdk_key=SETTINGS.launch_darkly_sdk_key\nlogger.debug(\nf \"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n)\n\nif not sdk_key:\nlogger.warning(\"LaunchDarkly SDK key not configured\")\nreturn\n\nconfig=Config(sdk_key)\nldclient.set_config(config)\n\nif ldclient.get().is_initialized():\nlogger.info(\"LaunchDarkly client initialized successfully\")\nelse:\nlogger.error(\"LaunchDarkly client failed to initialize\")\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "shutdown_launchdarkly",
            "range": [
                214,
                257
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "shutdown_launchdarkly",
                    "range": [
                        214,
                        221
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                214,
                                214
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "shutdown_launchdarkly",
                            "range": [
                                215,
                                215
                            ],
                            "children": [],
                            "content": "def"
                        },
                        {
                            "type": "Parameters",
                            "name": "()",
                            "range": [
                                216,
                                217
                            ],
                            "children": [],
                            "content": "shutdown_launchdarkly("
                        },
                        {
                            "type": "ReturnType",
                            "name": "-> None",
                            "range": [
                                218,
                                220
                            ],
                            "children": [],
                            "content": ")->"
                        }
                    ],
                    "content": "\ndef shutdown_launchdarkly()->None"
                },
                {
                    "type": "FunctionBody",
                    "name": "shutdown_launchdarkly_body",
                    "range": [
                        222,
                        257
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                222,
                                226
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"\"\"Shutdown the LaunchDarkly client.\"\"\"",
                                    "range": [
                                        223,
                                        225
                                    ],
                                    "children": [],
                                    "content": "\n\"\"\"Shutdown the LaunchDarkly client.\""
                                }
                            ],
                            "content": ":\n\"\"\"Shutdown the LaunchDarkly client.\"\"\""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                227,
                                248
                            ],
                            "children": [
                                {
                                    "type": "IfKeyword",
                                    "name": "if",
                                    "range": [
                                        227,
                                        227
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        228,
                                        236
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "ldclient",
                                            "range": [
                                                228,
                                                228
                                            ],
                                            "children": [],
                                            "content": "if"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "get",
                                            "range": [
                                                230,
                                                232
                                            ],
                                            "children": [],
                                            "content": ".get("
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "is_initialized",
                                            "range": [
                                                234,
                                                236
                                            ],
                                            "children": [],
                                            "content": ".is_initialized("
                                        }
                                    ],
                                    "content": "if ldclient.get().is_initialized("
                                },
                                {
                                    "type": "IfBody",
                                    "name": "if_body",
                                    "range": [
                                        238,
                                        248
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "expression_statement",
                                            "range": [
                                                239,
                                                247
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "ldclient",
                                                    "range": [
                                                        239,
                                                        239
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "get",
                                                    "range": [
                                                        241,
                                                        243
                                                    ],
                                                    "children": [],
                                                    "content": ".get("
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "close",
                                                    "range": [
                                                        245,
                                                        247
                                                    ],
                                                    "children": [],
                                                    "content": ".close("
                                                }
                                            ],
                                            "content": "\nldclient.get().close("
                                        }
                                    ],
                                    "content": ":\nldclient.get().close()"
                                }
                            ],
                            "content": "\nif ldclient.get().is_initialized():\nldclient.get().close()"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "expression_statement",
                            "range": [
                                249,
                                255
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "logger",
                                    "range": [
                                        249,
                                        249
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "info",
                                    "range": [
                                        251,
                                        254
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"LaunchDarkly client closed successfully\"",
                                            "range": [
                                                253,
                                                253
                                            ],
                                            "children": [],
                                            "content": "("
                                        }
                                    ],
                                    "content": ".info(\"LaunchDarkly client closed successfully\""
                                }
                            ],
                            "content": "\nlogger.info(\"LaunchDarkly client closed successfully\")"
                        }
                    ],
                    "content": ":\n\"\"\"Shutdown the LaunchDarkly client.\"\"\"\nif ldclient.get().is_initialized():\nldclient.get().close()\nlogger.info(\"LaunchDarkly client closed successfully\")\n\n"
                }
            ],
            "content": "\ndef shutdown_launchdarkly()->None:\n\"\"\"Shutdown the LaunchDarkly client.\"\"\"\nif ldclient.get().is_initialized():\nldclient.get().close()\nlogger.info(\"LaunchDarkly client closed successfully\")\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "create_context",
            "range": [
                258,
                338
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        260,
                        280
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                262,
                                264
                            ],
                            "children": [],
                            "content": "\nuser_id:"
                        },
                        {
                            "type": "Parameter",
                            "name": "additional_attributes",
                            "range": [
                                266,
                                278
                            ],
                            "children": [],
                            "content": ",additional_attributes:Optional[Dict[str,Any]]="
                        }
                    ],
                    "content": "create_context(\nuser_id:str,additional_attributes:Optional[Dict[str,Any]]=None\n"
                },
                {
                    "type": "ReturnType",
                    "name": "Context",
                    "range": [
                        283,
                        283
                    ],
                    "children": [],
                    "content": ">"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        285,
                        338
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                286,
                                288
                            ],
                            "children": [],
                            "content": "\n\"\"\"Create LaunchDarkly context with optional additional attributes.\""
                        },
                        {
                            "type": "Assignment",
                            "name": "builder",
                            "range": [
                                290,
                                306
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "Context.builder(str(user_id)).kind(\"user\")",
                                    "range": [
                                        292,
                                        305
                                    ],
                                    "children": [],
                                    "content": "=Context.builder(str(user_id)).kind(\"user\""
                                }
                            ],
                            "content": "\nbuilder=Context.builder(str(user_id)).kind(\"user\")"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if additional_attributes",
                            "range": [
                                307,
                                331
                            ],
                            "children": [
                                {
                                    "type": "ForStatement",
                                    "name": "for key, value in additional_attributes.items()",
                                    "range": [
                                        311,
                                        330
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "builder.set(key, value)",
                                            "range": [
                                                323,
                                                330
                                            ],
                                            "children": [],
                                            "content": "\nbuilder.set(key,value"
                                        }
                                    ],
                                    "content": "\nfor key,value in additional_attributes.items():\nbuilder.set(key,value"
                                }
                            ],
                            "content": "\nif additional_attributes:\nfor key,value in additional_attributes.items():\nbuilder.set(key,value)"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return builder.build()",
                            "range": [
                                332,
                                338
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "builder.build()",
                                    "range": [
                                        333,
                                        337
                                    ],
                                    "children": [],
                                    "content": "return builder.build("
                                }
                            ],
                            "content": "\nreturn builder.build()"
                        }
                    ],
                    "content": ":\n\"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\nbuilder=Context.builder(str(user_id)).kind(\"user\")\nif additional_attributes:\nfor key,value in additional_attributes.items():\nbuilder.set(key,value)\nreturn builder.build()"
                }
            ],
            "content": "\ndef create_context(\nuser_id:str,additional_attributes:Optional[Dict[str,Any]]=None\n)->Context:\n\"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\nbuilder=Context.builder(str(user_id)).kind(\"user\")\nif additional_attributes:\nfor key,value in additional_attributes.items():\nbuilder.set(key,value)\nreturn builder.build()"
        },
        {
            "type": "FunctionDecl",
            "name": "decorator",
            "range": [
                403,
                815
            ],
            "children": [
                {
                    "type": "FunctionDecl",
                    "name": "async_wrapper",
                    "range": [
                        450,
                        618
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "range": [
                                474,
                                618
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "range": [
                                        476,
                                        602
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "range": [
                                                477,
                                                484
                                            ],
                                            "children": [],
                                            "content": "\nuser_id=kwargs.get(\"user_id\""
                                        },
                                        {
                                            "type": "IfStatement",
                                            "range": [
                                                486,
                                                496
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "range": [
                                                        490,
                                                        496
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ThrowStatement",
                                                            "range": [
                                                                491,
                                                                495
                                                            ],
                                                            "children": [],
                                                            "content": "\nraise ValueError(\"user_id is required\""
                                                        }
                                                    ],
                                                    "content": ":\nraise ValueError(\"user_id is required\")"
                                                }
                                            ],
                                            "content": "\nif not user_id:\nraise ValueError(\"user_id is required\")"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "range": [
                                                498,
                                                522
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "range": [
                                                        508,
                                                        522
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "range": [
                                                                509,
                                                                517
                                                            ],
                                                            "children": [],
                                                            "content": "\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n"
                                                        },
                                                        {
                                                            "type": "VariableDecl",
                                                            "range": [
                                                                519,
                                                                521
                                                            ],
                                                            "children": [],
                                                            "content": "\nis_enabled="
                                                        }
                                                    ],
                                                    "content": ":\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default"
                                                }
                                            ],
                                            "content": "\nif not get_client().is_initialized():\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default"
                                        },
                                        {
                                            "type": "ElseStatement",
                                            "range": [
                                                523,
                                                550
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "range": [
                                                        525,
                                                        550
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "VariableDecl",
                                                            "range": [
                                                                526,
                                                                534
                                                            ],
                                                            "children": [],
                                                            "content": "\ncontext=create_context(str(user_id)"
                                                        },
                                                        {
                                                            "type": "VariableDecl",
                                                            "range": [
                                                                536,
                                                                549
                                                            ],
                                                            "children": [],
                                                            "content": "\nis_enabled=get_client().variation(flag_key,context,default"
                                                        }
                                                    ],
                                                    "content": ":\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default)"
                                                }
                                            ],
                                            "content": "\nelse:\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default)"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "range": [
                                                552,
                                                568
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "range": [
                                                        556,
                                                        568
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ThrowStatement",
                                                            "range": [
                                                                557,
                                                                567
                                                            ],
                                                            "children": [],
                                                            "content": "\nraise HTTPException(status_code=404,detail=\"Feature not available\""
                                                        }
                                                    ],
                                                    "content": ":\nraise HTTPException(status_code=404,detail=\"Feature not available\")"
                                                }
                                            ],
                                            "content": "\nif not is_enabled:\nraise HTTPException(status_code=404,detail=\"Feature not available\")"
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "range": [
                                                570,
                                                580
                                            ],
                                            "children": [],
                                            "content": "\nresult=func(*args,**kwargs"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "range": [
                                                582,
                                                594
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "range": [
                                                        590,
                                                        594
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ReturnStatement",
                                                            "range": [
                                                                591,
                                                                593
                                                            ],
                                                            "children": [],
                                                            "content": "\nreturn await"
                                                        }
                                                    ],
                                                    "content": ":\nreturn await result"
                                                }
                                            ],
                                            "content": "\nif asyncio.iscoroutine(result):\nreturn await result"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "range": [
                                                595,
                                                601
                                            ],
                                            "children": [],
                                            "content": "\nreturn cast(T,result"
                                        }
                                    ],
                                    "content": ":\nuser_id=kwargs.get(\"user_id\")\nif not user_id:\nraise ValueError(\"user_id is required\")\n\nif not get_client().is_initialized():\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default\nelse:\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default)\n\nif not is_enabled:\nraise HTTPException(status_code=404,detail=\"Feature not available\")\n\nresult=func(*args,**kwargs)\nif asyncio.iscoroutine(result):\nreturn await result\nreturn cast(T,result)"
                                },
                                {
                                    "type": "CatchClause",
                                    "range": [
                                        603,
                                        618
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "range": [
                                                608,
                                                618
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "range": [
                                                        609,
                                                        615
                                                    ],
                                                    "children": [],
                                                    "content": "\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\""
                                                },
                                                {
                                                    "type": "ThrowStatement",
                                                    "range": [
                                                        617,
                                                        617
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": ":\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\")\nraise"
                                        }
                                    ],
                                    "content": "\nexcept Exception as e:\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\")\nraise"
                                }
                            ],
                            "content": "\ntry:\nuser_id=kwargs.get(\"user_id\")\nif not user_id:\nraise ValueError(\"user_id is required\")\n\nif not get_client().is_initialized():\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default\nelse:\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default)\n\nif not is_enabled:\nraise HTTPException(status_code=404,detail=\"Feature not available\")\n\nresult=func(*args,**kwargs)\nif asyncio.iscoroutine(result):\nreturn await result\nreturn cast(T,result)\nexcept Exception as e:\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\")\nraise"
                        }
                    ],
                    "content": "\nasync def async_wrapper(*args:P.args,**kwargs:P.kwargs)->T:\ntry:\nuser_id=kwargs.get(\"user_id\")\nif not user_id:\nraise ValueError(\"user_id is required\")\n\nif not get_client().is_initialized():\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default\nelse:\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default)\n\nif not is_enabled:\nraise HTTPException(status_code=404,detail=\"Feature not available\")\n\nresult=func(*args,**kwargs)\nif asyncio.iscoroutine(result):\nreturn await result\nreturn cast(T,result)\nexcept Exception as e:\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\")\nraise"
                },
                {
                    "type": "FunctionDecl",
                    "name": "sync_wrapper",
                    "range": [
                        626,
                        776
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "range": [
                                649,
                                776
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "range": [
                                        651,
                                        759
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "range": [
                                                652,
                                                659
                                            ],
                                            "children": [],
                                            "content": "\nuser_id=kwargs.get(\"user_id\""
                                        },
                                        {
                                            "type": "IfStatement",
                                            "range": [
                                                661,
                                                671
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "range": [
                                                        665,
                                                        671
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ThrowStatement",
                                                            "range": [
                                                                666,
                                                                670
                                                            ],
                                                            "children": [],
                                                            "content": "\nraise ValueError(\"user_id is required\""
                                                        }
                                                    ],
                                                    "content": ":\nraise ValueError(\"user_id is required\")"
                                                }
                                            ],
                                            "content": "\nif not user_id:\nraise ValueError(\"user_id is required\")"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "range": [
                                                673,
                                                697
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "range": [
                                                        683,
                                                        697
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "range": [
                                                                684,
                                                                692
                                                            ],
                                                            "children": [],
                                                            "content": "\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n"
                                                        },
                                                        {
                                                            "type": "VariableDecl",
                                                            "range": [
                                                                694,
                                                                696
                                                            ],
                                                            "children": [],
                                                            "content": "\nis_enabled="
                                                        }
                                                    ],
                                                    "content": ":\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default"
                                                }
                                            ],
                                            "content": "\nif not get_client().is_initialized():\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default"
                                        },
                                        {
                                            "type": "ElseStatement",
                                            "range": [
                                                698,
                                                724
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "range": [
                                                        700,
                                                        724
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "VariableDecl",
                                                            "range": [
                                                                701,
                                                                709
                                                            ],
                                                            "children": [],
                                                            "content": "\ncontext=create_context(str(user_id)"
                                                        },
                                                        {
                                                            "type": "VariableDecl",
                                                            "range": [
                                                                711,
                                                                723
                                                            ],
                                                            "children": [],
                                                            "content": "\nis_enabled=get_client().variation(flag_key,context,"
                                                        }
                                                    ],
                                                    "content": ":\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default"
                                                }
                                            ],
                                            "content": "\nelse:\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "range": [
                                                727,
                                                742
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "range": [
                                                        731,
                                                        742
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ThrowStatement",
                                                            "range": [
                                                                732,
                                                                741
                                                            ],
                                                            "children": [],
                                                            "content": "\nraise HTTPException(status_code=404,detail="
                                                        }
                                                    ],
                                                    "content": ":\nraise HTTPException(status_code=404,detail=\"Feature not available\""
                                                }
                                            ],
                                            "content": "\nif not is_enabled:\nraise HTTPException(status_code=404,detail=\"Feature not available\""
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "range": [
                                                745,
                                                759
                                            ],
                                            "children": [],
                                            "content": "\nreturn cast(T,func(*args,**kwargs)"
                                        }
                                    ],
                                    "content": ":\nuser_id=kwargs.get(\"user_id\")\nif not user_id:\nraise ValueError(\"user_id is required\")\n\nif not get_client().is_initialized():\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default\nelse:\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default)\n\nif not is_enabled:\nraise HTTPException(status_code=404,detail=\"Feature not available\")\n\nreturn cast(T,func(*args,**kwargs)"
                                },
                                {
                                    "type": "CatchClause",
                                    "range": [
                                        761,
                                        776
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "range": [
                                                766,
                                                776
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "range": [
                                                        767,
                                                        773
                                                    ],
                                                    "children": [],
                                                    "content": "\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\""
                                                },
                                                {
                                                    "type": "ThrowStatement",
                                                    "range": [
                                                        775,
                                                        775
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": ":\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\")\nraise"
                                        }
                                    ],
                                    "content": "\nexcept Exception as e:\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\")\nraise"
                                }
                            ],
                            "content": "\ntry:\nuser_id=kwargs.get(\"user_id\")\nif not user_id:\nraise ValueError(\"user_id is required\")\n\nif not get_client().is_initialized():\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default\nelse:\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default)\n\nif not is_enabled:\nraise HTTPException(status_code=404,detail=\"Feature not available\")\n\nreturn cast(T,func(*args,**kwargs))\nexcept Exception as e:\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\")\nraise"
                        }
                    ],
                    "content": "\ndef sync_wrapper(*args:P.args,**kwargs:P.kwargs)->T:\ntry:\nuser_id=kwargs.get(\"user_id\")\nif not user_id:\nraise ValueError(\"user_id is required\")\n\nif not get_client().is_initialized():\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default\nelse:\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default)\n\nif not is_enabled:\nraise HTTPException(status_code=404,detail=\"Feature not available\")\n\nreturn cast(T,func(*args,**kwargs))\nexcept Exception as e:\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\")\nraise"
                }
            ],
            "content": "\ndef decorator(\nfunc:Callable[P,Union[T,Awaitable[T]]],\n)->Callable[P,Union[T,Awaitable[T]]]:\n@wraps(func)\nasync def async_wrapper(*args:P.args,**kwargs:P.kwargs)->T:\ntry:\nuser_id=kwargs.get(\"user_id\")\nif not user_id:\nraise ValueError(\"user_id is required\")\n\nif not get_client().is_initialized():\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default\nelse:\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default)\n\nif not is_enabled:\nraise HTTPException(status_code=404,detail=\"Feature not available\")\n\nresult=func(*args,**kwargs)\nif asyncio.iscoroutine(result):\nreturn await result\nreturn cast(T,result)\nexcept Exception as e:\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\")\nraise\n\n@wraps(func)\ndef sync_wrapper(*args:P.args,**kwargs:P.kwargs)->T:\ntry:\nuser_id=kwargs.get(\"user_id\")\nif not user_id:\nraise ValueError(\"user_id is required\")\n\nif not get_client().is_initialized():\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default\nelse:\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default)\n\nif not is_enabled:\nraise HTTPException(status_code=404,detail=\"Feature not available\")\n\nreturn cast(T,func(*args,**kwargs))\nexcept Exception as e:\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\")\nraise\n\nreturn cast(\nCallable[P,Union[T,Awaitable[T]]],\nasync_wrapper if asyncio.iscoroutinefunction(func)else sync_wrapper,\n)\n\nreturn decorator"
        },
        {
            "type": "FunctionDecl",
            "name": "percentage_rollout",
            "range": [
                818,
                886
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "flag_key",
                    "range": [
                        822,
                        824
                    ],
                    "children": [],
                    "content": "\nflag_key:"
                },
                {
                    "type": "Parameter",
                    "name": "default",
                    "range": [
                        827,
                        831
                    ],
                    "children": [],
                    "content": "\ndefault:bool="
                },
                {
                    "type": "ReturnType",
                    "name": "Callable",
                    "range": [
                        837,
                        872
                    ],
                    "children": [
                        {
                            "type": "TypeParameter",
                            "name": "Callable",
                            "range": [
                                841,
                                855
                            ],
                            "children": [],
                            "content": "[Callable[P,Union[T,Awaitable[T]]]"
                        },
                        {
                            "type": "TypeParameter",
                            "name": "Callable",
                            "range": [
                                857,
                                870
                            ],
                            "children": [],
                            "content": ",Callable[P,Union[T,Awaitable[T]]"
                        }
                    ],
                    "content": ">Callable[\n[Callable[P,Union[T,Awaitable[T]]]],Callable[P,Union[T,Awaitable[T]]]\n"
                },
                {
                    "type": "Docstring",
                    "name": "\"Decorator for percentage-based rollouts.\"",
                    "range": [
                        875,
                        877
                    ],
                    "children": [],
                    "content": "\n\"\"\"Decorator for percentage-based rollouts.\""
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        879,
                        885
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "feature_flag",
                            "range": [
                                880,
                                885
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "flag_key",
                                    "range": [
                                        882,
                                        882
                                    ],
                                    "children": [],
                                    "content": "("
                                },
                                {
                                    "type": "Argument",
                                    "name": "default",
                                    "range": [
                                        884,
                                        884
                                    ],
                                    "children": [],
                                    "content": ","
                                }
                            ],
                            "content": "return feature_flag(flag_key,default"
                        }
                    ],
                    "content": "\nreturn feature_flag(flag_key,default"
                }
            ],
            "content": "\ndef percentage_rollout(\nflag_key:str,\ndefault:bool=False,\n)->Callable[\n[Callable[P,Union[T,Awaitable[T]]]],Callable[P,Union[T,Awaitable[T]]]\n]:\n\"\"\"Decorator for percentage-based rollouts.\"\"\"\nreturn feature_flag(flag_key,default)"
        },
        {
            "type": "FunctionDecl",
            "name": "beta_feature",
            "range": [
                889,
                977
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "flag_key",
                    "range": [
                        893,
                        900
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Optional[str]",
                            "range": [
                                895,
                                898
                            ],
                            "children": [],
                            "content": ":Optional[str"
                        },
                        {
                            "type": "DefaultValue",
                            "name": "None",
                            "range": [
                                899,
                                900
                            ],
                            "children": [],
                            "content": "]="
                        }
                    ],
                    "content": "\nflag_key:Optional[str]="
                },
                {
                    "type": "Parameter",
                    "name": "unauthorized_response",
                    "range": [
                        903,
                        912
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Any",
                            "range": [
                                905,
                                905
                            ],
                            "children": [],
                            "content": ":"
                        },
                        {
                            "type": "DefaultValue",
                            "name": "{\"message\": \"Not available in beta\"}",
                            "range": [
                                906,
                                911
                            ],
                            "children": [],
                            "content": "Any={\"message\":\"Not available in beta\""
                        }
                    ],
                    "content": "\nunauthorized_response:Any={\"message\":\"Not available in beta\"}"
                },
                {
                    "type": "ReturnType",
                    "name": "Callable[[Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]]",
                    "range": [
                        917,
                        952
                    ],
                    "children": [],
                    "content": ">Callable[\n[Callable[P,Union[T,Awaitable[T]]]],Callable[P,Union[T,Awaitable[T]]]\n"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        954,
                        977
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "\"Decorator for beta features.\"",
                            "range": [
                                955,
                                957
                            ],
                            "children": [],
                            "content": "\n\"\"\"Decorator for beta features.\""
                        },
                        {
                            "type": "VariableDecl",
                            "name": "actual_key",
                            "range": [
                                959,
                                967
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        960,
                                        960
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "f\"beta-{flag_key}\"",
                                            "range": [
                                                961,
                                                962
                                            ],
                                            "children": [],
                                            "content": "=f"
                                        },
                                        {
                                            "type": "ConditionalExpression",
                                            "name": "if flag_key else \"beta\"",
                                            "range": [
                                                963,
                                                966
                                            ],
                                            "children": [],
                                            "content": "\"beta-{flag_key}\" if flag_key else"
                                        }
                                    ],
                                    "content": "actual_key"
                                }
                            ],
                            "content": "\nactual_key=f \"beta-{flag_key}\" if flag_key else \"beta\""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return feature_flag(actual_key, False)",
                            "range": [
                                968,
                                974
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "feature_flag",
                                    "range": [
                                        969,
                                        974
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "actual_key",
                                            "range": [
                                                971,
                                                971
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "False",
                                            "range": [
                                                973,
                                                973
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": "return feature_flag(actual_key,False"
                                }
                            ],
                            "content": "\nreturn feature_flag(actual_key,False"
                        }
                    ],
                    "content": ":\n\"\"\"Decorator for beta features.\"\"\"\nactual_key=f \"beta-{flag_key}\" if flag_key else \"beta\"\nreturn feature_flag(actual_key,False)\n\n"
                }
            ],
            "content": "\ndef beta_feature(\nflag_key:Optional[str]=None,\nunauthorized_response:Any={\"message\":\"Not available in beta\"},\n)->Callable[\n[Callable[P,Union[T,Awaitable[T]]]],Callable[P,Union[T,Awaitable[T]]]\n]:\n\"\"\"Decorator for beta features.\"\"\"\nactual_key=f \"beta-{flag_key}\" if flag_key else \"beta\"\nreturn feature_flag(actual_key,False)\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "mock_flag_variation",
            "range": [
                983,
                1056
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        985,
                        993
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "flag_key",
                            "range": [
                                986,
                                988
                            ],
                            "children": [],
                            "content": "(flag_key:"
                        },
                        {
                            "type": "Parameter",
                            "name": "return_value",
                            "range": [
                                990,
                                992
                            ],
                            "children": [],
                            "content": ",return_value:"
                        }
                    ],
                    "content": "mock_flag_variation(flag_key:str,return_value:Any"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        994,
                        1056
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "original_variation",
                            "range": [
                                1000,
                                1007
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1001,
                                        1007
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_client",
                                            "range": [
                                                1002,
                                                1006
                                            ],
                                            "children": [],
                                            "content": "=get_client()."
                                        }
                                    ],
                                    "content": "original_variation=get_client().variation"
                                }
                            ],
                            "content": "\noriginal_variation=get_client().variation"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                1008,
                                1039
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1013,
                                        1039
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": ".",
                                            "range": [
                                                1008,
                                                1012
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "get_client",
                                                    "range": [
                                                        1008,
                                                        1012
                                                    ],
                                                    "children": [],
                                                    "content": "\nget_client()."
                                                }
                                            ],
                                            "content": "\nget_client()."
                                        },
                                        {
                                            "type": "LambdaExpression",
                                            "name": "lambda",
                                            "range": [
                                                1014,
                                                1039
                                            ],
                                            "children": [
                                                {
                                                    "type": "ParameterList",
                                                    "name": "",
                                                    "range": [
                                                        1015,
                                                        1020
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Parameter",
                                                            "name": "key",
                                                            "range": [
                                                                1015,
                                                                1016
                                                            ],
                                                            "children": [],
                                                            "content": "lambda key"
                                                        },
                                                        {
                                                            "type": "Parameter",
                                                            "name": "context",
                                                            "range": [
                                                                1017,
                                                                1018
                                                            ],
                                                            "children": [],
                                                            "content": ",context"
                                                        },
                                                        {
                                                            "type": "Parameter",
                                                            "name": "default",
                                                            "range": [
                                                                1019,
                                                                1020
                                                            ],
                                                            "children": [],
                                                            "content": ",default"
                                                        }
                                                    ],
                                                    "content": "lambda key,context,default"
                                                },
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "",
                                                    "range": [
                                                        1021,
                                                        1039
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "IfStatement",
                                                            "name": "",
                                                            "range": [
                                                                1024,
                                                                1037
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "BinaryExpression",
                                                                    "name": "==",
                                                                    "range": [
                                                                        1026,
                                                                        1028
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "key",
                                                                            "range": [
                                                                                1025,
                                                                                1026
                                                                            ],
                                                                            "children": [],
                                                                            "content": "if key"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "flag_key",
                                                                            "range": [
                                                                                1027,
                                                                                1028
                                                                            ],
                                                                            "children": [],
                                                                            "content": "=="
                                                                        }
                                                                    ],
                                                                    "content": "key=="
                                                                },
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "name": "",
                                                                    "range": [
                                                                        1023,
                                                                        1024
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "return_value",
                                                                            "range": [
                                                                                1023,
                                                                                1024
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\nreturn_value"
                                                                        }
                                                                    ],
                                                                    "content": "\nreturn_value"
                                                                },
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "name": "",
                                                                    "range": [
                                                                        1030,
                                                                        1037
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "original_variation",
                                                                            "range": [
                                                                                1030,
                                                                                1037
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "key",
                                                                                    "range": [
                                                                                        1032,
                                                                                        1033
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "(key"
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "context",
                                                                                    "range": [
                                                                                        1034,
                                                                                        1035
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": ",context"
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "default",
                                                                                    "range": [
                                                                                        1036,
                                                                                        1037
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": ",default"
                                                                                }
                                                                            ],
                                                                            "content": "else original_variation(key,context,default"
                                                                        }
                                                                    ],
                                                                    "content": "else original_variation(key,context,default"
                                                                }
                                                            ],
                                                            "content": "return_value if key==flag_key else original_variation(key,context,default"
                                                        }
                                                    ],
                                                    "content": ":(\nreturn_value if key==flag_key else original_variation(key,context,default)\n"
                                                }
                                            ],
                                            "content": "=lambda key,context,default:(\nreturn_value if key==flag_key else original_variation(key,context,default)\n"
                                        }
                                    ],
                                    "content": "variation=lambda key,context,default:(\nreturn_value if key==flag_key else original_variation(key,context,default)\n"
                                }
                            ],
                            "content": "\nget_client().variation=lambda key,context,default:(\nreturn_value if key==flag_key else original_variation(key,context,default)\n"
                        },
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                1041,
                                1056
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        1043,
                                        1045
                                    ],
                                    "children": [
                                        {
                                            "type": "YieldStatement",
                                            "name": "",
                                            "range": [
                                                1044,
                                                1045
                                            ],
                                            "children": [],
                                            "content": "\nyield"
                                        }
                                    ],
                                    "content": ":\nyield"
                                },
                                {
                                    "type": "FinallyStatement",
                                    "name": "",
                                    "range": [
                                        1046,
                                        1056
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                1048,
                                                1056
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        1049,
                                                        1055
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "=",
                                                            "range": [
                                                                1054,
                                                                1055
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": ".",
                                                                    "range": [
                                                                        1049,
                                                                        1053
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "get_client",
                                                                            "range": [
                                                                                1049,
                                                                                1053
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\nget_client()."
                                                                        }
                                                                    ],
                                                                    "content": "\nget_client()."
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "original_variation",
                                                                    "range": [
                                                                        1055,
                                                                        1056
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=original_variation"
                                                                }
                                                            ],
                                                            "content": "variation="
                                                        }
                                                    ],
                                                    "content": "\nget_client().variation="
                                                }
                                            ],
                                            "content": ":\nget_client().variation=original_variation"
                                        }
                                    ],
                                    "content": "\nfinally:\nget_client().variation=original_variation"
                                }
                            ],
                            "content": "\ntry:\nyield\nfinally:\nget_client().variation=original_variation"
                        }
                    ],
                    "content": "):\n\"\"\"Context manager for testing feature flags.\"\"\"\noriginal_variation=get_client().variation\nget_client().variation=lambda key,context,default:(\nreturn_value if key==flag_key else original_variation(key,context,default)\n)\ntry:\nyield\nfinally:\nget_client().variation=original_variation"
                }
            ],
            "content": "\ndef mock_flag_variation(flag_key:str,return_value:Any):\n\"\"\"Context manager for testing feature flags.\"\"\"\noriginal_variation=get_client().variation\nget_client().variation=lambda key,context,default:(\nreturn_value if key==flag_key else original_variation(key,context,default)\n)\ntry:\nyield\nfinally:\nget_client().variation=original_variation"
        }
    ],
    "content": "def get_client()->LDClient:\n\"\"\"Get the LaunchDarkly client singleton.\"\"\"\nreturn ldclient.get()\n\n\ndef initialize_launchdarkly()->None:\nsdk_key=SETTINGS.launch_darkly_sdk_key\nlogger.debug(\nf \"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n)\n\nif not sdk_key:\nlogger.warning(\"LaunchDarkly SDK key not configured\")\nreturn\n\nconfig=Config(sdk_key)\nldclient.set_config(config)\n\nif ldclient.get().is_initialized():\nlogger.info(\"LaunchDarkly client initialized successfully\")\nelse:\nlogger.error(\"LaunchDarkly client failed to initialize\")\n\n\ndef shutdown_launchdarkly()->None:\n\"\"\"Shutdown the LaunchDarkly client.\"\"\"\nif ldclient.get().is_initialized():\nldclient.get().close()\nlogger.info(\"LaunchDarkly client closed successfully\")\n\n\ndef create_context(\nuser_id:str,additional_attributes:Optional[Dict[str,Any]]=None\n)->Context:\n\"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\nbuilder=Context.builder(str(user_id)).kind(\"user\")\nif additional_attributes:\nfor key,value in additional_attributes.items():\nbuilder.set(key,value)\nreturn builder.build()\n\n\ndef feature_flag(\nflag_key:str,\ndefault:bool=False,\n)->Callable[\n[Callable[P,Union[T,Awaitable[T]]]],Callable[P,Union[T,Awaitable[T]]]\n]:\n\"\"\" \\n     Decorator for feature flag protected endpoints. \\n     \"\"\"\n\ndef decorator(\nfunc:Callable[P,Union[T,Awaitable[T]]],\n)->Callable[P,Union[T,Awaitable[T]]]:\n@wraps(func)\nasync def async_wrapper(*args:P.args,**kwargs:P.kwargs)->T:\ntry:\nuser_id=kwargs.get(\"user_id\")\nif not user_id:\nraise ValueError(\"user_id is required\")\n\nif not get_client().is_initialized():\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default\nelse:\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default)\n\nif not is_enabled:\nraise HTTPException(status_code=404,detail=\"Feature not available\")\n\nresult=func(*args,**kwargs)\nif asyncio.iscoroutine(result):\nreturn await result\nreturn cast(T,result)\nexcept Exception as e:\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\")\nraise\n\n@wraps(func)\ndef sync_wrapper(*args:P.args,**kwargs:P.kwargs)->T:\ntry:\nuser_id=kwargs.get(\"user_id\")\nif not user_id:\nraise ValueError(\"user_id is required\")\n\nif not get_client().is_initialized():\nlogger.warning(\nf \"LaunchDarkly not initialized, using default={default}\"\n)\nis_enabled=default\nelse:\ncontext=create_context(str(user_id))\nis_enabled=get_client().variation(flag_key,context,default)\n\nif not is_enabled:\nraise HTTPException(status_code=404,detail=\"Feature not available\")\n\nreturn cast(T,func(*args,**kwargs))\nexcept Exception as e:\nlogger.error(f \"Error evaluating feature flag {flag_key}: {e}\")\nraise\n\nreturn cast(\nCallable[P,Union[T,Awaitable[T]]],\nasync_wrapper if asyncio.iscoroutinefunction(func)else sync_wrapper,\n)\n\nreturn decorator\n\n\ndef percentage_rollout(\nflag_key:str,\ndefault:bool=False,\n)->Callable[\n[Callable[P,Union[T,Awaitable[T]]]],Callable[P,Union[T,Awaitable[T]]]\n]:\n\"\"\"Decorator for percentage-based rollouts.\"\"\"\nreturn feature_flag(flag_key,default)\n\n\ndef beta_feature(\nflag_key:Optional[str]=None,\nunauthorized_response:Any={\"message\":\"Not available in beta\"},\n)->Callable[\n[Callable[P,Union[T,Awaitable[T]]]],Callable[P,Union[T,Awaitable[T]]]\n]:\n\"\"\"Decorator for beta features.\"\"\"\nactual_key=f \"beta-{flag_key}\" if flag_key else \"beta\"\nreturn feature_flag(actual_key,False)\n\n\n@contextlib.contextmanager\ndef mock_flag_variation(flag_key:str,return_value:Any):\n\"\"\"Context manager for testing feature flags.\"\"\"\noriginal_variation=get_client().variation\nget_client().variation=lambda key,context,default:(\nreturn_value if key==flag_key else original_variation(key,context,default)\n)\ntry:\nyield\nfinally:\nget_client().variation=original_variation"
}