{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        3502
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "datetime",
            "range": [
                0,
                2
            ],
            "children": [],
            "content": "import datetime\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "autogpt_libs.auth.depends",
            "range": [
                4,
                10
            ],
            "children": [],
            "content": "import autogpt_libs.auth.depends\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "autogpt_libs.auth.middleware",
            "range": [
                11,
                17
            ],
            "children": [],
            "content": "import autogpt_libs.auth.middleware\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "fastapi",
            "range": [
                18,
                20
            ],
            "children": [],
            "content": "import fastapi\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "fastapi.testclient",
            "range": [
                21,
                25
            ],
            "children": [],
            "content": "import fastapi.testclient\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "prisma.enums",
            "range": [
                26,
                30
            ],
            "children": [],
            "content": "import prisma.enums\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "pytest_mock",
            "range": [
                31,
                33
            ],
            "children": [],
            "content": "import pytest_mock\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "backend.server.v2.store.model",
            "range": [
                35,
                45
            ],
            "children": [],
            "content": "import backend.server.v2.store.model\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "backend.server.v2.store.routes",
            "range": [
                46,
                56
            ],
            "children": [],
            "content": "import backend.server.v2.store.routes\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "app",
            "range": [
                58,
                64
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        59,
                        64
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "fastapi.FastAPI",
                            "range": [
                                60,
                                62
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "fastapi",
                                    "range": [
                                        60,
                                        60
                                    ],
                                    "children": [],
                                    "content": "fastapi"
                                },
                                {
                                    "type": "NewExpression",
                                    "name": "FastAPI",
                                    "range": [
                                        62,
                                        64
                                    ],
                                    "children": [],
                                    "content": "FastAPI()"
                                }
                            ],
                            "content": "fastapi.FastAPI"
                        }
                    ],
                    "content": "=fastapi.FastAPI()"
                }
            ],
            "content": "app=fastapi.FastAPI()"
        },
        {
            "type": "CallExpression",
            "name": "include_router",
            "range": [
                66,
                81
            ],
            "children": [
                {
                    "type": "MemberExpression",
                    "name": "backend.server.v2.store.routes.router",
                    "range": [
                        70,
                        80
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "backend",
                            "range": [
                                70,
                                70
                            ],
                            "children": [],
                            "content": "backend"
                        },
                        {
                            "type": "Identifier",
                            "name": "server",
                            "range": [
                                72,
                                72
                            ],
                            "children": [],
                            "content": "server"
                        },
                        {
                            "type": "Identifier",
                            "name": "v2",
                            "range": [
                                74,
                                74
                            ],
                            "children": [],
                            "content": "v2"
                        },
                        {
                            "type": "Identifier",
                            "name": "store",
                            "range": [
                                76,
                                76
                            ],
                            "children": [],
                            "content": "store"
                        },
                        {
                            "type": "Identifier",
                            "name": "routes",
                            "range": [
                                78,
                                78
                            ],
                            "children": [],
                            "content": "routes"
                        },
                        {
                            "type": "Identifier",
                            "name": "router",
                            "range": [
                                80,
                                80
                            ],
                            "children": [],
                            "content": "router"
                        }
                    ],
                    "content": "backend.server.v2.store.routes.router"
                }
            ],
            "content": "app.include_router(backend.server.v2.store.routes.router)"
        },
        {
            "type": "VariableDeclaration",
            "name": "client",
            "range": [
                84,
                93
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        85,
                        93
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "fastapi.testclient.TestClient",
                            "range": [
                                86,
                                90
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "fastapi",
                                    "range": [
                                        86,
                                        86
                                    ],
                                    "children": [],
                                    "content": "fastapi"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "testclient",
                                    "range": [
                                        88,
                                        88
                                    ],
                                    "children": [],
                                    "content": "testclient"
                                },
                                {
                                    "type": "NewExpression",
                                    "name": "TestClient",
                                    "range": [
                                        90,
                                        93
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "app",
                                            "range": [
                                                92,
                                                92
                                            ],
                                            "children": [],
                                            "content": "app"
                                        }
                                    ],
                                    "content": "TestClient(app)"
                                }
                            ],
                            "content": "fastapi.testclient.TestClient"
                        }
                    ],
                    "content": "=fastapi.testclient.TestClient(app)"
                }
            ],
            "content": "client=fastapi.testclient.TestClient(app)"
        },
        {
            "type": "FunctionDecl",
            "name": "override_auth_middleware",
            "range": [
                96,
                112
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "override_auth_middleware",
                    "range": [
                        96,
                        100
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                96,
                                96
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "override_auth_middleware",
                            "range": [
                                97,
                                97
                            ],
                            "children": [],
                            "content": "def"
                        }
                    ],
                    "content": "\ndef override_auth_middleware()"
                },
                {
                    "type": "FunctionBody",
                    "name": "override_auth_middleware",
                    "range": [
                        101,
                        112
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "Override auth middleware for testing",
                            "range": [
                                102,
                                104
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Override auth middleware for testing\"",
                                    "range": [
                                        103,
                                        103
                                    ],
                                    "children": [],
                                    "content": "\"\""
                                }
                            ],
                            "content": "\n\"\"\"Override auth middleware for testing\""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                106,
                                111
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "return",
                                    "range": [
                                        106,
                                        106
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "ObjectLiteral",
                                    "name": "{\"sub\": \"test-user-id\"}",
                                    "range": [
                                        107,
                                        111
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "\"sub\": \"test-user-id\"",
                                            "range": [
                                                108,
                                                110
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"sub\"",
                                                    "range": [
                                                        108,
                                                        108
                                                    ],
                                                    "children": [],
                                                    "content": "{"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "\"test-user-id\"",
                                                    "range": [
                                                        110,
                                                        110
                                                    ],
                                                    "children": [],
                                                    "content": ":"
                                                }
                                            ],
                                            "content": "{\"sub\":"
                                        }
                                    ],
                                    "content": "return{\"sub\":\"test-user-id\""
                                }
                            ],
                            "content": "\nreturn{\"sub\":\"test-user-id\""
                        }
                    ],
                    "content": ":\n\"\"\"Override auth middleware for testing\"\"\"\nreturn{\"sub\":\"test-user-id\"}"
                }
            ],
            "content": "\ndef override_auth_middleware():\n\"\"\"Override auth middleware for testing\"\"\"\nreturn{\"sub\":\"test-user-id\"}"
        },
        {
            "type": "FunctionDecl",
            "name": "override_get_user_id",
            "range": [
                113,
                125
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "override_get_user_id",
                    "range": [
                        113,
                        117
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                113,
                                113
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "override_get_user_id",
                            "range": [
                                114,
                                114
                            ],
                            "children": [],
                            "content": "\n"
                        }
                    ],
                    "content": "\n\n\ndef override_get_user_id"
                },
                {
                    "type": "FunctionBody",
                    "name": "override_get_user_id",
                    "range": [
                        118,
                        125
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "Override get_user_id for testing",
                            "range": [
                                119,
                                121
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Override get_user_id for testing\"",
                                    "range": [
                                        120,
                                        120
                                    ],
                                    "children": [],
                                    "content": ":"
                                }
                            ],
                            "content": "):\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                123,
                                124
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "return",
                                    "range": [
                                        123,
                                        123
                                    ],
                                    "children": [],
                                    "content": "\"Override get_user_id for testing\""
                                },
                                {
                                    "type": "Literal",
                                    "name": "\"test-user-id\"",
                                    "range": [
                                        124,
                                        124
                                    ],
                                    "children": [],
                                    "content": "\"\""
                                }
                            ],
                            "content": "\"Override get_user_id for testing\"\"\""
                        }
                    ],
                    "content": "():\n\"\"\"Override get_user_id for testing\"\"\"\n"
                }
            ],
            "content": "\n\n\ndef override_get_user_id():\n\"\"\"Override get_user_id for testing\"\"\"\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_agents_defaults",
            "range": [
                160,
                351
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        163,
                        167
                    ],
                    "children": [],
                    "content": "override_get_user_id\n\n\ndef"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        170,
                        351
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "mocked_value",
                            "range": [
                                171,
                                230
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        172,
                                        230
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "StoreAgentsResponse",
                                            "range": [
                                                173,
                                                230
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "agents",
                                                    "range": [
                                                        186,
                                                        189
                                                    ],
                                                    "children": [],
                                                    "content": "store.model."
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "pagination",
                                                    "range": [
                                                        192,
                                                        227
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "Pagination",
                                                            "range": [
                                                                194,
                                                                227
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "current_page",
                                                                    "range": [
                                                                        207,
                                                                        209
                                                                    ],
                                                                    "children": [],
                                                                    "content": "store.model"
                                                                },
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "total_items",
                                                                    "range": [
                                                                        212,
                                                                        214
                                                                    ],
                                                                    "children": [],
                                                                    "content": "(\ncurrent_page"
                                                                },
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "total_pages",
                                                                    "range": [
                                                                        217,
                                                                        219
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\ntotal_items"
                                                                },
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "page_size",
                                                                    "range": [
                                                                        222,
                                                                        224
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\ntotal_pages"
                                                                }
                                                            ],
                                                            "content": "=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\ntotal_pages=0,"
                                                        }
                                                    ],
                                                    "content": "\nagents=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\ntotal_pages=0,"
                                                }
                                            ],
                                            "content": ".MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\ntotal_pages=0,\npage_size="
                                        }
                                    ],
                                    "content": "pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\ntotal_pages=0,\npage_size="
                                }
                            ],
                            "content": ":pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\ntotal_pages=0,\npage_size="
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_db_call",
                            "range": [
                                232,
                                246
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        233,
                                        246
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "patch",
                                            "range": [
                                                234,
                                                239
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "backend.server.v2.store.db.get_store_agents",
                                                    "range": [
                                                        238,
                                                        238
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": "),\n)\nmock_db_call"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "return_value",
                                            "range": [
                                                242,
                                                245
                                            ],
                                            "children": [],
                                            "content": ".patch(\"backend.server.v2.store.db.get_store_agents\""
                                        }
                                    ],
                                    "content": "\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")"
                                }
                            ],
                            "content": ",\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "response",
                            "range": [
                                247,
                                263
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        248,
                                        263
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get",
                                            "range": [
                                                249,
                                                254
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "/agents",
                                                    "range": [
                                                        253,
                                                        253
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": ".return_value=mocked_value\nresponse"
                                        }
                                    ],
                                    "content": "mock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents\")\nassert"
                                }
                            ],
                            "content": "\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents\")\nassert"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "",
                            "range": [
                                256,
                                263
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        260,
                                        262
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "status_code",
                                            "range": [
                                                258,
                                                259
                                            ],
                                            "children": [],
                                            "content": "get("
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "200",
                                            "range": [
                                                262,
                                                262
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "\"/agents\")\n"
                                }
                            ],
                            "content": "client.get(\"/agents\")\nassert"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "data",
                            "range": [
                                265,
                                289
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        266,
                                        289
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "model_validate",
                                            "range": [
                                                267,
                                                288
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "response",
                                                    "range": [
                                                        282,
                                                        286
                                                    ],
                                                    "children": [],
                                                    "content": "model.StoreAgentsResponse.model_validate"
                                                }
                                            ],
                                            "content": "==200\n\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n"
                                        }
                                    ],
                                    "content": "status_code==200\n\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse"
                                }
                            ],
                            "content": ".status_code==200\n\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "",
                            "range": [
                                290,
                                299
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        296,
                                        298
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "total_pages",
                                            "range": [
                                                294,
                                                295
                                            ],
                                            "children": [],
                                            "content": "\n)"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "0",
                                            "range": [
                                                298,
                                                298
                                            ],
                                            "children": [],
                                            "content": "data"
                                        }
                                    ],
                                    "content": "\nassert data"
                                }
                            ],
                            "content": ".json()\n)\nassert data."
                        },
                        {
                            "type": "AssertStatement",
                            "name": "",
                            "range": [
                                300,
                                308
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        305,
                                        307
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "agents",
                                            "range": [
                                                303,
                                                304
                                            ],
                                            "children": [],
                                            "content": "=="
                                        },
                                        {
                                            "type": "ArrayExpression",
                                            "name": "",
                                            "range": [
                                                306,
                                                307
                                            ],
                                            "children": [],
                                            "content": "\nassert"
                                        }
                                    ],
                                    "content": "0\nassert"
                                }
                            ],
                            "content": "pagination.total_pages==0\nassert data"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_db_call",
                            "range": [
                                309,
                                350
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert_called_once_with",
                                    "range": [
                                        310,
                                        349
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "featured",
                                            "range": [
                                                314,
                                                316
                                            ],
                                            "children": [],
                                            "content": "]\nmock_db_call"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "creator",
                                            "range": [
                                                319,
                                                321
                                            ],
                                            "children": [],
                                            "content": "(\nfeatured"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "sorted_by",
                                            "range": [
                                                324,
                                                326
                                            ],
                                            "children": [],
                                            "content": ",\ncreator"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "search_query",
                                            "range": [
                                                329,
                                                331
                                            ],
                                            "children": [],
                                            "content": ",\nsorted_by"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "category",
                                            "range": [
                                                334,
                                                336
                                            ],
                                            "children": [],
                                            "content": ",\nsearch_query"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "page",
                                            "range": [
                                                339,
                                                341
                                            ],
                                            "children": [],
                                            "content": ",\ncategory"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "page_size",
                                            "range": [
                                                344,
                                                346
                                            ],
                                            "children": [],
                                            "content": ",\npage"
                                        }
                                    ],
                                    "content": "agents==[]\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=None,\npage=1,"
                                }
                            ],
                            "content": ".agents==[]\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=None,\npage=1,\n"
                        }
                    ],
                    "content": "mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\ntotal_pages=0,\npage_size=10,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert data.pagination.total_pages==0\nassert data.agents==[]\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=None,\npage=1,\npage_size"
                }
            ],
            "content": "get_user_id]=override_get_user_id\n\n\ndef test_get_agents_defaults(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\ntotal_pages=0,\npage_size=10,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert data.pagination.total_pages==0\nassert data.agents==[]\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=None,\npage=1,\npage_size"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_agents_featured",
            "range": [
                352,
                610
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        355,
                        359
                    ],
                    "children": [],
                    "content": "\n)\n\n\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "mocked_value",
                    "range": [
                        363,
                        485
                    ],
                    "children": [
                        {
                            "type": "NewExpression",
                            "name": "StoreAgentsResponse",
                            "range": [
                                365,
                                485
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "agents",
                                    "range": [
                                        378,
                                        444
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "StoreAgent",
                                            "range": [
                                                382,
                                                442
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "slug",
                                                    "range": [
                                                        395,
                                                        397
                                                    ],
                                                    "children": [],
                                                    "content": ".store."
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "agent_name",
                                                    "range": [
                                                        400,
                                                        402
                                                    ],
                                                    "children": [],
                                                    "content": "StoreAgent(\n"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "agent_image",
                                                    "range": [
                                                        405,
                                                        407
                                                    ],
                                                    "children": [],
                                                    "content": "\"featured-agent\",\n"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "creator",
                                                    "range": [
                                                        410,
                                                        412
                                                    ],
                                                    "children": [],
                                                    "content": "\"Featured Agent\",\n"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "creator_avatar",
                                                    "range": [
                                                        415,
                                                        417
                                                    ],
                                                    "children": [],
                                                    "content": "\"featured.jpg\",\n"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "sub_heading",
                                                    "range": [
                                                        420,
                                                        422
                                                    ],
                                                    "children": [],
                                                    "content": "\"creator1\",\n"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "description",
                                                    "range": [
                                                        425,
                                                        427
                                                    ],
                                                    "children": [],
                                                    "content": "\"avatar1.jpg\",\n"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "runs",
                                                    "range": [
                                                        430,
                                                        432
                                                    ],
                                                    "children": [],
                                                    "content": "\"Featured agent subheading\",\n"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "rating",
                                                    "range": [
                                                        435,
                                                        439
                                                    ],
                                                    "children": [],
                                                    "content": "\"Featured agent description\",\nruns="
                                                }
                                            ],
                                            "content": ".StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"featured-agent\",\nagent_name=\"Featured Agent\",\nagent_image=\"featured.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Featured agent subheading\",\ndescription=\"Featured agent description\",\nruns=100,\n"
                                        }
                                    ],
                                    "content": ".store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"featured-agent\",\nagent_name=\"Featured Agent\",\nagent_image=\"featured.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Featured agent subheading\",\ndescription=\"Featured agent description\",\nruns=100,\nrating="
                                },
                                {
                                    "type": "NewExpression",
                                    "name": "Pagination",
                                    "range": [
                                        449,
                                        482
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "current_page",
                                            "range": [
                                                462,
                                                464
                                            ],
                                            "children": [],
                                            "content": ".store."
                                        },
                                        {
                                            "type": "Property",
                                            "name": "total_items",
                                            "range": [
                                                467,
                                                469
                                            ],
                                            "children": [],
                                            "content": "Pagination(\n"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "total_pages",
                                            "range": [
                                                472,
                                                474
                                            ],
                                            "children": [],
                                            "content": "1,\n"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "page_size",
                                            "range": [
                                                477,
                                                479
                                            ],
                                            "children": [],
                                            "content": "1,\n"
                                        }
                                    ],
                                    "content": "\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1"
                                }
                            ],
                            "content": "pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"featured-agent\",\nagent_name=\"Featured Agent\",\nagent_image=\"featured.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Featured agent subheading\",\ndescription=\"Featured agent description\",\nruns=100,\nrating=4.5,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size"
                        }
                    ],
                    "content": "mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"featured-agent\",\nagent_name=\"Featured Agent\",\nagent_image=\"featured.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Featured agent subheading\",\ndescription=\"Featured agent description\",\nruns=100,\nrating=4.5,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "mock_db_call",
                    "range": [
                        487,
                        494
                    ],
                    "children": [],
                    "content": "20,\n),\n)\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "mock_db_call.return_value",
                    "range": [
                        496,
                        500
                    ],
                    "children": [],
                    "content": "=mocker.patch("
                },
                {
                    "type": "AssignmentExpression",
                    "name": "response",
                    "range": [
                        502,
                        509
                    ],
                    "children": [],
                    "content": ")\nmock_db_call.return_value=mocked_value\n"
                },
                {
                    "type": "AssertStatement",
                    "name": "response.status_code",
                    "range": [
                        511,
                        517
                    ],
                    "children": [],
                    "content": "=client.get(\"/agents?featured=true\")"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "data",
                    "range": [
                        519,
                        541
                    ],
                    "children": [],
                    "content": "assert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate"
                },
                {
                    "type": "AssertStatement",
                    "name": "len(data.agents)",
                    "range": [
                        544,
                        553
                    ],
                    "children": [],
                    "content": "response.json()\n)\nassert len"
                },
                {
                    "type": "AssertStatement",
                    "name": "data.agents[0].slug",
                    "range": [
                        555,
                        566
                    ],
                    "children": [],
                    "content": "data.agents)==1\nassert data.agents"
                },
                {
                    "type": "CallExpression",
                    "name": "mock_db_call.assert_called_once_with",
                    "range": [
                        568,
                        608
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "featured",
                            "range": [
                                573,
                                575
                            ],
                            "children": [],
                            "content": "=\"featured-agent\"\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "creator",
                            "range": [
                                578,
                                580
                            ],
                            "children": [],
                            "content": "assert_called_once_with(\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "sorted_by",
                            "range": [
                                583,
                                585
                            ],
                            "children": [],
                            "content": "True,\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "search_query",
                            "range": [
                                588,
                                590
                            ],
                            "children": [],
                            "content": "None,\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "category",
                            "range": [
                                593,
                                595
                            ],
                            "children": [],
                            "content": "None,\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "page",
                            "range": [
                                598,
                                600
                            ],
                            "children": [],
                            "content": "None,\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "page_size",
                            "range": [
                                603,
                                605
                            ],
                            "children": [],
                            "content": "None,\n"
                        }
                    ],
                    "content": "0].slug==\"featured-agent\"\nmock_db_call.assert_called_once_with(\nfeatured=True,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=None,\npage=1"
                }
            ],
            "content": "=20,\n)\n\n\ndef test_get_agents_featured(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"featured-agent\",\nagent_name=\"Featured Agent\",\nagent_image=\"featured.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Featured agent subheading\",\ndescription=\"Featured agent description\",\nruns=100,\nrating=4.5,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?featured=true\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==1\nassert data.agents[0].slug==\"featured-agent\"\nmock_db_call.assert_called_once_with(\nfeatured=True,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=None,\npage=1,\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_agents_by_creator",
            "range": [
                611,
                869
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        614,
                        618
                    ],
                    "children": [],
                    "content": ",\n)\n\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "mocked_value",
                    "range": [
                        622,
                        744
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                623,
                                744
                            ],
                            "children": [
                                {
                                    "type": "NewExpression",
                                    "name": "StoreAgentsResponse",
                                    "range": [
                                        624,
                                        744
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "agents",
                                            "range": [
                                                637,
                                                703
                                            ],
                                            "children": [
                                                {
                                                    "type": "ArrayExpression",
                                                    "name": "",
                                                    "range": [
                                                        639,
                                                        703
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "NewExpression",
                                                            "name": "StoreAgent",
                                                            "range": [
                                                                641,
                                                                701
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Property",
                                                                    "name": "slug",
                                                                    "range": [
                                                                        654,
                                                                        656
                                                                    ],
                                                                    "children": [],
                                                                    "content": "v2.store"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "agent_name",
                                                                    "range": [
                                                                        659,
                                                                        661
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".StoreAgent("
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "agent_image",
                                                                    "range": [
                                                                        664,
                                                                        666
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=\"creator-agent\","
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "creator",
                                                                    "range": [
                                                                        669,
                                                                        671
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=\"Creator Agent\","
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "creator_avatar",
                                                                    "range": [
                                                                        674,
                                                                        676
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=\"agent.jpg\","
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "sub_heading",
                                                                    "range": [
                                                                        679,
                                                                        681
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=\"specific-creator\","
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "description",
                                                                    "range": [
                                                                        684,
                                                                        686
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=\"avatar.jpg\","
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "runs",
                                                                    "range": [
                                                                        689,
                                                                        691
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=\"Creator agent subheading\","
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "rating",
                                                                    "range": [
                                                                        694,
                                                                        698
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=\"Creator agent description\",\nruns"
                                                                }
                                                            ],
                                                            "content": "model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"creator-agent\",\nagent_name=\"Creator Agent\",\nagent_image=\"agent.jpg\",\ncreator=\"specific-creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Creator agent subheading\",\ndescription=\"Creator agent description\",\nruns=50,"
                                                        }
                                                    ],
                                                    "content": "store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"creator-agent\",\nagent_name=\"Creator Agent\",\nagent_image=\"agent.jpg\",\ncreator=\"specific-creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Creator agent subheading\",\ndescription=\"Creator agent description\",\nruns=50,\nrating"
                                                }
                                            ],
                                            "content": "v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"creator-agent\",\nagent_name=\"Creator Agent\",\nagent_image=\"agent.jpg\",\ncreator=\"specific-creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Creator agent subheading\",\ndescription=\"Creator agent description\",\nruns=50,\nrating"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "pagination",
                                            "range": [
                                                706,
                                                741
                                            ],
                                            "children": [
                                                {
                                                    "type": "NewExpression",
                                                    "name": "Pagination",
                                                    "range": [
                                                        708,
                                                        741
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "current_page",
                                                            "range": [
                                                                721,
                                                                723
                                                            ],
                                                            "children": [],
                                                            "content": "v2.store"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "total_items",
                                                            "range": [
                                                                726,
                                                                728
                                                            ],
                                                            "children": [],
                                                            "content": ".Pagination("
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "total_pages",
                                                            "range": [
                                                                731,
                                                                733
                                                            ],
                                                            "children": [],
                                                            "content": "=1,"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "page_size",
                                                            "range": [
                                                                736,
                                                                738
                                                            ],
                                                            "children": [],
                                                            "content": "=1,"
                                                        }
                                                    ],
                                                    "content": ",\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages="
                                                }
                                            ],
                                            "content": ".0,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages="
                                        }
                                    ],
                                    "content": ":pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"creator-agent\",\nagent_name=\"Creator Agent\",\nagent_image=\"agent.jpg\",\ncreator=\"specific-creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Creator agent subheading\",\ndescription=\"Creator agent description\",\nruns=50,\nrating=4.0,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\n"
                                }
                            ],
                            "content": "mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"creator-agent\",\nagent_name=\"Creator Agent\",\nagent_image=\"agent.jpg\",\ncreator=\"specific-creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Creator agent subheading\",\ndescription=\"Creator agent description\",\nruns=50,\nrating=4.0,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\n"
                        }
                    ],
                    "content": "(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"creator-agent\",\nagent_name=\"Creator Agent\",\nagent_image=\"agent.jpg\",\ncreator=\"specific-creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Creator agent subheading\",\ndescription=\"Creator agent description\",\nruns=50,\nrating=4.0,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "mock_db_call",
                    "range": [
                        746,
                        760
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                747,
                                760
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "patch",
                                    "range": [
                                        748,
                                        753
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "backend.server.v2.store.db.get_store_agents",
                                            "range": [
                                                752,
                                                752
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": ",\n),\n)"
                                }
                            ],
                            "content": "20,\n),\n)\nmock_db_call=mocker.patch("
                        }
                    ],
                    "content": "=20,\n),\n)\nmock_db_call=mocker.patch("
                },
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        755,
                        760
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "return_value",
                            "range": [
                                756,
                                757
                            ],
                            "children": [],
                            "content": "=mocker"
                        },
                        {
                            "type": "Identifier",
                            "name": "mocked_value",
                            "range": [
                                759,
                                759
                            ],
                            "children": [],
                            "content": "patch"
                        }
                    ],
                    "content": "mock_db_call=mocker.patch("
                },
                {
                    "type": "VariableDecl",
                    "name": "response",
                    "range": [
                        761,
                        769
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                762,
                                769
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "get",
                                    "range": [
                                        763,
                                        768
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "/agents?creator=specific-creator",
                                            "range": [
                                                767,
                                                767
                                            ],
                                            "children": [],
                                            "content": "="
                                        }
                                    ],
                                    "content": "\nmock_db_call.return_value=mocked_value"
                                }
                            ],
                            "content": ")\nmock_db_call.return_value=mocked_value\n"
                        }
                    ],
                    "content": "\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\n"
                },
                {
                    "type": "Assertion",
                    "name": "assert",
                    "range": [
                        770,
                        776
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "==",
                            "range": [
                                774,
                                775
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "status_code",
                                    "range": [
                                        772,
                                        773
                                    ],
                                    "children": [],
                                    "content": "client."
                                },
                                {
                                    "type": "Literal",
                                    "name": "200",
                                    "range": [
                                        776,
                                        776
                                    ],
                                    "children": [],
                                    "content": "\"/agents?creator=specific-creator\""
                                }
                            ],
                            "content": "get("
                        }
                    ],
                    "content": "response=client.get(\"/agents?creator=specific-creator\""
                },
                {
                    "type": "VariableDecl",
                    "name": "data",
                    "range": [
                        778,
                        802
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                779,
                                802
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "model_validate",
                                    "range": [
                                        780,
                                        801
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "response.json",
                                            "range": [
                                                794,
                                                799
                                            ],
                                            "children": [],
                                            "content": ".store.model.StoreAgentsResponse"
                                        }
                                    ],
                                    "content": "response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate"
                                }
                            ],
                            "content": "assert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate("
                        }
                    ],
                    "content": "\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate("
                },
                {
                    "type": "Assertion",
                    "name": "assert",
                    "range": [
                        803,
                        812
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "==",
                            "range": [
                                810,
                                811
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "len",
                                    "range": [
                                        804,
                                        809
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "data.agents",
                                            "range": [
                                                806,
                                                808
                                            ],
                                            "children": [],
                                            "content": "json()"
                                        }
                                    ],
                                    "content": "response.json()\n"
                                },
                                {
                                    "type": "Literal",
                                    "name": "1",
                                    "range": [
                                        812,
                                        812
                                    ],
                                    "children": [],
                                    "content": "assert"
                                }
                            ],
                            "content": ")\n"
                        }
                    ],
                    "content": "\nresponse.json()\n)\nassert"
                },
                {
                    "type": "Assertion",
                    "name": "assert",
                    "range": [
                        814,
                        826
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "==",
                            "range": [
                                823,
                                824
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "creator",
                                    "range": [
                                        821,
                                        822
                                    ],
                                    "children": [],
                                    "content": "1\n"
                                },
                                {
                                    "type": "Literal",
                                    "name": "specific-creator",
                                    "range": [
                                        825,
                                        825
                                    ],
                                    "children": [],
                                    "content": "."
                                }
                            ],
                            "content": "assert data"
                        }
                    ],
                    "content": "(data.agents)==1\nassert data.agents"
                },
                {
                    "type": "CallExpression",
                    "name": "assert_called_once_with",
                    "range": [
                        827,
                        868
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "featured",
                            "range": [
                                832,
                                834
                            ],
                            "children": [],
                            "content": "==\"specific-creator\""
                        },
                        {
                            "type": "Argument",
                            "name": "creator",
                            "range": [
                                837,
                                839
                            ],
                            "children": [],
                            "content": ".assert_called_once_with("
                        },
                        {
                            "type": "Argument",
                            "name": "sorted_by",
                            "range": [
                                842,
                                844
                            ],
                            "children": [],
                            "content": "=False,"
                        },
                        {
                            "type": "Argument",
                            "name": "search_query",
                            "range": [
                                847,
                                849
                            ],
                            "children": [],
                            "content": "=\"specific-creator\","
                        },
                        {
                            "type": "Argument",
                            "name": "category",
                            "range": [
                                852,
                                854
                            ],
                            "children": [],
                            "content": "=None,"
                        },
                        {
                            "type": "Argument",
                            "name": "page",
                            "range": [
                                857,
                                859
                            ],
                            "children": [],
                            "content": "=None,"
                        },
                        {
                            "type": "Argument",
                            "name": "page_size",
                            "range": [
                                862,
                                864
                            ],
                            "children": [],
                            "content": "=None,"
                        }
                    ],
                    "content": "[0].creator==\"specific-creator\"\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=\"specific-creator\",\nsorted_by=None,\nsearch_query=None,\ncategory=None,\npage=1"
                }
            ],
            "content": "page_size=20,\n)\n\n\ndef test_get_agents_by_creator(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"creator-agent\",\nagent_name=\"Creator Agent\",\nagent_image=\"agent.jpg\",\ncreator=\"specific-creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Creator agent subheading\",\ndescription=\"Creator agent description\",\nruns=50,\nrating=4.0,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?creator=specific-creator\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==1\nassert data.agents[0].creator==\"specific-creator\"\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=\"specific-creator\",\nsorted_by=None,\nsearch_query=None,\ncategory=None,\npage=1,"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_agents_sorted",
            "range": [
                870,
                1128
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        873,
                        877
                    ],
                    "children": [],
                    "content": "20,\n)\n"
                },
                {
                    "type": "BlockStatement",
                    "name": "FunctionBody",
                    "range": [
                        880,
                        1128
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "mocked_value",
                            "range": [
                                881,
                                1003
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        882,
                                        1003
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "StoreAgentsResponse",
                                            "range": [
                                                883,
                                                1003
                                            ],
                                            "children": [
                                                {
                                                    "type": "ArrayExpression",
                                                    "name": "agents",
                                                    "range": [
                                                        896,
                                                        962
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "NewExpression",
                                                            "name": "StoreAgent",
                                                            "range": [
                                                                900,
                                                                960
                                                            ],
                                                            "children": [],
                                                            "content": ".model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"top-agent\",\nagent_name=\"Top Agent\",\nagent_image=\"top.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Top agent subheading\",\ndescription=\"Top agent description\",\nruns=1000"
                                                        }
                                                    ],
                                                    "content": ".v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"top-agent\",\nagent_name=\"Top Agent\",\nagent_image=\"top.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Top agent subheading\",\ndescription=\"Top agent description\",\nruns=1000,\n"
                                                },
                                                {
                                                    "type": "NewExpression",
                                                    "name": "Pagination",
                                                    "range": [
                                                        965,
                                                        1000
                                                    ],
                                                    "children": [],
                                                    "content": "5.0,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages"
                                                }
                                            ],
                                            "content": "mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"top-agent\",\nagent_name=\"Top Agent\",\nagent_image=\"top.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Top agent subheading\",\ndescription=\"Top agent description\",\nruns=1000,\nrating=5.0,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,"
                                        }
                                    ],
                                    "content": "(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"top-agent\",\nagent_name=\"Top Agent\",\nagent_image=\"top.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Top agent subheading\",\ndescription=\"Top agent description\",\nruns=1000,\nrating=5.0,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,"
                                }
                            ],
                            "content": "test_get_agents_sorted(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"top-agent\",\nagent_name=\"Top Agent\",\nagent_image=\"top.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Top agent subheading\",\ndescription=\"Top agent description\",\nruns=1000,\nrating=5.0,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_db_call",
                            "range": [
                                1005,
                                1018
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1006,
                                        1018
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "patch",
                                            "range": [
                                                1007,
                                                1012
                                            ],
                                            "children": [],
                                            "content": "20,\n),\n"
                                        }
                                    ],
                                    "content": "=20,\n),\n)\nmock_db_call=mocker."
                                }
                            ],
                            "content": "page_size=20,\n),\n)\nmock_db_call=mocker."
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                1014,
                                1018
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "return_value",
                                    "range": [
                                        1015,
                                        1018
                                    ],
                                    "children": [],
                                    "content": "mock_db_call=mocker."
                                }
                            ],
                            "content": "\nmock_db_call=mocker."
                        },
                        {
                            "type": "VariableDecl",
                            "name": "response",
                            "range": [
                                1020,
                                1028
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1021,
                                        1028
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get",
                                            "range": [
                                                1022,
                                                1027
                                            ],
                                            "children": [],
                                            "content": ")\nmock_db_call.return_value="
                                        }
                                    ],
                                    "content": "\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value"
                                }
                            ],
                            "content": "(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert",
                            "range": [
                                1029,
                                1036
                            ],
                            "children": [],
                            "content": "\nresponse=client.get(\"/agents?sorted_by=runs\""
                        },
                        {
                            "type": "VariableDecl",
                            "name": "data",
                            "range": [
                                1037,
                                1061
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1038,
                                        1061
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "model_validate",
                                            "range": [
                                                1048,
                                                1060
                                            ],
                                            "children": [],
                                            "content": "=backend.server.v2.store.model.StoreAgentsResponse."
                                        }
                                    ],
                                    "content": "\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate"
                                }
                            ],
                            "content": ")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert",
                            "range": [
                                1062,
                                1072
                            ],
                            "children": [],
                            "content": "(\nresponse.json()\n)\nassert"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert",
                            "range": [
                                1073,
                                1085
                            ],
                            "children": [],
                            "content": "len(data.agents)==1\nassert data."
                        },
                        {
                            "type": "CallExpression",
                            "name": "assert_called_once_with",
                            "range": [
                                1086,
                                1126
                            ],
                            "children": [],
                            "content": "agents[0].runs==1000\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=\"runs\",\nsearch_query=None,\ncategory=None,\npage"
                        }
                    ],
                    "content": "def test_get_agents_sorted(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"top-agent\",\nagent_name=\"Top Agent\",\nagent_image=\"top.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Top agent subheading\",\ndescription=\"Top agent description\",\nruns=1000,\nrating=5.0,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?sorted_by=runs\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==1\nassert data.agents[0].runs==1000\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=\"runs\",\nsearch_query=None,\ncategory=None,\npage=1"
                }
            ],
            "content": "\npage_size=20,\n)\n\n\ndef test_get_agents_sorted(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"top-agent\",\nagent_name=\"Top Agent\",\nagent_image=\"top.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Top agent subheading\",\ndescription=\"Top agent description\",\nruns=1000,\nrating=5.0,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?sorted_by=runs\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==1\nassert data.agents[0].runs==1000\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=\"runs\",\nsearch_query=None,\ncategory=None,\npage=1"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_agents_search",
            "range": [
                1129,
                1390
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        1132,
                        1136
                    ],
                    "children": [],
                    "content": "=20,\n)"
                },
                {
                    "type": "BlockStatement",
                    "name": "FunctionBody",
                    "range": [
                        1139,
                        1390
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "mocked_value",
                            "range": [
                                1140,
                                1262
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1141,
                                        1262
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "StoreAgentsResponse",
                                            "range": [
                                                1142,
                                                1262
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "agents",
                                                    "range": [
                                                        1155,
                                                        1221
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArrayExpression",
                                                            "name": "",
                                                            "range": [
                                                                1157,
                                                                1221
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "NewExpression",
                                                                    "name": "StoreAgent",
                                                                    "range": [
                                                                        1159,
                                                                        1219
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "slug",
                                                                            "range": [
                                                                                1172,
                                                                                1174
                                                                            ],
                                                                            "children": [],
                                                                            "content": "server.v2"
                                                                        },
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "agent_name",
                                                                            "range": [
                                                                                1177,
                                                                                1179
                                                                            ],
                                                                            "children": [],
                                                                            "content": ".model."
                                                                        },
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "agent_image",
                                                                            "range": [
                                                                                1182,
                                                                                1184
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\nslug="
                                                                        },
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "creator",
                                                                            "range": [
                                                                                1187,
                                                                                1189
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\nagent_name="
                                                                        },
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "creator_avatar",
                                                                            "range": [
                                                                                1192,
                                                                                1194
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\nagent_image="
                                                                        },
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "sub_heading",
                                                                            "range": [
                                                                                1197,
                                                                                1199
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\ncreator="
                                                                        },
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "description",
                                                                            "range": [
                                                                                1202,
                                                                                1204
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\ncreator_avatar="
                                                                        },
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "runs",
                                                                            "range": [
                                                                                1207,
                                                                                1209
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\nsub_heading="
                                                                        },
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "rating",
                                                                            "range": [
                                                                                1212,
                                                                                1216
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\ndescription=\"Specific search term description\","
                                                                        }
                                                                    ],
                                                                    "content": "store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"search-agent\",\nagent_name=\"Search Agent\",\nagent_image=\"search.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Search agent subheading\",\ndescription=\"Specific search term description\",\nruns="
                                                                }
                                                            ],
                                                            "content": "v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"search-agent\",\nagent_name=\"Search Agent\",\nagent_image=\"search.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Search agent subheading\",\ndescription=\"Specific search term description\",\nruns=75,"
                                                        }
                                                    ],
                                                    "content": "server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"search-agent\",\nagent_name=\"Search Agent\",\nagent_image=\"search.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Search agent subheading\",\ndescription=\"Specific search term description\",\nruns=75,"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "pagination",
                                                    "range": [
                                                        1224,
                                                        1259
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "NewExpression",
                                                            "name": "Pagination",
                                                            "range": [
                                                                1226,
                                                                1259
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Property",
                                                                    "name": "current_page",
                                                                    "range": [
                                                                        1239,
                                                                        1241
                                                                    ],
                                                                    "children": [],
                                                                    "content": "server.v2"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "total_items",
                                                                    "range": [
                                                                        1244,
                                                                        1246
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".model."
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "total_pages",
                                                                    "range": [
                                                                        1249,
                                                                        1251
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\ncurrent_page="
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "page_size",
                                                                    "range": [
                                                                        1254,
                                                                        1256
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\ntotal_items="
                                                                }
                                                            ],
                                                            "content": ".2,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\n"
                                                        }
                                                    ],
                                                    "content": "=4.2,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\n"
                                                }
                                            ],
                                            "content": "(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"search-agent\",\nagent_name=\"Search Agent\",\nagent_image=\"search.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Search agent subheading\",\ndescription=\"Specific search term description\",\nruns=75,\nrating=4.2,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1"
                                        }
                                    ],
                                    "content": "test_get_agents_search(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"search-agent\",\nagent_name=\"Search Agent\",\nagent_image=\"search.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Search agent subheading\",\ndescription=\"Specific search term description\",\nruns=75,\nrating=4.2,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1"
                                }
                            ],
                            "content": "def test_get_agents_search(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"search-agent\",\nagent_name=\"Search Agent\",\nagent_image=\"search.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Search agent subheading\",\ndescription=\"Specific search term description\",\nruns=75,\nrating=4.2,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_db_call",
                            "range": [
                                1264,
                                1278
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1265,
                                        1278
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "patch",
                                            "range": [
                                                1266,
                                                1271
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "\"backend.server.v2.store.db.get_store_agents\"",
                                                    "range": [
                                                        1270,
                                                        1271
                                                    ],
                                                    "children": [],
                                                    "content": "),"
                                                }
                                            ],
                                            "content": "=20,\n),"
                                        }
                                    ],
                                    "content": "page_size=20,\n),\n)\nmock_db_call=mocker."
                                }
                            ],
                            "content": "\npage_size=20,\n),\n)\nmock_db_call=mocker."
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                1273,
                                1278
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "return_value",
                                    "range": [
                                        1274,
                                        1278
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mocked_value",
                                            "range": [
                                                1277,
                                                1278
                                            ],
                                            "children": [],
                                            "content": "mocker."
                                        }
                                    ],
                                    "content": "\nmock_db_call=mocker."
                                }
                            ],
                            "content": ")\nmock_db_call=mocker."
                        },
                        {
                            "type": "VariableDecl",
                            "name": "response",
                            "range": [
                                1279,
                                1287
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1280,
                                        1287
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get",
                                            "range": [
                                                1281,
                                                1286
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "\"/agents?search_query=specific\"",
                                                    "range": [
                                                        1285,
                                                        1286
                                                    ],
                                                    "children": [],
                                                    "content": ".return_value"
                                                }
                                            ],
                                            "content": "\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value"
                                        }
                                    ],
                                    "content": "(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value="
                                }
                            ],
                            "content": "patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value="
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert",
                            "range": [
                                1288,
                                1295
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1289,
                                        1294
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "status_code",
                                            "range": [
                                                1290,
                                                1292
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "response",
                                                    "range": [
                                                        1289,
                                                        1290
                                                    ],
                                                    "children": [],
                                                    "content": "\nresponse"
                                                }
                                            ],
                                            "content": "response=client"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "200",
                                            "range": [
                                                1294,
                                                1294
                                            ],
                                            "children": [],
                                            "content": "get"
                                        }
                                    ],
                                    "content": "\nresponse=client.get"
                                }
                            ],
                            "content": "mocked_value\nresponse=client.get("
                        },
                        {
                            "type": "VariableDecl",
                            "name": "data",
                            "range": [
                                1296,
                                1320
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1297,
                                        1320
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "model_validate",
                                            "range": [
                                                1298,
                                                1319
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "response.json()",
                                                    "range": [
                                                        1313,
                                                        1318
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "json",
                                                            "range": [
                                                                1315,
                                                                1317
                                                            ],
                                                            "children": [],
                                                            "content": "store.model"
                                                        }
                                                    ],
                                                    "content": "v2.store.model."
                                                }
                                            ],
                                            "content": "\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse"
                                        }
                                    ],
                                    "content": ")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse."
                                }
                            ],
                            "content": "\"/agents?search_query=specific\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse."
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert",
                            "range": [
                                1321,
                                1331
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1322,
                                        1330
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "len",
                                            "range": [
                                                1323,
                                                1327
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "data.agents",
                                                    "range": [
                                                        1324,
                                                        1327
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "agents",
                                                            "range": [
                                                                1325,
                                                                1327
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "data",
                                                                    "range": [
                                                                        1324,
                                                                        1325
                                                                    ],
                                                                    "children": [],
                                                                    "content": "response."
                                                                }
                                                            ],
                                                            "content": ".json("
                                                        }
                                                    ],
                                                    "content": "response.json("
                                                }
                                            ],
                                            "content": "\nresponse.json("
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "1",
                                            "range": [
                                                1330,
                                                1330
                                            ],
                                            "children": [],
                                            "content": ")"
                                        }
                                    ],
                                    "content": "(\nresponse.json()\n)"
                                }
                            ],
                            "content": "model_validate(\nresponse.json()\n)\n"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert",
                            "range": [
                                1332,
                                1347
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "in",
                                    "range": [
                                        1333,
                                        1345
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"specific\"",
                                            "range": [
                                                1333,
                                                1333
                                            ],
                                            "children": [],
                                            "content": "len"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "description.lower()",
                                            "range": [
                                                1335,
                                                1345
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "description",
                                                    "range": [
                                                        1336,
                                                        1342
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArrayExpression",
                                                            "name": "",
                                                            "range": [
                                                                1337,
                                                                1340
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "0",
                                                                    "range": [
                                                                        1339,
                                                                        1339
                                                                    ],
                                                                    "children": [],
                                                                    "content": "="
                                                                }
                                                            ],
                                                            "content": "agents)=="
                                                        }
                                                    ],
                                                    "content": ".agents)==1\n"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "lower",
                                                    "range": [
                                                        1344,
                                                        1345
                                                    ],
                                                    "children": [],
                                                    "content": "\"specific\" in"
                                                }
                                            ],
                                            "content": "data.agents)==1\nassert \"specific\" in"
                                        }
                                    ],
                                    "content": "len(data.agents)==1\nassert \"specific\" in"
                                }
                            ],
                            "content": "assert len(data.agents)==1\nassert \"specific\" in data."
                        },
                        {
                            "type": "CallExpression",
                            "name": "assert_called_once_with",
                            "range": [
                                1348,
                                1388
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "featured=False",
                                    "range": [
                                        1353,
                                        1356
                                    ],
                                    "children": [],
                                    "content": "description.lower("
                                },
                                {
                                    "type": "Argument",
                                    "name": "creator=None",
                                    "range": [
                                        1358,
                                        1361
                                    ],
                                    "children": [],
                                    "content": "\nmock_db_call.assert_called_once_with"
                                },
                                {
                                    "type": "Argument",
                                    "name": "sorted_by=None",
                                    "range": [
                                        1363,
                                        1366
                                    ],
                                    "children": [],
                                    "content": "\nfeatured=False"
                                },
                                {
                                    "type": "Argument",
                                    "name": "search_query=\"specific\"",
                                    "range": [
                                        1368,
                                        1371
                                    ],
                                    "children": [],
                                    "content": "\ncreator=None"
                                },
                                {
                                    "type": "Argument",
                                    "name": "category=None",
                                    "range": [
                                        1373,
                                        1376
                                    ],
                                    "children": [],
                                    "content": "\nsorted_by=None"
                                },
                                {
                                    "type": "Argument",
                                    "name": "page=1",
                                    "range": [
                                        1378,
                                        1381
                                    ],
                                    "children": [],
                                    "content": "\nsearch_query=\"specific\""
                                },
                                {
                                    "type": "Argument",
                                    "name": "page_size=20",
                                    "range": [
                                        1383,
                                        1386
                                    ],
                                    "children": [],
                                    "content": "\ncategory=None"
                                }
                            ],
                            "content": "agents[0].description.lower()\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=\"specific\",\ncategory=None,\n"
                        }
                    ],
                    "content": "\ndef test_get_agents_search(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"search-agent\",\nagent_name=\"Search Agent\",\nagent_image=\"search.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Search agent subheading\",\ndescription=\"Specific search term description\",\nruns=75,\nrating=4.2,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?search_query=specific\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==1\nassert \"specific\" in data.agents[0].description.lower()\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=\"specific\",\ncategory=None,\npage="
                }
            ],
            "content": ",\npage_size=20,\n)\n\n\ndef test_get_agents_search(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"search-agent\",\nagent_name=\"Search Agent\",\nagent_image=\"search.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Search agent subheading\",\ndescription=\"Specific search term description\",\nruns=75,\nrating=4.2,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?search_query=specific\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==1\nassert \"specific\" in data.agents[0].description.lower()\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=\"specific\",\ncategory=None,\npage="
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_agents_category",
            "range": [
                1391,
                1636
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        1394,
                        1398
                    ],
                    "children": [],
                    "content": "page_size=20,\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "mocked_value",
                    "range": [
                        1402,
                        1524
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                1403,
                                1524
                            ],
                            "children": [
                                {
                                    "type": "NewExpression",
                                    "name": "StoreAgentsResponse",
                                    "range": [
                                        1404,
                                        1524
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "agents",
                                            "range": [
                                                1417,
                                                1483
                                            ],
                                            "children": [
                                                {
                                                    "type": "ArrayExpression",
                                                    "name": "[",
                                                    "range": [
                                                        1419,
                                                        1483
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "NewExpression",
                                                            "name": "StoreAgent",
                                                            "range": [
                                                                1421,
                                                                1481
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Property",
                                                                    "name": "slug",
                                                                    "range": [
                                                                        1434,
                                                                        1436
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".server."
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "agent_name",
                                                                    "range": [
                                                                        1439,
                                                                        1441
                                                                    ],
                                                                    "children": [],
                                                                    "content": "store.model"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "agent_image",
                                                                    "range": [
                                                                        1444,
                                                                        1446
                                                                    ],
                                                                    "children": [],
                                                                    "content": "(\nslug"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "creator",
                                                                    "range": [
                                                                        1449,
                                                                        1451
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\nagent_name"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "creator_avatar",
                                                                    "range": [
                                                                        1454,
                                                                        1456
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\nagent_image"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "sub_heading",
                                                                    "range": [
                                                                        1459,
                                                                        1461
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\ncreator"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "description",
                                                                    "range": [
                                                                        1464,
                                                                        1466
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\ncreator_avatar"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "runs",
                                                                    "range": [
                                                                        1469,
                                                                        1471
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\nsub_heading"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "rating",
                                                                    "range": [
                                                                        1474,
                                                                        1478
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\ndescription=\"Category agent description\""
                                                                }
                                                            ],
                                                            "content": ".store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"category-agent\",\nagent_name=\"Category Agent\",\nagent_image=\"category.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Category agent subheading\",\ndescription=\"Category agent description\",\nruns"
                                                        }
                                                    ],
                                                    "content": ".v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"category-agent\",\nagent_name=\"Category Agent\",\nagent_image=\"category.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Category agent subheading\",\ndescription=\"Category agent description\",\nruns=60"
                                                }
                                            ],
                                            "content": ".server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"category-agent\",\nagent_name=\"Category Agent\",\nagent_image=\"category.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Category agent subheading\",\ndescription=\"Category agent description\",\nruns=60"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "pagination",
                                            "range": [
                                                1486,
                                                1521
                                            ],
                                            "children": [
                                                {
                                                    "type": "NewExpression",
                                                    "name": "Pagination",
                                                    "range": [
                                                        1488,
                                                        1521
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "current_page",
                                                            "range": [
                                                                1501,
                                                                1503
                                                            ],
                                                            "children": [],
                                                            "content": ".server."
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "total_items",
                                                            "range": [
                                                                1506,
                                                                1508
                                                            ],
                                                            "children": [],
                                                            "content": "store.model"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "total_pages",
                                                            "range": [
                                                                1511,
                                                                1513
                                                            ],
                                                            "children": [],
                                                            "content": "(\ncurrent_page"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "page_size",
                                                            "range": [
                                                                1516,
                                                                1518
                                                            ],
                                                            "children": [],
                                                            "content": ",\ntotal_items"
                                                        }
                                                    ],
                                                    "content": "4.1,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,"
                                                }
                                            ],
                                            "content": "rating=4.1,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,"
                                        }
                                    ],
                                    "content": "test_get_agents_category(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"category-agent\",\nagent_name=\"Category Agent\",\nagent_image=\"category.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Category agent subheading\",\ndescription=\"Category agent description\",\nruns=60,\nrating=4.1,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages="
                                }
                            ],
                            "content": "def test_get_agents_category(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"category-agent\",\nagent_name=\"Category Agent\",\nagent_image=\"category.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Category agent subheading\",\ndescription=\"Category agent description\",\nruns=60,\nrating=4.1,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages="
                        }
                    ],
                    "content": "\ndef test_get_agents_category(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"category-agent\",\nagent_name=\"Category Agent\",\nagent_image=\"category.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Category agent subheading\",\ndescription=\"Category agent description\",\nruns=60,\nrating=4.1,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages="
                },
                {
                    "type": "VariableDecl",
                    "name": "mock_db_call",
                    "range": [
                        1526,
                        1540
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                1527,
                                1540
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "patch",
                                    "range": [
                                        1528,
                                        1533
                                    ],
                                    "children": [],
                                    "content": "page_size=20,\n)"
                                }
                            ],
                            "content": "\npage_size=20,\n),\n)\nmock_db_call=mocker"
                        }
                    ],
                    "content": ",\npage_size=20,\n),\n)\nmock_db_call=mocker"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        1535,
                        1540
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "return_value",
                            "range": [
                                1536,
                                1537
                            ],
                            "children": [],
                            "content": ")\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "mocked_value",
                            "range": [
                                1539,
                                1540
                            ],
                            "children": [],
                            "content": "=mocker"
                        }
                    ],
                    "content": "\n)\nmock_db_call=mocker"
                },
                {
                    "type": "VariableDecl",
                    "name": "response",
                    "range": [
                        1541,
                        1549
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                1542,
                                1549
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "get",
                                    "range": [
                                        1543,
                                        1548
                                    ],
                                    "children": [],
                                    "content": "(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call."
                                }
                            ],
                            "content": "patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value"
                        }
                    ],
                    "content": ".patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert",
                    "range": [
                        1550,
                        1557
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "==",
                            "range": [
                                1554,
                                1556
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "status_code",
                                    "range": [
                                        1552,
                                        1553
                                    ],
                                    "children": [],
                                    "content": "\nresponse"
                                },
                                {
                                    "type": "Literal",
                                    "name": "200",
                                    "range": [
                                        1556,
                                        1557
                                    ],
                                    "children": [],
                                    "content": ".get"
                                }
                            ],
                            "content": "=client."
                        }
                    ],
                    "content": "=mocked_value\nresponse=client.get"
                },
                {
                    "type": "VariableDecl",
                    "name": "data",
                    "range": [
                        1558,
                        1582
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                1559,
                                1582
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "model_validate",
                                    "range": [
                                        1560,
                                        1581
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "json",
                                            "range": [
                                                1575,
                                                1579
                                            ],
                                            "children": [],
                                            "content": ".v2.store."
                                        }
                                    ],
                                    "content": ")\nassert response.status_code==200\ndata=backend.server.v2.store.model."
                                }
                            ],
                            "content": "\"/agents?category=test-category\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse"
                        }
                    ],
                    "content": "(\"/agents?category=test-category\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert",
                    "range": [
                        1583,
                        1593
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "==",
                            "range": [
                                1590,
                                1592
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "len",
                                    "range": [
                                        1584,
                                        1589
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "agents",
                                            "range": [
                                                1587,
                                                1588
                                            ],
                                            "children": [],
                                            "content": "response."
                                        }
                                    ],
                                    "content": "model_validate(\nresponse.json"
                                },
                                {
                                    "type": "Literal",
                                    "name": "1",
                                    "range": [
                                        1592,
                                        1593
                                    ],
                                    "children": [],
                                    "content": "\n)"
                                }
                            ],
                            "content": "()\n"
                        }
                    ],
                    "content": ".model_validate(\nresponse.json()\n)"
                },
                {
                    "type": "CallExpression",
                    "name": "assert_called_once_with",
                    "range": [
                        1594,
                        1634
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "featured",
                            "range": [
                                1599,
                                1601
                            ],
                            "children": [],
                            "content": ".agents)"
                        },
                        {
                            "type": "Argument",
                            "name": "creator",
                            "range": [
                                1604,
                                1606
                            ],
                            "children": [],
                            "content": "1\nmock_db_call"
                        },
                        {
                            "type": "Argument",
                            "name": "sorted_by",
                            "range": [
                                1609,
                                1611
                            ],
                            "children": [],
                            "content": "(\nfeatured"
                        },
                        {
                            "type": "Argument",
                            "name": "search_query",
                            "range": [
                                1614,
                                1616
                            ],
                            "children": [],
                            "content": ",\ncreator"
                        },
                        {
                            "type": "Argument",
                            "name": "category",
                            "range": [
                                1619,
                                1621
                            ],
                            "children": [],
                            "content": ",\nsorted_by"
                        },
                        {
                            "type": "Argument",
                            "name": "page",
                            "range": [
                                1624,
                                1626
                            ],
                            "children": [],
                            "content": ",\nsearch_query"
                        },
                        {
                            "type": "Argument",
                            "name": "page_size",
                            "range": [
                                1629,
                                1631
                            ],
                            "children": [],
                            "content": ",\ncategory"
                        }
                    ],
                    "content": "\nassert len(data.agents)==1\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=\"test-category\","
                }
            ],
            "content": "1,\npage_size=20,\n)\n\n\ndef test_get_agents_category(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"category-agent\",\nagent_name=\"Category Agent\",\nagent_image=\"category.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Category agent subheading\",\ndescription=\"Category agent description\",\nruns=60,\nrating=4.1,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?category=test-category\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==1\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=\"test-category\",\npage"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_agents_pagination",
            "range": [
                1637,
                1917
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        1640,
                        1644
                    ],
                    "children": [],
                    "content": "\npage_size=20,"
                },
                {
                    "type": "BlockStatement",
                    "name": "FunctionBody",
                    "range": [
                        1647,
                        1917
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "mocked_value",
                            "range": [
                                1648,
                                1785
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1649,
                                        1785
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "StoreAgentsResponse",
                                            "range": [
                                                1650,
                                                1785
                                            ],
                                            "children": [
                                                {
                                                    "type": "ArrayExpression",
                                                    "name": "agents",
                                                    "range": [
                                                        1663,
                                                        1744
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ForStatement",
                                                            "name": "for",
                                                            "range": [
                                                                1736,
                                                                1743
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "range",
                                                                    "range": [
                                                                        1739,
                                                                        1742
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nrating=4"
                                                                }
                                                            ],
                                                            "content": "*10,\nrating=4."
                                                        }
                                                    ],
                                                    "content": "backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=f \"agent-{i}\",\nagent_name=f \"Agent {i}\",\nagent_image=f \"agent{i}.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=f \"Agent {i} subheading\",\ndescription=f \"Agent {i} description\",\nruns=i*10,\nrating=4.0"
                                                },
                                                {
                                                    "type": "NewExpression",
                                                    "name": "Pagination",
                                                    "range": [
                                                        1747,
                                                        1782
                                                    ],
                                                    "children": [],
                                                    "content": ")\nfor i in range(5)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=15"
                                                }
                                            ],
                                            "content": "def test_get_agents_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=f \"agent-{i}\",\nagent_name=f \"Agent {i}\",\nagent_image=f \"agent{i}.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=f \"Agent {i} subheading\",\ndescription=f \"Agent {i} description\",\nruns=i*10,\nrating=4.0,\n)\nfor i in range(5)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=15,\ntotal_pages"
                                        }
                                    ],
                                    "content": "\ndef test_get_agents_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=f \"agent-{i}\",\nagent_name=f \"Agent {i}\",\nagent_image=f \"agent{i}.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=f \"Agent {i} subheading\",\ndescription=f \"Agent {i} description\",\nruns=i*10,\nrating=4.0,\n)\nfor i in range(5)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=15,\ntotal_pages"
                                }
                            ],
                            "content": "\n\ndef test_get_agents_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=f \"agent-{i}\",\nagent_name=f \"Agent {i}\",\nagent_image=f \"agent{i}.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=f \"Agent {i} subheading\",\ndescription=f \"Agent {i} description\",\nruns=i*10,\nrating=4.0,\n)\nfor i in range(5)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=15,\ntotal_pages"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_db_call",
                            "range": [
                                1787,
                                1801
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1788,
                                        1801
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "mocker.patch",
                                            "range": [
                                                1789,
                                                1794
                                            ],
                                            "children": [],
                                            "content": "\npage_size=5,\n"
                                        }
                                    ],
                                    "content": ",\npage_size=5,\n),\n)\nmock_db_call="
                                }
                            ],
                            "content": "3,\npage_size=5,\n),\n)\nmock_db_call="
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "response",
                            "range": [
                                1802,
                                1810
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1803,
                                        1810
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "client.get",
                                            "range": [
                                                1804,
                                                1809
                                            ],
                                            "children": [],
                                            "content": "patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call"
                                        }
                                    ],
                                    "content": ".patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call."
                                }
                            ],
                            "content": "mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call."
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert",
                            "range": [
                                1811,
                                1818
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1815,
                                        1817
                                    ],
                                    "children": [],
                                    "content": "response=client"
                                }
                            ],
                            "content": "return_value=mocked_value\nresponse=client."
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "data",
                            "range": [
                                1819,
                                1842
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1820,
                                        1842
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "StoreAgentsResponse.model_validate",
                                            "range": [
                                                1821,
                                                1841
                                            ],
                                            "children": [],
                                            "content": "\"/agents?page=2&page_size=5\")\nassert response.status_code==200\ndata=backend.server.v2.store."
                                        }
                                    ],
                                    "content": "(\"/agents?page=2&page_size=5\")\nassert response.status_code==200\ndata=backend.server.v2.store.model"
                                }
                            ],
                            "content": "get(\"/agents?page=2&page_size=5\")\nassert response.status_code==200\ndata=backend.server.v2.store.model"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert",
                            "range": [
                                1844,
                                1854
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1851,
                                        1853
                                    ],
                                    "children": [],
                                    "content": "json()"
                                }
                            ],
                            "content": "StoreAgentsResponse.model_validate(\nresponse.json()\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert",
                            "range": [
                                1855,
                                1864
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1861,
                                        1863
                                    ],
                                    "children": [],
                                    "content": ".agents)"
                                }
                            ],
                            "content": ")\nassert len(data.agents)="
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert",
                            "range": [
                                1865,
                                1874
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1871,
                                        1873
                                    ],
                                    "children": [],
                                    "content": "pagination.current_page"
                                }
                            ],
                            "content": "=5\nassert data.pagination.current_page="
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_db_call.assert_called_once_with",
                            "range": [
                                1875,
                                1915
                            ],
                            "children": [],
                            "content": "=2\nassert data.pagination.page_size==5\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=None"
                        }
                    ],
                    "content": "\n\n\ndef test_get_agents_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=f \"agent-{i}\",\nagent_name=f \"Agent {i}\",\nagent_image=f \"agent{i}.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=f \"Agent {i} subheading\",\ndescription=f \"Agent {i} description\",\nruns=i*10,\nrating=4.0,\n)\nfor i in range(5)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=15,\ntotal_pages=3,\npage_size=5,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?page=2&page_size=5\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==5\nassert data.pagination.current_page==2\nassert data.pagination.page_size==5\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=None,\n"
                }
            ],
            "content": "=1,\npage_size=20,\n)\n\n\ndef test_get_agents_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=f \"agent-{i}\",\nagent_name=f \"Agent {i}\",\nagent_image=f \"agent{i}.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=f \"Agent {i} subheading\",\ndescription=f \"Agent {i} description\",\nruns=i*10,\nrating=4.0,\n)\nfor i in range(5)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=15,\ntotal_pages=3,\npage_size=5,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?page=2&page_size=5\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==5\nassert data.pagination.current_page==2\nassert data.pagination.page_size==5\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=None,\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_agents_malformed_request",
            "range": [
                1918,
                2029
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        1921,
                        1925
                    ],
                    "children": [],
                    "content": ",\npage_size=5"
                },
                {
                    "type": "Comment",
                    "name": "# Test with invalid page number",
                    "range": [
                        1929,
                        1935
                    ],
                    "children": [],
                    "content": "\n\n\ndef test_get_agents_malformed_request(mocker"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "response = client.get(\"/agents?page=-1\")",
                    "range": [
                        1936,
                        1944
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                1936,
                                1944
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "response",
                                    "range": [
                                        1936,
                                        1944
                                    ],
                                    "children": [],
                                    "content": ":pytest_mock.MockFixture):\n#Test"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "client.get",
                                    "range": [
                                        1936,
                                        1944
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"/agents?page=-1\"",
                                            "range": [
                                                1936,
                                                1944
                                            ],
                                            "children": [],
                                            "content": ":pytest_mock.MockFixture):\n#Test"
                                        }
                                    ],
                                    "content": ":pytest_mock.MockFixture):\n#Test"
                                }
                            ],
                            "content": ":pytest_mock.MockFixture):\n#Test"
                        }
                    ],
                    "content": ":pytest_mock.MockFixture):\n#Test"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert response.status_code == 422",
                    "range": [
                        1945,
                        1952
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "==",
                            "range": [
                                1945,
                                1952
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "response.status_code",
                                    "range": [
                                        1945,
                                        1952
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "response",
                                            "range": [
                                                1945,
                                                1952
                                            ],
                                            "children": [],
                                            "content": "with invalid page number\nresponse=client"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "status_code",
                                            "range": [
                                                1945,
                                                1952
                                            ],
                                            "children": [],
                                            "content": "with invalid page number\nresponse=client"
                                        }
                                    ],
                                    "content": "with invalid page number\nresponse=client"
                                },
                                {
                                    "type": "Literal",
                                    "name": "422",
                                    "range": [
                                        1945,
                                        1952
                                    ],
                                    "children": [],
                                    "content": "with invalid page number\nresponse=client"
                                }
                            ],
                            "content": "with invalid page number\nresponse=client"
                        }
                    ],
                    "content": "with invalid page number\nresponse=client"
                },
                {
                    "type": "Comment",
                    "name": "# Test with invalid page size",
                    "range": [
                        1954,
                        1960
                    ],
                    "children": [],
                    "content": "get(\"/agents?page=-1\")\nassert response"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "response = client.get(\"/agents?page_size=0\")",
                    "range": [
                        1961,
                        1969
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                1961,
                                1969
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "response",
                                    "range": [
                                        1961,
                                        1969
                                    ],
                                    "children": [],
                                    "content": ".status_code==422\n\n#Test"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "client.get",
                                    "range": [
                                        1961,
                                        1969
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"/agents?page_size=0\"",
                                            "range": [
                                                1961,
                                                1969
                                            ],
                                            "children": [],
                                            "content": ".status_code==422\n\n#Test"
                                        }
                                    ],
                                    "content": ".status_code==422\n\n#Test"
                                }
                            ],
                            "content": ".status_code==422\n\n#Test"
                        }
                    ],
                    "content": ".status_code==422\n\n#Test"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert response.status_code == 422",
                    "range": [
                        1970,
                        1977
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "==",
                            "range": [
                                1970,
                                1977
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "response.status_code",
                                    "range": [
                                        1970,
                                        1977
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "response",
                                            "range": [
                                                1970,
                                                1977
                                            ],
                                            "children": [],
                                            "content": "with invalid page size\nresponse=client"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "status_code",
                                            "range": [
                                                1970,
                                                1977
                                            ],
                                            "children": [],
                                            "content": "with invalid page size\nresponse=client"
                                        }
                                    ],
                                    "content": "with invalid page size\nresponse=client"
                                },
                                {
                                    "type": "Literal",
                                    "name": "422",
                                    "range": [
                                        1970,
                                        1977
                                    ],
                                    "children": [],
                                    "content": "with invalid page size\nresponse=client"
                                }
                            ],
                            "content": "with invalid page size\nresponse=client"
                        }
                    ],
                    "content": "with invalid page size\nresponse=client"
                },
                {
                    "type": "Comment",
                    "name": "# Test with non-numeric values",
                    "range": [
                        1979,
                        1986
                    ],
                    "children": [],
                    "content": "get(\"/agents?page_size=0\")\nassert response."
                },
                {
                    "type": "ExpressionStatement",
                    "name": "response = client.get(\"/agents?page=abc&page_size=def\")",
                    "range": [
                        1987,
                        1995
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                1987,
                                1995
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "response",
                                    "range": [
                                        1987,
                                        1995
                                    ],
                                    "children": [],
                                    "content": "status_code==422\n\n#Test with"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "client.get",
                                    "range": [
                                        1987,
                                        1995
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"/agents?page=abc&page_size=def\"",
                                            "range": [
                                                1987,
                                                1995
                                            ],
                                            "children": [],
                                            "content": "status_code==422\n\n#Test with"
                                        }
                                    ],
                                    "content": "status_code==422\n\n#Test with"
                                }
                            ],
                            "content": "status_code==422\n\n#Test with"
                        }
                    ],
                    "content": "status_code==422\n\n#Test with"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert response.status_code == 422",
                    "range": [
                        1996,
                        2003
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "==",
                            "range": [
                                1996,
                                2003
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "response.status_code",
                                    "range": [
                                        1996,
                                        2003
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "response",
                                            "range": [
                                                1996,
                                                2003
                                            ],
                                            "children": [],
                                            "content": "non-numeric values\nresponse=client"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "status_code",
                                            "range": [
                                                1996,
                                                2003
                                            ],
                                            "children": [],
                                            "content": "non-numeric values\nresponse=client"
                                        }
                                    ],
                                    "content": "non-numeric values\nresponse=client"
                                },
                                {
                                    "type": "Literal",
                                    "name": "422",
                                    "range": [
                                        1996,
                                        2003
                                    ],
                                    "children": [],
                                    "content": "non-numeric values\nresponse=client"
                                }
                            ],
                            "content": "non-numeric values\nresponse=client"
                        }
                    ],
                    "content": "non-numeric values\nresponse=client"
                },
                {
                    "type": "Comment",
                    "name": "# Verify no DB calls were made",
                    "range": [
                        2005,
                        2012
                    ],
                    "children": [],
                    "content": "get(\"/agents?page=abc&page_size=def\")\nassert response."
                },
                {
                    "type": "ExpressionStatement",
                    "name": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")",
                    "range": [
                        2013,
                        2021
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                2013,
                                2021
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "mock_db_call",
                                    "range": [
                                        2013,
                                        2021
                                    ],
                                    "children": [],
                                    "content": "status_code==422\n\n#Verify no"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "mocker.patch",
                                    "range": [
                                        2013,
                                        2021
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"backend.server.v2.store.db.get_store_agents\"",
                                            "range": [
                                                2013,
                                                2021
                                            ],
                                            "children": [],
                                            "content": "status_code==422\n\n#Verify no"
                                        }
                                    ],
                                    "content": "status_code==422\n\n#Verify no"
                                }
                            ],
                            "content": "status_code==422\n\n#Verify no"
                        }
                    ],
                    "content": "status_code==422\n\n#Verify no"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "mock_db_call.assert_not_called()",
                    "range": [
                        2022,
                        2027
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "mock_db_call.assert_not_called",
                            "range": [
                                2022,
                                2027
                            ],
                            "children": [],
                            "content": "DB calls were made\nmock_db_call"
                        }
                    ],
                    "content": "DB calls were made\nmock_db_call"
                }
            ],
            "content": "page=2,\npage_size=5,\n)\n\n\ndef test_get_agents_malformed_request(mocker:pytest_mock.MockFixture):\n#Test with invalid page number\nresponse=client.get(\"/agents?page=-1\")\nassert response.status_code==422\n\n#Test with invalid page size\nresponse=client.get(\"/agents?page_size=0\")\nassert response.status_code==422\n\n#Test with non-numeric values\nresponse=client.get(\"/agents?page=abc&page_size=def\")\nassert response.status_code==422\n\n#Verify no DB calls were made\nmock_db_call=mocker"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_agent_details",
            "range": [
                2030,
                2237
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        2033,
                        2037
                    ],
                    "children": [],
                    "content": "\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call."
                },
                {
                    "type": "AssignmentExpression",
                    "name": "mocked_value",
                    "range": [
                        2041,
                        2146
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "StoreAgentDetails",
                            "range": [
                                2043,
                                2146
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "store_listing_version_id",
                                    "range": [
                                        2056,
                                        2058
                                    ],
                                    "children": [],
                                    "content": "=backend."
                                },
                                {
                                    "type": "Argument",
                                    "name": "slug",
                                    "range": [
                                        2061,
                                        2063
                                    ],
                                    "children": [],
                                    "content": "v2.store"
                                },
                                {
                                    "type": "Argument",
                                    "name": "agent_name",
                                    "range": [
                                        2066,
                                        2068
                                    ],
                                    "children": [],
                                    "content": ".StoreAgentDetails("
                                },
                                {
                                    "type": "Argument",
                                    "name": "agent_video",
                                    "range": [
                                        2071,
                                        2073
                                    ],
                                    "children": [],
                                    "content": "=\"test-version-id\","
                                },
                                {
                                    "type": "Argument",
                                    "name": "agent_image",
                                    "range": [
                                        2076,
                                        2082
                                    ],
                                    "children": [],
                                    "content": "=\"test-agent\",\nagent_name=\"Test Agent\""
                                },
                                {
                                    "type": "Argument",
                                    "name": "creator",
                                    "range": [
                                        2085,
                                        2087
                                    ],
                                    "children": [],
                                    "content": "agent_video=\"video.mp4\""
                                },
                                {
                                    "type": "Argument",
                                    "name": "creator_avatar",
                                    "range": [
                                        2090,
                                        2092
                                    ],
                                    "children": [],
                                    "content": "agent_image=["
                                },
                                {
                                    "type": "Argument",
                                    "name": "sub_heading",
                                    "range": [
                                        2095,
                                        2097
                                    ],
                                    "children": [],
                                    "content": "\"image2.jpg\"],"
                                },
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        2100,
                                        2102
                                    ],
                                    "children": [],
                                    "content": "=\"creator1\","
                                },
                                {
                                    "type": "Argument",
                                    "name": "categories",
                                    "range": [
                                        2105,
                                        2111
                                    ],
                                    "children": [],
                                    "content": "=\"avatar1.jpg\",\nsub_heading=\"Test agent subheading\""
                                },
                                {
                                    "type": "Argument",
                                    "name": "runs",
                                    "range": [
                                        2114,
                                        2116
                                    ],
                                    "children": [],
                                    "content": "description=\"Test agent description\""
                                },
                                {
                                    "type": "Argument",
                                    "name": "rating",
                                    "range": [
                                        2119,
                                        2123
                                    ],
                                    "children": [],
                                    "content": "categories=[\"category1\","
                                },
                                {
                                    "type": "Argument",
                                    "name": "versions",
                                    "range": [
                                        2126,
                                        2132
                                    ],
                                    "children": [],
                                    "content": ",\nruns=100,\n"
                                },
                                {
                                    "type": "Argument",
                                    "name": "last_updated",
                                    "range": [
                                        2135,
                                        2143
                                    ],
                                    "children": [],
                                    "content": "4.5,\nversions=[\"1.0.0\""
                                }
                            ],
                            "content": "\ndef test_get_agent_details(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentDetails(\nstore_listing_version_id=\"test-version-id\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=\"video.mp4\",\nagent_image=[\"image1.jpg\",\"image2.jpg\"],\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Test agent subheading\",\ndescription=\"Test agent description\",\ncategories=[\"category1\",\"category2\"],\nruns=100,\nrating=4.5,\nversions=[\"1.0.0\",\"1.1.0\"]"
                        }
                    ],
                    "content": "\n\n\ndef test_get_agent_details(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentDetails(\nstore_listing_version_id=\"test-version-id\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=\"video.mp4\",\nagent_image=[\"image1.jpg\",\"image2.jpg\"],\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Test agent subheading\",\ndescription=\"Test agent description\",\ncategories=[\"category1\",\"category2\"],\nruns=100,\nrating=4.5,\nversions=[\"1.0.0\",\"1.1.0\"]"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "mock_db_call",
                    "range": [
                        2148,
                        2162
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "patch",
                            "range": [
                                2150,
                                2155
                            ],
                            "children": [],
                            "content": "=datetime.datetime.now"
                        }
                    ],
                    "content": "\nlast_updated=datetime.datetime.now(),\n)\nmock_db_call"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "response",
                    "range": [
                        2164,
                        2172
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "get",
                            "range": [
                                2166,
                                2171
                            ],
                            "children": [],
                            "content": "patch(\"backend.server.v2.store.db.get_store_agent_details\")\nmock_db_call"
                        }
                    ],
                    "content": "mocker.patch(\"backend.server.v2.store.db.get_store_agent_details\")\nmock_db_call."
                },
                {
                    "type": "Assertion",
                    "name": "response.status_code",
                    "range": [
                        2173,
                        2180
                    ],
                    "children": [],
                    "content": "return_value=mocked_value\n\nresponse=client"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "data",
                    "range": [
                        2182,
                        2206
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "model_validate",
                            "range": [
                                2184,
                                2205
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "json",
                                    "range": [
                                        2199,
                                        2203
                                    ],
                                    "children": [],
                                    "content": ".server.v2."
                                }
                            ],
                            "content": "\"/agents/creator1/test-agent\")\nassert response.status_code==200\n\ndata=backend.server.v2.store."
                        }
                    ],
                    "content": "get(\"/agents/creator1/test-agent\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model"
                },
                {
                    "type": "Assertion",
                    "name": "data.agent_name",
                    "range": [
                        2207,
                        2214
                    ],
                    "children": [],
                    "content": ".StoreAgentDetails.model_validate(\nresponse."
                },
                {
                    "type": "Assertion",
                    "name": "data.creator",
                    "range": [
                        2215,
                        2222
                    ],
                    "children": [],
                    "content": "json()\n)\nassert data"
                },
                {
                    "type": "CallExpression",
                    "name": "assert_called_once_with",
                    "range": [
                        2223,
                        2234
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "username",
                            "range": [
                                2227,
                                2229
                            ],
                            "children": [],
                            "content": "\"Test Agent\"\nassert"
                        },
                        {
                            "type": "Argument",
                            "name": "agent_name",
                            "range": [
                                2231,
                                2233
                            ],
                            "children": [],
                            "content": ".creator="
                        }
                    ],
                    "content": ".agent_name==\"Test Agent\"\nassert data.creator=="
                }
            ],
            "content": ".patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.assert_not_called()\n\n\ndef test_get_agent_details(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentDetails(\nstore_listing_version_id=\"test-version-id\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=\"video.mp4\",\nagent_image=[\"image1.jpg\",\"image2.jpg\"],\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Test agent subheading\",\ndescription=\"Test agent description\",\ncategories=[\"category1\",\"category2\"],\nruns=100,\nrating=4.5,\nversions=[\"1.0.0\",\"1.1.0\"],\nlast_updated=datetime.datetime.now(),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agent_details\")\nmock_db_call.return_value=mocked_value\n\nresponse=client.get(\"/agents/creator1/test-agent\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.StoreAgentDetails.model_validate(\nresponse.json()\n)\nassert data.agent_name==\"Test Agent\"\nassert data.creator==\"creator1\"\nmock_db_call"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_creators_defaults",
            "range": [
                2238,
                2414
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        2241,
                        2245
                    ],
                    "children": [],
                    "content": "username=\"creator1\",agent_name"
                },
                {
                    "type": "BlockStatement",
                    "name": "FunctionBody",
                    "range": [
                        2248,
                        2414
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "mocked_value",
                            "range": [
                                2249,
                                2308
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        2250,
                                        2308
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "CreatorsResponse",
                                            "range": [
                                                2251,
                                                2308
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "creators",
                                                    "range": [
                                                        2264,
                                                        2267
                                                    ],
                                                    "children": [],
                                                    "content": "=backend.server"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "pagination",
                                                    "range": [
                                                        2270,
                                                        2305
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "NewExpression",
                                                            "name": "Pagination",
                                                            "range": [
                                                                2272,
                                                                2305
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Property",
                                                                    "name": "current_page",
                                                                    "range": [
                                                                        2285,
                                                                        2287
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=backend."
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "total_items",
                                                                    "range": [
                                                                        2290,
                                                                        2292
                                                                    ],
                                                                    "children": [],
                                                                    "content": "v2.store"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "total_pages",
                                                                    "range": [
                                                                        2295,
                                                                        2297
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".Pagination("
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "page_size",
                                                                    "range": [
                                                                        2300,
                                                                        2302
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=0,"
                                                                }
                                                            ],
                                                            "content": ".model.CreatorsResponse(\ncreators=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items="
                                                        }
                                                    ],
                                                    "content": ".store.model.CreatorsResponse(\ncreators=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items="
                                                }
                                            ],
                                            "content": "\ndef test_get_creators_defaults(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.CreatorsResponse(\ncreators=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\n"
                                        }
                                    ],
                                    "content": "\n\ndef test_get_creators_defaults(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.CreatorsResponse(\ncreators=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\n"
                                }
                            ],
                            "content": "\n\n\ndef test_get_creators_defaults(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.CreatorsResponse(\ncreators=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_db_call",
                            "range": [
                                2310,
                                2324
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        2311,
                                        2324
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "patch",
                                            "range": [
                                                2312,
                                                2317
                                            ],
                                            "children": [],
                                            "content": ",\npage_size=10,"
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "=",
                                            "range": [
                                                2322,
                                                2324
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "mocked_value",
                                                    "range": [
                                                        2323,
                                                        2324
                                                    ],
                                                    "children": [],
                                                    "content": "\nmock_db_call"
                                                }
                                            ],
                                            "content": ")\nmock_db_call"
                                        }
                                    ],
                                    "content": "0,\npage_size=10,\n),\n)\nmock_db_call"
                                }
                            ],
                            "content": "=0,\npage_size=10,\n),\n)\nmock_db_call"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "response",
                            "range": [
                                2326,
                                2334
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        2327,
                                        2334
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get",
                                            "range": [
                                                2328,
                                                2333
                                            ],
                                            "children": [],
                                            "content": "patch(\"backend.server.v2.store.db.get_store_creators\")\nmock_db_call"
                                        }
                                    ],
                                    "content": ".patch(\"backend.server.v2.store.db.get_store_creators\")\nmock_db_call."
                                }
                            ],
                            "content": "mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\nmock_db_call."
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert",
                            "range": [
                                2335,
                                2342
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        2339,
                                        2341
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "status_code",
                                            "range": [
                                                2337,
                                                2338
                                            ],
                                            "children": [],
                                            "content": "mocked_value\n"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "200",
                                            "range": [
                                                2341,
                                                2341
                                            ],
                                            "children": [],
                                            "content": "="
                                        }
                                    ],
                                    "content": "\nresponse="
                                }
                            ],
                            "content": "return_value=mocked_value\n\nresponse=client"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "data",
                            "range": [
                                2344,
                                2368
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        2345,
                                        2368
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "model_validate",
                                            "range": [
                                                2358,
                                                2367
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "json",
                                                    "range": [
                                                        2363,
                                                        2365
                                                    ],
                                                    "children": [],
                                                    "content": ".v2."
                                                }
                                            ],
                                            "content": "data=backend.server.v2.store."
                                        }
                                    ],
                                    "content": "(\"/creators\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model"
                                }
                            ],
                            "content": "get(\"/creators\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert",
                            "range": [
                                2369,
                                2378
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        2375,
                                        2377
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "total_pages",
                                            "range": [
                                                2373,
                                                2374
                                            ],
                                            "children": [],
                                            "content": "(\n"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "0",
                                            "range": [
                                                2377,
                                                2377
                                            ],
                                            "children": [],
                                            "content": "json"
                                        }
                                    ],
                                    "content": "response.json"
                                }
                            ],
                            "content": ".CreatorsResponse.model_validate(\nresponse.json("
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert",
                            "range": [
                                2379,
                                2387
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        2383,
                                        2385
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "creators",
                                            "range": [
                                                2381,
                                                2382
                                            ],
                                            "children": [],
                                            "content": ")\n"
                                        },
                                        {
                                            "type": "ArrayExpression",
                                            "name": "[]",
                                            "range": [
                                                2385,
                                                2386
                                            ],
                                            "children": [],
                                            "content": ".pagination"
                                        }
                                    ],
                                    "content": "assert data."
                                }
                            ],
                            "content": ")\n)\nassert data.pagination."
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_db_call",
                            "range": [
                                2388,
                                2413
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert_called_once_with",
                                    "range": [
                                        2390,
                                        2413
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "featured",
                                            "range": [
                                                2393,
                                                2395
                                            ],
                                            "children": [],
                                            "content": "assert data."
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "search_query",
                                            "range": [
                                                2397,
                                                2399
                                            ],
                                            "children": [],
                                            "content": "==["
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "sorted_by",
                                            "range": [
                                                2401,
                                                2403
                                            ],
                                            "children": [],
                                            "content": "\nmock_db_call."
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "page",
                                            "range": [
                                                2405,
                                                2407
                                            ],
                                            "children": [],
                                            "content": "(\nfeatured"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "page_size",
                                            "range": [
                                                2409,
                                                2411
                                            ],
                                            "children": [],
                                            "content": "False,search_query"
                                        }
                                    ],
                                    "content": "=0\nassert data.creators==[]\nmock_db_call.assert_called_once_with(\nfeatured=False,search_query=None"
                                }
                            ],
                            "content": "total_pages==0\nassert data.creators==[]\nmock_db_call.assert_called_once_with(\nfeatured=False,search_query=None"
                        }
                    ],
                    "content": ")\n\n\ndef test_get_creators_defaults(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.CreatorsResponse(\ncreators=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\ntotal_pages=0,\npage_size=10,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\nmock_db_call.return_value=mocked_value\n\nresponse=client.get(\"/creators\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.CreatorsResponse.model_validate(\nresponse.json()\n)\nassert data.pagination.total_pages==0\nassert data.creators==[]\nmock_db_call.assert_called_once_with(\nfeatured=False,search_query=None,"
                }
            ],
            "content": ".assert_called_once_with(username=\"creator1\",agent_name=\"test-agent\")\n\n\ndef test_get_creators_defaults(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.CreatorsResponse(\ncreators=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\ntotal_pages=0,\npage_size=10,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\nmock_db_call.return_value=mocked_value\n\nresponse=client.get(\"/creators\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.CreatorsResponse.model_validate(\nresponse.json()\n)\nassert data.pagination.total_pages==0\nassert data.creators==[]\nmock_db_call.assert_called_once_with(\nfeatured=False,search_query=None,"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_creators_pagination",
            "range": [
                2417,
                2677
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        2420,
                        2424
                    ],
                    "children": [],
                    "content": "=1,page_size="
                },
                {
                    "type": "AssignmentExpression",
                    "name": "mocked_value",
                    "range": [
                        2428,
                        2557
                    ],
                    "children": [
                        {
                            "type": "NewExpression",
                            "name": "CreatorsResponse",
                            "range": [
                                2430,
                                2557
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "creators",
                                    "range": [
                                        2443,
                                        2516
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "Creator",
                                            "range": [
                                                2447,
                                                2506
                                            ],
                                            "children": [
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "name",
                                                    "range": [
                                                        2460,
                                                        2463
                                                    ],
                                                    "children": [],
                                                    "content": "\nbackend.server"
                                                },
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "username",
                                                    "range": [
                                                        2466,
                                                        2469
                                                    ],
                                                    "children": [],
                                                    "content": ".store.model"
                                                },
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "description",
                                                    "range": [
                                                        2472,
                                                        2475
                                                    ],
                                                    "children": [],
                                                    "content": "(\nname="
                                                },
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "avatar_url",
                                                    "range": [
                                                        2478,
                                                        2481
                                                    ],
                                                    "children": [],
                                                    "content": ",\nusername="
                                                },
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "num_agents",
                                                    "range": [
                                                        2484,
                                                        2486
                                                    ],
                                                    "children": [],
                                                    "content": ",\ndescription"
                                                },
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "agent_rating",
                                                    "range": [
                                                        2489,
                                                        2493
                                                    ],
                                                    "children": [],
                                                    "content": "\"Creator {i} description\",\navatar_url="
                                                },
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "agent_runs",
                                                    "range": [
                                                        2496,
                                                        2498
                                                    ],
                                                    "children": [],
                                                    "content": ",\nnum_agents"
                                                },
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "is_featured",
                                                    "range": [
                                                        2501,
                                                        2503
                                                    ],
                                                    "children": [],
                                                    "content": ",\nagent_rating"
                                                }
                                            ],
                                            "content": ".v2.store.model.CreatorsResponse(\ncreators=[\nbackend.server.v2.store.model.Creator(\nname=f \"Creator {i}\",\nusername=f \"creator{i}\",\ndescription=f \"Creator {i} description\",\navatar_url=f \"avatar{i}.jpg\",\nnum_agents=1,\nagent_rating=4."
                                        }
                                    ],
                                    "content": "=backend.server.v2.store.model.CreatorsResponse(\ncreators=[\nbackend.server.v2.store.model.Creator(\nname=f \"Creator {i}\",\nusername=f \"creator{i}\",\ndescription=f \"Creator {i} description\",\navatar_url=f \"avatar{i}.jpg\",\nnum_agents=1,\nagent_rating=4.5,\nagent_runs=100,\nis_featured="
                                },
                                {
                                    "type": "NewExpression",
                                    "name": "Pagination",
                                    "range": [
                                        2519,
                                        2554
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "current_page",
                                            "range": [
                                                2534,
                                                2536
                                            ],
                                            "children": [],
                                            "content": "=backend."
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "total_items",
                                            "range": [
                                                2539,
                                                2541
                                            ],
                                            "children": [],
                                            "content": "v2.store"
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "total_pages",
                                            "range": [
                                                2544,
                                                2546
                                            ],
                                            "children": [],
                                            "content": ".Pagination("
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "page_size",
                                            "range": [
                                                2549,
                                                2551
                                            ],
                                            "children": [],
                                            "content": "=2,"
                                        }
                                    ],
                                    "content": "\n)\nfor i in range(5)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items="
                                }
                            ],
                            "content": "\ndef test_get_creators_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.CreatorsResponse(\ncreators=[\nbackend.server.v2.store.model.Creator(\nname=f \"Creator {i}\",\nusername=f \"creator{i}\",\ndescription=f \"Creator {i} description\",\navatar_url=f \"avatar{i}.jpg\",\nnum_agents=1,\nagent_rating=4.5,\nagent_runs=100,\nis_featured=False,\n)\nfor i in range(5)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=15,\n"
                        }
                    ],
                    "content": "\n\n\ndef test_get_creators_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.CreatorsResponse(\ncreators=[\nbackend.server.v2.store.model.Creator(\nname=f \"Creator {i}\",\nusername=f \"creator{i}\",\ndescription=f \"Creator {i} description\",\navatar_url=f \"avatar{i}.jpg\",\nnum_agents=1,\nagent_rating=4.5,\nagent_runs=100,\nis_featured=False,\n)\nfor i in range(5)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=15,\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "mock_db_call",
                    "range": [
                        2559,
                        2573
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "patch",
                            "range": [
                                2561,
                                2566
                            ],
                            "children": [],
                            "content": ",\npage_size=5,"
                        }
                    ],
                    "content": "=3,\npage_size=5,\n),\n)\nmock_db_call"
                },
                {
                    "type": "CallExpression",
                    "name": "get",
                    "range": [
                        2575,
                        2582
                    ],
                    "children": [],
                    "content": "mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\nmock_db_call"
                },
                {
                    "type": "AssertStatement",
                    "name": "response.status_code",
                    "range": [
                        2584,
                        2590
                    ],
                    "children": [],
                    "content": "return_value=mocked_value\n\nresponse="
                },
                {
                    "type": "AssignmentExpression",
                    "name": "data",
                    "range": [
                        2593,
                        2616
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "model_validate",
                            "range": [
                                2605,
                                2615
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "json",
                                    "range": [
                                        2610,
                                        2614
                                    ],
                                    "children": [],
                                    "content": ".server.v2."
                                }
                            ],
                            "content": "\n\ndata=backend.server.v2.store"
                        }
                    ],
                    "content": "get(\"/creators?page=2&page_size=5\")\nassert response.status_code==200\n\ndata=backend.server.v2.store."
                },
                {
                    "type": "AssertStatement",
                    "name": "len(data.creators)",
                    "range": [
                        2618,
                        2627
                    ],
                    "children": [],
                    "content": ".CreatorsResponse.model_validate(\nresponse.json("
                },
                {
                    "type": "AssertStatement",
                    "name": "data.pagination.current_page",
                    "range": [
                        2629,
                        2637
                    ],
                    "children": [],
                    "content": "\n)\nassert len(data.creators"
                },
                {
                    "type": "AssertStatement",
                    "name": "data.pagination.page_size",
                    "range": [
                        2639,
                        2647
                    ],
                    "children": [],
                    "content": "==5\nassert data.pagination."
                },
                {
                    "type": "CallExpression",
                    "name": "assert_called_once_with",
                    "range": [
                        2649,
                        2674
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "featured",
                            "range": [
                                2654,
                                2656
                            ],
                            "children": [],
                            "content": "data.pagination"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "search_query",
                            "range": [
                                2658,
                                2660
                            ],
                            "children": [],
                            "content": "page_size=="
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "sorted_by",
                            "range": [
                                2662,
                                2664
                            ],
                            "children": [],
                            "content": "\nmock_db_call."
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "page",
                            "range": [
                                2666,
                                2668
                            ],
                            "children": [],
                            "content": "(\nfeatured"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "page_size",
                            "range": [
                                2670,
                                2672
                            ],
                            "children": [],
                            "content": "False,search_query"
                        }
                    ],
                    "content": "==2\nassert data.pagination.page_size==5\nmock_db_call.assert_called_once_with(\nfeatured=False,search_query=None"
                }
            ],
            "content": "None,page=1,page_size=20\n)\n\n\ndef test_get_creators_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.CreatorsResponse(\ncreators=[\nbackend.server.v2.store.model.Creator(\nname=f \"Creator {i}\",\nusername=f \"creator{i}\",\ndescription=f \"Creator {i} description\",\navatar_url=f \"avatar{i}.jpg\",\nnum_agents=1,\nagent_rating=4.5,\nagent_runs=100,\nis_featured=False,\n)\nfor i in range(5)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=15,\ntotal_pages=3,\npage_size=5,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\nmock_db_call.return_value=mocked_value\n\nresponse=client.get(\"/creators?page=2&page_size=5\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.CreatorsResponse.model_validate(\nresponse.json()\n)\nassert len(data.creators)==5\nassert data.pagination.current_page==2\nassert data.pagination.page_size==5\nmock_db_call.assert_called_once_with(\nfeatured=False,search_query=None,sorted_by="
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_creators_malformed_request",
            "range": [
                2678,
                2789
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        2681,
                        2685
                    ],
                    "children": [],
                    "content": "=2,page_size="
                },
                {
                    "type": "Comment",
                    "name": "# Test with invalid page number",
                    "range": [
                        2689,
                        2695
                    ],
                    "children": [],
                    "content": "\n\n\ndef test_get_creators_malformed_request(mocker"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "response = client.get",
                    "range": [
                        2696,
                        2703
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "client.get",
                            "range": [
                                2696,
                                2703
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"/creators?page=-1\"",
                                    "range": [
                                        2702,
                                        2702
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": ":pytest_mock.MockFixture):\n#"
                        }
                    ],
                    "content": ":pytest_mock.MockFixture):\n#"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert response.status_code == 422",
                    "range": [
                        2705,
                        2712
                    ],
                    "children": [],
                    "content": "with invalid page number\nresponse=client"
                },
                {
                    "type": "Comment",
                    "name": "# Test with invalid page size",
                    "range": [
                        2714,
                        2720
                    ],
                    "children": [],
                    "content": "get(\"/creators?page=-1\")\nassert response"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "response = client.get",
                    "range": [
                        2721,
                        2728
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "client.get",
                            "range": [
                                2721,
                                2728
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"/creators?page_size=0\"",
                                    "range": [
                                        2727,
                                        2727
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": ".status_code==422\n\n#"
                        }
                    ],
                    "content": ".status_code==422\n\n#"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert response.status_code == 422",
                    "range": [
                        2730,
                        2737
                    ],
                    "children": [],
                    "content": "with invalid page size\nresponse=client"
                },
                {
                    "type": "Comment",
                    "name": "# Test with non-numeric values",
                    "range": [
                        2739,
                        2746
                    ],
                    "children": [],
                    "content": "get(\"/creators?page_size=0\")\nassert response."
                },
                {
                    "type": "ExpressionStatement",
                    "name": "response = client.get",
                    "range": [
                        2747,
                        2754
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "client.get",
                            "range": [
                                2747,
                                2754
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"/creators?page=abc&page_size=def\"",
                                    "range": [
                                        2753,
                                        2753
                                    ],
                                    "children": [],
                                    "content": "#"
                                }
                            ],
                            "content": "status_code==422\n\n#Test"
                        }
                    ],
                    "content": "status_code==422\n\n#Test"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert response.status_code == 422",
                    "range": [
                        2756,
                        2763
                    ],
                    "children": [],
                    "content": "non-numeric values\nresponse=client"
                },
                {
                    "type": "Comment",
                    "name": "# Verify no DB calls were made",
                    "range": [
                        2765,
                        2772
                    ],
                    "children": [],
                    "content": "get(\"/creators?page=abc&page_size=def\")\nassert response."
                },
                {
                    "type": "ExpressionStatement",
                    "name": "mock_db_call = mocker.patch",
                    "range": [
                        2773,
                        2780
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "mocker.patch",
                            "range": [
                                2773,
                                2780
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"backend.server.v2.store.db.get_store_creators\"",
                                    "range": [
                                        2779,
                                        2779
                                    ],
                                    "children": [],
                                    "content": "#"
                                }
                            ],
                            "content": "status_code==422\n\n#Verify"
                        }
                    ],
                    "content": "status_code==422\n\n#Verify"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "mock_db_call.assert_not_called",
                    "range": [
                        2782,
                        2787
                    ],
                    "children": [],
                    "content": "DB calls were made\nmock_db_call"
                }
            ],
            "content": "None,page=2,page_size=5\n)\n\n\ndef test_get_creators_malformed_request(mocker:pytest_mock.MockFixture):\n#Test with invalid page number\nresponse=client.get(\"/creators?page=-1\")\nassert response.status_code==422\n\n#Test with invalid page size\nresponse=client.get(\"/creators?page_size=0\")\nassert response.status_code==422\n\n#Test with non-numeric values\nresponse=client.get(\"/creators?page=abc&page_size=def\")\nassert response.status_code==422\n\n#Verify no DB calls were made\nmock_db_call=mocker"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_submissions_success",
            "range": [
                2952,
                3222
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        2955,
                        2959
                    ],
                    "children": [],
                    "content": "mock_db_call.assert_called_once_with(username"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "mocked_value",
                    "range": [
                        2963,
                        3109
                    ],
                    "children": [
                        {
                            "type": "NewExpression",
                            "name": "StoreSubmissionsResponse",
                            "range": [
                                2965,
                                3109
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "submissions",
                                    "range": [
                                        2978,
                                        3068
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "StoreSubmission",
                                            "range": [
                                                2982,
                                                3066
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "name",
                                                    "range": [
                                                        2995,
                                                        2997
                                                    ],
                                                    "children": [],
                                                    "content": "\nbackend."
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "description",
                                                    "range": [
                                                        3000,
                                                        3002
                                                    ],
                                                    "children": [],
                                                    "content": "v2.store"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "image_urls",
                                                    "range": [
                                                        3005,
                                                        3009
                                                    ],
                                                    "children": [],
                                                    "content": ".StoreSubmission(\nname"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "date_submitted",
                                                    "range": [
                                                        3012,
                                                        3021
                                                    ],
                                                    "children": [],
                                                    "content": ",\ndescription=\"Test agent description\",\nimage_urls=["
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "status",
                                                    "range": [
                                                        3023,
                                                        3032
                                                    ],
                                                    "children": [],
                                                    "content": "],\ndate_submitted=datetime.datetime.now"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "runs",
                                                    "range": [
                                                        3034,
                                                        3036
                                                    ],
                                                    "children": [],
                                                    "content": "),\n"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "rating",
                                                    "range": [
                                                        3039,
                                                        3044
                                                    ],
                                                    "children": [],
                                                    "content": "prisma.enums.SubmissionStatus."
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "agent_id",
                                                    "range": [
                                                        3046,
                                                        3048
                                                    ],
                                                    "children": [],
                                                    "content": ",\nruns"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "agent_version",
                                                    "range": [
                                                        3051,
                                                        3053
                                                    ],
                                                    "children": [],
                                                    "content": ",\nrating"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "sub_heading",
                                                    "range": [
                                                        3056,
                                                        3058
                                                    ],
                                                    "children": [],
                                                    "content": ".2,"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "slug",
                                                    "range": [
                                                        3061,
                                                        3063
                                                    ],
                                                    "children": [],
                                                    "content": "=\"test-agent-id\","
                                                }
                                            ],
                                            "content": ".v2.store.model.StoreSubmissionsResponse(\nsubmissions=[\nbackend.server.v2.store.model.StoreSubmission(\nname=\"Test Agent\",\ndescription=\"Test agent description\",\nimage_urls=[\"test.jpg\"],\ndate_submitted=datetime.datetime.now(),\nstatus=prisma.enums.SubmissionStatus.APPROVED,\nruns=50,\nrating=4.2,\nagent_id=\"test-agent-id\",\nagent_version="
                                        }
                                    ],
                                    "content": "=backend.server.v2.store.model.StoreSubmissionsResponse(\nsubmissions=[\nbackend.server.v2.store.model.StoreSubmission(\nname=\"Test Agent\",\ndescription=\"Test agent description\",\nimage_urls=[\"test.jpg\"],\ndate_submitted=datetime.datetime.now(),\nstatus=prisma.enums.SubmissionStatus.APPROVED,\nruns=50,\nrating=4.2,\nagent_id=\"test-agent-id\",\nagent_version=1,"
                                },
                                {
                                    "type": "NewExpression",
                                    "name": "Pagination",
                                    "range": [
                                        3071,
                                        3106
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "current_page",
                                            "range": [
                                                3086,
                                                3088
                                            ],
                                            "children": [],
                                            "content": "=backend."
                                        },
                                        {
                                            "type": "Property",
                                            "name": "total_items",
                                            "range": [
                                                3091,
                                                3093
                                            ],
                                            "children": [],
                                            "content": "v2.store"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "total_pages",
                                            "range": [
                                                3096,
                                                3098
                                            ],
                                            "children": [],
                                            "content": ".Pagination("
                                        },
                                        {
                                            "type": "Property",
                                            "name": "page_size",
                                            "range": [
                                                3101,
                                                3103
                                            ],
                                            "children": [],
                                            "content": "=1,"
                                        }
                                    ],
                                    "content": "=\"Test agent subheading\",\nslug=\"test-agent\",\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items="
                                }
                            ],
                            "content": "\ndef test_get_submissions_success(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreSubmissionsResponse(\nsubmissions=[\nbackend.server.v2.store.model.StoreSubmission(\nname=\"Test Agent\",\ndescription=\"Test agent description\",\nimage_urls=[\"test.jpg\"],\ndate_submitted=datetime.datetime.now(),\nstatus=prisma.enums.SubmissionStatus.APPROVED,\nruns=50,\nrating=4.2,\nagent_id=\"test-agent-id\",\nagent_version=1,\nsub_heading=\"Test agent subheading\",\nslug=\"test-agent\",\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\n"
                        }
                    ],
                    "content": "\n\n\ndef test_get_submissions_success(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreSubmissionsResponse(\nsubmissions=[\nbackend.server.v2.store.model.StoreSubmission(\nname=\"Test Agent\",\ndescription=\"Test agent description\",\nimage_urls=[\"test.jpg\"],\ndate_submitted=datetime.datetime.now(),\nstatus=prisma.enums.SubmissionStatus.APPROVED,\nruns=50,\nrating=4.2,\nagent_id=\"test-agent-id\",\nagent_version=1,\nsub_heading=\"Test agent subheading\",\nslug=\"test-agent\",\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "mock_db_call",
                    "range": [
                        3111,
                        3125
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "patch",
                            "range": [
                                3113,
                                3118
                            ],
                            "children": [],
                            "content": ",\npage_size=20,"
                        }
                    ],
                    "content": "=1,\npage_size=20,\n),\n)\nmock_db_call"
                },
                {
                    "type": "CallExpression",
                    "name": "get",
                    "range": [
                        3127,
                        3135
                    ],
                    "children": [],
                    "content": "mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\nmock_db_call."
                },
                {
                    "type": "AssertStatement",
                    "name": "status_code",
                    "range": [
                        3136,
                        3143
                    ],
                    "children": [],
                    "content": "return_value=mocked_value\n\nresponse=client"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "data",
                    "range": [
                        3145,
                        3169
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "model_validate",
                            "range": [
                                3157,
                                3168
                            ],
                            "children": [],
                            "content": "\n\ndata=backend.server.v2.store."
                        }
                    ],
                    "content": "get(\"/submissions\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model"
                },
                {
                    "type": "AssertStatement",
                    "name": "len",
                    "range": [
                        3170,
                        3180
                    ],
                    "children": [],
                    "content": ".StoreSubmissionsResponse.model_validate(\nresponse.json()"
                },
                {
                    "type": "AssertStatement",
                    "name": "name",
                    "range": [
                        3181,
                        3193
                    ],
                    "children": [],
                    "content": "\n)\nassert len(data.submissions)==1"
                },
                {
                    "type": "AssertStatement",
                    "name": "current_page",
                    "range": [
                        3194,
                        3203
                    ],
                    "children": [],
                    "content": "\nassert data.submissions[0].name"
                },
                {
                    "type": "CallExpression",
                    "name": "assert_called_once_with",
                    "range": [
                        3204,
                        3219
                    ],
                    "children": [],
                    "content": "==\"Test Agent\"\nassert data.pagination.current_page==1\nmock_db_call."
                }
            ],
            "content": "=\"Test User\"\nmock_db_call.assert_called_once_with(username=\"creator1\")\n\n\ndef test_get_submissions_success(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreSubmissionsResponse(\nsubmissions=[\nbackend.server.v2.store.model.StoreSubmission(\nname=\"Test Agent\",\ndescription=\"Test agent description\",\nimage_urls=[\"test.jpg\"],\ndate_submitted=datetime.datetime.now(),\nstatus=prisma.enums.SubmissionStatus.APPROVED,\nruns=50,\nrating=4.2,\nagent_id=\"test-agent-id\",\nagent_version=1,\nsub_heading=\"Test agent subheading\",\nslug=\"test-agent\",\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\nmock_db_call.return_value=mocked_value\n\nresponse=client.get(\"/submissions\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\nresponse.json()\n)\nassert len(data.submissions)==1\nassert data.submissions[0].name==\"Test Agent\"\nassert data.pagination.current_page==1\nmock_db_call.assert_called_once_with(user_id"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_submissions_pagination",
            "range": [
                3223,
                3392
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        3226,
                        3230
                    ],
                    "children": [],
                    "content": "page=1,page_size"
                },
                {
                    "type": "BlockStatement",
                    "name": "FunctionBody",
                    "range": [
                        3233,
                        3392
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "mocked_value",
                            "range": [
                                3234,
                                3293
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        3235,
                                        3293
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "StoreSubmissionsResponse",
                                            "range": [
                                                3236,
                                                3293
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "submissions",
                                                    "range": [
                                                        3249,
                                                        3252
                                                    ],
                                                    "children": [],
                                                    "content": "=backend.server"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "pagination",
                                                    "range": [
                                                        3255,
                                                        3290
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "NewExpression",
                                                            "name": "Pagination",
                                                            "range": [
                                                                3257,
                                                                3290
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Property",
                                                                    "name": "current_page",
                                                                    "range": [
                                                                        3270,
                                                                        3272
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=backend."
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "total_items",
                                                                    "range": [
                                                                        3275,
                                                                        3277
                                                                    ],
                                                                    "children": [],
                                                                    "content": "v2.store"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "total_pages",
                                                                    "range": [
                                                                        3280,
                                                                        3282
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".Pagination("
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "page_size",
                                                                    "range": [
                                                                        3285,
                                                                        3287
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=2,"
                                                                }
                                                            ],
                                                            "content": ".model.StoreSubmissionsResponse(\nsubmissions=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items="
                                                        }
                                                    ],
                                                    "content": ".store.model.StoreSubmissionsResponse(\nsubmissions=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items="
                                                }
                                            ],
                                            "content": "\ndef test_get_submissions_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreSubmissionsResponse(\nsubmissions=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=10,\n"
                                        }
                                    ],
                                    "content": "\n\ndef test_get_submissions_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreSubmissionsResponse(\nsubmissions=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=10,\n"
                                }
                            ],
                            "content": "\n\n\ndef test_get_submissions_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreSubmissionsResponse(\nsubmissions=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=10,\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_db_call",
                            "range": [
                                3295,
                                3309
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        3296,
                                        3309
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "patch",
                                            "range": [
                                                3297,
                                                3302
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "\"backend.server.v2.store.db.get_store_submissions\"",
                                                    "range": [
                                                        3301,
                                                        3301
                                                    ],
                                                    "children": [],
                                                    "content": "5"
                                                }
                                            ],
                                            "content": ",\npage_size=5,"
                                        }
                                    ],
                                    "content": "2,\npage_size=5,\n),\n)\nmock_db_call"
                                }
                            ],
                            "content": "=2,\npage_size=5,\n),\n)\nmock_db_call"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                3304,
                                3309
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "return_value",
                                    "range": [
                                        3305,
                                        3306
                                    ],
                                    "children": [],
                                    "content": ",\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "mocked_value",
                                    "range": [
                                        3308,
                                        3308
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "),\n)\nmock_db_call"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "response",
                            "range": [
                                3311,
                                3327
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        3312,
                                        3327
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get",
                                            "range": [
                                                3313,
                                                3318
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "\"/submissions?page=2&page_size=5\"",
                                                    "range": [
                                                        3317,
                                                        3317
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": "patch(\"backend.server.v2.store.db.get_store_submissions\")\nmock_db_call"
                                        }
                                    ],
                                    "content": ".patch(\"backend.server.v2.store.db.get_store_submissions\")\nmock_db_call.return_value=mocked_value\n\nresponse=client"
                                }
                            ],
                            "content": "mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\nmock_db_call.return_value=mocked_value\n\nresponse=client"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert",
                            "range": [
                                3320,
                                3327
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        3324,
                                        3326
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "status_code",
                                            "range": [
                                                3322,
                                                3323
                                            ],
                                            "children": [],
                                            "content": "mocked_value\n"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "200",
                                            "range": [
                                                3326,
                                                3326
                                            ],
                                            "children": [],
                                            "content": "="
                                        }
                                    ],
                                    "content": "\nresponse="
                                }
                            ],
                            "content": "return_value=mocked_value\n\nresponse=client"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "data",
                            "range": [
                                3329,
                                3353
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        3330,
                                        3353
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "model_validate",
                                            "range": [
                                                3331,
                                                3352
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "response.json()",
                                                    "range": [
                                                        3345,
                                                        3351
                                                    ],
                                                    "children": [],
                                                    "content": "backend.server.v2.store"
                                                }
                                            ],
                                            "content": "\"/submissions?page=2&page_size=5\")\nassert response.status_code==200\n\ndata=backend.server.v2.store."
                                        }
                                    ],
                                    "content": "(\"/submissions?page=2&page_size=5\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model"
                                }
                            ],
                            "content": "get(\"/submissions?page=2&page_size=5\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert",
                            "range": [
                                3354,
                                3363
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        3360,
                                        3362
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "current_page",
                                            "range": [
                                                3358,
                                                3359
                                            ],
                                            "children": [],
                                            "content": "(\n"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "2",
                                            "range": [
                                                3362,
                                                3362
                                            ],
                                            "children": [],
                                            "content": "json"
                                        }
                                    ],
                                    "content": "response.json"
                                }
                            ],
                            "content": ".StoreSubmissionsResponse.model_validate(\nresponse.json("
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert",
                            "range": [
                                3364,
                                3373
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        3370,
                                        3372
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "page_size",
                                            "range": [
                                                3368,
                                                3369
                                            ],
                                            "children": [],
                                            "content": "assert data"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "5",
                                            "range": [
                                                3372,
                                                3372
                                            ],
                                            "children": [],
                                            "content": "."
                                        }
                                    ],
                                    "content": ".pagination."
                                }
                            ],
                            "content": ")\n)\nassert data.pagination.current_page"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert_called_once_with",
                            "range": [
                                3374,
                                3389
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "user_id=\"test-user-id\"",
                                    "range": [
                                        3378,
                                        3380
                                    ],
                                    "children": [],
                                    "content": "assert data."
                                },
                                {
                                    "type": "Argument",
                                    "name": "page=2",
                                    "range": [
                                        3382,
                                        3384
                                    ],
                                    "children": [],
                                    "content": ".page_size="
                                },
                                {
                                    "type": "Argument",
                                    "name": "page_size=5",
                                    "range": [
                                        3386,
                                        3388
                                    ],
                                    "children": [],
                                    "content": "5\nmock_db_call"
                                }
                            ],
                            "content": "==2\nassert data.pagination.page_size==5\nmock_db_call."
                        }
                    ],
                    "content": ")\n\n\ndef test_get_submissions_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreSubmissionsResponse(\nsubmissions=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=10,\ntotal_pages=2,\npage_size=5,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\nmock_db_call.return_value=mocked_value\n\nresponse=client.get(\"/submissions?page=2&page_size=5\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\nresponse.json()\n)\nassert data.pagination.current_page==2\nassert data.pagination.page_size==5\nmock_db_call.assert_called_once_with(user_id"
                }
            ],
            "content": "=\"test-user-id\",page=1,page_size=20)\n\n\ndef test_get_submissions_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreSubmissionsResponse(\nsubmissions=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=10,\ntotal_pages=2,\npage_size=5,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\nmock_db_call.return_value=mocked_value\n\nresponse=client.get(\"/submissions?page=2&page_size=5\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\nresponse.json()\n)\nassert data.pagination.current_page==2\nassert data.pagination.page_size==5\nmock_db_call.assert_called_once_with(user_id"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_submissions_malformed_request",
            "range": [
                3393,
                3502
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        3396,
                        3400
                    ],
                    "children": [],
                    "content": "page=2,page_size"
                },
                {
                    "type": "Comment",
                    "name": "# Test with invalid page number",
                    "range": [
                        3404,
                        3410
                    ],
                    "children": [],
                    "content": "\n\n\ndef test_get_submissions_malformed_request(mocker"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "response = client.get",
                    "range": [
                        3411,
                        3418
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "client.get",
                            "range": [
                                3411,
                                3418
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"/submissions?page=-1\"",
                                    "range": [
                                        3417,
                                        3417
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": ":pytest_mock.MockFixture):\n#"
                        }
                    ],
                    "content": ":pytest_mock.MockFixture):\n#"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert response.status_code == 422",
                    "range": [
                        3420,
                        3427
                    ],
                    "children": [],
                    "content": "with invalid page number\nresponse=client"
                },
                {
                    "type": "Comment",
                    "name": "# Test with invalid page size",
                    "range": [
                        3429,
                        3435
                    ],
                    "children": [],
                    "content": "get(\"/submissions?page=-1\")\nassert response"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "response = client.get",
                    "range": [
                        3436,
                        3443
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "client.get",
                            "range": [
                                3436,
                                3443
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"/submissions?page_size=0\"",
                                    "range": [
                                        3442,
                                        3442
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": ".status_code==422\n\n#"
                        }
                    ],
                    "content": ".status_code==422\n\n#"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert response.status_code == 422",
                    "range": [
                        3445,
                        3452
                    ],
                    "children": [],
                    "content": "with invalid page size\nresponse=client"
                },
                {
                    "type": "Comment",
                    "name": "# Test with non-numeric values",
                    "range": [
                        3454,
                        3461
                    ],
                    "children": [],
                    "content": "get(\"/submissions?page_size=0\")\nassert response."
                },
                {
                    "type": "ExpressionStatement",
                    "name": "response = client.get",
                    "range": [
                        3462,
                        3469
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "client.get",
                            "range": [
                                3462,
                                3469
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"/submissions?page=abc&page_size=def\"",
                                    "range": [
                                        3468,
                                        3468
                                    ],
                                    "children": [],
                                    "content": "#"
                                }
                            ],
                            "content": "status_code==422\n\n#Test"
                        }
                    ],
                    "content": "status_code==422\n\n#Test"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert response.status_code == 422",
                    "range": [
                        3471,
                        3478
                    ],
                    "children": [],
                    "content": "non-numeric values\nresponse=client"
                },
                {
                    "type": "Comment",
                    "name": "# Verify no DB calls were made",
                    "range": [
                        3480,
                        3487
                    ],
                    "children": [],
                    "content": "get(\"/submissions?page=abc&page_size=def\")\nassert response."
                },
                {
                    "type": "ExpressionStatement",
                    "name": "mock_db_call = mocker.patch",
                    "range": [
                        3488,
                        3495
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "mocker.patch",
                            "range": [
                                3488,
                                3495
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"backend.server.v2.store.db.get_store_submissions\"",
                                    "range": [
                                        3494,
                                        3494
                                    ],
                                    "children": [],
                                    "content": "#"
                                }
                            ],
                            "content": "status_code==422\n\n#Verify"
                        }
                    ],
                    "content": "status_code==422\n\n#Verify"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "mock_db_call.assert_not_called",
                    "range": [
                        3497,
                        3502
                    ],
                    "children": [],
                    "content": "DB calls were made\nmock_db_call"
                }
            ],
            "content": "=\"test-user-id\",page=2,page_size=5)\n\n\ndef test_get_submissions_malformed_request(mocker:pytest_mock.MockFixture):\n#Test with invalid page number\nresponse=client.get(\"/submissions?page=-1\")\nassert response.status_code==422\n\n#Test with invalid page size\nresponse=client.get(\"/submissions?page_size=0\")\nassert response.status_code==422\n\n#Test with non-numeric values\nresponse=client.get(\"/submissions?page=abc&page_size=def\")\nassert response.status_code==422\n\n#Verify no DB calls were made\nmock_db_call"
        }
    ],
    "content": "import datetime\n\nimport autogpt_libs.auth.depends\nimport autogpt_libs.auth.middleware\nimport fastapi\nimport fastapi.testclient\nimport prisma.enums\nimport pytest_mock\n\nimport backend.server.v2.store.model\nimport backend.server.v2.store.routes\n\napp=fastapi.FastAPI()\napp.include_router(backend.server.v2.store.routes.router)\n\nclient=fastapi.testclient.TestClient(app)\n\n\ndef override_auth_middleware():\n\"\"\"Override auth middleware for testing\"\"\"\nreturn{\"sub\":\"test-user-id\"}\n\n\ndef override_get_user_id():\n\"\"\"Override get_user_id for testing\"\"\"\nreturn \"test-user-id\"\n\n\napp.dependency_overrides[autogpt_libs.auth.middleware.auth_middleware]=(\noverride_auth_middleware\n)\napp.dependency_overrides[autogpt_libs.auth.depends.get_user_id]=override_get_user_id\n\n\ndef test_get_agents_defaults(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\ntotal_pages=0,\npage_size=10,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert data.pagination.total_pages==0\nassert data.agents==[]\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=None,\npage=1,\npage_size=20,\n)\n\n\ndef test_get_agents_featured(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"featured-agent\",\nagent_name=\"Featured Agent\",\nagent_image=\"featured.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Featured agent subheading\",\ndescription=\"Featured agent description\",\nruns=100,\nrating=4.5,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?featured=true\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==1\nassert data.agents[0].slug==\"featured-agent\"\nmock_db_call.assert_called_once_with(\nfeatured=True,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=None,\npage=1,\npage_size=20,\n)\n\n\ndef test_get_agents_by_creator(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"creator-agent\",\nagent_name=\"Creator Agent\",\nagent_image=\"agent.jpg\",\ncreator=\"specific-creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Creator agent subheading\",\ndescription=\"Creator agent description\",\nruns=50,\nrating=4.0,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?creator=specific-creator\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==1\nassert data.agents[0].creator==\"specific-creator\"\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=\"specific-creator\",\nsorted_by=None,\nsearch_query=None,\ncategory=None,\npage=1,\npage_size=20,\n)\n\n\ndef test_get_agents_sorted(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"top-agent\",\nagent_name=\"Top Agent\",\nagent_image=\"top.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Top agent subheading\",\ndescription=\"Top agent description\",\nruns=1000,\nrating=5.0,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?sorted_by=runs\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==1\nassert data.agents[0].runs==1000\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=\"runs\",\nsearch_query=None,\ncategory=None,\npage=1,\npage_size=20,\n)\n\n\ndef test_get_agents_search(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"search-agent\",\nagent_name=\"Search Agent\",\nagent_image=\"search.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Search agent subheading\",\ndescription=\"Specific search term description\",\nruns=75,\nrating=4.2,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?search_query=specific\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==1\nassert \"specific\" in data.agents[0].description.lower()\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=\"specific\",\ncategory=None,\npage=1,\npage_size=20,\n)\n\n\ndef test_get_agents_category(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=\"category-agent\",\nagent_name=\"Category Agent\",\nagent_image=\"category.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Category agent subheading\",\ndescription=\"Category agent description\",\nruns=60,\nrating=4.1,\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?category=test-category\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==1\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=\"test-category\",\npage=1,\npage_size=20,\n)\n\n\ndef test_get_agents_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentsResponse(\nagents=[\nbackend.server.v2.store.model.StoreAgent(\nslug=f \"agent-{i}\",\nagent_name=f \"Agent {i}\",\nagent_image=f \"agent{i}.jpg\",\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=f \"Agent {i} subheading\",\ndescription=f \"Agent {i} description\",\nruns=i*10,\nrating=4.0,\n)\nfor i in range(5)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=15,\ntotal_pages=3,\npage_size=5,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value=mocked_value\nresponse=client.get(\"/agents?page=2&page_size=5\")\nassert response.status_code==200\ndata=backend.server.v2.store.model.StoreAgentsResponse.model_validate(\nresponse.json()\n)\nassert len(data.agents)==5\nassert data.pagination.current_page==2\nassert data.pagination.page_size==5\nmock_db_call.assert_called_once_with(\nfeatured=False,\ncreator=None,\nsorted_by=None,\nsearch_query=None,\ncategory=None,\npage=2,\npage_size=5,\n)\n\n\ndef test_get_agents_malformed_request(mocker:pytest_mock.MockFixture):\n#Test with invalid page number\nresponse=client.get(\"/agents?page=-1\")\nassert response.status_code==422\n\n#Test with invalid page size\nresponse=client.get(\"/agents?page_size=0\")\nassert response.status_code==422\n\n#Test with non-numeric values\nresponse=client.get(\"/agents?page=abc&page_size=def\")\nassert response.status_code==422\n\n#Verify no DB calls were made\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.assert_not_called()\n\n\ndef test_get_agent_details(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreAgentDetails(\nstore_listing_version_id=\"test-version-id\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=\"video.mp4\",\nagent_image=[\"image1.jpg\",\"image2.jpg\"],\ncreator=\"creator1\",\ncreator_avatar=\"avatar1.jpg\",\nsub_heading=\"Test agent subheading\",\ndescription=\"Test agent description\",\ncategories=[\"category1\",\"category2\"],\nruns=100,\nrating=4.5,\nversions=[\"1.0.0\",\"1.1.0\"],\nlast_updated=datetime.datetime.now(),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_agent_details\")\nmock_db_call.return_value=mocked_value\n\nresponse=client.get(\"/agents/creator1/test-agent\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.StoreAgentDetails.model_validate(\nresponse.json()\n)\nassert data.agent_name==\"Test Agent\"\nassert data.creator==\"creator1\"\nmock_db_call.assert_called_once_with(username=\"creator1\",agent_name=\"test-agent\")\n\n\ndef test_get_creators_defaults(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.CreatorsResponse(\ncreators=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=0,\ntotal_items=0,\ntotal_pages=0,\npage_size=10,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\nmock_db_call.return_value=mocked_value\n\nresponse=client.get(\"/creators\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.CreatorsResponse.model_validate(\nresponse.json()\n)\nassert data.pagination.total_pages==0\nassert data.creators==[]\nmock_db_call.assert_called_once_with(\nfeatured=False,search_query=None,sorted_by=None,page=1,page_size=20\n)\n\n\ndef test_get_creators_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.CreatorsResponse(\ncreators=[\nbackend.server.v2.store.model.Creator(\nname=f \"Creator {i}\",\nusername=f \"creator{i}\",\ndescription=f \"Creator {i} description\",\navatar_url=f \"avatar{i}.jpg\",\nnum_agents=1,\nagent_rating=4.5,\nagent_runs=100,\nis_featured=False,\n)\nfor i in range(5)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=15,\ntotal_pages=3,\npage_size=5,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\nmock_db_call.return_value=mocked_value\n\nresponse=client.get(\"/creators?page=2&page_size=5\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.CreatorsResponse.model_validate(\nresponse.json()\n)\nassert len(data.creators)==5\nassert data.pagination.current_page==2\nassert data.pagination.page_size==5\nmock_db_call.assert_called_once_with(\nfeatured=False,search_query=None,sorted_by=None,page=2,page_size=5\n)\n\n\ndef test_get_creators_malformed_request(mocker:pytest_mock.MockFixture):\n#Test with invalid page number\nresponse=client.get(\"/creators?page=-1\")\nassert response.status_code==422\n\n#Test with invalid page size\nresponse=client.get(\"/creators?page_size=0\")\nassert response.status_code==422\n\n#Test with non-numeric values\nresponse=client.get(\"/creators?page=abc&page_size=def\")\nassert response.status_code==422\n\n#Verify no DB calls were made\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\nmock_db_call.assert_not_called()\n\n\ndef test_get_creator_details(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.CreatorDetails(\nname=\"Test User\",\nusername=\"creator1\",\ndescription=\"Test creator description\",\nlinks=[\"link1.com\",\"link2.com\"],\navatar_url=\"avatar.jpg\",\nagent_rating=4.8,\nagent_runs=1000,\ntop_categories=[\"category1\",\"category2\"],\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_creator_details\")\nmock_db_call.return_value=mocked_value\n\nresponse=client.get(\"/creator/creator1\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.CreatorDetails.model_validate(response.json())\nassert data.username==\"creator1\"\nassert data.name==\"Test User\"\nmock_db_call.assert_called_once_with(username=\"creator1\")\n\n\ndef test_get_submissions_success(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreSubmissionsResponse(\nsubmissions=[\nbackend.server.v2.store.model.StoreSubmission(\nname=\"Test Agent\",\ndescription=\"Test agent description\",\nimage_urls=[\"test.jpg\"],\ndate_submitted=datetime.datetime.now(),\nstatus=prisma.enums.SubmissionStatus.APPROVED,\nruns=50,\nrating=4.2,\nagent_id=\"test-agent-id\",\nagent_version=1,\nsub_heading=\"Test agent subheading\",\nslug=\"test-agent\",\n)\n],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=1,\ntotal_items=1,\ntotal_pages=1,\npage_size=20,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\nmock_db_call.return_value=mocked_value\n\nresponse=client.get(\"/submissions\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\nresponse.json()\n)\nassert len(data.submissions)==1\nassert data.submissions[0].name==\"Test Agent\"\nassert data.pagination.current_page==1\nmock_db_call.assert_called_once_with(user_id=\"test-user-id\",page=1,page_size=20)\n\n\ndef test_get_submissions_pagination(mocker:pytest_mock.MockFixture):\nmocked_value=backend.server.v2.store.model.StoreSubmissionsResponse(\nsubmissions=[],\npagination=backend.server.v2.store.model.Pagination(\ncurrent_page=2,\ntotal_items=10,\ntotal_pages=2,\npage_size=5,\n),\n)\nmock_db_call=mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\nmock_db_call.return_value=mocked_value\n\nresponse=client.get(\"/submissions?page=2&page_size=5\")\nassert response.status_code==200\n\ndata=backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\nresponse.json()\n)\nassert data.pagination.current_page==2\nassert data.pagination.page_size==5\nmock_db_call.assert_called_once_with(user_id=\"test-user-id\",page=2,page_size=5)\n\n\ndef test_get_submissions_malformed_request(mocker:pytest_mock.MockFixture):\n#Test with invalid page number\nresponse=client.get(\"/submissions?page=-1\")\nassert response.status_code==422\n\n#Test with invalid page size\nresponse=client.get(\"/submissions?page_size=0\")\nassert response.status_code==422\n\n#Test with non-numeric values\nresponse=client.get(\"/submissions?page=abc&page_size=def\")\nassert response.status_code==422\n\n#Verify no DB calls were made\nmock_db_call"
}