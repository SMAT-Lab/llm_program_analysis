{
    "type": "Program",
    "name": "Global",
    "range": [
        104,
        322
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "server",
            "range": [
                114,
                132
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        114,
                        119
                    ],
                    "children": [],
                    "content": ")\nasync def server("
                },
                {
                    "type": "Identifier",
                    "name": "server",
                    "range": [
                        116,
                        122
                    ],
                    "children": [],
                    "content": "async def server():\n"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        120,
                        132
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                121,
                                128
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SpinTestServer",
                                    "range": [
                                        123,
                                        125
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "SpinTestServer",
                                            "range": [
                                                123,
                                                125
                                            ],
                                            "children": [],
                                            "content": "async with SpinTestServer"
                                        }
                                    ],
                                    "content": "async with SpinTestServer"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "server",
                                    "range": [
                                        127,
                                        128
                                    ],
                                    "children": [],
                                    "content": ")as"
                                }
                            ],
                            "content": ":\nasync with SpinTestServer()as"
                        },
                        {
                            "type": "YieldExpression",
                            "name": "",
                            "range": [
                                130,
                                132
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "server",
                                    "range": [
                                        131,
                                        132
                                    ],
                                    "children": [],
                                    "content": "\nyield"
                                }
                            ],
                            "content": ":\nyield"
                        }
                    ],
                    "content": "):\nasync with SpinTestServer()as server:\nyield"
                }
            ],
            "content": ")\nasync def server():\nasync with SpinTestServer()as server:\nyield"
        },
        {
            "type": "FunctionDecl",
            "name": "graph_cleanup",
            "range": [
                147,
                238
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "server",
                    "range": [
                        151,
                        152
                    ],
                    "children": [],
                    "content": "async def"
                },
                {
                    "type": "VariableDecl",
                    "name": "created_graph_ids",
                    "range": [
                        155,
                        158
                    ],
                    "children": [],
                    "content": "server):\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "original_create_graph",
                    "range": [
                        160,
                        167
                    ],
                    "children": [],
                    "content": "=[]\noriginal_create_graph=server."
                },
                {
                    "type": "FunctionDecl",
                    "name": "create_graph_wrapper",
                    "range": [
                        169,
                        238
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "*args",
                            "range": [
                                173,
                                174
                            ],
                            "children": [],
                            "content": "async def"
                        },
                        {
                            "type": "Parameter",
                            "name": "**kwargs",
                            "range": [
                                176,
                                178
                            ],
                            "children": [],
                            "content": "(*args"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "created_graph",
                            "range": [
                                182,
                                193
                            ],
                            "children": [],
                            "content": "kwargs):\ncreated_graph=await original_create_graph(*args,"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "user_id",
                            "range": [
                                200,
                                221
                            ],
                            "children": [],
                            "content": "Extract user_id correctly\nuser_id=kwargs.get(\"user_id\",args[2]if len(args)>"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "created_graph_ids.append",
                            "range": [
                                223,
                                234
                            ],
                            "children": [],
                            "content": "else None)\ncreated_graph_ids.append((created_graph.id"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                236,
                                237
                            ],
                            "children": [],
                            "content": "user_id)"
                        }
                    ],
                    "content": ".test_create_graph\n\nasync def create_graph_wrapper(*args,**kwargs):\ncreated_graph=await original_create_graph(*args,**kwargs)\n#Extract user_id correctly\nuser_id=kwargs.get(\"user_id\",args[2]if len(args)>2else None)\ncreated_graph_ids.append((created_graph.id,user_id))"
                }
            ],
            "content": "=True)\nasync def graph_cleanup(server):\ncreated_graph_ids=[]\noriginal_create_graph=server.agent_server.test_create_graph\n\nasync def create_graph_wrapper(*args,**kwargs):\ncreated_graph=await original_create_graph(*args,**kwargs)\n#Extract user_id correctly\nuser_id=kwargs.get(\"user_id\",args[2]if len(args)>2else None)\ncreated_graph_ids.append((created_graph.id,user_id))"
        },
        {
            "type": "TryStatement",
            "name": "",
            "range": [
                240,
                269
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        243,
                        249
                    ],
                    "children": [],
                    "content": "\ntry:\nserver.agent_server"
                },
                {
                    "type": "YieldExpression",
                    "name": "",
                    "range": [
                        251,
                        258
                    ],
                    "children": [],
                    "content": "test_create_graph=create_graph_wrapper\nyield#This runs"
                },
                {
                    "type": "FinallyStatement",
                    "name": "",
                    "range": [
                        259,
                        269
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "",
                            "range": [
                                262,
                                268
                            ],
                            "children": [],
                            "content": "\nfinally:\nserver.agent_server"
                        }
                    ],
                    "content": "the test function\nfinally:\nserver.agent_server."
                }
            ],
            "content": "return created_graph\n\ntry:\nserver.agent_server.test_create_graph=create_graph_wrapper\nyield#This runs the test function\nfinally:\nserver.agent_server."
        },
        {
            "type": "ForStatement",
            "name": "",
            "range": [
                282,
                322
            ],
            "children": [
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        290,
                        322
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "",
                            "range": [
                                294,
                                306
                            ],
                            "children": [],
                            "content": "if user_id:\nresp=await server.agent_server.test_delete_graph("
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "",
                            "range": [
                                308,
                                314
                            ],
                            "children": [],
                            "content": ",user_id)\nnum_deleted=resp"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "",
                            "range": [
                                315,
                                322
                            ],
                            "children": [],
                            "content": "[\"version_counts\"]\nassert num_deleted>0"
                        }
                    ],
                    "content": "in created_graph_ids:\nif user_id:\nresp=await server.agent_server.test_delete_graph(graph_id,user_id)\nnum_deleted=resp[\"version_counts\"]\nassert num_deleted>0"
                }
            ],
            "content": "they were deleted\nfor graph_id,user_id in created_graph_ids:\nif user_id:\nresp=await server.agent_server.test_delete_graph(graph_id,user_id)\nnum_deleted=resp[\"version_counts\"]\nassert num_deleted>0"
        }
    ],
    "content": "\n\n@pytest.fixture(scope=\"session\")\nasync def server():\nasync with SpinTestServer()as server:\nyield server\n\n\n@pytest.fixture(scope=\"session\",autouse=True)\nasync def graph_cleanup(server):\ncreated_graph_ids=[]\noriginal_create_graph=server.agent_server.test_create_graph\n\nasync def create_graph_wrapper(*args,**kwargs):\ncreated_graph=await original_create_graph(*args,**kwargs)\n#Extract user_id correctly\nuser_id=kwargs.get(\"user_id\",args[2]if len(args)>2else None)\ncreated_graph_ids.append((created_graph.id,user_id))\nreturn created_graph\n\ntry:\nserver.agent_server.test_create_graph=create_graph_wrapper\nyield#This runs the test function\nfinally:\nserver.agent_server.test_create_graph=original_create_graph\n\n#Delete the created graphs and assert they were deleted\nfor graph_id,user_id in created_graph_ids:\nif user_id:\nresp=await server.agent_server.test_delete_graph(graph_id,user_id)\nnum_deleted=resp[\"version_counts\"]\nassert num_deleted>0"
}