{
    "type": "Program",
    "name": "Global",
    "range": [
        61,
        3479
    ],
    "children": [
        {
            "type": "ClassDecl",
            "name": "StoreValueBlock",
            "range": [
                61,
                72
            ],
            "children": [
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        68,
                        70
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     This block allows you to provide a constant value as a block, in a stateless manner. \\n     The common use-case is simply pass the `input` data, it will `output` the same data. \\n     The block output will be static, the output can be consumed multiple times. \\n     \"\"\""
                }
            ],
            "content": "class StoreValueBlock(Block):\n\"\"\" \\n     This block allows you to provide a constant value as a block, in a stateless manner. \\n     The common use-case is simply pass the `input` data, it will `output` the same data. \\n     The block output will be static, the output can be consumed multiple times. \\n     \"\"\"\n\n"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                73,
                115
            ],
            "children": [
                {
                    "type": "FieldDecl",
                    "name": "input",
                    "range": [
                        80,
                        93
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Any",
                            "range": [
                                82,
                                82
                            ],
                            "children": [],
                            "content": "Any"
                        },
                        {
                            "type": "SchemaField",
                            "name": "",
                            "range": [
                                84,
                                93
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        87,
                                        89
                                    ],
                                    "children": [],
                                    "content": "description=\"Trigger the block to produce the output. \""
                                }
                            ],
                            "content": "SchemaField(\ndescription=\"Trigger the block to produce the output. \"\n\"The value is only used when `data` is None.\"\n)"
                        }
                    ],
                    "content": "input:Any=SchemaField(\ndescription=\"Trigger the block to produce the output. \"\n\"The value is only used when `data` is None.\"\n)"
                },
                {
                    "type": "FieldDecl",
                    "name": "data",
                    "range": [
                        95,
                        114
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Any",
                            "range": [
                                97,
                                97
                            ],
                            "children": [],
                            "content": "Any"
                        },
                        {
                            "type": "SchemaField",
                            "name": "",
                            "range": [
                                99,
                                114
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        102,
                                        104
                                    ],
                                    "children": [],
                                    "content": "description=\"The constant data to be retained in the block. \""
                                },
                                {
                                    "type": "Argument",
                                    "name": "default",
                                    "range": [
                                        109,
                                        111
                                    ],
                                    "children": [],
                                    "content": "default=None"
                                }
                            ],
                            "content": "SchemaField(\ndescription=\"The constant data to be retained in the block. \"\n\"This value is passed as `output`.\",\ndefault=None,\n)"
                        }
                    ],
                    "content": "data:Any=SchemaField(\ndescription=\"The constant data to be retained in the block. \"\n\"This value is passed as `output`.\",\ndefault=None,\n)"
                }
            ],
            "content": "class Input(BlockSchema):\ninput:Any=SchemaField(\ndescription=\"Trigger the block to produce the output. \"\n\"The value is only used when `data` is None.\"\n)\ndata:Any=SchemaField(\ndescription=\"The constant data to be retained in the block. \"\n\"This value is passed as `output`.\",\ndefault=None,\n)\n"
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                117,
                135
            ],
            "children": [
                {
                    "type": "FieldDecl",
                    "name": "output",
                    "range": [
                        124,
                        133
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Any",
                            "range": [
                                126,
                                126
                            ],
                            "children": [],
                            "content": "Any"
                        },
                        {
                            "type": "SchemaField",
                            "name": "",
                            "range": [
                                128,
                                133
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        130,
                                        132
                                    ],
                                    "children": [],
                                    "content": "description=\"The stored data retained in the block.\""
                                }
                            ],
                            "content": "SchemaField(description=\"The stored data retained in the block.\")"
                        }
                    ],
                    "content": "output:Any=SchemaField(description=\"The stored data retained in the block.\")"
                }
            ],
            "content": "class Output(BlockSchema):\noutput:Any=SchemaField(description=\"The stored data retained in the block.\")\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                136,
                254
            ],
            "children": [
                {
                    "type": "SuperCall",
                    "name": "",
                    "range": [
                        143,
                        149
                    ],
                    "children": [],
                    "content": "super().__init__(\n"
                },
                {
                    "type": "Argument",
                    "name": "id",
                    "range": [
                        150,
                        152
                    ],
                    "children": [],
                    "content": "id=\"1ff065e9-88e8-4358-9d82-8dc91f622ba9\""
                },
                {
                    "type": "Argument",
                    "name": "description",
                    "range": [
                        155,
                        157
                    ],
                    "children": [],
                    "content": "description=\"This block forwards an input value as output, allowing reuse without change.\""
                },
                {
                    "type": "Argument",
                    "name": "categories",
                    "range": [
                        160,
                        166
                    ],
                    "children": [],
                    "content": "categories={BlockCategory.BASIC}"
                },
                {
                    "type": "Argument",
                    "name": "input_schema",
                    "range": [
                        169,
                        174
                    ],
                    "children": [],
                    "content": "input_schema=StoreValueBlock.Input,"
                },
                {
                    "type": "Argument",
                    "name": "output_schema",
                    "range": [
                        177,
                        181
                    ],
                    "children": [],
                    "content": "=StoreValueBlock.Output,"
                },
                {
                    "type": "Argument",
                    "name": "test_input",
                    "range": [
                        184,
                        205
                    ],
                    "children": [],
                    "content": "=[\n{\"input\":\"Hello, World!\"},\n{\"input\":\"Hello, World!\",\"data\":\"Existing Data\"},\n]"
                },
                {
                    "type": "Argument",
                    "name": "test_output",
                    "range": [
                        208,
                        245
                    ],
                    "children": [],
                    "content": "test_output=[\n(\"output\",\"Hello, World!\"),#No data provided,so trigger is returned\n(\"output\",\"Existing Data\"),#Data is provided,so data is returned.\n]"
                },
                {
                    "type": "Argument",
                    "name": "static_output",
                    "range": [
                        248,
                        250
                    ],
                    "children": [],
                    "content": "static_output=True"
                }
            ],
            "content": "def __init__(self):\nsuper().__init__(\nid=\"1ff065e9-88e8-4358-9d82-8dc91f622ba9\",\ndescription=\"This block forwards an input value as output, allowing reuse without change.\",\ncategories={BlockCategory.BASIC},\ninput_schema=StoreValueBlock.Input,\noutput_schema=StoreValueBlock.Output,\ntest_input=[\n{\"input\":\"Hello, World!\"},\n{\"input\":\"Hello, World!\",\"data\":\"Existing Data\"},\n],\ntest_output=[\n(\"output\",\"Hello, World!\"),#No data provided,so trigger is returned\n(\"output\",\"Existing Data\"),#Data is provided,so data is returned.\n],\nstatic_output=True,\n)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                256,
                285
            ],
            "children": [
                {
                    "type": "YieldStatement",
                    "name": "",
                    "range": [
                        274,
                        284
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "",
                            "range": [
                                275,
                                275
                            ],
                            "children": [],
                            "content": "\"output\""
                        },
                        {
                            "type": "MemberExpression",
                            "name": "input_data.data",
                            "range": [
                                277,
                                279
                            ],
                            "children": [],
                            "content": "input_data.data"
                        },
                        {
                            "type": "LogicalExpression",
                            "name": "or",
                            "range": [
                                280,
                                283
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "input_data.input",
                                    "range": [
                                        281,
                                        283
                                    ],
                                    "children": [],
                                    "content": "input_data.input"
                                }
                            ],
                            "content": "or input_data.input"
                        }
                    ],
                    "content": "yield \"output\",input_data.data or input_data.input\n"
                }
            ],
            "content": "def run(self,input_data:Input,**kwargs)->BlockOutput:\nyield \"output\",input_data.data or input_data.input\n\n"
        },
        {
            "type": "ClassDecl",
            "name": "PrintToConsoleBlock",
            "range": [
                286,
                292
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "Block",
                    "range": [
                        288,
                        290
                    ],
                    "children": [],
                    "content": "PrintToConsoleBlock(Block"
                }
            ],
            "content": "\nclass PrintToConsoleBlock(Block):"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                293,
                299
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BlockSchema",
                    "range": [
                        295,
                        297
                    ],
                    "children": [],
                    "content": "Input(BlockSchema"
                },
                {
                    "type": "FieldDecl",
                    "name": "text",
                    "range": [
                        300,
                        310
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                302,
                                302
                            ],
                            "children": [],
                            "content": ":"
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                303,
                                309
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SchemaField",
                                    "range": [
                                        304,
                                        309
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                306,
                                                308
                                            ],
                                            "children": [],
                                            "content": "(description="
                                        }
                                    ],
                                    "content": "=SchemaField(description=\"The text to print to the console.\""
                                }
                            ],
                            "content": "str=SchemaField(description=\"The text to print to the console.\""
                        }
                    ],
                    "content": "\ntext:str=SchemaField(description=\"The text to print to the console.\")"
                }
            ],
            "content": "\nclass Input(BlockSchema):"
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                312,
                318
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BlockSchema",
                    "range": [
                        314,
                        316
                    ],
                    "children": [],
                    "content": "Output(BlockSchema"
                },
                {
                    "type": "FieldDecl",
                    "name": "status",
                    "range": [
                        319,
                        329
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                321,
                                321
                            ],
                            "children": [],
                            "content": ":"
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                322,
                                328
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SchemaField",
                                    "range": [
                                        323,
                                        328
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                325,
                                                327
                                            ],
                                            "children": [],
                                            "content": "(description="
                                        }
                                    ],
                                    "content": "=SchemaField(description=\"The status of the print operation.\""
                                }
                            ],
                            "content": "str=SchemaField(description=\"The status of the print operation.\""
                        }
                    ],
                    "content": "\nstatus:str=SchemaField(description=\"The status of the print operation.\")"
                }
            ],
            "content": "\nclass Output(BlockSchema):"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                331,
                397
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        334,
                        334
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "SuperCall",
                    "name": "super",
                    "range": [
                        338,
                        344
                    ],
                    "children": [],
                    "content": "\nsuper().__init__("
                },
                {
                    "type": "Assignment",
                    "name": "id",
                    "range": [
                        345,
                        347
                    ],
                    "children": [],
                    "content": "\nid="
                },
                {
                    "type": "Assignment",
                    "name": "description",
                    "range": [
                        350,
                        352
                    ],
                    "children": [],
                    "content": "\ndescription="
                },
                {
                    "type": "Assignment",
                    "name": "categories",
                    "range": [
                        355,
                        361
                    ],
                    "children": [],
                    "content": "\ncategories={BlockCategory.BASIC"
                },
                {
                    "type": "Assignment",
                    "name": "input_schema",
                    "range": [
                        364,
                        369
                    ],
                    "children": [],
                    "content": "\ninput_schema=PrintToConsoleBlock.Input"
                },
                {
                    "type": "Assignment",
                    "name": "output_schema",
                    "range": [
                        372,
                        376
                    ],
                    "children": [],
                    "content": "output_schema=PrintToConsoleBlock.Output"
                },
                {
                    "type": "Assignment",
                    "name": "test_input",
                    "range": [
                        378,
                        384
                    ],
                    "children": [],
                    "content": "\ntest_input={\"text\":\"Hello, World!\""
                },
                {
                    "type": "Assignment",
                    "name": "test_output",
                    "range": [
                        387,
                        393
                    ],
                    "children": [],
                    "content": "\ntest_output=(\"status\",\"printed\""
                }
            ],
            "content": "\ndef __init__(self):\nsuper().__init__(\nid=\"f3b1c1b2-4c4f-4f0d-8d2f-4c4f0d8d2f4c\",\ndescription=\"Print the given text to the console, this is used for a debugging purpose.\",\ncategories={BlockCategory.BASIC},\ninput_schema=PrintToConsoleBlock.Input,\noutput_schema=PrintToConsoleBlock.Output,\ntest_input={\"text\":\"Hello, World!\"},\ntest_output=(\"status\",\"printed\"),\n)"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                399,
                431
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        402,
                        402
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        404,
                        406
                    ],
                    "children": [],
                    "content": ",input_data:"
                },
                {
                    "type": "Parameter",
                    "name": "kwargs",
                    "range": [
                        408,
                        410
                    ],
                    "children": [],
                    "content": ",**"
                },
                {
                    "type": "PrintStatement",
                    "name": "print",
                    "range": [
                        417,
                        424
                    ],
                    "children": [],
                    "content": "\nprint(\">>>>> Print: \",input_data.text"
                },
                {
                    "type": "YieldStatement",
                    "name": "yield",
                    "range": [
                        426,
                        429
                    ],
                    "children": [],
                    "content": "\nyield \"status\","
                }
            ],
            "content": "\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nprint(\">>>>> Print: \",input_data.text)\nyield \"status\",\"printed\"\n"
        },
        {
            "type": "ClassDecl",
            "name": "FindInDictionaryBlock",
            "range": [
                432,
                438
            ],
            "children": [],
            "content": "\n\nclass FindInDictionaryBlock(Block)"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                439,
                445
            ],
            "children": [],
            "content": ":\nclass Input(BlockSchema)"
        },
        {
            "type": "VariableDecl",
            "name": "input",
            "range": [
                446,
                456
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        447,
                        448
                    ],
                    "children": [],
                    "content": "\ninput"
                },
                {
                    "type": "Assignment",
                    "name": "",
                    "range": [
                        449,
                        455
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "",
                            "range": [
                                450,
                                455
                            ],
                            "children": [],
                            "content": "Any=SchemaField(description="
                        }
                    ],
                    "content": ":Any=SchemaField(description="
                }
            ],
            "content": ":\ninput:Any=SchemaField(description=\"Dictionary to lookup from\""
        },
        {
            "type": "VariableDecl",
            "name": "key",
            "range": [
                457,
                469
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        458,
                        462
                    ],
                    "children": [],
                    "content": "\nkey:str|"
                },
                {
                    "type": "Assignment",
                    "name": "",
                    "range": [
                        463,
                        468
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "",
                            "range": [
                                464,
                                468
                            ],
                            "children": [],
                            "content": "=SchemaField(description="
                        }
                    ],
                    "content": "int=SchemaField(description="
                }
            ],
            "content": ")\nkey:str|int=SchemaField(description=\"Key to lookup in the dictionary\""
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                471,
                477
            ],
            "children": [],
            "content": "\n\nclass Output(BlockSchema)"
        },
        {
            "type": "VariableDecl",
            "name": "output",
            "range": [
                478,
                488
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        479,
                        480
                    ],
                    "children": [],
                    "content": "\noutput"
                },
                {
                    "type": "Assignment",
                    "name": "",
                    "range": [
                        481,
                        487
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "",
                            "range": [
                                482,
                                487
                            ],
                            "children": [],
                            "content": "Any=SchemaField(description="
                        }
                    ],
                    "content": ":Any=SchemaField(description="
                }
            ],
            "content": ":\noutput:Any=SchemaField(description=\"Value found for the given key\""
        },
        {
            "type": "VariableDecl",
            "name": "missing",
            "range": [
                489,
                501
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        490,
                        491
                    ],
                    "children": [],
                    "content": "\nmissing"
                },
                {
                    "type": "Assignment",
                    "name": "",
                    "range": [
                        492,
                        500
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "",
                            "range": [
                                493,
                                500
                            ],
                            "children": [],
                            "content": "Any=SchemaField(\ndescription=\"Value of the input that missing the key\""
                        }
                    ],
                    "content": ":Any=SchemaField(\ndescription=\"Value of the input that missing the key\""
                }
            ],
            "content": ")\nmissing:Any=SchemaField(\ndescription=\"Value of the input that missing the key\"\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                503,
                758
            ],
            "children": [
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        505,
                        758
                    ],
                    "children": [
                        {
                            "type": "SuperCall",
                            "name": "",
                            "range": [
                                510,
                                515
                            ],
                            "children": [],
                            "content": ":\nsuper()."
                        },
                        {
                            "type": "Assignment",
                            "name": "id",
                            "range": [
                                517,
                                525
                            ],
                            "children": [],
                            "content": "(\nid=\"0e50422c-6dee-4145-83d6-3a5a392f65de\",\ndescription="
                        },
                        {
                            "type": "Assignment",
                            "name": "description",
                            "range": [
                                522,
                                524
                            ],
                            "children": [],
                            "content": ",\ndescription"
                        },
                        {
                            "type": "Assignment",
                            "name": "input_schema",
                            "range": [
                                527,
                                539
                            ],
                            "children": [],
                            "content": ",\ninput_schema=FindInDictionaryBlock.Input,\noutput_schema=FindInDictionaryBlock."
                        },
                        {
                            "type": "Assignment",
                            "name": "output_schema",
                            "range": [
                                534,
                                538
                            ],
                            "children": [],
                            "content": ",\noutput_schema=FindInDictionaryBlock"
                        },
                        {
                            "type": "Assignment",
                            "name": "test_input",
                            "range": [
                                541,
                                675
                            ],
                            "children": [],
                            "content": ",\ntest_input=[\n{\"input\":{\"apple\":1,\"banana\":2,\"cherry\":3},\"key\":\"banana\"},\n{\"input\":{\"x\":10,\"y\":20,\"z\":30},\"key\":\"w\"},\n{\"input\":[1,2,3],\"key\":1},\n{\"input\":[1,2,3],\"key\":3},\n{\"input\":MockObject(value=\"!!\",key=\"key\"),\"key\":\"key\"},\n{\"input\":[{\"k1\":\"v1\"},{\"k2\":\"v2\"},{\"k1\":\"v3\"}],\"key\":\"k1\"},\n"
                        },
                        {
                            "type": "Assignment",
                            "name": "test_output",
                            "range": [
                                677,
                                745
                            ],
                            "children": [],
                            "content": ",\ntest_output=[\n(\"output\",2),\n(\"missing\",{\"x\":10,\"y\":20,\"z\":30}),\n(\"output\",2),\n(\"missing\",[1,2,3]),\n(\"output\",\"key\"),\n(\"output\",[\"v1\",\"v3\"]),"
                        },
                        {
                            "type": "Assignment",
                            "name": "categories",
                            "range": [
                                748,
                                754
                            ],
                            "children": [],
                            "content": ",\ncategories={BlockCategory."
                        }
                    ],
                    "content": "def __init__(self):\nsuper().__init__(\nid=\"0e50422c-6dee-4145-83d6-3a5a392f65de\",\ndescription=\"Lookup the given key in the input dictionary/object/list and return the value.\",\ninput_schema=FindInDictionaryBlock.Input,\noutput_schema=FindInDictionaryBlock.Output,\ntest_input=[\n{\"input\":{\"apple\":1,\"banana\":2,\"cherry\":3},\"key\":\"banana\"},\n{\"input\":{\"x\":10,\"y\":20,\"z\":30},\"key\":\"w\"},\n{\"input\":[1,2,3],\"key\":1},\n{\"input\":[1,2,3],\"key\":3},\n{\"input\":MockObject(value=\"!!\",key=\"key\"),\"key\":\"key\"},\n{\"input\":[{\"k1\":\"v1\"},{\"k2\":\"v2\"},{\"k1\":\"v3\"}],\"key\":\"k1\"},\n],\ntest_output=[\n(\"output\",2),\n(\"missing\",{\"x\":10,\"y\":20,\"z\":30}),\n(\"output\",2),\n(\"missing\",[1,2,3]),\n(\"output\",\"key\"),\n(\"output\",[\"v1\",\"v3\"]),\n],\ncategories={BlockCategory.BASIC},\n"
                }
            ],
            "content": "\n\ndef __init__(self):\nsuper().__init__(\nid=\"0e50422c-6dee-4145-83d6-3a5a392f65de\",\ndescription=\"Lookup the given key in the input dictionary/object/list and return the value.\",\ninput_schema=FindInDictionaryBlock.Input,\noutput_schema=FindInDictionaryBlock.Output,\ntest_input=[\n{\"input\":{\"apple\":1,\"banana\":2,\"cherry\":3},\"key\":\"banana\"},\n{\"input\":{\"x\":10,\"y\":20,\"z\":30},\"key\":\"w\"},\n{\"input\":[1,2,3],\"key\":1},\n{\"input\":[1,2,3],\"key\":3},\n{\"input\":MockObject(value=\"!!\",key=\"key\"),\"key\":\"key\"},\n{\"input\":[{\"k1\":\"v1\"},{\"k2\":\"v2\"},{\"k1\":\"v3\"}],\"key\":\"k1\"},\n],\ntest_output=[\n(\"output\",2),\n(\"missing\",{\"x\":10,\"y\":20,\"z\":30}),\n(\"output\",2),\n(\"missing\",[1,2,3]),\n(\"output\",\"key\"),\n(\"output\",[\"v1\",\"v3\"]),\n],\ncategories={BlockCategory.BASIC},\n"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                760,
                984
            ],
            "children": [
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        762,
                        984
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "obj",
                            "range": [
                                778,
                                783
                            ],
                            "children": [],
                            "content": ":\nobj=input_data."
                        },
                        {
                            "type": "VariableDecl",
                            "name": "key",
                            "range": [
                                784,
                                789
                            ],
                            "children": [],
                            "content": "input\nkey=input_data."
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                791,
                                811
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        792,
                                        802
                                    ],
                                    "children": [],
                                    "content": "\nif isinstance(obj,dict)and key in"
                                },
                                {
                                    "type": "YieldStatement",
                                    "name": "",
                                    "range": [
                                        804,
                                        811
                                    ],
                                    "children": [],
                                    "content": ":\nyield \"output\",obj[key"
                                }
                            ],
                            "content": "\n\nif isinstance(obj,dict)and key in obj:\nyield \"output\",obj[key"
                        },
                        {
                            "type": "ElifStatement",
                            "name": "",
                            "range": [
                                812,
                                845
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        813,
                                        836
                                    ],
                                    "children": [],
                                    "content": "\nelif isinstance(obj,list)and isinstance(key,int)and0<=key<len(obj"
                                },
                                {
                                    "type": "YieldStatement",
                                    "name": "",
                                    "range": [
                                        838,
                                        845
                                    ],
                                    "children": [],
                                    "content": ":\nyield \"output\",obj[key"
                                }
                            ],
                            "content": "]\nelif isinstance(obj,list)and isinstance(key,int)and0<=key<len(obj):\nyield \"output\",obj[key"
                        },
                        {
                            "type": "ElifStatement",
                            "name": "",
                            "range": [
                                846,
                                914
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        847,
                                        895
                                    ],
                                    "children": [],
                                    "content": "\nelif isinstance(obj,list)and isinstance(key,str):\nif len(obj)==0:\nyield \"output\",[]\nelif isinstance(obj[0],dict)and key in obj[0"
                                },
                                {
                                    "type": "YieldStatement",
                                    "name": "",
                                    "range": [
                                        897,
                                        914
                                    ],
                                    "children": [],
                                    "content": ":\nyield \"output\",[item[key]for item in obj if key in item"
                                }
                            ],
                            "content": "]\nelif isinstance(obj,list)and isinstance(key,str):\nif len(obj)==0:\nyield \"output\",[]\nelif isinstance(obj[0],dict)and key in obj[0]:\nyield \"output\",[item[key]for item in obj if key in item"
                        },
                        {
                            "type": "ElseStatement",
                            "name": "",
                            "range": [
                                915,
                                940
                            ],
                            "children": [
                                {
                                    "type": "YieldStatement",
                                    "name": "",
                                    "range": [
                                        918,
                                        940
                                    ],
                                    "children": [],
                                    "content": ":\nyield \"output\",[getattr(val,key)for val in obj if hasattr(val,key)"
                                }
                            ],
                            "content": "]\nelse:\nyield \"output\",[getattr(val,key)for val in obj if hasattr(val,key)"
                        },
                        {
                            "type": "ElifStatement",
                            "name": "",
                            "range": [
                                941,
                                973
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        942,
                                        962
                                    ],
                                    "children": [],
                                    "content": "\nelif isinstance(obj,object)and isinstance(key,str)and hasattr(obj,key"
                                },
                                {
                                    "type": "YieldStatement",
                                    "name": "",
                                    "range": [
                                        964,
                                        973
                                    ],
                                    "children": [],
                                    "content": ":\nyield \"output\",getattr(obj,key"
                                }
                            ],
                            "content": "]\nelif isinstance(obj,object)and isinstance(key,str)and hasattr(obj,key):\nyield \"output\",getattr(obj,key"
                        },
                        {
                            "type": "ElseStatement",
                            "name": "",
                            "range": [
                                974,
                                983
                            ],
                            "children": [
                                {
                                    "type": "YieldStatement",
                                    "name": "",
                                    "range": [
                                        977,
                                        983
                                    ],
                                    "children": [],
                                    "content": ":\nyield \"missing\",input_data."
                                }
                            ],
                            "content": ")\nelse:\nyield \"missing\",input_data."
                        }
                    ],
                    "content": "def run(self,input_data:Input,**kwargs)->BlockOutput:\nobj=input_data.input\nkey=input_data.key\n\nif isinstance(obj,dict)and key in obj:\nyield \"output\",obj[key]\nelif isinstance(obj,list)and isinstance(key,int)and0<=key<len(obj):\nyield \"output\",obj[key]\nelif isinstance(obj,list)and isinstance(key,str):\nif len(obj)==0:\nyield \"output\",[]\nelif isinstance(obj[0],dict)and key in obj[0]:\nyield \"output\",[item[key]for item in obj if key in item]\nelse:\nyield \"output\",[getattr(val,key)for val in obj if hasattr(val,key)]\nelif isinstance(obj,object)and isinstance(key,str)and hasattr(obj,key):\nyield \"output\",getattr(obj,key)\nelse:\nyield \"missing\",input_data.input"
                }
            ],
            "content": "\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nobj=input_data.input\nkey=input_data.key\n\nif isinstance(obj,dict)and key in obj:\nyield \"output\",obj[key]\nelif isinstance(obj,list)and isinstance(key,int)and0<=key<len(obj):\nyield \"output\",obj[key]\nelif isinstance(obj,list)and isinstance(key,str):\nif len(obj)==0:\nyield \"output\",[]\nelif isinstance(obj[0],dict)and key in obj[0]:\nyield \"output\",[item[key]for item in obj if key in item]\nelse:\nyield \"output\",[getattr(val,key)for val in obj if hasattr(val,key)]\nelif isinstance(obj,object)and isinstance(key,str)and hasattr(obj,key):\nyield \"output\",getattr(obj,key)\nelse:\nyield \"missing\",input_data.input"
        },
        {
            "type": "ClassDecl",
            "name": "AgentInputBlock",
            "range": [
                985,
                996
            ],
            "children": [
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        992,
                        994
                    ],
                    "children": [],
                    "content": "):\n"
                }
            ],
            "content": "\n\n\nclass AgentInputBlock(Block):\n\"\"\" \\n     This block is used to provide input to the graph. \\n  \\n     It takes in a value, name, description, default values list and bool to limit selection to default values. \\n  \\n     It Outputs the value passed as input. \\n     \""
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                997,
                1183
            ],
            "children": [
                {
                    "type": "FieldDecl",
                    "name": "name",
                    "range": [
                        1004,
                        1013
                    ],
                    "children": [],
                    "content": "):\nname:str=SchemaField(description"
                },
                {
                    "type": "FieldDecl",
                    "name": "value",
                    "range": [
                        1015,
                        1032
                    ],
                    "children": [],
                    "content": "\"The name of the input.\")\nvalue:Any=SchemaField(\ndescription=\"The value to be passed as input.\",\ndefault=None"
                },
                {
                    "type": "FieldDecl",
                    "name": "title",
                    "range": [
                        1034,
                        1055
                    ],
                    "children": [],
                    "content": "\n)\ntitle:str|None=SchemaField(\ndescription=\"The title of the input.\",default=None,advanced="
                },
                {
                    "type": "FieldDecl",
                    "name": "description",
                    "range": [
                        1057,
                        1081
                    ],
                    "children": [],
                    "content": "\n)\ndescription:str|None=SchemaField(\ndescription=\"The description of the input.\",\ndefault=None,\nadvanced=True"
                },
                {
                    "type": "FieldDecl",
                    "name": "placeholder_values",
                    "range": [
                        1083,
                        1109
                    ],
                    "children": [],
                    "content": "\n)\nplaceholder_values:List[Any]=SchemaField(\ndescription=\"The placeholder values to be passed as input.\",\ndefault=[],\nadvanced=True"
                },
                {
                    "type": "FieldDecl",
                    "name": "limit_to_placeholder_values",
                    "range": [
                        1111,
                        1133
                    ],
                    "children": [],
                    "content": "\n)\nlimit_to_placeholder_values:bool=SchemaField(\ndescription=\"Whether to limit the selection to placeholder values.\",\ndefault=False,\nadvanced=True"
                },
                {
                    "type": "FieldDecl",
                    "name": "advanced",
                    "range": [
                        1135,
                        1157
                    ],
                    "children": [],
                    "content": "\n)\nadvanced:bool=SchemaField(\ndescription=\"Whether to show the input in the advanced section, if the field is not required.\",\ndefault=False,\nadvanced=True"
                },
                {
                    "type": "FieldDecl",
                    "name": "secret",
                    "range": [
                        1159,
                        1181
                    ],
                    "children": [],
                    "content": "\n)\nsecret:bool=SchemaField(\ndescription=\"Whether the input should be treated as a secret.\",\ndefault=False,\nadvanced=True"
                }
            ],
            "content": "\"\"\n\nclass Input(BlockSchema):\nname:str=SchemaField(description=\"The name of the input.\")\nvalue:Any=SchemaField(\ndescription=\"The value to be passed as input.\",\ndefault=None,\n)\ntitle:str|None=SchemaField(\ndescription=\"The title of the input.\",default=None,advanced=True\n)\ndescription:str|None=SchemaField(\ndescription=\"The description of the input.\",\ndefault=None,\nadvanced=True,\n)\nplaceholder_values:List[Any]=SchemaField(\ndescription=\"The placeholder values to be passed as input.\",\ndefault=[],\nadvanced=True,\n)\nlimit_to_placeholder_values:bool=SchemaField(\ndescription=\"Whether to limit the selection to placeholder values.\",\ndefault=False,\nadvanced=True,\n)\nadvanced:bool=SchemaField(\ndescription=\"Whether to show the input in the advanced section, if the field is not required.\",\ndefault=False,\nadvanced=True,\n)\nsecret:bool=SchemaField(\ndescription=\"Whether the input should be treated as a secret.\",\ndefault=False,\nadvanced=True,\n"
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                1184,
                1202
            ],
            "children": [
                {
                    "type": "FieldDecl",
                    "name": "result",
                    "range": [
                        1191,
                        1200
                    ],
                    "children": [],
                    "content": "):\nresult:Any=SchemaField(description"
                }
            ],
            "content": ")\n\nclass Output(BlockSchema):\nresult:Any=SchemaField(description=\"The value passed as input.\""
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                1203,
                1358
            ],
            "children": [
                {
                    "type": "SuperCall",
                    "name": "",
                    "range": [
                        1210,
                        1215
                    ],
                    "children": [],
                    "content": "):\nsuper()"
                },
                {
                    "type": "Argument",
                    "name": "id",
                    "range": [
                        1217,
                        1219
                    ],
                    "children": [],
                    "content": "__init__(\n"
                },
                {
                    "type": "Argument",
                    "name": "description",
                    "range": [
                        1222,
                        1224
                    ],
                    "children": [],
                    "content": "\"c0a8e994-ebf1-4a9c-a4d8-89d09c86741b\",\n"
                },
                {
                    "type": "Argument",
                    "name": "input_schema",
                    "range": [
                        1227,
                        1232
                    ],
                    "children": [],
                    "content": "\"This block is used to provide input to the graph.\",\ninput_schema=AgentInputBlock"
                },
                {
                    "type": "Argument",
                    "name": "output_schema",
                    "range": [
                        1234,
                        1239
                    ],
                    "children": [],
                    "content": "Input,\noutput_schema=AgentInputBlock"
                },
                {
                    "type": "Argument",
                    "name": "test_input",
                    "range": [
                        1241,
                        1308
                    ],
                    "children": [],
                    "content": "Output,\ntest_input=[\n{\n\"value\":\"Hello, World!\",\n\"name\":\"input_1\",\n\"description\":\"This is a test input.\",\n\"placeholder_values\":[],\n\"limit_to_placeholder_values\":False,\n},\n{\n\"value\":\"Hello, World!\",\n\"name\":\"input_2\",\n\"description\":\"This is a test input.\",\n\"placeholder_values\":[\"Hello, World!\"],\n\"limit_to_placeholder_values\":True,\n}"
                },
                {
                    "type": "Argument",
                    "name": "test_output",
                    "range": [
                        1311,
                        1329
                    ],
                    "children": [],
                    "content": "],\ntest_output=[\n(\"result\",\"Hello, World!\"),\n(\"result\",\"Hello, World!\")"
                },
                {
                    "type": "Argument",
                    "name": "categories",
                    "range": [
                        1332,
                        1342
                    ],
                    "children": [],
                    "content": "],\ncategories={BlockCategory.INPUT,BlockCategory"
                },
                {
                    "type": "Argument",
                    "name": "block_type",
                    "range": [
                        1345,
                        1350
                    ],
                    "children": [],
                    "content": "},\nblock_type=BlockType"
                },
                {
                    "type": "Argument",
                    "name": "static_output",
                    "range": [
                        1352,
                        1354
                    ],
                    "children": [],
                    "content": "INPUT,\n"
                }
            ],
            "content": ")\n\ndef __init__(self):\nsuper().__init__(\nid=\"c0a8e994-ebf1-4a9c-a4d8-89d09c86741b\",\ndescription=\"This block is used to provide input to the graph.\",\ninput_schema=AgentInputBlock.Input,\noutput_schema=AgentInputBlock.Output,\ntest_input=[\n{\n\"value\":\"Hello, World!\",\n\"name\":\"input_1\",\n\"description\":\"This is a test input.\",\n\"placeholder_values\":[],\n\"limit_to_placeholder_values\":False,\n},\n{\n\"value\":\"Hello, World!\",\n\"name\":\"input_2\",\n\"description\":\"This is a test input.\",\n\"placeholder_values\":[\"Hello, World!\"],\n\"limit_to_placeholder_values\":True,\n},\n],\ntest_output=[\n(\"result\",\"Hello, World!\"),\n(\"result\",\"Hello, World!\"),\n],\ncategories={BlockCategory.INPUT,BlockCategory.BASIC},\nblock_type=BlockType.INPUT,\nstatic_output=True,"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                1360,
                1385
            ],
            "children": [
                {
                    "type": "YieldStatement",
                    "name": "",
                    "range": [
                        1378,
                        1384
                    ],
                    "children": [],
                    "content": "BlockOutput:\nyield \"result\",input_data"
                }
            ],
            "content": ")\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nyield \"result\",input_data."
        },
        {
            "type": "ClassDecl",
            "name": "AgentOutputBlock",
            "range": [
                1386,
                1392
            ],
            "children": [
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        1393,
                        1395
                    ],
                    "children": [],
                    "content": "Block):"
                }
            ],
            "content": "value\n\n\nclass AgentOutputBlock("
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                1398,
                1563
            ],
            "children": [
                {
                    "type": "FieldDecl",
                    "name": "value",
                    "range": [
                        1405,
                        1427
                    ],
                    "children": [],
                    "content": "BlockSchema):\nvalue:Any=SchemaField(\ndescription=\"The value to be recorded as output.\",\ndefault=None,\nadvanced="
                },
                {
                    "type": "FieldDecl",
                    "name": "name",
                    "range": [
                        1429,
                        1438
                    ],
                    "children": [],
                    "content": ",\n)\nname:str=SchemaField("
                },
                {
                    "type": "FieldDecl",
                    "name": "title",
                    "range": [
                        1440,
                        1464
                    ],
                    "children": [],
                    "content": "=\"The name of the output.\")\ntitle:str|None=SchemaField(\ndescription=\"The title of the output.\",\ndefault=None,\nadvanced="
                },
                {
                    "type": "FieldDecl",
                    "name": "description",
                    "range": [
                        1466,
                        1490
                    ],
                    "children": [],
                    "content": ",\n)\ndescription:str|None=SchemaField(\ndescription=\"The description of the output.\",\ndefault=None,\nadvanced="
                },
                {
                    "type": "FieldDecl",
                    "name": "format",
                    "range": [
                        1492,
                        1514
                    ],
                    "children": [],
                    "content": ",\n)\nformat:str=SchemaField(\ndescription=\"The format string to be used to format the recorded_value.\",\ndefault=\"\",\nadvanced="
                },
                {
                    "type": "FieldDecl",
                    "name": "advanced",
                    "range": [
                        1516,
                        1538
                    ],
                    "children": [],
                    "content": ",\n)\nadvanced:bool=SchemaField(\ndescription=\"Whether to treat the output as advanced.\",\ndefault=False,\nadvanced="
                },
                {
                    "type": "FieldDecl",
                    "name": "secret",
                    "range": [
                        1540,
                        1562
                    ],
                    "children": [],
                    "content": ",\n)\nsecret:bool=SchemaField(\ndescription=\"Whether the output should be treated as a secret.\",\ndefault=False,\nadvanced="
                }
            ],
            "content": "\" \\n     Records the output of the graph for users to see. \\n  \\n     Behavior: \\n         If `format` is provided and the `value` is of a type that can be formatted, \\n         the block attempts to format the recorded_value using the `format`. \\n         If formatting fails or no `format` is provided, the raw `value` is output. \\n     \"\"\"\n\nclass Input(BlockSchema):\nvalue:Any=SchemaField(\ndescription=\"The value to be recorded as output.\",\ndefault=None,\nadvanced=False,\n)\nname:str=SchemaField(description=\"The name of the output.\")\ntitle:str|None=SchemaField(\ndescription=\"The title of the output.\",\ndefault=None,\nadvanced=True,\n)\ndescription:str|None=SchemaField(\ndescription=\"The description of the output.\",\ndefault=None,\nadvanced=True,\n)\nformat:str=SchemaField(\ndescription=\"The format string to be used to format the recorded_value.\",\ndefault=\"\",\nadvanced=True,\n)\nadvanced:bool=SchemaField(\ndescription=\"Whether to treat the output as advanced.\",\ndefault=False,\nadvanced=True,\n)\nsecret:bool=SchemaField(\ndescription=\"Whether the output should be treated as a secret.\",\ndefault=False,\nadvanced=True"
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                1565,
                1776
            ],
            "children": [
                {
                    "type": "FieldDecl",
                    "name": "output",
                    "range": [
                        1572,
                        1581
                    ],
                    "children": [],
                    "content": "BlockSchema):\noutput:Any=SchemaField("
                }
            ],
            "content": "\n)\n\nclass Output(BlockSchema):\noutput:Any=SchemaField(description=\"The value recorded as output.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"363ae599-353e-4804-937e-b2ee3cef3da4\",\ndescription=\"Stores the output of the graph for users to see.\",\ninput_schema=AgentOutputBlock.Input,\noutput_schema=AgentOutputBlock.Output,\ntest_input=[\n{\n\"value\":\"Hello, World!\",\n\"name\":\"output_1\",\n\"description\":\"This is a test output.\",\n\"format\":\"{{ output_1 }}!!\",\n},\n{\n\"value\":\"42\",\n\"name\":\"output_2\",\n\"description\":\"This is another test output.\",\n\"format\":\"{{ output_2 }}\",\n},\n{\n\"value\":MockObject(value=\"!!\",key=\"key\"),\n\"name\":\"output_3\",\n\"description\":\"This is a test output with a mock object.\",\n\"format\":\"{{ output_3 }}\",\n},\n],\ntest_output=[\n(\"output\",\"Hello, World!!!\"),\n(\"output\",\"42\"),\n(\"output\",MockObject(value=\"!!\",key=\"key\")),\n],\ncategories={BlockCategory.OUTPUT,BlockCategory.BASIC},\nblock_type=BlockType.OUTPUT,\nstatic_output=True"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                1584,
                1776
            ],
            "children": [
                {
                    "type": "SuperCall",
                    "name": "",
                    "range": [
                        1591,
                        1775
                    ],
                    "children": [],
                    "content": "self):\nsuper().__init__(\nid=\"363ae599-353e-4804-937e-b2ee3cef3da4\",\ndescription=\"Stores the output of the graph for users to see.\",\ninput_schema=AgentOutputBlock.Input,\noutput_schema=AgentOutputBlock.Output,\ntest_input=[\n{\n\"value\":\"Hello, World!\",\n\"name\":\"output_1\",\n\"description\":\"This is a test output.\",\n\"format\":\"{{ output_1 }}!!\",\n},\n{\n\"value\":\"42\",\n\"name\":\"output_2\",\n\"description\":\"This is another test output.\",\n\"format\":\"{{ output_2 }}\",\n},\n{\n\"value\":MockObject(value=\"!!\",key=\"key\"),\n\"name\":\"output_3\",\n\"description\":\"This is a test output with a mock object.\",\n\"format\":\"{{ output_3 }}\",\n},\n],\ntest_output=[\n(\"output\",\"Hello, World!!!\"),\n(\"output\",\"42\"),\n(\"output\",MockObject(value=\"!!\",key=\"key\")),\n],\ncategories={BlockCategory.OUTPUT,BlockCategory.BASIC},\nblock_type=BlockType.OUTPUT,\nstatic_output="
                }
            ],
            "content": "\"The value recorded as output.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"363ae599-353e-4804-937e-b2ee3cef3da4\",\ndescription=\"Stores the output of the graph for users to see.\",\ninput_schema=AgentOutputBlock.Input,\noutput_schema=AgentOutputBlock.Output,\ntest_input=[\n{\n\"value\":\"Hello, World!\",\n\"name\":\"output_1\",\n\"description\":\"This is a test output.\",\n\"format\":\"{{ output_1 }}!!\",\n},\n{\n\"value\":\"42\",\n\"name\":\"output_2\",\n\"description\":\"This is another test output.\",\n\"format\":\"{{ output_2 }}\",\n},\n{\n\"value\":MockObject(value=\"!!\",key=\"key\"),\n\"name\":\"output_3\",\n\"description\":\"This is a test output with a mock object.\",\n\"format\":\"{{ output_3 }}\",\n},\n],\ntest_output=[\n(\"output\",\"Hello, World!!!\"),\n(\"output\",\"42\"),\n(\"output\",MockObject(value=\"!!\",key=\"key\")),\n],\ncategories={BlockCategory.OUTPUT,BlockCategory.BASIC},\nblock_type=BlockType.OUTPUT,\nstatic_output=True"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                1778,
                1855
            ],
            "children": [
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        1796,
                        1798
                    ],
                    "children": [],
                    "content": ">BlockOutput:"
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        1800,
                        1854
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                1806,
                                1844
                            ],
                            "children": [
                                {
                                    "type": "YieldStatement",
                                    "name": "",
                                    "range": [
                                        1809,
                                        1832
                                    ],
                                    "children": [],
                                    "content": "\ntry:\nyield \"output\",formatter.format_string(\ninput_data.format,{input_data.name:input_data.value"
                                }
                            ],
                            "content": ".format:\ntry:\nyield \"output\",formatter.format_string(\ninput_data.format,{input_data.name:input_data.value}\n)\nexcept Exception as e:\nyield \"output\""
                        },
                        {
                            "type": "ElseStatement",
                            "name": "",
                            "range": [
                                1845,
                                1854
                            ],
                            "children": [
                                {
                                    "type": "YieldStatement",
                                    "name": "",
                                    "range": [
                                        1848,
                                        1854
                                    ],
                                    "children": [],
                                    "content": "\nelse:\nyield \"output\","
                                }
                            ],
                            "content": ",f \"Error: {e}, {input_data.value}\"\nelse:\nyield \"output\","
                        }
                    ],
                    "content": "\"\"\" \\n         Attempts to format the recorded_value using the fmt_string if provided. \\n         If formatting fails or no fmt_string is given, returns the original recorded_value. \\n         \"\"\"\nif input_data.format:\ntry:\nyield \"output\",formatter.format_string(\ninput_data.format,{input_data.name:input_data.value}\n)\nexcept Exception as e:\nyield \"output\",f \"Error: {e}, {input_data.value}\"\nelse:\nyield \"output\","
                }
            ],
            "content": "\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\n\"\"\" \\n         Attempts to format the recorded_value using the fmt_string if provided. \\n         If formatting fails or no fmt_string is given, returns the original recorded_value. \\n         \"\"\"\nif input_data.format:\ntry:\nyield \"output\",formatter.format_string(\ninput_data.format,{input_data.name:input_data.value}\n)\nexcept Exception as e:\nyield \"output\",f \"Error: {e}, {input_data.value}\"\nelse:\nyield \"output\",input_data"
        },
        {
            "type": "ClassDecl",
            "name": "AddToDictionaryBlock",
            "range": [
                1856,
                1982
            ],
            "children": [
                {
                    "type": "ClassBody",
                    "name": "",
                    "range": [
                        1862,
                        1982
                    ],
                    "children": [
                        {
                            "type": "FieldDecl",
                            "name": "dictionary",
                            "range": [
                                1870,
                                1893
                            ],
                            "children": [],
                            "content": "(BlockSchema):\ndictionary:dict[Any,Any]=SchemaField(\ndefault={},\ndescription"
                        },
                        {
                            "type": "FieldDecl",
                            "name": "key",
                            "range": [
                                1895,
                                1922
                            ],
                            "children": [],
                            "content": "\"The dictionary to add the entry to. If not provided, a new dictionary will be created.\",\n)\nkey:str=SchemaField(\ndefault=\"\",\ndescription=\"The key for the new entry.\",\nplaceholder=\"new_key\",\nadvanced"
                        },
                        {
                            "type": "FieldDecl",
                            "name": "value",
                            "range": [
                                1924,
                                1951
                            ],
                            "children": [],
                            "content": "False,\n)\nvalue:Any=SchemaField(\ndefault=None,\ndescription=\"The value for the new entry.\",\nplaceholder=\"new_value\",\nadvanced"
                        },
                        {
                            "type": "FieldDecl",
                            "name": "entries",
                            "range": [
                                1953,
                                1981
                            ],
                            "children": [],
                            "content": "False,\n)\nentries:dict[Any,Any]=SchemaField(\ndefault={},\ndescription=\"The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.\",\nadvanced"
                        }
                    ],
                    "content": "AddToDictionaryBlock(Block):\nclass Input(BlockSchema):\ndictionary:dict[Any,Any]=SchemaField(\ndefault={},\ndescription=\"The dictionary to add the entry to. If not provided, a new dictionary will be created.\",\n)\nkey:str=SchemaField(\ndefault=\"\",\ndescription=\"The key for the new entry.\",\nplaceholder=\"new_key\",\nadvanced=False,\n)\nvalue:Any=SchemaField(\ndefault=None,\ndescription=\"The value for the new entry.\",\nplaceholder=\"new_value\",\nadvanced=False,\n)\nentries:dict[Any,Any]=SchemaField(\ndefault={},\ndescription=\"The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.\",\nadvanced="
                }
            ],
            "content": ".value\n\n\nclass AddToDictionaryBlock(Block):\nclass Input(BlockSchema):\ndictionary:dict[Any,Any]=SchemaField(\ndefault={},\ndescription=\"The dictionary to add the entry to. If not provided, a new dictionary will be created.\",\n)\nkey:str=SchemaField(\ndefault=\"\",\ndescription=\"The key for the new entry.\",\nplaceholder=\"new_key\",\nadvanced=False,\n)\nvalue:Any=SchemaField(\ndefault=None,\ndescription=\"The value for the new entry.\",\nplaceholder=\"new_value\",\nadvanced=False,\n)\nentries:dict[Any,Any]=SchemaField(\ndefault={},\ndescription=\"The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.\",\nadvanced="
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                1863,
                1982
            ],
            "children": [
                {
                    "type": "ClassBody",
                    "name": "",
                    "range": [
                        1869,
                        1982
                    ],
                    "children": [
                        {
                            "type": "FieldDecl",
                            "name": "dictionary",
                            "range": [
                                1870,
                                1893
                            ],
                            "children": [],
                            "content": "(BlockSchema):\ndictionary:dict[Any,Any]=SchemaField(\ndefault={},\ndescription"
                        },
                        {
                            "type": "FieldDecl",
                            "name": "key",
                            "range": [
                                1895,
                                1922
                            ],
                            "children": [],
                            "content": "\"The dictionary to add the entry to. If not provided, a new dictionary will be created.\",\n)\nkey:str=SchemaField(\ndefault=\"\",\ndescription=\"The key for the new entry.\",\nplaceholder=\"new_key\",\nadvanced"
                        },
                        {
                            "type": "FieldDecl",
                            "name": "value",
                            "range": [
                                1924,
                                1951
                            ],
                            "children": [],
                            "content": "False,\n)\nvalue:Any=SchemaField(\ndefault=None,\ndescription=\"The value for the new entry.\",\nplaceholder=\"new_value\",\nadvanced"
                        },
                        {
                            "type": "FieldDecl",
                            "name": "entries",
                            "range": [
                                1953,
                                1981
                            ],
                            "children": [],
                            "content": "False,\n)\nentries:dict[Any,Any]=SchemaField(\ndefault={},\ndescription=\"The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.\",\nadvanced"
                        }
                    ],
                    "content": "Input(BlockSchema):\ndictionary:dict[Any,Any]=SchemaField(\ndefault={},\ndescription=\"The dictionary to add the entry to. If not provided, a new dictionary will be created.\",\n)\nkey:str=SchemaField(\ndefault=\"\",\ndescription=\"The key for the new entry.\",\nplaceholder=\"new_key\",\nadvanced=False,\n)\nvalue:Any=SchemaField(\ndefault=None,\ndescription=\"The value for the new entry.\",\nplaceholder=\"new_value\",\nadvanced=False,\n)\nentries:dict[Any,Any]=SchemaField(\ndefault={},\ndescription=\"The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.\",\nadvanced="
                }
            ],
            "content": "(Block):\nclass Input(BlockSchema):\ndictionary:dict[Any,Any]=SchemaField(\ndefault={},\ndescription=\"The dictionary to add the entry to. If not provided, a new dictionary will be created.\",\n)\nkey:str=SchemaField(\ndefault=\"\",\ndescription=\"The key for the new entry.\",\nplaceholder=\"new_key\",\nadvanced=False,\n)\nvalue:Any=SchemaField(\ndefault=None,\ndescription=\"The value for the new entry.\",\nplaceholder=\"new_value\",\nadvanced=False,\n)\nentries:dict[Any,Any]=SchemaField(\ndefault={},\ndescription=\"The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.\",\nadvanced="
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                1984,
                2198
            ],
            "children": [
                {
                    "type": "ClassBody",
                    "name": "",
                    "range": [
                        1990,
                        2198
                    ],
                    "children": [
                        {
                            "type": "FieldDecl",
                            "name": "updated_dictionary",
                            "range": [
                                1991,
                                2002
                            ],
                            "children": [],
                            "content": "(BlockSchema):\nupdated_dictionary:dict=SchemaField(\n"
                        },
                        {
                            "type": "FieldDecl",
                            "name": "error",
                            "range": [
                                2004,
                                2013
                            ],
                            "children": [],
                            "content": "=\"The dictionary with the new entry added.\"\n)\nerror:str=SchemaField"
                        }
                    ],
                    "content": "Output(BlockSchema):\nupdated_dictionary:dict=SchemaField(\ndescription=\"The dictionary with the new entry added.\"\n)\nerror:str=SchemaField(description=\"Error message if the operation failed.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"31d1064e-7446-4693-a7d4-65e5ca1180d1\",\ndescription=\"Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.\",\ncategories={BlockCategory.BASIC},\ninput_schema=AddToDictionaryBlock.Input,\noutput_schema=AddToDictionaryBlock.Output,\ntest_input=[\n{\n\"dictionary\":{\"existing_key\":\"existing_value\"},\n\"key\":\"new_key\",\n\"value\":\"new_value\",\n},\n{\"key\":\"first_key\",\"value\":\"first_value\"},\n{\n\"dictionary\":{\"existing_key\":\"existing_value\"},\n\"entries\":{\"new_key\":\"new_value\",\"first_key\":\"first_value\"},\n},\n],\ntest_output=[\n(\n\"updated_dictionary\",\n{\"existing_key\":\"existing_value\",\"new_key\":\"new_value\"},\n),\n(\"updated_dictionary\",{\"first_key\":\"first_value\"}),\n(\n\"updated_dictionary\",\n{\n\"existing_key\":\"existing_value\",\n\"new_key\":\"new_value\",\n\"first_key\":\"first_value\",\n},\n),\n"
                }
            ],
            "content": ",\n)\n\nclass Output(BlockSchema):\nupdated_dictionary:dict=SchemaField(\ndescription=\"The dictionary with the new entry added.\"\n)\nerror:str=SchemaField(description=\"Error message if the operation failed.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"31d1064e-7446-4693-a7d4-65e5ca1180d1\",\ndescription=\"Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.\",\ncategories={BlockCategory.BASIC},\ninput_schema=AddToDictionaryBlock.Input,\noutput_schema=AddToDictionaryBlock.Output,\ntest_input=[\n{\n\"dictionary\":{\"existing_key\":\"existing_value\"},\n\"key\":\"new_key\",\n\"value\":\"new_value\",\n},\n{\"key\":\"first_key\",\"value\":\"first_value\"},\n{\n\"dictionary\":{\"existing_key\":\"existing_value\"},\n\"entries\":{\"new_key\":\"new_value\",\"first_key\":\"first_value\"},\n},\n],\ntest_output=[\n(\n\"updated_dictionary\",\n{\"existing_key\":\"existing_value\",\"new_key\":\"new_value\"},\n),\n(\"updated_dictionary\",{\"first_key\":\"first_value\"}),\n(\n\"updated_dictionary\",\n{\n\"existing_key\":\"existing_value\",\n\"new_key\":\"new_value\",\n\"first_key\":\"first_value\",\n},\n),\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                2016,
                2198
            ],
            "children": [
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        2022,
                        2198
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                2023,
                                2028
                            ],
                            "children": [],
                            "content": "(self):\nsuper"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                2030,
                                2033
                            ],
                            "children": [],
                            "content": ").__init__("
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                2035,
                                2038
                            ],
                            "children": [],
                            "content": "id=\"31d1064e-7446-4693-a7d4-65e5ca1180d1\","
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                2040,
                                2046
                            ],
                            "children": [],
                            "content": "description=\"Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.\",\ncategories="
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                2049,
                                2054
                            ],
                            "children": [],
                            "content": ".BASIC},\ninput_schema"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                2056,
                                2061
                            ],
                            "children": [],
                            "content": "AddToDictionaryBlock.Input,\noutput_schema"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                2063,
                                2129
                            ],
                            "children": [],
                            "content": "AddToDictionaryBlock.Output,\ntest_input=[\n{\n\"dictionary\":{\"existing_key\":\"existing_value\"},\n\"key\":\"new_key\",\n\"value\":\"new_value\",\n},\n{\"key\":\"first_key\",\"value\":\"first_value\"},\n{\n\"dictionary\":{\"existing_key\":\"existing_value\"},\n\"entries\":{\"new_key\":\"new_value\",\"first_key\":\"first_value\"},"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                2132,
                                2194
                            ],
                            "children": [],
                            "content": ",\n],\ntest_output=[\n(\n\"updated_dictionary\",\n{\"existing_key\":\"existing_value\",\"new_key\":\"new_value\"},\n),\n(\"updated_dictionary\",{\"first_key\":\"first_value\"}),\n(\n\"updated_dictionary\",\n{\n\"existing_key\":\"existing_value\",\n\"new_key\":\"new_value\",\n\"first_key\":\"first_value\",\n},"
                        }
                    ],
                    "content": "__init__(self):\nsuper().__init__(\nid=\"31d1064e-7446-4693-a7d4-65e5ca1180d1\",\ndescription=\"Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.\",\ncategories={BlockCategory.BASIC},\ninput_schema=AddToDictionaryBlock.Input,\noutput_schema=AddToDictionaryBlock.Output,\ntest_input=[\n{\n\"dictionary\":{\"existing_key\":\"existing_value\"},\n\"key\":\"new_key\",\n\"value\":\"new_value\",\n},\n{\"key\":\"first_key\",\"value\":\"first_value\"},\n{\n\"dictionary\":{\"existing_key\":\"existing_value\"},\n\"entries\":{\"new_key\":\"new_value\",\"first_key\":\"first_value\"},\n},\n],\ntest_output=[\n(\n\"updated_dictionary\",\n{\"existing_key\":\"existing_value\",\"new_key\":\"new_value\"},\n),\n(\"updated_dictionary\",{\"first_key\":\"first_value\"}),\n(\n\"updated_dictionary\",\n{\n\"existing_key\":\"existing_value\",\n\"new_key\":\"new_value\",\n\"first_key\":\"first_value\",\n},\n),\n"
                }
            ],
            "content": "=\"Error message if the operation failed.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"31d1064e-7446-4693-a7d4-65e5ca1180d1\",\ndescription=\"Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.\",\ncategories={BlockCategory.BASIC},\ninput_schema=AddToDictionaryBlock.Input,\noutput_schema=AddToDictionaryBlock.Output,\ntest_input=[\n{\n\"dictionary\":{\"existing_key\":\"existing_value\"},\n\"key\":\"new_key\",\n\"value\":\"new_value\",\n},\n{\"key\":\"first_key\",\"value\":\"first_value\"},\n{\n\"dictionary\":{\"existing_key\":\"existing_value\"},\n\"entries\":{\"new_key\":\"new_value\",\"first_key\":\"first_value\"},\n},\n],\ntest_output=[\n(\n\"updated_dictionary\",\n{\"existing_key\":\"existing_value\",\"new_key\":\"new_value\"},\n),\n(\"updated_dictionary\",{\"first_key\":\"first_value\"}),\n(\n\"updated_dictionary\",\n{\n\"existing_key\":\"existing_value\",\n\"new_key\":\"new_value\",\n\"first_key\":\"first_value\",\n},\n),\n"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                2200,
                2281
            ],
            "children": [
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        2217,
                        2281
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "updated_dict",
                            "range": [
                                2218,
                                2227
                            ],
                            "children": [],
                            "content": "->BlockOutput:\nupdated_dict=input_data.dictionary"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                2229,
                                2252
                            ],
                            "children": [],
                            "content": "copy()\n\nif input_data.value is not None and input_data.key:\nupdated_dict[input_data.key]"
                        },
                        {
                            "type": "ForStatement",
                            "name": "",
                            "range": [
                                2254,
                                2274
                            ],
                            "children": [],
                            "content": "input_data.value\n\nfor key,value in input_data.entries.items():\nupdated_dict["
                        },
                        {
                            "type": "YieldStatement",
                            "name": "",
                            "range": [
                                2276,
                                2280
                            ],
                            "children": [],
                            "content": "]=value\n\n"
                        }
                    ],
                    "content": ")->BlockOutput:\nupdated_dict=input_data.dictionary.copy()\n\nif input_data.value is not None and input_data.key:\nupdated_dict[input_data.key]=input_data.value\n\nfor key,value in input_data.entries.items():\nupdated_dict[key]=value\n\nyield"
                }
            ],
            "content": ",\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nupdated_dict=input_data.dictionary.copy()\n\nif input_data.value is not None and input_data.key:\nupdated_dict[input_data.key]=input_data.value\n\nfor key,value in input_data.entries.items():\nupdated_dict[key]=value\n\nyield"
        },
        {
            "type": "ClassDecl",
            "name": "AddToListBlock",
            "range": [
                2282,
                2396
            ],
            "children": [
                {
                    "type": "FieldDecl",
                    "name": "list",
                    "range": [
                        2296,
                        2322
                    ],
                    "children": [],
                    "content": "Input(BlockSchema):\nlist:List[Any]=SchemaField(\ndefault=[],\nadvanced=False,\n"
                },
                {
                    "type": "FieldDecl",
                    "name": "entry",
                    "range": [
                        2324,
                        2346
                    ],
                    "children": [],
                    "content": "=\"The list to add the entry to. If not provided, a new list will be created.\",\n)\nentry:Any=SchemaField(\ndescription=\"The entry to add to the list. Can be of any type (string, int, dict, etc.).\",\nadvanced=False,\n"
                },
                {
                    "type": "FieldDecl",
                    "name": "entries",
                    "range": [
                        2348,
                        2374
                    ],
                    "children": [],
                    "content": "=None,\n)\nentries:List[Any]=SchemaField(\ndefault=[],\ndescription=\"The entries to add to the list. This is the batch version of the `entry` field.\",\n"
                },
                {
                    "type": "FieldDecl",
                    "name": "position",
                    "range": [
                        2376,
                        2395
                    ],
                    "children": [],
                    "content": "=True,\n)\nposition:int|None=SchemaField(\ndefault=None,\n"
                }
            ],
            "content": "\"updated_dictionary\",updated_dict\n\n\nclass AddToListBlock(Block):\nclass Input(BlockSchema):\nlist:List[Any]=SchemaField(\ndefault=[],\nadvanced=False,\ndescription=\"The list to add the entry to. If not provided, a new list will be created.\",\n)\nentry:Any=SchemaField(\ndescription=\"The entry to add to the list. Can be of any type (string, int, dict, etc.).\",\nadvanced=False,\ndefault=None,\n)\nentries:List[Any]=SchemaField(\ndefault=[],\ndescription=\"The entries to add to the list. This is the batch version of the `entry` field.\",\nadvanced=True,\n)\nposition:int|None=SchemaField(\ndefault=None,\ndescription"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                2398,
                2431
            ],
            "children": [
                {
                    "type": "FieldDecl",
                    "name": "updated_list",
                    "range": [
                        2405,
                        2419
                    ],
                    "children": [],
                    "content": "Output(BlockSchema):\nupdated_list:List[Any]=SchemaField("
                },
                {
                    "type": "FieldDecl",
                    "name": "error",
                    "range": [
                        2421,
                        2430
                    ],
                    "children": [],
                    "content": "description=\"The list with the new entry added.\"\n)\nerror:str="
                }
            ],
            "content": "\"The position to insert the new entry. If not provided, the entry will be appended to the end of the list.\",\n)\n\nclass Output(BlockSchema):\nupdated_list:List[Any]=SchemaField(\ndescription=\"The list with the new entry added.\"\n)\nerror:str=SchemaField"
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                2398,
                2431
            ],
            "children": [],
            "content": "\"The position to insert the new entry. If not provided, the entry will be appended to the end of the list.\",\n)\n\nclass Output(BlockSchema):\nupdated_list:List[Any]=SchemaField(\ndescription=\"The list with the new entry added.\"\n)\nerror:str=SchemaField"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                2433,
                2660
            ],
            "children": [
                {
                    "type": "SuperCall",
                    "name": "super",
                    "range": [
                        2440,
                        2445
                    ],
                    "children": [],
                    "content": "__init__(self):\n"
                },
                {
                    "type": "Assignment",
                    "name": "id",
                    "range": [
                        2447,
                        2450
                    ],
                    "children": [],
                    "content": "().__init__"
                },
                {
                    "type": "Assignment",
                    "name": "description",
                    "range": [
                        2452,
                        2455
                    ],
                    "children": [],
                    "content": "\nid=\"aeb08fc1-2fc1-4141-bc8e-f758f183a822\""
                },
                {
                    "type": "Assignment",
                    "name": "categories",
                    "range": [
                        2457,
                        2464
                    ],
                    "children": [],
                    "content": "\ndescription=\"Adds a new entry to a list. The entry can be of any type. If no list is provided, a new one is created.\",\ncategories="
                },
                {
                    "type": "Assignment",
                    "name": "input_schema",
                    "range": [
                        2466,
                        2471
                    ],
                    "children": [],
                    "content": "BlockCategory.BASIC},\n"
                },
                {
                    "type": "Assignment",
                    "name": "output_schema",
                    "range": [
                        2473,
                        2478
                    ],
                    "children": [],
                    "content": "=AddToListBlock.Input,\n"
                },
                {
                    "type": "Assignment",
                    "name": "test_input",
                    "range": [
                        2480,
                        2576
                    ],
                    "children": [],
                    "content": "=AddToListBlock.Output,\ntest_input=[\n{\n\"list\":[1,\"string\",{\"existing_key\":\"existing_value\"}],\n\"entry\":{\"new_key\":\"new_value\"},\n\"position\":1,\n},\n{\"entry\":\"first_entry\"},\n{\"list\":[\"a\",\"b\",\"c\"],\"entry\":\"d\"},\n{\n\"entry\":\"e\",\n\"entries\":[\"f\",\"g\"],\n\"list\":[\"a\",\"b\"],\n\"position\":1,"
                },
                {
                    "type": "Assignment",
                    "name": "test_output",
                    "range": [
                        2578,
                        2659
                    ],
                    "children": [],
                    "content": "},\n],\ntest_output=[\n(\n\"updated_list\",\n[\n1,\n{\"new_key\":\"new_value\"},\n\"string\",\n{\"existing_key\":\"existing_value\"},\n],\n),\n(\"updated_list\",[\"first_entry\"]),\n(\"updated_list\",[\"a\",\"b\",\"c\",\"d\"]),\n(\"updated_list\",[\"a\",\"f\",\"g\",\"e\",\"b\"])"
                }
            ],
            "content": "description=\"Error message if the operation failed.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"aeb08fc1-2fc1-4141-bc8e-f758f183a822\",\ndescription=\"Adds a new entry to a list. The entry can be of any type. If no list is provided, a new one is created.\",\ncategories={BlockCategory.BASIC},\ninput_schema=AddToListBlock.Input,\noutput_schema=AddToListBlock.Output,\ntest_input=[\n{\n\"list\":[1,\"string\",{\"existing_key\":\"existing_value\"}],\n\"entry\":{\"new_key\":\"new_value\"},\n\"position\":1,\n},\n{\"entry\":\"first_entry\"},\n{\"list\":[\"a\",\"b\",\"c\"],\"entry\":\"d\"},\n{\n\"entry\":\"e\",\n\"entries\":[\"f\",\"g\"],\n\"list\":[\"a\",\"b\"],\n\"position\":1,\n},\n],\ntest_output=[\n(\n\"updated_list\",\n[\n1,\n{\"new_key\":\"new_value\"},\n\"string\",\n{\"existing_key\":\"existing_value\"},\n],\n),\n(\"updated_list\",[\"first_entry\"]),\n(\"updated_list\",[\"a\",\"b\",\"c\",\"d\"]),\n(\"updated_list\",[\"a\",\"f\",\"g\",\"e\",\"b\"]),"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                2662,
                2760
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "entries_added",
                    "range": [
                        2680,
                        2688
                    ],
                    "children": [],
                    "content": ")->BlockOutput:\nentries_added=input_data"
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        2690,
                        2704
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "input_data.entry",
                            "range": [
                                2691,
                                2694
                            ],
                            "children": [],
                            "content": ".copy()"
                        },
                        {
                            "type": "CallExpression",
                            "name": "append",
                            "range": [
                                2697,
                                2703
                            ],
                            "children": [],
                            "content": "input_data.entry:\nentries_added."
                        }
                    ],
                    "content": "entries.copy()\nif input_data.entry:\nentries_added.append"
                },
                {
                    "type": "Assignment",
                    "name": "updated_list",
                    "range": [
                        2706,
                        2715
                    ],
                    "children": [],
                    "content": "input_data.entry)\n\nupdated_list=input_data."
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        2716,
                        2745
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "pos",
                            "range": [
                                2718,
                                2724
                            ],
                            "children": [],
                            "content": "copy()\nif(pos"
                        },
                        {
                            "type": "BinaryExpression",
                            "name": "updated_list[:pos] + entries_added + updated_list[pos:]",
                            "range": [
                                2730,
                                2744
                            ],
                            "children": [],
                            "content": ")is not None:\nupdated_list=updated_list[:pos]+entries_added"
                        }
                    ],
                    "content": "list.copy()\nif(pos:=input_data.position)is not None:\nupdated_list=updated_list[:pos]+entries_added+"
                },
                {
                    "type": "ElseStatement",
                    "name": "else",
                    "range": [
                        2746,
                        2753
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "updated_list += entries_added",
                            "range": [
                                2749,
                                2752
                            ],
                            "children": [],
                            "content": ":]\nelse"
                        }
                    ],
                    "content": "updated_list[pos:]\nelse:"
                },
                {
                    "type": "YieldStatement",
                    "name": "yield",
                    "range": [
                        2755,
                        2759
                    ],
                    "children": [],
                    "content": "updated_list+=entries_added\n"
                }
            ],
            "content": "],\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nentries_added=input_data.entries.copy()\nif input_data.entry:\nentries_added.append(input_data.entry)\n\nupdated_list=input_data.list.copy()\nif(pos:=input_data.position)is not None:\nupdated_list=updated_list[:pos]+entries_added+updated_list[pos:]\nelse:\nupdated_list+=entries_added\n\n"
        },
        {
            "type": "ClassDecl",
            "name": "NoteBlock",
            "range": [
                2761,
                2767
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "Block",
                    "range": [
                        2763,
                        2765
                    ],
                    "children": [],
                    "content": ",updated_list\n"
                }
            ],
            "content": "yield \"updated_list\",updated_list\n\n\n"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                2768,
                2774
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BlockSchema",
                    "range": [
                        2770,
                        2772
                    ],
                    "children": [],
                    "content": "(Block)"
                },
                {
                    "type": "FieldDecl",
                    "name": "text",
                    "range": [
                        2775,
                        2784
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                2777,
                                2777
                            ],
                            "children": [],
                            "content": "("
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                2778,
                                2778
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SchemaField",
                                    "range": [
                                        2779,
                                        2784
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                2781,
                                                2783
                                            ],
                                            "children": [],
                                            "content": "\ntext:"
                                        }
                                    ],
                                    "content": "):\ntext:str"
                                }
                            ],
                            "content": "BlockSchema"
                        }
                    ],
                    "content": "class Input(BlockSchema):\ntext:str"
                }
            ],
            "content": "class NoteBlock(Block):\n"
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                2787,
                2793
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BlockSchema",
                    "range": [
                        2789,
                        2791
                    ],
                    "children": [],
                    "content": "=\"The text to display in the sticky note.\")"
                },
                {
                    "type": "FieldDecl",
                    "name": "output",
                    "range": [
                        2794,
                        2803
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                2796,
                                2796
                            ],
                            "children": [],
                            "content": "("
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                2797,
                                2797
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SchemaField",
                                    "range": [
                                        2798,
                                        2803
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                2800,
                                                2802
                                            ],
                                            "children": [],
                                            "content": "\noutput:"
                                        }
                                    ],
                                    "content": "):\noutput:str"
                                }
                            ],
                            "content": "BlockSchema"
                        }
                    ],
                    "content": "class Output(BlockSchema):\noutput:str"
                }
            ],
            "content": "(description=\"The text to display in the sticky note.\")\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                2806,
                2884
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        2809,
                        2809
                    ],
                    "children": [],
                    "content": "\"The text to display in the sticky note.\""
                },
                {
                    "type": "CallExpression",
                    "name": "super",
                    "range": [
                        2813,
                        2883
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "id",
                            "range": [
                                2820,
                                2822
                            ],
                            "children": [],
                            "content": "super()"
                        },
                        {
                            "type": "Argument",
                            "name": "description",
                            "range": [
                                2825,
                                2827
                            ],
                            "children": [],
                            "content": "(\nid"
                        },
                        {
                            "type": "Argument",
                            "name": "categories",
                            "range": [
                                2830,
                                2836
                            ],
                            "children": [],
                            "content": ",\ndescription=\"This block is used to display a sticky note with the given text.\",\n"
                        },
                        {
                            "type": "Argument",
                            "name": "input_schema",
                            "range": [
                                2839,
                                2844
                            ],
                            "children": [],
                            "content": "{BlockCategory.BASIC},"
                        },
                        {
                            "type": "Argument",
                            "name": "output_schema",
                            "range": [
                                2846,
                                2850
                            ],
                            "children": [],
                            "content": "input_schema=NoteBlock.Input"
                        },
                        {
                            "type": "Argument",
                            "name": "test_input",
                            "range": [
                                2853,
                                2859
                            ],
                            "children": [],
                            "content": "output_schema=NoteBlock.Output,\n"
                        },
                        {
                            "type": "Argument",
                            "name": "test_output",
                            "range": [
                                2862,
                                2873
                            ],
                            "children": [],
                            "content": "{\"text\":\"Hello, World!\"},\ntest_output=[\n("
                        },
                        {
                            "type": "Argument",
                            "name": "block_type",
                            "range": [
                                2876,
                                2880
                            ],
                            "children": [],
                            "content": "\"Hello, World!\"),\n]"
                        }
                    ],
                    "content": "def __init__(self):\nsuper().__init__(\nid=\"cc10ff7b-7753-4ff2-9af6-9399b1a7eddc\",\ndescription=\"This block is used to display a sticky note with the given text.\",\ncategories={BlockCategory.BASIC},\ninput_schema=NoteBlock.Input,\noutput_schema=NoteBlock.Output,\ntest_input={\"text\":\"Hello, World!\"},\ntest_output=[\n(\"output\",\"Hello, World!\"),\n],\nblock_type"
                }
            ],
            "content": "(description=\"The text to display in the sticky note.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"cc10ff7b-7753-4ff2-9af6-9399b1a7eddc\",\ndescription=\"This block is used to display a sticky note with the given text.\",\ncategories={BlockCategory.BASIC},\ninput_schema=NoteBlock.Input,\noutput_schema=NoteBlock.Output,\ntest_input={\"text\":\"Hello, World!\"},\ntest_output=[\n(\"output\",\"Hello, World!\"),\n],\nblock_type="
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                2886,
                2911
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        2889,
                        2889
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        2891,
                        2893
                    ],
                    "children": [],
                    "content": "\n\ndef"
                },
                {
                    "type": "Parameter",
                    "name": "kwargs",
                    "range": [
                        2897,
                        2897
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "ReturnType",
                    "name": "BlockOutput",
                    "range": [
                        2901,
                        2901
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "YieldStatement",
                    "name": "yield",
                    "range": [
                        2904,
                        2910
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"output\"",
                            "range": [
                                2905,
                                2905
                            ],
                            "children": [],
                            "content": ")"
                        },
                        {
                            "type": "MemberAccess",
                            "name": "input_data.text",
                            "range": [
                                2907,
                                2909
                            ],
                            "children": [],
                            "content": ">BlockOutput:"
                        }
                    ],
                    "content": "kwargs)->BlockOutput:\n"
                }
            ],
            "content": ".NOTE,\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nyield"
        },
        {
            "type": "ClassDecl",
            "name": "CreateDictionaryBlock",
            "range": [
                2912,
                2918
            ],
            "children": [
                {
                    "type": "ClassInheritance",
                    "name": "Block",
                    "range": [
                        2914,
                        2916
                    ],
                    "children": [],
                    "content": "input_data.text"
                }
            ],
            "content": "\"output\",input_data.text\n\n"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                2919,
                2925
            ],
            "children": [
                {
                    "type": "ClassInheritance",
                    "name": "BlockSchema",
                    "range": [
                        2921,
                        2923
                    ],
                    "children": [],
                    "content": "CreateDictionaryBlock(Block"
                }
            ],
            "content": "\nclass CreateDictionaryBlock(Block):"
        },
        {
            "type": "VariableDecl",
            "name": "values",
            "range": [
                2926,
                2949
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "dict[str, Any]",
                    "range": [
                        2928,
                        2933
                    ],
                    "children": [],
                    "content": "Input(BlockSchema):\n"
                },
                {
                    "type": "Assignment",
                    "name": "SchemaField",
                    "range": [
                        2935,
                        2948
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "description",
                            "range": [
                                2938,
                                2940
                            ],
                            "children": [],
                            "content": "str,Any"
                        },
                        {
                            "type": "Argument",
                            "name": "placeholder",
                            "range": [
                                2943,
                                2945
                            ],
                            "children": [],
                            "content": "SchemaField(\n"
                        }
                    ],
                    "content": ":dict[str,Any]=SchemaField(\ndescription=\"Key-value pairs to create the dictionary with\""
                }
            ],
            "content": "\nclass Input(BlockSchema):\nvalues:dict[str,Any]=SchemaField(\ndescription=\"Key-value pairs to create the dictionary with\","
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                2951,
                2957
            ],
            "children": [
                {
                    "type": "ClassInheritance",
                    "name": "BlockSchema",
                    "range": [
                        2953,
                        2955
                    ],
                    "children": [],
                    "content": "\"e.g., {'name': 'Alice', 'age': 25}\",\n"
                }
            ],
            "content": "placeholder=\"e.g., {'name': 'Alice', 'age': 25}\",\n)\n"
        },
        {
            "type": "VariableDecl",
            "name": "dictionary",
            "range": [
                2958,
                2975
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "dict[str, Any]",
                    "range": [
                        2960,
                        2965
                    ],
                    "children": [],
                    "content": "Output(BlockSchema):\n"
                },
                {
                    "type": "Assignment",
                    "name": "SchemaField",
                    "range": [
                        2967,
                        2974
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "description",
                            "range": [
                                2970,
                                2972
                            ],
                            "children": [],
                            "content": "str,Any"
                        }
                    ],
                    "content": ":dict[str,Any]="
                }
            ],
            "content": "\nclass Output(BlockSchema):\ndictionary:dict[str,Any]=SchemaField"
        },
        {
            "type": "VariableDecl",
            "name": "error",
            "range": [
                2976,
                2988
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        2978,
                        2979
                    ],
                    "children": [],
                    "content": "description="
                },
                {
                    "type": "Assignment",
                    "name": "SchemaField",
                    "range": [
                        2980,
                        2987
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "description",
                            "range": [
                                2983,
                                2985
                            ],
                            "children": [],
                            "content": "\nerror:"
                        }
                    ],
                    "content": "\"The created dictionary containing the specified key-value pairs\"\n)\nerror:str="
                }
            ],
            "content": "(\ndescription=\"The created dictionary containing the specified key-value pairs\"\n)\nerror:str=SchemaField"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                2990,
                3158
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        2993,
                        2994
                    ],
                    "children": [],
                    "content": "\"Error message if dictionary creation failed\"\n"
                },
                {
                    "type": "SuperCall",
                    "name": "super",
                    "range": [
                        2997,
                        3002
                    ],
                    "children": [],
                    "content": "\ndef __init__(self)"
                },
                {
                    "type": "Assignment",
                    "name": "id",
                    "range": [
                        3004,
                        3006
                    ],
                    "children": [],
                    "content": "\nsuper("
                },
                {
                    "type": "Assignment",
                    "name": "description",
                    "range": [
                        3009,
                        3011
                    ],
                    "children": [],
                    "content": "__init__(\n"
                },
                {
                    "type": "Assignment",
                    "name": "categories",
                    "range": [
                        3014,
                        3020
                    ],
                    "children": [],
                    "content": "\"b924ddf4-de4f-4b56-9a85-358930dcbc91\",\ndescription=\"Creates a dictionary with the specified key-value pairs. Use this when you know all the values you want to add upfront.\","
                },
                {
                    "type": "Assignment",
                    "name": "input_schema",
                    "range": [
                        3023,
                        3028
                    ],
                    "children": [],
                    "content": "={BlockCategory.DATA}"
                },
                {
                    "type": "Assignment",
                    "name": "output_schema",
                    "range": [
                        3030,
                        3035
                    ],
                    "children": [],
                    "content": "\ninput_schema=CreateDictionaryBlock.Input"
                },
                {
                    "type": "Assignment",
                    "name": "test_input",
                    "range": [
                        3037,
                        3093
                    ],
                    "children": [],
                    "content": "\noutput_schema=CreateDictionaryBlock.Output,\ntest_input=[\n{\n\"values\":{\"name\":\"Alice\",\"age\":25,\"city\":\"New York\"},\n},\n{\n\"values\":{\"numbers\":[1,2,3],\"active\":True,\"score\":95."
                },
                {
                    "type": "Assignment",
                    "name": "test_output",
                    "range": [
                        3096,
                        3154
                    ],
                    "children": [],
                    "content": ",\n},\n],\ntest_output=[\n(\n\"dictionary\",\n{\"name\":\"Alice\",\"age\":25,\"city\":\"New York\"},\n),\n(\n\"dictionary\",\n{\"numbers\":[1,2,3],\"active\":True,\"score\":95."
                }
            ],
            "content": "\ndescription=\"Error message if dictionary creation failed\"\n)\n\ndef __init__(self):\nsuper().__init__(\nid=\"b924ddf4-de4f-4b56-9a85-358930dcbc91\",\ndescription=\"Creates a dictionary with the specified key-value pairs. Use this when you know all the values you want to add upfront.\",\ncategories={BlockCategory.DATA},\ninput_schema=CreateDictionaryBlock.Input,\noutput_schema=CreateDictionaryBlock.Output,\ntest_input=[\n{\n\"values\":{\"name\":\"Alice\",\"age\":25,\"city\":\"New York\"},\n},\n{\n\"values\":{\"numbers\":[1,2,3],\"active\":True,\"score\":95.5},\n},\n],\ntest_output=[\n(\n\"dictionary\",\n{\"name\":\"Alice\",\"age\":25,\"city\":\"New York\"},\n),\n(\n\"dictionary\",\n{\"numbers\":[1,2,3],\"active\":True,\"score\":95.5},\n"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                3160,
                3210
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        3163,
                        3164
                    ],
                    "children": [],
                    "content": ",\n"
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        3165,
                        3167
                    ],
                    "children": [],
                    "content": ")\n\n"
                },
                {
                    "type": "Parameter",
                    "name": "kwargs",
                    "range": [
                        3169,
                        3171
                    ],
                    "children": [],
                    "content": "run(self"
                },
                {
                    "type": "ReturnType",
                    "name": "BlockOutput",
                    "range": [
                        3174,
                        3175
                    ],
                    "children": [],
                    "content": ":Input"
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        3178,
                        3209
                    ],
                    "children": [
                        {
                            "type": "YieldExpression",
                            "name": "yield",
                            "range": [
                                3191,
                                3197
                            ],
                            "children": [],
                            "content": "values are already validated by Pydantic schema"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except",
                            "range": [
                                3198,
                                3209
                            ],
                            "children": [
                                {
                                    "type": "YieldExpression",
                                    "name": "yield",
                                    "range": [
                                        3204,
                                        3208
                                    ],
                                    "children": [],
                                    "content": "values\nexcept Exception as"
                                }
                            ],
                            "content": "\nyield \"dictionary\",input_data.values\nexcept Exception as e"
                        }
                    ],
                    "content": "*kwargs)->BlockOutput:\ntry:\n#The values are already validated by Pydantic schema\nyield \"dictionary\",input_data.values\nexcept Exception as e"
                }
            ],
            "content": ",\n],\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\ntry:\n#The values are already validated by Pydantic schema\nyield \"dictionary\",input_data.values\nexcept Exception as e:"
        },
        {
            "type": "ClassDecl",
            "name": "CreateListBlock",
            "range": [
                3211,
                3217
            ],
            "children": [
                {
                    "type": "ClassBody",
                    "name": "",
                    "range": [
                        3213,
                        3215
                    ],
                    "children": [],
                    "content": "\"error\",f"
                }
            ],
            "content": "\nyield \"error\",f \"Failed to create dictionary: {str(e)}\"\n"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                3218,
                3224
            ],
            "children": [
                {
                    "type": "ClassBody",
                    "name": "",
                    "range": [
                        3220,
                        3222
                    ],
                    "children": [],
                    "content": "class CreateListBlock("
                }
            ],
            "content": "\n\nclass CreateListBlock(Block)"
        },
        {
            "type": "VariableDecl",
            "name": "values",
            "range": [
                3225,
                3245
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        3226,
                        3230
                    ],
                    "children": [],
                    "content": "\nclass Input(BlockSchema"
                },
                {
                    "type": "Assignment",
                    "name": "",
                    "range": [
                        3231,
                        3245
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "",
                            "range": [
                                3232,
                                3245
                            ],
                            "children": [
                                {
                                    "type": "Arguments",
                                    "name": "",
                                    "range": [
                                        3233,
                                        3245
                                    ],
                                    "children": [
                                        {
                                            "type": "KeywordArgument",
                                            "name": "description",
                                            "range": [
                                                3235,
                                                3237
                                            ],
                                            "children": [],
                                            "content": ":List["
                                        },
                                        {
                                            "type": "KeywordArgument",
                                            "name": "placeholder",
                                            "range": [
                                                3240,
                                                3242
                                            ],
                                            "children": [],
                                            "content": "=SchemaField("
                                        }
                                    ],
                                    "content": "\nvalues:List[Any]=SchemaField(\ndescription="
                                }
                            ],
                            "content": ":\nvalues:List[Any]=SchemaField(\ndescription="
                        }
                    ],
                    "content": "):\nvalues:List[Any]=SchemaField(\ndescription="
                }
            ],
            "content": ":\nclass Input(BlockSchema):\nvalues:List[Any]=SchemaField(\ndescription="
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                3248,
                3254
            ],
            "children": [
                {
                    "type": "ClassBody",
                    "name": "",
                    "range": [
                        3250,
                        3252
                    ],
                    "children": [],
                    "content": "=\"e.g., ['Alice', 25, True]\","
                }
            ],
            "content": "\nplaceholder=\"e.g., ['Alice', 25, True]\",\n)"
        },
        {
            "type": "VariableDecl",
            "name": "list",
            "range": [
                3255,
                3269
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        3256,
                        3260
                    ],
                    "children": [],
                    "content": "\nclass Output(BlockSchema"
                },
                {
                    "type": "Assignment",
                    "name": "",
                    "range": [
                        3261,
                        3269
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "",
                            "range": [
                                3262,
                                3269
                            ],
                            "children": [
                                {
                                    "type": "Arguments",
                                    "name": "",
                                    "range": [
                                        3263,
                                        3269
                                    ],
                                    "children": [
                                        {
                                            "type": "KeywordArgument",
                                            "name": "description",
                                            "range": [
                                                3265,
                                                3267
                                            ],
                                            "children": [],
                                            "content": ":List["
                                        }
                                    ],
                                    "content": "\nlist:List[Any]"
                                }
                            ],
                            "content": ":\nlist:List[Any]"
                        }
                    ],
                    "content": "):\nlist:List[Any]"
                }
            ],
            "content": "\n\nclass Output(BlockSchema):\nlist:List[Any]"
        },
        {
            "type": "VariableDecl",
            "name": "error",
            "range": [
                3271,
                3280
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        3272,
                        3274
                    ],
                    "children": [],
                    "content": "(\ndescription"
                },
                {
                    "type": "Assignment",
                    "name": "",
                    "range": [
                        3275,
                        3280
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "",
                            "range": [
                                3276,
                                3280
                            ],
                            "children": [
                                {
                                    "type": "Arguments",
                                    "name": "",
                                    "range": [
                                        3277,
                                        3280
                                    ],
                                    "children": [
                                        {
                                            "type": "KeywordArgument",
                                            "name": "description",
                                            "range": [
                                                3279,
                                                3280
                                            ],
                                            "children": [],
                                            "content": "\nerror"
                                        }
                                    ],
                                    "content": "\n)\nerror"
                                }
                            ],
                            "content": "\"The created list containing the specified values.\"\n)\nerror"
                        }
                    ],
                    "content": "=\"The created list containing the specified values.\"\n)\nerror"
                }
            ],
            "content": "SchemaField(\ndescription=\"The created list containing the specified values.\"\n)\nerror"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                3283,
                3427
            ],
            "children": [
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        3285,
                        3427
                    ],
                    "children": [
                        {
                            "type": "SuperCall",
                            "name": "",
                            "range": [
                                3290,
                                3295
                            ],
                            "children": [],
                            "content": "\n\ndef __init__(self"
                        },
                        {
                            "type": "KeywordArgument",
                            "name": "id",
                            "range": [
                                3297,
                                3299
                            ],
                            "children": [],
                            "content": ":\nsuper"
                        },
                        {
                            "type": "KeywordArgument",
                            "name": "description",
                            "range": [
                                3302,
                                3304
                            ],
                            "children": [],
                            "content": ".__init__("
                        },
                        {
                            "type": "KeywordArgument",
                            "name": "categories",
                            "range": [
                                3307,
                                3313
                            ],
                            "children": [],
                            "content": "=\"a912d5c7-6e00-4542-b2a9-8034136930e4\",\ndescription=\"Creates a list with the specified values. Use this when you know all the values you want to add upfront.\""
                        },
                        {
                            "type": "KeywordArgument",
                            "name": "input_schema",
                            "range": [
                                3316,
                                3321
                            ],
                            "children": [],
                            "content": "categories={BlockCategory.DATA"
                        },
                        {
                            "type": "KeywordArgument",
                            "name": "output_schema",
                            "range": [
                                3323,
                                3328
                            ],
                            "children": [],
                            "content": ",\ninput_schema=CreateListBlock."
                        },
                        {
                            "type": "KeywordArgument",
                            "name": "test_input",
                            "range": [
                                3330,
                                3374
                            ],
                            "children": [],
                            "content": ",\noutput_schema=CreateListBlock.Output,\ntest_input=[\n{\n\"values\":[\"Alice\",25,True],\n},\n{\n\"values\":[1,2,3,\"four\",{\"key\":"
                        },
                        {
                            "type": "KeywordArgument",
                            "name": "test_output",
                            "range": [
                                3377,
                                3423
                            ],
                            "children": [],
                            "content": "],\n},\n],\ntest_output=[\n(\n\"list\",\n[\"Alice\",25,True],\n),\n(\n\"list\",\n[1,2,3,\"four\",{\"key\":"
                        }
                    ],
                    "content": "(description=\"Error message if list creation failed.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"a912d5c7-6e00-4542-b2a9-8034136930e4\",\ndescription=\"Creates a list with the specified values. Use this when you know all the values you want to add upfront.\",\ncategories={BlockCategory.DATA},\ninput_schema=CreateListBlock.Input,\noutput_schema=CreateListBlock.Output,\ntest_input=[\n{\n\"values\":[\"Alice\",25,True],\n},\n{\n\"values\":[1,2,3,\"four\",{\"key\":\"value\"}],\n},\n],\ntest_output=[\n(\n\"list\",\n[\"Alice\",25,True],\n),\n(\n\"list\",\n[1,2,3,\"four\",{\"key\":\"value\"}],"
                }
            ],
            "content": "=SchemaField(description=\"Error message if list creation failed.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"a912d5c7-6e00-4542-b2a9-8034136930e4\",\ndescription=\"Creates a list with the specified values. Use this when you know all the values you want to add upfront.\",\ncategories={BlockCategory.DATA},\ninput_schema=CreateListBlock.Input,\noutput_schema=CreateListBlock.Output,\ntest_input=[\n{\n\"values\":[\"Alice\",25,True],\n},\n{\n\"values\":[1,2,3,\"four\",{\"key\":\"value\"}],\n},\n],\ntest_output=[\n(\n\"list\",\n[\"Alice\",25,True],\n),\n(\n\"list\",\n[1,2,3,\"four\",{\"key\":\"value\"}],"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                3429,
                3479
            ],
            "children": [
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        3431,
                        3479
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                3447,
                                3478
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        3449,
                                        3466
                                    ],
                                    "children": [
                                        {
                                            "type": "YieldStatement",
                                            "name": "",
                                            "range": [
                                                3460,
                                                3466
                                            ],
                                            "children": [],
                                            "content": "The values are already validated by Pydantic"
                                        }
                                    ],
                                    "content": "kwargs)->BlockOutput:\ntry:\n#The values are already validated by Pydantic"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "",
                                    "range": [
                                        3467,
                                        3478
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "",
                                            "range": [
                                                3472,
                                                3478
                                            ],
                                            "children": [
                                                {
                                                    "type": "YieldStatement",
                                                    "name": "",
                                                    "range": [
                                                        3473,
                                                        3478
                                                    ],
                                                    "children": [],
                                                    "content": ".values\nexcept Exception as"
                                                }
                                            ],
                                            "content": "input_data.values\nexcept Exception as"
                                        }
                                    ],
                                    "content": "schema\nyield \"list\",input_data.values\nexcept Exception as"
                                }
                            ],
                            "content": "**kwargs)->BlockOutput:\ntry:\n#The values are already validated by Pydantic schema\nyield \"list\",input_data.values\nexcept Exception as"
                        }
                    ],
                    "content": "\n],\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\ntry:\n#The values are already validated by Pydantic schema\nyield \"list\",input_data.values\nexcept Exception as e"
                }
            ],
            "content": "),\n],\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\ntry:\n#The values are already validated by Pydantic schema\nyield \"list\",input_data.values\nexcept Exception as e"
        }
    ],
    "content": "class StoreValueBlock(Block):\n\"\"\" \\n     This block allows you to provide a constant value as a block, in a stateless manner. \\n     The common use-case is simply pass the `input` data, it will `output` the same data. \\n     The block output will be static, the output can be consumed multiple times. \\n     \"\"\"\n\nclass Input(BlockSchema):\ninput:Any=SchemaField(\ndescription=\"Trigger the block to produce the output. \"\n\"The value is only used when `data` is None.\"\n)\ndata:Any=SchemaField(\ndescription=\"The constant data to be retained in the block. \"\n\"This value is passed as `output`.\",\ndefault=None,\n)\n\nclass Output(BlockSchema):\noutput:Any=SchemaField(description=\"The stored data retained in the block.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"1ff065e9-88e8-4358-9d82-8dc91f622ba9\",\ndescription=\"This block forwards an input value as output, allowing reuse without change.\",\ncategories={BlockCategory.BASIC},\ninput_schema=StoreValueBlock.Input,\noutput_schema=StoreValueBlock.Output,\ntest_input=[\n{\"input\":\"Hello, World!\"},\n{\"input\":\"Hello, World!\",\"data\":\"Existing Data\"},\n],\ntest_output=[\n(\"output\",\"Hello, World!\"),#No data provided,so trigger is returned\n(\"output\",\"Existing Data\"),#Data is provided,so data is returned.\n],\nstatic_output=True,\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nyield \"output\",input_data.data or input_data.input\n\n\nclass PrintToConsoleBlock(Block):\nclass Input(BlockSchema):\ntext:str=SchemaField(description=\"The text to print to the console.\")\n\nclass Output(BlockSchema):\nstatus:str=SchemaField(description=\"The status of the print operation.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"f3b1c1b2-4c4f-4f0d-8d2f-4c4f0d8d2f4c\",\ndescription=\"Print the given text to the console, this is used for a debugging purpose.\",\ncategories={BlockCategory.BASIC},\ninput_schema=PrintToConsoleBlock.Input,\noutput_schema=PrintToConsoleBlock.Output,\ntest_input={\"text\":\"Hello, World!\"},\ntest_output=(\"status\",\"printed\"),\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nprint(\">>>>> Print: \",input_data.text)\nyield \"status\",\"printed\"\n\n\nclass FindInDictionaryBlock(Block):\nclass Input(BlockSchema):\ninput:Any=SchemaField(description=\"Dictionary to lookup from\")\nkey:str|int=SchemaField(description=\"Key to lookup in the dictionary\")\n\nclass Output(BlockSchema):\noutput:Any=SchemaField(description=\"Value found for the given key\")\nmissing:Any=SchemaField(\ndescription=\"Value of the input that missing the key\"\n)\n\ndef __init__(self):\nsuper().__init__(\nid=\"0e50422c-6dee-4145-83d6-3a5a392f65de\",\ndescription=\"Lookup the given key in the input dictionary/object/list and return the value.\",\ninput_schema=FindInDictionaryBlock.Input,\noutput_schema=FindInDictionaryBlock.Output,\ntest_input=[\n{\"input\":{\"apple\":1,\"banana\":2,\"cherry\":3},\"key\":\"banana\"},\n{\"input\":{\"x\":10,\"y\":20,\"z\":30},\"key\":\"w\"},\n{\"input\":[1,2,3],\"key\":1},\n{\"input\":[1,2,3],\"key\":3},\n{\"input\":MockObject(value=\"!!\",key=\"key\"),\"key\":\"key\"},\n{\"input\":[{\"k1\":\"v1\"},{\"k2\":\"v2\"},{\"k1\":\"v3\"}],\"key\":\"k1\"},\n],\ntest_output=[\n(\"output\",2),\n(\"missing\",{\"x\":10,\"y\":20,\"z\":30}),\n(\"output\",2),\n(\"missing\",[1,2,3]),\n(\"output\",\"key\"),\n(\"output\",[\"v1\",\"v3\"]),\n],\ncategories={BlockCategory.BASIC},\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nobj=input_data.input\nkey=input_data.key\n\nif isinstance(obj,dict)and key in obj:\nyield \"output\",obj[key]\nelif isinstance(obj,list)and isinstance(key,int)and0<=key<len(obj):\nyield \"output\",obj[key]\nelif isinstance(obj,list)and isinstance(key,str):\nif len(obj)==0:\nyield \"output\",[]\nelif isinstance(obj[0],dict)and key in obj[0]:\nyield \"output\",[item[key]for item in obj if key in item]\nelse:\nyield \"output\",[getattr(val,key)for val in obj if hasattr(val,key)]\nelif isinstance(obj,object)and isinstance(key,str)and hasattr(obj,key):\nyield \"output\",getattr(obj,key)\nelse:\nyield \"missing\",input_data.input\n\n\nclass AgentInputBlock(Block):\n\"\"\" \\n     This block is used to provide input to the graph. \\n  \\n     It takes in a value, name, description, default values list and bool to limit selection to default values. \\n  \\n     It Outputs the value passed as input. \\n     \"\"\"\n\nclass Input(BlockSchema):\nname:str=SchemaField(description=\"The name of the input.\")\nvalue:Any=SchemaField(\ndescription=\"The value to be passed as input.\",\ndefault=None,\n)\ntitle:str|None=SchemaField(\ndescription=\"The title of the input.\",default=None,advanced=True\n)\ndescription:str|None=SchemaField(\ndescription=\"The description of the input.\",\ndefault=None,\nadvanced=True,\n)\nplaceholder_values:List[Any]=SchemaField(\ndescription=\"The placeholder values to be passed as input.\",\ndefault=[],\nadvanced=True,\n)\nlimit_to_placeholder_values:bool=SchemaField(\ndescription=\"Whether to limit the selection to placeholder values.\",\ndefault=False,\nadvanced=True,\n)\nadvanced:bool=SchemaField(\ndescription=\"Whether to show the input in the advanced section, if the field is not required.\",\ndefault=False,\nadvanced=True,\n)\nsecret:bool=SchemaField(\ndescription=\"Whether the input should be treated as a secret.\",\ndefault=False,\nadvanced=True,\n)\n\nclass Output(BlockSchema):\nresult:Any=SchemaField(description=\"The value passed as input.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"c0a8e994-ebf1-4a9c-a4d8-89d09c86741b\",\ndescription=\"This block is used to provide input to the graph.\",\ninput_schema=AgentInputBlock.Input,\noutput_schema=AgentInputBlock.Output,\ntest_input=[\n{\n\"value\":\"Hello, World!\",\n\"name\":\"input_1\",\n\"description\":\"This is a test input.\",\n\"placeholder_values\":[],\n\"limit_to_placeholder_values\":False,\n},\n{\n\"value\":\"Hello, World!\",\n\"name\":\"input_2\",\n\"description\":\"This is a test input.\",\n\"placeholder_values\":[\"Hello, World!\"],\n\"limit_to_placeholder_values\":True,\n},\n],\ntest_output=[\n(\"result\",\"Hello, World!\"),\n(\"result\",\"Hello, World!\"),\n],\ncategories={BlockCategory.INPUT,BlockCategory.BASIC},\nblock_type=BlockType.INPUT,\nstatic_output=True,\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nyield \"result\",input_data.value\n\n\nclass AgentOutputBlock(Block):\n\"\"\" \\n     Records the output of the graph for users to see. \\n  \\n     Behavior: \\n         If `format` is provided and the `value` is of a type that can be formatted, \\n         the block attempts to format the recorded_value using the `format`. \\n         If formatting fails or no `format` is provided, the raw `value` is output. \\n     \"\"\"\n\nclass Input(BlockSchema):\nvalue:Any=SchemaField(\ndescription=\"The value to be recorded as output.\",\ndefault=None,\nadvanced=False,\n)\nname:str=SchemaField(description=\"The name of the output.\")\ntitle:str|None=SchemaField(\ndescription=\"The title of the output.\",\ndefault=None,\nadvanced=True,\n)\ndescription:str|None=SchemaField(\ndescription=\"The description of the output.\",\ndefault=None,\nadvanced=True,\n)\nformat:str=SchemaField(\ndescription=\"The format string to be used to format the recorded_value.\",\ndefault=\"\",\nadvanced=True,\n)\nadvanced:bool=SchemaField(\ndescription=\"Whether to treat the output as advanced.\",\ndefault=False,\nadvanced=True,\n)\nsecret:bool=SchemaField(\ndescription=\"Whether the output should be treated as a secret.\",\ndefault=False,\nadvanced=True,\n)\n\nclass Output(BlockSchema):\noutput:Any=SchemaField(description=\"The value recorded as output.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"363ae599-353e-4804-937e-b2ee3cef3da4\",\ndescription=\"Stores the output of the graph for users to see.\",\ninput_schema=AgentOutputBlock.Input,\noutput_schema=AgentOutputBlock.Output,\ntest_input=[\n{\n\"value\":\"Hello, World!\",\n\"name\":\"output_1\",\n\"description\":\"This is a test output.\",\n\"format\":\"{{ output_1 }}!!\",\n},\n{\n\"value\":\"42\",\n\"name\":\"output_2\",\n\"description\":\"This is another test output.\",\n\"format\":\"{{ output_2 }}\",\n},\n{\n\"value\":MockObject(value=\"!!\",key=\"key\"),\n\"name\":\"output_3\",\n\"description\":\"This is a test output with a mock object.\",\n\"format\":\"{{ output_3 }}\",\n},\n],\ntest_output=[\n(\"output\",\"Hello, World!!!\"),\n(\"output\",\"42\"),\n(\"output\",MockObject(value=\"!!\",key=\"key\")),\n],\ncategories={BlockCategory.OUTPUT,BlockCategory.BASIC},\nblock_type=BlockType.OUTPUT,\nstatic_output=True,\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\n\"\"\" \\n         Attempts to format the recorded_value using the fmt_string if provided. \\n         If formatting fails or no fmt_string is given, returns the original recorded_value. \\n         \"\"\"\nif input_data.format:\ntry:\nyield \"output\",formatter.format_string(\ninput_data.format,{input_data.name:input_data.value}\n)\nexcept Exception as e:\nyield \"output\",f \"Error: {e}, {input_data.value}\"\nelse:\nyield \"output\",input_data.value\n\n\nclass AddToDictionaryBlock(Block):\nclass Input(BlockSchema):\ndictionary:dict[Any,Any]=SchemaField(\ndefault={},\ndescription=\"The dictionary to add the entry to. If not provided, a new dictionary will be created.\",\n)\nkey:str=SchemaField(\ndefault=\"\",\ndescription=\"The key for the new entry.\",\nplaceholder=\"new_key\",\nadvanced=False,\n)\nvalue:Any=SchemaField(\ndefault=None,\ndescription=\"The value for the new entry.\",\nplaceholder=\"new_value\",\nadvanced=False,\n)\nentries:dict[Any,Any]=SchemaField(\ndefault={},\ndescription=\"The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.\",\nadvanced=True,\n)\n\nclass Output(BlockSchema):\nupdated_dictionary:dict=SchemaField(\ndescription=\"The dictionary with the new entry added.\"\n)\nerror:str=SchemaField(description=\"Error message if the operation failed.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"31d1064e-7446-4693-a7d4-65e5ca1180d1\",\ndescription=\"Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.\",\ncategories={BlockCategory.BASIC},\ninput_schema=AddToDictionaryBlock.Input,\noutput_schema=AddToDictionaryBlock.Output,\ntest_input=[\n{\n\"dictionary\":{\"existing_key\":\"existing_value\"},\n\"key\":\"new_key\",\n\"value\":\"new_value\",\n},\n{\"key\":\"first_key\",\"value\":\"first_value\"},\n{\n\"dictionary\":{\"existing_key\":\"existing_value\"},\n\"entries\":{\"new_key\":\"new_value\",\"first_key\":\"first_value\"},\n},\n],\ntest_output=[\n(\n\"updated_dictionary\",\n{\"existing_key\":\"existing_value\",\"new_key\":\"new_value\"},\n),\n(\"updated_dictionary\",{\"first_key\":\"first_value\"}),\n(\n\"updated_dictionary\",\n{\n\"existing_key\":\"existing_value\",\n\"new_key\":\"new_value\",\n\"first_key\":\"first_value\",\n},\n),\n],\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nupdated_dict=input_data.dictionary.copy()\n\nif input_data.value is not None and input_data.key:\nupdated_dict[input_data.key]=input_data.value\n\nfor key,value in input_data.entries.items():\nupdated_dict[key]=value\n\nyield \"updated_dictionary\",updated_dict\n\n\nclass AddToListBlock(Block):\nclass Input(BlockSchema):\nlist:List[Any]=SchemaField(\ndefault=[],\nadvanced=False,\ndescription=\"The list to add the entry to. If not provided, a new list will be created.\",\n)\nentry:Any=SchemaField(\ndescription=\"The entry to add to the list. Can be of any type (string, int, dict, etc.).\",\nadvanced=False,\ndefault=None,\n)\nentries:List[Any]=SchemaField(\ndefault=[],\ndescription=\"The entries to add to the list. This is the batch version of the `entry` field.\",\nadvanced=True,\n)\nposition:int|None=SchemaField(\ndefault=None,\ndescription=\"The position to insert the new entry. If not provided, the entry will be appended to the end of the list.\",\n)\n\nclass Output(BlockSchema):\nupdated_list:List[Any]=SchemaField(\ndescription=\"The list with the new entry added.\"\n)\nerror:str=SchemaField(description=\"Error message if the operation failed.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"aeb08fc1-2fc1-4141-bc8e-f758f183a822\",\ndescription=\"Adds a new entry to a list. The entry can be of any type. If no list is provided, a new one is created.\",\ncategories={BlockCategory.BASIC},\ninput_schema=AddToListBlock.Input,\noutput_schema=AddToListBlock.Output,\ntest_input=[\n{\n\"list\":[1,\"string\",{\"existing_key\":\"existing_value\"}],\n\"entry\":{\"new_key\":\"new_value\"},\n\"position\":1,\n},\n{\"entry\":\"first_entry\"},\n{\"list\":[\"a\",\"b\",\"c\"],\"entry\":\"d\"},\n{\n\"entry\":\"e\",\n\"entries\":[\"f\",\"g\"],\n\"list\":[\"a\",\"b\"],\n\"position\":1,\n},\n],\ntest_output=[\n(\n\"updated_list\",\n[\n1,\n{\"new_key\":\"new_value\"},\n\"string\",\n{\"existing_key\":\"existing_value\"},\n],\n),\n(\"updated_list\",[\"first_entry\"]),\n(\"updated_list\",[\"a\",\"b\",\"c\",\"d\"]),\n(\"updated_list\",[\"a\",\"f\",\"g\",\"e\",\"b\"]),\n],\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nentries_added=input_data.entries.copy()\nif input_data.entry:\nentries_added.append(input_data.entry)\n\nupdated_list=input_data.list.copy()\nif(pos:=input_data.position)is not None:\nupdated_list=updated_list[:pos]+entries_added+updated_list[pos:]\nelse:\nupdated_list+=entries_added\n\nyield \"updated_list\",updated_list\n\n\nclass NoteBlock(Block):\nclass Input(BlockSchema):\ntext:str=SchemaField(description=\"The text to display in the sticky note.\")\n\nclass Output(BlockSchema):\noutput:str=SchemaField(description=\"The text to display in the sticky note.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"cc10ff7b-7753-4ff2-9af6-9399b1a7eddc\",\ndescription=\"This block is used to display a sticky note with the given text.\",\ncategories={BlockCategory.BASIC},\ninput_schema=NoteBlock.Input,\noutput_schema=NoteBlock.Output,\ntest_input={\"text\":\"Hello, World!\"},\ntest_output=[\n(\"output\",\"Hello, World!\"),\n],\nblock_type=BlockType.NOTE,\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nyield \"output\",input_data.text\n\n\nclass CreateDictionaryBlock(Block):\nclass Input(BlockSchema):\nvalues:dict[str,Any]=SchemaField(\ndescription=\"Key-value pairs to create the dictionary with\",\nplaceholder=\"e.g., {'name': 'Alice', 'age': 25}\",\n)\n\nclass Output(BlockSchema):\ndictionary:dict[str,Any]=SchemaField(\ndescription=\"The created dictionary containing the specified key-value pairs\"\n)\nerror:str=SchemaField(\ndescription=\"Error message if dictionary creation failed\"\n)\n\ndef __init__(self):\nsuper().__init__(\nid=\"b924ddf4-de4f-4b56-9a85-358930dcbc91\",\ndescription=\"Creates a dictionary with the specified key-value pairs. Use this when you know all the values you want to add upfront.\",\ncategories={BlockCategory.DATA},\ninput_schema=CreateDictionaryBlock.Input,\noutput_schema=CreateDictionaryBlock.Output,\ntest_input=[\n{\n\"values\":{\"name\":\"Alice\",\"age\":25,\"city\":\"New York\"},\n},\n{\n\"values\":{\"numbers\":[1,2,3],\"active\":True,\"score\":95.5},\n},\n],\ntest_output=[\n(\n\"dictionary\",\n{\"name\":\"Alice\",\"age\":25,\"city\":\"New York\"},\n),\n(\n\"dictionary\",\n{\"numbers\":[1,2,3],\"active\":True,\"score\":95.5},\n),\n],\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\ntry:\n#The values are already validated by Pydantic schema\nyield \"dictionary\",input_data.values\nexcept Exception as e:\nyield \"error\",f \"Failed to create dictionary: {str(e)}\"\n\n\nclass CreateListBlock(Block):\nclass Input(BlockSchema):\nvalues:List[Any]=SchemaField(\ndescription=\"A list of values to be combined into a new list.\",\nplaceholder=\"e.g., ['Alice', 25, True]\",\n)\n\nclass Output(BlockSchema):\nlist:List[Any]=SchemaField(\ndescription=\"The created list containing the specified values.\"\n)\nerror:str=SchemaField(description=\"Error message if list creation failed.\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"a912d5c7-6e00-4542-b2a9-8034136930e4\",\ndescription=\"Creates a list with the specified values. Use this when you know all the values you want to add upfront.\",\ncategories={BlockCategory.DATA},\ninput_schema=CreateListBlock.Input,\noutput_schema=CreateListBlock.Output,\ntest_input=[\n{\n\"values\":[\"Alice\",25,True],\n},\n{\n\"values\":[1,2,3,\"four\",{\"key\":\"value\"}],\n},\n],\ntest_output=[\n(\n\"list\",\n[\"Alice\",25,True],\n),\n(\n\"list\",\n[1,2,3,\"four\",{\"key\":\"value\"}],\n),\n],\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\ntry:\n#The values are already validated by Pydantic schema\nyield \"list\",input_data.values\nexcept Exception as e"
}