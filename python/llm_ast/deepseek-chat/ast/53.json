{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        1308
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "create_graph",
            "range": [
                96,
                148
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        96,
                        100
                    ],
                    "children": [],
                    "content": "\n\nasync def create_graph"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        97,
                        100
                    ],
                    "children": [],
                    "content": "\nasync def create_graph"
                },
                {
                    "type": "Identifier",
                    "name": "create_graph",
                    "range": [
                        98,
                        110
                    ],
                    "children": [],
                    "content": "async def create_graph(s:SpinTestServer,g:graph.Graph"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        99,
                        113
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "s",
                            "range": [
                                100,
                                102
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "SpinTestServer",
                                    "range": [
                                        102,
                                        115
                                    ],
                                    "children": [],
                                    "content": "s:SpinTestServer,g:graph.Graph,u:User)"
                                }
                            ],
                            "content": "create_graph(s"
                        },
                        {
                            "type": "Parameter",
                            "name": "g",
                            "range": [
                                104,
                                106
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "graph.Graph",
                                    "range": [
                                        106,
                                        115
                                    ],
                                    "children": [],
                                    "content": "g:graph.Graph,u:User)"
                                }
                            ],
                            "content": "SpinTestServer,g"
                        },
                        {
                            "type": "Parameter",
                            "name": "u",
                            "range": [
                                110,
                                112
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "User",
                                    "range": [
                                        112,
                                        115
                                    ],
                                    "children": [],
                                    "content": "u:User)"
                                }
                            ],
                            "content": "Graph,u"
                        }
                    ],
                    "content": "def create_graph(s:SpinTestServer,g:graph.Graph,u:"
                },
                {
                    "type": "ReturnType",
                    "name": "graph.Graph",
                    "range": [
                        116,
                        119
                    ],
                    "children": [],
                    "content": "->graph."
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        120,
                        148
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.info",
                            "range": [
                                121,
                                127
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "info",
                                    "range": [
                                        123,
                                        127
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "f\"Creating graph for user {u.id}\"",
                                            "range": [
                                                125,
                                                126
                                            ],
                                            "children": [],
                                            "content": "info("
                                        }
                                    ],
                                    "content": "logger.info(f"
                                }
                            ],
                            "content": ":\nlogger.info(f"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                129,
                                148
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        130,
                                        135
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "test_create_graph",
                                            "range": [
                                                133,
                                                147
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "CreateGraph",
                                                    "range": [
                                                        137,
                                                        142
                                                    ],
                                                    "children": [],
                                                    "content": "test_create_graph(CreateGraph(graph="
                                                },
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "u.id",
                                                    "range": [
                                                        144,
                                                        146
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "u",
                                                            "range": [
                                                                144,
                                                                145
                                                            ],
                                                            "children": [],
                                                            "content": "),"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "id",
                                                            "range": [
                                                                145,
                                                                146
                                                            ],
                                                            "children": [],
                                                            "content": ",u"
                                                        }
                                                    ],
                                                    "content": "),u"
                                                }
                                            ],
                                            "content": "s.agent_server.test_create_graph(CreateGraph(graph=g),u."
                                        }
                                    ],
                                    "content": "\nreturn await s.agent_server"
                                }
                            ],
                            "content": ")\nreturn await s.agent_server.test_create_graph(CreateGraph(graph=g),u.id"
                        }
                    ],
                    "content": "Graph:\nlogger.info(f \"Creating graph for user {u.id}\")\nreturn await s.agent_server.test_create_graph(CreateGraph(graph=g),u.id"
                }
            ],
            "content": "\n\nasync def create_graph(s:SpinTestServer,g:graph.Graph,u:User)->graph.Graph:\nlogger.info(f \"Creating graph for user {u.id}\")\nreturn await s.agent_server.test_create_graph(CreateGraph(graph=g),u.id"
        },
        {
            "type": "FunctionDecl",
            "name": "execute_graph",
            "range": [
                149,
                306
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        149,
                        153
                    ],
                    "children": [],
                    "content": ")\n\n\nasync"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        150,
                        153
                    ],
                    "children": [],
                    "content": "\n\n\nasync"
                },
                {
                    "type": "FunctionName",
                    "name": "execute_graph",
                    "range": [
                        151,
                        164
                    ],
                    "children": [],
                    "content": "\n\nasync def execute_graph(\nagent_server:AgentServer,\ntest_graph:"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        152,
                        183
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "agent_server",
                            "range": [
                                154,
                                156
                            ],
                            "children": [],
                            "content": "def execute_graph("
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "AgentServer",
                            "range": [
                                156,
                                168
                            ],
                            "children": [],
                            "content": "(\nagent_server:AgentServer,\ntest_graph:graph.Graph,"
                        },
                        {
                            "type": "Parameter",
                            "name": "test_graph",
                            "range": [
                                159,
                                161
                            ],
                            "children": [],
                            "content": ":AgentServer,"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "graph.Graph",
                            "range": [
                                161,
                                173
                            ],
                            "children": [],
                            "content": ",\ntest_graph:graph.Graph,\ntest_user:User,"
                        },
                        {
                            "type": "Parameter",
                            "name": "test_user",
                            "range": [
                                166,
                                168
                            ],
                            "children": [],
                            "content": ".Graph,"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "User",
                            "range": [
                                168,
                                173
                            ],
                            "children": [],
                            "content": ",\ntest_user:User,"
                        },
                        {
                            "type": "Parameter",
                            "name": "input_data",
                            "range": [
                                171,
                                173
                            ],
                            "children": [],
                            "content": ":User,"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "dict",
                            "range": [
                                173,
                                178
                            ],
                            "children": [],
                            "content": ",\ninput_data:dict,"
                        },
                        {
                            "type": "Parameter",
                            "name": "num_execs",
                            "range": [
                                176,
                                178
                            ],
                            "children": [],
                            "content": ":dict,"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                178,
                                180
                            ],
                            "children": [],
                            "content": ",\nnum_execs"
                        },
                        {
                            "type": "DefaultValue",
                            "name": "4",
                            "range": [
                                180,
                                183
                            ],
                            "children": [],
                            "content": "num_execs:int="
                        }
                    ],
                    "content": "\nasync def execute_graph(\nagent_server:AgentServer,\ntest_graph:graph.Graph,\ntest_user:User,\ninput_data:dict,\nnum_execs:int="
                },
                {
                    "type": "ReturnType",
                    "name": "str",
                    "range": [
                        184,
                        187
                    ],
                    "children": [],
                    "content": "4,\n)"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        188,
                        306
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.info",
                            "range": [
                                189,
                                196
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "logger.info",
                                    "range": [
                                        189,
                                        196
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "logger.info",
                                            "range": [
                                                189,
                                                192
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "logger",
                                                    "range": [
                                                        189,
                                                        190
                                                    ],
                                                    "children": [],
                                                    "content": ">str"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "info",
                                                    "range": [
                                                        190,
                                                        192
                                                    ],
                                                    "children": [],
                                                    "content": "str:\n"
                                                }
                                            ],
                                            "content": ">str:\n"
                                        },
                                        {
                                            "type": "TemplateLiteral",
                                            "name": "f\"Executing graph {test_graph.id} for user {test_user.id}\"",
                                            "range": [
                                                193,
                                                195
                                            ],
                                            "children": [],
                                            "content": "logger.info"
                                        }
                                    ],
                                    "content": ">str:\nlogger.info("
                                }
                            ],
                            "content": ">str:\nlogger.info("
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.info",
                            "range": [
                                197,
                                204
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "logger.info",
                                    "range": [
                                        197,
                                        204
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "logger.info",
                                            "range": [
                                                197,
                                                200
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "logger",
                                                    "range": [
                                                        197,
                                                        198
                                                    ],
                                                    "children": [],
                                                    "content": "f \"Executing graph {test_graph.id} for user {test_user.id}\""
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "info",
                                                    "range": [
                                                        198,
                                                        200
                                                    ],
                                                    "children": [],
                                                    "content": "\"Executing graph {test_graph.id} for user {test_user.id}\")\n"
                                                }
                                            ],
                                            "content": "f \"Executing graph {test_graph.id} for user {test_user.id}\")\n"
                                        },
                                        {
                                            "type": "TemplateLiteral",
                                            "name": "f\"Input data: {input_data}\"",
                                            "range": [
                                                201,
                                                203
                                            ],
                                            "children": [],
                                            "content": "logger.info"
                                        }
                                    ],
                                    "content": "f \"Executing graph {test_graph.id} for user {test_user.id}\")\nlogger.info("
                                }
                            ],
                            "content": "f \"Executing graph {test_graph.id} for user {test_user.id}\")\nlogger.info("
                        },
                        {
                            "type": "Comment",
                            "name": "#---Test adding new executions---#",
                            "range": [
                                206,
                                218
                            ],
                            "children": [],
                            "content": "\"Input data: {input_data}\")\n\n#---Test adding new executions-"
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "response",
                            "range": [
                                219,
                                238
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "response = await agent_server.test_execute_graph",
                                    "range": [
                                        219,
                                        238
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "response",
                                            "range": [
                                                219,
                                                220
                                            ],
                                            "children": [],
                                            "content": "--"
                                        },
                                        {
                                            "type": "AwaitExpression",
                                            "name": "await agent_server.test_execute_graph",
                                            "range": [
                                                221,
                                                238
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "agent_server.test_execute_graph",
                                                    "range": [
                                                        222,
                                                        238
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "agent_server.test_execute_graph",
                                                            "range": [
                                                                222,
                                                                225
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "agent_server",
                                                                    "range": [
                                                                        222,
                                                                        223
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nresponse"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "test_execute_graph",
                                                                    "range": [
                                                                        223,
                                                                        225
                                                                    ],
                                                                    "children": [],
                                                                    "content": "response=await"
                                                                }
                                                            ],
                                                            "content": "\nresponse=await"
                                                        },
                                                        {
                                                            "type": "Arguments",
                                                            "name": "arguments",
                                                            "range": [
                                                                225,
                                                                237
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "test_graph.id",
                                                                    "range": [
                                                                        227,
                                                                        230
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".test_execute_graph(\n"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "input_data",
                                                                    "range": [
                                                                        231,
                                                                        232
                                                                    ],
                                                                    "children": [],
                                                                    "content": "test_graph."
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "test_user.id",
                                                                    "range": [
                                                                        233,
                                                                        236
                                                                    ],
                                                                    "children": [],
                                                                    "content": "id,input_data,"
                                                                }
                                                            ],
                                                            "content": "await agent_server.test_execute_graph(\ntest_graph.id,input_data,test_user"
                                                        }
                                                    ],
                                                    "content": "\nresponse=await agent_server.test_execute_graph(\ntest_graph.id,input_data,test_user."
                                                }
                                            ],
                                            "content": "#\nresponse=await agent_server.test_execute_graph(\ntest_graph.id,input_data,test_user."
                                        }
                                    ],
                                    "content": "--#\nresponse=await agent_server.test_execute_graph(\ntest_graph.id,input_data,test_user."
                                }
                            ],
                            "content": "--#\nresponse=await agent_server.test_execute_graph(\ntest_graph.id,input_data,test_user."
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "graph_exec_id",
                            "range": [
                                239,
                                245
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "graph_exec_id = response[\"id\"]",
                                    "range": [
                                        239,
                                        245
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "graph_exec_id",
                                            "range": [
                                                239,
                                                240
                                            ],
                                            "children": [],
                                            "content": "id\n"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "response[\"id\"]",
                                            "range": [
                                                241,
                                                245
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "response",
                                                    "range": [
                                                        241,
                                                        242
                                                    ],
                                                    "children": [],
                                                    "content": ")\n"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "\"id\"",
                                                    "range": [
                                                        242,
                                                        245
                                                    ],
                                                    "children": [],
                                                    "content": "\ngraph_exec_id=response"
                                                }
                                            ],
                                            "content": ")\ngraph_exec_id=response"
                                        }
                                    ],
                                    "content": "id\n)\ngraph_exec_id=response"
                                }
                            ],
                            "content": "id\n)\ngraph_exec_id=response"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.info",
                            "range": [
                                246,
                                253
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "logger.info",
                                    "range": [
                                        246,
                                        253
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "logger.info",
                                            "range": [
                                                246,
                                                249
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "logger",
                                                    "range": [
                                                        246,
                                                        247
                                                    ],
                                                    "children": [],
                                                    "content": "[\"id\""
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "info",
                                                    "range": [
                                                        247,
                                                        249
                                                    ],
                                                    "children": [],
                                                    "content": "\"id\"]\n"
                                                }
                                            ],
                                            "content": "[\"id\"]\n"
                                        },
                                        {
                                            "type": "TemplateLiteral",
                                            "name": "f\"Created execution with ID: {graph_exec_id}\"",
                                            "range": [
                                                250,
                                                252
                                            ],
                                            "children": [],
                                            "content": "logger.info"
                                        }
                                    ],
                                    "content": "[\"id\"]\nlogger.info("
                                }
                            ],
                            "content": "[\"id\"]\nlogger.info("
                        },
                        {
                            "type": "Comment",
                            "name": "#Execution queue should be empty",
                            "range": [
                                255,
                                261
                            ],
                            "children": [],
                            "content": "\"Created execution with ID: {graph_exec_id}\")\n\n#Execution queue"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.info",
                            "range": [
                                262,
                                268
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "logger.info",
                                    "range": [
                                        262,
                                        268
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "logger.info",
                                            "range": [
                                                262,
                                                265
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "logger",
                                                    "range": [
                                                        262,
                                                        263
                                                    ],
                                                    "children": [],
                                                    "content": "should be"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "info",
                                                    "range": [
                                                        263,
                                                        265
                                                    ],
                                                    "children": [],
                                                    "content": "be empty\n"
                                                }
                                            ],
                                            "content": "should be empty\n"
                                        },
                                        {
                                            "type": "StringLiteral",
                                            "name": "\"Waiting for execution to complete...\"",
                                            "range": [
                                                266,
                                                267
                                            ],
                                            "children": [],
                                            "content": "logger."
                                        }
                                    ],
                                    "content": "should be empty\nlogger.info"
                                }
                            ],
                            "content": "should be empty\nlogger.info"
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "result",
                            "range": [
                                269,
                                284
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "result = await wait_execution",
                                    "range": [
                                        269,
                                        284
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "result",
                                            "range": [
                                                269,
                                                270
                                            ],
                                            "children": [],
                                            "content": "(\"Waiting for execution to complete...\""
                                        },
                                        {
                                            "type": "AwaitExpression",
                                            "name": "await wait_execution",
                                            "range": [
                                                271,
                                                284
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "wait_execution",
                                                    "range": [
                                                        272,
                                                        284
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "wait_execution",
                                                            "range": [
                                                                272,
                                                                273
                                                            ],
                                                            "children": [],
                                                            "content": "\nresult"
                                                        },
                                                        {
                                                            "type": "Arguments",
                                                            "name": "arguments",
                                                            "range": [
                                                                273,
                                                                283
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "test_user.id",
                                                                    "range": [
                                                                        274,
                                                                        277
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=await wait_execution("
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "test_graph.id",
                                                                    "range": [
                                                                        278,
                                                                        281
                                                                    ],
                                                                    "children": [],
                                                                    "content": "test_user.id,"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "graph_exec_id",
                                                                    "range": [
                                                                        282,
                                                                        283
                                                                    ],
                                                                    "children": [],
                                                                    "content": "test_graph."
                                                                }
                                                            ],
                                                            "content": "result=await wait_execution(test_user.id,test_graph."
                                                        }
                                                    ],
                                                    "content": "\nresult=await wait_execution(test_user.id,test_graph.id"
                                                }
                                            ],
                                            "content": ")\nresult=await wait_execution(test_user.id,test_graph.id"
                                        }
                                    ],
                                    "content": "(\"Waiting for execution to complete...\")\nresult=await wait_execution(test_user.id,test_graph.id"
                                }
                            ],
                            "content": "(\"Waiting for execution to complete...\")\nresult=await wait_execution(test_user.id,test_graph.id"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.info",
                            "range": [
                                285,
                                292
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "logger.info",
                                    "range": [
                                        285,
                                        292
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "logger.info",
                                            "range": [
                                                285,
                                                288
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "logger",
                                                    "range": [
                                                        285,
                                                        286
                                                    ],
                                                    "children": [],
                                                    "content": ",graph_exec_id"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "info",
                                                    "range": [
                                                        286,
                                                        288
                                                    ],
                                                    "children": [],
                                                    "content": "graph_exec_id)\n"
                                                }
                                            ],
                                            "content": ",graph_exec_id)\n"
                                        },
                                        {
                                            "type": "TemplateLiteral",
                                            "name": "f\"Execution completed with {len(result)} results\"",
                                            "range": [
                                                289,
                                                291
                                            ],
                                            "children": [],
                                            "content": "logger.info"
                                        }
                                    ],
                                    "content": ",graph_exec_id)\nlogger.info("
                                }
                            ],
                            "content": ",graph_exec_id)\nlogger.info("
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert result and len(result) == num_execs",
                            "range": [
                                293,
                                303
                            ],
                            "children": [
                                {
                                    "type": "LogicalExpression",
                                    "name": "result and len(result) == num_execs",
                                    "range": [
                                        294,
                                        303
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "result",
                                            "range": [
                                                294,
                                                295
                                            ],
                                            "children": [],
                                            "content": "\"Execution completed with {len(result)} results\")"
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "len(result) == num_execs",
                                            "range": [
                                                296,
                                                303
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "len(result)",
                                                    "range": [
                                                        296,
                                                        300
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "len",
                                                            "range": [
                                                                296,
                                                                297
                                                            ],
                                                            "children": [],
                                                            "content": "\nassert"
                                                        },
                                                        {
                                                            "type": "Arguments",
                                                            "name": "arguments",
                                                            "range": [
                                                                297,
                                                                300
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "result",
                                                                    "range": [
                                                                        298,
                                                                        299
                                                                    ],
                                                                    "children": [],
                                                                    "content": "result and"
                                                                }
                                                            ],
                                                            "content": "assert result and len"
                                                        }
                                                    ],
                                                    "content": "\nassert result and len"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "num_execs",
                                                    "range": [
                                                        302,
                                                        303
                                                    ],
                                                    "children": [],
                                                    "content": "result)"
                                                }
                                            ],
                                            "content": "\nassert result and len(result)"
                                        }
                                    ],
                                    "content": "\"Execution completed with {len(result)} results\")\nassert result and len(result)"
                                }
                            ],
                            "content": "f \"Execution completed with {len(result)} results\")\nassert result and len(result)"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return graph_exec_id",
                            "range": [
                                304,
                                306
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "graph_exec_id",
                                    "range": [
                                        305,
                                        306
                                    ],
                                    "children": [],
                                    "content": "=num_execs"
                                }
                            ],
                            "content": "==num_execs"
                        }
                    ],
                    "content": "->str:\nlogger.info(f \"Executing graph {test_graph.id} for user {test_user.id}\")\nlogger.info(f \"Input data: {input_data}\")\n\n#---Test adding new executions---#\nresponse=await agent_server.test_execute_graph(\ntest_graph.id,input_data,test_user.id\n)\ngraph_exec_id=response[\"id\"]\nlogger.info(f \"Created execution with ID: {graph_exec_id}\")\n\n#Execution queue should be empty\nlogger.info(\"Waiting for execution to complete...\")\nresult=await wait_execution(test_user.id,test_graph.id,graph_exec_id)\nlogger.info(f \"Execution completed with {len(result)} results\")\nassert result and len(result)==num_execs"
                }
            ],
            "content": ")\n\n\nasync def execute_graph(\nagent_server:AgentServer,\ntest_graph:graph.Graph,\ntest_user:User,\ninput_data:dict,\nnum_execs:int=4,\n)->str:\nlogger.info(f \"Executing graph {test_graph.id} for user {test_user.id}\")\nlogger.info(f \"Input data: {input_data}\")\n\n#---Test adding new executions---#\nresponse=await agent_server.test_execute_graph(\ntest_graph.id,input_data,test_user.id\n)\ngraph_exec_id=response[\"id\"]\nlogger.info(f \"Created execution with ID: {graph_exec_id}\")\n\n#Execution queue should be empty\nlogger.info(\"Waiting for execution to complete...\")\nresult=await wait_execution(test_user.id,test_graph.id,graph_exec_id)\nlogger.info(f \"Execution completed with {len(result)} results\")\nassert result and len(result)==num_execs"
        },
        {
            "type": "FunctionDecl",
            "name": "assert_sample_graph_executions",
            "range": [
                307,
                808
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        310,
                        334
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "agent_server",
                            "range": [
                                312,
                                314
                            ],
                            "children": [],
                            "content": "\nasync def"
                        },
                        {
                            "type": "Parameter",
                            "name": "test_graph",
                            "range": [
                                317,
                                321
                            ],
                            "children": [],
                            "content": "\nagent_server:AgentServer,"
                        },
                        {
                            "type": "Parameter",
                            "name": "test_user",
                            "range": [
                                324,
                                326
                            ],
                            "children": [],
                            "content": ":graph."
                        },
                        {
                            "type": "Parameter",
                            "name": "graph_exec_id",
                            "range": [
                                329,
                                331
                            ],
                            "children": [],
                            "content": "\ntest_user:"
                        }
                    ],
                    "content": "\n\n\nasync def assert_sample_graph_executions(\nagent_server:AgentServer,\ntest_graph:graph.Graph,\ntest_user:User,\n"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        336,
                        808
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.info",
                            "range": [
                                337,
                                343
                            ],
                            "children": [],
                            "content": "str,\n):\nlogger"
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "executions",
                            "range": [
                                345,
                                366
                            ],
                            "children": [],
                            "content": "info(f \"Checking execution results for graph {test_graph.id}\")\nexecutions=await agent_server.test_get_graph_run_node_execution_results(\ntest_graph.id,\ngraph_exec_id,\n"
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "output_list",
                            "range": [
                                369,
                                387
                            ],
                            "children": [],
                            "content": "id,\n)\n\noutput_list=[{\"result\":[\"Hello\"]},{\"result\""
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "input_list",
                            "range": [
                                389,
                                423
                            ],
                            "children": [],
                            "content": "[\"World\"]}]\ninput_list=[\n{\n\"name\":\"input_1\",\n\"value\":\"Hello\",\n},\n{\n\"name\":\"input_2\",\n\"value\":\"World\""
                        },
                        {
                            "type": "Comment",
                            "name": "# Executing StoreValueBlock",
                            "range": [
                                426,
                                429
                            ],
                            "children": [],
                            "content": "},\n]"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "exec = executions[0]",
                            "range": [
                                430,
                                435
                            ],
                            "children": [],
                            "content": "\n\n#Executing StoreValueBlock\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.info",
                            "range": [
                                437,
                                443
                            ],
                            "children": [],
                            "content": "=executions[0]\nlogger"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.status == execution.ExecutionStatus.COMPLETED",
                            "range": [
                                445,
                                456
                            ],
                            "children": [],
                            "content": "info(f \"Checking first StoreValueBlock execution: {exec}\")\nassert exec.status=="
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.graph_exec_id == graph_exec_id",
                            "range": [
                                457,
                                464
                            ],
                            "children": [],
                            "content": "execution.ExecutionStatus.COMPLETED\nassert exec"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.output_data in output_list",
                            "range": [
                                465,
                                478
                            ],
                            "children": [],
                            "content": ".graph_exec_id==graph_exec_id\nassert(\nexec.output_data in output_list"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.input_data in input_list",
                            "range": [
                                479,
                                492
                            ],
                            "children": [],
                            "content": "\n),f \"Output data: {exec.output_data} and {output_list}\"\nassert(\nexec.input_data in input_list"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.node_id in [test_graph.nodes[0].id, test_graph.nodes[1].id]",
                            "range": [
                                493,
                                517
                            ],
                            "children": [],
                            "content": "\n),f \"Input data: {exec.input_data} and {input_list}\"\nassert exec.node_id in[test_graph.nodes[0].id,test_graph.nodes["
                        },
                        {
                            "type": "Comment",
                            "name": "# Executing StoreValueBlock",
                            "range": [
                                519,
                                522
                            ],
                            "children": [],
                            "content": "].id]"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "exec = executions[1]",
                            "range": [
                                523,
                                528
                            ],
                            "children": [],
                            "content": "\n\n#Executing StoreValueBlock\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.info",
                            "range": [
                                530,
                                536
                            ],
                            "children": [],
                            "content": "=executions[1]\nlogger"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.status == execution.ExecutionStatus.COMPLETED",
                            "range": [
                                538,
                                549
                            ],
                            "children": [],
                            "content": "info(f \"Checking second StoreValueBlock execution: {exec}\")\nassert exec.status=="
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.graph_exec_id == graph_exec_id",
                            "range": [
                                550,
                                557
                            ],
                            "children": [],
                            "content": "execution.ExecutionStatus.COMPLETED\nassert exec"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.output_data in output_list",
                            "range": [
                                558,
                                571
                            ],
                            "children": [],
                            "content": ".graph_exec_id==graph_exec_id\nassert(\nexec.output_data in output_list"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.input_data in input_list",
                            "range": [
                                572,
                                585
                            ],
                            "children": [],
                            "content": "\n),f \"Output data: {exec.output_data} and {output_list}\"\nassert(\nexec.input_data in input_list"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.node_id in [test_graph.nodes[0].id, test_graph.nodes[1].id]",
                            "range": [
                                586,
                                610
                            ],
                            "children": [],
                            "content": "\n),f \"Input data: {exec.input_data} and {input_list}\"\nassert exec.node_id in[test_graph.nodes[0].id,test_graph.nodes["
                        },
                        {
                            "type": "Comment",
                            "name": "# Executing FillTextTemplateBlock",
                            "range": [
                                612,
                                615
                            ],
                            "children": [],
                            "content": "].id]"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "exec = executions[2]",
                            "range": [
                                616,
                                621
                            ],
                            "children": [],
                            "content": "\n\n#Executing FillTextTemplateBlock\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.info",
                            "range": [
                                623,
                                629
                            ],
                            "children": [],
                            "content": "=executions[2]\nlogger"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.status == execution.ExecutionStatus.COMPLETED",
                            "range": [
                                631,
                                642
                            ],
                            "children": [],
                            "content": "info(f \"Checking FillTextTemplateBlock execution: {exec}\")\nassert exec.status=="
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.graph_exec_id == graph_exec_id",
                            "range": [
                                643,
                                650
                            ],
                            "children": [],
                            "content": "execution.ExecutionStatus.COMPLETED\nassert exec"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.output_data == {\"output\": [\"Hello, World!!!\"]}",
                            "range": [
                                651,
                                664
                            ],
                            "children": [],
                            "content": ".graph_exec_id==graph_exec_id\nassert exec.output_data=={\"output\""
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.input_data == {\"format\": \"{a}, {b}{c}\", \"values\": {\"a\": \"Hello\", \"b\": \"World\", \"c\": \"!!!\"}, \"values_#_a\": \"Hello\", \"values_#_b\": \"World\", \"values_#_c\": \"!!!\"}",
                            "range": [
                                665,
                                711
                            ],
                            "children": [],
                            "content": ":[\"Hello, World!!!\"]}\nassert exec.input_data=={\n\"format\":\"{a}, {b}{c}\",\n\"values\":{\"a\":\"Hello\",\"b\":\"World\",\"c\":\"!!!\"},\n\"values_#_a\":\"Hello\",\n\"values_#_b\":\"World\",\n\"values_#_c\""
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.node_id == test_graph.nodes[2].id",
                            "range": [
                                712,
                                726
                            ],
                            "children": [],
                            "content": ":\"!!!\",\n}\nassert exec.node_id==test_graph.nodes"
                        },
                        {
                            "type": "Comment",
                            "name": "# Executing PrintToConsoleBlock",
                            "range": [
                                728,
                                731
                            ],
                            "children": [],
                            "content": "2].id"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "exec = executions[3]",
                            "range": [
                                732,
                                737
                            ],
                            "children": [],
                            "content": "\n\n#Executing PrintToConsoleBlock\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.info",
                            "range": [
                                739,
                                745
                            ],
                            "children": [],
                            "content": "=executions[3]\nlogger"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.status == execution.ExecutionStatus.COMPLETED",
                            "range": [
                                747,
                                758
                            ],
                            "children": [],
                            "content": "info(f \"Checking PrintToConsoleBlock execution: {exec}\")\nassert exec.status=="
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.graph_exec_id == graph_exec_id",
                            "range": [
                                759,
                                766
                            ],
                            "children": [],
                            "content": "execution.ExecutionStatus.COMPLETED\nassert exec"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.output_data == {\"status\": [\"printed\"]}",
                            "range": [
                                767,
                                780
                            ],
                            "children": [],
                            "content": ".graph_exec_id==graph_exec_id\nassert exec.output_data=={\"status\""
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.input_data == {\"text\": \"Hello, World!!!\"}",
                            "range": [
                                781,
                                792
                            ],
                            "children": [],
                            "content": ":[\"printed\"]}\nassert exec.input_data=="
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert exec.node_id == test_graph.nodes[3].id",
                            "range": [
                                793,
                                807
                            ],
                            "children": [],
                            "content": "{\"text\":\"Hello, World!!!\"}\nassert exec.node_id==test_graph.nodes"
                        }
                    ],
                    "content": ":str,\n):\nlogger.info(f \"Checking execution results for graph {test_graph.id}\")\nexecutions=await agent_server.test_get_graph_run_node_execution_results(\ntest_graph.id,\ngraph_exec_id,\ntest_user.id,\n)\n\noutput_list=[{\"result\":[\"Hello\"]},{\"result\":[\"World\"]}]\ninput_list=[\n{\n\"name\":\"input_1\",\n\"value\":\"Hello\",\n},\n{\n\"name\":\"input_2\",\n\"value\":\"World\",\n},\n]\n\n#Executing StoreValueBlock\nexec=executions[0]\nlogger.info(f \"Checking first StoreValueBlock execution: {exec}\")\nassert exec.status==execution.ExecutionStatus.COMPLETED\nassert exec.graph_exec_id==graph_exec_id\nassert(\nexec.output_data in output_list\n),f \"Output data: {exec.output_data} and {output_list}\"\nassert(\nexec.input_data in input_list\n),f \"Input data: {exec.input_data} and {input_list}\"\nassert exec.node_id in[test_graph.nodes[0].id,test_graph.nodes[1].id]\n\n#Executing StoreValueBlock\nexec=executions[1]\nlogger.info(f \"Checking second StoreValueBlock execution: {exec}\")\nassert exec.status==execution.ExecutionStatus.COMPLETED\nassert exec.graph_exec_id==graph_exec_id\nassert(\nexec.output_data in output_list\n),f \"Output data: {exec.output_data} and {output_list}\"\nassert(\nexec.input_data in input_list\n),f \"Input data: {exec.input_data} and {input_list}\"\nassert exec.node_id in[test_graph.nodes[0].id,test_graph.nodes[1].id]\n\n#Executing FillTextTemplateBlock\nexec=executions[2]\nlogger.info(f \"Checking FillTextTemplateBlock execution: {exec}\")\nassert exec.status==execution.ExecutionStatus.COMPLETED\nassert exec.graph_exec_id==graph_exec_id\nassert exec.output_data=={\"output\":[\"Hello, World!!!\"]}\nassert exec.input_data=={\n\"format\":\"{a}, {b}{c}\",\n\"values\":{\"a\":\"Hello\",\"b\":\"World\",\"c\":\"!!!\"},\n\"values_#_a\":\"Hello\",\n\"values_#_b\":\"World\",\n\"values_#_c\":\"!!!\",\n}\nassert exec.node_id==test_graph.nodes[2].id\n\n#Executing PrintToConsoleBlock\nexec=executions[3]\nlogger.info(f \"Checking PrintToConsoleBlock execution: {exec}\")\nassert exec.status==execution.ExecutionStatus.COMPLETED\nassert exec.graph_exec_id==graph_exec_id\nassert exec.output_data=={\"status\":[\"printed\"]}\nassert exec.input_data=={\"text\":\"Hello, World!!!\"}\nassert exec.node_id==test_graph.nodes["
                }
            ],
            "content": "\nreturn graph_exec_id\n\n\nasync def assert_sample_graph_executions(\nagent_server:AgentServer,\ntest_graph:graph.Graph,\ntest_user:User,\ngraph_exec_id:str,\n):\nlogger.info(f \"Checking execution results for graph {test_graph.id}\")\nexecutions=await agent_server.test_get_graph_run_node_execution_results(\ntest_graph.id,\ngraph_exec_id,\ntest_user.id,\n)\n\noutput_list=[{\"result\":[\"Hello\"]},{\"result\":[\"World\"]}]\ninput_list=[\n{\n\"name\":\"input_1\",\n\"value\":\"Hello\",\n},\n{\n\"name\":\"input_2\",\n\"value\":\"World\",\n},\n]\n\n#Executing StoreValueBlock\nexec=executions[0]\nlogger.info(f \"Checking first StoreValueBlock execution: {exec}\")\nassert exec.status==execution.ExecutionStatus.COMPLETED\nassert exec.graph_exec_id==graph_exec_id\nassert(\nexec.output_data in output_list\n),f \"Output data: {exec.output_data} and {output_list}\"\nassert(\nexec.input_data in input_list\n),f \"Input data: {exec.input_data} and {input_list}\"\nassert exec.node_id in[test_graph.nodes[0].id,test_graph.nodes[1].id]\n\n#Executing StoreValueBlock\nexec=executions[1]\nlogger.info(f \"Checking second StoreValueBlock execution: {exec}\")\nassert exec.status==execution.ExecutionStatus.COMPLETED\nassert exec.graph_exec_id==graph_exec_id\nassert(\nexec.output_data in output_list\n),f \"Output data: {exec.output_data} and {output_list}\"\nassert(\nexec.input_data in input_list\n),f \"Input data: {exec.input_data} and {input_list}\"\nassert exec.node_id in[test_graph.nodes[0].id,test_graph.nodes[1].id]\n\n#Executing FillTextTemplateBlock\nexec=executions[2]\nlogger.info(f \"Checking FillTextTemplateBlock execution: {exec}\")\nassert exec.status==execution.ExecutionStatus.COMPLETED\nassert exec.graph_exec_id==graph_exec_id\nassert exec.output_data=={\"output\":[\"Hello, World!!!\"]}\nassert exec.input_data=={\n\"format\":\"{a}, {b}{c}\",\n\"values\":{\"a\":\"Hello\",\"b\":\"World\",\"c\":\"!!!\"},\n\"values_#_a\":\"Hello\",\n\"values_#_b\":\"World\",\n\"values_#_c\":\"!!!\",\n}\nassert exec.node_id==test_graph.nodes[2].id\n\n#Executing PrintToConsoleBlock\nexec=executions[3]\nlogger.info(f \"Checking PrintToConsoleBlock execution: {exec}\")\nassert exec.status==execution.ExecutionStatus.COMPLETED\nassert exec.graph_exec_id==graph_exec_id\nassert exec.output_data=={\"status\":[\"printed\"]}\nassert exec.input_data=={\"text\":\"Hello, World!!!\"}\nassert exec.node_id==test_graph.nodes["
        },
        {
            "type": "FunctionDecl",
            "name": "test_agent_execution",
            "range": [
                821,
                918
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.mark.asyncio",
                    "range": [
                        809,
                        819
                    ],
                    "children": [],
                    "content": "3].id\n\n\n@pytest.mark"
                },
                {
                    "type": "FunctionSignature",
                    "name": "test_agent_execution",
                    "range": [
                        821,
                        829
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "server",
                            "range": [
                                825,
                                827
                            ],
                            "children": [],
                            "content": "\"session\")\n"
                        }
                    ],
                    "content": "asyncio(scope=\"session\")\nasync def"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        830,
                        918
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "CallExpression",
                            "range": [
                                831,
                                836
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "logger.info",
                                    "range": [
                                        831,
                                        836
                                    ],
                                    "children": [],
                                    "content": "(server:SpinTestServer):"
                                }
                            ],
                            "content": "(server:SpinTestServer):"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "test_user",
                            "range": [
                                838,
                                843
                            ],
                            "children": [],
                            "content": "logger.info(\"Starting test_agent_execution\")"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "test_graph",
                            "range": [
                                845,
                                857
                            ],
                            "children": [],
                            "content": "test_user=await create_test_user()\ntest_graph=await create_graph(server"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "data",
                            "range": [
                                859,
                                869
                            ],
                            "children": [],
                            "content": "create_test_graph(),test_user)\ndata={\"input_1\""
                        },
                        {
                            "type": "VariableDecl",
                            "name": "graph_exec_id",
                            "range": [
                                871,
                                894
                            ],
                            "children": [],
                            "content": "\"Hello\",\"input_2\":\"World\"}\ngraph_exec_id=await execute_graph(\nserver.agent_server,\ntest_graph,\ntest_user,\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "CallExpression",
                            "range": [
                                896,
                                910
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "await assert_sample_graph_executions",
                                    "range": [
                                        896,
                                        910
                                    ],
                                    "children": [],
                                    "content": ",\n4,\n)\nawait assert_sample_graph_executions(\nserver.agent_server,"
                                }
                            ],
                            "content": ",\n4,\n)\nawait assert_sample_graph_executions(\nserver.agent_server,"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "CallExpression",
                            "range": [
                                912,
                                917
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "logger.info",
                                    "range": [
                                        912,
                                        917
                                    ],
                                    "children": [],
                                    "content": ",test_user,graph_exec_id\n)"
                                }
                            ],
                            "content": ",test_user,graph_exec_id\n)"
                        }
                    ],
                    "content": "test_agent_execution(server:SpinTestServer):\nlogger.info(\"Starting test_agent_execution\")\ntest_user=await create_test_user()\ntest_graph=await create_graph(server,create_test_graph(),test_user)\ndata={\"input_1\":\"Hello\",\"input_2\":\"World\"}\ngraph_exec_id=await execute_graph(\nserver.agent_server,\ntest_graph,\ntest_user,\ndata,\n4,\n)\nawait assert_sample_graph_executions(\nserver.agent_server,test_graph,test_user,graph_exec_id\n)\n"
                }
            ],
            "content": "asyncio(scope=\"session\")\nasync def test_agent_execution(server:SpinTestServer):\nlogger.info(\"Starting test_agent_execution\")\ntest_user=await create_test_user()\ntest_graph=await create_graph(server,create_test_graph(),test_user)\ndata={\"input_1\":\"Hello\",\"input_2\":\"World\"}\ngraph_exec_id=await execute_graph(\nserver.agent_server,\ntest_graph,\ntest_user,\ndata,\n4,\n)\nawait assert_sample_graph_executions(\nserver.agent_server,test_graph,test_user,graph_exec_id\n)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_input_pin_always_waited",
            "range": [
                931,
                1308
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.mark.asyncio",
                    "range": [
                        919,
                        929
                    ],
                    "children": [],
                    "content": "logger.info(\"Completed test_agent_execution\")\n\n\n@pytest"
                },
                {
                    "type": "FunctionSignature",
                    "name": "test_input_pin_always_waited",
                    "range": [
                        931,
                        938
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "server",
                            "range": [
                                935,
                                937
                            ],
                            "children": [],
                            "content": "scope=\"session\""
                        }
                    ],
                    "content": "mark.asyncio(scope=\"session\")"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        939,
                        1308
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "",
                            "range": [
                                941,
                                944
                            ],
                            "children": [],
                            "content": "def test_input_pin_always_waited(server"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "CallExpression",
                            "range": [
                                946,
                                951
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "logger.info",
                                    "range": [
                                        946,
                                        951
                                    ],
                                    "children": [],
                                    "content": "SpinTestServer):\n\"\"\" \\n     This test is asserting that the input pin should always be waited for the execution, \\n     even when default value on that pin is defined, the value has to be ignored. \\n  \\n     Test scenario: \\n     StoreValueBlock1 \\n                 \\\\ input \\n                      >------- FindInDictionaryBlock | input_default: key: \""
                                }
                            ],
                            "content": "SpinTestServer):\n\"\"\" \\n     This test is asserting that the input pin should always be waited for the execution, \\n     even when default value on that pin is defined, the value has to be ignored. \\n  \\n     Test scenario: \\n     StoreValueBlock1 \\n                 \\\\ input \\n                      >------- FindInDictionaryBlock | input_default: key: \""
                        },
                        {
                            "type": "VariableDecl",
                            "name": "nodes",
                            "range": [
                                953,
                                1048
                            ],
                            "children": [],
                            "content": "\"\"\nlogger.info(\"Starting test_input_pin_always_waited\")\nnodes=[\ngraph.Node(\nblock_id=StoreValueBlock().id,\ninput_default={\"input\":{\"key1\":\"value1\",\"key2\":\"value2\"}},\n),\ngraph.Node(\nblock_id=StoreValueBlock().id,\ninput_default={\"input\":\"key2\"},\n),\ngraph.Node(\nblock_id=FindInDictionaryBlock().id,\ninput_default={\"key\":\"\",\"input\":"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "links",
                            "range": [
                                1050,
                                1130
                            ],
                            "children": [],
                            "content": "}},\n),\n]\nlinks=[\ngraph.Link(\nsource_id=nodes[0].id,\nsink_id=nodes[2].id,\nsource_name=\"output\",\nsink_name=\"input\",\n),\ngraph.Link(\nsource_id=nodes[1].id,\nsink_id=nodes[2].id,\nsource_name=\"output\",\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "test_graph",
                            "range": [
                                1132,
                                1159
                            ],
                            "children": [],
                            "content": "=\"key\",\n),\n]\ntest_graph=graph.Graph(\nname=\"TestGraph\",\ndescription=\"Test graph\",\nnodes="
                        },
                        {
                            "type": "VariableDecl",
                            "name": "test_user",
                            "range": [
                                1161,
                                1167
                            ],
                            "children": [],
                            "content": ",\nlinks=links,\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "test_graph",
                            "range": [
                                1168,
                                1178
                            ],
                            "children": [],
                            "content": ")\ntest_user=await create_test_user()\ntest_graph="
                        },
                        {
                            "type": "VariableDecl",
                            "name": "graph_exec_id",
                            "range": [
                                1180,
                                1199
                            ],
                            "children": [],
                            "content": "create_graph(server,test_graph,test_user)\ngraph_exec_id=await execute_graph(\nserver.agent_server,test_graph"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "CallExpression",
                            "range": [
                                1202,
                                1207
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "logger.info",
                                    "range": [
                                        1202,
                                        1207
                                    ],
                                    "children": [],
                                    "content": ",{},3\n"
                                }
                            ],
                            "content": ",{},3\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "executions",
                            "range": [
                                1209,
                                1229
                            ],
                            "children": [],
                            "content": "\n\nlogger.info(\"Checking execution results\")\nexecutions=await server.agent_server.test_get_graph_run_node_execution_results(\ntest_graph."
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert len(executions) == 3",
                            "range": [
                                1231,
                                1239
                            ],
                            "children": [],
                            "content": ",graph_exec_id,test_user.id\n)\n"
                        },
                        {
                            "type": "Comment",
                            "name": "# FindInDictionaryBlock should wait for the input pin to be provided,",
                            "range": [
                                1240,
                                1252
                            ],
                            "children": [],
                            "content": "assert len(executions)==3\n#FindInDictionaryBlock should wait"
                        },
                        {
                            "type": "Comment",
                            "name": "# Hence executing extraction of \"key\" from {\"key1\": \"value1\", \"key2\": \"value2\"}",
                            "range": [
                                1253,
                                1269
                            ],
                            "children": [],
                            "content": "for the input pin to be provided,\n#Hence executing extraction of \"key\" from{"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert executions[2].status == execution.ExecutionStatus.COMPLETED",
                            "range": [
                                1270,
                                1284
                            ],
                            "children": [],
                            "content": "\"key1\":\"value1\",\"key2\":\"value2\"}\nassert executions[2]."
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert executions[2].output_data == {\"output\": [\"value2\"]}",
                            "range": [
                                1285,
                                1301
                            ],
                            "children": [],
                            "content": "status==execution.ExecutionStatus.COMPLETED\nassert executions[2].output_data="
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "CallExpression",
                            "range": [
                                1302,
                                1307
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "logger.info",
                                    "range": [
                                        1302,
                                        1307
                                    ],
                                    "children": [],
                                    "content": "={\"output\":[\"value2\""
                                }
                            ],
                            "content": "={\"output\":[\"value2\""
                        }
                    ],
                    "content": "\nasync def test_input_pin_always_waited(server:SpinTestServer):\n\"\"\" \\n     This test is asserting that the input pin should always be waited for the execution, \\n     even when default value on that pin is defined, the value has to be ignored. \\n  \\n     Test scenario: \\n     StoreValueBlock1 \\n                 \\\\ input \\n                      >------- FindInDictionaryBlock | input_default: key: \" \", input: {} \\n                 // key \\n     StoreValueBlock2 \\n     \"\"\"\nlogger.info(\"Starting test_input_pin_always_waited\")\nnodes=[\ngraph.Node(\nblock_id=StoreValueBlock().id,\ninput_default={\"input\":{\"key1\":\"value1\",\"key2\":\"value2\"}},\n),\ngraph.Node(\nblock_id=StoreValueBlock().id,\ninput_default={\"input\":\"key2\"},\n),\ngraph.Node(\nblock_id=FindInDictionaryBlock().id,\ninput_default={\"key\":\"\",\"input\":{}},\n),\n]\nlinks=[\ngraph.Link(\nsource_id=nodes[0].id,\nsink_id=nodes[2].id,\nsource_name=\"output\",\nsink_name=\"input\",\n),\ngraph.Link(\nsource_id=nodes[1].id,\nsink_id=nodes[2].id,\nsource_name=\"output\",\nsink_name=\"key\",\n),\n]\ntest_graph=graph.Graph(\nname=\"TestGraph\",\ndescription=\"Test graph\",\nnodes=nodes,\nlinks=links,\n)\ntest_user=await create_test_user()\ntest_graph=await create_graph(server,test_graph,test_user)\ngraph_exec_id=await execute_graph(\nserver.agent_server,test_graph,test_user,{},3\n)\n\nlogger.info(\"Checking execution results\")\nexecutions=await server.agent_server.test_get_graph_run_node_execution_results(\ntest_graph.id,graph_exec_id,test_user.id\n)\nassert len(executions)==3\n#FindInDictionaryBlock should wait for the input pin to be provided,\n#Hence executing extraction of \"key\" from{\"key1\":\"value1\",\"key2\":\"value2\"}\nassert executions[2].status==execution.ExecutionStatus.COMPLETED\nassert executions[2].output_data=={\"output\":[\"value2\"]"
                }
            ],
            "content": "mark.asyncio(scope=\"session\")\nasync def test_input_pin_always_waited(server:SpinTestServer):\n\"\"\" \\n     This test is asserting that the input pin should always be waited for the execution, \\n     even when default value on that pin is defined, the value has to be ignored. \\n  \\n     Test scenario: \\n     StoreValueBlock1 \\n                 \\\\ input \\n                      >------- FindInDictionaryBlock | input_default: key: \" \", input: {} \\n                 // key \\n     StoreValueBlock2 \\n     \"\"\"\nlogger.info(\"Starting test_input_pin_always_waited\")\nnodes=[\ngraph.Node(\nblock_id=StoreValueBlock().id,\ninput_default={\"input\":{\"key1\":\"value1\",\"key2\":\"value2\"}},\n),\ngraph.Node(\nblock_id=StoreValueBlock().id,\ninput_default={\"input\":\"key2\"},\n),\ngraph.Node(\nblock_id=FindInDictionaryBlock().id,\ninput_default={\"key\":\"\",\"input\":{}},\n),\n]\nlinks=[\ngraph.Link(\nsource_id=nodes[0].id,\nsink_id=nodes[2].id,\nsource_name=\"output\",\nsink_name=\"input\",\n),\ngraph.Link(\nsource_id=nodes[1].id,\nsink_id=nodes[2].id,\nsource_name=\"output\",\nsink_name=\"key\",\n),\n]\ntest_graph=graph.Graph(\nname=\"TestGraph\",\ndescription=\"Test graph\",\nnodes=nodes,\nlinks=links,\n)\ntest_user=await create_test_user()\ntest_graph=await create_graph(server,test_graph,test_user)\ngraph_exec_id=await execute_graph(\nserver.agent_server,test_graph,test_user,{},3\n)\n\nlogger.info(\"Checking execution results\")\nexecutions=await server.agent_server.test_get_graph_run_node_execution_results(\ntest_graph.id,graph_exec_id,test_user.id\n)\nassert len(executions)==3\n#FindInDictionaryBlock should wait for the input pin to be provided,\n#Hence executing extraction of \"key\" from{\"key1\":\"value1\",\"key2\":\"value2\"}\nassert executions[2].status==execution.ExecutionStatus.COMPLETED\nassert executions[2].output_data=={\"output\":[\"value2\"]"
        }
    ],
    "content": "import logging\n\nimport pytest\nfrom prisma.models import User\n\nfrom backend.blocks.basic import FindInDictionaryBlock,StoreValueBlock\nfrom backend.blocks.maths import CalculatorBlock,Operation\nfrom backend.data import execution,graph\nfrom backend.server.model import CreateGraph\nfrom backend.server.rest_api import AgentServer\nfrom backend.usecases.sample import create_test_graph,create_test_user\nfrom backend.util.test import SpinTestServer,wait_execution\n\nlogger=logging.getLogger(__name__)\n\n\nasync def create_graph(s:SpinTestServer,g:graph.Graph,u:User)->graph.Graph:\nlogger.info(f \"Creating graph for user {u.id}\")\nreturn await s.agent_server.test_create_graph(CreateGraph(graph=g),u.id)\n\n\nasync def execute_graph(\nagent_server:AgentServer,\ntest_graph:graph.Graph,\ntest_user:User,\ninput_data:dict,\nnum_execs:int=4,\n)->str:\nlogger.info(f \"Executing graph {test_graph.id} for user {test_user.id}\")\nlogger.info(f \"Input data: {input_data}\")\n\n#---Test adding new executions---#\nresponse=await agent_server.test_execute_graph(\ntest_graph.id,input_data,test_user.id\n)\ngraph_exec_id=response[\"id\"]\nlogger.info(f \"Created execution with ID: {graph_exec_id}\")\n\n#Execution queue should be empty\nlogger.info(\"Waiting for execution to complete...\")\nresult=await wait_execution(test_user.id,test_graph.id,graph_exec_id)\nlogger.info(f \"Execution completed with {len(result)} results\")\nassert result and len(result)==num_execs\nreturn graph_exec_id\n\n\nasync def assert_sample_graph_executions(\nagent_server:AgentServer,\ntest_graph:graph.Graph,\ntest_user:User,\ngraph_exec_id:str,\n):\nlogger.info(f \"Checking execution results for graph {test_graph.id}\")\nexecutions=await agent_server.test_get_graph_run_node_execution_results(\ntest_graph.id,\ngraph_exec_id,\ntest_user.id,\n)\n\noutput_list=[{\"result\":[\"Hello\"]},{\"result\":[\"World\"]}]\ninput_list=[\n{\n\"name\":\"input_1\",\n\"value\":\"Hello\",\n},\n{\n\"name\":\"input_2\",\n\"value\":\"World\",\n},\n]\n\n#Executing StoreValueBlock\nexec=executions[0]\nlogger.info(f \"Checking first StoreValueBlock execution: {exec}\")\nassert exec.status==execution.ExecutionStatus.COMPLETED\nassert exec.graph_exec_id==graph_exec_id\nassert(\nexec.output_data in output_list\n),f \"Output data: {exec.output_data} and {output_list}\"\nassert(\nexec.input_data in input_list\n),f \"Input data: {exec.input_data} and {input_list}\"\nassert exec.node_id in[test_graph.nodes[0].id,test_graph.nodes[1].id]\n\n#Executing StoreValueBlock\nexec=executions[1]\nlogger.info(f \"Checking second StoreValueBlock execution: {exec}\")\nassert exec.status==execution.ExecutionStatus.COMPLETED\nassert exec.graph_exec_id==graph_exec_id\nassert(\nexec.output_data in output_list\n),f \"Output data: {exec.output_data} and {output_list}\"\nassert(\nexec.input_data in input_list\n),f \"Input data: {exec.input_data} and {input_list}\"\nassert exec.node_id in[test_graph.nodes[0].id,test_graph.nodes[1].id]\n\n#Executing FillTextTemplateBlock\nexec=executions[2]\nlogger.info(f \"Checking FillTextTemplateBlock execution: {exec}\")\nassert exec.status==execution.ExecutionStatus.COMPLETED\nassert exec.graph_exec_id==graph_exec_id\nassert exec.output_data=={\"output\":[\"Hello, World!!!\"]}\nassert exec.input_data=={\n\"format\":\"{a}, {b}{c}\",\n\"values\":{\"a\":\"Hello\",\"b\":\"World\",\"c\":\"!!!\"},\n\"values_#_a\":\"Hello\",\n\"values_#_b\":\"World\",\n\"values_#_c\":\"!!!\",\n}\nassert exec.node_id==test_graph.nodes[2].id\n\n#Executing PrintToConsoleBlock\nexec=executions[3]\nlogger.info(f \"Checking PrintToConsoleBlock execution: {exec}\")\nassert exec.status==execution.ExecutionStatus.COMPLETED\nassert exec.graph_exec_id==graph_exec_id\nassert exec.output_data=={\"status\":[\"printed\"]}\nassert exec.input_data=={\"text\":\"Hello, World!!!\"}\nassert exec.node_id==test_graph.nodes[3].id\n\n\n@pytest.mark.asyncio(scope=\"session\")\nasync def test_agent_execution(server:SpinTestServer):\nlogger.info(\"Starting test_agent_execution\")\ntest_user=await create_test_user()\ntest_graph=await create_graph(server,create_test_graph(),test_user)\ndata={\"input_1\":\"Hello\",\"input_2\":\"World\"}\ngraph_exec_id=await execute_graph(\nserver.agent_server,\ntest_graph,\ntest_user,\ndata,\n4,\n)\nawait assert_sample_graph_executions(\nserver.agent_server,test_graph,test_user,graph_exec_id\n)\nlogger.info(\"Completed test_agent_execution\")\n\n\n@pytest.mark.asyncio(scope=\"session\")\nasync def test_input_pin_always_waited(server:SpinTestServer):\n\"\"\" \\n     This test is asserting that the input pin should always be waited for the execution, \\n     even when default value on that pin is defined, the value has to be ignored. \\n  \\n     Test scenario: \\n     StoreValueBlock1 \\n                 \\\\ input \\n                      >------- FindInDictionaryBlock | input_default: key: \" \", input: {} \\n                 // key \\n     StoreValueBlock2 \\n     \"\"\"\nlogger.info(\"Starting test_input_pin_always_waited\")\nnodes=[\ngraph.Node(\nblock_id=StoreValueBlock().id,\ninput_default={\"input\":{\"key1\":\"value1\",\"key2\":\"value2\"}},\n),\ngraph.Node(\nblock_id=StoreValueBlock().id,\ninput_default={\"input\":\"key2\"},\n),\ngraph.Node(\nblock_id=FindInDictionaryBlock().id,\ninput_default={\"key\":\"\",\"input\":{}},\n),\n]\nlinks=[\ngraph.Link(\nsource_id=nodes[0].id,\nsink_id=nodes[2].id,\nsource_name=\"output\",\nsink_name=\"input\",\n),\ngraph.Link(\nsource_id=nodes[1].id,\nsink_id=nodes[2].id,\nsource_name=\"output\",\nsink_name=\"key\",\n),\n]\ntest_graph=graph.Graph(\nname=\"TestGraph\",\ndescription=\"Test graph\",\nnodes=nodes,\nlinks=links,\n)\ntest_user=await create_test_user()\ntest_graph=await create_graph(server,test_graph,test_user)\ngraph_exec_id=await execute_graph(\nserver.agent_server,test_graph,test_user,{},3\n)\n\nlogger.info(\"Checking execution results\")\nexecutions=await server.agent_server.test_get_graph_run_node_execution_results(\ntest_graph.id,graph_exec_id,test_user.id\n)\nassert len(executions)==3\n#FindInDictionaryBlock should wait for the input pin to be provided,\n#Hence executing extraction of \"key\" from{\"key1\":\"value1\",\"key2\":\"value2\"}\nassert executions[2].status==execution.ExecutionStatus.COMPLETED\nassert executions[2].output_data=={\"output\":[\"value2\"]"
}