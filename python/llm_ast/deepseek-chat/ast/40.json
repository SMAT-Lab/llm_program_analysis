{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        204
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                1,
                1
            ],
            "children": [],
            "content": "\" \\n Word Break Problem is a well-known problem in computer science. \\n Given a string and a dictionary of words, the task is to determine if \\n the string can be segmented into a sequence of one or more dictionary words. \\n  \\n Wikipedia: https://en.wikipedia.org/wiki/Word_break_problem \\n \""
        },
        {
            "type": "FunctionDecl",
            "name": "backtrack",
            "range": [
                6,
                145
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "input_string",
                    "range": [
                        9,
                        11
                    ],
                    "children": [],
                    "content": "input_string:str"
                },
                {
                    "type": "Parameter",
                    "name": "word_dict",
                    "range": [
                        13,
                        18
                    ],
                    "children": [],
                    "content": "word_dict:set[str]"
                },
                {
                    "type": "Parameter",
                    "name": "start",
                    "range": [
                        20,
                        22
                    ],
                    "children": [],
                    "content": "start:int"
                },
                {
                    "type": "ReturnType",
                    "name": "bool",
                    "range": [
                        26,
                        26
                    ],
                    "children": [],
                    "content": "bool"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        28,
                        145
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "name": "",
                            "range": [
                                28,
                                55
                            ],
                            "children": [],
                            "content": "\n\"\"\" \\n     Helper function that uses backtracking to determine if a valid \\n     word segmentation is possible starting from index 'start'. \\n  \\n     Parameters: \\n     input_string (str): The input string to be segmented. \\n     word_dict (set[str]): A set of valid dictionary words. \\n     start (int): The starting index of the substring to be checked. \\n  \\n     Returns: \\n     bool: True if a valid segmentation is possible, otherwise False. \\n  \\n     Example: \\n     >>> backtrack(\" leetcode\", {\"leet\", \"code \"}, 0) \\n     True \\n  \\n     >>> backtrack(\" applepenapple\", {\"apple\", \"pen \"}, 0) \\n     True \\n  \\n     >>> backtrack(\" catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat \"}, 0) \\n     False \\n     \"\"\""
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                62,
                                86
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        74,
                                        81
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "==",
                                            "range": [
                                                76,
                                                77
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "start",
                                                    "range": [
                                                        75,
                                                        75
                                                    ],
                                                    "children": [],
                                                    "content": "start"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "len",
                                                    "range": [
                                                        78,
                                                        81
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "input_string",
                                                            "range": [
                                                                80,
                                                                80
                                                            ],
                                                            "children": [],
                                                            "content": "input_string"
                                                        }
                                                    ],
                                                    "content": "len(input_string)"
                                                }
                                            ],
                                            "content": "=="
                                        }
                                    ],
                                    "content": "if start==len(input_string)"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "",
                                    "range": [
                                        84,
                                        85
                                    ],
                                    "children": [
                                        {
                                            "type": "BooleanLiteral",
                                            "name": "True",
                                            "range": [
                                                85,
                                                85
                                            ],
                                            "children": [],
                                            "content": "True"
                                        }
                                    ],
                                    "content": "return True"
                                }
                            ],
                            "content": "if the starting index has reached the end of the string\nif start==len(input_string):\nreturn True\n"
                        },
                        {
                            "type": "ForStatement",
                            "name": "",
                            "range": [
                                98,
                                140
                            ],
                            "children": [
                                {
                                    "type": "Range",
                                    "name": "",
                                    "range": [
                                        101,
                                        113
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "range",
                                            "range": [
                                                101,
                                                113
                                            ],
                                            "children": [
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "+",
                                                    "range": [
                                                        104,
                                                        105
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "start",
                                                            "range": [
                                                                103,
                                                                103
                                                            ],
                                                            "children": [],
                                                            "content": "start"
                                                        },
                                                        {
                                                            "type": "NumericLiteral",
                                                            "name": "1",
                                                            "range": [
                                                                105,
                                                                105
                                                            ],
                                                            "children": [],
                                                            "content": "1"
                                                        }
                                                    ],
                                                    "content": "+1"
                                                },
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "+",
                                                    "range": [
                                                        111,
                                                        112
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "len",
                                                            "range": [
                                                                107,
                                                                110
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "input_string",
                                                                    "range": [
                                                                        109,
                                                                        109
                                                                    ],
                                                                    "children": [],
                                                                    "content": "input_string"
                                                                }
                                                            ],
                                                            "content": "len(input_string)"
                                                        },
                                                        {
                                                            "type": "NumericLiteral",
                                                            "name": "1",
                                                            "range": [
                                                                112,
                                                                112
                                                            ],
                                                            "children": [],
                                                            "content": "1"
                                                        }
                                                    ],
                                                    "content": "+1"
                                                }
                                            ],
                                            "content": "range(start+1,len(input_string)+1)"
                                        }
                                    ],
                                    "content": "range(start+1,len(input_string)+1)"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        116,
                                        139
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "",
                                            "range": [
                                                116,
                                                135
                                            ],
                                            "children": [
                                                {
                                                    "type": "LogicalExpression",
                                                    "name": "and",
                                                    "range": [
                                                        125,
                                                        125
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "BinaryExpression",
                                                            "name": "in",
                                                            "range": [
                                                                123,
                                                                124
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "SubscriptExpression",
                                                                    "name": "",
                                                                    "range": [
                                                                        118,
                                                                        122
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "input_string",
                                                                            "range": [
                                                                                117,
                                                                                117
                                                                            ],
                                                                            "children": [],
                                                                            "content": "input_string"
                                                                        },
                                                                        {
                                                                            "type": "Slice",
                                                                            "name": "",
                                                                            "range": [
                                                                                119,
                                                                                121
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "start",
                                                                                    "range": [
                                                                                        119,
                                                                                        119
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "start"
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "end",
                                                                                    "range": [
                                                                                        121,
                                                                                        121
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "end"
                                                                                }
                                                                            ],
                                                                            "content": "start:end"
                                                                        }
                                                                    ],
                                                                    "content": "[start:end]"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "word_dict",
                                                                    "range": [
                                                                        124,
                                                                        124
                                                                    ],
                                                                    "children": [],
                                                                    "content": "word_dict"
                                                                }
                                                            ],
                                                            "content": "in word_dict"
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "backtrack",
                                                            "range": [
                                                                126,
                                                                135
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "input_string",
                                                                    "range": [
                                                                        129,
                                                                        129
                                                                    ],
                                                                    "children": [],
                                                                    "content": "input_string"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "word_dict",
                                                                    "range": [
                                                                        131,
                                                                        131
                                                                    ],
                                                                    "children": [],
                                                                    "content": "word_dict"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "end",
                                                                    "range": [
                                                                        133,
                                                                        133
                                                                    ],
                                                                    "children": [],
                                                                    "content": "end"
                                                                }
                                                            ],
                                                            "content": "backtrack(\ninput_string,word_dict,end\n)"
                                                        }
                                                    ],
                                                    "content": "and"
                                                }
                                            ],
                                            "content": "if input_string[start:end]in word_dict and backtrack(\ninput_string,word_dict,end\n)"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "",
                                            "range": [
                                                138,
                                                139
                                            ],
                                            "children": [
                                                {
                                                    "type": "BooleanLiteral",
                                                    "name": "True",
                                                    "range": [
                                                        139,
                                                        139
                                                    ],
                                                    "children": [],
                                                    "content": "True"
                                                }
                                            ],
                                            "content": "return True"
                                        }
                                    ],
                                    "content": "if input_string[start:end]in word_dict and backtrack(\ninput_string,word_dict,end\n):\nreturn True"
                                }
                            ],
                            "content": "for end in range(start+1,len(input_string)+1):\nif input_string[start:end]in word_dict and backtrack(\ninput_string,word_dict,end\n):\nreturn True\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                142,
                                143
                            ],
                            "children": [
                                {
                                    "type": "BooleanLiteral",
                                    "name": "False",
                                    "range": [
                                        143,
                                        143
                                    ],
                                    "children": [],
                                    "content": "False"
                                }
                            ],
                            "content": "return False"
                        }
                    ],
                    "content": "\n\"\"\" \\n     Helper function that uses backtracking to determine if a valid \\n     word segmentation is possible starting from index 'start'. \\n  \\n     Parameters: \\n     input_string (str): The input string to be segmented. \\n     word_dict (set[str]): A set of valid dictionary words. \\n     start (int): The starting index of the substring to be checked. \\n  \\n     Returns: \\n     bool: True if a valid segmentation is possible, otherwise False. \\n  \\n     Example: \\n     >>> backtrack(\" leetcode\", {\"leet\", \"code \"}, 0) \\n     True \\n  \\n     >>> backtrack(\" applepenapple\", {\"apple\", \"pen \"}, 0) \\n     True \\n  \\n     >>> backtrack(\" catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat \"}, 0) \\n     False \\n     \"\"\"\n\n#Base case:if the starting index has reached the end of the string\nif start==len(input_string):\nreturn True\n\n#Try every possible substring from 'start' to 'end'\nfor end in range(start+1,len(input_string)+1):\nif input_string[start:end]in word_dict and backtrack(\ninput_string,word_dict,end\n):\nreturn True\n\nreturn False\n\n"
                }
            ],
            "content": "def backtrack(input_string:str,word_dict:set[str],start:int)->bool:\n\"\"\" \\n     Helper function that uses backtracking to determine if a valid \\n     word segmentation is possible starting from index 'start'. \\n  \\n     Parameters: \\n     input_string (str): The input string to be segmented. \\n     word_dict (set[str]): A set of valid dictionary words. \\n     start (int): The starting index of the substring to be checked. \\n  \\n     Returns: \\n     bool: True if a valid segmentation is possible, otherwise False. \\n  \\n     Example: \\n     >>> backtrack(\" leetcode\", {\"leet\", \"code \"}, 0) \\n     True \\n  \\n     >>> backtrack(\" applepenapple\", {\"apple\", \"pen \"}, 0) \\n     True \\n  \\n     >>> backtrack(\" catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat \"}, 0) \\n     False \\n     \"\"\"\n\n#Base case:if the starting index has reached the end of the string\nif start==len(input_string):\nreturn True\n\n#Try every possible substring from 'start' to 'end'\nfor end in range(start+1,len(input_string)+1):\nif input_string[start:end]in word_dict and backtrack(\ninput_string,word_dict,end\n):\nreturn True\n\nreturn False\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "word_break",
            "range": [
                146,
                204
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "word_break",
                    "range": [
                        146,
                        163
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                146,
                                149
                            ],
                            "children": [],
                            "content": "\ndef word_break("
                        },
                        {
                            "type": "Identifier",
                            "name": "word_break",
                            "range": [
                                147,
                                158
                            ],
                            "children": [],
                            "content": "def word_break(input_string:str,word_dict:set[str"
                        },
                        {
                            "type": "ParameterList",
                            "name": "parameters",
                            "range": [
                                148,
                                159
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "input_string",
                                    "range": [
                                        149,
                                        152
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "str",
                                            "range": [
                                                151,
                                                154
                                            ],
                                            "children": [],
                                            "content": ":str,word_dict"
                                        }
                                    ],
                                    "content": "(input_string:str"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "word_dict",
                                    "range": [
                                        153,
                                        159
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "set[str]",
                                            "range": [
                                                155,
                                                159
                                            ],
                                            "children": [],
                                            "content": ":set[str]"
                                        }
                                    ],
                                    "content": ",word_dict:set[str]"
                                }
                            ],
                            "content": "word_break(input_string:str,word_dict:set[str]"
                        },
                        {
                            "type": "ReturnType",
                            "name": "bool",
                            "range": [
                                162,
                                163
                            ],
                            "children": [],
                            "content": ">bool"
                        }
                    ],
                    "content": "\ndef word_break(input_string:str,word_dict:set[str])->bool"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        164,
                        204
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                165,
                                191
                            ],
                            "children": [],
                            "content": "\n\"\"\" \\n     Determines if the input string can be segmented into a sequence of \\n     valid dictionary words using backtracking. \\n  \\n     Parameters: \\n     input_string (str): The input string to segment. \\n     word_dict (set[str]): The set of valid words. \\n  \\n     Returns: \\n     bool: True if the string can be segmented into valid words, otherwise False. \\n  \\n     Example: \\n     >>> word_break(\" leetcode\", {\"leet\", \"code \"}) \\n     True \\n  \\n     >>> word_break(\" applepenapple\", {\"apple\", \"pen \"}) \\n     True \\n  \\n     >>> word_break(\" catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat \"}) \\n     False \\n     \""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                194,
                                203
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "backtrack",
                                    "range": [
                                        195,
                                        202
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "input_string",
                                            "range": [
                                                197,
                                                198
                                            ],
                                            "children": [],
                                            "content": "(input_string"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "word_dict",
                                            "range": [
                                                199,
                                                200
                                            ],
                                            "children": [],
                                            "content": ",word_dict"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "0",
                                            "range": [
                                                201,
                                                202
                                            ],
                                            "children": [],
                                            "content": ",0"
                                        }
                                    ],
                                    "content": "return backtrack(input_string,word_dict,0"
                                }
                            ],
                            "content": "\nreturn backtrack(input_string,word_dict,0)"
                        }
                    ],
                    "content": ":\n\"\"\" \\n     Determines if the input string can be segmented into a sequence of \\n     valid dictionary words using backtracking. \\n  \\n     Parameters: \\n     input_string (str): The input string to segment. \\n     word_dict (set[str]): The set of valid words. \\n  \\n     Returns: \\n     bool: True if the string can be segmented into valid words, otherwise False. \\n  \\n     Example: \\n     >>> word_break(\" leetcode\", {\"leet\", \"code \"}) \\n     True \\n  \\n     >>> word_break(\" applepenapple\", {\"apple\", \"pen \"}) \\n     True \\n  \\n     >>> word_break(\" catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat \"}) \\n     False \\n     \"\"\"\n\nreturn backtrack(input_string,word_dict,0)\n"
                }
            ],
            "content": "\ndef word_break(input_string:str,word_dict:set[str])->bool:\n\"\"\" \\n     Determines if the input string can be segmented into a sequence of \\n     valid dictionary words using backtracking. \\n  \\n     Parameters: \\n     input_string (str): The input string to segment. \\n     word_dict (set[str]): The set of valid words. \\n  \\n     Returns: \\n     bool: True if the string can be segmented into valid words, otherwise False. \\n  \\n     Example: \\n     >>> word_break(\" leetcode\", {\"leet\", \"code \"}) \\n     True \\n  \\n     >>> word_break(\" applepenapple\", {\"apple\", \"pen \"}) \\n     True \\n  \\n     >>> word_break(\" catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat \"}) \\n     False \\n     \"\"\"\n\nreturn backtrack(input_string,word_dict,0)\n"
        }
    ],
    "content": "\"\"\" \\n Word Break Problem is a well-known problem in computer science. \\n Given a string and a dictionary of words, the task is to determine if \\n the string can be segmented into a sequence of one or more dictionary words. \\n  \\n Wikipedia: https://en.wikipedia.org/wiki/Word_break_problem \\n \"\"\"\n\n\ndef backtrack(input_string:str,word_dict:set[str],start:int)->bool:\n\"\"\" \\n     Helper function that uses backtracking to determine if a valid \\n     word segmentation is possible starting from index 'start'. \\n  \\n     Parameters: \\n     input_string (str): The input string to be segmented. \\n     word_dict (set[str]): A set of valid dictionary words. \\n     start (int): The starting index of the substring to be checked. \\n  \\n     Returns: \\n     bool: True if a valid segmentation is possible, otherwise False. \\n  \\n     Example: \\n     >>> backtrack(\" leetcode\", {\"leet\", \"code \"}, 0) \\n     True \\n  \\n     >>> backtrack(\" applepenapple\", {\"apple\", \"pen \"}, 0) \\n     True \\n  \\n     >>> backtrack(\" catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat \"}, 0) \\n     False \\n     \"\"\"\n\n#Base case:if the starting index has reached the end of the string\nif start==len(input_string):\nreturn True\n\n#Try every possible substring from 'start' to 'end'\nfor end in range(start+1,len(input_string)+1):\nif input_string[start:end]in word_dict and backtrack(\ninput_string,word_dict,end\n):\nreturn True\n\nreturn False\n\n\ndef word_break(input_string:str,word_dict:set[str])->bool:\n\"\"\" \\n     Determines if the input string can be segmented into a sequence of \\n     valid dictionary words using backtracking. \\n  \\n     Parameters: \\n     input_string (str): The input string to segment. \\n     word_dict (set[str]): The set of valid words. \\n  \\n     Returns: \\n     bool: True if the string can be segmented into valid words, otherwise False. \\n  \\n     Example: \\n     >>> word_break(\" leetcode\", {\"leet\", \"code \"}) \\n     True \\n  \\n     >>> word_break(\" applepenapple\", {\"apple\", \"pen \"}) \\n     True \\n  \\n     >>> word_break(\" catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat \"}) \\n     False \\n     \"\"\"\n\nreturn backtrack(input_string,word_dict,0)\n"
}