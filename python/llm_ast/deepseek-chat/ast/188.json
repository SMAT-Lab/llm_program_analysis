{
    "type": "Program",
    "name": "Global",
    "range": [
        52,
        1505
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "setup_prisma",
            "range": [
                62,
                98
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.fixture",
                    "range": [
                        52,
                        60
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "autouse",
                            "range": [
                                57,
                                59
                            ],
                            "children": [],
                            "content": "(autouse="
                        }
                    ],
                    "content": "\n@pytest.fixture(autouse=True"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        68,
                        98
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "name": "# Don't register client if already registered",
                            "range": [
                                69,
                                77
                            ],
                            "children": [],
                            "content": "\n#Don't register client if already"
                        },
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                79,
                                95
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        81,
                                        85
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                82,
                                                84
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "Prisma",
                                                    "range": [
                                                        82,
                                                        84
                                                    ],
                                                    "children": [],
                                                    "content": "\nPrisma("
                                                }
                                            ],
                                            "content": "\nPrisma("
                                        }
                                    ],
                                    "content": ":\nPrisma()"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except prisma.errors.ClientAlreadyRegisteredError",
                                    "range": [
                                        86,
                                        94
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                93,
                                                94
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        94,
                                                        94
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "pass",
                                                            "range": [
                                                                94,
                                                                94
                                                            ],
                                                            "children": [],
                                                            "content": "\n"
                                                        }
                                                    ],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": ":\n"
                                        }
                                    ],
                                    "content": "\nexcept prisma.errors.ClientAlreadyRegisteredError:\n"
                                }
                            ],
                            "content": "\ntry:\nPrisma()\nexcept prisma.errors.ClientAlreadyRegisteredError:\npass"
                        },
                        {
                            "type": "YieldStatement",
                            "name": "",
                            "range": [
                                96,
                                97
                            ],
                            "children": [],
                            "content": "\nyield"
                        }
                    ],
                    "content": ":\n#Don't register client if already registered\ntry:\nPrisma()\nexcept prisma.errors.ClientAlreadyRegisteredError:\npass\nyield\n"
                }
            ],
            "content": "\nasync def setup_prisma():\n#Don't register client if already registered\ntry:\nPrisma()\nexcept prisma.errors.ClientAlreadyRegisteredError:\npass\nyield\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_store_agents",
            "range": [
                106,
                348
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.mark.asyncio",
                    "range": [
                        99,
                        105
                    ],
                    "children": [],
                    "content": "\n\n@pytest.mark."
                },
                {
                    "type": "FunctionSignature",
                    "name": "test_get_store_agents",
                    "range": [
                        106,
                        112
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                106,
                                111
                            ],
                            "children": [],
                            "content": "asyncio\nasync def test_get_store_agents("
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                107,
                                110
                            ],
                            "children": [],
                            "content": "\nasync def test_get_store_agents"
                        },
                        {
                            "type": "Identifier",
                            "name": "test_get_store_agents",
                            "range": [
                                108,
                                128
                            ],
                            "children": [],
                            "content": "async def test_get_store_agents(mocker):\n#Mock data\nmock_agents=[\nprisma.models.StoreAgent"
                        },
                        {
                            "type": "Parameter",
                            "name": "mocker",
                            "range": [
                                110,
                                116
                            ],
                            "children": [],
                            "content": "test_get_store_agents(mocker):\n#"
                        }
                    ],
                    "content": "asyncio\nasync def test_get_store_agents(mocker"
                },
                {
                    "type": "Block",
                    "name": "FunctionBody",
                    "range": [
                        113,
                        348
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "name": "# Mock data",
                            "range": [
                                114,
                                117
                            ],
                            "children": [],
                            "content": ":\n#Mock"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_agents",
                            "range": [
                                118,
                                222
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        119,
                                        120
                                    ],
                                    "children": [],
                                    "content": "\nmock_agents"
                                },
                                {
                                    "type": "ArrayLiteral",
                                    "name": "[]",
                                    "range": [
                                        120,
                                        222
                                    ],
                                    "children": [
                                        {
                                            "type": "ObjectLiteral",
                                            "name": "StoreAgent",
                                            "range": [
                                                122,
                                                220
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "listing_id",
                                                    "range": [
                                                        129,
                                                        131
                                                    ],
                                                    "children": [],
                                                    "content": "(\nlisting_id"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "storeListingVersionId",
                                                    "range": [
                                                        134,
                                                        136
                                                    ],
                                                    "children": [],
                                                    "content": ",\nstoreListingVersionId"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "slug",
                                                    "range": [
                                                        139,
                                                        141
                                                    ],
                                                    "children": [],
                                                    "content": ",\nslug"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "agent_name",
                                                    "range": [
                                                        144,
                                                        146
                                                    ],
                                                    "children": [],
                                                    "content": ",\nagent_name"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "agent_video",
                                                    "range": [
                                                        149,
                                                        151
                                                    ],
                                                    "children": [],
                                                    "content": ",\nagent_video"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "agent_image",
                                                    "range": [
                                                        154,
                                                        158
                                                    ],
                                                    "children": [],
                                                    "content": ",\nagent_image=["
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "featured",
                                                    "range": [
                                                        161,
                                                        163
                                                    ],
                                                    "children": [],
                                                    "content": ",\nfeatured"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "creator_username",
                                                    "range": [
                                                        166,
                                                        168
                                                    ],
                                                    "children": [],
                                                    "content": ",\ncreator_username"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "creator_avatar",
                                                    "range": [
                                                        171,
                                                        173
                                                    ],
                                                    "children": [],
                                                    "content": ",\ncreator_avatar"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "sub_heading",
                                                    "range": [
                                                        176,
                                                        178
                                                    ],
                                                    "children": [],
                                                    "content": ",\nsub_heading"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "description",
                                                    "range": [
                                                        181,
                                                        183
                                                    ],
                                                    "children": [],
                                                    "content": ",\ndescription"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "categories",
                                                    "range": [
                                                        186,
                                                        188
                                                    ],
                                                    "children": [],
                                                    "content": ",\ncategories"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "runs",
                                                    "range": [
                                                        192,
                                                        194
                                                    ],
                                                    "children": [],
                                                    "content": ",\nruns"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "rating",
                                                    "range": [
                                                        197,
                                                        201
                                                    ],
                                                    "children": [],
                                                    "content": ",\nrating=4"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "versions",
                                                    "range": [
                                                        204,
                                                        208
                                                    ],
                                                    "children": [],
                                                    "content": ",\nversions=["
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "updated_at",
                                                    "range": [
                                                        211,
                                                        217
                                                    ],
                                                    "children": [],
                                                    "content": ",\nupdated_at=datetime.now"
                                                }
                                            ],
                                            "content": "[\nprisma.models.StoreAgent(\nlisting_id=\"test-id\",\nstoreListingVersionId=\"version123\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=None,\nagent_image=[\"image.jpg\"],\nfeatured=False,\ncreator_username=\"creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Test heading\",\ndescription=\"Test description\",\ncategories=[],\nruns=10,\nrating=4.5,\nversions=[\"1.0\"],\nupdated_at=datetime.now(),"
                                        }
                                    ],
                                    "content": "mock_agents=[\nprisma.models.StoreAgent(\nlisting_id=\"test-id\",\nstoreListingVersionId=\"version123\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=None,\nagent_image=[\"image.jpg\"],\nfeatured=False,\ncreator_username=\"creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Test heading\",\ndescription=\"Test description\",\ncategories=[],\nruns=10,\nrating=4.5,\nversions=[\"1.0\"],\nupdated_at=datetime.now(),\n)"
                                }
                            ],
                            "content": "data\nmock_agents=[\nprisma.models.StoreAgent(\nlisting_id=\"test-id\",\nstoreListingVersionId=\"version123\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=None,\nagent_image=[\"image.jpg\"],\nfeatured=False,\ncreator_username=\"creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Test heading\",\ndescription=\"Test description\",\ncategories=[],\nruns=10,\nrating=4.5,\nversions=[\"1.0\"],\nupdated_at=datetime.now(),\n)"
                        },
                        {
                            "type": "Comment",
                            "name": "# Mock prisma calls",
                            "range": [
                                225,
                                229
                            ],
                            "children": [],
                            "content": "\n\n#Mock prisma"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_store_agent",
                            "range": [
                                230,
                                268
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        231,
                                        232
                                    ],
                                    "children": [],
                                    "content": "\nmock_store_agent"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "mocker.patch",
                                    "range": [
                                        232,
                                        237
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "\"prisma.models.StoreAgent.prisma\"",
                                            "range": [
                                                236,
                                                237
                                            ],
                                            "children": [],
                                            "content": "patch("
                                        }
                                    ],
                                    "content": "mock_store_agent=mocker.patch("
                                },
                                {
                                    "type": "PropertyAccess",
                                    "name": "mock_store_agent.return_value.find_many",
                                    "range": [
                                        239,
                                        252
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "=",
                                            "range": [
                                                244,
                                                245
                                            ],
                                            "children": [],
                                            "content": ".find_many"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "mocker.AsyncMock",
                                            "range": [
                                                245,
                                                252
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "return_value=mock_agents",
                                                    "range": [
                                                        249,
                                                        251
                                                    ],
                                                    "children": [],
                                                    "content": "AsyncMock(return_value"
                                                }
                                            ],
                                            "content": "find_many=mocker.AsyncMock(return_value="
                                        }
                                    ],
                                    "content": ")\nmock_store_agent.return_value.find_many=mocker.AsyncMock(return_value="
                                },
                                {
                                    "type": "PropertyAccess",
                                    "name": "mock_store_agent.return_value.count",
                                    "range": [
                                        254,
                                        267
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "=",
                                            "range": [
                                                259,
                                                260
                                            ],
                                            "children": [],
                                            "content": ".count"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "mocker.AsyncMock",
                                            "range": [
                                                260,
                                                267
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "return_value=1",
                                                    "range": [
                                                        264,
                                                        266
                                                    ],
                                                    "children": [],
                                                    "content": "AsyncMock(return_value"
                                                }
                                            ],
                                            "content": "count=mocker.AsyncMock(return_value="
                                        }
                                    ],
                                    "content": ")\nmock_store_agent.return_value.count=mocker.AsyncMock(return_value="
                                }
                            ],
                            "content": "calls\nmock_store_agent=mocker.patch(\"prisma.models.StoreAgent.prisma\")\nmock_store_agent.return_value.find_many=mocker.AsyncMock(return_value=mock_agents)\nmock_store_agent.return_value.count=mocker.AsyncMock(return_value=1"
                        },
                        {
                            "type": "Comment",
                            "name": "# Call function",
                            "range": [
                                270,
                                273
                            ],
                            "children": [],
                            "content": "\n\n#Call"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "result",
                            "range": [
                                274,
                                282
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        275,
                                        276
                                    ],
                                    "children": [],
                                    "content": "\nresult"
                                },
                                {
                                    "type": "AwaitExpression",
                                    "name": "await db.get_store_agents",
                                    "range": [
                                        276,
                                        281
                                    ],
                                    "children": [],
                                    "content": "result=await db.get_store_agents"
                                }
                            ],
                            "content": "function\nresult=await db.get_store_agents("
                        },
                        {
                            "type": "Comment",
                            "name": "# Verify results",
                            "range": [
                                284,
                                287
                            ],
                            "children": [],
                            "content": "\n\n#Verify"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert len(result.agents) == 1",
                            "range": [
                                288,
                                298
                            ],
                            "children": [],
                            "content": "results\nassert len(result.agents)=="
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert result.agents[0].slug == \"test-agent\"",
                            "range": [
                                299,
                                311
                            ],
                            "children": [],
                            "content": "1\nassert result.agents[0].slug=="
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert result.pagination.total_items == 1",
                            "range": [
                                312,
                                321
                            ],
                            "children": [],
                            "content": "\"test-agent\"\nassert result.pagination.total_items=="
                        },
                        {
                            "type": "Comment",
                            "name": "# Verify mocks called correctly",
                            "range": [
                                323,
                                328
                            ],
                            "children": [],
                            "content": "\n\n#Verify mocks called"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_store_agent.return_value.find_many.assert_called_once",
                            "range": [
                                329,
                                338
                            ],
                            "children": [],
                            "content": "correctly\nmock_store_agent.return_value.find_many.assert_called_once("
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_store_agent.return_value.count.assert_called_once",
                            "range": [
                                339,
                                348
                            ],
                            "children": [],
                            "content": ")\nmock_store_agent.return_value.count.assert_called_once("
                        }
                    ],
                    "content": "):\n#Mock data\nmock_agents=[\nprisma.models.StoreAgent(\nlisting_id=\"test-id\",\nstoreListingVersionId=\"version123\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=None,\nagent_image=[\"image.jpg\"],\nfeatured=False,\ncreator_username=\"creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Test heading\",\ndescription=\"Test description\",\ncategories=[],\nruns=10,\nrating=4.5,\nversions=[\"1.0\"],\nupdated_at=datetime.now(),\n)\n]\n\n#Mock prisma calls\nmock_store_agent=mocker.patch(\"prisma.models.StoreAgent.prisma\")\nmock_store_agent.return_value.find_many=mocker.AsyncMock(return_value=mock_agents)\nmock_store_agent.return_value.count=mocker.AsyncMock(return_value=1)\n\n#Call function\nresult=await db.get_store_agents()\n\n#Verify results\nassert len(result.agents)==1\nassert result.agents[0].slug==\"test-agent\"\nassert result.pagination.total_items==1\n\n#Verify mocks called correctly\nmock_store_agent.return_value.find_many.assert_called_once()\nmock_store_agent.return_value.count.assert_called_once("
                }
            ],
            "content": "asyncio\nasync def test_get_store_agents(mocker):\n#Mock data\nmock_agents=[\nprisma.models.StoreAgent(\nlisting_id=\"test-id\",\nstoreListingVersionId=\"version123\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=None,\nagent_image=[\"image.jpg\"],\nfeatured=False,\ncreator_username=\"creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Test heading\",\ndescription=\"Test description\",\ncategories=[],\nruns=10,\nrating=4.5,\nversions=[\"1.0\"],\nupdated_at=datetime.now(),\n)\n]\n\n#Mock prisma calls\nmock_store_agent=mocker.patch(\"prisma.models.StoreAgent.prisma\")\nmock_store_agent.return_value.find_many=mocker.AsyncMock(return_value=mock_agents)\nmock_store_agent.return_value.count=mocker.AsyncMock(return_value=1)\n\n#Call function\nresult=await db.get_store_agents()\n\n#Verify results\nassert len(result.agents)==1\nassert result.agents[0].slug==\"test-agent\"\nassert result.pagination.total_items==1\n\n#Verify mocks called correctly\nmock_store_agent.return_value.find_many.assert_called_once()\nmock_store_agent.return_value.count.assert_called_once("
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_store_agent_details",
            "range": [
                357,
                569
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.mark.asyncio",
                    "range": [
                        350,
                        356
                    ],
                    "children": [],
                    "content": "\n\n\n@pytest.mark"
                },
                {
                    "type": "FunctionSignature",
                    "name": "test_get_store_agent_details",
                    "range": [
                        357,
                        363
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                357,
                                362
                            ],
                            "children": [],
                            "content": ".asyncio\nasync def test_get_store_agent_details"
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                358,
                                361
                            ],
                            "children": [],
                            "content": "asyncio\nasync def"
                        },
                        {
                            "type": "Identifier",
                            "name": "test_get_store_agent_details",
                            "range": [
                                359,
                                362
                            ],
                            "children": [],
                            "content": "\nasync def test_get_store_agent_details"
                        },
                        {
                            "type": "Identifier",
                            "name": "mocker",
                            "range": [
                                361,
                                362
                            ],
                            "children": [],
                            "content": "def test_get_store_agent_details"
                        }
                    ],
                    "content": ".asyncio\nasync def test_get_store_agent_details("
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        364,
                        569
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "name": "# Mock data",
                            "range": [
                                365,
                                368
                            ],
                            "children": [],
                            "content": "):\n#"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_agent",
                            "range": [
                                369,
                                470
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "mock_agent",
                                    "range": [
                                        369,
                                        370
                                    ],
                                    "children": [],
                                    "content": "Mock data"
                                },
                                {
                                    "type": "NewExpression",
                                    "name": "StoreAgent",
                                    "range": [
                                        371,
                                        470
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "prisma",
                                            "range": [
                                                371,
                                                372
                                            ],
                                            "children": [],
                                            "content": "\nmock_agent"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "models",
                                            "range": [
                                                373,
                                                374
                                            ],
                                            "children": [],
                                            "content": "=prisma"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "StoreAgent",
                                            "range": [
                                                375,
                                                376
                                            ],
                                            "children": [],
                                            "content": ".models"
                                        },
                                        {
                                            "type": "ObjectExpression",
                                            "name": "",
                                            "range": [
                                                377,
                                                470
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "listing_id",
                                                    "range": [
                                                        378,
                                                        381
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "listing_id",
                                                            "range": [
                                                                378,
                                                                379
                                                            ],
                                                            "children": [],
                                                            "content": "StoreAgent("
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"test-id\"",
                                                            "range": [
                                                                380,
                                                                381
                                                            ],
                                                            "children": [],
                                                            "content": "\nlisting_id"
                                                        }
                                                    ],
                                                    "content": "StoreAgent(\nlisting_id"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "storeListingVersionId",
                                                    "range": [
                                                        383,
                                                        386
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "storeListingVersionId",
                                                            "range": [
                                                                383,
                                                                384
                                                            ],
                                                            "children": [],
                                                            "content": "\"test-id\","
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"version123\"",
                                                            "range": [
                                                                385,
                                                                386
                                                            ],
                                                            "children": [],
                                                            "content": "\nstoreListingVersionId"
                                                        }
                                                    ],
                                                    "content": "\"test-id\",\nstoreListingVersionId"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "slug",
                                                    "range": [
                                                        388,
                                                        391
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "slug",
                                                            "range": [
                                                                388,
                                                                389
                                                            ],
                                                            "children": [],
                                                            "content": "\"version123\","
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"test-agent\"",
                                                            "range": [
                                                                390,
                                                                391
                                                            ],
                                                            "children": [],
                                                            "content": "\nslug"
                                                        }
                                                    ],
                                                    "content": "\"version123\",\nslug"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "agent_name",
                                                    "range": [
                                                        393,
                                                        396
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "agent_name",
                                                            "range": [
                                                                393,
                                                                394
                                                            ],
                                                            "children": [],
                                                            "content": "\"test-agent\","
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"Test Agent\"",
                                                            "range": [
                                                                395,
                                                                396
                                                            ],
                                                            "children": [],
                                                            "content": "\nagent_name"
                                                        }
                                                    ],
                                                    "content": "\"test-agent\",\nagent_name"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "agent_video",
                                                    "range": [
                                                        398,
                                                        401
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "agent_video",
                                                            "range": [
                                                                398,
                                                                399
                                                            ],
                                                            "children": [],
                                                            "content": "\"Test Agent\","
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"video.mp4\"",
                                                            "range": [
                                                                400,
                                                                401
                                                            ],
                                                            "children": [],
                                                            "content": "\nagent_video"
                                                        }
                                                    ],
                                                    "content": "\"Test Agent\",\nagent_video"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "agent_image",
                                                    "range": [
                                                        403,
                                                        408
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "agent_image",
                                                            "range": [
                                                                403,
                                                                404
                                                            ],
                                                            "children": [],
                                                            "content": "\"video.mp4\","
                                                        },
                                                        {
                                                            "type": "ArrayExpression",
                                                            "name": "",
                                                            "range": [
                                                                405,
                                                                408
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"image.jpg\"",
                                                                    "range": [
                                                                        406,
                                                                        407
                                                                    ],
                                                                    "children": [],
                                                                    "content": "agent_image="
                                                                }
                                                            ],
                                                            "content": "\nagent_image=["
                                                        }
                                                    ],
                                                    "content": "\"video.mp4\",\nagent_image=["
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "featured",
                                                    "range": [
                                                        410,
                                                        413
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "featured",
                                                            "range": [
                                                                410,
                                                                411
                                                            ],
                                                            "children": [],
                                                            "content": "],"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "False",
                                                            "range": [
                                                                412,
                                                                413
                                                            ],
                                                            "children": [],
                                                            "content": "\nfeatured"
                                                        }
                                                    ],
                                                    "content": "],\nfeatured"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "creator_username",
                                                    "range": [
                                                        415,
                                                        418
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "creator_username",
                                                            "range": [
                                                                415,
                                                                416
                                                            ],
                                                            "children": [],
                                                            "content": "False,"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"creator\"",
                                                            "range": [
                                                                417,
                                                                418
                                                            ],
                                                            "children": [],
                                                            "content": "\ncreator_username"
                                                        }
                                                    ],
                                                    "content": "False,\ncreator_username"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "creator_avatar",
                                                    "range": [
                                                        420,
                                                        423
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "creator_avatar",
                                                            "range": [
                                                                420,
                                                                421
                                                            ],
                                                            "children": [],
                                                            "content": "\"creator\","
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"avatar.jpg\"",
                                                            "range": [
                                                                422,
                                                                423
                                                            ],
                                                            "children": [],
                                                            "content": "\ncreator_avatar"
                                                        }
                                                    ],
                                                    "content": "\"creator\",\ncreator_avatar"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "sub_heading",
                                                    "range": [
                                                        425,
                                                        428
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "sub_heading",
                                                            "range": [
                                                                425,
                                                                426
                                                            ],
                                                            "children": [],
                                                            "content": "\"avatar.jpg\","
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"Test heading\"",
                                                            "range": [
                                                                427,
                                                                428
                                                            ],
                                                            "children": [],
                                                            "content": "\nsub_heading"
                                                        }
                                                    ],
                                                    "content": "\"avatar.jpg\",\nsub_heading"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "description",
                                                    "range": [
                                                        430,
                                                        433
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "description",
                                                            "range": [
                                                                430,
                                                                431
                                                            ],
                                                            "children": [],
                                                            "content": "\"Test heading\","
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"Test description\"",
                                                            "range": [
                                                                432,
                                                                433
                                                            ],
                                                            "children": [],
                                                            "content": "\ndescription"
                                                        }
                                                    ],
                                                    "content": "\"Test heading\",\ndescription"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "categories",
                                                    "range": [
                                                        435,
                                                        440
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "categories",
                                                            "range": [
                                                                435,
                                                                436
                                                            ],
                                                            "children": [],
                                                            "content": "\"Test description\","
                                                        },
                                                        {
                                                            "type": "ArrayExpression",
                                                            "name": "",
                                                            "range": [
                                                                437,
                                                                440
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"test\"",
                                                                    "range": [
                                                                        438,
                                                                        439
                                                                    ],
                                                                    "children": [],
                                                                    "content": "categories="
                                                                }
                                                            ],
                                                            "content": "\ncategories=["
                                                        }
                                                    ],
                                                    "content": "\"Test description\",\ncategories=["
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "runs",
                                                    "range": [
                                                        442,
                                                        445
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "runs",
                                                            "range": [
                                                                442,
                                                                443
                                                            ],
                                                            "children": [],
                                                            "content": "],"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "10",
                                                            "range": [
                                                                444,
                                                                445
                                                            ],
                                                            "children": [],
                                                            "content": "\nruns"
                                                        }
                                                    ],
                                                    "content": "],\nruns"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "rating",
                                                    "range": [
                                                        447,
                                                        452
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "rating",
                                                            "range": [
                                                                447,
                                                                448
                                                            ],
                                                            "children": [],
                                                            "content": "10,"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "4.5",
                                                            "range": [
                                                                449,
                                                                452
                                                            ],
                                                            "children": [],
                                                            "content": "\nrating=4"
                                                        }
                                                    ],
                                                    "content": "10,\nrating=4"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "versions",
                                                    "range": [
                                                        454,
                                                        459
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "versions",
                                                            "range": [
                                                                454,
                                                                455
                                                            ],
                                                            "children": [],
                                                            "content": "5,"
                                                        },
                                                        {
                                                            "type": "ArrayExpression",
                                                            "name": "",
                                                            "range": [
                                                                456,
                                                                459
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"1.0\"",
                                                                    "range": [
                                                                        457,
                                                                        458
                                                                    ],
                                                                    "children": [],
                                                                    "content": "versions="
                                                                }
                                                            ],
                                                            "content": "\nversions=["
                                                        }
                                                    ],
                                                    "content": "5,\nversions=["
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "updated_at",
                                                    "range": [
                                                        461,
                                                        468
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "updated_at",
                                                            "range": [
                                                                461,
                                                                462
                                                            ],
                                                            "children": [],
                                                            "content": "],"
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "datetime.now",
                                                            "range": [
                                                                463,
                                                                468
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "datetime",
                                                                    "range": [
                                                                        463,
                                                                        464
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nupdated_at"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "now",
                                                                    "range": [
                                                                        465,
                                                                        466
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=datetime"
                                                                }
                                                            ],
                                                            "content": "\nupdated_at=datetime.now"
                                                        }
                                                    ],
                                                    "content": "],\nupdated_at=datetime.now"
                                                }
                                            ],
                                            "content": ".StoreAgent(\nlisting_id=\"test-id\",\nstoreListingVersionId=\"version123\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=\"video.mp4\",\nagent_image=[\"image.jpg\"],\nfeatured=False,\ncreator_username=\"creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Test heading\",\ndescription=\"Test description\",\ncategories=[\"test\"],\nruns=10,\nrating=4.5,\nversions=[\"1.0\"],\nupdated_at=datetime.now()"
                                        }
                                    ],
                                    "content": "\nmock_agent=prisma.models.StoreAgent(\nlisting_id=\"test-id\",\nstoreListingVersionId=\"version123\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=\"video.mp4\",\nagent_image=[\"image.jpg\"],\nfeatured=False,\ncreator_username=\"creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Test heading\",\ndescription=\"Test description\",\ncategories=[\"test\"],\nruns=10,\nrating=4.5,\nversions=[\"1.0\"],\nupdated_at=datetime.now()"
                                }
                            ],
                            "content": "Mock data\nmock_agent=prisma.models.StoreAgent(\nlisting_id=\"test-id\",\nstoreListingVersionId=\"version123\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=\"video.mp4\",\nagent_image=[\"image.jpg\"],\nfeatured=False,\ncreator_username=\"creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Test heading\",\ndescription=\"Test description\",\ncategories=[\"test\"],\nruns=10,\nrating=4.5,\nversions=[\"1.0\"],\nupdated_at=datetime.now()"
                        },
                        {
                            "type": "Comment",
                            "name": "# Mock prisma call",
                            "range": [
                                473,
                                477
                            ],
                            "children": [],
                            "content": ")\n\n#Mock"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_store_agent",
                            "range": [
                                478,
                                500
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "mock_store_agent",
                                    "range": [
                                        478,
                                        479
                                    ],
                                    "children": [],
                                    "content": "prisma call"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "mocker.patch",
                                    "range": [
                                        480,
                                        500
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mocker",
                                            "range": [
                                                480,
                                                481
                                            ],
                                            "children": [],
                                            "content": "\nmock_store_agent"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "patch",
                                            "range": [
                                                482,
                                                483
                                            ],
                                            "children": [],
                                            "content": "=mocker"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"prisma.models.StoreAgent.prisma\"",
                                            "range": [
                                                484,
                                                485
                                            ],
                                            "children": [],
                                            "content": ".patch"
                                        }
                                    ],
                                    "content": "\nmock_store_agent=mocker.patch(\"prisma.models.StoreAgent.prisma\")\nmock_store_agent.return_value.find_first=mocker.AsyncMock(return_value"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "return_value",
                                    "range": [
                                        487,
                                        488
                                    ],
                                    "children": [],
                                    "content": "\"prisma.models.StoreAgent.prisma\")"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "find_first",
                                    "range": [
                                        489,
                                        490
                                    ],
                                    "children": [],
                                    "content": "\nmock_store_agent"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "mocker.AsyncMock",
                                    "range": [
                                        491,
                                        500
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mocker",
                                            "range": [
                                                491,
                                                492
                                            ],
                                            "children": [],
                                            "content": ".return_value"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "AsyncMock",
                                            "range": [
                                                493,
                                                494
                                            ],
                                            "children": [],
                                            "content": ".find_first"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "return_value",
                                            "range": [
                                                495,
                                                496
                                            ],
                                            "children": [],
                                            "content": "=mocker"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "mock_agent",
                                            "range": [
                                                497,
                                                498
                                            ],
                                            "children": [],
                                            "content": ".AsyncMock"
                                        }
                                    ],
                                    "content": ".return_value.find_first=mocker.AsyncMock(return_value"
                                }
                            ],
                            "content": "prisma call\nmock_store_agent=mocker.patch(\"prisma.models.StoreAgent.prisma\")\nmock_store_agent.return_value.find_first=mocker.AsyncMock(return_value"
                        },
                        {
                            "type": "Comment",
                            "name": "# Call function",
                            "range": [
                                503,
                                506
                            ],
                            "children": [],
                            "content": ")\n\n#"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "result",
                            "range": [
                                507,
                                518
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "result",
                                    "range": [
                                        507,
                                        508
                                    ],
                                    "children": [],
                                    "content": "Call function"
                                },
                                {
                                    "type": "AwaitExpression",
                                    "name": "await db.get_store_agent_details",
                                    "range": [
                                        509,
                                        518
                                    ],
                                    "children": [
                                        {
                                            "type": "Keyword",
                                            "name": "await",
                                            "range": [
                                                509,
                                                510
                                            ],
                                            "children": [],
                                            "content": "\nresult"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "db",
                                            "range": [
                                                510,
                                                511
                                            ],
                                            "children": [],
                                            "content": "result="
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "get_store_agent_details",
                                            "range": [
                                                512,
                                                513
                                            ],
                                            "children": [],
                                            "content": "await db"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"creator\"",
                                            "range": [
                                                514,
                                                515
                                            ],
                                            "children": [],
                                            "content": ".get_store_agent_details"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"test-agent\"",
                                            "range": [
                                                516,
                                                517
                                            ],
                                            "children": [],
                                            "content": "(\"creator\""
                                        }
                                    ],
                                    "content": "\nresult=await db.get_store_agent_details(\"creator\","
                                }
                            ],
                            "content": "Call function\nresult=await db.get_store_agent_details(\"creator\","
                        },
                        {
                            "type": "Comment",
                            "name": "# Verify results",
                            "range": [
                                520,
                                523
                            ],
                            "children": [],
                            "content": ")\n\n#"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert result.slug == \"test-agent\"",
                            "range": [
                                524,
                                531
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "assert",
                                    "range": [
                                        524,
                                        525
                                    ],
                                    "children": [],
                                    "content": "Verify results"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "result",
                                    "range": [
                                        525,
                                        526
                                    ],
                                    "children": [],
                                    "content": "results\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "slug",
                                    "range": [
                                        527,
                                        528
                                    ],
                                    "children": [],
                                    "content": "assert result"
                                },
                                {
                                    "type": "Literal",
                                    "name": "\"test-agent\"",
                                    "range": [
                                        530,
                                        531
                                    ],
                                    "children": [],
                                    "content": "slug="
                                }
                            ],
                            "content": "Verify results\nassert result.slug="
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert result.agent_name == \"Test Agent\"",
                            "range": [
                                532,
                                539
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "assert",
                                    "range": [
                                        532,
                                        533
                                    ],
                                    "children": [],
                                    "content": "=\"test-agent\""
                                },
                                {
                                    "type": "Identifier",
                                    "name": "result",
                                    "range": [
                                        533,
                                        534
                                    ],
                                    "children": [],
                                    "content": "\"test-agent\"\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "agent_name",
                                    "range": [
                                        535,
                                        536
                                    ],
                                    "children": [],
                                    "content": "assert result"
                                },
                                {
                                    "type": "Literal",
                                    "name": "\"Test Agent\"",
                                    "range": [
                                        538,
                                        539
                                    ],
                                    "children": [],
                                    "content": "agent_name="
                                }
                            ],
                            "content": "=\"test-agent\"\nassert result.agent_name="
                        },
                        {
                            "type": "Comment",
                            "name": "# Verify mock called correctly",
                            "range": [
                                541,
                                546
                            ],
                            "children": [],
                            "content": "\"Test Agent\"\n\n#Verify mock"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_store_agent.return_value.find_first.assert_called_once_with",
                            "range": [
                                547,
                                569
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "mock_store_agent",
                                    "range": [
                                        547,
                                        548
                                    ],
                                    "children": [],
                                    "content": "called correctly"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "return_value",
                                    "range": [
                                        549,
                                        550
                                    ],
                                    "children": [],
                                    "content": "\nmock_store_agent"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "find_first",
                                    "range": [
                                        551,
                                        552
                                    ],
                                    "children": [],
                                    "content": ".return_value"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "assert_called_once_with",
                                    "range": [
                                        553,
                                        554
                                    ],
                                    "children": [],
                                    "content": ".find_first"
                                },
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        555,
                                        568
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "where",
                                            "range": [
                                                556,
                                                567
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "where",
                                                    "range": [
                                                        556,
                                                        557
                                                    ],
                                                    "children": [],
                                                    "content": "assert_called_once_with("
                                                },
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "",
                                                    "range": [
                                                        558,
                                                        567
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "creator_username",
                                                            "range": [
                                                                559,
                                                                562
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"creator_username\"",
                                                                    "range": [
                                                                        559,
                                                                        560
                                                                    ],
                                                                    "children": [],
                                                                    "content": "where="
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"creator\"",
                                                                    "range": [
                                                                        561,
                                                                        562
                                                                    ],
                                                                    "children": [],
                                                                    "content": "{\"creator_username\""
                                                                }
                                                            ],
                                                            "content": "where={\"creator_username\""
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "slug",
                                                            "range": [
                                                                563,
                                                                566
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"slug\"",
                                                                    "range": [
                                                                        563,
                                                                        564
                                                                    ],
                                                                    "children": [],
                                                                    "content": ":\"creator\""
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"test-agent\"",
                                                                    "range": [
                                                                        565,
                                                                        566
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\"slug\""
                                                                }
                                                            ],
                                                            "content": ":\"creator\",\"slug\""
                                                        }
                                                    ],
                                                    "content": "\nwhere={\"creator_username\":\"creator\",\"slug\":"
                                                }
                                            ],
                                            "content": "assert_called_once_with(\nwhere={\"creator_username\":\"creator\",\"slug\":"
                                        }
                                    ],
                                    "content": ".assert_called_once_with(\nwhere={\"creator_username\":\"creator\",\"slug\":\"test-agent\""
                                }
                            ],
                            "content": "called correctly\nmock_store_agent.return_value.find_first.assert_called_once_with(\nwhere={\"creator_username\":\"creator\",\"slug\":\"test-agent\"}"
                        }
                    ],
                    "content": "mocker):\n#Mock data\nmock_agent=prisma.models.StoreAgent(\nlisting_id=\"test-id\",\nstoreListingVersionId=\"version123\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=\"video.mp4\",\nagent_image=[\"image.jpg\"],\nfeatured=False,\ncreator_username=\"creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Test heading\",\ndescription=\"Test description\",\ncategories=[\"test\"],\nruns=10,\nrating=4.5,\nversions=[\"1.0\"],\nupdated_at=datetime.now(),\n)\n\n#Mock prisma call\nmock_store_agent=mocker.patch(\"prisma.models.StoreAgent.prisma\")\nmock_store_agent.return_value.find_first=mocker.AsyncMock(return_value=mock_agent)\n\n#Call function\nresult=await db.get_store_agent_details(\"creator\",\"test-agent\")\n\n#Verify results\nassert result.slug==\"test-agent\"\nassert result.agent_name==\"Test Agent\"\n\n#Verify mock called correctly\nmock_store_agent.return_value.find_first.assert_called_once_with(\nwhere={\"creator_username\":\"creator\",\"slug\":\"test-agent\"}"
                }
            ],
            "content": ".asyncio\nasync def test_get_store_agent_details(mocker):\n#Mock data\nmock_agent=prisma.models.StoreAgent(\nlisting_id=\"test-id\",\nstoreListingVersionId=\"version123\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=\"video.mp4\",\nagent_image=[\"image.jpg\"],\nfeatured=False,\ncreator_username=\"creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Test heading\",\ndescription=\"Test description\",\ncategories=[\"test\"],\nruns=10,\nrating=4.5,\nversions=[\"1.0\"],\nupdated_at=datetime.now(),\n)\n\n#Mock prisma call\nmock_store_agent=mocker.patch(\"prisma.models.StoreAgent.prisma\")\nmock_store_agent.return_value.find_first=mocker.AsyncMock(return_value=mock_agent)\n\n#Call function\nresult=await db.get_store_agent_details(\"creator\",\"test-agent\")\n\n#Verify results\nassert result.slug==\"test-agent\"\nassert result.agent_name==\"Test Agent\"\n\n#Verify mock called correctly\nmock_store_agent.return_value.find_first.assert_called_once_with(\nwhere={\"creator_username\":\"creator\",\"slug\":\"test-agent\"}"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_store_creator_details",
            "range": [
                578,
                783
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "test_get_store_creator_details",
                    "range": [
                        578,
                        584
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                578,
                                583
                            ],
                            "content": "mark.asyncio\nasync def"
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                579,
                                582
                            ],
                            "content": ".asyncio\nasync"
                        },
                        {
                            "type": "Identifier",
                            "name": "test_get_store_creator_details",
                            "range": [
                                580,
                                611
                            ],
                            "content": "asyncio\nasync def test_get_store_creator_details(mocker):\n#Mock data\nmock_creator_data=prisma.models.Creator(\nname=\"Test Creator\",\nusername=\"creator\","
                        },
                        {
                            "type": "Identifier",
                            "name": "mocker",
                            "range": [
                                582,
                                588
                            ],
                            "content": "async def test_get_store_creator_details(mocker):"
                        }
                    ],
                    "content": "mark.asyncio\nasync def test_get_store_creator_details"
                },
                {
                    "type": "Block",
                    "name": "Block",
                    "range": [
                        585,
                        783
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "name": "# Mock data",
                            "range": [
                                586,
                                589
                            ],
                            "content": "mocker):\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_creator_data",
                            "range": [
                                590,
                                655
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "mock_creator_data",
                                    "range": [
                                        590,
                                        606
                                    ],
                                    "content": "#Mock data\nmock_creator_data=prisma.models.Creator(\nname=\"Test Creator\","
                                },
                                {
                                    "type": "NewExpression",
                                    "name": "Creator",
                                    "range": [
                                        592,
                                        655
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "prisma",
                                            "range": [
                                                592,
                                                598
                                            ],
                                            "content": "data\nmock_creator_data=prisma.models"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "models",
                                            "range": [
                                                594,
                                                600
                                            ],
                                            "content": "mock_creator_data=prisma.models.Creator"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "Creator",
                                            "range": [
                                                596,
                                                602
                                            ],
                                            "content": "prisma.models.Creator(\n"
                                        },
                                        {
                                            "type": "ObjectExpression",
                                            "name": "ObjectExpression",
                                            "range": [
                                                598,
                                                655
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "name",
                                                    "range": [
                                                        599,
                                                        601
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "name",
                                                            "range": [
                                                                599,
                                                                603
                                                            ],
                                                            "content": ".Creator(\nname"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"Test Creator\"",
                                                            "range": [
                                                                601,
                                                                613
                                                            ],
                                                            "content": "(\nname=\"Test Creator\",\nusername=\"creator\",\ndescription"
                                                        }
                                                    ],
                                                    "content": ".Creator("
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "username",
                                                    "range": [
                                                        604,
                                                        606
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "username",
                                                            "range": [
                                                                604,
                                                                612
                                                            ],
                                                            "content": "=\"Test Creator\",\nusername=\"creator\",\n"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"creator\"",
                                                            "range": [
                                                                606,
                                                                614
                                                            ],
                                                            "content": ",\nusername=\"creator\",\ndescription="
                                                        }
                                                    ],
                                                    "content": "=\"Test Creator\","
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "description",
                                                    "range": [
                                                        609,
                                                        611
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "description",
                                                            "range": [
                                                                609,
                                                                619
                                                            ],
                                                            "content": "=\"creator\",\ndescription=\"Test description\",\nlinks="
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"Test description\"",
                                                            "range": [
                                                                611,
                                                                625
                                                            ],
                                                            "content": ",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatar_url"
                                                        }
                                                    ],
                                                    "content": "=\"creator\","
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "links",
                                                    "range": [
                                                        614,
                                                        616
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "links",
                                                            "range": [
                                                                614,
                                                                619
                                                            ],
                                                            "content": "=\"Test description\",\nlinks="
                                                        },
                                                        {
                                                            "type": "ArrayExpression",
                                                            "name": "ArrayExpression",
                                                            "range": [
                                                                616,
                                                                618
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"link1\"",
                                                                    "range": [
                                                                        617,
                                                                        623
                                                                    ],
                                                                    "content": "\nlinks=[\"link1\"],"
                                                                }
                                                            ],
                                                            "content": ",\nlinks"
                                                        }
                                                    ],
                                                    "content": "=\"Test description\","
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "avatar_url",
                                                    "range": [
                                                        621,
                                                        623
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "avatar_url",
                                                            "range": [
                                                                621,
                                                                631
                                                            ],
                                                            "content": "\"link1\"],\navatar_url=\"avatar.jpg\",\nnum_agents="
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"avatar.jpg\"",
                                                            "range": [
                                                                623,
                                                                635
                                                            ],
                                                            "content": ",\navatar_url=\"avatar.jpg\",\nnum_agents=1,\nagent_rating"
                                                        }
                                                    ],
                                                    "content": "\"link1\"],"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "num_agents",
                                                    "range": [
                                                        626,
                                                        628
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "num_agents",
                                                            "range": [
                                                                626,
                                                                636
                                                            ],
                                                            "content": "=\"avatar.jpg\",\nnum_agents=1,\nagent_rating="
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "1",
                                                            "range": [
                                                                628,
                                                                629
                                                            ],
                                                            "content": ",\n"
                                                        }
                                                    ],
                                                    "content": "=\"avatar.jpg\","
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "agent_rating",
                                                    "range": [
                                                        631,
                                                        633
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "agent_rating",
                                                            "range": [
                                                                631,
                                                                643
                                                            ],
                                                            "content": "=1,\nagent_rating=4.5,\nagent_runs="
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "4.5",
                                                            "range": [
                                                                633,
                                                                636
                                                            ],
                                                            "content": ",\nagent_rating="
                                                        }
                                                    ],
                                                    "content": "=1,"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "agent_runs",
                                                    "range": [
                                                        638,
                                                        640
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "agent_runs",
                                                            "range": [
                                                                638,
                                                                648
                                                            ],
                                                            "content": ".5,\nagent_runs=10,\ntop_categories="
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "10",
                                                            "range": [
                                                                640,
                                                                642
                                                            ],
                                                            "content": ",\nagent_runs"
                                                        }
                                                    ],
                                                    "content": ".5,"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "top_categories",
                                                    "range": [
                                                        643,
                                                        645
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "top_categories",
                                                            "range": [
                                                                643,
                                                                657
                                                            ],
                                                            "content": "=10,\ntop_categories=[\"test\"],\nis_featured=False,"
                                                        },
                                                        {
                                                            "type": "ArrayExpression",
                                                            "name": "ArrayExpression",
                                                            "range": [
                                                                645,
                                                                647
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"test\"",
                                                                    "range": [
                                                                        646,
                                                                        652
                                                                    ],
                                                                    "content": "\ntop_categories=[\"test\"],"
                                                                }
                                                            ],
                                                            "content": ",\ntop_categories"
                                                        }
                                                    ],
                                                    "content": "=10,"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "is_featured",
                                                    "range": [
                                                        650,
                                                        652
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "is_featured",
                                                            "range": [
                                                                650,
                                                                661
                                                            ],
                                                            "content": "\"test\"],\nis_featured=False,\n)\n\n"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "False",
                                                            "range": [
                                                                652,
                                                                657
                                                            ],
                                                            "content": ",\nis_featured=False,"
                                                        }
                                                    ],
                                                    "content": "\"test\"],"
                                                }
                                            ],
                                            "content": "models.Creator(\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatar_url=\"avatar.jpg\",\nnum_agents=1,\nagent_rating=4.5,\nagent_runs=10,\ntop_categories=[\"test\"],\nis_featured="
                                        }
                                    ],
                                    "content": "data\nmock_creator_data=prisma.models.Creator(\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatar_url=\"avatar.jpg\",\nnum_agents=1,\nagent_rating=4.5,\nagent_runs=10,\ntop_categories=[\"test\"],\nis_featured="
                                }
                            ],
                            "content": "#Mock data\nmock_creator_data=prisma.models.Creator(\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatar_url=\"avatar.jpg\",\nnum_agents=1,\nagent_rating=4.5,\nagent_runs=10,\ntop_categories=[\"test\"],\nis_featured="
                        },
                        {
                            "type": "Comment",
                            "name": "# Mock prisma call",
                            "range": [
                                658,
                                662
                            ],
                            "content": "\n)\n\n#"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_creator",
                            "range": [
                                663,
                                683
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "mock_creator",
                                    "range": [
                                        663,
                                        675
                                    ],
                                    "content": "Mock prisma call\nmock_creator=mocker.patch(\"prisma.models.Creator.prisma\")\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "patch",
                                    "range": [
                                        665,
                                        683
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mocker",
                                            "range": [
                                                665,
                                                671
                                            ],
                                            "content": "call\nmock_creator=mocker.patch"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "patch",
                                            "range": [
                                                667,
                                                672
                                            ],
                                            "content": "mock_creator=mocker.patch("
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"prisma.models.Creator.prisma\"",
                                            "range": [
                                                669,
                                                701
                                            ],
                                            "content": "mocker.patch(\"prisma.models.Creator.prisma\")\nmock_creator.return_value.find_unique=mocker.AsyncMock()\n#Configure the mock to return values that will pass validation\nmock_creator."
                                        }
                                    ],
                                    "content": "call\nmock_creator=mocker.patch(\"prisma.models.Creator.prisma\")\nmock_creator.return_value.find_unique=mocker."
                                }
                            ],
                            "content": "Mock prisma call\nmock_creator=mocker.patch(\"prisma.models.Creator.prisma\")\nmock_creator.return_value.find_unique=mocker."
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "ExpressionStatement",
                            "range": [
                                672,
                                683
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "AssignmentExpression",
                                    "range": [
                                        672,
                                        683
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "MemberExpression",
                                            "range": [
                                                672,
                                                680
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "mock_creator",
                                                    "range": [
                                                        672,
                                                        684
                                                    ],
                                                    "content": "(\"prisma.models.Creator.prisma\")\nmock_creator.return_value.find_unique=mocker.AsyncMock"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "return_value",
                                                    "range": [
                                                        674,
                                                        686
                                                    ],
                                                    "content": ")\nmock_creator.return_value.find_unique=mocker.AsyncMock()"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "find_unique",
                                                    "range": [
                                                        676,
                                                        687
                                                    ],
                                                    "content": "mock_creator.return_value.find_unique=mocker.AsyncMock()\n"
                                                }
                                            ],
                                            "content": "(\"prisma.models.Creator.prisma\")\nmock_creator.return_value.find_unique"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "AsyncMock",
                                            "range": [
                                                678,
                                                683
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "mocker",
                                                    "range": [
                                                        678,
                                                        684
                                                    ],
                                                    "content": "return_value.find_unique=mocker.AsyncMock"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "AsyncMock",
                                                    "range": [
                                                        680,
                                                        689
                                                    ],
                                                    "content": "find_unique=mocker.AsyncMock()\n#Configure"
                                                }
                                            ],
                                            "content": "return_value.find_unique=mocker."
                                        }
                                    ],
                                    "content": "(\"prisma.models.Creator.prisma\")\nmock_creator.return_value.find_unique=mocker."
                                }
                            ],
                            "content": "(\"prisma.models.Creator.prisma\")\nmock_creator.return_value.find_unique=mocker."
                        },
                        {
                            "type": "Comment",
                            "name": "# Configure the mock to return values that will pass validation",
                            "range": [
                                684,
                                695
                            ],
                            "content": "AsyncMock()\n#Configure the mock to return values that"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "ExpressionStatement",
                            "range": [
                                696,
                                705
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "AssignmentExpression",
                                    "range": [
                                        696,
                                        705
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "MemberExpression",
                                            "range": [
                                                696,
                                                703
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "mock_creator",
                                                    "range": [
                                                        696,
                                                        708
                                                    ],
                                                    "content": "will pass validation\nmock_creator.return_value.find_unique.return_value=mock_creator_data"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "return_value",
                                                    "range": [
                                                        698,
                                                        710
                                                    ],
                                                    "content": "validation\nmock_creator.return_value.find_unique.return_value=mock_creator_data\n\n"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "find_unique",
                                                    "range": [
                                                        700,
                                                        711
                                                    ],
                                                    "content": "mock_creator.return_value.find_unique.return_value=mock_creator_data\n\n#"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "return_value",
                                                    "range": [
                                                        702,
                                                        714
                                                    ],
                                                    "content": "return_value.find_unique.return_value=mock_creator_data\n\n#Call function\n"
                                                }
                                            ],
                                            "content": "will pass validation\nmock_creator.return_value."
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "mock_creator_data",
                                            "range": [
                                                704,
                                                720
                                            ],
                                            "content": "find_unique.return_value=mock_creator_data\n\n#Call function\nresult=await db.get_store_creator_details"
                                        }
                                    ],
                                    "content": "will pass validation\nmock_creator.return_value.find_unique."
                                }
                            ],
                            "content": "will pass validation\nmock_creator.return_value.find_unique."
                        },
                        {
                            "type": "Comment",
                            "name": "# Call function",
                            "range": [
                                706,
                                710
                            ],
                            "content": "return_value=mock_creator_data\n\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "ExpressionStatement",
                            "range": [
                                711,
                                720
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "AssignmentExpression",
                                    "range": [
                                        711,
                                        720
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "result",
                                            "range": [
                                                711,
                                                717
                                            ],
                                            "content": "#Call function\nresult=await"
                                        },
                                        {
                                            "type": "AwaitExpression",
                                            "name": "AwaitExpression",
                                            "range": [
                                                713,
                                                720
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "get_store_creator_details",
                                                    "range": [
                                                        714,
                                                        720
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "db",
                                                            "range": [
                                                                714,
                                                                716
                                                            ],
                                                            "content": "\nresult="
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "get_store_creator_details",
                                                            "range": [
                                                                716,
                                                                740
                                                            ],
                                                            "content": "=await db.get_store_creator_details(\"creator\")\n\n#Verify results\nassert result.username==\"creator\"\nassert result."
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"creator\"",
                                                            "range": [
                                                                718,
                                                                726
                                                            ],
                                                            "content": "db.get_store_creator_details(\"creator\")\n\n#"
                                                        }
                                                    ],
                                                    "content": "\nresult=await db.get_store_creator_details"
                                                }
                                            ],
                                            "content": "function\nresult=await db.get_store_creator_details"
                                        }
                                    ],
                                    "content": "#Call function\nresult=await db.get_store_creator_details"
                                }
                            ],
                            "content": "#Call function\nresult=await db.get_store_creator_details"
                        },
                        {
                            "type": "Comment",
                            "name": "# Verify results",
                            "range": [
                                721,
                                725
                            ],
                            "content": "(\"creator\")\n\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "ExpressionStatement",
                            "range": [
                                726,
                                733
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert",
                                    "range": [
                                        726,
                                        733
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "assert",
                                            "range": [
                                                726,
                                                732
                                            ],
                                            "content": "#Verify results\nassert result."
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "BinaryExpression",
                                            "range": [
                                                727,
                                                733
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "MemberExpression",
                                                    "range": [
                                                        727,
                                                        731
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "result",
                                                            "range": [
                                                                727,
                                                                733
                                                            ],
                                                            "content": "Verify results\nassert result.username"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "username",
                                                            "range": [
                                                                729,
                                                                737
                                                            ],
                                                            "content": "\nassert result.username==\"creator\"\n"
                                                        }
                                                    ],
                                                    "content": "Verify results\nassert result"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "\"creator\"",
                                                    "range": [
                                                        732,
                                                        740
                                                    ],
                                                    "content": ".username==\"creator\"\nassert result."
                                                }
                                            ],
                                            "content": "Verify results\nassert result.username"
                                        }
                                    ],
                                    "content": "#Verify results\nassert result.username"
                                }
                            ],
                            "content": "#Verify results\nassert result.username"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "ExpressionStatement",
                            "range": [
                                734,
                                741
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert",
                                    "range": [
                                        734,
                                        741
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "assert",
                                            "range": [
                                                734,
                                                740
                                            ],
                                            "content": "==\"creator\"\nassert result."
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "BinaryExpression",
                                            "range": [
                                                735,
                                                741
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "MemberExpression",
                                                    "range": [
                                                        735,
                                                        739
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "result",
                                                            "range": [
                                                                735,
                                                                741
                                                            ],
                                                            "content": "=\"creator\"\nassert result.name"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "name",
                                                            "range": [
                                                                737,
                                                                741
                                                            ],
                                                            "content": "\nassert result.name"
                                                        }
                                                    ],
                                                    "content": "=\"creator\"\nassert result"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "\"Test Creator\"",
                                                    "range": [
                                                        740,
                                                        754
                                                    ],
                                                    "content": ".name==\"Test Creator\"\nassert result.description==\"Test description\"\nassert"
                                                }
                                            ],
                                            "content": "=\"creator\"\nassert result.name"
                                        }
                                    ],
                                    "content": "==\"creator\"\nassert result.name"
                                }
                            ],
                            "content": "==\"creator\"\nassert result.name"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "ExpressionStatement",
                            "range": [
                                742,
                                749
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert",
                                    "range": [
                                        742,
                                        749
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "assert",
                                            "range": [
                                                742,
                                                748
                                            ],
                                            "content": "==\"Test Creator\"\nassert result."
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "BinaryExpression",
                                            "range": [
                                                743,
                                                749
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "MemberExpression",
                                                    "range": [
                                                        743,
                                                        747
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "result",
                                                            "range": [
                                                                743,
                                                                749
                                                            ],
                                                            "content": "=\"Test Creator\"\nassert result.description"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "description",
                                                            "range": [
                                                                745,
                                                                755
                                                            ],
                                                            "content": "\nassert result.description==\"Test description\"\nassert result"
                                                        }
                                                    ],
                                                    "content": "=\"Test Creator\"\nassert result"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "\"Test description\"",
                                                    "range": [
                                                        748,
                                                        766
                                                    ],
                                                    "content": ".description==\"Test description\"\nassert result.avatar_url==\"avatar.jpg\"\n\n#Verify mock called"
                                                }
                                            ],
                                            "content": "=\"Test Creator\"\nassert result.description"
                                        }
                                    ],
                                    "content": "==\"Test Creator\"\nassert result.description"
                                }
                            ],
                            "content": "==\"Test Creator\"\nassert result.description"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "ExpressionStatement",
                            "range": [
                                750,
                                757
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert",
                                    "range": [
                                        750,
                                        757
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "assert",
                                            "range": [
                                                750,
                                                756
                                            ],
                                            "content": "==\"Test description\"\nassert result."
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "BinaryExpression",
                                            "range": [
                                                751,
                                                757
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "MemberExpression",
                                                    "range": [
                                                        751,
                                                        755
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "result",
                                                            "range": [
                                                                751,
                                                                757
                                                            ],
                                                            "content": "=\"Test description\"\nassert result.avatar_url"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "avatar_url",
                                                            "range": [
                                                                753,
                                                                763
                                                            ],
                                                            "content": "\nassert result.avatar_url==\"avatar.jpg\"\n\n#"
                                                        }
                                                    ],
                                                    "content": "=\"Test description\"\nassert result"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "\"avatar.jpg\"",
                                                    "range": [
                                                        756,
                                                        768
                                                    ],
                                                    "content": ".avatar_url==\"avatar.jpg\"\n\n#Verify mock called correctly\n"
                                                }
                                            ],
                                            "content": "=\"Test description\"\nassert result.avatar_url"
                                        }
                                    ],
                                    "content": "==\"Test description\"\nassert result.avatar_url"
                                }
                            ],
                            "content": "==\"Test description\"\nassert result.avatar_url"
                        },
                        {
                            "type": "Comment",
                            "name": "# Verify mock called correctly",
                            "range": [
                                758,
                                764
                            ],
                            "content": "==\"avatar.jpg\"\n\n#Verify"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "ExpressionStatement",
                            "range": [
                                765,
                                783
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert_called_once_with",
                                    "range": [
                                        765,
                                        783
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "MemberExpression",
                                            "range": [
                                                765,
                                                772
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "mock_creator",
                                                    "range": [
                                                        765,
                                                        777
                                                    ],
                                                    "content": "mock called correctly\nmock_creator.return_value.find_unique.assert_called_once_with(\n"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "return_value",
                                                    "range": [
                                                        767,
                                                        779
                                                    ],
                                                    "content": "correctly\nmock_creator.return_value.find_unique.assert_called_once_with(\nwhere="
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "find_unique",
                                                    "range": [
                                                        769,
                                                        780
                                                    ],
                                                    "content": "mock_creator.return_value.find_unique.assert_called_once_with(\nwhere={"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "assert_called_once_with",
                                                    "range": [
                                                        771,
                                                        793
                                                    ],
                                                    "content": "return_value.find_unique.assert_called_once_with(\nwhere={\"username\":\"creator\"}\n)\n\n\n@pytest.mark"
                                                }
                                            ],
                                            "content": "mock called correctly\nmock_creator.return_value."
                                        },
                                        {
                                            "type": "ObjectExpression",
                                            "name": "ObjectExpression",
                                            "range": [
                                                773,
                                                781
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "where",
                                                    "range": [
                                                        774,
                                                        776
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "where",
                                                            "range": [
                                                                774,
                                                                778
                                                            ],
                                                            "content": ".assert_called_once_with(\nwhere"
                                                        },
                                                        {
                                                            "type": "ObjectExpression",
                                                            "name": "ObjectExpression",
                                                            "range": [
                                                                776,
                                                                780
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Property",
                                                                    "name": "username",
                                                                    "range": [
                                                                        777,
                                                                        779
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "\"username\"",
                                                                            "range": [
                                                                                777,
                                                                                787
                                                                            ],
                                                                            "content": "\nwhere={\"username\":\"creator\"}\n)\n"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "\"creator\"",
                                                                            "range": [
                                                                                779,
                                                                                787
                                                                            ],
                                                                            "content": "={\"username\":\"creator\"}\n)\n"
                                                                        }
                                                                    ],
                                                                    "content": "\nwhere="
                                                                }
                                                            ],
                                                            "content": "(\nwhere={"
                                                        }
                                                    ],
                                                    "content": ".assert_called_once_with("
                                                }
                                            ],
                                            "content": "find_unique.assert_called_once_with(\nwhere={\"username\""
                                        }
                                    ],
                                    "content": "mock called correctly\nmock_creator.return_value.find_unique.assert_called_once_with(\nwhere={\"username\":\"creator\""
                                }
                            ],
                            "content": "mock called correctly\nmock_creator.return_value.find_unique.assert_called_once_with(\nwhere={\"username\":\"creator\""
                        }
                    ],
                    "content": "(mocker):\n#Mock data\nmock_creator_data=prisma.models.Creator(\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatar_url=\"avatar.jpg\",\nnum_agents=1,\nagent_rating=4.5,\nagent_runs=10,\ntop_categories=[\"test\"],\nis_featured=False,\n)\n\n#Mock prisma call\nmock_creator=mocker.patch(\"prisma.models.Creator.prisma\")\nmock_creator.return_value.find_unique=mocker.AsyncMock()\n#Configure the mock to return values that will pass validation\nmock_creator.return_value.find_unique.return_value=mock_creator_data\n\n#Call function\nresult=await db.get_store_creator_details(\"creator\")\n\n#Verify results\nassert result.username==\"creator\"\nassert result.name==\"Test Creator\"\nassert result.description==\"Test description\"\nassert result.avatar_url==\"avatar.jpg\"\n\n#Verify mock called correctly\nmock_creator.return_value.find_unique.assert_called_once_with(\nwhere={\"username\":\"creator\""
                }
            ],
            "content": "mark.asyncio\nasync def test_get_store_creator_details(mocker):\n#Mock data\nmock_creator_data=prisma.models.Creator(\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatar_url=\"avatar.jpg\",\nnum_agents=1,\nagent_rating=4.5,\nagent_runs=10,\ntop_categories=[\"test\"],\nis_featured=False,\n)\n\n#Mock prisma call\nmock_creator=mocker.patch(\"prisma.models.Creator.prisma\")\nmock_creator.return_value.find_unique=mocker.AsyncMock()\n#Configure the mock to return values that will pass validation\nmock_creator.return_value.find_unique.return_value=mock_creator_data\n\n#Call function\nresult=await db.get_store_creator_details(\"creator\")\n\n#Verify results\nassert result.username==\"creator\"\nassert result.name==\"Test Creator\"\nassert result.description==\"Test description\"\nassert result.avatar_url==\"avatar.jpg\"\n\n#Verify mock called correctly\nmock_creator.return_value.find_unique.assert_called_once_with(\nwhere={\"username\":\"creator\""
        },
        {
            "type": "FunctionDecl",
            "name": "test_create_store_submission",
            "range": [
                792,
                1081
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.mark.asyncio",
                    "range": [
                        785,
                        790
                    ],
                    "children": [],
                    "content": "\n)\n\n\n@"
                },
                {
                    "type": "Parameter",
                    "name": "mocker",
                    "range": [
                        796,
                        796
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        798,
                        1081
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "mock_agent",
                            "range": [
                                804,
                                847
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        805,
                                        847
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "AgentGraph",
                                            "range": [
                                                806,
                                                847
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "id",
                                                    "range": [
                                                        813,
                                                        815
                                                    ],
                                                    "children": [],
                                                    "content": "models.AgentGraph"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "version",
                                                    "range": [
                                                        818,
                                                        820
                                                    ],
                                                    "children": [],
                                                    "content": "id=\"agent-id\""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "userId",
                                                    "range": [
                                                        823,
                                                        825
                                                    ],
                                                    "children": [],
                                                    "content": "version=1"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "createdAt",
                                                    "range": [
                                                        828,
                                                        834
                                                    ],
                                                    "children": [],
                                                    "content": "userId=\"user-id\",\ncreatedAt="
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "isActive",
                                                    "range": [
                                                        837,
                                                        839
                                                    ],
                                                    "children": [],
                                                    "content": "now()"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "isTemplate",
                                                    "range": [
                                                        842,
                                                        844
                                                    ],
                                                    "children": [],
                                                    "content": "isActive=True"
                                                }
                                            ],
                                            "content": "Mock data\nmock_agent=prisma.models.AgentGraph(\nid=\"agent-id\",\nversion=1,\nuserId=\"user-id\",\ncreatedAt=datetime.now(),\nisActive=True,\nisTemplate"
                                        }
                                    ],
                                    "content": "#Mock data\nmock_agent=prisma.models.AgentGraph(\nid=\"agent-id\",\nversion=1,\nuserId=\"user-id\",\ncreatedAt=datetime.now(),\nisActive=True,\nisTemplate"
                                }
                            ],
                            "content": "\n#Mock data\nmock_agent=prisma.models.AgentGraph(\nid=\"agent-id\",\nversion=1,\nuserId=\"user-id\",\ncreatedAt=datetime.now(),\nisActive=True,\nisTemplate"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_listing",
                            "range": [
                                850,
                                907
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        851,
                                        907
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "StoreListing",
                                            "range": [
                                                852,
                                                907
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "id",
                                                    "range": [
                                                        859,
                                                        861
                                                    ],
                                                    "children": [],
                                                    "content": "models.StoreListing"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "createdAt",
                                                    "range": [
                                                        864,
                                                        870
                                                    ],
                                                    "children": [],
                                                    "content": "id=\"listing-id\",\ncreatedAt="
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "updatedAt",
                                                    "range": [
                                                        873,
                                                        879
                                                    ],
                                                    "children": [],
                                                    "content": "now(),\nupdatedAt="
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "isDeleted",
                                                    "range": [
                                                        882,
                                                        884
                                                    ],
                                                    "children": [],
                                                    "content": "now()"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "isApproved",
                                                    "range": [
                                                        887,
                                                        889
                                                    ],
                                                    "children": [],
                                                    "content": "isDeleted=False"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "agentId",
                                                    "range": [
                                                        892,
                                                        894
                                                    ],
                                                    "children": [],
                                                    "content": "isApproved=False"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "agentVersion",
                                                    "range": [
                                                        897,
                                                        899
                                                    ],
                                                    "children": [],
                                                    "content": "agentId=\"agent-id\""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "owningUserId",
                                                    "range": [
                                                        902,
                                                        904
                                                    ],
                                                    "children": [],
                                                    "content": "agentVersion=1"
                                                }
                                            ],
                                            "content": ")\n\nmock_listing=prisma.models.StoreListing(\nid=\"listing-id\",\ncreatedAt=datetime.now(),\nupdatedAt=datetime.now(),\nisDeleted=False,\nisApproved=False,\nagentId=\"agent-id\",\nagentVersion=1,\nowningUserId"
                                        }
                                    ],
                                    "content": "\n)\n\nmock_listing=prisma.models.StoreListing(\nid=\"listing-id\",\ncreatedAt=datetime.now(),\nupdatedAt=datetime.now(),\nisDeleted=False,\nisApproved=False,\nagentId=\"agent-id\",\nagentVersion=1,\nowningUserId"
                                }
                            ],
                            "content": ",\n)\n\nmock_listing=prisma.models.StoreListing(\nid=\"listing-id\",\ncreatedAt=datetime.now(),\nupdatedAt=datetime.now(),\nisDeleted=False,\nisApproved=False,\nagentId=\"agent-id\",\nagentVersion=1,\nowningUserId"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_agent_graph",
                            "range": [
                                915,
                                938
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        916,
                                        938
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "patch",
                                            "range": [
                                                917,
                                                922
                                            ],
                                            "children": [],
                                            "content": "prisma calls\nmock_agent_graph=mocker"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "return_value.find_first",
                                            "range": [
                                                924,
                                                937
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "AsyncMock",
                                                    "range": [
                                                        930,
                                                        937
                                                    ],
                                                    "children": [],
                                                    "content": ".return_value.find_first=mocker.AsyncMock"
                                                }
                                            ],
                                            "content": "patch(\"prisma.models.AgentGraph.prisma\")\nmock_agent_graph.return_value.find_first=mocker.AsyncMock"
                                        }
                                    ],
                                    "content": "Mock prisma calls\nmock_agent_graph=mocker.patch(\"prisma.models.AgentGraph.prisma\")\nmock_agent_graph.return_value.find_first=mocker.AsyncMock("
                                }
                            ],
                            "content": "#Mock prisma calls\nmock_agent_graph=mocker.patch(\"prisma.models.AgentGraph.prisma\")\nmock_agent_graph.return_value.find_first=mocker.AsyncMock("
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_store_listing",
                            "range": [
                                940,
                                978
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        941,
                                        978
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "patch",
                                            "range": [
                                                942,
                                                947
                                            ],
                                            "children": [],
                                            "content": ")\n\nmock_store_listing=mocker"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "return_value.find_first",
                                            "range": [
                                                949,
                                                962
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "AsyncMock",
                                                    "range": [
                                                        955,
                                                        962
                                                    ],
                                                    "children": [],
                                                    "content": ".return_value.find_first=mocker.AsyncMock"
                                                }
                                            ],
                                            "content": "patch(\"prisma.models.StoreListing.prisma\")\nmock_store_listing.return_value.find_first=mocker.AsyncMock"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "return_value.create",
                                            "range": [
                                                964,
                                                977
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "AsyncMock",
                                                    "range": [
                                                        970,
                                                        977
                                                    ],
                                                    "children": [],
                                                    "content": ".return_value.create=mocker.AsyncMock"
                                                }
                                            ],
                                            "content": "return_value=None)\nmock_store_listing.return_value.create=mocker.AsyncMock"
                                        }
                                    ],
                                    "content": "mock_agent)\n\nmock_store_listing=mocker.patch(\"prisma.models.StoreListing.prisma\")\nmock_store_listing.return_value.find_first=mocker.AsyncMock(return_value=None)\nmock_store_listing.return_value.create=mocker.AsyncMock("
                                }
                            ],
                            "content": "=mock_agent)\n\nmock_store_listing=mocker.patch(\"prisma.models.StoreListing.prisma\")\nmock_store_listing.return_value.find_first=mocker.AsyncMock(return_value=None)\nmock_store_listing.return_value.create=mocker.AsyncMock("
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "result",
                            "range": [
                                984,
                                1023
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        985,
                                        1023
                                    ],
                                    "children": [
                                        {
                                            "type": "AwaitExpression",
                                            "name": "await",
                                            "range": [
                                                986,
                                                1023
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "create_store_submission",
                                                    "range": [
                                                        987,
                                                        1022
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "user_id",
                                                            "range": [
                                                                992,
                                                                994
                                                            ],
                                                            "children": [],
                                                            "content": "db.create_store_submission"
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "agent_id",
                                                            "range": [
                                                                997,
                                                                999
                                                            ],
                                                            "children": [],
                                                            "content": "user_id=\"user-id\""
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "agent_version",
                                                            "range": [
                                                                1002,
                                                                1004
                                                            ],
                                                            "children": [],
                                                            "content": "agent_id=\"agent-id\""
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "slug",
                                                            "range": [
                                                                1007,
                                                                1009
                                                            ],
                                                            "children": [],
                                                            "content": "agent_version=1"
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "name",
                                                            "range": [
                                                                1012,
                                                                1014
                                                            ],
                                                            "children": [],
                                                            "content": "slug=\"test-agent\""
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "description",
                                                            "range": [
                                                                1017,
                                                                1019
                                                            ],
                                                            "children": [],
                                                            "content": "name=\"Test Agent\""
                                                        }
                                                    ],
                                                    "content": "function\nresult=await db.create_store_submission(\nuser_id=\"user-id\",\nagent_id=\"agent-id\",\nagent_version=1,\nslug=\"test-agent\",\nname=\"Test Agent\",\ndescription"
                                                }
                                            ],
                                            "content": "Call function\nresult=await db.create_store_submission(\nuser_id=\"user-id\",\nagent_id=\"agent-id\",\nagent_version=1,\nslug=\"test-agent\",\nname=\"Test Agent\",\ndescription="
                                        }
                                    ],
                                    "content": "#Call function\nresult=await db.create_store_submission(\nuser_id=\"user-id\",\nagent_id=\"agent-id\",\nagent_version=1,\nslug=\"test-agent\",\nname=\"Test Agent\",\ndescription="
                                }
                            ],
                            "content": "\n#Call function\nresult=await db.create_store_submission(\nuser_id=\"user-id\",\nagent_id=\"agent-id\",\nagent_version=1,\nslug=\"test-agent\",\nname=\"Test Agent\",\ndescription="
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert",
                            "range": [
                                1029,
                                1036
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1030,
                                        1035
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "result.name",
                                            "range": [
                                                1030,
                                                1032
                                            ],
                                            "children": [],
                                            "content": "#Verify results"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"Test Agent\"",
                                            "range": [
                                                1034,
                                                1035
                                            ],
                                            "children": [],
                                            "content": "assert result"
                                        }
                                    ],
                                    "content": "#Verify results\nassert result"
                                }
                            ],
                            "content": "\n#Verify results\nassert result."
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert",
                            "range": [
                                1037,
                                1044
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1038,
                                        1043
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "result.description",
                                            "range": [
                                                1038,
                                                1040
                                            ],
                                            "children": [],
                                            "content": "==\"Test Agent\""
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"Test description\"",
                                            "range": [
                                                1042,
                                                1043
                                            ],
                                            "children": [],
                                            "content": "assert result"
                                        }
                                    ],
                                    "content": "==\"Test Agent\"\nassert result"
                                }
                            ],
                            "content": "name==\"Test Agent\"\nassert result."
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_agent_graph.return_value.find_first.assert_called_once",
                            "range": [
                                1052,
                                1061
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert_called_once",
                                    "range": [
                                        1058,
                                        1060
                                    ],
                                    "children": [],
                                    "content": ".return_value."
                                }
                            ],
                            "content": "Verify mocks called correctly\nmock_agent_graph.return_value.find_first"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_store_listing.return_value.find_first.assert_called_once",
                            "range": [
                                1062,
                                1071
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert_called_once",
                                    "range": [
                                        1068,
                                        1070
                                    ],
                                    "children": [],
                                    "content": ".return_value."
                                }
                            ],
                            "content": ".assert_called_once()\nmock_store_listing.return_value.find_first"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_store_listing.return_value.create.assert_called_once",
                            "range": [
                                1072,
                                1081
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert_called_once",
                                    "range": [
                                        1078,
                                        1080
                                    ],
                                    "children": [],
                                    "content": ".return_value."
                                }
                            ],
                            "content": ".assert_called_once()\nmock_store_listing.return_value.create"
                        }
                    ],
                    "content": "def test_create_store_submission(mocker):\n#Mock data\nmock_agent=prisma.models.AgentGraph(\nid=\"agent-id\",\nversion=1,\nuserId=\"user-id\",\ncreatedAt=datetime.now(),\nisActive=True,\nisTemplate=False,\n)\n\nmock_listing=prisma.models.StoreListing(\nid=\"listing-id\",\ncreatedAt=datetime.now(),\nupdatedAt=datetime.now(),\nisDeleted=False,\nisApproved=False,\nagentId=\"agent-id\",\nagentVersion=1,\nowningUserId=\"user-id\",\n)\n\n#Mock prisma calls\nmock_agent_graph=mocker.patch(\"prisma.models.AgentGraph.prisma\")\nmock_agent_graph.return_value.find_first=mocker.AsyncMock(return_value=mock_agent)\n\nmock_store_listing=mocker.patch(\"prisma.models.StoreListing.prisma\")\nmock_store_listing.return_value.find_first=mocker.AsyncMock(return_value=None)\nmock_store_listing.return_value.create=mocker.AsyncMock(return_value=mock_listing)\n\n#Call function\nresult=await db.create_store_submission(\nuser_id=\"user-id\",\nagent_id=\"agent-id\",\nagent_version=1,\nslug=\"test-agent\",\nname=\"Test Agent\",\ndescription=\"Test description\",\n)\n\n#Verify results\nassert result.name==\"Test Agent\"\nassert result.description==\"Test description\"\n\n#Verify mocks called correctly\nmock_agent_graph.return_value.find_first.assert_called_once()\nmock_store_listing.return_value.find_first.assert_called_once()\nmock_store_listing.return_value.create"
                }
            ],
            "content": ".mark.asyncio\nasync def test_create_store_submission(mocker):\n#Mock data\nmock_agent=prisma.models.AgentGraph(\nid=\"agent-id\",\nversion=1,\nuserId=\"user-id\",\ncreatedAt=datetime.now(),\nisActive=True,\nisTemplate=False,\n)\n\nmock_listing=prisma.models.StoreListing(\nid=\"listing-id\",\ncreatedAt=datetime.now(),\nupdatedAt=datetime.now(),\nisDeleted=False,\nisApproved=False,\nagentId=\"agent-id\",\nagentVersion=1,\nowningUserId=\"user-id\",\n)\n\n#Mock prisma calls\nmock_agent_graph=mocker.patch(\"prisma.models.AgentGraph.prisma\")\nmock_agent_graph.return_value.find_first=mocker.AsyncMock(return_value=mock_agent)\n\nmock_store_listing=mocker.patch(\"prisma.models.StoreListing.prisma\")\nmock_store_listing.return_value.find_first=mocker.AsyncMock(return_value=None)\nmock_store_listing.return_value.create=mocker.AsyncMock(return_value=mock_listing)\n\n#Call function\nresult=await db.create_store_submission(\nuser_id=\"user-id\",\nagent_id=\"agent-id\",\nagent_version=1,\nslug=\"test-agent\",\nname=\"Test Agent\",\ndescription=\"Test description\",\n)\n\n#Verify results\nassert result.name==\"Test Agent\"\nassert result.description==\"Test description\"\n\n#Verify mocks called correctly\nmock_agent_graph.return_value.find_first.assert_called_once()\nmock_store_listing.return_value.find_first.assert_called_once()\nmock_store_listing.return_value.create"
        },
        {
            "type": "FunctionDecl",
            "name": "test_update_profile",
            "range": [
                1090,
                1323
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.mark.asyncio",
                    "range": [
                        1083,
                        1089
                    ],
                    "children": [],
                    "content": "assert_called_once()\n\n\n@"
                },
                {
                    "type": "FunctionSignature",
                    "name": "test_update_profile",
                    "range": [
                        1090,
                        1096
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                1090,
                                1095
                            ],
                            "children": [],
                            "content": "pytest.mark.asyncio\n"
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                1091,
                                1094
                            ],
                            "children": [],
                            "content": ".mark.asyncio"
                        },
                        {
                            "type": "Identifier",
                            "name": "test_update_profile",
                            "range": [
                                1092,
                                1109
                            ],
                            "children": [],
                            "content": "mark.asyncio\nasync def test_update_profile(mocker):\n#Mock data\nmock_profile="
                        },
                        {
                            "type": "Parameter",
                            "name": "mocker",
                            "range": [
                                1094,
                                1095
                            ],
                            "children": [],
                            "content": "asyncio\n"
                        }
                    ],
                    "content": "pytest.mark.asyncio\nasync"
                },
                {
                    "type": "Block",
                    "name": "FunctionBody",
                    "range": [
                        1097,
                        1323
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "name": "# Mock data",
                            "range": [
                                1098,
                                1101
                            ],
                            "children": [],
                            "content": "test_update_profile(mocker)"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_profile",
                            "range": [
                                1102,
                                1167
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        1103,
                                        1104
                                    ],
                                    "children": [],
                                    "content": "\n#"
                                },
                                {
                                    "type": "ObjectCreation",
                                    "name": "Profile",
                                    "range": [
                                        1104,
                                        1166
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "prisma",
                                            "range": [
                                                1104,
                                                1110
                                            ],
                                            "children": [],
                                            "content": "#Mock data\nmock_profile=prisma"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "models",
                                            "range": [
                                                1105,
                                                1111
                                            ],
                                            "children": [],
                                            "content": "Mock data\nmock_profile=prisma."
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "Profile",
                                            "range": [
                                                1106,
                                                1112
                                            ],
                                            "children": [],
                                            "content": "data\nmock_profile=prisma.models"
                                        },
                                        {
                                            "type": "ObjectProperties",
                                            "name": "ProfileProperties",
                                            "range": [
                                                1109,
                                                1165
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "id",
                                                    "range": [
                                                        1111,
                                                        1114
                                                    ],
                                                    "children": [],
                                                    "content": ".models.Profile"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "name",
                                                    "range": [
                                                        1116,
                                                        1119
                                                    ],
                                                    "children": [],
                                                    "content": "\nid=\"profile-id\""
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "username",
                                                    "range": [
                                                        1121,
                                                        1124
                                                    ],
                                                    "children": [],
                                                    "content": "\nname=\"Test Creator\""
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "description",
                                                    "range": [
                                                        1126,
                                                        1129
                                                    ],
                                                    "children": [],
                                                    "content": "\nusername=\"creator\""
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "links",
                                                    "range": [
                                                        1131,
                                                        1136
                                                    ],
                                                    "children": [],
                                                    "content": "\ndescription=\"Test description\",\n"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "avatarUrl",
                                                    "range": [
                                                        1138,
                                                        1141
                                                    ],
                                                    "children": [],
                                                    "content": "=[\"link1\"]"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "isFeatured",
                                                    "range": [
                                                        1143,
                                                        1146
                                                    ],
                                                    "children": [],
                                                    "content": "\navatarUrl=\"avatar.jpg\""
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "createdAt",
                                                    "range": [
                                                        1148,
                                                        1155
                                                    ],
                                                    "children": [],
                                                    "content": "\nisFeatured=False,\ncreatedAt="
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "updatedAt",
                                                    "range": [
                                                        1157,
                                                        1164
                                                    ],
                                                    "children": [],
                                                    "content": ".now(),\nupdatedAt="
                                                }
                                            ],
                                            "content": "=prisma.models.Profile(\nid=\"profile-id\",\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatarUrl=\"avatar.jpg\",\nisFeatured=False,\ncreatedAt=datetime.now(),\nupdatedAt=datetime"
                                        }
                                    ],
                                    "content": "#Mock data\nmock_profile=prisma.models.Profile(\nid=\"profile-id\",\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatarUrl=\"avatar.jpg\",\nisFeatured=False,\ncreatedAt=datetime.now(),\nupdatedAt=datetime."
                                }
                            ],
                            "content": ":\n#Mock data\nmock_profile=prisma.models.Profile(\nid=\"profile-id\",\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatarUrl=\"avatar.jpg\",\nisFeatured=False,\ncreatedAt=datetime.now(),\nupdatedAt=datetime.now"
                        },
                        {
                            "type": "Comment",
                            "name": "# Mock prisma calls",
                            "range": [
                                1169,
                                1173
                            ],
                            "children": [],
                            "content": "),\n)\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_profile_db",
                            "range": [
                                1174,
                                1214
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        1175,
                                        1176
                                    ],
                                    "children": [],
                                    "content": "#Mock"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "mocker.patch",
                                    "range": [
                                        1176,
                                        1182
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mocker",
                                            "range": [
                                                1176,
                                                1182
                                            ],
                                            "children": [],
                                            "content": "Mock prisma calls\nmock_profile_db=mocker"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "patch",
                                            "range": [
                                                1177,
                                                1182
                                            ],
                                            "children": [],
                                            "content": "prisma calls\nmock_profile_db=mocker"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"prisma.models.Profile.prisma\"",
                                            "range": [
                                                1180,
                                                1181
                                            ],
                                            "children": [],
                                            "content": "mock_profile_db="
                                        }
                                    ],
                                    "content": "Mock prisma calls\nmock_profile_db=mocker"
                                }
                            ],
                            "content": "\n#Mock prisma calls\nmock_profile_db=mocker.patch(\"prisma.models.Profile.prisma\")\nmock_profile_db.return_value.find_first=mocker.AsyncMock(\nreturn_value=mock_profile\n)\nmock_profile_db.return_value.update=mocker.AsyncMock"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_profile_db.return_value.find_first = mocker.AsyncMock",
                            "range": [
                                1183,
                                1199
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        1188,
                                        1189
                                    ],
                                    "children": [],
                                    "content": "\nmock_profile_db"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "mocker.AsyncMock",
                                    "range": [
                                        1189,
                                        1198
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mocker",
                                            "range": [
                                                1189,
                                                1195
                                            ],
                                            "children": [],
                                            "content": "mock_profile_db.return_value.find_first=mocker"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "AsyncMock",
                                            "range": [
                                                1191,
                                                1198
                                            ],
                                            "children": [],
                                            "content": "return_value.find_first=mocker.AsyncMock("
                                        },
                                        {
                                            "type": "ObjectProperties",
                                            "name": "AsyncMockProperties",
                                            "range": [
                                                1193,
                                                1197
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "return_value",
                                                    "range": [
                                                        1194,
                                                        1197
                                                    ],
                                                    "children": [],
                                                    "content": "=mocker.AsyncMock"
                                                }
                                            ],
                                            "content": "find_first=mocker.AsyncMock"
                                        }
                                    ],
                                    "content": "mock_profile_db.return_value.find_first=mocker.AsyncMock("
                                }
                            ],
                            "content": ".patch(\"prisma.models.Profile.prisma\")\nmock_profile_db.return_value.find_first=mocker.AsyncMock(\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_profile_db.return_value.update = mocker.AsyncMock",
                            "range": [
                                1200,
                                1214
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        1205,
                                        1206
                                    ],
                                    "children": [],
                                    "content": "\nmock_profile_db"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "mocker.AsyncMock",
                                    "range": [
                                        1206,
                                        1213
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mocker",
                                            "range": [
                                                1206,
                                                1212
                                            ],
                                            "children": [],
                                            "content": "mock_profile_db.return_value.update=mocker"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "AsyncMock",
                                            "range": [
                                                1208,
                                                1213
                                            ],
                                            "children": [],
                                            "content": "return_value.update=mocker."
                                        },
                                        {
                                            "type": "ObjectProperties",
                                            "name": "AsyncMockProperties",
                                            "range": [
                                                1210,
                                                1212
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "return_value",
                                                    "range": [
                                                        1211,
                                                        1212
                                                    ],
                                                    "children": [],
                                                    "content": "=mocker"
                                                }
                                            ],
                                            "content": "update=mocker"
                                        }
                                    ],
                                    "content": "mock_profile_db.return_value.update=mocker."
                                }
                            ],
                            "content": "return_value=mock_profile\n)\nmock_profile_db.return_value.update=mocker.AsyncMock"
                        },
                        {
                            "type": "Comment",
                            "name": "# Test data",
                            "range": [
                                1216,
                                1219
                            ],
                            "children": [],
                            "content": "return_value=mock_profile)"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "profile",
                            "range": [
                                1220,
                                1258
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        1221,
                                        1222
                                    ],
                                    "children": [],
                                    "content": "\n#"
                                },
                                {
                                    "type": "ObjectCreation",
                                    "name": "Profile",
                                    "range": [
                                        1222,
                                        1257
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "Profile",
                                            "range": [
                                                1222,
                                                1228
                                            ],
                                            "children": [],
                                            "content": "#Test data\nprofile=Profile"
                                        },
                                        {
                                            "type": "ObjectProperties",
                                            "name": "ProfileProperties",
                                            "range": [
                                                1223,
                                                1256
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "name",
                                                    "range": [
                                                        1225,
                                                        1228
                                                    ],
                                                    "children": [],
                                                    "content": "\nprofile=Profile"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "username",
                                                    "range": [
                                                        1230,
                                                        1233
                                                    ],
                                                    "children": [],
                                                    "content": "\nname=\"Test Creator\""
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "description",
                                                    "range": [
                                                        1235,
                                                        1238
                                                    ],
                                                    "children": [],
                                                    "content": "\nusername=\"creator\""
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "links",
                                                    "range": [
                                                        1240,
                                                        1245
                                                    ],
                                                    "children": [],
                                                    "content": "\ndescription=\"Test description\",\n"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "avatar_url",
                                                    "range": [
                                                        1247,
                                                        1250
                                                    ],
                                                    "children": [],
                                                    "content": "=[\"link1\"]"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "is_featured",
                                                    "range": [
                                                        1252,
                                                        1255
                                                    ],
                                                    "children": [],
                                                    "content": "\navatar_url=\"avatar.jpg\""
                                                }
                                            ],
                                            "content": "Test data\nprofile=Profile(\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatar_url=\"avatar.jpg\","
                                        }
                                    ],
                                    "content": "#Test data\nprofile=Profile(\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatar_url=\"avatar.jpg\",\n"
                                }
                            ],
                            "content": "\n\n#Test data\nprofile=Profile(\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatar_url=\"avatar.jpg\",\nis_featured"
                        },
                        {
                            "type": "Comment",
                            "name": "# Call function",
                            "range": [
                                1260,
                                1263
                            ],
                            "children": [],
                            "content": "False,\n)"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "result = await db.update_or_create_profile",
                            "range": [
                                1264,
                                1275
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        1265,
                                        1266
                                    ],
                                    "children": [],
                                    "content": "\n#"
                                },
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        1266,
                                        1271
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "db.update_or_create_profile",
                                            "range": [
                                                1267,
                                                1274
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "db",
                                                    "range": [
                                                        1267,
                                                        1269
                                                    ],
                                                    "children": [],
                                                    "content": "Call function\n"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "update_or_create_profile",
                                                    "range": [
                                                        1269,
                                                        1274
                                                    ],
                                                    "children": [],
                                                    "content": "\nresult=await db."
                                                },
                                                {
                                                    "type": "Arguments",
                                                    "name": "FunctionArguments",
                                                    "range": [
                                                        1270,
                                                        1273
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"user-id\"",
                                                            "range": [
                                                                1271,
                                                                1272
                                                            ],
                                                            "children": [],
                                                            "content": "=await"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "profile",
                                                            "range": [
                                                                1273,
                                                                1274
                                                            ],
                                                            "children": [],
                                                            "content": "db."
                                                        }
                                                    ],
                                                    "content": "result=await db"
                                                }
                                            ],
                                            "content": "Call function\nresult=await db."
                                        }
                                    ],
                                    "content": "#Call function\nresult="
                                }
                            ],
                            "content": "\n\n#Call function\nresult=await db.update_or_create_profile"
                        },
                        {
                            "type": "Comment",
                            "name": "# Verify results",
                            "range": [
                                1277,
                                1280
                            ],
                            "children": [],
                            "content": "\"user-id\",profile)"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert result.username == \"creator\"",
                            "range": [
                                1281,
                                1288
                            ],
                            "children": [
                                {
                                    "type": "AssertStatement",
                                    "name": "assert",
                                    "range": [
                                        1281,
                                        1287
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "==",
                                            "range": [
                                                1285,
                                                1286
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "result.username",
                                                    "range": [
                                                        1282,
                                                        1285
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "result",
                                                            "range": [
                                                                1282,
                                                                1283
                                                            ],
                                                            "children": [],
                                                            "content": "\n#"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "username",
                                                            "range": [
                                                                1283,
                                                                1285
                                                            ],
                                                            "children": [],
                                                            "content": "#Verify results"
                                                        }
                                                    ],
                                                    "content": "\n#Verify results"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "\"creator\"",
                                                    "range": [
                                                        1286,
                                                        1287
                                                    ],
                                                    "children": [],
                                                    "content": "\nassert"
                                                }
                                            ],
                                            "content": "results\n"
                                        }
                                    ],
                                    "content": "\n\n#Verify results\nassert"
                                }
                            ],
                            "content": "\n\n#Verify results\nassert result"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert result.name == \"Test Creator\"",
                            "range": [
                                1289,
                                1296
                            ],
                            "children": [
                                {
                                    "type": "AssertStatement",
                                    "name": "assert",
                                    "range": [
                                        1289,
                                        1295
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "==",
                                            "range": [
                                                1293,
                                                1294
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "result.name",
                                                    "range": [
                                                        1290,
                                                        1293
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "result",
                                                            "range": [
                                                                1290,
                                                                1291
                                                            ],
                                                            "children": [],
                                                            "content": "username="
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "name",
                                                            "range": [
                                                                1291,
                                                                1293
                                                            ],
                                                            "children": [],
                                                            "content": "==\"creator\""
                                                        }
                                                    ],
                                                    "content": "username==\"creator\""
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "\"Test Creator\"",
                                                    "range": [
                                                        1294,
                                                        1295
                                                    ],
                                                    "children": [],
                                                    "content": "\nassert"
                                                }
                                            ],
                                            "content": "\"creator\"\n"
                                        }
                                    ],
                                    "content": ".username==\"creator\"\nassert"
                                }
                            ],
                            "content": ".username==\"creator\"\nassert result"
                        },
                        {
                            "type": "Comment",
                            "name": "# Verify mocks called correctly",
                            "range": [
                                1298,
                                1303
                            ],
                            "children": [],
                            "content": "name==\"Test Creator\"\n\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_profile_db.return_value.find_first.assert_called_once",
                            "range": [
                                1304,
                                1313
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert_called_once",
                                    "range": [
                                        1310,
                                        1312
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "mock_profile_db.return_value.find_first",
                                            "range": [
                                                1304,
                                                1309
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "mock_profile_db",
                                                    "range": [
                                                        1304,
                                                        1305
                                                    ],
                                                    "children": [],
                                                    "content": "#Verify"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "return_value",
                                                    "range": [
                                                        1305,
                                                        1307
                                                    ],
                                                    "children": [],
                                                    "content": "Verify mocks called"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "find_first",
                                                    "range": [
                                                        1307,
                                                        1309
                                                    ],
                                                    "children": [],
                                                    "content": "called correctly\n"
                                                }
                                            ],
                                            "content": "#Verify mocks called correctly\n"
                                        }
                                    ],
                                    "content": "mock_profile_db.return_value"
                                }
                            ],
                            "content": "#Verify mocks called correctly\nmock_profile_db.return_value."
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_profile_db.return_value.update.assert_called_once",
                            "range": [
                                1314,
                                1323
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "assert_called_once",
                                    "range": [
                                        1320,
                                        1322
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "mock_profile_db.return_value.update",
                                            "range": [
                                                1314,
                                                1319
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "mock_profile_db",
                                                    "range": [
                                                        1314,
                                                        1315
                                                    ],
                                                    "children": [],
                                                    "content": "find_first."
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "return_value",
                                                    "range": [
                                                        1315,
                                                        1317
                                                    ],
                                                    "children": [],
                                                    "content": ".assert_called_once("
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "update",
                                                    "range": [
                                                        1317,
                                                        1319
                                                    ],
                                                    "children": [],
                                                    "content": "()\n"
                                                }
                                            ],
                                            "content": "find_first.assert_called_once()\n"
                                        }
                                    ],
                                    "content": "mock_profile_db.return_value"
                                }
                            ],
                            "content": "find_first.assert_called_once()\nmock_profile_db.return_value."
                        }
                    ],
                    "content": "def test_update_profile(mocker):\n#Mock data\nmock_profile=prisma.models.Profile(\nid=\"profile-id\",\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatarUrl=\"avatar.jpg\",\nisFeatured=False,\ncreatedAt=datetime.now(),\nupdatedAt=datetime.now(),\n)\n\n#Mock prisma calls\nmock_profile_db=mocker.patch(\"prisma.models.Profile.prisma\")\nmock_profile_db.return_value.find_first=mocker.AsyncMock(\nreturn_value=mock_profile\n)\nmock_profile_db.return_value.update=mocker.AsyncMock(return_value=mock_profile)\n\n#Test data\nprofile=Profile(\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatar_url=\"avatar.jpg\",\nis_featured=False,\n)\n\n#Call function\nresult=await db.update_or_create_profile(\"user-id\",profile)\n\n#Verify results\nassert result.username==\"creator\"\nassert result.name==\"Test Creator\"\n\n#Verify mocks called correctly\nmock_profile_db.return_value.find_first.assert_called_once()\nmock_profile_db.return_value."
                }
            ],
            "content": "pytest.mark.asyncio\nasync def test_update_profile(mocker):\n#Mock data\nmock_profile=prisma.models.Profile(\nid=\"profile-id\",\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatarUrl=\"avatar.jpg\",\nisFeatured=False,\ncreatedAt=datetime.now(),\nupdatedAt=datetime.now(),\n)\n\n#Mock prisma calls\nmock_profile_db=mocker.patch(\"prisma.models.Profile.prisma\")\nmock_profile_db.return_value.find_first=mocker.AsyncMock(\nreturn_value=mock_profile\n)\nmock_profile_db.return_value.update=mocker.AsyncMock(return_value=mock_profile)\n\n#Test data\nprofile=Profile(\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatar_url=\"avatar.jpg\",\nis_featured=False,\n)\n\n#Call function\nresult=await db.update_or_create_profile(\"user-id\",profile)\n\n#Verify results\nassert result.username==\"creator\"\nassert result.name==\"Test Creator\"\n\n#Verify mocks called correctly\nmock_profile_db.return_value.find_first.assert_called_once()\nmock_profile_db.return_value."
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_user_profile",
            "range": [
                1332,
                1505
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.mark.asyncio",
                    "range": [
                        1325,
                        1331
                    ],
                    "children": [],
                    "content": ".assert_called_once()\n\n\n"
                },
                {
                    "type": "FunctionSignature",
                    "name": "test_get_user_profile",
                    "range": [
                        1332,
                        1338
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                1332,
                                1337
                            ],
                            "children": [],
                            "content": "@pytest.mark.asyncio"
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                1333,
                                1336
                            ],
                            "children": [],
                            "content": "pytest.mark."
                        },
                        {
                            "type": "Identifier",
                            "name": "test_get_user_profile",
                            "range": [
                                1334,
                                1353
                            ],
                            "children": [],
                            "content": ".mark.asyncio\nasync def test_get_user_profile(mocker):\n#Mock data\nmock_profile=prisma"
                        },
                        {
                            "type": "Parameter",
                            "name": "mocker",
                            "range": [
                                1335,
                                1337
                            ],
                            "children": [],
                            "content": "mark.asyncio"
                        }
                    ],
                    "content": "@pytest.mark.asyncio\n"
                },
                {
                    "type": "Block",
                    "name": "FunctionBody",
                    "range": [
                        1339,
                        1505
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "name": "# Mock data",
                            "range": [
                                1340,
                                1343
                            ],
                            "children": [],
                            "content": "def test_get_user_profile(mocker"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_profile",
                            "range": [
                                1344,
                                1411
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        1345,
                                        1346
                                    ],
                                    "children": [],
                                    "content": ":\n"
                                },
                                {
                                    "type": "NewExpression",
                                    "name": "Profile",
                                    "range": [
                                        1346,
                                        1410
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "prisma",
                                            "range": [
                                                1346,
                                                1352
                                            ],
                                            "children": [],
                                            "content": "\n#Mock data\nmock_profile="
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "models",
                                            "range": [
                                                1347,
                                                1353
                                            ],
                                            "children": [],
                                            "content": "#Mock data\nmock_profile=prisma"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "Profile",
                                            "range": [
                                                1348,
                                                1355
                                            ],
                                            "children": [],
                                            "content": "Mock data\nmock_profile=prisma.models"
                                        },
                                        {
                                            "type": "ObjectLiteral",
                                            "name": "Profile",
                                            "range": [
                                                1351,
                                                1410
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "id",
                                                    "range": [
                                                        1353,
                                                        1356
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"profile-id\"",
                                                            "range": [
                                                                1355,
                                                                1366
                                                            ],
                                                            "children": [],
                                                            "content": "models.Profile(\nid=\"profile-id\",\nname="
                                                        }
                                                    ],
                                                    "content": "prisma.models."
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "name",
                                                    "range": [
                                                        1358,
                                                        1361
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"No Profile Data\"",
                                                            "range": [
                                                                1360,
                                                                1375
                                                            ],
                                                            "children": [],
                                                            "content": "id=\"profile-id\",\nname=\"No Profile Data\",\nusername=\"testuser\",\ndescription"
                                                        }
                                                    ],
                                                    "content": "(\nid="
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "username",
                                                    "range": [
                                                        1363,
                                                        1366
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"testuser\"",
                                                            "range": [
                                                                1365,
                                                                1375
                                                            ],
                                                            "children": [],
                                                            "content": "name=\"No Profile Data\",\nusername=\"testuser\",\ndescription"
                                                        }
                                                    ],
                                                    "content": ",\nname="
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "description",
                                                    "range": [
                                                        1368,
                                                        1371
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"Test description\"",
                                                            "range": [
                                                                1370,
                                                                1385
                                                            ],
                                                            "children": [],
                                                            "content": "username=\"testuser\",\ndescription=\"Test description\",\nlinks=[\"link1\",\"link2\""
                                                        }
                                                    ],
                                                    "content": ",\nusername="
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "links",
                                                    "range": [
                                                        1373,
                                                        1380
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArrayLiteral",
                                                            "name": "links",
                                                            "range": [
                                                                1375,
                                                                1379
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"link1\"",
                                                                    "range": [
                                                                        1376,
                                                                        1382
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=\"Test description\",\nlinks=["
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"link2\"",
                                                                    "range": [
                                                                        1378,
                                                                        1384
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\nlinks=[\"link1\","
                                                                }
                                                            ],
                                                            "content": "description=\"Test description\",\n"
                                                        }
                                                    ],
                                                    "content": ",\ndescription=\"Test description\",\nlinks"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "avatarUrl",
                                                    "range": [
                                                        1382,
                                                        1385
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"avatar.jpg\"",
                                                            "range": [
                                                                1384,
                                                                1395
                                                            ],
                                                            "children": [],
                                                            "content": ",\"link2\"],\navatarUrl=\"avatar.jpg\",\nisFeatured="
                                                        }
                                                    ],
                                                    "content": "[\"link1\",\"link2\""
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "isFeatured",
                                                    "range": [
                                                        1387,
                                                        1390
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "False",
                                                            "range": [
                                                                1389,
                                                                1394
                                                            ],
                                                            "children": [],
                                                            "content": "avatarUrl=\"avatar.jpg\",\nisFeatured"
                                                        }
                                                    ],
                                                    "content": ",\navatarUrl="
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "createdAt",
                                                    "range": [
                                                        1392,
                                                        1399
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "now",
                                                            "range": [
                                                                1394,
                                                                1398
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "datetime",
                                                                    "range": [
                                                                        1394,
                                                                        1402
                                                                    ],
                                                                    "children": [],
                                                                    "content": "isFeatured=False,\ncreatedAt=datetime."
                                                                }
                                                            ],
                                                            "content": "isFeatured=False,\n"
                                                        }
                                                    ],
                                                    "content": ",\nisFeatured=False,\ncreatedAt"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "updatedAt",
                                                    "range": [
                                                        1401,
                                                        1408
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "now",
                                                            "range": [
                                                                1403,
                                                                1407
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "datetime",
                                                                    "range": [
                                                                        1403,
                                                                        1411
                                                                    ],
                                                                    "children": [],
                                                                    "content": "now(),\nupdatedAt=datetime."
                                                                }
                                                            ],
                                                            "content": "now(),\n"
                                                        }
                                                    ],
                                                    "content": "datetime.now(),\nupdatedAt"
                                                }
                                            ],
                                            "content": "mock_profile=prisma.models.Profile(\nid=\"profile-id\",\nname=\"No Profile Data\",\nusername=\"testuser\",\ndescription=\"Test description\",\nlinks=[\"link1\",\"link2\"],\navatarUrl=\"avatar.jpg\",\nisFeatured=False,\ncreatedAt=datetime.now(),\nupdatedAt=datetime"
                                        }
                                    ],
                                    "content": "\n#Mock data\nmock_profile=prisma.models.Profile(\nid=\"profile-id\",\nname=\"No Profile Data\",\nusername=\"testuser\",\ndescription=\"Test description\",\nlinks=[\"link1\",\"link2\"],\navatarUrl=\"avatar.jpg\",\nisFeatured=False,\ncreatedAt=datetime.now(),\nupdatedAt=datetime"
                                }
                            ],
                            "content": "):\n#Mock data\nmock_profile=prisma.models.Profile(\nid=\"profile-id\",\nname=\"No Profile Data\",\nusername=\"testuser\",\ndescription=\"Test description\",\nlinks=[\"link1\",\"link2\"],\navatarUrl=\"avatar.jpg\",\nisFeatured=False,\ncreatedAt=datetime.now(),\nupdatedAt=datetime."
                        },
                        {
                            "type": "Comment",
                            "name": "# Mock prisma calls",
                            "range": [
                                1413,
                                1417
                            ],
                            "children": [],
                            "content": "(),\n)"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "mock_profile_db",
                            "range": [
                                1418,
                                1443
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        1419,
                                        1420
                                    ],
                                    "children": [],
                                    "content": "\n#"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "patch",
                                    "range": [
                                        1420,
                                        1426
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mocker",
                                            "range": [
                                                1420,
                                                1426
                                            ],
                                            "children": [],
                                            "content": "#Mock prisma calls\nmock_profile_db="
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"prisma.models.Profile.prisma\"",
                                            "range": [
                                                1424,
                                                1450
                                            ],
                                            "children": [],
                                            "content": "\nmock_profile_db=mocker.patch(\"prisma.models.Profile.prisma\")\nmock_profile_db.return_value.find_unique=mocker.AsyncMock(\nreturn_value=mock_profile\n)\n"
                                        }
                                    ],
                                    "content": "#Mock prisma calls\nmock_profile_db="
                                }
                            ],
                            "content": "\n\n#Mock prisma calls\nmock_profile_db=mocker.patch(\"prisma.models.Profile.prisma\")\nmock_profile_db.return_value.find_unique=mocker.AsyncMock("
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "mock_profile_db.return_value.find_unique = mocker.AsyncMock",
                            "range": [
                                1427,
                                1443
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        1432,
                                        1433
                                    ],
                                    "children": [],
                                    "content": ")\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "AsyncMock",
                                    "range": [
                                        1435,
                                        1442
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "mocker",
                                            "range": [
                                                1435,
                                                1441
                                            ],
                                            "children": [],
                                            "content": ".return_value.find_unique=mocker."
                                        },
                                        {
                                            "type": "ObjectLiteral",
                                            "name": "AsyncMock",
                                            "range": [
                                                1436,
                                                1442
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "return_value",
                                                    "range": [
                                                        1438,
                                                        1441
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "mock_profile",
                                                            "range": [
                                                                1440,
                                                                1452
                                                            ],
                                                            "children": [],
                                                            "content": "mocker.AsyncMock(\nreturn_value=mock_profile\n)\n\n#"
                                                        }
                                                    ],
                                                    "content": "find_unique=mocker."
                                                }
                                            ],
                                            "content": "return_value.find_unique=mocker.AsyncMock"
                                        }
                                    ],
                                    "content": ".return_value.find_unique=mocker.AsyncMock"
                                }
                            ],
                            "content": "mocker.patch(\"prisma.models.Profile.prisma\")\nmock_profile_db.return_value.find_unique=mocker.AsyncMock("
                        },
                        {
                            "type": "Comment",
                            "name": "# Call function",
                            "range": [
                                1445,
                                1448
                            ],
                            "children": [],
                            "content": "return_value=mock_profile\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "result",
                            "range": [
                                1449,
                                1458
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        1450,
                                        1451
                                    ],
                                    "children": [],
                                    "content": "\n\n"
                                },
                                {
                                    "type": "AwaitExpression",
                                    "name": "await db.get_user_profile",
                                    "range": [
                                        1451,
                                        1458
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_user_profile",
                                            "range": [
                                                1454,
                                                1457
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "db",
                                                    "range": [
                                                        1452,
                                                        1454
                                                    ],
                                                    "children": [],
                                                    "content": "#Call function"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "\"user-id\"",
                                                    "range": [
                                                        1456,
                                                        1464
                                                    ],
                                                    "children": [],
                                                    "content": "result=await db.get_user_profile(\"user-id\")"
                                                }
                                            ],
                                            "content": "function\nresult="
                                        }
                                    ],
                                    "content": "\n#Call function\nresult=await"
                                }
                            ],
                            "content": ")\n\n#Call function\nresult=await"
                        },
                        {
                            "type": "Comment",
                            "name": "# Verify results",
                            "range": [
                                1460,
                                1463
                            ],
                            "children": [],
                            "content": ".get_user_profile(\"user-id\""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert result.name == \"No Profile Data\"",
                            "range": [
                                1464,
                                1471
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1468,
                                        1470
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "result.name",
                                            "range": [
                                                1465,
                                                1468
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "result",
                                                    "range": [
                                                        1465,
                                                        1471
                                                    ],
                                                    "children": [],
                                                    "content": "\n\n#Verify results\nassert"
                                                }
                                            ],
                                            "content": "\n\n#Verify"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"No Profile Data\"",
                                            "range": [
                                                1469,
                                                1485
                                            ],
                                            "children": [],
                                            "content": "results\nassert result.name==\"No Profile Data\"\nassert result.username==\"No Profile Data\""
                                        }
                                    ],
                                    "content": "Verify results\n"
                                }
                            ],
                            "content": ")\n\n#Verify results\nassert"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert result.username == \"No Profile Data\"",
                            "range": [
                                1472,
                                1479
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1476,
                                        1478
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "result.username",
                                            "range": [
                                                1473,
                                                1476
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "result",
                                                    "range": [
                                                        1473,
                                                        1479
                                                    ],
                                                    "children": [],
                                                    "content": ".name==\"No Profile Data\"\nassert"
                                                }
                                            ],
                                            "content": ".name=="
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"No Profile Data\"",
                                            "range": [
                                                1477,
                                                1493
                                            ],
                                            "children": [],
                                            "content": "\"No Profile Data\"\nassert result.username==\"No Profile Data\"\nassert result.description==\"No Profile Data\""
                                        }
                                    ],
                                    "content": "=\"No Profile Data\"\n"
                                }
                            ],
                            "content": "result.name==\"No Profile Data\"\nassert"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert result.description == \"No Profile Data\"",
                            "range": [
                                1480,
                                1487
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1484,
                                        1486
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "result.description",
                                            "range": [
                                                1481,
                                                1484
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "result",
                                                    "range": [
                                                        1481,
                                                        1487
                                                    ],
                                                    "children": [],
                                                    "content": ".username==\"No Profile Data\"\nassert"
                                                }
                                            ],
                                            "content": ".username=="
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"No Profile Data\"",
                                            "range": [
                                                1485,
                                                1501
                                            ],
                                            "children": [],
                                            "content": "\"No Profile Data\"\nassert result.description==\"No Profile Data\"\nassert result.links==["
                                        }
                                    ],
                                    "content": "=\"No Profile Data\"\n"
                                }
                            ],
                            "content": "result.username==\"No Profile Data\"\nassert"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert result.links == []",
                            "range": [
                                1488,
                                1496
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1492,
                                        1494
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "result.links",
                                            "range": [
                                                1489,
                                                1492
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "result",
                                                    "range": [
                                                        1489,
                                                        1495
                                                    ],
                                                    "children": [],
                                                    "content": ".description==\"No Profile Data\"\nassert"
                                                }
                                            ],
                                            "content": ".description=="
                                        },
                                        {
                                            "type": "ArrayLiteral",
                                            "name": "[]",
                                            "range": [
                                                1493,
                                                1495
                                            ],
                                            "children": [],
                                            "content": "\"No Profile Data\"\nassert"
                                        }
                                    ],
                                    "content": "=\"No Profile Data\"\n"
                                }
                            ],
                            "content": "result.description==\"No Profile Data\"\nassert result"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "assert result.avatar_url == \"\"",
                            "range": [
                                1497,
                                1504
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1501,
                                        1503
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "result.avatar_url",
                                            "range": [
                                                1498,
                                                1501
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "result",
                                                    "range": [
                                                        1498,
                                                        1504
                                                    ],
                                                    "children": [],
                                                    "content": "links==[]\nassert"
                                                }
                                            ],
                                            "content": "links==["
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"\"",
                                            "range": [
                                                1502,
                                                1504
                                            ],
                                            "children": [],
                                            "content": "]\nassert"
                                        }
                                    ],
                                    "content": "[]\n"
                                }
                            ],
                            "content": ".links==[]\nassert"
                        }
                    ],
                    "content": "async def test_get_user_profile(mocker):\n#Mock data\nmock_profile=prisma.models.Profile(\nid=\"profile-id\",\nname=\"No Profile Data\",\nusername=\"testuser\",\ndescription=\"Test description\",\nlinks=[\"link1\",\"link2\"],\navatarUrl=\"avatar.jpg\",\nisFeatured=False,\ncreatedAt=datetime.now(),\nupdatedAt=datetime.now(),\n)\n\n#Mock prisma calls\nmock_profile_db=mocker.patch(\"prisma.models.Profile.prisma\")\nmock_profile_db.return_value.find_unique=mocker.AsyncMock(\nreturn_value=mock_profile\n)\n\n#Call function\nresult=await db.get_user_profile(\"user-id\")\n\n#Verify results\nassert result.name==\"No Profile Data\"\nassert result.username==\"No Profile Data\"\nassert result.description==\"No Profile Data\"\nassert result.links==[]\nassert result"
                }
            ],
            "content": "@pytest.mark.asyncio\nasync def test_get_user_profile(mocker):\n#Mock data\nmock_profile=prisma.models.Profile(\nid=\"profile-id\",\nname=\"No Profile Data\",\nusername=\"testuser\",\ndescription=\"Test description\",\nlinks=[\"link1\",\"link2\"],\navatarUrl=\"avatar.jpg\",\nisFeatured=False,\ncreatedAt=datetime.now(),\nupdatedAt=datetime.now(),\n)\n\n#Mock prisma calls\nmock_profile_db=mocker.patch(\"prisma.models.Profile.prisma\")\nmock_profile_db.return_value.find_unique=mocker.AsyncMock(\nreturn_value=mock_profile\n)\n\n#Call function\nresult=await db.get_user_profile(\"user-id\")\n\n#Verify results\nassert result.name==\"No Profile Data\"\nassert result.username==\"No Profile Data\"\nassert result.description==\"No Profile Data\"\nassert result.links==[]\nassert result"
        }
    ],
    "content": "\n@pytest.fixture(autouse=True)\nasync def setup_prisma():\n#Don't register client if already registered\ntry:\nPrisma()\nexcept prisma.errors.ClientAlreadyRegisteredError:\npass\nyield\n\n\n@pytest.mark.asyncio\nasync def test_get_store_agents(mocker):\n#Mock data\nmock_agents=[\nprisma.models.StoreAgent(\nlisting_id=\"test-id\",\nstoreListingVersionId=\"version123\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=None,\nagent_image=[\"image.jpg\"],\nfeatured=False,\ncreator_username=\"creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Test heading\",\ndescription=\"Test description\",\ncategories=[],\nruns=10,\nrating=4.5,\nversions=[\"1.0\"],\nupdated_at=datetime.now(),\n)\n]\n\n#Mock prisma calls\nmock_store_agent=mocker.patch(\"prisma.models.StoreAgent.prisma\")\nmock_store_agent.return_value.find_many=mocker.AsyncMock(return_value=mock_agents)\nmock_store_agent.return_value.count=mocker.AsyncMock(return_value=1)\n\n#Call function\nresult=await db.get_store_agents()\n\n#Verify results\nassert len(result.agents)==1\nassert result.agents[0].slug==\"test-agent\"\nassert result.pagination.total_items==1\n\n#Verify mocks called correctly\nmock_store_agent.return_value.find_many.assert_called_once()\nmock_store_agent.return_value.count.assert_called_once()\n\n\n@pytest.mark.asyncio\nasync def test_get_store_agent_details(mocker):\n#Mock data\nmock_agent=prisma.models.StoreAgent(\nlisting_id=\"test-id\",\nstoreListingVersionId=\"version123\",\nslug=\"test-agent\",\nagent_name=\"Test Agent\",\nagent_video=\"video.mp4\",\nagent_image=[\"image.jpg\"],\nfeatured=False,\ncreator_username=\"creator\",\ncreator_avatar=\"avatar.jpg\",\nsub_heading=\"Test heading\",\ndescription=\"Test description\",\ncategories=[\"test\"],\nruns=10,\nrating=4.5,\nversions=[\"1.0\"],\nupdated_at=datetime.now(),\n)\n\n#Mock prisma call\nmock_store_agent=mocker.patch(\"prisma.models.StoreAgent.prisma\")\nmock_store_agent.return_value.find_first=mocker.AsyncMock(return_value=mock_agent)\n\n#Call function\nresult=await db.get_store_agent_details(\"creator\",\"test-agent\")\n\n#Verify results\nassert result.slug==\"test-agent\"\nassert result.agent_name==\"Test Agent\"\n\n#Verify mock called correctly\nmock_store_agent.return_value.find_first.assert_called_once_with(\nwhere={\"creator_username\":\"creator\",\"slug\":\"test-agent\"}\n)\n\n\n@pytest.mark.asyncio\nasync def test_get_store_creator_details(mocker):\n#Mock data\nmock_creator_data=prisma.models.Creator(\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatar_url=\"avatar.jpg\",\nnum_agents=1,\nagent_rating=4.5,\nagent_runs=10,\ntop_categories=[\"test\"],\nis_featured=False,\n)\n\n#Mock prisma call\nmock_creator=mocker.patch(\"prisma.models.Creator.prisma\")\nmock_creator.return_value.find_unique=mocker.AsyncMock()\n#Configure the mock to return values that will pass validation\nmock_creator.return_value.find_unique.return_value=mock_creator_data\n\n#Call function\nresult=await db.get_store_creator_details(\"creator\")\n\n#Verify results\nassert result.username==\"creator\"\nassert result.name==\"Test Creator\"\nassert result.description==\"Test description\"\nassert result.avatar_url==\"avatar.jpg\"\n\n#Verify mock called correctly\nmock_creator.return_value.find_unique.assert_called_once_with(\nwhere={\"username\":\"creator\"}\n)\n\n\n@pytest.mark.asyncio\nasync def test_create_store_submission(mocker):\n#Mock data\nmock_agent=prisma.models.AgentGraph(\nid=\"agent-id\",\nversion=1,\nuserId=\"user-id\",\ncreatedAt=datetime.now(),\nisActive=True,\nisTemplate=False,\n)\n\nmock_listing=prisma.models.StoreListing(\nid=\"listing-id\",\ncreatedAt=datetime.now(),\nupdatedAt=datetime.now(),\nisDeleted=False,\nisApproved=False,\nagentId=\"agent-id\",\nagentVersion=1,\nowningUserId=\"user-id\",\n)\n\n#Mock prisma calls\nmock_agent_graph=mocker.patch(\"prisma.models.AgentGraph.prisma\")\nmock_agent_graph.return_value.find_first=mocker.AsyncMock(return_value=mock_agent)\n\nmock_store_listing=mocker.patch(\"prisma.models.StoreListing.prisma\")\nmock_store_listing.return_value.find_first=mocker.AsyncMock(return_value=None)\nmock_store_listing.return_value.create=mocker.AsyncMock(return_value=mock_listing)\n\n#Call function\nresult=await db.create_store_submission(\nuser_id=\"user-id\",\nagent_id=\"agent-id\",\nagent_version=1,\nslug=\"test-agent\",\nname=\"Test Agent\",\ndescription=\"Test description\",\n)\n\n#Verify results\nassert result.name==\"Test Agent\"\nassert result.description==\"Test description\"\n\n#Verify mocks called correctly\nmock_agent_graph.return_value.find_first.assert_called_once()\nmock_store_listing.return_value.find_first.assert_called_once()\nmock_store_listing.return_value.create.assert_called_once()\n\n\n@pytest.mark.asyncio\nasync def test_update_profile(mocker):\n#Mock data\nmock_profile=prisma.models.Profile(\nid=\"profile-id\",\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatarUrl=\"avatar.jpg\",\nisFeatured=False,\ncreatedAt=datetime.now(),\nupdatedAt=datetime.now(),\n)\n\n#Mock prisma calls\nmock_profile_db=mocker.patch(\"prisma.models.Profile.prisma\")\nmock_profile_db.return_value.find_first=mocker.AsyncMock(\nreturn_value=mock_profile\n)\nmock_profile_db.return_value.update=mocker.AsyncMock(return_value=mock_profile)\n\n#Test data\nprofile=Profile(\nname=\"Test Creator\",\nusername=\"creator\",\ndescription=\"Test description\",\nlinks=[\"link1\"],\navatar_url=\"avatar.jpg\",\nis_featured=False,\n)\n\n#Call function\nresult=await db.update_or_create_profile(\"user-id\",profile)\n\n#Verify results\nassert result.username==\"creator\"\nassert result.name==\"Test Creator\"\n\n#Verify mocks called correctly\nmock_profile_db.return_value.find_first.assert_called_once()\nmock_profile_db.return_value.update.assert_called_once()\n\n\n@pytest.mark.asyncio\nasync def test_get_user_profile(mocker):\n#Mock data\nmock_profile=prisma.models.Profile(\nid=\"profile-id\",\nname=\"No Profile Data\",\nusername=\"testuser\",\ndescription=\"Test description\",\nlinks=[\"link1\",\"link2\"],\navatarUrl=\"avatar.jpg\",\nisFeatured=False,\ncreatedAt=datetime.now(),\nupdatedAt=datetime.now(),\n)\n\n#Mock prisma calls\nmock_profile_db=mocker.patch(\"prisma.models.Profile.prisma\")\nmock_profile_db.return_value.find_unique=mocker.AsyncMock(\nreturn_value=mock_profile\n)\n\n#Call function\nresult=await db.get_user_profile(\"user-id\")\n\n#Verify results\nassert result.name==\"No Profile Data\"\nassert result.username==\"No Profile Data\"\nassert result.description==\"No Profile Data\"\nassert result.links==[]\nassert result"
}