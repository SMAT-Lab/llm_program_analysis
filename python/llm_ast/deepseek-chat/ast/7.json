{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        1204
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                6
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "abc",
                    "range": [
                        0,
                        1
                    ],
                    "children": [],
                    "content": "from abc"
                },
                {
                    "type": "ImportList",
                    "name": "",
                    "range": [
                        2,
                        5
                    ],
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "name": "ABC",
                            "range": [
                                3,
                                3
                            ],
                            "children": [],
                            "content": "ABC"
                        },
                        {
                            "type": "ImportSpecifier",
                            "name": "abstractmethod",
                            "range": [
                                5,
                                5
                            ],
                            "children": [],
                            "content": "abstractmethod"
                        }
                    ],
                    "content": "import ABC,abstractmethod"
                }
            ],
            "content": "from abc import ABC,abstractmethod\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                7,
                13
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "datetime",
                    "range": [
                        7,
                        8
                    ],
                    "children": [],
                    "content": "from datetime"
                },
                {
                    "type": "ImportList",
                    "name": "",
                    "range": [
                        9,
                        12
                    ],
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "name": "datetime",
                            "range": [
                                10,
                                10
                            ],
                            "children": [],
                            "content": "datetime"
                        },
                        {
                            "type": "ImportSpecifier",
                            "name": "timezone",
                            "range": [
                                12,
                                12
                            ],
                            "children": [],
                            "content": "timezone"
                        }
                    ],
                    "content": "import datetime,timezone"
                }
            ],
            "content": "from datetime import datetime,timezone\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                15,
                19
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "prisma",
                    "range": [
                        15,
                        16
                    ],
                    "children": [],
                    "content": "from prisma"
                },
                {
                    "type": "ImportList",
                    "name": "",
                    "range": [
                        17,
                        18
                    ],
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "name": "Json",
                            "range": [
                                18,
                                18
                            ],
                            "children": [],
                            "content": "Json"
                        }
                    ],
                    "content": "import Json"
                }
            ],
            "content": "from prisma import Json\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                20,
                26
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "prisma.enums",
                    "range": [
                        20,
                        23
                    ],
                    "children": [],
                    "content": "from prisma.enums"
                },
                {
                    "type": "ImportList",
                    "name": "",
                    "range": [
                        24,
                        25
                    ],
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "name": "CreditTransactionType",
                            "range": [
                                25,
                                25
                            ],
                            "children": [],
                            "content": "CreditTransactionType"
                        }
                    ],
                    "content": "import CreditTransactionType"
                }
            ],
            "content": "from prisma.enums import CreditTransactionType\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                27,
                33
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "prisma.errors",
                    "range": [
                        27,
                        30
                    ],
                    "children": [],
                    "content": "from prisma.errors"
                },
                {
                    "type": "ImportList",
                    "name": "",
                    "range": [
                        31,
                        32
                    ],
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "name": "UniqueViolationError",
                            "range": [
                                32,
                                32
                            ],
                            "children": [],
                            "content": "UniqueViolationError"
                        }
                    ],
                    "content": "import UniqueViolationError"
                }
            ],
            "content": "from prisma.errors import UniqueViolationError\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                34,
                40
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "prisma.models",
                    "range": [
                        34,
                        37
                    ],
                    "children": [],
                    "content": "from prisma.models"
                },
                {
                    "type": "ImportList",
                    "name": "",
                    "range": [
                        38,
                        39
                    ],
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "name": "CreditTransaction",
                            "range": [
                                39,
                                39
                            ],
                            "children": [],
                            "content": "CreditTransaction"
                        }
                    ],
                    "content": "import CreditTransaction"
                }
            ],
            "content": "from prisma.models import CreditTransaction\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                42,
                54
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "backend.data.block",
                    "range": [
                        42,
                        47
                    ],
                    "children": [],
                    "content": "from backend.data.block"
                },
                {
                    "type": "ImportList",
                    "name": "",
                    "range": [
                        48,
                        53
                    ],
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "name": "Block",
                            "range": [
                                49,
                                49
                            ],
                            "children": [],
                            "content": "Block"
                        },
                        {
                            "type": "ImportSpecifier",
                            "name": "BlockInput",
                            "range": [
                                51,
                                51
                            ],
                            "children": [],
                            "content": "BlockInput"
                        },
                        {
                            "type": "ImportSpecifier",
                            "name": "get_block",
                            "range": [
                                53,
                                53
                            ],
                            "children": [],
                            "content": "get_block"
                        }
                    ],
                    "content": "import Block,BlockInput,get_block"
                }
            ],
            "content": "from backend.data.block import Block,BlockInput,get_block\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                55,
                63
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "backend.data.block_cost_config",
                    "range": [
                        55,
                        60
                    ],
                    "children": [],
                    "content": "from backend.data.block_cost_config"
                },
                {
                    "type": "ImportList",
                    "name": "",
                    "range": [
                        61,
                        62
                    ],
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "name": "BLOCK_COSTS",
                            "range": [
                                62,
                                62
                            ],
                            "children": [],
                            "content": "BLOCK_COSTS"
                        }
                    ],
                    "content": "import BLOCK_COSTS"
                }
            ],
            "content": "from backend.data.block_cost_config import BLOCK_COSTS\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                64,
                74
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "backend.data.cost",
                    "range": [
                        64,
                        69
                    ],
                    "children": [],
                    "content": "from backend.data.cost"
                },
                {
                    "type": "ImportList",
                    "name": "",
                    "range": [
                        70,
                        73
                    ],
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "name": "BlockCost",
                            "range": [
                                71,
                                71
                            ],
                            "children": [],
                            "content": "BlockCost"
                        },
                        {
                            "type": "ImportSpecifier",
                            "name": "BlockCostType",
                            "range": [
                                73,
                                73
                            ],
                            "children": [],
                            "content": "BlockCostType"
                        }
                    ],
                    "content": "import BlockCost,BlockCostType"
                }
            ],
            "content": "from backend.data.cost import BlockCost,BlockCostType\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                75,
                83
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "backend.util.settings",
                    "range": [
                        75,
                        80
                    ],
                    "children": [],
                    "content": "from backend.util.settings"
                },
                {
                    "type": "ImportList",
                    "name": "",
                    "range": [
                        81,
                        82
                    ],
                    "children": [
                        {
                            "type": "ImportSpecifier",
                            "name": "Config",
                            "range": [
                                82,
                                82
                            ],
                            "children": [],
                            "content": "Config"
                        }
                    ],
                    "content": "import Config"
                }
            ],
            "content": "from backend.util.settings import Config\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "config",
            "range": [
                85,
                90
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        86,
                        89
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "Config",
                            "range": [
                                87,
                                87
                            ],
                            "children": [],
                            "content": "Config"
                        }
                    ],
                    "content": "=Config()"
                }
            ],
            "content": "config=Config()\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                98,
                114
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        101,
                        101
                    ],
                    "children": [],
                    "content": "__init__"
                },
                {
                    "type": "Parameter",
                    "name": "num_user_credits_refill",
                    "range": [
                        103,
                        103
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                105,
                                105
                            ],
                            "children": [],
                            "content": "num_user_credits_refill"
                        }
                    ],
                    "content": "self"
                },
                {
                    "type": "Assignment",
                    "name": "self.num_user_credits_refill",
                    "range": [
                        109,
                        113
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "num_user_credits_refill",
                            "range": [
                                113,
                                113
                            ],
                            "children": [],
                            "content": "num_user_credits_refill"
                        }
                    ],
                    "content": ":\nself.num_user_credits_refill"
                }
            ],
            "content": ":\ndef __init__(self,num_user_credits_refill:int):\nself.num_user_credits_refill="
        },
        {
            "type": "FunctionDecl",
            "name": "get_or_refill_credit",
            "range": [
                119,
                139
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        123,
                        123
                    ],
                    "children": [],
                    "content": "get_or_refill_credit"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        125,
                        125
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                127,
                                127
                            ],
                            "children": [],
                            "content": "user_id"
                        }
                    ],
                    "content": "self"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        131,
                        131
                    ],
                    "children": [],
                    "content": "-"
                },
                {
                    "type": "Docstring",
                    "name": "Get the current credit for the user and refill if no transaction has been made in the current cycle.",
                    "range": [
                        134,
                        136
                    ],
                    "children": [],
                    "content": ":\n\"\""
                },
                {
                    "type": "PassStatement",
                    "name": "pass",
                    "range": [
                        138,
                        138
                    ],
                    "children": [],
                    "content": "\"\""
                }
            ],
            "content": "abstractmethod\nasync def get_or_refill_credit(self,user_id:str)->int:\n\"\"\" \\n         Get the current credit for the user and refill if no transaction has been made in the current cycle. \\n  \\n         Returns: \\n             int: The current credit for the user. \\n         \"\"\"\n"
        },
        {
            "type": "FunctionDecl",
            "name": "spend_credits",
            "range": [
                144,
                193
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        149,
                        149
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        152,
                        152
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                154,
                                154
                            ],
                            "children": [],
                            "content": "user_id"
                        }
                    ],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "user_credit",
                    "range": [
                        157,
                        157
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                159,
                                159
                            ],
                            "children": [],
                            "content": "user_credit"
                        }
                    ],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "block_id",
                    "range": [
                        162,
                        162
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                164,
                                164
                            ],
                            "children": [],
                            "content": "block_id"
                        }
                    ],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        167,
                        167
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "BlockInput",
                            "range": [
                                169,
                                169
                            ],
                            "children": [],
                            "content": "input_data"
                        }
                    ],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "data_size",
                    "range": [
                        172,
                        172
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "float",
                            "range": [
                                174,
                                174
                            ],
                            "children": [],
                            "content": "data_size"
                        }
                    ],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "run_time",
                    "range": [
                        177,
                        177
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "float",
                            "range": [
                                179,
                                179
                            ],
                            "children": [],
                            "content": "run_time"
                        }
                    ],
                    "content": ","
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        185,
                        185
                    ],
                    "children": [],
                    "content": "-"
                },
                {
                    "type": "Docstring",
                    "name": "Spend the credits for the user based on the block usage.",
                    "range": [
                        188,
                        190
                    ],
                    "children": [],
                    "content": ":\n\"\""
                },
                {
                    "type": "PassStatement",
                    "name": "pass",
                    "range": [
                        192,
                        192
                    ],
                    "children": [],
                    "content": "\"\""
                }
            ],
            "content": "abstractmethod\nasync def spend_credits(\nself,\nuser_id:str,\nuser_credit:int,\nblock_id:str,\ninput_data:BlockInput,\ndata_size:float,\nrun_time:float,\n)->int:\n\"\"\" \\n         Spend the credits for the user based on the block usage. \\n  \\n         Args: \\n             user_id (str): The user ID. \\n             user_credit (int): The current credit for the user. \\n             block_id (str): The block ID. \\n             input_data (BlockInput): The input data for the block. \\n             data_size (float): The size of the data being processed. \\n             run_time (float): The time taken to run the block. \\n  \\n         Returns: \\n             int: amount of credit spent \\n         \"\"\"\n"
        },
        {
            "type": "FunctionDecl",
            "name": "top_up_credits",
            "range": [
                198,
                219
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        202,
                        202
                    ],
                    "children": [],
                    "content": "top_up_credits"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        204,
                        204
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                206,
                                206
                            ],
                            "children": [],
                            "content": "user_id"
                        }
                    ],
                    "content": "self"
                },
                {
                    "type": "Parameter",
                    "name": "amount",
                    "range": [
                        208,
                        208
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                210,
                                210
                            ],
                            "children": [],
                            "content": "amount"
                        }
                    ],
                    "content": "str"
                },
                {
                    "type": "Docstring",
                    "name": "Top up the credits for the user.",
                    "range": [
                        214,
                        216
                    ],
                    "children": [],
                    "content": ":\n\"\""
                },
                {
                    "type": "PassStatement",
                    "name": "pass",
                    "range": [
                        218,
                        218
                    ],
                    "children": [],
                    "content": "\"\""
                }
            ],
            "content": "abstractmethod\nasync def top_up_credits(self,user_id:str,amount:int):\n\"\"\" \\n         Top up the credits for the user. \\n  \\n         Args: \\n             user_id (str): The user ID. \\n             amount (int): The amount to top up. \\n         \"\"\"\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_or_refill_credit",
            "range": [
                228,
                490
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        232,
                        232
                    ],
                    "children": [],
                    "content": "def"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        234,
                        234
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        240,
                        240
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Block",
                    "name": "get_or_refill_credit_block",
                    "range": [
                        242,
                        490
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "cur_time",
                            "range": [
                                243,
                                249
                            ],
                            "children": [],
                            "content": "int:\ncur_time=self."
                        },
                        {
                            "type": "VariableDecl",
                            "name": "cur_month",
                            "range": [
                                251,
                                276
                            ],
                            "children": [],
                            "content": "()\ncur_month=cur_time.replace(day=1,hour=0,minute=0,second=0,microsecond"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "nxt_month",
                            "range": [
                                278,
                                320
                            ],
                            "children": [],
                            "content": "0)\nnxt_month=(\ncur_month.replace(month=cur_month.month+1)\nif cur_month.month<12\nelse cur_month.replace(year=cur_month.year+1,month=1"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "user_credit",
                            "range": [
                                323,
                                381
                            ],
                            "children": [],
                            "content": ")\n\nuser_credit=await CreditTransaction.prisma().group_by(\nby=[\"userId\"],\nsum={\"amount\":True},\nwhere={\n\"userId\":user_id,\n\"createdAt\":{\"gte\":cur_month,\"lt\":nxt_month},\n\"isActive\":True,\n}"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_user_credit",
                            "range": [
                                384,
                                412
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "if_user_credit_block",
                                    "range": [
                                        387,
                                        412
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "name": "credit_sum",
                                            "range": [
                                                388,
                                                402
                                            ],
                                            "children": [],
                                            "content": "user_credit:\ncredit_sum=user_credit[0].get(\"_sum\")or"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return_credit_sum",
                                            "range": [
                                                403,
                                                412
                                            ],
                                            "children": [],
                                            "content": "{}\nreturn credit_sum.get(\"amount\","
                                        }
                                    ],
                                    "content": "if user_credit:\ncredit_sum=user_credit[0].get(\"_sum\")or{}\nreturn credit_sum.get(\"amount\","
                                }
                            ],
                            "content": ")\n\nif user_credit:\ncredit_sum=user_credit[0].get(\"_sum\")or{}\nreturn credit_sum.get(\"amount\","
                        },
                        {
                            "type": "VariableDecl",
                            "name": "key",
                            "range": [
                                414,
                                418
                            ],
                            "children": [],
                            "content": ")\n\nkey="
                        },
                        {
                            "type": "TryStatement",
                            "name": "try_create_transaction",
                            "range": [
                                420,
                                484
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "try_create_transaction_block",
                                    "range": [
                                        422,
                                        473
                                    ],
                                    "children": [
                                        {
                                            "type": "AwaitExpression",
                                            "name": "await_create",
                                            "range": [
                                                423,
                                                473
                                            ],
                                            "children": [],
                                            "content": "try:\nawait CreditTransaction.prisma().create(\ndata={\n\"amount\":self.num_user_credits_refill,\n\"type\":CreditTransactionType.TOP_UP,\n\"userId\":user_id,\n\"transactionKey\":key,\n\"createdAt\":self.time_now(),\n}"
                                        }
                                    ],
                                    "content": "\ntry:\nawait CreditTransaction.prisma().create(\ndata={\n\"amount\":self.num_user_credits_refill,\n\"type\":CreditTransactionType.TOP_UP,\n\"userId\":user_id,\n\"transactionKey\":key,\n\"createdAt\":self.time_now(),\n}"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "catch_unique_violation",
                                    "range": [
                                        474,
                                        484
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "catch_unique_violation_block",
                                            "range": [
                                                477,
                                                484
                                            ],
                                            "children": [
                                                {
                                                    "type": "PassStatement",
                                                    "name": "pass",
                                                    "range": [
                                                        478,
                                                        478
                                                    ],
                                                    "children": [],
                                                    "content": "UniqueViolationError"
                                                }
                                            ],
                                            "content": "except UniqueViolationError:\npass#Already refilled"
                                        }
                                    ],
                                    "content": "\n)\nexcept UniqueViolationError:\npass#Already refilled"
                                }
                            ],
                            "content": "\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n\ntry:\nawait CreditTransaction.prisma().create(\ndata={\n\"amount\":self.num_user_credits_refill,\n\"type\":CreditTransactionType.TOP_UP,\n\"userId\":user_id,\n\"transactionKey\":key,\n\"createdAt\":self.time_now(),\n}\n)\nexcept UniqueViolationError:\npass#Already refilled"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_num_user_credits_refill",
                            "range": [
                                486,
                                490
                            ],
                            "children": [],
                            "content": "month\n\nreturn self"
                        }
                    ],
                    "content": ">int:\ncur_time=self.time_now()\ncur_month=cur_time.replace(day=1,hour=0,minute=0,second=0,microsecond=0)\nnxt_month=(\ncur_month.replace(month=cur_month.month+1)\nif cur_month.month<12\nelse cur_month.replace(year=cur_month.year+1,month=1)\n)\n\nuser_credit=await CreditTransaction.prisma().group_by(\nby=[\"userId\"],\nsum={\"amount\":True},\nwhere={\n\"userId\":user_id,\n\"createdAt\":{\"gte\":cur_month,\"lt\":nxt_month},\n\"isActive\":True,\n},\n)\n\nif user_credit:\ncredit_sum=user_credit[0].get(\"_sum\")or{}\nreturn credit_sum.get(\"amount\",0)\n\nkey=f \"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n\ntry:\nawait CreditTransaction.prisma().create(\ndata={\n\"amount\":self.num_user_credits_refill,\n\"type\":CreditTransactionType.TOP_UP,\n\"userId\":user_id,\n\"transactionKey\":key,\n\"createdAt\":self.time_now(),\n}\n)\nexcept UniqueViolationError:\npass#Already refilled this month\n\nreturn self"
                }
            ],
            "content": "):\nasync def get_or_refill_credit(self,user_id:str)->int:\ncur_time=self.time_now()\ncur_month=cur_time.replace(day=1,hour=0,minute=0,second=0,microsecond=0)\nnxt_month=(\ncur_month.replace(month=cur_month.month+1)\nif cur_month.month<12\nelse cur_month.replace(year=cur_month.year+1,month=1)\n)\n\nuser_credit=await CreditTransaction.prisma().group_by(\nby=[\"userId\"],\nsum={\"amount\":True},\nwhere={\n\"userId\":user_id,\n\"createdAt\":{\"gte\":cur_month,\"lt\":nxt_month},\n\"isActive\":True,\n},\n)\n\nif user_credit:\ncredit_sum=user_credit[0].get(\"_sum\")or{}\nreturn credit_sum.get(\"amount\",0)\n\nkey=f \"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n\ntry:\nawait CreditTransaction.prisma().create(\ndata={\n\"amount\":self.num_user_credits_refill,\n\"type\":CreditTransactionType.TOP_UP,\n\"userId\":user_id,\n\"transactionKey\":key,\n\"createdAt\":self.time_now(),\n}\n)\nexcept UniqueViolationError:\npass#Already refilled this month\n\nreturn self"
        },
        {
            "type": "FunctionDecl",
            "name": "time_now",
            "range": [
                492,
                510
            ],
            "children": [
                {
                    "type": "ReturnStatement",
                    "name": "return_datetime_now",
                    "range": [
                        501,
                        510
                    ],
                    "children": [],
                    "content": "):\nreturn datetime.now(timezone."
                }
            ],
            "content": "num_user_credits_refill\n\n@staticmethod\ndef time_now():\nreturn datetime.now(timezone."
        },
        {
            "type": "FunctionDecl",
            "name": "_block_usage_cost",
            "range": [
                512,
                687
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        516,
                        516
                    ],
                    "children": [],
                    "content": "_block_usage_cost"
                },
                {
                    "type": "Parameter",
                    "name": "block",
                    "range": [
                        519,
                        519
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        524,
                        524
                    ],
                    "children": [],
                    "content": "Block"
                },
                {
                    "type": "Parameter",
                    "name": "data_size",
                    "range": [
                        529,
                        529
                    ],
                    "children": [],
                    "content": "BlockInput"
                },
                {
                    "type": "Parameter",
                    "name": "run_time",
                    "range": [
                        534,
                        534
                    ],
                    "children": [],
                    "content": "float"
                },
                {
                    "type": "ReturnType",
                    "name": "tuple",
                    "range": [
                        542,
                        542
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Block",
                    "name": "_block_usage_cost_block",
                    "range": [
                        549,
                        687
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "block_costs",
                            "range": [
                                550,
                                561
                            ],
                            "children": [],
                            "content": "]:\nblock_costs=BLOCK_COSTS.get(type(block"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_not_block_costs",
                            "range": [
                                562,
                                572
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "if_not_block_costs_block",
                                    "range": [
                                        565,
                                        572
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return_0",
                                            "range": [
                                                567,
                                                572
                                            ],
                                            "children": [],
                                            "content": "block_costs:\nreturn0,"
                                        }
                                    ],
                                    "content": "if not block_costs:\nreturn0,"
                                }
                            ],
                            "content": "))\nif not block_costs:\nreturn0,"
                        },
                        {
                            "type": "ForStatement",
                            "name": "for_block_cost_in_block_costs",
                            "range": [
                                574,
                                680
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "for_block_cost_in_block_costs_block",
                                    "range": [
                                        578,
                                        680
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "if_not_is_cost_filter_match",
                                            "range": [
                                                580,
                                                595
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "if_not_is_cost_filter_match_block",
                                                    "range": [
                                                        583,
                                                        595
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ContinueStatement",
                                                            "name": "continue",
                                                            "range": [
                                                                594,
                                                                594
                                                            ],
                                                            "children": [],
                                                            "content": ")"
                                                        }
                                                    ],
                                                    "content": "if not self._is_cost_filter_match(block_cost.cost_filter,input_data):"
                                                }
                                            ],
                                            "content": "block_costs:\nif not self._is_cost_filter_match(block_cost.cost_filter,input_data):"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_cost_type_run",
                                            "range": [
                                                597,
                                                616
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "if_cost_type_run_block",
                                                    "range": [
                                                        600,
                                                        616
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ReturnStatement",
                                                            "name": "return_block_cost",
                                                            "range": [
                                                                608,
                                                                616
                                                            ],
                                                            "children": [],
                                                            "content": "RUN:\nreturn block_cost.cost_amount,block_cost"
                                                        }
                                                    ],
                                                    "content": "if block_cost.cost_type==BlockCostType.RUN:\nreturn block_cost.cost_amount,block_cost"
                                                }
                                            ],
                                            "content": "continue\n\nif block_cost.cost_type==BlockCostType.RUN:\nreturn block_cost.cost_amount,block_cost"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_cost_type_second",
                                            "range": [
                                                618,
                                                648
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "if_cost_type_second_block",
                                                    "range": [
                                                        621,
                                                        648
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ReturnStatement",
                                                            "name": "return_int_run_time",
                                                            "range": [
                                                                629,
                                                                648
                                                            ],
                                                            "children": [],
                                                            "content": "SECOND:\nreturn(\nint(run_time*block_cost.cost_amount),\nblock_cost.cost_filter,"
                                                        }
                                                    ],
                                                    "content": "if block_cost.cost_type==BlockCostType.SECOND:\nreturn(\nint(run_time*block_cost.cost_amount),\nblock_cost.cost_filter,"
                                                }
                                            ],
                                            "content": "cost_filter\n\nif block_cost.cost_type==BlockCostType.SECOND:\nreturn(\nint(run_time*block_cost.cost_amount),\nblock_cost.cost_filter,"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_cost_type_byte",
                                            "range": [
                                                650,
                                                680
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "if_cost_type_byte_block",
                                                    "range": [
                                                        653,
                                                        680
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ReturnStatement",
                                                            "name": "return_int_data_size",
                                                            "range": [
                                                                661,
                                                                680
                                                            ],
                                                            "children": [],
                                                            "content": "BYTE:\nreturn(\nint(data_size*block_cost.cost_amount),\nblock_cost.cost_filter,"
                                                        }
                                                    ],
                                                    "content": "if block_cost.cost_type==BlockCostType.BYTE:\nreturn(\nint(data_size*block_cost.cost_amount),\nblock_cost.cost_filter,"
                                                }
                                            ],
                                            "content": ")\n\nif block_cost.cost_type==BlockCostType.BYTE:\nreturn(\nint(data_size*block_cost.cost_amount),\nblock_cost.cost_filter,"
                                        }
                                    ],
                                    "content": "block_cost in block_costs:\nif not self._is_cost_filter_match(block_cost.cost_filter,input_data):\ncontinue\n\nif block_cost.cost_type==BlockCostType.RUN:\nreturn block_cost.cost_amount,block_cost.cost_filter\n\nif block_cost.cost_type==BlockCostType.SECOND:\nreturn(\nint(run_time*block_cost.cost_amount),\nblock_cost.cost_filter,\n)\n\nif block_cost.cost_type==BlockCostType.BYTE:\nreturn(\nint(data_size*block_cost.cost_amount),\nblock_cost.cost_filter,"
                                }
                            ],
                            "content": "}\n\nfor block_cost in block_costs:\nif not self._is_cost_filter_match(block_cost.cost_filter,input_data):\ncontinue\n\nif block_cost.cost_type==BlockCostType.RUN:\nreturn block_cost.cost_amount,block_cost.cost_filter\n\nif block_cost.cost_type==BlockCostType.SECOND:\nreturn(\nint(run_time*block_cost.cost_amount),\nblock_cost.cost_filter,\n)\n\nif block_cost.cost_type==BlockCostType.BYTE:\nreturn(\nint(data_size*block_cost.cost_amount),\nblock_cost.cost_filter,"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_0",
                            "range": [
                                682,
                                687
                            ],
                            "children": [],
                            "content": ")\n\nreturn0,"
                        }
                    ],
                    "content": "BlockInput]:\nblock_costs=BLOCK_COSTS.get(type(block))\nif not block_costs:\nreturn0,{}\n\nfor block_cost in block_costs:\nif not self._is_cost_filter_match(block_cost.cost_filter,input_data):\ncontinue\n\nif block_cost.cost_type==BlockCostType.RUN:\nreturn block_cost.cost_amount,block_cost.cost_filter\n\nif block_cost.cost_type==BlockCostType.SECOND:\nreturn(\nint(run_time*block_cost.cost_amount),\nblock_cost.cost_filter,\n)\n\nif block_cost.cost_type==BlockCostType.BYTE:\nreturn(\nint(data_size*block_cost.cost_amount),\nblock_cost.cost_filter,\n)\n\nreturn0,"
                }
            ],
            "content": ")\n\ndef _block_usage_cost(\nself,\nblock:Block,\ninput_data:BlockInput,\ndata_size:float,\nrun_time:float,\n)->tuple[int,BlockInput]:\nblock_costs=BLOCK_COSTS.get(type(block))\nif not block_costs:\nreturn0,{}\n\nfor block_cost in block_costs:\nif not self._is_cost_filter_match(block_cost.cost_filter,input_data):\ncontinue\n\nif block_cost.cost_type==BlockCostType.RUN:\nreturn block_cost.cost_amount,block_cost.cost_filter\n\nif block_cost.cost_type==BlockCostType.SECOND:\nreturn(\nint(run_time*block_cost.cost_amount),\nblock_cost.cost_filter,\n)\n\nif block_cost.cost_type==BlockCostType.BYTE:\nreturn(\nint(data_size*block_cost.cost_amount),\nblock_cost.cost_filter,\n)\n\nreturn0,"
        },
        {
            "type": "FunctionDecl",
            "name": "_is_cost_filter_match",
            "range": [
                689,
                789
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        693,
                        693
                    ],
                    "children": [],
                    "content": "_is_cost_filter_match"
                },
                {
                    "type": "Parameter",
                    "name": "cost_filter",
                    "range": [
                        695,
                        695
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        699,
                        699
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "ReturnType",
                    "name": "bool",
                    "range": [
                        706,
                        706
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Block",
                    "name": "_is_cost_filter_match_block",
                    "range": [
                        708,
                        789
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if_not_isinstance",
                            "range": [
                                713,
                                736
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "if_not_isinstance_block",
                                    "range": [
                                        716,
                                        736
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return_cost_filter_equal_input_data",
                                            "range": [
                                                731,
                                                736
                                            ],
                                            "children": [],
                                            "content": "):\nreturn cost_filter="
                                        }
                                    ],
                                    "content": "if not isinstance(cost_filter,dict)or not isinstance(input_data,dict):\nreturn cost_filter="
                                }
                            ],
                            "content": "\" \\n         Filter rules: \\n           - If costFilter is an object, then check if costFilter is the subset of inputValues \\n           - Otherwise, check if costFilter is equal to inputValues. \\n           - Undefined, null, and empty string are considered as equal. \\n         \"\"\"\nif not isinstance(cost_filter,dict)or not isinstance(input_data,dict):\nreturn cost_filter="
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_all",
                            "range": [
                                738,
                                789
                            ],
                            "children": [],
                            "content": "input_data\n\nreturn all(\n(not input_data.get(k)and not v)\nor(input_data.get(k)and self._is_cost_filter_match(v,input_data[k]))\nfor k,v in cost_filter.items()"
                        }
                    ],
                    "content": ">bool:\n\"\"\" \\n         Filter rules: \\n           - If costFilter is an object, then check if costFilter is the subset of inputValues \\n           - Otherwise, check if costFilter is equal to inputValues. \\n           - Undefined, null, and empty string are considered as equal. \\n         \"\"\"\nif not isinstance(cost_filter,dict)or not isinstance(input_data,dict):\nreturn cost_filter==input_data\n\nreturn all(\n(not input_data.get(k)and not v)\nor(input_data.get(k)and self._is_cost_filter_match(v,input_data[k]))\nfor k,v in cost_filter.items()"
                }
            ],
            "content": "}\n\ndef _is_cost_filter_match(\nself,cost_filter:BlockInput,input_data:BlockInput\n)->bool:\n\"\"\" \\n         Filter rules: \\n           - If costFilter is an object, then check if costFilter is the subset of inputValues \\n           - Otherwise, check if costFilter is equal to inputValues. \\n           - Undefined, null, and empty string are considered as equal. \\n         \"\"\"\nif not isinstance(cost_filter,dict)or not isinstance(input_data,dict):\nreturn cost_filter==input_data\n\nreturn all(\n(not input_data.get(k)and not v)\nor(input_data.get(k)and self._is_cost_filter_match(v,input_data[k]))\nfor k,v in cost_filter.items()"
        },
        {
            "type": "FunctionDecl",
            "name": "spend_credits",
            "range": [
                791,
                994
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        796,
                        796
                    ],
                    "children": [],
                    "content": "spend_credits"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        799,
                        799
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "Parameter",
                    "name": "user_credit",
                    "range": [
                        804,
                        804
                    ],
                    "children": [],
                    "content": "str"
                },
                {
                    "type": "Parameter",
                    "name": "block_id",
                    "range": [
                        809,
                        809
                    ],
                    "children": [],
                    "content": "int"
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        814,
                        814
                    ],
                    "children": [],
                    "content": "str"
                },
                {
                    "type": "Parameter",
                    "name": "data_size",
                    "range": [
                        819,
                        819
                    ],
                    "children": [],
                    "content": "BlockInput"
                },
                {
                    "type": "Parameter",
                    "name": "run_time",
                    "range": [
                        824,
                        824
                    ],
                    "children": [],
                    "content": "float"
                },
                {
                    "type": "Parameter",
                    "name": "validate_balance",
                    "range": [
                        829,
                        829
                    ],
                    "children": [],
                    "content": "float"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        839,
                        839
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Block",
                    "name": "spend_credits_block",
                    "range": [
                        841,
                        994
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "block",
                            "range": [
                                842,
                                848
                            ],
                            "children": [],
                            "content": "int:\nblock=get_block("
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_not_block",
                            "range": [
                                849,
                                860
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "if_not_block_block",
                                    "range": [
                                        852,
                                        860
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise_value_error",
                                            "range": [
                                                854,
                                                860
                                            ],
                                            "children": [],
                                            "content": "block:\nraise ValueError(f"
                                        }
                                    ],
                                    "content": "if not block:\nraise ValueError(f"
                                }
                            ],
                            "content": "block_id)\nif not block:\nraise ValueError(f"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "cost",
                            "range": [
                                862,
                                887
                            ],
                            "children": [],
                            "content": ")\n\ncost,matching_filter=self._block_usage_cost(\nblock=block,input_data=input_data,data_size=data_size,run_time="
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_cost_less_equal_0",
                            "range": [
                                889,
                                898
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "if_cost_less_equal_0_block",
                                    "range": [
                                        892,
                                        898
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return_0",
                                            "range": [
                                                896,
                                                898
                                            ],
                                            "children": [],
                                            "content": "0:\n"
                                        }
                                    ],
                                    "content": "if cost<=0:\n"
                                }
                            ],
                            "content": "\n)\nif cost<=0:\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_validate_balance_and_user_credit_less_cost",
                            "range": [
                                900,
                                914
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "if_validate_balance_and_user_credit_less_cost_block",
                                    "range": [
                                        903,
                                        914
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise_value_error",
                                            "range": [
                                                908,
                                                914
                                            ],
                                            "children": [],
                                            "content": "cost:\nraise ValueError(f"
                                        }
                                    ],
                                    "content": "if validate_balance and user_credit<cost:\nraise ValueError(f"
                                }
                            ],
                            "content": "0\n\nif validate_balance and user_credit<cost:\nraise ValueError(f"
                        },
                        {
                            "type": "AwaitExpression",
                            "name": "await_create",
                            "range": [
                                916,
                                991
                            ],
                            "children": [],
                            "content": ")\n\nawait CreditTransaction.prisma().create(\ndata={\n\"userId\":user_id,\n\"amount\":-cost,\n\"type\":CreditTransactionType.USAGE,\n\"blockId\":block.id,\n\"metadata\":Json(\n{\n\"block\":block.name,\n\"input\":matching_filter,\n}\n),\n\"createdAt\":self.time_now(),\n}"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_cost",
                            "range": [
                                992,
                                994
                            ],
                            "children": [],
                            "content": "\n)\n"
                        }
                    ],
                    "content": ">int:\nblock=get_block(block_id)\nif not block:\nraise ValueError(f \"Block not found: {block_id}\")\n\ncost,matching_filter=self._block_usage_cost(\nblock=block,input_data=input_data,data_size=data_size,run_time=run_time\n)\nif cost<=0:\nreturn0\n\nif validate_balance and user_credit<cost:\nraise ValueError(f \"Insufficient credit: {user_credit} < {cost}\")\n\nawait CreditTransaction.prisma().create(\ndata={\n\"userId\":user_id,\n\"amount\":-cost,\n\"type\":CreditTransactionType.USAGE,\n\"blockId\":block.id,\n\"metadata\":Json(\n{\n\"block\":block.name,\n\"input\":matching_filter,\n}\n),\n\"createdAt\":self.time_now(),\n}\n)\n"
                }
            ],
            "content": ")\n\nasync def spend_credits(\nself,\nuser_id:str,\nuser_credit:int,\nblock_id:str,\ninput_data:BlockInput,\ndata_size:float,\nrun_time:float,\nvalidate_balance:bool=True,\n)->int:\nblock=get_block(block_id)\nif not block:\nraise ValueError(f \"Block not found: {block_id}\")\n\ncost,matching_filter=self._block_usage_cost(\nblock=block,input_data=input_data,data_size=data_size,run_time=run_time\n)\nif cost<=0:\nreturn0\n\nif validate_balance and user_credit<cost:\nraise ValueError(f \"Insufficient credit: {user_credit} < {cost}\")\n\nawait CreditTransaction.prisma().create(\ndata={\n\"userId\":user_id,\n\"amount\":-cost,\n\"type\":CreditTransactionType.USAGE,\n\"blockId\":block.id,\n\"metadata\":Json(\n{\n\"block\":block.name,\n\"input\":matching_filter,\n}\n),\n\"createdAt\":self.time_now(),\n}\n)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "top_up_credits",
            "range": [
                996,
                1056
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1000,
                        1000
                    ],
                    "children": [],
                    "content": "def"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        1002,
                        1002
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "amount",
                    "range": [
                        1006,
                        1006
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "Block",
                    "name": "top_up_credits_block",
                    "range": [
                        1011,
                        1056
                    ],
                    "children": [
                        {
                            "type": "AwaitExpression",
                            "name": "await_create",
                            "range": [
                                1012,
                                1055
                            ],
                            "children": [],
                            "content": "):\nawait CreditTransaction.prisma().create(\ndata={\n\"userId\":user_id,\n\"amount\":amount,\n\"type\":CreditTransactionType.TOP_UP,\n\"createdAt\":self.time_now(),\n}"
                        }
                    ],
                    "content": "int):\nawait CreditTransaction.prisma().create(\ndata={\n\"userId\":user_id,\n\"amount\":amount,\n\"type\":CreditTransactionType.TOP_UP,\n\"createdAt\":self.time_now(),\n}\n"
                }
            ],
            "content": "cost\n\nasync def top_up_credits(self,user_id:str,amount:int):\nawait CreditTransaction.prisma().create(\ndata={\n\"userId\":user_id,\n\"amount\":amount,\n\"type\":CreditTransactionType.TOP_UP,\n\"createdAt\":self.time_now(),\n}\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_or_refill_credit",
            "range": [
                1064,
                1084
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        1067,
                        1076
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                1068,
                                1068
                            ],
                            "children": [],
                            "content": "async"
                        },
                        {
                            "type": "Parameter",
                            "name": "args",
                            "range": [
                                1071,
                                1071
                            ],
                            "children": [],
                            "content": "("
                        },
                        {
                            "type": "Parameter",
                            "name": "kwargs",
                            "range": [
                                1075,
                                1075
                            ],
                            "children": [],
                            "content": "args"
                        }
                    ],
                    "content": "\nasync def get_or_refill_credit(self,*args,"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        1079,
                        1079
                    ],
                    "children": [],
                    "content": "kwargs"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        1081,
                        1084
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                1082,
                                1083
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "0",
                                    "range": [
                                        1083,
                                        1083
                                    ],
                                    "children": [],
                                    "content": "int"
                                }
                            ],
                            "content": ">int"
                        }
                    ],
                    "content": "->int:"
                }
            ],
            "content": "UserCreditBase):\nasync def get_or_refill_credit(self,*args,**kwargs)->int:"
        },
        {
            "type": "FunctionDecl",
            "name": "spend_credits",
            "range": [
                1086,
                1106
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        1089,
                        1098
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                1090,
                                1090
                            ],
                            "children": [],
                            "content": "async"
                        },
                        {
                            "type": "Parameter",
                            "name": "args",
                            "range": [
                                1093,
                                1093
                            ],
                            "children": [],
                            "content": "("
                        },
                        {
                            "type": "Parameter",
                            "name": "kwargs",
                            "range": [
                                1097,
                                1097
                            ],
                            "children": [],
                            "content": "args"
                        }
                    ],
                    "content": "\nasync def spend_credits(self,*args,"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        1101,
                        1101
                    ],
                    "children": [],
                    "content": "kwargs"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        1103,
                        1106
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                1104,
                                1105
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "0",
                                    "range": [
                                        1105,
                                        1105
                                    ],
                                    "children": [],
                                    "content": "int"
                                }
                            ],
                            "content": ">int"
                        }
                    ],
                    "content": "->int:"
                }
            ],
            "content": "return0\n\nasync def spend_credits(self,*args,**kwargs)->int:"
        },
        {
            "type": "FunctionDecl",
            "name": "top_up_credits",
            "range": [
                1108,
                1124
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        1111,
                        1120
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                1112,
                                1112
                            ],
                            "children": [],
                            "content": "async"
                        },
                        {
                            "type": "Parameter",
                            "name": "args",
                            "range": [
                                1115,
                                1115
                            ],
                            "children": [],
                            "content": "("
                        },
                        {
                            "type": "Parameter",
                            "name": "kwargs",
                            "range": [
                                1119,
                                1119
                            ],
                            "children": [],
                            "content": "args"
                        }
                    ],
                    "content": "\nasync def top_up_credits(self,*args,"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        1122,
                        1124
                    ],
                    "children": [
                        {
                            "type": "PassStatement",
                            "name": "pass",
                            "range": [
                                1123,
                                1123
                            ],
                            "children": [],
                            "content": "kwargs"
                        }
                    ],
                    "content": "*kwargs)"
                }
            ],
            "content": "return0\n\nasync def top_up_credits(self,*args,**kwargs)"
        },
        {
            "type": "FunctionDecl",
            "name": "get_user_credit_model",
            "range": [
                1126,
                1165
            ],
            "children": [
                {
                    "type": "ReturnType",
                    "name": "UserCreditBase",
                    "range": [
                        1130,
                        1132
                    ],
                    "children": [],
                    "content": "\ndef get_user_credit_model"
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        1135,
                        1164
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                1136,
                                1145
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "config.enable_credit.lower",
                                    "range": [
                                        1136,
                                        1142
                                    ],
                                    "children": [],
                                    "content": ">UserCreditBase:\nif config."
                                },
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        1143,
                                        1144
                                    ],
                                    "children": [],
                                    "content": "enable_credit."
                                },
                                {
                                    "type": "Literal",
                                    "name": "\"true\"",
                                    "range": [
                                        1145,
                                        1145
                                    ],
                                    "children": [],
                                    "content": "lower"
                                }
                            ],
                            "content": ">UserCreditBase:\nif config.enable_credit.lower"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                1148,
                                1154
                            ],
                            "children": [
                                {
                                    "type": "NewExpression",
                                    "name": "UserCredit",
                                    "range": [
                                        1149,
                                        1154
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "config.num_user_credits_refill",
                                            "range": [
                                                1151,
                                                1153
                                            ],
                                            "children": [],
                                            "content": ":\nreturn"
                                        }
                                    ],
                                    "content": "=\"true\":\nreturn UserCredit"
                                }
                            ],
                            "content": "==\"true\":\nreturn UserCredit"
                        },
                        {
                            "type": "ElseStatement",
                            "name": "",
                            "range": [
                                1156,
                                1164
                            ],
                            "children": [
                                {
                                    "type": "ReturnStatement",
                                    "name": "",
                                    "range": [
                                        1159,
                                        1163
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "DisabledUserCredit",
                                            "range": [
                                                1160,
                                                1163
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "0",
                                                    "range": [
                                                        1162,
                                                        1162
                                                    ],
                                                    "children": [],
                                                    "content": ":"
                                                }
                                            ],
                                            "content": "\nelse:\n"
                                        }
                                    ],
                                    "content": ")\nelse:\n"
                                }
                            ],
                            "content": "config.num_user_credits_refill)\nelse:\nreturn"
                        }
                    ],
                    "content": "->UserCreditBase:\nif config.enable_credit.lower()==\"true\":\nreturn UserCredit(config.num_user_credits_refill)\nelse:\nreturn"
                }
            ],
            "content": "\npass\n\n\ndef get_user_credit_model()->UserCreditBase:\nif config.enable_credit.lower()==\"true\":\nreturn UserCredit(config.num_user_credits_refill)\nelse:\nreturn DisabledUserCredit"
        },
        {
            "type": "FunctionDecl",
            "name": "get_block_costs",
            "range": [
                1166,
                1202
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "get_block_costs",
                    "range": [
                        1166,
                        1181
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                1166,
                                1166
                            ],
                            "children": [],
                            "content": "("
                        },
                        {
                            "type": "Identifier",
                            "name": "get_block_costs",
                            "range": [
                                1167,
                                1167
                            ],
                            "children": [],
                            "content": "0"
                        },
                        {
                            "type": "Parameters",
                            "name": "()",
                            "range": [
                                1168,
                                1169
                            ],
                            "children": [],
                            "content": ")\n"
                        },
                        {
                            "type": "ReturnType",
                            "name": "-> dict[str, list[BlockCost]]",
                            "range": [
                                1170,
                                1180
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "->",
                                    "range": [
                                        1170,
                                        1171
                                    ],
                                    "children": [],
                                    "content": "\n\n"
                                },
                                {
                                    "type": "Type",
                                    "name": "dict",
                                    "range": [
                                        1172,
                                        1172
                                    ],
                                    "children": [],
                                    "content": "def"
                                },
                                {
                                    "type": "TypeParameters",
                                    "name": "[str, list[BlockCost]]",
                                    "range": [
                                        1173,
                                        1180
                                    ],
                                    "children": [
                                        {
                                            "type": "Type",
                                            "name": "str",
                                            "range": [
                                                1174,
                                                1174
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Type",
                                            "name": "list",
                                            "range": [
                                                1176,
                                                1176
                                            ],
                                            "children": [],
                                            "content": "-"
                                        },
                                        {
                                            "type": "TypeParameters",
                                            "name": "[BlockCost]",
                                            "range": [
                                                1177,
                                                1179
                                            ],
                                            "children": [
                                                {
                                                    "type": "Type",
                                                    "name": "BlockCost",
                                                    "range": [
                                                        1178,
                                                        1178
                                                    ],
                                                    "children": [],
                                                    "content": "dict"
                                                }
                                            ],
                                            "content": ">dict["
                                        }
                                    ],
                                    "content": "get_block_costs()->dict[str"
                                }
                            ],
                            "content": "\n\ndef get_block_costs()->dict[str"
                        }
                    ],
                    "content": "(0)\n\n\ndef get_block_costs()->dict[str,"
                },
                {
                    "type": "FunctionBody",
                    "name": "get_block_costs",
                    "range": [
                        1182,
                        1202
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                1183,
                                1202
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "return",
                                    "range": [
                                        1183,
                                        1183
                                    ],
                                    "children": [],
                                    "content": "["
                                },
                                {
                                    "type": "Dictionary",
                                    "name": "{block().id: costs for block, costs in BLOCK_COSTS.items()}",
                                    "range": [
                                        1184,
                                        1202
                                    ],
                                    "children": [
                                        {
                                            "type": "DictionaryEntry",
                                            "name": "block().id: costs",
                                            "range": [
                                                1185,
                                                1191
                                            ],
                                            "children": [
                                                {
                                                    "type": "Key",
                                                    "name": "block().id",
                                                    "range": [
                                                        1185,
                                                        1189
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "block()",
                                                            "range": [
                                                                1185,
                                                                1187
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "block",
                                                                    "range": [
                                                                        1185,
                                                                        1185
                                                                    ],
                                                                    "children": [],
                                                                    "content": "]"
                                                                }
                                                            ],
                                                            "content": "]]:"
                                                        },
                                                        {
                                                            "type": "Attribute",
                                                            "name": ".id",
                                                            "range": [
                                                                1188,
                                                                1189
                                                            ],
                                                            "children": [],
                                                            "content": "\nreturn"
                                                        }
                                                    ],
                                                    "content": "]]:\nreturn"
                                                },
                                                {
                                                    "type": "Value",
                                                    "name": "costs",
                                                    "range": [
                                                        1191,
                                                        1191
                                                    ],
                                                    "children": [],
                                                    "content": "block"
                                                }
                                            ],
                                            "content": "]]:\nreturn{block"
                                        },
                                        {
                                            "type": "Comprehension",
                                            "name": "for block, costs in BLOCK_COSTS.items()",
                                            "range": [
                                                1192,
                                                1201
                                            ],
                                            "children": [
                                                {
                                                    "type": "Keyword",
                                                    "name": "for",
                                                    "range": [
                                                        1192,
                                                        1192
                                                    ],
                                                    "children": [],
                                                    "content": "("
                                                },
                                                {
                                                    "type": "Variables",
                                                    "name": "block, costs",
                                                    "range": [
                                                        1193,
                                                        1195
                                                    ],
                                                    "children": [],
                                                    "content": ").id"
                                                },
                                                {
                                                    "type": "Keyword",
                                                    "name": "in",
                                                    "range": [
                                                        1196,
                                                        1196
                                                    ],
                                                    "children": [],
                                                    "content": ":"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "BLOCK_COSTS.items()",
                                                    "range": [
                                                        1197,
                                                        1201
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "BLOCK_COSTS",
                                                            "range": [
                                                                1197,
                                                                1197
                                                            ],
                                                            "children": [],
                                                            "content": "costs"
                                                        },
                                                        {
                                                            "type": "Attribute",
                                                            "name": ".items",
                                                            "range": [
                                                                1198,
                                                                1198
                                                            ],
                                                            "children": [],
                                                            "content": "for"
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "()",
                                                            "range": [
                                                                1199,
                                                                1201
                                                            ],
                                                            "children": [],
                                                            "content": "block,costs"
                                                        }
                                                    ],
                                                    "content": "costs for block,costs"
                                                }
                                            ],
                                            "content": "().id:costs for block,costs"
                                        }
                                    ],
                                    "content": "BlockCost]]:\nreturn{block().id:costs for block,costs in"
                                }
                            ],
                            "content": "[BlockCost]]:\nreturn{block().id:costs for block,costs in"
                        }
                    ],
                    "content": "list[BlockCost]]:\nreturn{block().id:costs for block,costs in"
                }
            ],
            "content": "(0)\n\n\ndef get_block_costs()->dict[str,list[BlockCost]]:\nreturn{block().id:costs for block,costs in"
        }
    ],
    "content": "from abc import ABC,abstractmethod\nfrom datetime import datetime,timezone\n\nfrom prisma import Json\nfrom prisma.enums import CreditTransactionType\nfrom prisma.errors import UniqueViolationError\nfrom prisma.models import CreditTransaction\n\nfrom backend.data.block import Block,BlockInput,get_block\nfrom backend.data.block_cost_config import BLOCK_COSTS\nfrom backend.data.cost import BlockCost,BlockCostType\nfrom backend.util.settings import Config\n\nconfig=Config()\n\n\nclass UserCreditBase(ABC):\ndef __init__(self,num_user_credits_refill:int):\nself.num_user_credits_refill=num_user_credits_refill\n\n@abstractmethod\nasync def get_or_refill_credit(self,user_id:str)->int:\n\"\"\" \\n         Get the current credit for the user and refill if no transaction has been made in the current cycle. \\n  \\n         Returns: \\n             int: The current credit for the user. \\n         \"\"\"\npass\n\n@abstractmethod\nasync def spend_credits(\nself,\nuser_id:str,\nuser_credit:int,\nblock_id:str,\ninput_data:BlockInput,\ndata_size:float,\nrun_time:float,\n)->int:\n\"\"\" \\n         Spend the credits for the user based on the block usage. \\n  \\n         Args: \\n             user_id (str): The user ID. \\n             user_credit (int): The current credit for the user. \\n             block_id (str): The block ID. \\n             input_data (BlockInput): The input data for the block. \\n             data_size (float): The size of the data being processed. \\n             run_time (float): The time taken to run the block. \\n  \\n         Returns: \\n             int: amount of credit spent \\n         \"\"\"\npass\n\n@abstractmethod\nasync def top_up_credits(self,user_id:str,amount:int):\n\"\"\" \\n         Top up the credits for the user. \\n  \\n         Args: \\n             user_id (str): The user ID. \\n             amount (int): The amount to top up. \\n         \"\"\"\npass\n\n\nclass UserCredit(UserCreditBase):\nasync def get_or_refill_credit(self,user_id:str)->int:\ncur_time=self.time_now()\ncur_month=cur_time.replace(day=1,hour=0,minute=0,second=0,microsecond=0)\nnxt_month=(\ncur_month.replace(month=cur_month.month+1)\nif cur_month.month<12\nelse cur_month.replace(year=cur_month.year+1,month=1)\n)\n\nuser_credit=await CreditTransaction.prisma().group_by(\nby=[\"userId\"],\nsum={\"amount\":True},\nwhere={\n\"userId\":user_id,\n\"createdAt\":{\"gte\":cur_month,\"lt\":nxt_month},\n\"isActive\":True,\n},\n)\n\nif user_credit:\ncredit_sum=user_credit[0].get(\"_sum\")or{}\nreturn credit_sum.get(\"amount\",0)\n\nkey=f \"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n\ntry:\nawait CreditTransaction.prisma().create(\ndata={\n\"amount\":self.num_user_credits_refill,\n\"type\":CreditTransactionType.TOP_UP,\n\"userId\":user_id,\n\"transactionKey\":key,\n\"createdAt\":self.time_now(),\n}\n)\nexcept UniqueViolationError:\npass#Already refilled this month\n\nreturn self.num_user_credits_refill\n\n@staticmethod\ndef time_now():\nreturn datetime.now(timezone.utc)\n\ndef _block_usage_cost(\nself,\nblock:Block,\ninput_data:BlockInput,\ndata_size:float,\nrun_time:float,\n)->tuple[int,BlockInput]:\nblock_costs=BLOCK_COSTS.get(type(block))\nif not block_costs:\nreturn0,{}\n\nfor block_cost in block_costs:\nif not self._is_cost_filter_match(block_cost.cost_filter,input_data):\ncontinue\n\nif block_cost.cost_type==BlockCostType.RUN:\nreturn block_cost.cost_amount,block_cost.cost_filter\n\nif block_cost.cost_type==BlockCostType.SECOND:\nreturn(\nint(run_time*block_cost.cost_amount),\nblock_cost.cost_filter,\n)\n\nif block_cost.cost_type==BlockCostType.BYTE:\nreturn(\nint(data_size*block_cost.cost_amount),\nblock_cost.cost_filter,\n)\n\nreturn0,{}\n\ndef _is_cost_filter_match(\nself,cost_filter:BlockInput,input_data:BlockInput\n)->bool:\n\"\"\" \\n         Filter rules: \\n           - If costFilter is an object, then check if costFilter is the subset of inputValues \\n           - Otherwise, check if costFilter is equal to inputValues. \\n           - Undefined, null, and empty string are considered as equal. \\n         \"\"\"\nif not isinstance(cost_filter,dict)or not isinstance(input_data,dict):\nreturn cost_filter==input_data\n\nreturn all(\n(not input_data.get(k)and not v)\nor(input_data.get(k)and self._is_cost_filter_match(v,input_data[k]))\nfor k,v in cost_filter.items()\n)\n\nasync def spend_credits(\nself,\nuser_id:str,\nuser_credit:int,\nblock_id:str,\ninput_data:BlockInput,\ndata_size:float,\nrun_time:float,\nvalidate_balance:bool=True,\n)->int:\nblock=get_block(block_id)\nif not block:\nraise ValueError(f \"Block not found: {block_id}\")\n\ncost,matching_filter=self._block_usage_cost(\nblock=block,input_data=input_data,data_size=data_size,run_time=run_time\n)\nif cost<=0:\nreturn0\n\nif validate_balance and user_credit<cost:\nraise ValueError(f \"Insufficient credit: {user_credit} < {cost}\")\n\nawait CreditTransaction.prisma().create(\ndata={\n\"userId\":user_id,\n\"amount\":-cost,\n\"type\":CreditTransactionType.USAGE,\n\"blockId\":block.id,\n\"metadata\":Json(\n{\n\"block\":block.name,\n\"input\":matching_filter,\n}\n),\n\"createdAt\":self.time_now(),\n}\n)\nreturn cost\n\nasync def top_up_credits(self,user_id:str,amount:int):\nawait CreditTransaction.prisma().create(\ndata={\n\"userId\":user_id,\n\"amount\":amount,\n\"type\":CreditTransactionType.TOP_UP,\n\"createdAt\":self.time_now(),\n}\n)\n\n\nclass DisabledUserCredit(UserCreditBase):\nasync def get_or_refill_credit(self,*args,**kwargs)->int:\nreturn0\n\nasync def spend_credits(self,*args,**kwargs)->int:\nreturn0\n\nasync def top_up_credits(self,*args,**kwargs):\npass\n\n\ndef get_user_credit_model()->UserCreditBase:\nif config.enable_credit.lower()==\"true\":\nreturn UserCredit(config.num_user_credits_refill)\nelse:\nreturn DisabledUserCredit(0)\n\n\ndef get_block_costs()->dict[str,list[BlockCost]]:\nreturn{block().id:costs for block,costs in BLOCK_COSTS."
}