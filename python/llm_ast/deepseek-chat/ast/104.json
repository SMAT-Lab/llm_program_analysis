{
    "type": "Program",
    "name": "Global",
    "range": [
        50,
        3268
    ],
    "children": [
        {
            "type": "ClassDecl",
            "name": "AgentQueryError",
            "range": [
                50,
                64
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "Exception",
                    "range": [
                        52,
                        54
                    ],
                    "children": [],
                    "content": "(Exception)"
                },
                {
                    "type": "Docstring",
                    "name": "Custom exception for agent query errors",
                    "range": [
                        57,
                        59
                    ],
                    "children": [],
                    "content": "\"\"\"Custom exception for agent query errors\"\"\""
                },
                {
                    "type": "PassStatement",
                    "name": "pass",
                    "range": [
                        62,
                        62
                    ],
                    "children": [],
                    "content": "pass"
                }
            ],
            "content": "class AgentQueryError(Exception):\n\"\"\"Custom exception for agent query errors\"\"\"\n\npass\n\n"
        },
        {
            "type": "ClassDecl",
            "name": "TopAgentsDBResponse",
            "range": [
                65,
                106
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BaseModel",
                    "range": [
                        67,
                        71
                    ],
                    "children": [
                        {
                            "type": "Module",
                            "name": "pydantic",
                            "range": [
                                68,
                                70
                            ],
                            "children": [],
                            "content": "(pydantic."
                        }
                    ],
                    "content": "TopAgentsDBResponse(pydantic.BaseModel"
                },
                {
                    "type": "Docstring",
                    "name": "Docstring",
                    "range": [
                        74,
                        76
                    ],
                    "children": [],
                    "content": "\n\"\"\" \\n     Represents a response containing a list of top agents. \\n  \\n     Attributes: \\n         analytics (list[AgentResponse]): The list of top agents. \\n         total_count (int): The total count of agents. \\n         page (int): The current page number. \\n         page_size (int): The number of agents per page. \\n         total_pages (int): The total number of pages. \\n     \""
                },
                {
                    "type": "Attribute",
                    "name": "analytics",
                    "range": [
                        79,
                        88
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "list",
                            "range": [
                                81,
                                88
                            ],
                            "children": [
                                {
                                    "type": "Module",
                                    "name": "prisma",
                                    "range": [
                                        83,
                                        87
                                    ],
                                    "children": [],
                                    "content": "[prisma.models."
                                }
                            ],
                            "content": ":list[prisma.models.AnalyticsTracker"
                        }
                    ],
                    "content": "\nanalytics:list[prisma.models.AnalyticsTracker"
                },
                {
                    "type": "Attribute",
                    "name": "total_count",
                    "range": [
                        90,
                        92
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "int",
                            "range": [
                                92,
                                92
                            ],
                            "children": [],
                            "content": ":"
                        }
                    ],
                    "content": "\ntotal_count:"
                },
                {
                    "type": "Attribute",
                    "name": "page",
                    "range": [
                        94,
                        96
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "int",
                            "range": [
                                96,
                                96
                            ],
                            "children": [],
                            "content": ":"
                        }
                    ],
                    "content": "\npage:"
                },
                {
                    "type": "Attribute",
                    "name": "page_size",
                    "range": [
                        98,
                        100
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "int",
                            "range": [
                                100,
                                100
                            ],
                            "children": [],
                            "content": ":"
                        }
                    ],
                    "content": "\npage_size:"
                },
                {
                    "type": "Attribute",
                    "name": "total_pages",
                    "range": [
                        102,
                        104
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "int",
                            "range": [
                                104,
                                104
                            ],
                            "children": [],
                            "content": ":"
                        }
                    ],
                    "content": "\ntotal_pages:"
                }
            ],
            "content": "\nclass TopAgentsDBResponse(pydantic.BaseModel):\n\"\"\" \\n     Represents a response containing a list of top agents. \\n  \\n     Attributes: \\n         analytics (list[AgentResponse]): The list of top agents. \\n         total_count (int): The total count of agents. \\n         page (int): The current page number. \\n         page_size (int): The number of agents per page. \\n         total_pages (int): The total number of pages. \\n     \"\"\"\n\nanalytics:list[prisma.models.AnalyticsTracker]\ntotal_count:int\npage:int\npage_size:int\ntotal_pages:int\n"
        },
        {
            "type": "ClassDecl",
            "name": "FeaturedAgentResponse",
            "range": [
                107,
                148
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BaseModel",
                    "range": [
                        109,
                        113
                    ],
                    "children": [
                        {
                            "type": "Module",
                            "name": "pydantic",
                            "range": [
                                110,
                                110
                            ],
                            "children": [],
                            "content": "FeaturedAgentResponse"
                        }
                    ],
                    "content": "class FeaturedAgentResponse(pydantic."
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        116,
                        118
                    ],
                    "children": [],
                    "content": ":\n\"\""
                },
                {
                    "type": "Attribute",
                    "name": "featured_agents",
                    "range": [
                        121,
                        130
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "list",
                            "range": [
                                123,
                                123
                            ],
                            "children": [
                                {
                                    "type": "Module",
                                    "name": "prisma",
                                    "range": [
                                        125,
                                        125
                                    ],
                                    "children": [
                                        {
                                            "type": "SubModule",
                                            "name": "models",
                                            "range": [
                                                127,
                                                127
                                            ],
                                            "children": [
                                                {
                                                    "type": "Class",
                                                    "name": "FeaturedAgent",
                                                    "range": [
                                                        129,
                                                        129
                                                    ],
                                                    "children": [],
                                                    "content": "models"
                                                }
                                            ],
                                            "content": "prisma"
                                        }
                                    ],
                                    "content": "list"
                                }
                            ],
                            "content": "featured_agents"
                        }
                    ],
                    "content": "\n\nfeatured_agents:list[prisma.models."
                },
                {
                    "type": "Attribute",
                    "name": "total_count",
                    "range": [
                        132,
                        134
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "int",
                            "range": [
                                134,
                                134
                            ],
                            "children": [],
                            "content": "total_count"
                        }
                    ],
                    "content": "]\ntotal_count"
                },
                {
                    "type": "Attribute",
                    "name": "page",
                    "range": [
                        136,
                        138
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "int",
                            "range": [
                                138,
                                138
                            ],
                            "children": [],
                            "content": "page"
                        }
                    ],
                    "content": "int\npage"
                },
                {
                    "type": "Attribute",
                    "name": "page_size",
                    "range": [
                        140,
                        142
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "int",
                            "range": [
                                142,
                                142
                            ],
                            "children": [],
                            "content": "page_size"
                        }
                    ],
                    "content": "int\npage_size"
                },
                {
                    "type": "Attribute",
                    "name": "total_pages",
                    "range": [
                        144,
                        146
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "int",
                            "range": [
                                146,
                                146
                            ],
                            "children": [],
                            "content": "total_pages"
                        }
                    ],
                    "content": "int\ntotal_pages"
                }
            ],
            "content": "\n\nclass FeaturedAgentResponse(pydantic.BaseModel):\n\"\"\" \\n     Represents a response containing a list of featured agents. \\n  \\n     Attributes: \\n         featured_agents (list[FeaturedAgent]): The list of featured agents. \\n         total_count (int): The total count of featured agents. \\n         page (int): The current page number. \\n         page_size (int): The number of agents per page. \\n         total_pages (int): The total number of pages. \\n     \"\"\"\n\nfeatured_agents:list[prisma.models.FeaturedAgent]\ntotal_count:int\npage:int\npage_size:int\ntotal_pages:int"
        },
        {
            "type": "FunctionDecl",
            "name": "delete_agent",
            "range": [
                149,
                234
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "async",
                    "range": [
                        149,
                        149
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Keyword",
                    "name": "def",
                    "range": [
                        150,
                        150
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Identifier",
                    "name": "delete_agent",
                    "range": [
                        151,
                        151
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Parameter",
                    "name": "agent_id",
                    "range": [
                        153,
                        153
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": ":",
                            "range": [
                                154,
                                154
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "str",
                                    "range": [
                                        155,
                                        155
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "delete_agent"
                        }
                    ],
                    "content": "def"
                },
                {
                    "type": "ReturnType",
                    "name": "->",
                    "range": [
                        157,
                        158
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "prisma.models.Agents | None",
                            "range": [
                                159,
                                165
                            ],
                            "children": [],
                            "content": ")->prisma.models."
                        }
                    ],
                    "content": ":str"
                },
                {
                    "type": "Docstring",
                    "name": "\"\"\"",
                    "range": [
                        168,
                        170
                    ],
                    "children": [
                        {
                            "type": "Text",
                            "name": "Delete an agent from the database.",
                            "range": [
                                169,
                                169
                            ],
                            "children": [],
                            "content": ":"
                        }
                    ],
                    "content": "None:\n"
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        172,
                        233
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "try",
                            "range": [
                                172,
                                172
                            ],
                            "children": [],
                            "content": "\" \\n     Delete an agent from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent to delete. \\n  \\n     Returns: \\n         prisma.models.Agents | None: The deleted agent if found, None otherwise. \\n  \\n     Raises: \\n         AgentQueryError: If there is an error deleting the agent from the database. \\n     \""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "deleted_agent = await prisma.models.Agents.prisma().delete(where={\"id\": agent_id})",
                            "range": [
                                175,
                                199
                            ],
                            "children": [],
                            "content": "try:\ndeleted_agent=await prisma.models.Agents.prisma().delete(\nwhere={\"id\":agent_id"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                201,
                                201
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "deleted_agent",
                                    "range": [
                                        202,
                                        202
                                    ],
                                    "children": [],
                                    "content": ")"
                                }
                            ],
                            "content": "\n"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except",
                            "range": [
                                204,
                                232
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "except",
                                    "range": [
                                        204,
                                        204
                                    ],
                                    "children": [],
                                    "content": "return"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "PrismaError",
                                    "range": [
                                        205,
                                        209
                                    ],
                                    "children": [],
                                    "content": "deleted_agent\nexcept prisma."
                                },
                                {
                                    "type": "Identifier",
                                    "name": "e",
                                    "range": [
                                        211,
                                        211
                                    ],
                                    "children": [],
                                    "content": "."
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                    "range": [
                                        214,
                                        219
                                    ],
                                    "children": [],
                                    "content": "e:\nraise AgentQueryError("
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except",
                                    "range": [
                                        221,
                                        232
                                    ],
                                    "children": [
                                        {
                                            "type": "Keyword",
                                            "name": "except",
                                            "range": [
                                                221,
                                                221
                                            ],
                                            "children": [],
                                            "content": "\"Database query failed: {str(e)}\""
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "Exception",
                                            "range": [
                                                222,
                                                222
                                            ],
                                            "children": [],
                                            "content": ")"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "e",
                                            "range": [
                                                224,
                                                224
                                            ],
                                            "children": [],
                                            "content": "except"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                                            "range": [
                                                227,
                                                232
                                            ],
                                            "children": [],
                                            "content": "e:\nraise AgentQueryError("
                                        }
                                    ],
                                    "content": "\"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError("
                                }
                            ],
                            "content": "return deleted_agent\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError("
                        }
                    ],
                    "content": "\" \\n     Delete an agent from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent to delete. \\n  \\n     Returns: \\n         prisma.models.Agents | None: The deleted agent if found, None otherwise. \\n  \\n     Raises: \\n         AgentQueryError: If there is an error deleting the agent from the database. \\n     \"\"\"\ntry:\ndeleted_agent=await prisma.models.Agents.prisma().delete(\nwhere={\"id\":agent_id}\n)\nreturn deleted_agent\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f"
                }
            ],
            "content": "\n\n\nasync def delete_agent(agent_id:str)->prisma.models.Agents|None:\n\"\"\" \\n     Delete an agent from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent to delete. \\n  \\n     Returns: \\n         prisma.models.Agents | None: The deleted agent if found, None otherwise. \\n  \\n     Raises: \\n         AgentQueryError: If there is an error deleting the agent from the database. \\n     \"\"\"\ntry:\ndeleted_agent=await prisma.models.Agents.prisma().delete(\nwhere={\"id\":agent_id}\n)\nreturn deleted_agent\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\""
        },
        {
            "type": "FunctionDecl",
            "name": "create_agent_entry",
            "range": [
                235,
                420
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        235,
                        239
                    ],
                    "children": [],
                    "content": ")\n\n\nasync"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        236,
                        239
                    ],
                    "children": [],
                    "content": "\n\n\nasync"
                },
                {
                    "type": "FunctionName",
                    "name": "create_agent_entry",
                    "range": [
                        237,
                        253
                    ],
                    "children": [],
                    "content": "\n\nasync def create_agent_entry(\nname:str,\ndescription:str,\n"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        238,
                        299
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "name",
                            "range": [
                                240,
                                243
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        242,
                                        243
                                    ],
                                    "children": [],
                                    "content": "(\n"
                                }
                            ],
                            "content": "def create_agent_entry(\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "description",
                            "range": [
                                245,
                                248
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        247,
                                        248
                                    ],
                                    "children": [],
                                    "content": ",\n"
                                }
                            ],
                            "content": ":str,\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "author",
                            "range": [
                                250,
                                253
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        252,
                                        253
                                    ],
                                    "children": [],
                                    "content": ",\n"
                                }
                            ],
                            "content": ":str,\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "keywords",
                            "range": [
                                255,
                                263
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "typing.List[str]",
                                    "range": [
                                        257,
                                        263
                                    ],
                                    "children": [],
                                    "content": ",\nkeywords:typing.List"
                                }
                            ],
                            "content": ":str,\nkeywords:typing.List"
                        },
                        {
                            "type": "Parameter",
                            "name": "categories",
                            "range": [
                                265,
                                273
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "typing.List[str]",
                                    "range": [
                                        267,
                                        273
                                    ],
                                    "children": [],
                                    "content": ",\ncategories:typing.List"
                                }
                            ],
                            "content": "str],\ncategories:typing.List"
                        },
                        {
                            "type": "Parameter",
                            "name": "graph",
                            "range": [
                                275,
                                280
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "prisma.Json",
                                    "range": [
                                        277,
                                        280
                                    ],
                                    "children": [],
                                    "content": ",\ngraph:"
                                }
                            ],
                            "content": "str],\ngraph:"
                        },
                        {
                            "type": "Parameter",
                            "name": "submission_state",
                            "range": [
                                282,
                                297
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "prisma.enums.SubmissionStatus",
                                    "range": [
                                        284,
                                        297
                                    ],
                                    "children": [],
                                    "content": ",\nsubmission_state:prisma.enums.SubmissionStatus=prisma.enums."
                                }
                            ],
                            "content": ".Json,\nsubmission_state:prisma.enums.SubmissionStatus=prisma.enums."
                        }
                    ],
                    "content": "\nasync def create_agent_entry(\nname:str,\ndescription:str,\nauthor:str,\nkeywords:typing.List[str],\ncategories:typing.List[str],\ngraph:prisma.Json,\nsubmission_state:prisma.enums.SubmissionStatus=prisma.enums.SubmissionStatus."
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        300,
                        301
                    ],
                    "children": [],
                    "content": "PENDING,"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        302,
                        304
                    ],
                    "children": [],
                    "content": "\n):"
                },
                {
                    "type": "TryStatement",
                    "name": "try_block",
                    "range": [
                        306,
                        406
                    ],
                    "children": [
                        {
                            "type": "TryKeyword",
                            "name": "try",
                            "range": [
                                306,
                                309
                            ],
                            "children": [],
                            "content": "\"\"\" \\n     Create a new agent entry in the database. \\n  \\n     Args: \\n         name (str): The name of the agent. \\n         description (str): The description of the agent. \\n         author (str): The author of the agent. \\n         keywords (List[str]): The keywords associated with the agent. \\n         categories (List[str]): The categories associated with the agent. \\n         graph (dict): The graph data of the agent. \\n  \\n     Returns: \\n         dict: The newly created agent entry. \\n  \\n     Raises: \\n         AgentQueryError: If there is an error creating the agent entry. \\n     \"\"\"\n"
                        },
                        {
                            "type": "Block",
                            "name": "block",
                            "range": [
                                310,
                                384
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "assignment",
                                    "range": [
                                        309,
                                        384
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "agent",
                                            "range": [
                                                309,
                                                314
                                            ],
                                            "children": [],
                                            "content": "\ntry:\nagent="
                                        },
                                        {
                                            "type": "AwaitExpression",
                                            "name": "await_expression",
                                            "range": [
                                                311,
                                                384
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "call_expression",
                                                    "range": [
                                                        312,
                                                        384
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "member_expression",
                                                            "range": [
                                                                312,
                                                                319
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "prisma",
                                                                    "range": [
                                                                        312,
                                                                        318
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nagent=await prisma.models"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "models",
                                                                    "range": [
                                                                        313,
                                                                        319
                                                                    ],
                                                                    "children": [],
                                                                    "content": "agent=await prisma.models."
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "Agents",
                                                                    "range": [
                                                                        314,
                                                                        320
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=await prisma.models.Agents"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "prisma",
                                                                    "range": [
                                                                        317,
                                                                        323
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".models.Agents.prisma("
                                                                }
                                                            ],
                                                            "content": "\nagent=await prisma.models."
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "call_expression",
                                                            "range": [
                                                                319,
                                                                384
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "create",
                                                                    "range": [
                                                                        322,
                                                                        328
                                                                    ],
                                                                    "children": [],
                                                                    "content": "prisma().create(\n"
                                                                },
                                                                {
                                                                    "type": "ObjectExpression",
                                                                    "name": "object_expression",
                                                                    "range": [
                                                                        324,
                                                                        383
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "data",
                                                                            "range": [
                                                                                325,
                                                                                381
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ObjectExpression",
                                                                                    "name": "object_expression",
                                                                                    "range": [
                                                                                        327,
                                                                                        381
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "name",
                                                                                            "range": [
                                                                                                329,
                                                                                                332
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "name",
                                                                                                    "range": [
                                                                                                        331,
                                                                                                        332
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": "{\n"
                                                                                                }
                                                                                            ],
                                                                                            "content": "data={\n"
                                                                                        },
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "description",
                                                                                            "range": [
                                                                                                334,
                                                                                                337
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "description",
                                                                                                    "range": [
                                                                                                        336,
                                                                                                        337
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": ",\n"
                                                                                                }
                                                                                            ],
                                                                                            "content": ":name,\n"
                                                                                        },
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "author",
                                                                                            "range": [
                                                                                                339,
                                                                                                342
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "author",
                                                                                                    "range": [
                                                                                                        341,
                                                                                                        342
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": ",\n"
                                                                                                }
                                                                                            ],
                                                                                            "content": ":description,\n"
                                                                                        },
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "keywords",
                                                                                            "range": [
                                                                                                344,
                                                                                                347
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "keywords",
                                                                                                    "range": [
                                                                                                        346,
                                                                                                        347
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": ",\n"
                                                                                                }
                                                                                            ],
                                                                                            "content": ":author,\n"
                                                                                        },
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "categories",
                                                                                            "range": [
                                                                                                349,
                                                                                                352
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "categories",
                                                                                                    "range": [
                                                                                                        351,
                                                                                                        352
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": ",\n"
                                                                                                }
                                                                                            ],
                                                                                            "content": ":keywords,\n"
                                                                                        },
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "graph",
                                                                                            "range": [
                                                                                                354,
                                                                                                357
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "graph",
                                                                                                    "range": [
                                                                                                        356,
                                                                                                        357
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": ",\n"
                                                                                                }
                                                                                            ],
                                                                                            "content": ":categories,\n"
                                                                                        },
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "AnalyticsTracker",
                                                                                            "range": [
                                                                                                359,
                                                                                                373
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "ObjectExpression",
                                                                                                    "name": "object_expression",
                                                                                                    "range": [
                                                                                                        361,
                                                                                                        373
                                                                                                    ],
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Property",
                                                                                                            "name": "create",
                                                                                                            "range": [
                                                                                                                362,
                                                                                                                372
                                                                                                            ],
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "ObjectExpression",
                                                                                                                    "name": "object_expression",
                                                                                                                    "range": [
                                                                                                                        364,
                                                                                                                        372
                                                                                                                    ],
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "Property",
                                                                                                                            "name": "downloads",
                                                                                                                            "range": [
                                                                                                                                365,
                                                                                                                                368
                                                                                                                            ],
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "Literal",
                                                                                                                                    "name": "0",
                                                                                                                                    "range": [
                                                                                                                                        367,
                                                                                                                                        368
                                                                                                                                    ],
                                                                                                                                    "children": [],
                                                                                                                                    "content": ":{"
                                                                                                                                }
                                                                                                                            ],
                                                                                                                            "content": "{\"create\":{"
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "Property",
                                                                                                                            "name": "views",
                                                                                                                            "range": [
                                                                                                                                369,
                                                                                                                                372
                                                                                                                            ],
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "Literal",
                                                                                                                                    "name": "0",
                                                                                                                                    "range": [
                                                                                                                                        371,
                                                                                                                                        372
                                                                                                                                    ],
                                                                                                                                    "children": [],
                                                                                                                                    "content": "0,"
                                                                                                                                }
                                                                                                                            ],
                                                                                                                            "content": "\"downloads\":0,"
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "content": ":{\"create\":{\"downloads\":0,"
                                                                                                                }
                                                                                                            ],
                                                                                                            "content": "\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,"
                                                                                                        }
                                                                                                    ],
                                                                                                    "content": ",\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,\"views\""
                                                                                                }
                                                                                            ],
                                                                                            "content": ":graph,\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,\"views\""
                                                                                        },
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "submissionStatus",
                                                                                            "range": [
                                                                                                376,
                                                                                                379
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "submission_state",
                                                                                                    "range": [
                                                                                                        378,
                                                                                                        379
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": ",\n"
                                                                                                }
                                                                                            ],
                                                                                            "content": "}},\n"
                                                                                        }
                                                                                    ],
                                                                                    "content": "(\ndata={\n\"name\":name,\n\"description\":description,\n\"author\":author,\n\"keywords\":keywords,\n\"categories\":categories,\n\"graph\":graph,\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,\"views\":0}},\n\"submissionStatus\":"
                                                                                }
                                                                            ],
                                                                            "content": ".create(\ndata={\n\"name\":name,\n\"description\":description,\n\"author\":author,\n\"keywords\":keywords,\n\"categories\":categories,\n\"graph\":graph,\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,\"views\":0}},\n\"submissionStatus\":"
                                                                        }
                                                                    ],
                                                                    "content": ").create(\ndata={\n\"name\":name,\n\"description\":description,\n\"author\":author,\n\"keywords\":keywords,\n\"categories\":categories,\n\"graph\":graph,\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,\"views\":0}},\n\"submissionStatus\":submission_state,"
                                                                }
                                                            ],
                                                            "content": ".Agents.prisma().create(\ndata={\n\"name\":name,\n\"description\":description,\n\"author\":author,\n\"keywords\":keywords,\n\"categories\":categories,\n\"graph\":graph,\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,\"views\":0}},\n\"submissionStatus\":submission_state,\n"
                                                        }
                                                    ],
                                                    "content": "\nagent=await prisma.models.Agents.prisma().create(\ndata={\n\"name\":name,\n\"description\":description,\n\"author\":author,\n\"keywords\":keywords,\n\"categories\":categories,\n\"graph\":graph,\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,\"views\":0}},\n\"submissionStatus\":submission_state,\n"
                                                }
                                            ],
                                            "content": ":\nagent=await prisma.models.Agents.prisma().create(\ndata={\n\"name\":name,\n\"description\":description,\n\"author\":author,\n\"keywords\":keywords,\n\"categories\":categories,\n\"graph\":graph,\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,\"views\":0}},\n\"submissionStatus\":submission_state,\n"
                                        }
                                    ],
                                    "content": "\ntry:\nagent=await prisma.models.Agents.prisma().create(\ndata={\n\"name\":name,\n\"description\":description,\n\"author\":author,\n\"keywords\":keywords,\n\"categories\":categories,\n\"graph\":graph,\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,\"views\":0}},\n\"submissionStatus\":submission_state,\n"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return_statement",
                                    "range": [
                                        386,
                                        388
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "agent",
                                            "range": [
                                                387,
                                                388
                                            ],
                                            "children": [],
                                            "content": ")\n"
                                        }
                                    ],
                                    "content": "\n)\n"
                                }
                            ],
                            "content": "try:\nagent=await prisma.models.Agents.prisma().create(\ndata={\n\"name\":name,\n\"description\":description,\n\"author\":author,\n\"keywords\":keywords,\n\"categories\":categories,\n\"graph\":graph,\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,\"views\":0}},\n\"submissionStatus\":submission_state,\n"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except_block",
                            "range": [
                                390,
                                406
                            ],
                            "children": [
                                {
                                    "type": "ExceptKeyword",
                                    "name": "except",
                                    "range": [
                                        390,
                                        396
                                    ],
                                    "children": [],
                                    "content": "return agent\n\nexcept prisma."
                                },
                                {
                                    "type": "Identifier",
                                    "name": "PrismaError",
                                    "range": [
                                        391,
                                        396
                                    ],
                                    "children": [],
                                    "content": "agent\n\nexcept prisma."
                                },
                                {
                                    "type": "AsKeyword",
                                    "name": "as",
                                    "range": [
                                        396,
                                        398
                                    ],
                                    "children": [],
                                    "content": ".errors."
                                },
                                {
                                    "type": "Identifier",
                                    "name": "e",
                                    "range": [
                                        397,
                                        398
                                    ],
                                    "children": [],
                                    "content": "errors."
                                },
                                {
                                    "type": "Block",
                                    "name": "block",
                                    "range": [
                                        399,
                                        406
                                    ],
                                    "children": [
                                        {
                                            "type": "ThrowStatement",
                                            "name": "raise_statement",
                                            "range": [
                                                400,
                                                405
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "call_expression",
                                                    "range": [
                                                        401,
                                                        405
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "AgentQueryError",
                                                            "range": [
                                                                401,
                                                                415
                                                            ],
                                                            "children": [],
                                                            "content": "e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:"
                                                        },
                                                        {
                                                            "type": "TemplateLiteral",
                                                            "name": "template_literal",
                                                            "range": [
                                                                403,
                                                                405
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "TemplateElement",
                                                                    "name": "template_element",
                                                                    "range": [
                                                                        404,
                                                                        405
                                                                    ],
                                                                    "children": [],
                                                                    "content": "raise AgentQueryError"
                                                                }
                                                            ],
                                                            "content": "\nraise AgentQueryError"
                                                        }
                                                    ],
                                                    "content": "e:\nraise AgentQueryError"
                                                }
                                            ],
                                            "content": "as e:\nraise AgentQueryError"
                                        }
                                    ],
                                    "content": "PrismaError as e:\nraise AgentQueryError("
                                }
                            ],
                            "content": "return agent\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError("
                        },
                        {
                            "type": "CatchClause",
                            "name": "except_block",
                            "range": [
                                407,
                                419
                            ],
                            "children": [
                                {
                                    "type": "ExceptKeyword",
                                    "name": "except",
                                    "range": [
                                        407,
                                        411
                                    ],
                                    "children": [],
                                    "content": "f \"Database query failed: {str(e)}\")\nexcept"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "Exception",
                                    "range": [
                                        408,
                                        411
                                    ],
                                    "children": [],
                                    "content": "\"Database query failed: {str(e)}\")\nexcept"
                                },
                                {
                                    "type": "AsKeyword",
                                    "name": "as",
                                    "range": [
                                        411,
                                        413
                                    ],
                                    "children": [],
                                    "content": "except Exception as"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "e",
                                    "range": [
                                        412,
                                        413
                                    ],
                                    "children": [],
                                    "content": "Exception as"
                                },
                                {
                                    "type": "Block",
                                    "name": "block",
                                    "range": [
                                        414,
                                        419
                                    ],
                                    "children": [
                                        {
                                            "type": "ThrowStatement",
                                            "name": "raise_statement",
                                            "range": [
                                                413,
                                                418
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "call_expression",
                                                    "range": [
                                                        414,
                                                        418
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "AgentQueryError",
                                                            "range": [
                                                                414,
                                                                428
                                                            ],
                                                            "children": [],
                                                            "content": "e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def update_agent_entry"
                                                        },
                                                        {
                                                            "type": "TemplateLiteral",
                                                            "name": "template_literal",
                                                            "range": [
                                                                416,
                                                                418
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "TemplateElement",
                                                                    "name": "template_element",
                                                                    "range": [
                                                                        417,
                                                                        418
                                                                    ],
                                                                    "children": [],
                                                                    "content": "raise AgentQueryError"
                                                                }
                                                            ],
                                                            "content": "\nraise AgentQueryError"
                                                        }
                                                    ],
                                                    "content": "e:\nraise AgentQueryError"
                                                }
                                            ],
                                            "content": "as e:\nraise AgentQueryError"
                                        }
                                    ],
                                    "content": "e:\nraise AgentQueryError("
                                }
                            ],
                            "content": "f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError("
                        }
                    ],
                    "content": "\"\"\" \\n     Create a new agent entry in the database. \\n  \\n     Args: \\n         name (str): The name of the agent. \\n         description (str): The description of the agent. \\n         author (str): The author of the agent. \\n         keywords (List[str]): The keywords associated with the agent. \\n         categories (List[str]): The categories associated with the agent. \\n         graph (dict): The graph data of the agent. \\n  \\n     Returns: \\n         dict: The newly created agent entry. \\n  \\n     Raises: \\n         AgentQueryError: If there is an error creating the agent entry. \\n     \"\"\"\ntry:\nagent=await prisma.models.Agents.prisma().create(\ndata={\n\"name\":name,\n\"description\":description,\n\"author\":author,\n\"keywords\":keywords,\n\"categories\":categories,\n\"graph\":graph,\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,\"views\":0}},\n\"submissionStatus\":submission_state,\n}\n)\n\nreturn agent\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError("
                }
            ],
            "content": ")\n\n\nasync def create_agent_entry(\nname:str,\ndescription:str,\nauthor:str,\nkeywords:typing.List[str],\ncategories:typing.List[str],\ngraph:prisma.Json,\nsubmission_state:prisma.enums.SubmissionStatus=prisma.enums.SubmissionStatus.PENDING,\n):\n\"\"\" \\n     Create a new agent entry in the database. \\n  \\n     Args: \\n         name (str): The name of the agent. \\n         description (str): The description of the agent. \\n         author (str): The author of the agent. \\n         keywords (List[str]): The keywords associated with the agent. \\n         categories (List[str]): The categories associated with the agent. \\n         graph (dict): The graph data of the agent. \\n  \\n     Returns: \\n         dict: The newly created agent entry. \\n  \\n     Raises: \\n         AgentQueryError: If there is an error creating the agent entry. \\n     \"\"\"\ntry:\nagent=await prisma.models.Agents.prisma().create(\ndata={\n\"name\":name,\n\"description\":description,\n\"author\":author,\n\"keywords\":keywords,\n\"categories\":categories,\n\"graph\":graph,\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,\"views\":0}},\n\"submissionStatus\":submission_state,\n}\n)\n\nreturn agent\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f"
        },
        {
            "type": "FunctionDecl",
            "name": "update_agent_entry",
            "range": [
                421,
                573
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "async",
                    "range": [
                        421,
                        421
                    ],
                    "children": [],
                    "content": "\"Unexpected error occurred: {str(e)}\""
                },
                {
                    "type": "Keyword",
                    "name": "def",
                    "range": [
                        422,
                        422
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Identifier",
                    "name": "update_agent_entry",
                    "range": [
                        423,
                        423
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Parameter",
                    "name": "agent_id",
                    "range": [
                        426,
                        428
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "agent_id",
                            "range": [
                                426,
                                426
                            ],
                            "children": [],
                            "content": "async"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                428,
                                428
                            ],
                            "children": [],
                            "content": "update_agent_entry"
                        }
                    ],
                    "content": "async def update_agent_entry"
                },
                {
                    "type": "Parameter",
                    "name": "version",
                    "range": [
                        431,
                        433
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "version",
                            "range": [
                                431,
                                431
                            ],
                            "children": [],
                            "content": "agent_id"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                433,
                                433
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "agent_id:str"
                },
                {
                    "type": "Parameter",
                    "name": "submission_state",
                    "range": [
                        436,
                        442
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "submission_state",
                            "range": [
                                436,
                                436
                            ],
                            "children": [],
                            "content": "version"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "prisma.enums.SubmissionStatus",
                            "range": [
                                438,
                                442
                            ],
                            "children": [],
                            "content": "int,\nsubmission_state:"
                        }
                    ],
                    "content": "version:int,\nsubmission_state:"
                },
                {
                    "type": "Parameter",
                    "name": "comments",
                    "range": [
                        445,
                        451
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "comments",
                            "range": [
                                445,
                                445
                            ],
                            "children": [],
                            "content": "enums"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "str | None",
                            "range": [
                                447,
                                451
                            ],
                            "children": [],
                            "content": "SubmissionStatus,\ncomments:"
                        }
                    ],
                    "content": "enums.SubmissionStatus,\ncomments:"
                },
                {
                    "type": "ReturnType",
                    "name": "-> prisma.models.Agents | None",
                    "range": [
                        455,
                        463
                    ],
                    "children": [],
                    "content": "=None,\n)->prisma."
                },
                {
                    "type": "Docstring",
                    "name": "\"\"\" \\n     Update an existing agent entry in the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         version (int): The version of the agent. \\n         submission_state (prisma.enums.SubmissionStatus): The submission state of the agent. \\n     \"\"\"",
                    "range": [
                        466,
                        468
                    ],
                    "children": [],
                    "content": "Agents|None"
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        471,
                        572
                    ],
                    "children": [
                        {
                            "type": "Block",
                            "name": "",
                            "range": [
                                473,
                                538
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "agent = await prisma.models.Agents.prisma().update(where={\"id\": agent_id}, data={\"version\": version, \"submissionStatus\": submission_state, \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc), \"submissionReviewComments\": comments})",
                                    "range": [
                                        474,
                                        537
                                    ],
                                    "children": [],
                                    "content": "\n\ntry:\nagent=await prisma.models.Agents.prisma().update(\nwhere={\"id\":agent_id},\ndata={\n\"version\":version,\n\"submissionStatus\":submission_state,\n\"submissionReviewDate\":datetime.datetime.now(datetime.timezone.utc),\n\"submissionReviewComments\":comments,"
                                }
                            ],
                            "content": "\"\"\n\ntry:\nagent=await prisma.models.Agents.prisma().update(\nwhere={\"id\":agent_id},\ndata={\n\"version\":version,\n\"submissionStatus\":submission_state,\n\"submissionReviewDate\":datetime.datetime.now(datetime.timezone.utc),\n\"submissionReviewComments\":comments,\n"
                        },
                        {
                            "type": "ExceptClause",
                            "name": "except prisma.errors.PrismaError as e",
                            "range": [
                                543,
                                558
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")",
                                    "range": [
                                        553,
                                        558
                                    ],
                                    "children": [],
                                    "content": "PrismaError as e:\nraise"
                                }
                            ],
                            "content": "\n\nreturn agent\nexcept prisma.errors.PrismaError as e:\nraise"
                        },
                        {
                            "type": "ExceptClause",
                            "name": "except Exception as e",
                            "range": [
                                560,
                                571
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                                    "range": [
                                        566,
                                        571
                                    ],
                                    "children": [],
                                    "content": "Exception as e:\nraise"
                                }
                            ],
                            "content": "(f \"Agent Update Failed Database query failed: {str(e)}\")\nexcept Exception as e:\nraise"
                        }
                    ],
                    "content": "\"\"\" \\n     Update an existing agent entry in the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         version (int): The version of the agent. \\n         submission_state (prisma.enums.SubmissionStatus): The submission state of the agent. \\n     \"\"\"\n\ntry:\nagent=await prisma.models.Agents.prisma().update(\nwhere={\"id\":agent_id},\ndata={\n\"version\":version,\n\"submissionStatus\":submission_state,\n\"submissionReviewDate\":datetime.datetime.now(datetime.timezone.utc),\n\"submissionReviewComments\":comments,\n},\n)\n\nreturn agent\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Agent Update Failed Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return agent",
                    "range": [
                        540,
                        542
                    ],
                    "children": [],
                    "content": ",\n)"
                }
            ],
            "content": "\"Unexpected error occurred: {str(e)}\")\n\n\nasync def update_agent_entry(\nagent_id:str,\nversion:int,\nsubmission_state:prisma.enums.SubmissionStatus,\ncomments:str|None=None,\n)->prisma.models.Agents|None:\n\"\"\" \\n     Update an existing agent entry in the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         version (int): The version of the agent. \\n         submission_state (prisma.enums.SubmissionStatus): The submission state of the agent. \\n     \"\"\"\n\ntry:\nagent=await prisma.models.Agents.prisma().update(\nwhere={\"id\":agent_id},\ndata={\n\"version\":version,\n\"submissionStatus\":submission_state,\n\"submissionReviewDate\":datetime.datetime.now(datetime.timezone.utc),\n\"submissionReviewComments\":comments,\n},\n)\n\nreturn agent\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Agent Update Failed Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError("
        },
        {
            "type": "FunctionDecl",
            "name": "get_agents",
            "range": [
                574,
                1069
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        574,
                        578
                    ],
                    "children": [],
                    "content": "f \"Unexpected error occurred: {str(e)}\")\n\n"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        575,
                        578
                    ],
                    "children": [],
                    "content": "\"Unexpected error occurred: {str(e)}\")\n\n"
                },
                {
                    "type": "FunctionName",
                    "name": "get_agents",
                    "range": [
                        576,
                        585
                    ],
                    "children": [],
                    "content": ")\n\n\nasync def get_agents(\npage"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        577,
                        679
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "page",
                            "range": [
                                579,
                                583
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        580,
                                        583
                                    ],
                                    "children": [],
                                    "content": "async def get_agents("
                                }
                            ],
                            "content": "\nasync def get_agents("
                        },
                        {
                            "type": "Parameter",
                            "name": "page_size",
                            "range": [
                                586,
                                590
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        587,
                                        590
                                    ],
                                    "children": [],
                                    "content": "int=1,"
                                }
                            ],
                            "content": ":int=1,"
                        },
                        {
                            "type": "Parameter",
                            "name": "name",
                            "range": [
                                593,
                                599
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str | None",
                                    "range": [
                                        594,
                                        599
                                    ],
                                    "children": [],
                                    "content": "int=10,\nname"
                                }
                            ],
                            "content": ":int=10,\nname"
                        },
                        {
                            "type": "Parameter",
                            "name": "keyword",
                            "range": [
                                602,
                                608
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str | None",
                                    "range": [
                                        603,
                                        608
                                    ],
                                    "children": [],
                                    "content": "None=None,\nkeyword"
                                }
                            ],
                            "content": "|None=None,\nkeyword"
                        },
                        {
                            "type": "Parameter",
                            "name": "category",
                            "range": [
                                611,
                                617
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str | None",
                                    "range": [
                                        612,
                                        617
                                    ],
                                    "children": [],
                                    "content": "None=None,\ncategory"
                                }
                            ],
                            "content": "|None=None,\ncategory"
                        },
                        {
                            "type": "Parameter",
                            "name": "description",
                            "range": [
                                620,
                                626
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str | None",
                                    "range": [
                                        621,
                                        626
                                    ],
                                    "children": [],
                                    "content": "None=None,\ndescription"
                                }
                            ],
                            "content": "|None=None,\ndescription"
                        },
                        {
                            "type": "Parameter",
                            "name": "description_threshold",
                            "range": [
                                629,
                                633
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        630,
                                        633
                                    ],
                                    "children": [],
                                    "content": "None=None,"
                                }
                            ],
                            "content": "|None=None,"
                        },
                        {
                            "type": "Parameter",
                            "name": "submission_status",
                            "range": [
                                636,
                                651
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "prisma.enums.SubmissionStatus",
                                    "range": [
                                        637,
                                        651
                                    ],
                                    "children": [],
                                    "content": "int=60,\nsubmission_status:prisma.enums.SubmissionStatus=prisma."
                                }
                            ],
                            "content": ":int=60,\nsubmission_status:prisma.enums.SubmissionStatus=prisma."
                        },
                        {
                            "type": "Parameter",
                            "name": "sort_by",
                            "range": [
                                653,
                                657
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        654,
                                        657
                                    ],
                                    "children": [],
                                    "content": "SubmissionStatus.APPROVED,"
                                }
                            ],
                            "content": ".SubmissionStatus.APPROVED,"
                        },
                        {
                            "type": "Parameter",
                            "name": "sort_order",
                            "range": [
                                660,
                                676
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "typing.Literal[\"desc\"] | typing.Literal[\"asc\"]",
                                    "range": [
                                        661,
                                        676
                                    ],
                                    "children": [],
                                    "content": "str=\"createdAt\",\nsort_order:typing.Literal[\"desc\"]|typing."
                                }
                            ],
                            "content": ":str=\"createdAt\",\nsort_order:typing.Literal[\"desc\"]|typing."
                        }
                    ],
                    "content": "\n\n\nasync def get_agents(\npage:int=1,\npage_size:int=10,\nname:str|None=None,\nkeyword:str|None=None,\ncategory:str|None=None,\ndescription:str|None=None,\ndescription_threshold:int=60,\nsubmission_status:prisma.enums.SubmissionStatus=prisma.enums.SubmissionStatus.APPROVED,\nsort_by:str=\"createdAt\",\nsort_order:typing.Literal[\"desc\"]|typing.Literal[\"asc\""
                },
                {
                    "type": "ReturnTypeAnnotation",
                    "name": "return_type",
                    "range": [
                        680,
                        681
                    ],
                    "children": [],
                    "content": "]="
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        682,
                        1069
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                682,
                                691
                            ],
                            "children": [],
                            "content": "\"desc\",\n):\n\"\"\" \\n     Retrieve a list of agents from the database based on the provided filters and pagination parameters. \\n  \\n     Args: \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n         name (str, optional): Filter agents by name. Defaults to None. \\n         keyword (str, optional): Filter agents by keyword. Defaults to None. \\n         category (str, optional): Filter agents by category. Defaults to None. \\n         description (str, optional): Filter agents by description. Defaults to None. \\n         description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60. \\n         sort_by (str, optional): The field to sort the agents by. Defaults to \" createdAt \". \\n         sort_order (str, optional): The sort order (\""
                        },
                        {
                            "type": "TryStatement",
                            "name": "try_statement",
                            "range": [
                                694,
                                1069
                            ],
                            "children": [
                                {
                                    "type": "TryBlock",
                                    "name": "try_block",
                                    "range": [
                                        694,
                                        1017
                                    ],
                                    "children": [
                                        {
                                            "type": "Comment",
                                            "name": "Define the base query",
                                            "range": [
                                                697,
                                                702
                                            ],
                                            "children": [],
                                            "content": "\". \\n  \\n     Returns: \\n         dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n"
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "query",
                                            "range": [
                                                703,
                                                706
                                            ],
                                            "children": [],
                                            "content": "#Define the base"
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "Add optional filters",
                                            "range": [
                                                709,
                                                713
                                            ],
                                            "children": [],
                                            "content": "query={}\n"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_name",
                                            "range": [
                                                714,
                                                732
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "name",
                                                    "range": [
                                                        715,
                                                        716
                                                    ],
                                                    "children": [],
                                                    "content": "#Add"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "block",
                                                    "range": [
                                                        717,
                                                        732
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "query[\"name\"]",
                                                            "range": [
                                                                718,
                                                                731
                                                            ],
                                                            "children": [],
                                                            "content": "filters\nif name:\nquery[\"name\"]={\"contains\":"
                                                        }
                                                    ],
                                                    "content": "optional filters\nif name:\nquery[\"name\"]={\"contains\":name"
                                                }
                                            ],
                                            "content": "\n#Add optional filters\nif name:\nquery[\"name\"]={\"contains\":name"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_keyword",
                                            "range": [
                                                733,
                                                747
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "keyword",
                                                    "range": [
                                                        734,
                                                        735
                                                    ],
                                                    "children": [],
                                                    "content": "\"mode\":"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "block",
                                                    "range": [
                                                        736,
                                                        747
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "query[\"keywords\"]",
                                                            "range": [
                                                                737,
                                                                746
                                                            ],
                                                            "children": [],
                                                            "content": "}\nif keyword:\nquery[\"keywords\"]"
                                                        }
                                                    ],
                                                    "content": "\"insensitive\"}\nif keyword:\nquery[\"keywords\"]="
                                                }
                                            ],
                                            "content": ",\"mode\":\"insensitive\"}\nif keyword:\nquery[\"keywords\"]="
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_category",
                                            "range": [
                                                748,
                                                762
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "category",
                                                    "range": [
                                                        749,
                                                        750
                                                    ],
                                                    "children": [],
                                                    "content": "\"has\":"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "block",
                                                    "range": [
                                                        751,
                                                        762
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "query[\"categories\"]",
                                                            "range": [
                                                                752,
                                                                761
                                                            ],
                                                            "children": [],
                                                            "content": "}\nif category:\nquery[\"categories\"]"
                                                        }
                                                    ],
                                                    "content": "keyword}\nif category:\nquery[\"categories\"]="
                                                }
                                            ],
                                            "content": "{\"has\":keyword}\nif category:\nquery[\"categories\"]="
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "query[\"submissionStatus\"]",
                                            "range": [
                                                763,
                                                770
                                            ],
                                            "children": [],
                                            "content": "{\"has\":category}\n\nquery"
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "Define sorting",
                                            "range": [
                                                772,
                                                775
                                            ],
                                            "children": [],
                                            "content": "\"submissionStatus\"]=submission_status"
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "order",
                                            "range": [
                                                776,
                                                783
                                            ],
                                            "children": [],
                                            "content": "\n\n#Define sorting\norder="
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "Calculate pagination",
                                            "range": [
                                                785,
                                                788
                                            ],
                                            "children": [],
                                            "content": "sort_by:sort_order}"
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "skip",
                                            "range": [
                                                789,
                                                798
                                            ],
                                            "children": [],
                                            "content": "\n\n#Calculate pagination\nskip=(page"
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "Execute the query",
                                            "range": [
                                                800,
                                                804
                                            ],
                                            "children": [],
                                            "content": "1)*page_size\n"
                                        },
                                        {
                                            "type": "TryStatement",
                                            "name": "try_execute_query",
                                            "range": [
                                                805,
                                                870
                                            ],
                                            "children": [
                                                {
                                                    "type": "TryBlock",
                                                    "name": "try_block",
                                                    "range": [
                                                        805,
                                                        853
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "VariableDecl",
                                                            "name": "agents",
                                                            "range": [
                                                                808,
                                                                852
                                                            ],
                                                            "children": [],
                                                            "content": "the query\ntry:\nagents=await prisma.models.Agents.prisma().find_many(\nwhere=query,#type:ignore\norder=order,#type:ignore\nskip=skip,\n"
                                                        }
                                                    ],
                                                    "content": "\n#Execute the query\ntry:\nagents=await prisma.models.Agents.prisma().find_many(\nwhere=query,#type:ignore\norder=order,#type:ignore\nskip=skip,\ntake"
                                                },
                                                {
                                                    "type": "CatchClause",
                                                    "name": "catch_prisma_error",
                                                    "range": [
                                                        854,
                                                        870
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Parameter",
                                                            "name": "e",
                                                            "range": [
                                                                860,
                                                                861
                                                            ],
                                                            "children": [],
                                                            "content": "except prisma"
                                                        },
                                                        {
                                                            "type": "Block",
                                                            "name": "block",
                                                            "range": [
                                                                862,
                                                                870
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ThrowStatement",
                                                                    "name": "throw_AgentQueryError",
                                                                    "range": [
                                                                        864,
                                                                        869
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".PrismaError as e:\n"
                                                                }
                                                            ],
                                                            "content": ".errors.PrismaError as e:\nraise"
                                                        }
                                                    ],
                                                    "content": "=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise"
                                                }
                                            ],
                                            "content": "\n#Execute the query\ntry:\nagents=await prisma.models.Agents.prisma().find_many(\nwhere=query,#type:ignore\norder=order,#type:ignore\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise"
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "Apply fuzzy search on description if provided",
                                            "range": [
                                                872,
                                                880
                                            ],
                                            "children": [],
                                            "content": "(f \"Database query failed: {str(e)}\")\n\n#Apply fuzzy"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_description",
                                            "range": [
                                                881,
                                                960
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "description",
                                                    "range": [
                                                        882,
                                                        883
                                                    ],
                                                    "children": [],
                                                    "content": "on description"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "block",
                                                    "range": [
                                                        884,
                                                        960
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "TryStatement",
                                                            "name": "try_fuzzy_search",
                                                            "range": [
                                                                885,
                                                                959
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "TryBlock",
                                                                    "name": "try_block",
                                                                    "range": [
                                                                        885,
                                                                        947
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "VariableDecl",
                                                                            "name": "filtered_agents",
                                                                            "range": [
                                                                                888,
                                                                                892
                                                                            ],
                                                                            "children": [],
                                                                            "content": "description:\ntry:"
                                                                        },
                                                                        {
                                                                            "type": "ForStatement",
                                                                            "name": "for_agent_in_agents",
                                                                            "range": [
                                                                                893,
                                                                                943
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Initialization",
                                                                                    "name": "agent",
                                                                                    "range": [
                                                                                        894,
                                                                                        895
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "filtered_agents="
                                                                                },
                                                                                {
                                                                                    "type": "Condition",
                                                                                    "name": "agents",
                                                                                    "range": [
                                                                                        896,
                                                                                        897
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "[]"
                                                                                },
                                                                                {
                                                                                    "type": "Block",
                                                                                    "name": "block",
                                                                                    "range": [
                                                                                        898,
                                                                                        943
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "IfStatement",
                                                                                            "name": "if_fuzzy_match",
                                                                                            "range": [
                                                                                                899,
                                                                                                935
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Condition",
                                                                                                    "name": "fuzzy_match",
                                                                                                    "range": [
                                                                                                        900,
                                                                                                        933
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": "agent in agents:\nif(\nagent.description\nand fuzzywuzzy.fuzz.partial_ratio(\ndescription.lower(),agent.description.lower()\n"
                                                                                                },
                                                                                                {
                                                                                                    "type": "Block",
                                                                                                    "name": "block",
                                                                                                    "range": [
                                                                                                        936,
                                                                                                        943
                                                                                                    ],
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "ExpressionStatement",
                                                                                                            "name": "filtered_agents.append(agent)",
                                                                                                            "range": [
                                                                                                                937,
                                                                                                                942
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": "=description_threshold\n):\n"
                                                                                                        }
                                                                                                    ],
                                                                                                    "content": ">=description_threshold\n):\nfiltered_agents"
                                                                                                }
                                                                                            ],
                                                                                            "content": "for agent in agents:\nif(\nagent.description\nand fuzzywuzzy.fuzz.partial_ratio(\ndescription.lower(),agent.description.lower()\n)\n"
                                                                                        }
                                                                                    ],
                                                                                    "content": "\nfor agent in agents:\nif(\nagent.description\nand fuzzywuzzy.fuzz.partial_ratio(\ndescription.lower(),agent.description.lower()\n)\n>=description_threshold\n):\nfiltered_agents"
                                                                                }
                                                                            ],
                                                                            "content": "\nfiltered_agents=[]\nfor agent in agents:\nif(\nagent.description\nand fuzzywuzzy.fuzz.partial_ratio(\ndescription.lower(),agent.description.lower()\n)\n>=description_threshold\n):\nfiltered_agents"
                                                                        },
                                                                        {
                                                                            "type": "AssignmentExpression",
                                                                            "name": "agents",
                                                                            "range": [
                                                                                944,
                                                                                946
                                                                            ],
                                                                            "children": [],
                                                                            "content": ".append("
                                                                        }
                                                                    ],
                                                                    "content": "provided\nif description:\ntry:\nfiltered_agents=[]\nfor agent in agents:\nif(\nagent.description\nand fuzzywuzzy.fuzz.partial_ratio(\ndescription.lower(),agent.description.lower()\n)\n>=description_threshold\n):\nfiltered_agents.append(agent"
                                                                },
                                                                {
                                                                    "type": "CatchClause",
                                                                    "name": "catch_AttributeError",
                                                                    "range": [
                                                                        949,
                                                                        959
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Parameter",
                                                                            "name": "e",
                                                                            "range": [
                                                                                950,
                                                                                951
                                                                            ],
                                                                            "children": [],
                                                                            "content": "agents="
                                                                        },
                                                                        {
                                                                            "type": "Block",
                                                                            "name": "block",
                                                                            "range": [
                                                                                952,
                                                                                959
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ThrowStatement",
                                                                                    "name": "throw_AgentQueryError",
                                                                                    "range": [
                                                                                        954,
                                                                                        958
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "except AttributeError as e:"
                                                                                }
                                                                            ],
                                                                            "content": "filtered_agents\nexcept AttributeError as e:\n"
                                                                        }
                                                                    ],
                                                                    "content": "\nagents=filtered_agents\nexcept AttributeError as e:\n"
                                                                }
                                                            ],
                                                            "content": "provided\nif description:\ntry:\nfiltered_agents=[]\nfor agent in agents:\nif(\nagent.description\nand fuzzywuzzy.fuzz.partial_ratio(\ndescription.lower(),agent.description.lower()\n)\n>=description_threshold\n):\nfiltered_agents.append(agent)\nagents=filtered_agents\nexcept AttributeError as e:\n"
                                                        }
                                                    ],
                                                    "content": "if provided\nif description:\ntry:\nfiltered_agents=[]\nfor agent in agents:\nif(\nagent.description\nand fuzzywuzzy.fuzz.partial_ratio(\ndescription.lower(),agent.description.lower()\n)\n>=description_threshold\n):\nfiltered_agents.append(agent)\nagents=filtered_agents\nexcept AttributeError as e:\nraise"
                                                }
                                            ],
                                            "content": "search on description if provided\nif description:\ntry:\nfiltered_agents=[]\nfor agent in agents:\nif(\nagent.description\nand fuzzywuzzy.fuzz.partial_ratio(\ndescription.lower(),agent.description.lower()\n)\n>=description_threshold\n):\nfiltered_agents.append(agent)\nagents=filtered_agents\nexcept AttributeError as e:\nraise"
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "Get total count for pagination info",
                                            "range": [
                                                962,
                                                969
                                            ],
                                            "children": [],
                                            "content": "(f \"Error during fuzzy search: {str(e)}\")\n\n#Get"
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "total_count",
                                            "range": [
                                                970,
                                                976
                                            ],
                                            "children": [],
                                            "content": "total count for pagination info\ntotal_count"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                978,
                                                1015
                                            ],
                                            "children": [
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "return_object",
                                                    "range": [
                                                        979,
                                                        1015
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "agents",
                                                            "range": [
                                                                981,
                                                                983
                                                            ],
                                                            "children": [],
                                                            "content": ")\n\n"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "total_count",
                                                            "range": [
                                                                986,
                                                                988
                                                            ],
                                                            "children": [],
                                                            "content": "\n\"agents\":"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "page",
                                                            "range": [
                                                                991,
                                                                993
                                                            ],
                                                            "children": [],
                                                            "content": "\n\"total_count\":"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "page_size",
                                                            "range": [
                                                                996,
                                                                998
                                                            ],
                                                            "children": [],
                                                            "content": "\n\"page\":"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "total_pages",
                                                            "range": [
                                                                1001,
                                                                1013
                                                            ],
                                                            "children": [],
                                                            "content": "\n\"page_size\":page_size,\n\"total_pages\":(total_count+page_size-"
                                                        }
                                                    ],
                                                    "content": "(agents)\n\nreturn{\n\"agents\":agents,\n\"total_count\":total_count,\n\"page\":page,\n\"page_size\":page_size,\n\"total_pages\":(total_count+page_size-1)"
                                                }
                                            ],
                                            "content": "len(agents)\n\nreturn{\n\"agents\":agents,\n\"total_count\":total_count,\n\"page\":page,\n\"page_size\":page_size,\n\"total_pages\":(total_count+page_size-1)"
                                        }
                                    ],
                                    "content": "desc \"). Defaults to \" desc \". \\n  \\n     Returns: \\n         dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Define the base query\nquery={}\n\n#Add optional filters\nif name:\nquery[\"name\"]={\"contains\":name,\"mode\":\"insensitive\"}\nif keyword:\nquery[\"keywords\"]={\"has\":keyword}\nif category:\nquery[\"categories\"]={\"has\":category}\n\nquery[\"submissionStatus\"]=submission_status\n\n#Define sorting\norder={sort_by:sort_order}\n\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\nagents=await prisma.models.Agents.prisma().find_many(\nwhere=query,#type:ignore\norder=order,#type:ignore\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\n#Apply fuzzy search on description if provided\nif description:\ntry:\nfiltered_agents=[]\nfor agent in agents:\nif(\nagent.description\nand fuzzywuzzy.fuzz.partial_ratio(\ndescription.lower(),agent.description.lower()\n)\n>=description_threshold\n):\nfiltered_agents.append(agent)\nagents=filtered_agents\nexcept AttributeError as e:\nraise AgentQueryError(f \"Error during fuzzy search: {str(e)}\")\n\n#Get total count for pagination info\ntotal_count=len(agents)\n\nreturn{\n\"agents\":agents,\n\"total_count\":total_count,\n\"page\":page,\n\"page_size\":page_size,\n\"total_pages\":(total_count+page_size-1)//"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "catch_AgentQueryError",
                                    "range": [
                                        1018,
                                        1036
                                    ],
                                    "children": [
                                        {
                                            "type": "Parameter",
                                            "name": "e",
                                            "range": [
                                                1020,
                                                1021
                                            ],
                                            "children": [],
                                            "content": "\n}"
                                        },
                                        {
                                            "type": "Block",
                                            "name": "block",
                                            "range": [
                                                1022,
                                                1036
                                            ],
                                            "children": [
                                                {
                                                    "type": "Comment",
                                                    "name": "Log the error or handle it as needed",
                                                    "range": [
                                                        1024,
                                                        1033
                                                    ],
                                                    "children": [],
                                                    "content": "except AgentQueryError as e:\n#Log the error"
                                                },
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "throw_e",
                                                    "range": [
                                                        1034,
                                                        1035
                                                    ],
                                                    "children": [],
                                                    "content": "or handle"
                                                }
                                            ],
                                            "content": "\n\nexcept AgentQueryError as e:\n#Log the error or handle it"
                                        }
                                    ],
                                    "content": "page_size,\n}\n\nexcept AgentQueryError as e:\n#Log the error or handle it"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "catch_ValueError",
                                    "range": [
                                        1037,
                                        1049
                                    ],
                                    "children": [
                                        {
                                            "type": "Parameter",
                                            "name": "e",
                                            "range": [
                                                1039,
                                                1040
                                            ],
                                            "children": [],
                                            "content": "\nraise"
                                        },
                                        {
                                            "type": "Block",
                                            "name": "block",
                                            "range": [
                                                1041,
                                                1049
                                            ],
                                            "children": [
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "throw_AgentQueryError",
                                                    "range": [
                                                        1043,
                                                        1048
                                                    ],
                                                    "children": [],
                                                    "content": "except ValueError as e:\n"
                                                }
                                            ],
                                            "content": "e\nexcept ValueError as e:\nraise"
                                        }
                                    ],
                                    "content": "as needed\nraise e\nexcept ValueError as e:\nraise"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "catch_Exception",
                                    "range": [
                                        1050,
                                        1069
                                    ],
                                    "children": [
                                        {
                                            "type": "Parameter",
                                            "name": "e",
                                            "range": [
                                                1052,
                                                1053
                                            ],
                                            "children": [],
                                            "content": "f \"Invalid input parameter: {str(e)}\""
                                        },
                                        {
                                            "type": "Block",
                                            "name": "block",
                                            "range": [
                                                1054,
                                                1069
                                            ],
                                            "children": [
                                                {
                                                    "type": "Comment",
                                                    "name": "Catch any other unexpected exceptions",
                                                    "range": [
                                                        1056,
                                                        1062
                                                    ],
                                                    "children": [],
                                                    "content": "except Exception as e:\n#"
                                                },
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "throw_AgentQueryError",
                                                    "range": [
                                                        1063,
                                                        1068
                                                    ],
                                                    "children": [],
                                                    "content": "Catch any other unexpected exceptions\n"
                                                }
                                            ],
                                            "content": ")\nexcept Exception as e:\n#Catch any other unexpected exceptions\nraise"
                                        }
                                    ],
                                    "content": "AgentQueryError(f \"Invalid input parameter: {str(e)}\")\nexcept Exception as e:\n#Catch any other unexpected exceptions\nraise"
                                }
                            ],
                            "content": "desc \"). Defaults to \" desc \". \\n  \\n     Returns: \\n         dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Define the base query\nquery={}\n\n#Add optional filters\nif name:\nquery[\"name\"]={\"contains\":name,\"mode\":\"insensitive\"}\nif keyword:\nquery[\"keywords\"]={\"has\":keyword}\nif category:\nquery[\"categories\"]={\"has\":category}\n\nquery[\"submissionStatus\"]=submission_status\n\n#Define sorting\norder={sort_by:sort_order}\n\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\nagents=await prisma.models.Agents.prisma().find_many(\nwhere=query,#type:ignore\norder=order,#type:ignore\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\n#Apply fuzzy search on description if provided\nif description:\ntry:\nfiltered_agents=[]\nfor agent in agents:\nif(\nagent.description\nand fuzzywuzzy.fuzz.partial_ratio(\ndescription.lower(),agent.description.lower()\n)\n>=description_threshold\n):\nfiltered_agents.append(agent)\nagents=filtered_agents\nexcept AttributeError as e:\nraise AgentQueryError(f \"Error during fuzzy search: {str(e)}\")\n\n#Get total count for pagination info\ntotal_count=len(agents)\n\nreturn{\n\"agents\":agents,\n\"total_count\":total_count,\n\"page\":page,\n\"page_size\":page_size,\n\"total_pages\":(total_count+page_size-1)//page_size,\n}\n\nexcept AgentQueryError as e:\n#Log the error or handle it as needed\nraise e\nexcept ValueError as e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")\nexcept Exception as e:\n#Catch any other unexpected exceptions\nraise"
                        }
                    ],
                    "content": "\"desc\",\n):\n\"\"\" \\n     Retrieve a list of agents from the database based on the provided filters and pagination parameters. \\n  \\n     Args: \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n         name (str, optional): Filter agents by name. Defaults to None. \\n         keyword (str, optional): Filter agents by keyword. Defaults to None. \\n         category (str, optional): Filter agents by category. Defaults to None. \\n         description (str, optional): Filter agents by description. Defaults to None. \\n         description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60. \\n         sort_by (str, optional): The field to sort the agents by. Defaults to \" createdAt \". \\n         sort_order (str, optional): The sort order (\" asc \" or \" desc \"). Defaults to \" desc \". \\n  \\n     Returns: \\n         dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Define the base query\nquery={}\n\n#Add optional filters\nif name:\nquery[\"name\"]={\"contains\":name,\"mode\":\"insensitive\"}\nif keyword:\nquery[\"keywords\"]={\"has\":keyword}\nif category:\nquery[\"categories\"]={\"has\":category}\n\nquery[\"submissionStatus\"]=submission_status\n\n#Define sorting\norder={sort_by:sort_order}\n\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\nagents=await prisma.models.Agents.prisma().find_many(\nwhere=query,#type:ignore\norder=order,#type:ignore\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\n#Apply fuzzy search on description if provided\nif description:\ntry:\nfiltered_agents=[]\nfor agent in agents:\nif(\nagent.description\nand fuzzywuzzy.fuzz.partial_ratio(\ndescription.lower(),agent.description.lower()\n)\n>=description_threshold\n):\nfiltered_agents.append(agent)\nagents=filtered_agents\nexcept AttributeError as e:\nraise AgentQueryError(f \"Error during fuzzy search: {str(e)}\")\n\n#Get total count for pagination info\ntotal_count=len(agents)\n\nreturn{\n\"agents\":agents,\n\"total_count\":total_count,\n\"page\":page,\n\"page_size\":page_size,\n\"total_pages\":(total_count+page_size-1)//page_size,\n}\n\nexcept AgentQueryError as e:\n#Log the error or handle it as needed\nraise e\nexcept ValueError as e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")\nexcept Exception as e:\n#Catch any other unexpected exceptions\nraise"
                }
            ],
            "content": "f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agents(\npage:int=1,\npage_size:int=10,\nname:str|None=None,\nkeyword:str|None=None,\ncategory:str|None=None,\ndescription:str|None=None,\ndescription_threshold:int=60,\nsubmission_status:prisma.enums.SubmissionStatus=prisma.enums.SubmissionStatus.APPROVED,\nsort_by:str=\"createdAt\",\nsort_order:typing.Literal[\"desc\"]|typing.Literal[\"asc\"]=\"desc\",\n):\n\"\"\" \\n     Retrieve a list of agents from the database based on the provided filters and pagination parameters. \\n  \\n     Args: \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n         name (str, optional): Filter agents by name. Defaults to None. \\n         keyword (str, optional): Filter agents by keyword. Defaults to None. \\n         category (str, optional): Filter agents by category. Defaults to None. \\n         description (str, optional): Filter agents by description. Defaults to None. \\n         description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60. \\n         sort_by (str, optional): The field to sort the agents by. Defaults to \" createdAt \". \\n         sort_order (str, optional): The sort order (\" asc \" or \" desc \"). Defaults to \" desc \". \\n  \\n     Returns: \\n         dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Define the base query\nquery={}\n\n#Add optional filters\nif name:\nquery[\"name\"]={\"contains\":name,\"mode\":\"insensitive\"}\nif keyword:\nquery[\"keywords\"]={\"has\":keyword}\nif category:\nquery[\"categories\"]={\"has\":category}\n\nquery[\"submissionStatus\"]=submission_status\n\n#Define sorting\norder={sort_by:sort_order}\n\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\nagents=await prisma.models.Agents.prisma().find_many(\nwhere=query,#type:ignore\norder=order,#type:ignore\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\n#Apply fuzzy search on description if provided\nif description:\ntry:\nfiltered_agents=[]\nfor agent in agents:\nif(\nagent.description\nand fuzzywuzzy.fuzz.partial_ratio(\ndescription.lower(),agent.description.lower()\n)\n>=description_threshold\n):\nfiltered_agents.append(agent)\nagents=filtered_agents\nexcept AttributeError as e:\nraise AgentQueryError(f \"Error during fuzzy search: {str(e)}\")\n\n#Get total count for pagination info\ntotal_count=len(agents)\n\nreturn{\n\"agents\":agents,\n\"total_count\":total_count,\n\"page\":page,\n\"page_size\":page_size,\n\"total_pages\":(total_count+page_size-1)//page_size,\n}\n\nexcept AgentQueryError as e:\n#Log the error or handle it as needed\nraise e\nexcept ValueError as e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")\nexcept Exception as e:\n#Catch any other unexpected exceptions\nraise"
        },
        {
            "type": "FunctionDecl",
            "name": "get_agent_details",
            "range": [
                1070,
                1192
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        1070,
                        1070
                    ],
                    "children": [],
                    "content": "AgentQueryError"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        1071,
                        1071
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Identifier",
                    "name": "get_agent_details",
                    "range": [
                        1072,
                        1072
                    ],
                    "children": [],
                    "content": "f"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        1073,
                        1085
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "agent_id",
                            "range": [
                                1074,
                                1076
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "agent_id",
                                    "range": [
                                        1074,
                                        1074
                                    ],
                                    "children": [],
                                    "content": ")"
                                },
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        1076,
                                        1076
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": ")\n\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "version",
                            "range": [
                                1078,
                                1084
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "version",
                                    "range": [
                                        1078,
                                        1078
                                    ],
                                    "children": [],
                                    "content": "async"
                                },
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int | None",
                                    "range": [
                                        1080,
                                        1082
                                    ],
                                    "children": [],
                                    "content": "get_agent_details(agent_id"
                                },
                                {
                                    "type": "Literal",
                                    "name": "None",
                                    "range": [
                                        1084,
                                        1084
                                    ],
                                    "children": [],
                                    "content": "str"
                                }
                            ],
                            "content": "async def get_agent_details(agent_id:str"
                        }
                    ],
                    "content": "\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_details(agent_id:str,"
                },
                {
                    "type": "ReturnType",
                    "name": "dict",
                    "range": [
                        1086,
                        1086
                    ],
                    "children": [],
                    "content": "version"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        1087,
                        1192
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                1088,
                                1090
                            ],
                            "children": [],
                            "content": "int|None"
                        },
                        {
                            "type": "TryStatement",
                            "name": "try",
                            "range": [
                                1092,
                                1192
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "try_block",
                                    "range": [
                                        1093,
                                        1162
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "query",
                                            "range": [
                                                1095,
                                                1101
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "query",
                                                    "range": [
                                                        1095,
                                                        1095
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "dictionary",
                                                    "range": [
                                                        1097,
                                                        1101
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "id",
                                                            "range": [
                                                                1098,
                                                                1100
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "id",
                                                                    "range": [
                                                                        1098,
                                                                        1098
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\"\""
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "agent_id",
                                                                    "range": [
                                                                        1100,
                                                                        1100
                                                                    ],
                                                                    "children": [],
                                                                    "content": "try"
                                                                }
                                                            ],
                                                            "content": "\"\"\ntry"
                                                        }
                                                    ],
                                                    "content": "\" \\n     Retrieve agent details from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         version (int | None, optional): The version of the agent. Defaults to None. \\n  \\n     Returns: \\n         dict: The agent details. \\n  \\n     Raises: \\n         AgentQueryError: If the agent is not found or if there is an error querying the database. \\n     \"\"\"\ntry:"
                                                }
                                            ],
                                            "content": "\n\"\"\" \\n     Retrieve agent details from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         version (int | None, optional): The version of the agent. Defaults to None. \\n  \\n     Returns: \\n         dict: The agent details. \\n  \\n     Raises: \\n         AgentQueryError: If the agent is not found or if there is an error querying the database. \\n     \"\"\"\ntry:"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if",
                                            "range": [
                                                1103,
                                                1120
                                            ],
                                            "children": [
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "version is not None",
                                                    "range": [
                                                        1104,
                                                        1107
                                                    ],
                                                    "children": [],
                                                    "content": "={\"id\":"
                                                },
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "if_block",
                                                    "range": [
                                                        1108,
                                                        1120
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "query[\"version\"]",
                                                            "range": [
                                                                1110,
                                                                1115
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "query",
                                                                    "range": [
                                                                        1110,
                                                                        1110
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\n"
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "version",
                                                                    "range": [
                                                                        1112,
                                                                        1112
                                                                    ],
                                                                    "children": [],
                                                                    "content": "version"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "version",
                                                                    "range": [
                                                                        1115,
                                                                        1115
                                                                    ],
                                                                    "children": [],
                                                                    "content": "None"
                                                                }
                                                            ],
                                                            "content": "\nif version is not None"
                                                        }
                                                    ],
                                                    "content": "agent_id}\nif version is not None:\nquery[\"version\""
                                                }
                                            ],
                                            "content": "query={\"id\":agent_id}\nif version is not None:\nquery[\"version\""
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "agent",
                                            "range": [
                                                1122,
                                                1145
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "agent",
                                                    "range": [
                                                        1122,
                                                        1122
                                                    ],
                                                    "children": [],
                                                    "content": "="
                                                },
                                                {
                                                    "type": "AwaitExpression",
                                                    "name": "await",
                                                    "range": [
                                                        1124,
                                                        1124
                                                    ],
                                                    "children": [],
                                                    "content": "#"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "prisma.models.Agents.prisma().find_first",
                                                    "range": [
                                                        1125,
                                                        1140
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "prisma",
                                                            "range": [
                                                                1125,
                                                                1125
                                                            ],
                                                            "children": [],
                                                            "content": "type"
                                                        },
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "models",
                                                            "range": [
                                                                1127,
                                                                1127
                                                            ],
                                                            "children": [],
                                                            "content": "ignore"
                                                        },
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "Agents",
                                                            "range": [
                                                                1129,
                                                                1129
                                                            ],
                                                            "children": [],
                                                            "content": "\n"
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "prisma",
                                                            "range": [
                                                                1131,
                                                                1133
                                                            ],
                                                            "children": [],
                                                            "content": "=await prisma"
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "find_first",
                                                            "range": [
                                                                1135,
                                                                1140
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "where",
                                                                    "range": [
                                                                        1137,
                                                                        1139
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "query",
                                                                            "range": [
                                                                                1139,
                                                                                1139
                                                                            ],
                                                                            "children": [],
                                                                            "content": "prisma"
                                                                        }
                                                                    ],
                                                                    "content": "Agents.prisma"
                                                                }
                                                            ],
                                                            "content": "models.Agents.prisma("
                                                        }
                                                    ],
                                                    "content": "type:ignore\n\nagent=await prisma.models.Agents.prisma("
                                                }
                                            ],
                                            "content": "=version#type:ignore\n\nagent=await prisma.models.Agents.prisma().find_first(where"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if",
                                            "range": [
                                                1147,
                                                1157
                                            ],
                                            "children": [
                                                {
                                                    "type": "UnaryExpression",
                                                    "name": "not agent",
                                                    "range": [
                                                        1148,
                                                        1149
                                                    ],
                                                    "children": [],
                                                    "content": ")#"
                                                },
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "if_block",
                                                    "range": [
                                                        1150,
                                                        1157
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ThrowStatement",
                                                            "name": "raise",
                                                            "range": [
                                                                1152,
                                                                1156
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "AgentQueryError",
                                                                    "range": [
                                                                        1153,
                                                                        1153
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\n"
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"Agent not found\"",
                                                                    "range": [
                                                                        1155,
                                                                        1155
                                                                    ],
                                                                    "children": [],
                                                                    "content": "if"
                                                                }
                                                            ],
                                                            "content": "ignore\n\nif not"
                                                        }
                                                    ],
                                                    "content": "type:ignore\n\nif not agent"
                                                }
                                            ],
                                            "content": "query)#type:ignore\n\nif not agent"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                1159,
                                                1161
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "agent",
                                                    "range": [
                                                        1160,
                                                        1160
                                                    ],
                                                    "children": [],
                                                    "content": "raise"
                                                }
                                            ],
                                            "content": "\nraise AgentQueryError"
                                        }
                                    ],
                                    "content": "):\n\"\"\" \\n     Retrieve agent details from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         version (int | None, optional): The version of the agent. Defaults to None. \\n  \\n     Returns: \\n         dict: The agent details. \\n  \\n     Raises: \\n         AgentQueryError: If the agent is not found or if there is an error querying the database. \\n     \"\"\"\ntry:\nquery={\"id\":agent_id}\nif version is not None:\nquery[\"version\"]=version#type:ignore\n\nagent=await prisma.models.Agents.prisma().find_first(where=query)#type:ignore\n\nif not agent:\nraise AgentQueryError("
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except",
                                    "range": [
                                        1163,
                                        1179
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "PrismaError",
                                            "range": [
                                                1168,
                                                1168
                                            ],
                                            "children": [],
                                            "content": "agent"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "e",
                                            "range": [
                                                1170,
                                                1170
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "BlockStatement",
                                            "name": "except_block",
                                            "range": [
                                                1171,
                                                1179
                                            ],
                                            "children": [
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "raise",
                                                    "range": [
                                                        1173,
                                                        1178
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "AgentQueryError",
                                                            "range": [
                                                                1174,
                                                                1174
                                                            ],
                                                            "children": [],
                                                            "content": "errors"
                                                        },
                                                        {
                                                            "type": "TemplateLiteral",
                                                            "name": "f\"Database query failed: {str(e)}\"",
                                                            "range": [
                                                                1176,
                                                                1177
                                                            ],
                                                            "children": [],
                                                            "content": "PrismaError as"
                                                        }
                                                    ],
                                                    "content": ".errors.PrismaError as e"
                                                }
                                            ],
                                            "content": "except prisma.errors.PrismaError as e:"
                                        }
                                    ],
                                    "content": "\"Agent not found\")\n\nreturn agent\n\nexcept prisma.errors.PrismaError as e:"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except",
                                    "range": [
                                        1180,
                                        1192
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "Exception",
                                            "range": [
                                                1181,
                                                1181
                                            ],
                                            "children": [],
                                            "content": "raise"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "e",
                                            "range": [
                                                1183,
                                                1183
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "BlockStatement",
                                            "name": "except_block",
                                            "range": [
                                                1184,
                                                1192
                                            ],
                                            "children": [
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "raise",
                                                    "range": [
                                                        1186,
                                                        1191
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "AgentQueryError",
                                                            "range": [
                                                                1187,
                                                                1187
                                                            ],
                                                            "children": [],
                                                            "content": "\n"
                                                        },
                                                        {
                                                            "type": "TemplateLiteral",
                                                            "name": "f\"Unexpected error occurred: {str(e)}\"",
                                                            "range": [
                                                                1189,
                                                                1190
                                                            ],
                                                            "children": [],
                                                            "content": "Exception as"
                                                        }
                                                    ],
                                                    "content": ")\nexcept Exception as e"
                                                }
                                            ],
                                            "content": "f \"Database query failed: {str(e)}\")\nexcept Exception as e:"
                                        }
                                    ],
                                    "content": "\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:"
                                }
                            ],
                            "content": "None):\n\"\"\" \\n     Retrieve agent details from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         version (int | None, optional): The version of the agent. Defaults to None. \\n  \\n     Returns: \\n         dict: The agent details. \\n  \\n     Raises: \\n         AgentQueryError: If the agent is not found or if there is an error querying the database. \\n     \"\"\"\ntry:\nquery={\"id\":agent_id}\nif version is not None:\nquery[\"version\"]=version#type:ignore\n\nagent=await prisma.models.Agents.prisma().find_first(where=query)#type:ignore\n\nif not agent:\nraise AgentQueryError(\"Agent not found\")\n\nreturn agent\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:"
                        }
                    ],
                    "content": ":int|None=None):\n\"\"\" \\n     Retrieve agent details from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         version (int | None, optional): The version of the agent. Defaults to None. \\n  \\n     Returns: \\n         dict: The agent details. \\n  \\n     Raises: \\n         AgentQueryError: If the agent is not found or if there is an error querying the database. \\n     \"\"\"\ntry:\nquery={\"id\":agent_id}\nif version is not None:\nquery[\"version\"]=version#type:ignore\n\nagent=await prisma.models.Agents.prisma().find_first(where=query)#type:ignore\n\nif not agent:\nraise AgentQueryError(\"Agent not found\")\n\nreturn agent\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:"
                }
            ],
            "content": "AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_details(agent_id:str,version:int|None=None):\n\"\"\" \\n     Retrieve agent details from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         version (int | None, optional): The version of the agent. Defaults to None. \\n  \\n     Returns: \\n         dict: The agent details. \\n  \\n     Raises: \\n         AgentQueryError: If the agent is not found or if there is an error querying the database. \\n     \"\"\"\ntry:\nquery={\"id\":agent_id}\nif version is not None:\nquery[\"version\"]=version#type:ignore\n\nagent=await prisma.models.Agents.prisma().find_first(where=query)#type:ignore\n\nif not agent:\nraise AgentQueryError(\"Agent not found\")\n\nreturn agent\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:"
        },
        {
            "type": "FunctionDecl",
            "name": "search_db",
            "range": [
                1193,
                1602
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "query",
                    "range": [
                        1198,
                        1200
                    ],
                    "children": [],
                    "content": "\"Unexpected error occurred: {str(e)}\")\n"
                },
                {
                    "type": "Parameter",
                    "name": "page",
                    "range": [
                        1203,
                        1207
                    ],
                    "children": [],
                    "content": "async def search_db(\n"
                },
                {
                    "type": "Parameter",
                    "name": "page_size",
                    "range": [
                        1210,
                        1214
                    ],
                    "children": [],
                    "content": "str,\npage:"
                },
                {
                    "type": "Parameter",
                    "name": "categories",
                    "range": [
                        1217,
                        1228
                    ],
                    "children": [],
                    "content": "1,\npage_size:int=10,\ncategories:"
                },
                {
                    "type": "Parameter",
                    "name": "description_threshold",
                    "range": [
                        1231,
                        1235
                    ],
                    "children": [],
                    "content": "List[str]|"
                },
                {
                    "type": "Parameter",
                    "name": "sort_by",
                    "range": [
                        1238,
                        1242
                    ],
                    "children": [],
                    "content": "None,\ndescription_threshold:"
                },
                {
                    "type": "Parameter",
                    "name": "sort_order",
                    "range": [
                        1245,
                        1261
                    ],
                    "children": [],
                    "content": "60,\nsort_by:str=\"rank\",\nsort_order:typing.Literal[\"desc\""
                },
                {
                    "type": "Parameter",
                    "name": "submission_status",
                    "range": [
                        1264,
                        1278
                    ],
                    "children": [],
                    "content": "typing.Literal[\"asc\"]=\"desc\",\nsubmission_status:prisma.enums"
                },
                {
                    "type": "ReturnType",
                    "name": "market.model.ListResponse[market.utils.extension_types.AgentsWithRank]",
                    "range": [
                        1284,
                        1297
                    ],
                    "children": [],
                    "content": "enums.SubmissionStatus.APPROVED,\n)->market.model."
                },
                {
                    "type": "Block",
                    "name": "FunctionBody",
                    "range": [
                        1299,
                        1602
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "name": "Try",
                            "range": [
                                1312,
                                1602
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "TryBlock",
                                    "range": [
                                        1314,
                                        1572
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "name": "offset",
                                            "range": [
                                                1315,
                                                1324
                                            ],
                                            "children": [],
                                            "content": "\" | \"desc \", optional): the sort order. Defaults to \" desc \". \\n  \\n     Raises: \\n         AgentQueryError: Raises an error if the query fails. \\n         AgentQueryError: Raises if an unexpected error occurs. \\n  \\n     Returns: \\n         List[AgentsWithRank]: List of agents matching the search criteria. \\n     \"\"\"\ntry:\n"
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "category_filter",
                                            "range": [
                                                1326,
                                                1329
                                            ],
                                            "children": [],
                                            "content": "=(page-"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "If",
                                            "range": [
                                                1330,
                                                1357
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "IfBlock",
                                                    "range": [
                                                        1333,
                                                        1357
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "VariableDecl",
                                                            "name": "category_conditions",
                                                            "range": [
                                                                1334,
                                                                1343
                                                            ],
                                                            "children": [],
                                                            "content": "\n\ncategory_filter=\"1=1\"\nif categories:\n"
                                                        },
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "category_filter",
                                                            "range": [
                                                                1345,
                                                                1357
                                                            ],
                                                            "children": [],
                                                            "content": "=[f \"'{cat}' = ANY(categories)\" for cat in categories]\ncategory_filter=\"AND (\""
                                                        }
                                                    ],
                                                    "content": "page_size\n\ncategory_filter=\"1=1\"\nif categories:\ncategory_conditions=[f \"'{cat}' = ANY(categories)\" for cat in categories]\ncategory_filter=\"AND (\""
                                                }
                                            ],
                                            "content": "1)*page_size\n\ncategory_filter=\"1=1\"\nif categories:\ncategory_conditions=[f \"'{cat}' = ANY(categories)\" for cat in categories]\ncategory_filter=\"AND (\""
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "Construct the ORDER BY clause based on the sort_by parameter",
                                            "range": [
                                                1359,
                                                1369
                                            ],
                                            "children": [],
                                            "content": "\" OR \".join(category_conditions)+\")\"\n\n#"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "If",
                                            "range": [
                                                1371,
                                                1404
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "IfBlock",
                                                    "range": [
                                                        1380,
                                                        1385
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "VariableDecl",
                                                            "name": "order_by_clause",
                                                            "range": [
                                                                1381,
                                                                1385
                                                            ],
                                                            "children": [],
                                                            "content": "if sort_by in[\"createdAt\""
                                                        }
                                                    ],
                                                    "content": "\nif sort_by in[\"createdAt\""
                                                },
                                                {
                                                    "type": "ElseIfStatement",
                                                    "name": "Elif",
                                                    "range": [
                                                        1386,
                                                        1397
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Block",
                                                            "name": "ElseIfBlock",
                                                            "range": [
                                                                1392,
                                                                1397
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "VariableDecl",
                                                                    "name": "order_by_clause",
                                                                    "range": [
                                                                        1393,
                                                                        1397
                                                                    ],
                                                                    "children": [],
                                                                    "content": "f '\"{sort_by}\" {sort_order.upper()}, rank DESC'\nelif sort_by"
                                                                }
                                                            ],
                                                            "content": "=f '\"{sort_by}\" {sort_order.upper()}, rank DESC'\nelif sort_by"
                                                        }
                                                    ],
                                                    "content": ",\"updatedAt\"]:\norder_by_clause=f '\"{sort_by}\" {sort_order.upper()}, rank DESC'\nelif sort_by"
                                                },
                                                {
                                                    "type": "ElseStatement",
                                                    "name": "Else",
                                                    "range": [
                                                        1398,
                                                        1404
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Block",
                                                            "name": "ElseBlock",
                                                            "range": [
                                                                1400,
                                                                1404
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "VariableDecl",
                                                                    "name": "order_by_clause",
                                                                    "range": [
                                                                        1401,
                                                                        1404
                                                                    ],
                                                                    "children": [],
                                                                    "content": ":\norder_by_clause="
                                                                }
                                                            ],
                                                            "content": "\"name\":\norder_by_clause="
                                                        }
                                                    ],
                                                    "content": "==\"name\":\norder_by_clause="
                                                }
                                            ],
                                            "content": "the ORDER BY clause based on the sort_by parameter\nif sort_by in[\"createdAt\",\"updatedAt\"]:\norder_by_clause=f '\"{sort_by}\" {sort_order.upper()}, rank DESC'\nelif sort_by==\"name\":\norder_by_clause="
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "submission_status_filter",
                                            "range": [
                                                1406,
                                                1414
                                            ],
                                            "children": [],
                                            "content": "\"name {sort_order.upper()}, rank DESC\"\nelse:\norder_by_clause='rank DESC, \"createdAt\" DESC'\n"
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "sql_query",
                                            "range": [
                                                1416,
                                                1432
                                            ],
                                            "children": [],
                                            "content": "submission_status_filter=f\"\"\"\"submissionStatus \" = '{submission_status}'\"\"\"\n\nsql_query=f\"\"\" \\n         WITH query AS ( \\n             SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q  \\n             FROM unnest(to_tsvector('{query}')) \\n         ) \\n         SELECT  \\n             id,  \\n             \" createdAt \",  \\n             \""
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "results",
                                            "range": [
                                                1434,
                                                1465
                                            ],
                                            "children": [],
                                            "content": "\",  \\n             version,  \\n             name,  \\n             LEFT(description, {description_threshold}) AS description,  \\n             author,  \\n             keywords,  \\n             categories,  \\n             graph, \\n             \" submissionStatus \", \\n             \" submissionDate \", \\n             CASE  \\n                 WHEN query.q::text = '' THEN 1.0 \\n                 ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0) \\n             END AS rank \\n         FROM market.\" Agents \", query \\n         WHERE  \\n             (query.q::text = '' OR search @@ query.q) \\n             AND {category_filter}  \\n             AND {submission_status_filter} \\n         ORDER BY {order_by_clause} \\n         LIMIT {page_size} \\n         OFFSET {offset}; \\n         \"\"\"\n\nresults=await prisma.client.get_client().query_raw(\nquery=sql_query,\nmodel=market"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "Return",
                                            "range": [
                                                1528,
                                                1571
                                            ],
                                            "children": [],
                                            "content": "=total_count.count if total_count else0\n\nreturn market.model.ListResponse(\nitems=results,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size"
                                        }
                                    ],
                                    "content": "asc\" | \"desc \", optional): the sort order. Defaults to \" desc \". \\n  \\n     Raises: \\n         AgentQueryError: Raises an error if the query fails. \\n         AgentQueryError: Raises if an unexpected error occurs. \\n  \\n     Returns: \\n         List[AgentsWithRank]: List of agents matching the search criteria. \\n     \"\"\"\ntry:\noffset=(page-1)*page_size\n\ncategory_filter=\"1=1\"\nif categories:\ncategory_conditions=[f \"'{cat}' = ANY(categories)\" for cat in categories]\ncategory_filter=\"AND (\"+\" OR \".join(category_conditions)+\")\"\n\n#Construct the ORDER BY clause based on the sort_by parameter\nif sort_by in[\"createdAt\",\"updatedAt\"]:\norder_by_clause=f '\"{sort_by}\" {sort_order.upper()}, rank DESC'\nelif sort_by==\"name\":\norder_by_clause=f \"name {sort_order.upper()}, rank DESC\"\nelse:\norder_by_clause='rank DESC, \"createdAt\" DESC'\n\nsubmission_status_filter=f\"\"\"\"submissionStatus \" = '{submission_status}'\"\"\"\n\nsql_query=f\"\"\" \\n         WITH query AS ( \\n             SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q  \\n             FROM unnest(to_tsvector('{query}')) \\n         ) \\n         SELECT  \\n             id,  \\n             \" createdAt \",  \\n             \" updatedAt \",  \\n             version,  \\n             name,  \\n             LEFT(description, {description_threshold}) AS description,  \\n             author,  \\n             keywords,  \\n             categories,  \\n             graph, \\n             \" submissionStatus \", \\n             \" submissionDate \", \\n             CASE  \\n                 WHEN query.q::text = '' THEN 1.0 \\n                 ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0) \\n             END AS rank \\n         FROM market.\" Agents \", query \\n         WHERE  \\n             (query.q::text = '' OR search @@ query.q) \\n             AND {category_filter}  \\n             AND {submission_status_filter} \\n         ORDER BY {order_by_clause} \\n         LIMIT {page_size} \\n         OFFSET {offset}; \\n         \"\"\"\n\nresults=await prisma.client.get_client().query_raw(\nquery=sql_query,\nmodel=market.utils.extension_types.AgentsWithRank,\n)\n\nclass CountResponse(pydantic.BaseModel):\ncount:int\n\ncount_query=f\"\"\" \\n         WITH query AS ( \\n             SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q  \\n             FROM unnest(to_tsvector('{query}')) \\n         ) \\n         SELECT COUNT(*) \\n         FROM market.\" Agents \", query \\n         WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter}; \\n         \"\"\"\n\ntotal_count=await prisma.client.get_client().query_first(\nquery=count_query,\nmodel=CountResponse,\n)\ntotal_count=total_count.count if total_count else0\n\nreturn market.model.ListResponse(\nitems=results,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size-"
                                },
                                {
                                    "type": "CatchStatement",
                                    "name": "Except",
                                    "range": [
                                        1573,
                                        1589
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "CatchBlock",
                                            "range": [
                                                1582,
                                                1589
                                            ],
                                            "children": [
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "Raise",
                                                    "range": [
                                                        1583,
                                                        1589
                                                    ],
                                                    "children": [],
                                                    "content": "except prisma.errors.PrismaError as"
                                                }
                                            ],
                                            "content": "\nexcept prisma.errors.PrismaError as"
                                        }
                                    ],
                                    "content": "1)//page_size,\n)\n\nexcept prisma.errors.PrismaError as"
                                },
                                {
                                    "type": "CatchStatement",
                                    "name": "Except",
                                    "range": [
                                        1590,
                                        1602
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "CatchBlock",
                                            "range": [
                                                1595,
                                                1602
                                            ],
                                            "children": [
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "Raise",
                                                    "range": [
                                                        1596,
                                                        1602
                                                    ],
                                                    "children": [],
                                                    "content": "f \"Database query failed: {str(e)}\")\nexcept Exception as"
                                                }
                                            ],
                                            "content": "(f \"Database query failed: {str(e)}\")\nexcept Exception as"
                                        }
                                    ],
                                    "content": "e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as"
                                }
                            ],
                            "content": "rank \". \\n         sort_order (\" asc\" | \"desc \", optional): the sort order. Defaults to \" desc \". \\n  \\n     Raises: \\n         AgentQueryError: Raises an error if the query fails. \\n         AgentQueryError: Raises if an unexpected error occurs. \\n  \\n     Returns: \\n         List[AgentsWithRank]: List of agents matching the search criteria. \\n     \"\"\"\ntry:\noffset=(page-1)*page_size\n\ncategory_filter=\"1=1\"\nif categories:\ncategory_conditions=[f \"'{cat}' = ANY(categories)\" for cat in categories]\ncategory_filter=\"AND (\"+\" OR \".join(category_conditions)+\")\"\n\n#Construct the ORDER BY clause based on the sort_by parameter\nif sort_by in[\"createdAt\",\"updatedAt\"]:\norder_by_clause=f '\"{sort_by}\" {sort_order.upper()}, rank DESC'\nelif sort_by==\"name\":\norder_by_clause=f \"name {sort_order.upper()}, rank DESC\"\nelse:\norder_by_clause='rank DESC, \"createdAt\" DESC'\n\nsubmission_status_filter=f\"\"\"\"submissionStatus \" = '{submission_status}'\"\"\"\n\nsql_query=f\"\"\" \\n         WITH query AS ( \\n             SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q  \\n             FROM unnest(to_tsvector('{query}')) \\n         ) \\n         SELECT  \\n             id,  \\n             \" createdAt \",  \\n             \" updatedAt \",  \\n             version,  \\n             name,  \\n             LEFT(description, {description_threshold}) AS description,  \\n             author,  \\n             keywords,  \\n             categories,  \\n             graph, \\n             \" submissionStatus \", \\n             \" submissionDate \", \\n             CASE  \\n                 WHEN query.q::text = '' THEN 1.0 \\n                 ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0) \\n             END AS rank \\n         FROM market.\" Agents \", query \\n         WHERE  \\n             (query.q::text = '' OR search @@ query.q) \\n             AND {category_filter}  \\n             AND {submission_status_filter} \\n         ORDER BY {order_by_clause} \\n         LIMIT {page_size} \\n         OFFSET {offset}; \\n         \"\"\"\n\nresults=await prisma.client.get_client().query_raw(\nquery=sql_query,\nmodel=market.utils.extension_types.AgentsWithRank,\n)\n\nclass CountResponse(pydantic.BaseModel):\ncount:int\n\ncount_query=f\"\"\" \\n         WITH query AS ( \\n             SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q  \\n             FROM unnest(to_tsvector('{query}')) \\n         ) \\n         SELECT COUNT(*) \\n         FROM market.\" Agents \", query \\n         WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter}; \\n         \"\"\"\n\ntotal_count=await prisma.client.get_client().query_first(\nquery=count_query,\nmodel=CountResponse,\n)\ntotal_count=total_count.count if total_count else0\n\nreturn market.model.ListResponse(\nitems=results,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size-1)//page_size,\n)\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as"
                        }
                    ],
                    "content": "[market.utils.extension_types.AgentsWithRank]:\n\"\"\"Perform a search for agents based on the provided query string. \\n  \\n     Args: \\n         query (str): the search string \\n         page (int, optional): page for searching. Defaults to 1. \\n         page_size (int, optional): the number of results to return. Defaults to 10. \\n         categories (List[str] | None, optional): list of category filters. Defaults to None. \\n         description_threshold (int, optional): number of characters to return. Defaults to 60. \\n         sort_by (str, optional): sort by option. Defaults to \" rank \". \\n         sort_order (\" asc\" | \"desc \", optional): the sort order. Defaults to \" desc \". \\n  \\n     Raises: \\n         AgentQueryError: Raises an error if the query fails. \\n         AgentQueryError: Raises if an unexpected error occurs. \\n  \\n     Returns: \\n         List[AgentsWithRank]: List of agents matching the search criteria. \\n     \"\"\"\ntry:\noffset=(page-1)*page_size\n\ncategory_filter=\"1=1\"\nif categories:\ncategory_conditions=[f \"'{cat}' = ANY(categories)\" for cat in categories]\ncategory_filter=\"AND (\"+\" OR \".join(category_conditions)+\")\"\n\n#Construct the ORDER BY clause based on the sort_by parameter\nif sort_by in[\"createdAt\",\"updatedAt\"]:\norder_by_clause=f '\"{sort_by}\" {sort_order.upper()}, rank DESC'\nelif sort_by==\"name\":\norder_by_clause=f \"name {sort_order.upper()}, rank DESC\"\nelse:\norder_by_clause='rank DESC, \"createdAt\" DESC'\n\nsubmission_status_filter=f\"\"\"\"submissionStatus \" = '{submission_status}'\"\"\"\n\nsql_query=f\"\"\" \\n         WITH query AS ( \\n             SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q  \\n             FROM unnest(to_tsvector('{query}')) \\n         ) \\n         SELECT  \\n             id,  \\n             \" createdAt \",  \\n             \" updatedAt \",  \\n             version,  \\n             name,  \\n             LEFT(description, {description_threshold}) AS description,  \\n             author,  \\n             keywords,  \\n             categories,  \\n             graph, \\n             \" submissionStatus \", \\n             \" submissionDate \", \\n             CASE  \\n                 WHEN query.q::text = '' THEN 1.0 \\n                 ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0) \\n             END AS rank \\n         FROM market.\" Agents \", query \\n         WHERE  \\n             (query.q::text = '' OR search @@ query.q) \\n             AND {category_filter}  \\n             AND {submission_status_filter} \\n         ORDER BY {order_by_clause} \\n         LIMIT {page_size} \\n         OFFSET {offset}; \\n         \"\"\"\n\nresults=await prisma.client.get_client().query_raw(\nquery=sql_query,\nmodel=market.utils.extension_types.AgentsWithRank,\n)\n\nclass CountResponse(pydantic.BaseModel):\ncount:int\n\ncount_query=f\"\"\" \\n         WITH query AS ( \\n             SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q  \\n             FROM unnest(to_tsvector('{query}')) \\n         ) \\n         SELECT COUNT(*) \\n         FROM market.\" Agents \", query \\n         WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter}; \\n         \"\"\"\n\ntotal_count=await prisma.client.get_client().query_first(\nquery=count_query,\nmodel=CountResponse,\n)\ntotal_count=total_count.count if total_count else0\n\nreturn market.model.ListResponse(\nitems=results,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size-1)//page_size,\n)\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as"
                }
            ],
            "content": "\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def search_db(\nquery:str,\npage:int=1,\npage_size:int=10,\ncategories:typing.List[str]|None=None,\ndescription_threshold:int=60,\nsort_by:str=\"rank\",\nsort_order:typing.Literal[\"desc\"]|typing.Literal[\"asc\"]=\"desc\",\nsubmission_status:prisma.enums.SubmissionStatus=prisma.enums.SubmissionStatus.APPROVED,\n)->market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:\n\"\"\"Perform a search for agents based on the provided query string. \\n  \\n     Args: \\n         query (str): the search string \\n         page (int, optional): page for searching. Defaults to 1. \\n         page_size (int, optional): the number of results to return. Defaults to 10. \\n         categories (List[str] | None, optional): list of category filters. Defaults to None. \\n         description_threshold (int, optional): number of characters to return. Defaults to 60. \\n         sort_by (str, optional): sort by option. Defaults to \" rank \". \\n         sort_order (\" asc\" | \"desc \", optional): the sort order. Defaults to \" desc \". \\n  \\n     Raises: \\n         AgentQueryError: Raises an error if the query fails. \\n         AgentQueryError: Raises if an unexpected error occurs. \\n  \\n     Returns: \\n         List[AgentsWithRank]: List of agents matching the search criteria. \\n     \"\"\"\ntry:\noffset=(page-1)*page_size\n\ncategory_filter=\"1=1\"\nif categories:\ncategory_conditions=[f \"'{cat}' = ANY(categories)\" for cat in categories]\ncategory_filter=\"AND (\"+\" OR \".join(category_conditions)+\")\"\n\n#Construct the ORDER BY clause based on the sort_by parameter\nif sort_by in[\"createdAt\",\"updatedAt\"]:\norder_by_clause=f '\"{sort_by}\" {sort_order.upper()}, rank DESC'\nelif sort_by==\"name\":\norder_by_clause=f \"name {sort_order.upper()}, rank DESC\"\nelse:\norder_by_clause='rank DESC, \"createdAt\" DESC'\n\nsubmission_status_filter=f\"\"\"\"submissionStatus \" = '{submission_status}'\"\"\"\n\nsql_query=f\"\"\" \\n         WITH query AS ( \\n             SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q  \\n             FROM unnest(to_tsvector('{query}')) \\n         ) \\n         SELECT  \\n             id,  \\n             \" createdAt \",  \\n             \" updatedAt \",  \\n             version,  \\n             name,  \\n             LEFT(description, {description_threshold}) AS description,  \\n             author,  \\n             keywords,  \\n             categories,  \\n             graph, \\n             \" submissionStatus \", \\n             \" submissionDate \", \\n             CASE  \\n                 WHEN query.q::text = '' THEN 1.0 \\n                 ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0) \\n             END AS rank \\n         FROM market.\" Agents \", query \\n         WHERE  \\n             (query.q::text = '' OR search @@ query.q) \\n             AND {category_filter}  \\n             AND {submission_status_filter} \\n         ORDER BY {order_by_clause} \\n         LIMIT {page_size} \\n         OFFSET {offset}; \\n         \"\"\"\n\nresults=await prisma.client.get_client().query_raw(\nquery=sql_query,\nmodel=market.utils.extension_types.AgentsWithRank,\n)\n\nclass CountResponse(pydantic.BaseModel):\ncount:int\n\ncount_query=f\"\"\" \\n         WITH query AS ( \\n             SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q  \\n             FROM unnest(to_tsvector('{query}')) \\n         ) \\n         SELECT COUNT(*) \\n         FROM market.\" Agents \", query \\n         WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter}; \\n         \"\"\"\n\ntotal_count=await prisma.client.get_client().query_first(\nquery=count_query,\nmodel=CountResponse,\n)\ntotal_count=total_count.count if total_count else0\n\nreturn market.model.ListResponse(\nitems=results,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size-1)//page_size,\n)\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as"
        },
        {
            "type": "ClassDecl",
            "name": "CountResponse",
            "range": [
                1467,
                1479
            ],
            "children": [
                {
                    "type": "Property",
                    "name": "count",
                    "range": [
                        1476,
                        1478
                    ],
                    "children": [],
                    "content": "\nclass CountResponse"
                }
            ],
            "content": "utils.extension_types.AgentsWithRank,\n)\n\nclass CountResponse("
        },
        {
            "type": "FunctionDecl",
            "name": "get_top_agents_by_downloads",
            "range": [
                1603,
                1947
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "async",
                    "range": [
                        1603,
                        1607
                    ],
                    "children": [],
                    "content": "e:\nraise AgentQueryError"
                },
                {
                    "type": "Keyword",
                    "name": "def",
                    "range": [
                        1604,
                        1607
                    ],
                    "children": [],
                    "content": ":\nraise AgentQueryError"
                },
                {
                    "type": "Identifier",
                    "name": "get_top_agents_by_downloads",
                    "range": [
                        1605,
                        1639
                    ],
                    "children": [],
                    "content": "\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_top_agents_by_downloads(\npage:int=1,\npage_size:int=10,\nsubmission_status:prisma.enums."
                },
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        1606,
                        1639
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "page",
                            "range": [
                                1608,
                                1612
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        1609,
                                        1612
                                    ],
                                    "children": [],
                                    "content": "f \"Unexpected error occurred: {str(e)}\")\n"
                                }
                            ],
                            "content": "(f \"Unexpected error occurred: {str(e)}\")\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "page_size",
                            "range": [
                                1615,
                                1619
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        1616,
                                        1619
                                    ],
                                    "children": [],
                                    "content": "def get_top_agents_by_downloads(\n"
                                }
                            ],
                            "content": "async def get_top_agents_by_downloads(\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "submission_status",
                            "range": [
                                1622,
                                1636
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "prisma.enums.SubmissionStatus",
                                    "range": [
                                        1623,
                                        1636
                                    ],
                                    "children": [],
                                    "content": "=1,\npage_size:int=10,\nsubmission_status:prisma"
                                }
                            ],
                            "content": "int=1,\npage_size:int=10,\nsubmission_status:prisma"
                        }
                    ],
                    "content": "raise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_top_agents_by_downloads(\npage:int=1,\npage_size:int=10,\nsubmission_status:prisma.enums."
                },
                {
                    "type": "ReturnType",
                    "name": "market.model.ListResponse[prisma.models.AnalyticsTracker]",
                    "range": [
                        1640,
                        1653
                    ],
                    "children": [],
                    "content": "SubmissionStatus=prisma.enums.SubmissionStatus.APPROVED,\n)->"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        1655,
                        1947
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                1660,
                                1947
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        1662,
                                        1888
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "skip = (page - 1) * page_size",
                                            "range": [
                                                1667,
                                                1676
                                            ],
                                            "children": [],
                                            "content": "\n\"\"\"Retrieve the top agents by download count. \\n  \\n     Args: \\n         page (int, optional): The page number. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Calculate"
                                        },
                                        {
                                            "type": "TryStatement",
                                            "name": "",
                                            "range": [
                                                1683,
                                                1787
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "",
                                                    "range": [
                                                        1685,
                                                        1770
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "analytics = await prisma.models.AnalyticsTracker.prisma().find_many(...)",
                                                            "range": [
                                                                1708,
                                                                1770
                                                            ],
                                                            "children": [],
                                                            "content": "the results...is this the desired behavior?\nanalytics=await prisma.models.AnalyticsTracker.prisma().find_many(\ninclude={\"agent\":True},\norder={\"downloads\":\"desc\"},\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\n"
                                                        }
                                                    ],
                                                    "content": ")*page_size\n\n#Execute the query\ntry:\n#Agents with no downloads will not be included in the results...is this the desired behavior?\nanalytics=await prisma.models.AnalyticsTracker.prisma().find_many(\ninclude={\"agent\":True},\norder={\"downloads\":\"desc\"},\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\n"
                                                },
                                                {
                                                    "type": "CatchClause",
                                                    "name": "PrismaError",
                                                    "range": [
                                                        1771,
                                                        1787
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Block",
                                                            "name": "",
                                                            "range": [
                                                                1779,
                                                                1787
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ThrowStatement",
                                                                    "name": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                                                    "range": [
                                                                        1781,
                                                                        1787
                                                                    ],
                                                                    "children": [],
                                                                    "content": ")\nexcept prisma.errors."
                                                                }
                                                            ],
                                                            "content": ",\n)\nexcept prisma.errors."
                                                        }
                                                    ],
                                                    "content": "skip=skip,\ntake=page_size,\n)\nexcept prisma.errors."
                                                }
                                            ],
                                            "content": "-1)*page_size\n\n#Execute the query\ntry:\n#Agents with no downloads will not be included in the results...is this the desired behavior?\nanalytics=await prisma.models.AnalyticsTracker.prisma().find_many(\ninclude={\"agent\":True},\norder={\"downloads\":\"desc\"},\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors."
                                        },
                                        {
                                            "type": "TryStatement",
                                            "name": "",
                                            "range": [
                                                1789,
                                                1843
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "",
                                                    "range": [
                                                        1791,
                                                        1826
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "total_count = await prisma.models.AnalyticsTracker.prisma().count(...)",
                                                            "range": [
                                                                1792,
                                                                1826
                                                            ],
                                                            "children": [],
                                                            "content": "\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\ntry:\ntotal_count=await prisma.models.AnalyticsTracker.prisma().count(\nwhere={\"agent\":{\"is\""
                                                        }
                                                    ],
                                                    "content": ":\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\ntry:\ntotal_count=await prisma.models.AnalyticsTracker.prisma().count(\nwhere={\"agent\":{\"is\""
                                                },
                                                {
                                                    "type": "CatchClause",
                                                    "name": "PrismaError",
                                                    "range": [
                                                        1827,
                                                        1843
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Block",
                                                            "name": "",
                                                            "range": [
                                                                1835,
                                                                1843
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ThrowStatement",
                                                                    "name": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                                                    "range": [
                                                                        1837,
                                                                        1843
                                                                    ],
                                                                    "children": [],
                                                                    "content": ")\nexcept prisma.errors."
                                                                }
                                                            ],
                                                            "content": ",\n)\nexcept prisma.errors."
                                                        }
                                                    ],
                                                    "content": ":{\"submissionStatus\":submission_status}}},\n)\nexcept prisma.errors."
                                                }
                                            ],
                                            "content": "as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\ntry:\ntotal_count=await prisma.models.AnalyticsTracker.prisma().count(\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\n)\nexcept prisma.errors."
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return market.model.ListResponse(...)",
                                            "range": [
                                                1845,
                                                1888
                                            ],
                                            "children": [],
                                            "content": "as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\nreturn market.model.ListResponse(\nitems=analytics,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count"
                                        }
                                    ],
                                    "content": "models.AnalyticsTracker]:\n\"\"\"Retrieve the top agents by download count. \\n  \\n     Args: \\n         page (int, optional): The page number. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\n#Agents with no downloads will not be included in the results...is this the desired behavior?\nanalytics=await prisma.models.AnalyticsTracker.prisma().find_many(\ninclude={\"agent\":True},\norder={\"downloads\":\"desc\"},\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\ntry:\ntotal_count=await prisma.models.AnalyticsTracker.prisma().count(\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\nreturn market.model.ListResponse(\nitems=analytics,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "AgentQueryError",
                                    "range": [
                                        1890,
                                        1910
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "",
                                            "range": [
                                                1894,
                                                1910
                                            ],
                                            "children": [
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "raise e from e",
                                                    "range": [
                                                        1906,
                                                        1910
                                                    ],
                                                    "children": [],
                                                    "content": ":\n#Log the"
                                                }
                                            ],
                                            "content": "//page_size,\n)\n\nexcept AgentQueryError as e:\n#Log the"
                                        }
                                    ],
                                    "content": "page_size-1)//page_size,\n)\n\nexcept AgentQueryError as e:\n#Log the"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "ValueError",
                                    "range": [
                                        1911,
                                        1925
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "",
                                            "range": [
                                                1915,
                                                1925
                                            ],
                                            "children": [
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e",
                                                    "range": [
                                                        1917,
                                                        1925
                                                    ],
                                                    "children": [],
                                                    "content": "\nraise e from e\nexcept ValueError as"
                                                }
                                            ],
                                            "content": "as needed\nraise e from e\nexcept ValueError as"
                                        }
                                    ],
                                    "content": "error or handle it as needed\nraise e from e\nexcept ValueError as"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "Exception",
                                    "range": [
                                        1926,
                                        1947
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "",
                                            "range": [
                                                1930,
                                                1947
                                            ],
                                            "children": [
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
                                                    "range": [
                                                        1939,
                                                        1947
                                                    ],
                                                    "children": [],
                                                    "content": "Exception as e:\n#Catch any other"
                                                }
                                            ],
                                            "content": "AgentQueryError(f \"Invalid input parameter: {str(e)}\")from e\nexcept Exception as e:\n#Catch any other"
                                        }
                                    ],
                                    "content": "e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")from e\nexcept Exception as e:\n#Catch any other"
                                }
                            ],
                            "content": "prisma.models.AnalyticsTracker]:\n\"\"\"Retrieve the top agents by download count. \\n  \\n     Args: \\n         page (int, optional): The page number. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\n#Agents with no downloads will not be included in the results...is this the desired behavior?\nanalytics=await prisma.models.AnalyticsTracker.prisma().find_many(\ninclude={\"agent\":True},\norder={\"downloads\":\"desc\"},\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\ntry:\ntotal_count=await prisma.models.AnalyticsTracker.prisma().count(\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\nreturn market.model.ListResponse(\nitems=analytics,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size-1)//page_size,\n)\n\nexcept AgentQueryError as e:\n#Log the error or handle it as needed\nraise e from e\nexcept ValueError as e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")from e\nexcept Exception as e:\n#Catch any other"
                        }
                    ],
                    "content": ".model.ListResponse[prisma.models.AnalyticsTracker]:\n\"\"\"Retrieve the top agents by download count. \\n  \\n     Args: \\n         page (int, optional): The page number. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\n#Agents with no downloads will not be included in the results...is this the desired behavior?\nanalytics=await prisma.models.AnalyticsTracker.prisma().find_many(\ninclude={\"agent\":True},\norder={\"downloads\":\"desc\"},\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\ntry:\ntotal_count=await prisma.models.AnalyticsTracker.prisma().count(\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\nreturn market.model.ListResponse(\nitems=analytics,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size-1)//page_size,\n)\n\nexcept AgentQueryError as e:\n#Log the error or handle it as needed\nraise e from e\nexcept ValueError as e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")from e\nexcept Exception as e:\n#Catch any other"
                }
            ],
            "content": "e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_top_agents_by_downloads(\npage:int=1,\npage_size:int=10,\nsubmission_status:prisma.enums.SubmissionStatus=prisma.enums.SubmissionStatus.APPROVED,\n)->market.model.ListResponse[prisma.models.AnalyticsTracker]:\n\"\"\"Retrieve the top agents by download count. \\n  \\n     Args: \\n         page (int, optional): The page number. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\n#Agents with no downloads will not be included in the results...is this the desired behavior?\nanalytics=await prisma.models.AnalyticsTracker.prisma().find_many(\ninclude={\"agent\":True},\norder={\"downloads\":\"desc\"},\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\ntry:\ntotal_count=await prisma.models.AnalyticsTracker.prisma().count(\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\nreturn market.model.ListResponse(\nitems=analytics,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size-1)//page_size,\n)\n\nexcept AgentQueryError as e:\n#Log the error or handle it as needed\nraise e from e\nexcept ValueError as e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")from e\nexcept Exception as e:\n#Catch any other"
        },
        {
            "type": "FunctionDecl",
            "name": "set_agent_featured",
            "range": [
                1948,
                2144
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        1948,
                        1952
                    ],
                    "children": [],
                    "content": "unexpected exceptions\nraise AgentQueryError"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        1949,
                        1952
                    ],
                    "children": [],
                    "content": "exceptions\nraise AgentQueryError"
                },
                {
                    "type": "FunctionName",
                    "name": "set_agent_featured",
                    "range": [
                        1950,
                        1974
                    ],
                    "children": [],
                    "content": "\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")from e\n\n\nasync def set_agent_featured(\nagent_id:str,is_active:bool="
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        1951,
                        1974
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "agent_id",
                            "range": [
                                1953,
                                1955
                            ],
                            "children": [],
                            "content": "(f \"Unexpected error occurred: {str(e)}\""
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                1955,
                                1956
                            ],
                            "children": [],
                            "content": "\"Unexpected error occurred: {str(e)}\")"
                        },
                        {
                            "type": "Parameter",
                            "name": "is_active",
                            "range": [
                                1957,
                                1959
                            ],
                            "children": [],
                            "content": "from e\n"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "bool",
                            "range": [
                                1959,
                                1960
                            ],
                            "children": [],
                            "content": "\n\n"
                        },
                        {
                            "type": "DefaultValue",
                            "name": "True",
                            "range": [
                                1961,
                                1962
                            ],
                            "children": [],
                            "content": "\nasync"
                        },
                        {
                            "type": "Parameter",
                            "name": "featured_categories",
                            "range": [
                                1963,
                                1965
                            ],
                            "children": [],
                            "content": "def set_agent_featured("
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "list[str]",
                            "range": [
                                1965,
                                1969
                            ],
                            "children": [],
                            "content": "(\nagent_id:str"
                        },
                        {
                            "type": "DefaultValue",
                            "name": "[\"featured\"]",
                            "range": [
                                1970,
                                1972
                            ],
                            "children": [],
                            "content": ",is_active:"
                        }
                    ],
                    "content": "raise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")from e\n\n\nasync def set_agent_featured(\nagent_id:str,is_active:bool="
                },
                {
                    "type": "ReturnType",
                    "name": "prisma.models.FeaturedAgent",
                    "range": [
                        1975,
                        1982
                    ],
                    "children": [],
                    "content": "True,featured_categories:list[str]"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        1984,
                        1988
                    ],
                    "children": [],
                    "content": "[\"featured\"]\n)"
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        1990,
                        2131
                    ],
                    "children": [
                        {
                            "type": "TryKeyword",
                            "name": "try",
                            "range": [
                                1990,
                                1991
                            ],
                            "children": [],
                            "content": ">prisma"
                        },
                        {
                            "type": "Block",
                            "name": "try_block",
                            "range": [
                                1992,
                                2131
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "agent",
                                    "range": [
                                        1993,
                                        2015
                                    ],
                                    "children": [
                                        {
                                            "type": "AwaitKeyword",
                                            "name": "await",
                                            "range": [
                                                1995,
                                                1996
                                            ],
                                            "children": [],
                                            "content": "FeaturedAgent:"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "prisma.models.Agents.prisma().find_unique",
                                            "range": [
                                                1996,
                                                2015
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "where",
                                                    "range": [
                                                        2008,
                                                        2014
                                                    ],
                                                    "children": [],
                                                    "content": "=await prisma.models.Agents"
                                                }
                                            ],
                                            "content": ":\n\"\"\"Set an agent as featured in the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str, optional): The category to set the agent as featured. Defaults to \" featured \". \\n  \\n     Raises: \\n         AgentQueryError: If there is an error setting the agent as featured. \\n     \"\"\"\ntry:\nagent=await prisma.models.Agents."
                                        }
                                    ],
                                    "content": "models.FeaturedAgent:\n\"\"\"Set an agent as featured in the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str, optional): The category to set the agent as featured. Defaults to \" featured \". \\n  \\n     Raises: \\n         AgentQueryError: If there is an error setting the agent as featured. \\n     \"\"\"\ntry:\nagent=await prisma.models.Agents."
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "if",
                                    "range": [
                                        2017,
                                        2028
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "not agent",
                                            "range": [
                                                2018,
                                                2020
                                            ],
                                            "children": [],
                                            "content": ").find_unique"
                                        },
                                        {
                                            "type": "Block",
                                            "name": "if_block",
                                            "range": [
                                                2021,
                                                2028
                                            ],
                                            "children": [
                                                {
                                                    "type": "RaiseStatement",
                                                    "name": "raise",
                                                    "range": [
                                                        2022,
                                                        2027
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Exception",
                                                            "name": "AgentQueryError",
                                                            "range": [
                                                                2023,
                                                                2027
                                                            ],
                                                            "children": [],
                                                            "content": "={\"id\":agent_id"
                                                        }
                                                    ],
                                                    "content": "where={\"id\":agent_id"
                                                }
                                            ],
                                            "content": "(where={\"id\":agent_id}"
                                        }
                                    ],
                                    "content": "().find_unique(where={\"id\":agent_id}"
                                },
                                {
                                    "type": "Assignment",
                                    "name": "featured",
                                    "range": [
                                        2030,
                                        2110
                                    ],
                                    "children": [
                                        {
                                            "type": "AwaitKeyword",
                                            "name": "await",
                                            "range": [
                                                2032,
                                                2033
                                            ],
                                            "children": [],
                                            "content": "not agent"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "prisma.models.FeaturedAgent.prisma().upsert",
                                            "range": [
                                                2033,
                                                2110
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "where",
                                                    "range": [
                                                        2046,
                                                        2052
                                                    ],
                                                    "children": [],
                                                    "content": "await prisma.models.FeaturedAgent."
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "data",
                                                    "range": [
                                                        2055,
                                                        2106
                                                    ],
                                                    "children": [],
                                                    "content": ").upsert(\nwhere={\"agentId\":agent_id},\ndata={\n\"update\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n},\n\"create\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n\"agent\":{"
                                                }
                                            ],
                                            "content": "agent:\nraise AgentQueryError(f \"Agent with ID {agent_id} not found.\")\n\nfeatured=await prisma.models.FeaturedAgent.prisma().upsert(\nwhere={\"agentId\":agent_id},\ndata={\n\"update\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n},\n\"create\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n\"agent\":{\"connect\":{\"id\""
                                        }
                                    ],
                                    "content": "\nif not agent:\nraise AgentQueryError(f \"Agent with ID {agent_id} not found.\")\n\nfeatured=await prisma.models.FeaturedAgent.prisma().upsert(\nwhere={\"agentId\":agent_id},\ndata={\n\"update\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n},\n\"create\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n\"agent\":{\"connect\":{\"id\""
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        2111,
                                        2113
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnValue",
                                            "name": "featured",
                                            "range": [
                                                2112,
                                                2113
                                            ],
                                            "children": [],
                                            "content": "agent_id}"
                                        }
                                    ],
                                    "content": ":agent_id}"
                                }
                            ],
                            "content": ".models.FeaturedAgent:\n\"\"\"Set an agent as featured in the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str, optional): The category to set the agent as featured. Defaults to \" featured \". \\n  \\n     Raises: \\n         AgentQueryError: If there is an error setting the agent as featured. \\n     \"\"\"\ntry:\nagent=await prisma.models.Agents.prisma().find_unique(where={\"id\":agent_id})\nif not agent:\nraise AgentQueryError(f \"Agent with ID {agent_id} not found.\")\n\nfeatured=await prisma.models.FeaturedAgent.prisma().upsert(\nwhere={\"agentId\":agent_id},\ndata={\n\"update\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n},\n\"create\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n\"agent\":{\"connect\":{\"id\":agent_id}},\n},\n},\n)\nreturn featured\n\nexcept prisma."
                        },
                        {
                            "type": "ExceptClause",
                            "name": "except",
                            "range": [
                                2115,
                                2131
                            ],
                            "children": [
                                {
                                    "type": "Exception",
                                    "name": "PrismaError",
                                    "range": [
                                        2116,
                                        2120
                                    ],
                                    "children": [],
                                    "content": "\n},\n}"
                                },
                                {
                                    "type": "Block",
                                    "name": "except_block",
                                    "range": [
                                        2121,
                                        2131
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                2125,
                                                2130
                                            ],
                                            "children": [
                                                {
                                                    "type": "Exception",
                                                    "name": "AgentQueryError",
                                                    "range": [
                                                        2126,
                                                        2130
                                                    ],
                                                    "children": [],
                                                    "content": "featured\n\nexcept prisma"
                                                }
                                            ],
                                            "content": "return featured\n\nexcept prisma"
                                        }
                                    ],
                                    "content": ",\n)\nreturn featured\n\nexcept prisma."
                                }
                            ],
                            "content": ",\n},\n},\n)\nreturn featured\n\nexcept prisma."
                        },
                        {
                            "type": "ExceptClause",
                            "name": "except",
                            "range": [
                                2132,
                                2144
                            ],
                            "children": [
                                {
                                    "type": "Exception",
                                    "name": "Exception",
                                    "range": [
                                        2133,
                                        2135
                                    ],
                                    "children": [],
                                    "content": ".PrismaError as"
                                },
                                {
                                    "type": "Block",
                                    "name": "except_block",
                                    "range": [
                                        2136,
                                        2144
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                2138,
                                                2143
                                            ],
                                            "children": [
                                                {
                                                    "type": "Exception",
                                                    "name": "AgentQueryError",
                                                    "range": [
                                                        2139,
                                                        2143
                                                    ],
                                                    "children": [],
                                                    "content": "raise AgentQueryError(f \"Database query failed: {str(e)}\""
                                                }
                                            ],
                                            "content": "\nraise AgentQueryError(f \"Database query failed: {str(e)}\""
                                        }
                                    ],
                                    "content": "e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")"
                                }
                            ],
                            "content": "errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")"
                        }
                    ],
                    "content": ">prisma.models.FeaturedAgent:\n\"\"\"Set an agent as featured in the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str, optional): The category to set the agent as featured. Defaults to \" featured \". \\n  \\n     Raises: \\n         AgentQueryError: If there is an error setting the agent as featured. \\n     \"\"\"\ntry:\nagent=await prisma.models.Agents.prisma().find_unique(where={\"id\":agent_id})\nif not agent:\nraise AgentQueryError(f \"Agent with ID {agent_id} not found.\")\n\nfeatured=await prisma.models.FeaturedAgent.prisma().upsert(\nwhere={\"agentId\":agent_id},\ndata={\n\"update\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n},\n\"create\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n\"agent\":{\"connect\":{\"id\":agent_id}},\n},\n},\n)\nreturn featured\n\nexcept prisma."
                }
            ],
            "content": "unexpected exceptions\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")from e\n\n\nasync def set_agent_featured(\nagent_id:str,is_active:bool=True,featured_categories:list[str]=[\"featured\"]\n)->prisma.models.FeaturedAgent:\n\"\"\"Set an agent as featured in the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str, optional): The category to set the agent as featured. Defaults to \" featured \". \\n  \\n     Raises: \\n         AgentQueryError: If there is an error setting the agent as featured. \\n     \"\"\"\ntry:\nagent=await prisma.models.Agents.prisma().find_unique(where={\"id\":agent_id})\nif not agent:\nraise AgentQueryError(f \"Agent with ID {agent_id} not found.\")\n\nfeatured=await prisma.models.FeaturedAgent.prisma().upsert(\nwhere={\"agentId\":agent_id},\ndata={\n\"update\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n},\n\"create\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n\"agent\":{\"connect\":{\"id\":agent_id}},\n},\n},\n)\nreturn featured\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")"
        },
        {
            "type": "FunctionDecl",
            "name": "get_featured_agents",
            "range": [
                2145,
                2437
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "get_featured_agents",
                    "range": [
                        2145,
                        2193
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                2145,
                                2149
                            ],
                            "children": [],
                            "content": "\nexcept Exception as e"
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                2146,
                                2149
                            ],
                            "children": [],
                            "content": "except Exception as e"
                        },
                        {
                            "type": "Identifier",
                            "name": "get_featured_agents",
                            "range": [
                                2147,
                                2167
                            ],
                            "children": [],
                            "content": "Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_featured_agents(\ncategory:"
                        },
                        {
                            "type": "ParameterList",
                            "name": "parameters",
                            "range": [
                                2148,
                                2188
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "category",
                                    "range": [
                                        2150,
                                        2154
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "category",
                                            "range": [
                                                2150,
                                                2157
                                            ],
                                            "children": [],
                                            "content": ":\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")"
                                        },
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "str",
                                            "range": [
                                                2151,
                                                2154
                                            ],
                                            "children": [],
                                            "content": "\nraise AgentQueryError("
                                        },
                                        {
                                            "type": "DefaultValue",
                                            "name": "\"featured\"",
                                            "range": [
                                                2153,
                                                2154
                                            ],
                                            "children": [],
                                            "content": "AgentQueryError("
                                        }
                                    ],
                                    "content": ":\nraise AgentQueryError("
                                },
                                {
                                    "type": "Parameter",
                                    "name": "page",
                                    "range": [
                                        2157,
                                        2161
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "page",
                                            "range": [
                                                2157,
                                                2161
                                            ],
                                            "children": [],
                                            "content": ")\n\n\nasync"
                                        },
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "int",
                                            "range": [
                                                2158,
                                                2161
                                            ],
                                            "children": [],
                                            "content": "\n\n\nasync"
                                        },
                                        {
                                            "type": "DefaultValue",
                                            "name": "1",
                                            "range": [
                                                2160,
                                                2161
                                            ],
                                            "children": [],
                                            "content": "\nasync"
                                        }
                                    ],
                                    "content": ")\n\n\nasync"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "page_size",
                                    "range": [
                                        2164,
                                        2168
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "page_size",
                                            "range": [
                                                2164,
                                                2172
                                            ],
                                            "children": [],
                                            "content": "(\ncategory:str=\"featured\",\n"
                                        },
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "int",
                                            "range": [
                                                2165,
                                                2168
                                            ],
                                            "children": [],
                                            "content": "\ncategory:str"
                                        },
                                        {
                                            "type": "DefaultValue",
                                            "name": "10",
                                            "range": [
                                                2167,
                                                2168
                                            ],
                                            "children": [],
                                            "content": ":str"
                                        }
                                    ],
                                    "content": "(\ncategory:str"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "submission_status",
                                    "range": [
                                        2171,
                                        2185
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "submission_status",
                                            "range": [
                                                2171,
                                                2187
                                            ],
                                            "children": [],
                                            "content": ",\npage:int=1,\npage_size:int=10,\nsubmission_status"
                                        },
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "prisma.enums.SubmissionStatus",
                                            "range": [
                                                2172,
                                                2185
                                            ],
                                            "children": [],
                                            "content": "\npage:int=1,\npage_size:int=10,"
                                        },
                                        {
                                            "type": "DefaultValue",
                                            "name": "prisma.enums.SubmissionStatus.APPROVED",
                                            "range": [
                                                2178,
                                                2185
                                            ],
                                            "children": [],
                                            "content": ",\npage_size:int=10,"
                                        }
                                    ],
                                    "content": ",\npage:int=1,\npage_size:int=10,"
                                }
                            ],
                            "content": "as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_featured_agents(\ncategory:str=\"featured\",\npage:int=1,\npage_size:int=10,\nsubmission_status:"
                        },
                        {
                            "type": "ReturnType",
                            "name": "FeaturedAgentResponse",
                            "range": [
                                2190,
                                2193
                            ],
                            "children": [],
                            "content": ".enums.SubmissionStatus"
                        }
                    ],
                    "content": "\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_featured_agents(\ncategory:str=\"featured\",\npage:int=1,\npage_size:int=10,\nsubmission_status:prisma.enums.SubmissionStatus"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        2194,
                        2437
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                2194,
                                2198
                            ],
                            "children": [],
                            "content": "=prisma.enums."
                        },
                        {
                            "type": "TryStatement",
                            "name": "try",
                            "range": [
                                2200,
                                2437
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "tryBlock",
                                    "range": [
                                        2202,
                                        2378
                                    ],
                                    "children": [
                                        {
                                            "type": "Comment",
                                            "name": "Calculate pagination",
                                            "range": [
                                                2203,
                                                2206
                                            ],
                                            "children": [],
                                            "content": "\n)->"
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "name": "skip",
                                            "range": [
                                                2207,
                                                2216
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "skip",
                                                    "range": [
                                                        2207,
                                                        2211
                                                    ],
                                                    "children": [],
                                                    "content": "FeaturedAgentResponse:\n\"\"\"Retrieve a list of featured agents from the database based on the provided category. \\n  \\n     Args: \\n         category (str, optional): The category of featured agents to retrieve. Defaults to \""
                                                },
                                                {
                                                    "type": "Assignment",
                                                    "name": "=",
                                                    "range": [
                                                        2208,
                                                        2211
                                                    ],
                                                    "children": [],
                                                    "content": ":\n\"\"\"Retrieve a list of featured agents from the database based on the provided category. \\n  \\n     Args: \\n         category (str, optional): The category of featured agents to retrieve. Defaults to \""
                                                },
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "*",
                                                    "range": [
                                                        2209,
                                                        2215
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "BinaryExpression",
                                                            "name": "-",
                                                            "range": [
                                                                2210,
                                                                2213
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "page",
                                                                    "range": [
                                                                        2210,
                                                                        2214
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\"\"\"Retrieve a list of featured agents from the database based on the provided category. \\n  \\n     Args: \\n         category (str, optional): The category of featured agents to retrieve. Defaults to \" featured \". \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages. \\n     \"\"\""
                                                                },
                                                                {
                                                                    "type": "NumericLiteral",
                                                                    "name": "1",
                                                                    "range": [
                                                                        2212,
                                                                        2213
                                                                    ],
                                                                    "children": [],
                                                                    "content": "featured \". \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages. \\n     \""
                                                                }
                                                            ],
                                                            "content": "\"\"\"Retrieve a list of featured agents from the database based on the provided category. \\n  \\n     Args: \\n         category (str, optional): The category of featured agents to retrieve. Defaults to \" featured \". \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages. \\n     \""
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "page_size",
                                                            "range": [
                                                                2214,
                                                                2218
                                                            ],
                                                            "children": [],
                                                            "content": "\"\"\ntry:\n"
                                                        }
                                                    ],
                                                    "content": "\n\"\"\"Retrieve a list of featured agents from the database based on the provided category. \\n  \\n     Args: \\n         category (str, optional): The category of featured agents to retrieve. Defaults to \" featured \". \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\n"
                                                }
                                            ],
                                            "content": "FeaturedAgentResponse:\n\"\"\"Retrieve a list of featured agents from the database based on the provided category. \\n  \\n     Args: \\n         category (str, optional): The category of featured agents to retrieve. Defaults to \" featured \". \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry"
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "Execute the query",
                                            "range": [
                                                2218,
                                                2222
                                            ],
                                            "children": [],
                                            "content": "\n#Calculate pagination\n"
                                        },
                                        {
                                            "type": "TryStatement",
                                            "name": "try",
                                            "range": [
                                                2223,
                                                2321
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "tryBlock",
                                                    "range": [
                                                        2225,
                                                        2304
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "VariableDeclaration",
                                                            "name": "featured_agents",
                                                            "range": [
                                                                2226,
                                                                2304
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "featured_agents",
                                                                    "range": [
                                                                        2226,
                                                                        2240
                                                                    ],
                                                                    "children": [],
                                                                    "content": "page-1)*page_size\n\n#Execute the query\ntry:"
                                                                },
                                                                {
                                                                    "type": "Assignment",
                                                                    "name": "=",
                                                                    "range": [
                                                                        2227,
                                                                        2240
                                                                    ],
                                                                    "children": [],
                                                                    "content": "-1)*page_size\n\n#Execute the query\ntry:"
                                                                },
                                                                {
                                                                    "type": "AwaitExpression",
                                                                    "name": "await",
                                                                    "range": [
                                                                        2228,
                                                                        2304
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "find_many",
                                                                            "range": [
                                                                                2229,
                                                                                2304
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "name": "prisma.models.FeaturedAgent.prisma",
                                                                                    "range": [
                                                                                        2229,
                                                                                        2238
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "prisma",
                                                                                            "range": [
                                                                                                2229,
                                                                                                2235
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": ")*page_size\n\n#Execute"
                                                                                        },
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "models",
                                                                                            "range": [
                                                                                                2230,
                                                                                                2236
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "*page_size\n\n#Execute the"
                                                                                        },
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "FeaturedAgent",
                                                                                            "range": [
                                                                                                2231,
                                                                                                2244
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "page_size\n\n#Execute the query\ntry:\nfeatured_agents=await"
                                                                                        },
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "prisma",
                                                                                            "range": [
                                                                                                2232,
                                                                                                2238
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "\n\n#Execute the query\n"
                                                                                        }
                                                                                    ],
                                                                                    "content": ")*page_size\n\n#Execute the query\n"
                                                                                },
                                                                                {
                                                                                    "type": "CallExpression",
                                                                                    "name": "find_many",
                                                                                    "range": [
                                                                                        2239,
                                                                                        2304
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "ObjectExpression",
                                                                                            "name": "where",
                                                                                            "range": [
                                                                                                2241,
                                                                                                2273
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Property",
                                                                                                    "name": "featuredCategories",
                                                                                                    "range": [
                                                                                                        2242,
                                                                                                        2252
                                                                                                    ],
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "featuredCategories",
                                                                                                            "range": [
                                                                                                                2242,
                                                                                                                2258
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": "featured_agents=await prisma.models.FeaturedAgent.prisma().find_many(\nwhere"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "ObjectExpression",
                                                                                                            "name": "has",
                                                                                                            "range": [
                                                                                                                2248,
                                                                                                                2252
                                                                                                            ],
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "category",
                                                                                                                    "range": [
                                                                                                                        2249,
                                                                                                                        2256
                                                                                                                    ],
                                                                                                                    "children": [],
                                                                                                                    "content": "FeaturedAgent.prisma().find_many("
                                                                                                                }
                                                                                                            ],
                                                                                                            "content": ".FeaturedAgent.prisma("
                                                                                                        }
                                                                                                    ],
                                                                                                    "content": "featured_agents=await prisma.models.FeaturedAgent.prisma("
                                                                                                },
                                                                                                {
                                                                                                    "type": "Property",
                                                                                                    "name": "isActive",
                                                                                                    "range": [
                                                                                                        2255,
                                                                                                        2258
                                                                                                    ],
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "isActive",
                                                                                                            "range": [
                                                                                                                2255,
                                                                                                                2263
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": "find_many(\nwhere={\n\"featuredCategories\":"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "BooleanLiteral",
                                                                                                            "name": "True",
                                                                                                            "range": [
                                                                                                                2256,
                                                                                                                2260
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": "(\nwhere={"
                                                                                                        }
                                                                                                    ],
                                                                                                    "content": "find_many(\nwhere"
                                                                                                },
                                                                                                {
                                                                                                    "type": "Property",
                                                                                                    "name": "agent",
                                                                                                    "range": [
                                                                                                        2260,
                                                                                                        2270
                                                                                                    ],
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "agent",
                                                                                                            "range": [
                                                                                                                2260,
                                                                                                                2265
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": "{\n\"featuredCategories\":{\"has\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "ObjectExpression",
                                                                                                            "name": "is",
                                                                                                            "range": [
                                                                                                                2262,
                                                                                                                2270
                                                                                                            ],
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "Property",
                                                                                                                    "name": "submissionStatus",
                                                                                                                    "range": [
                                                                                                                        2263,
                                                                                                                        2269
                                                                                                                    ],
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "submissionStatus",
                                                                                                                            "range": [
                                                                                                                                2263,
                                                                                                                                2279
                                                                                                                            ],
                                                                                                                            "children": [],
                                                                                                                            "content": ":{\"has\":category},\n\"isActive\":True,\n\"agent\":{\"is\""
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "submission_status",
                                                                                                                            "range": [
                                                                                                                                2266,
                                                                                                                                2279
                                                                                                                            ],
                                                                                                                            "children": [],
                                                                                                                            "content": ":category},\n\"isActive\":True,\n\"agent\":{\"is\""
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "content": ":{\"has\":category},"
                                                                                                                }
                                                                                                            ],
                                                                                                            "content": "\"featuredCategories\":{\"has\":category},\n"
                                                                                                        }
                                                                                                    ],
                                                                                                    "content": "{\n\"featuredCategories\":{\"has\":category},\n"
                                                                                                }
                                                                                            ],
                                                                                            "content": "\nfeatured_agents=await prisma.models.FeaturedAgent.prisma().find_many(\nwhere={\n\"featuredCategories\":{\"has\":category},\n\"isActive\":True"
                                                                                        },
                                                                                        {
                                                                                            "type": "ObjectExpression",
                                                                                            "name": "include",
                                                                                            "range": [
                                                                                                2276,
                                                                                                2290
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Property",
                                                                                                    "name": "agent",
                                                                                                    "range": [
                                                                                                        2277,
                                                                                                        2289
                                                                                                    ],
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "agent",
                                                                                                            "range": [
                                                                                                                2277,
                                                                                                                2282
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": ":{\"is\":{\"submissionStatus\""
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "ObjectExpression",
                                                                                                            "name": "include",
                                                                                                            "range": [
                                                                                                                2281,
                                                                                                                2289
                                                                                                            ],
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "Property",
                                                                                                                    "name": "AnalyticsTracker",
                                                                                                                    "range": [
                                                                                                                        2282,
                                                                                                                        2288
                                                                                                                    ],
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "AnalyticsTracker",
                                                                                                                            "range": [
                                                                                                                                2282,
                                                                                                                                2298
                                                                                                                            ],
                                                                                                                            "children": [],
                                                                                                                            "content": "\"submissionStatus\":submission_status}},\n},\ninclude={\"agent\":{\"include\""
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "BooleanLiteral",
                                                                                                                            "name": "True",
                                                                                                                            "range": [
                                                                                                                                2286,
                                                                                                                                2288
                                                                                                                            ],
                                                                                                                            "children": [],
                                                                                                                            "content": "},\n"
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "content": "\"submissionStatus\":submission_status}},\n"
                                                                                                                }
                                                                                                            ],
                                                                                                            "content": "{\"submissionStatus\":submission_status}},\n}"
                                                                                                        }
                                                                                                    ],
                                                                                                    "content": ":{\"is\":{\"submissionStatus\":submission_status}},\n}"
                                                                                                }
                                                                                            ],
                                                                                            "content": "\"agent\":{\"is\":{\"submissionStatus\":submission_status}},\n},"
                                                                                        },
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "skip",
                                                                                            "range": [
                                                                                                2293,
                                                                                                2296
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "skip",
                                                                                                    "range": [
                                                                                                        2293,
                                                                                                        2297
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": "={\"agent\":{"
                                                                                                }
                                                                                            ],
                                                                                            "content": "={\"agent\":"
                                                                                        },
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "take",
                                                                                            "range": [
                                                                                                2298,
                                                                                                2301
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "page_size",
                                                                                                    "range": [
                                                                                                        2298,
                                                                                                        2306
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": "\"include\":{\"AnalyticsTracker\":True}}}"
                                                                                                }
                                                                                            ],
                                                                                            "content": "\"include\":{\"AnalyticsTracker\""
                                                                                        }
                                                                                    ],
                                                                                    "content": "try:\nfeatured_agents=await prisma.models.FeaturedAgent.prisma().find_many(\nwhere={\n\"featuredCategories\":{\"has\":category},\n\"isActive\":True,\n\"agent\":{\"is\":{\"submissionStatus\":submission_status}},\n},\ninclude={\"agent\":{\"include\":{\"AnalyticsTracker\":True}"
                                                                                }
                                                                            ],
                                                                            "content": ")*page_size\n\n#Execute the query\ntry:\nfeatured_agents=await prisma.models.FeaturedAgent.prisma().find_many(\nwhere={\n\"featuredCategories\":{\"has\":category},\n\"isActive\":True,\n\"agent\":{\"is\":{\"submissionStatus\":submission_status}},\n},\ninclude={\"agent\":{\"include\":{\"AnalyticsTracker\":True}"
                                                                        }
                                                                    ],
                                                                    "content": "1)*page_size\n\n#Execute the query\ntry:\nfeatured_agents=await prisma.models.FeaturedAgent.prisma().find_many(\nwhere={\n\"featuredCategories\":{\"has\":category},\n\"isActive\":True,\n\"agent\":{\"is\":{\"submissionStatus\":submission_status}},\n},\ninclude={\"agent\":{\"include\":{\"AnalyticsTracker\":True}"
                                                                }
                                                            ],
                                                            "content": "page-1)*page_size\n\n#Execute the query\ntry:\nfeatured_agents=await prisma.models.FeaturedAgent.prisma().find_many(\nwhere={\n\"featuredCategories\":{\"has\":category},\n\"isActive\":True,\n\"agent\":{\"is\":{\"submissionStatus\":submission_status}},\n},\ninclude={\"agent\":{\"include\":{\"AnalyticsTracker\":True}"
                                                        }
                                                    ],
                                                    "content": "(page-1)*page_size\n\n#Execute the query\ntry:\nfeatured_agents=await prisma.models.FeaturedAgent.prisma().find_many(\nwhere={\n\"featuredCategories\":{\"has\":category},\n\"isActive\":True,\n\"agent\":{\"is\":{\"submissionStatus\":submission_status}},\n},\ninclude={\"agent\":{\"include\":{\"AnalyticsTracker\":True}"
                                                },
                                                {
                                                    "type": "CatchClause",
                                                    "name": "except",
                                                    "range": [
                                                        2305,
                                                        2321
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "PrismaError",
                                                            "range": [
                                                                2306,
                                                                2317
                                                            ],
                                                            "children": [],
                                                            "content": "},\nskip=skip,\ntake=page_size,"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "e",
                                                            "range": [
                                                                2311,
                                                                2313
                                                            ],
                                                            "children": [],
                                                            "content": "skip,\n"
                                                        },
                                                        {
                                                            "type": "Block",
                                                            "name": "catchBlock",
                                                            "range": [
                                                                2314,
                                                                2321
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ThrowStatement",
                                                                    "name": "raise",
                                                                    "range": [
                                                                        2315,
                                                                        2321
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "NewExpression",
                                                                            "name": "AgentQueryError",
                                                                            "range": [
                                                                                2316,
                                                                                2321
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Literal",
                                                                                    "name": "\"Database query failed: {str(e)}\"",
                                                                                    "range": [
                                                                                        2318,
                                                                                        2320
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "\n)\n"
                                                                                }
                                                                            ],
                                                                            "content": "page_size,\n)\nexcept"
                                                                        }
                                                                    ],
                                                                    "content": "=page_size,\n)\nexcept"
                                                                }
                                                            ],
                                                            "content": "take=page_size,\n)\nexcept"
                                                        }
                                                    ],
                                                    "content": "}},\nskip=skip,\ntake=page_size,\n)\nexcept"
                                                }
                                            ],
                                            "content": "skip=(page-1)*page_size\n\n#Execute the query\ntry:\nfeatured_agents=await prisma.models.FeaturedAgent.prisma().find_many(\nwhere={\n\"featuredCategories\":{\"has\":category},\n\"isActive\":True,\n\"agent\":{\"is\":{\"submissionStatus\":submission_status}},\n},\ninclude={\"agent\":{\"include\":{\"AnalyticsTracker\":True}}},\nskip=skip,\ntake=page_size,\n)\nexcept"
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "Get total count for pagination info",
                                            "range": [
                                                2323,
                                                2330
                                            ],
                                            "children": [],
                                            "content": ".errors.PrismaError as e:\n"
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "name": "total_count",
                                            "range": [
                                                2331,
                                                2337
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "total_count",
                                                    "range": [
                                                        2331,
                                                        2341
                                                    ],
                                                    "children": [],
                                                    "content": "raise AgentQueryError(f \"Database query failed: {str(e)}\")\n\n#Get total"
                                                },
                                                {
                                                    "type": "Assignment",
                                                    "name": "=",
                                                    "range": [
                                                        2332,
                                                        2341
                                                    ],
                                                    "children": [],
                                                    "content": "AgentQueryError(f \"Database query failed: {str(e)}\")\n\n#Get total"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "len",
                                                    "range": [
                                                        2333,
                                                        2337
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "featured_agents",
                                                            "range": [
                                                                2335,
                                                                2349
                                                            ],
                                                            "children": [],
                                                            "content": "\"Database query failed: {str(e)}\")\n\n#Get total count for pagination info\ntotal_count=len"
                                                        }
                                                    ],
                                                    "content": "(f \"Database query failed: {str(e)}\")\n"
                                                }
                                            ],
                                            "content": "raise AgentQueryError(f \"Database query failed: {str(e)}\")\n"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                2339,
                                                2378
                                            ],
                                            "children": [
                                                {
                                                    "type": "NewExpression",
                                                    "name": "FeaturedAgentResponse",
                                                    "range": [
                                                        2340,
                                                        2378
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ObjectExpression",
                                                            "name": "featured_agents",
                                                            "range": [
                                                                2342,
                                                                2346
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "featured_agents",
                                                                    "range": [
                                                                        2343,
                                                                        2357
                                                                    ],
                                                                    "children": [],
                                                                    "content": "for pagination info\ntotal_count=len(featured_agents)\n\nreturn FeaturedAgentResponse("
                                                                }
                                                            ],
                                                            "content": "count for pagination info\n"
                                                        },
                                                        {
                                                            "type": "ObjectExpression",
                                                            "name": "total_count",
                                                            "range": [
                                                                2348,
                                                                2351
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "total_count",
                                                                    "range": [
                                                                        2349,
                                                                        2361
                                                                    ],
                                                                    "children": [],
                                                                    "content": "len(featured_agents)\n\nreturn FeaturedAgentResponse(\nfeatured_agents=featured_agents"
                                                                }
                                                            ],
                                                            "content": "=len(featured_agents"
                                                        },
                                                        {
                                                            "type": "ObjectExpression",
                                                            "name": "page",
                                                            "range": [
                                                                2353,
                                                                2356
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "page",
                                                                    "range": [
                                                                        2354,
                                                                        2358
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nreturn FeaturedAgentResponse(\n"
                                                                }
                                                            ],
                                                            "content": "\n\nreturn FeaturedAgentResponse"
                                                        },
                                                        {
                                                            "type": "ObjectExpression",
                                                            "name": "page_size",
                                                            "range": [
                                                                2358,
                                                                2361
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "page_size",
                                                                    "range": [
                                                                        2359,
                                                                        2367
                                                                    ],
                                                                    "children": [],
                                                                    "content": "featured_agents=featured_agents,\ntotal_count=total_count,"
                                                                }
                                                            ],
                                                            "content": "\nfeatured_agents=featured_agents"
                                                        },
                                                        {
                                                            "type": "ObjectExpression",
                                                            "name": "total_pages",
                                                            "range": [
                                                                2363,
                                                                2375
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "BinaryExpression",
                                                                    "name": "/",
                                                                    "range": [
                                                                        2364,
                                                                        2374
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "BinaryExpression",
                                                                            "name": "+",
                                                                            "range": [
                                                                                2365,
                                                                                2370
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "total_count",
                                                                                    "range": [
                                                                                        2366,
                                                                                        2376
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "total_count,\npage=page,\npage_size=page_size"
                                                                                },
                                                                                {
                                                                                    "type": "BinaryExpression",
                                                                                    "name": "-",
                                                                                    "range": [
                                                                                        2367,
                                                                                        2370
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "page_size",
                                                                                            "range": [
                                                                                                2368,
                                                                                                2376
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "\npage=page,\npage_size=page_size"
                                                                                        },
                                                                                        {
                                                                                            "type": "NumericLiteral",
                                                                                            "name": "1",
                                                                                            "range": [
                                                                                                2369,
                                                                                                2370
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "page="
                                                                                        }
                                                                                    ],
                                                                                    "content": ",\npage="
                                                                                }
                                                                            ],
                                                                            "content": "=total_count,\npage="
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "page_size",
                                                                            "range": [
                                                                                2372,
                                                                                2380
                                                                            ],
                                                                            "children": [],
                                                                            "content": ",\npage_size=page_size,\ntotal_pages="
                                                                        }
                                                                    ],
                                                                    "content": "total_count=total_count,\npage=page,\npage_size"
                                                                }
                                                            ],
                                                            "content": "\ntotal_count=total_count,\npage=page,\npage_size="
                                                        }
                                                    ],
                                                    "content": "Get total count for pagination info\ntotal_count=len(featured_agents)\n\nreturn FeaturedAgentResponse(\nfeatured_agents=featured_agents,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\n"
                                                }
                                            ],
                                            "content": "#Get total count for pagination info\ntotal_count=len(featured_agents)\n\nreturn FeaturedAgentResponse(\nfeatured_agents=featured_agents,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\n"
                                        }
                                    ],
                                    "content": ",\n)->FeaturedAgentResponse:\n\"\"\"Retrieve a list of featured agents from the database based on the provided category. \\n  \\n     Args: \\n         category (str, optional): The category of featured agents to retrieve. Defaults to \" featured \". \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\nfeatured_agents=await prisma.models.FeaturedAgent.prisma().find_many(\nwhere={\n\"featuredCategories\":{\"has\":category},\n\"isActive\":True,\n\"agent\":{\"is\":{\"submissionStatus\":submission_status}},\n},\ninclude={\"agent\":{\"include\":{\"AnalyticsTracker\":True}}},\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\n#Get total count for pagination info\ntotal_count=len(featured_agents)\n\nreturn FeaturedAgentResponse(\nfeatured_agents=featured_agents,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\n"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except",
                                    "range": [
                                        2380,
                                        2400
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "AgentQueryError",
                                            "range": [
                                                2381,
                                                2395
                                            ],
                                            "children": [],
                                            "content": "(total_count+page_size-1)//page_size,\n)\n\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "e",
                                            "range": [
                                                2383,
                                                2385
                                            ],
                                            "children": [],
                                            "content": "+page_size-"
                                        },
                                        {
                                            "type": "Block",
                                            "name": "catchBlock",
                                            "range": [
                                                2386,
                                                2400
                                            ],
                                            "children": [
                                                {
                                                    "type": "Comment",
                                                    "name": "Log the error or handle it as needed",
                                                    "range": [
                                                        2387,
                                                        2395
                                                    ],
                                                    "children": [],
                                                    "content": ")//page_size,\n)\n\n"
                                                },
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "raise",
                                                    "range": [
                                                        2396,
                                                        2400
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "e",
                                                            "range": [
                                                                2397,
                                                                2399
                                                            ],
                                                            "children": [],
                                                            "content": "AgentQueryError as e"
                                                        }
                                                    ],
                                                    "content": "except AgentQueryError as e:"
                                                }
                                            ],
                                            "content": "1)//page_size,\n)\n\nexcept AgentQueryError as e:"
                                        }
                                    ],
                                    "content": "=(total_count+page_size-1)//page_size,\n)\n\nexcept AgentQueryError as e:"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except",
                                    "range": [
                                        2401,
                                        2415
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "ValueError",
                                            "range": [
                                                2402,
                                                2411
                                            ],
                                            "children": [],
                                            "content": "#Log the error or handle it as needed\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "e",
                                            "range": [
                                                2404,
                                                2406
                                            ],
                                            "children": [],
                                            "content": "the error or"
                                        },
                                        {
                                            "type": "Block",
                                            "name": "catchBlock",
                                            "range": [
                                                2407,
                                                2415
                                            ],
                                            "children": [
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "raise",
                                                    "range": [
                                                        2408,
                                                        2415
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "NewExpression",
                                                            "name": "AgentQueryError",
                                                            "range": [
                                                                2409,
                                                                2415
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"Invalid input parameter: {str(e)}\"",
                                                                    "range": [
                                                                        2410,
                                                                        2412
                                                                    ],
                                                                    "children": [],
                                                                    "content": "needed\nraise"
                                                                }
                                                            ],
                                                            "content": "as needed\nraise e from e"
                                                        }
                                                    ],
                                                    "content": "it as needed\nraise e from e"
                                                }
                                            ],
                                            "content": "handle it as needed\nraise e from e"
                                        }
                                    ],
                                    "content": "\n#Log the error or handle it as needed\nraise e from e"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except",
                                    "range": [
                                        2416,
                                        2437
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "Exception",
                                            "range": [
                                                2417,
                                                2426
                                            ],
                                            "children": [],
                                            "content": "except ValueError as e:\nraise AgentQueryError(f"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "e",
                                            "range": [
                                                2419,
                                                2421
                                            ],
                                            "children": [],
                                            "content": "as e:"
                                        },
                                        {
                                            "type": "Block",
                                            "name": "catchBlock",
                                            "range": [
                                                2422,
                                                2437
                                            ],
                                            "children": [
                                                {
                                                    "type": "Comment",
                                                    "name": "Catch any other unexpected exceptions",
                                                    "range": [
                                                        2423,
                                                        2428
                                                    ],
                                                    "children": [],
                                                    "content": "raise AgentQueryError(f \"Invalid input parameter: {str(e)}\")"
                                                },
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "raise",
                                                    "range": [
                                                        2429,
                                                        2437
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "NewExpression",
                                                            "name": "AgentQueryError",
                                                            "range": [
                                                                2430,
                                                                2437
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"Unexpected error occurred: {str(e)}\"",
                                                                    "range": [
                                                                        2431,
                                                                        2433
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nexcept Exception"
                                                                }
                                                            ],
                                                            "content": "e\nexcept Exception as e:\n"
                                                        }
                                                    ],
                                                    "content": "from e\nexcept Exception as e:\n"
                                                }
                                            ],
                                            "content": "\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")from e\nexcept Exception as e:\n"
                                        }
                                    ],
                                    "content": "\nexcept ValueError as e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")from e\nexcept Exception as e:\n"
                                }
                            ],
                            "content": ".APPROVED,\n)->FeaturedAgentResponse:\n\"\"\"Retrieve a list of featured agents from the database based on the provided category. \\n  \\n     Args: \\n         category (str, optional): The category of featured agents to retrieve. Defaults to \" featured \". \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\nfeatured_agents=await prisma.models.FeaturedAgent.prisma().find_many(\nwhere={\n\"featuredCategories\":{\"has\":category},\n\"isActive\":True,\n\"agent\":{\"is\":{\"submissionStatus\":submission_status}},\n},\ninclude={\"agent\":{\"include\":{\"AnalyticsTracker\":True}}},\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\n#Get total count for pagination info\ntotal_count=len(featured_agents)\n\nreturn FeaturedAgentResponse(\nfeatured_agents=featured_agents,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size-1)//page_size,\n)\n\nexcept AgentQueryError as e:\n#Log the error or handle it as needed\nraise e from e\nexcept ValueError as e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")from e\nexcept Exception as e:\n"
                        }
                    ],
                    "content": "=prisma.enums.SubmissionStatus.APPROVED,\n)->FeaturedAgentResponse:\n\"\"\"Retrieve a list of featured agents from the database based on the provided category. \\n  \\n     Args: \\n         category (str, optional): The category of featured agents to retrieve. Defaults to \" featured \". \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\nfeatured_agents=await prisma.models.FeaturedAgent.prisma().find_many(\nwhere={\n\"featuredCategories\":{\"has\":category},\n\"isActive\":True,\n\"agent\":{\"is\":{\"submissionStatus\":submission_status}},\n},\ninclude={\"agent\":{\"include\":{\"AnalyticsTracker\":True}}},\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\n#Get total count for pagination info\ntotal_count=len(featured_agents)\n\nreturn FeaturedAgentResponse(\nfeatured_agents=featured_agents,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size-1)//page_size,\n)\n\nexcept AgentQueryError as e:\n#Log the error or handle it as needed\nraise e from e\nexcept ValueError as e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")from e\nexcept Exception as e:\n"
                }
            ],
            "content": "\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_featured_agents(\ncategory:str=\"featured\",\npage:int=1,\npage_size:int=10,\nsubmission_status:prisma.enums.SubmissionStatus=prisma.enums.SubmissionStatus.APPROVED,\n)->FeaturedAgentResponse:\n\"\"\"Retrieve a list of featured agents from the database based on the provided category. \\n  \\n     Args: \\n         category (str, optional): The category of featured agents to retrieve. Defaults to \" featured \". \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\nfeatured_agents=await prisma.models.FeaturedAgent.prisma().find_many(\nwhere={\n\"featuredCategories\":{\"has\":category},\n\"isActive\":True,\n\"agent\":{\"is\":{\"submissionStatus\":submission_status}},\n},\ninclude={\"agent\":{\"include\":{\"AnalyticsTracker\":True}}},\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\n#Get total count for pagination info\ntotal_count=len(featured_agents)\n\nreturn FeaturedAgentResponse(\nfeatured_agents=featured_agents,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size-1)//page_size,\n)\n\nexcept AgentQueryError as e:\n#Log the error or handle it as needed\nraise e from e\nexcept ValueError as e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")from e\nexcept Exception as e:\n"
        },
        {
            "type": "FunctionDecl",
            "name": "remove_featured_category",
            "range": [
                2438,
                2616
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "async",
                    "range": [
                        2438,
                        2442
                    ],
                    "children": [],
                    "content": "#Catch any other unexpected"
                },
                {
                    "type": "Keyword",
                    "name": "def",
                    "range": [
                        2439,
                        2442
                    ],
                    "children": [],
                    "content": "Catch any other unexpected"
                },
                {
                    "type": "Identifier",
                    "name": "remove_featured_category",
                    "range": [
                        2440,
                        2461
                    ],
                    "children": [],
                    "content": "any other unexpected exceptions\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")from e\n\n\nasync def remove_featured_category(\nagent_id"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        2441,
                        2451
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "agent_id",
                            "range": [
                                2443,
                                2446
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        2445,
                                        2446
                                    ],
                                    "children": [],
                                    "content": "raise AgentQueryError"
                                }
                            ],
                            "content": "exceptions\nraise AgentQueryError"
                        },
                        {
                            "type": "Parameter",
                            "name": "category",
                            "range": [
                                2447,
                                2450
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        2449,
                                        2450
                                    ],
                                    "children": [],
                                    "content": "\"Unexpected error occurred: {str(e)}\")"
                                }
                            ],
                            "content": "(f \"Unexpected error occurred: {str(e)}\")"
                        }
                    ],
                    "content": "other unexpected exceptions\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")from"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        2452,
                        2461
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "prisma.models.FeaturedAgent|None",
                            "range": [
                                2454,
                                2461
                            ],
                            "children": [],
                            "content": "\n\nasync def remove_featured_category(\nagent_id"
                        }
                    ],
                    "content": "e\n\n\nasync def remove_featured_category(\nagent_id"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        2463,
                        2465
                    ],
                    "children": [],
                    "content": "str,category"
                },
                {
                    "type": "Block",
                    "name": "body",
                    "range": [
                        2467,
                        2616
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "name": "try",
                            "range": [
                                2467,
                                2616
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "try_body",
                                    "range": [
                                        2469,
                                        2585
                                    ],
                                    "children": [
                                        {
                                            "type": "Comment",
                                            "name": "get the existing categories",
                                            "range": [
                                                2470,
                                                2475
                                            ],
                                            "children": [],
                                            "content": "->prisma.models."
                                        },
                                        {
                                            "type": "Assignment",
                                            "name": "featured_agent",
                                            "range": [
                                                2476,
                                                2511
                                            ],
                                            "children": [
                                                {
                                                    "type": "AwaitExpression",
                                                    "name": "await",
                                                    "range": [
                                                        2478,
                                                        2511
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "find_unique",
                                                            "range": [
                                                                2489,
                                                                2510
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ObjectExpression",
                                                                    "name": "where",
                                                                    "range": [
                                                                        2494,
                                                                        2498
                                                                    ],
                                                                    "children": [],
                                                                    "content": "featured_agent=await prisma."
                                                                },
                                                                {
                                                                    "type": "ObjectExpression",
                                                                    "name": "include",
                                                                    "range": [
                                                                        2503,
                                                                        2507
                                                                    ],
                                                                    "children": [],
                                                                    "content": "prisma().find_unique"
                                                                }
                                                            ],
                                                            "content": "get the existing categories\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().find_unique(\nwhere"
                                                        }
                                                    ],
                                                    "content": "None:\n\"\"\"Adds a featured category to an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to add to the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\n#get the existing categories\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().find_unique(\nwhere="
                                                }
                                            ],
                                            "content": "FeaturedAgent|None:\n\"\"\"Adds a featured category to an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to add to the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\n#get the existing categories\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().find_unique(\nwhere="
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if",
                                            "range": [
                                                2513,
                                                2524
                                            ],
                                            "children": [
                                                {
                                                    "type": "UnaryExpression",
                                                    "name": "not",
                                                    "range": [
                                                        2514,
                                                        2515
                                                    ],
                                                    "children": [],
                                                    "content": ":agent_id"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "consequent",
                                                    "range": [
                                                        2517,
                                                        2524
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "RaiseStatement",
                                                            "name": "raise",
                                                            "range": [
                                                                2518,
                                                                2523
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "AgentQueryError",
                                                                    "range": [
                                                                        2519,
                                                                        2523
                                                                    ],
                                                                    "children": [],
                                                                    "content": "include={\"agent\":"
                                                                }
                                                            ],
                                                            "content": "\ninclude={\"agent\":"
                                                        }
                                                    ],
                                                    "content": ",\ninclude={\"agent\":True"
                                                }
                                            ],
                                            "content": "\"agentId\":agent_id},\ninclude={\"agent\":True"
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "remove the category from the list",
                                            "range": [
                                                2526,
                                                2533
                                            ],
                                            "children": [],
                                            "content": ",\n)\n\nif not featured_agent"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "featured_agent.featuredCategories.remove",
                                            "range": [
                                                2534,
                                                2542
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "remove",
                                                    "range": [
                                                        2538,
                                                        2541
                                                    ],
                                                    "children": [],
                                                    "content": "(f \"Agent with ID {agent_id} not found.\")"
                                                }
                                            ],
                                            "content": ":\nraise AgentQueryError(f \"Agent with ID {agent_id} not found.\")\n"
                                        },
                                        {
                                            "type": "Assignment",
                                            "name": "featured_agent",
                                            "range": [
                                                2544,
                                                2581
                                            ],
                                            "children": [
                                                {
                                                    "type": "AwaitExpression",
                                                    "name": "await",
                                                    "range": [
                                                        2546,
                                                        2581
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "update",
                                                            "range": [
                                                                2557,
                                                                2580
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ObjectExpression",
                                                                    "name": "where",
                                                                    "range": [
                                                                        2562,
                                                                        2566
                                                                    ],
                                                                    "children": [],
                                                                    "content": "featured_agent=await prisma."
                                                                },
                                                                {
                                                                    "type": "ObjectExpression",
                                                                    "name": "data",
                                                                    "range": [
                                                                        2571,
                                                                        2577
                                                                    ],
                                                                    "children": [],
                                                                    "content": "prisma().update(\n"
                                                                }
                                                            ],
                                                            "content": "(category)\n\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={"
                                                        }
                                                    ],
                                                    "content": "the category from the list\nfeatured_agent.featuredCategories.remove(category)\n\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\""
                                                }
                                            ],
                                            "content": "#remove the category from the list\nfeatured_agent.featuredCategories.remove(category)\n\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\""
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                2583,
                                                2585
                                            ],
                                            "children": [],
                                            "content": "agent_id},"
                                        }
                                    ],
                                    "content": ")->prisma.models.FeaturedAgent|None:\n\"\"\"Adds a featured category to an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to add to the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\n#get the existing categories\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().find_unique(\nwhere={\"agentId\":agent_id},\ninclude={\"agent\":True},\n)\n\nif not featured_agent:\nraise AgentQueryError(f \"Agent with ID {agent_id} not found.\")\n\n#remove the category from the list\nfeatured_agent.featuredCategories.remove(category)\n\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\":agent_id},"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except",
                                    "range": [
                                        2587,
                                        2603
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "PrismaError",
                                            "range": [
                                                2592,
                                                2595
                                            ],
                                            "children": [],
                                            "content": "featured_agent.featuredCategories}"
                                        },
                                        {
                                            "type": "Block",
                                            "name": "body",
                                            "range": [
                                                2596,
                                                2603
                                            ],
                                            "children": [
                                                {
                                                    "type": "RaiseStatement",
                                                    "name": "raise",
                                                    "range": [
                                                        2597,
                                                        2602
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "AgentQueryError",
                                                            "range": [
                                                                2598,
                                                                2602
                                                            ],
                                                            "children": [],
                                                            "content": ")\n\nreturn featured_agent"
                                                        }
                                                    ],
                                                    "content": "\n)\n\nreturn featured_agent"
                                                }
                                            ],
                                            "content": ",\n)\n\nreturn featured_agent\n"
                                        }
                                    ],
                                    "content": "data={\"featuredCategories\":featured_agent.featuredCategories},\n)\n\nreturn featured_agent\n"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except",
                                    "range": [
                                        2604,
                                        2616
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "Exception",
                                            "range": [
                                                2605,
                                                2608
                                            ],
                                            "children": [],
                                            "content": "except prisma.errors"
                                        },
                                        {
                                            "type": "Block",
                                            "name": "body",
                                            "range": [
                                                2609,
                                                2616
                                            ],
                                            "children": [
                                                {
                                                    "type": "RaiseStatement",
                                                    "name": "raise",
                                                    "range": [
                                                        2610,
                                                        2615
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "AgentQueryError",
                                                            "range": [
                                                                2611,
                                                                2615
                                                            ],
                                                            "children": [],
                                                            "content": "as e:\nraise"
                                                        }
                                                    ],
                                                    "content": "PrismaError as e:\nraise"
                                                }
                                            ],
                                            "content": ".PrismaError as e:\nraise AgentQueryError"
                                        }
                                    ],
                                    "content": "\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError"
                                }
                            ],
                            "content": "str\n)->prisma.models.FeaturedAgent|None:\n\"\"\"Adds a featured category to an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to add to the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\n#get the existing categories\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().find_unique(\nwhere={\"agentId\":agent_id},\ninclude={\"agent\":True},\n)\n\nif not featured_agent:\nraise AgentQueryError(f \"Agent with ID {agent_id} not found.\")\n\n#remove the category from the list\nfeatured_agent.featuredCategories.remove(category)\n\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\":agent_id},\ndata={\"featuredCategories\":featured_agent.featuredCategories},\n)\n\nreturn featured_agent\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError"
                        }
                    ],
                    "content": "str\n)->prisma.models.FeaturedAgent|None:\n\"\"\"Adds a featured category to an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to add to the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\n#get the existing categories\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().find_unique(\nwhere={\"agentId\":agent_id},\ninclude={\"agent\":True},\n)\n\nif not featured_agent:\nraise AgentQueryError(f \"Agent with ID {agent_id} not found.\")\n\n#remove the category from the list\nfeatured_agent.featuredCategories.remove(category)\n\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\":agent_id},\ndata={\"featuredCategories\":featured_agent.featuredCategories},\n)\n\nreturn featured_agent\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError"
                }
            ],
            "content": "#Catch any other unexpected exceptions\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")from e\n\n\nasync def remove_featured_category(\nagent_id:str,category:str\n)->prisma.models.FeaturedAgent|None:\n\"\"\"Adds a featured category to an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to add to the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\n#get the existing categories\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().find_unique(\nwhere={\"agentId\":agent_id},\ninclude={\"agent\":True},\n)\n\nif not featured_agent:\nraise AgentQueryError(f \"Agent with ID {agent_id} not found.\")\n\n#remove the category from the list\nfeatured_agent.featuredCategories.remove(category)\n\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\":agent_id},\ndata={\"featuredCategories\":featured_agent.featuredCategories},\n)\n\nreturn featured_agent\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError"
        },
        {
            "type": "FunctionDecl",
            "name": "add_featured_category",
            "range": [
                2617,
                2725
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        2617,
                        2621
                    ],
                    "children": [],
                    "content": "(f \"Database query failed: {str(e)}\")\n"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        2618,
                        2621
                    ],
                    "children": [],
                    "content": "f \"Database query failed: {str(e)}\")\n"
                },
                {
                    "type": "Identifier",
                    "name": "add_featured_category",
                    "range": [
                        2619,
                        2637
                    ],
                    "children": [],
                    "content": "\"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        2620,
                        2630
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "agent_id",
                            "range": [
                                2622,
                                2624
                            ],
                            "children": [],
                            "content": "except Exception as"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                2624,
                                2627
                            ],
                            "children": [],
                            "content": "as e:\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "category",
                            "range": [
                                2626,
                                2628
                            ],
                            "children": [],
                            "content": ":\nraise"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                2628,
                                2630
                            ],
                            "children": [],
                            "content": "raise AgentQueryError("
                        }
                    ],
                    "content": ")\nexcept Exception as e:\nraise AgentQueryError("
                },
                {
                    "type": "ReturnType",
                    "name": "->",
                    "range": [
                        2631,
                        2633
                    ],
                    "children": [],
                    "content": "f \"Unexpected error occurred: {str(e)}\")"
                },
                {
                    "type": "ReturnTypeValue",
                    "name": "prisma.models.FeaturedAgent|None",
                    "range": [
                        2633,
                        2639
                    ],
                    "children": [],
                    "content": ")\n\n\nasync def add_featured_category"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        2642,
                        2644
                    ],
                    "children": [],
                    "content": "agent_id:str"
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        2646,
                        2725
                    ],
                    "children": [
                        {
                            "type": "TryKeyword",
                            "name": "try",
                            "range": [
                                2646,
                                2649
                            ],
                            "children": [],
                            "content": "category:str\n"
                        },
                        {
                            "type": "Block",
                            "name": "try_block",
                            "range": [
                                2649,
                                2694
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "featured_agent",
                                    "range": [
                                        2649,
                                        2690
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "featured_agent",
                                            "range": [
                                                2649,
                                                2662
                                            ],
                                            "children": [],
                                            "content": "\n)->prisma.models.FeaturedAgent|None:\n\"\""
                                        },
                                        {
                                            "type": "AwaitKeyword",
                                            "name": "await",
                                            "range": [
                                                2651,
                                                2655
                                            ],
                                            "children": [],
                                            "content": "->prisma.models"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "prisma.models.FeaturedAgent.prisma().update",
                                            "range": [
                                                2652,
                                                2689
                                            ],
                                            "children": [
                                                {
                                                    "type": "Arguments",
                                                    "name": "arguments",
                                                    "range": [
                                                        2663,
                                                        2689
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "KeywordArgument",
                                                            "name": "where",
                                                            "range": [
                                                                2665,
                                                                2671
                                                            ],
                                                            "children": [],
                                                            "content": "\ntry:\nfeatured_agent=await"
                                                        },
                                                        {
                                                            "type": "KeywordArgument",
                                                            "name": "data",
                                                            "range": [
                                                                2674,
                                                                2686
                                                            ],
                                                            "children": [],
                                                            "content": "models.FeaturedAgent.prisma().update(\nwhere="
                                                        }
                                                    ],
                                                    "content": "\"Removes a featured category from an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to remove from the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\":"
                                                }
                                            ],
                                            "content": ">prisma.models.FeaturedAgent|None:\n\"\"\"Removes a featured category from an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to remove from the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\":"
                                        }
                                    ],
                                    "content": "\n)->prisma.models.FeaturedAgent|None:\n\"\"\"Removes a featured category from an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to remove from the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\":agent_id"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        2692,
                                        2694
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "featured_agent",
                                            "range": [
                                                2693,
                                                2694
                                            ],
                                            "children": [],
                                            "content": "\ndata"
                                        }
                                    ],
                                    "content": ",\ndata"
                                }
                            ],
                            "content": "\n)->prisma.models.FeaturedAgent|None:\n\"\"\"Removes a featured category from an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to remove from the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\":agent_id},\ndata"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except",
                            "range": [
                                2696,
                                2712
                            ],
                            "children": [
                                {
                                    "type": "ExceptKeyword",
                                    "name": "except",
                                    "range": [
                                        2696,
                                        2702
                                    ],
                                    "children": [],
                                    "content": "{\"featuredCategories\":{\"push\":["
                                },
                                {
                                    "type": "Identifier",
                                    "name": "prisma.errors.PrismaError",
                                    "range": [
                                        2697,
                                        2701
                                    ],
                                    "children": [],
                                    "content": "\"featuredCategories\":{\"push\":"
                                },
                                {
                                    "type": "AsKeyword",
                                    "name": "as",
                                    "range": [
                                        2702,
                                        2704
                                    ],
                                    "children": [],
                                    "content": "[category]"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "e",
                                    "range": [
                                        2703,
                                        2704
                                    ],
                                    "children": [],
                                    "content": "category]"
                                },
                                {
                                    "type": "Block",
                                    "name": "except_block",
                                    "range": [
                                        2704,
                                        2712
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                2706,
                                                2711
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "AgentQueryError",
                                                    "range": [
                                                        2707,
                                                        2711
                                                    ],
                                                    "children": [],
                                                    "content": ",\n)\n\n"
                                                },
                                                {
                                                    "type": "Arguments",
                                                    "name": "arguments",
                                                    "range": [
                                                        2708,
                                                        2711
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "f\"Database query failed: {str(e)}\"",
                                                            "range": [
                                                                2709,
                                                                2711
                                                            ],
                                                            "children": [],
                                                            "content": ")\n\n"
                                                        }
                                                    ],
                                                    "content": "\n)\n\n"
                                                }
                                            ],
                                            "content": "},\n)\n\n"
                                        }
                                    ],
                                    "content": "]}},\n)\n\nreturn"
                                }
                            ],
                            "content": "{\"featuredCategories\":{\"push\":[category]}},\n)\n\nreturn"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except",
                            "range": [
                                2713,
                                2725
                            ],
                            "children": [
                                {
                                    "type": "ExceptKeyword",
                                    "name": "except",
                                    "range": [
                                        2713,
                                        2717
                                    ],
                                    "children": [],
                                    "content": "featured_agent\n\nexcept prisma"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "Exception",
                                    "range": [
                                        2714,
                                        2717
                                    ],
                                    "children": [],
                                    "content": "\n\nexcept prisma"
                                },
                                {
                                    "type": "AsKeyword",
                                    "name": "as",
                                    "range": [
                                        2715,
                                        2717
                                    ],
                                    "children": [],
                                    "content": "\nexcept prisma"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "e",
                                    "range": [
                                        2716,
                                        2717
                                    ],
                                    "children": [],
                                    "content": "except prisma"
                                },
                                {
                                    "type": "Block",
                                    "name": "except_block",
                                    "range": [
                                        2717,
                                        2725
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                2719,
                                                2724
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "AgentQueryError",
                                                    "range": [
                                                        2720,
                                                        2724
                                                    ],
                                                    "children": [],
                                                    "content": ".PrismaError as e:"
                                                },
                                                {
                                                    "type": "Arguments",
                                                    "name": "arguments",
                                                    "range": [
                                                        2721,
                                                        2724
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "f\"Unexpected error occurred: {str(e)}\"",
                                                            "range": [
                                                                2722,
                                                                2724
                                                            ],
                                                            "children": [],
                                                            "content": "as e:"
                                                        }
                                                    ],
                                                    "content": "PrismaError as e:"
                                                }
                                            ],
                                            "content": "errors.PrismaError as e:"
                                        }
                                    ],
                                    "content": "prisma.errors.PrismaError as e:\n"
                                }
                            ],
                            "content": "featured_agent\n\nexcept prisma.errors.PrismaError as e:\n"
                        }
                    ],
                    "content": "category:str\n)->prisma.models.FeaturedAgent|None:\n\"\"\"Removes a featured category from an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to remove from the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\":agent_id},\ndata={\"featuredCategories\":{\"push\":[category]}},\n)\n\nreturn featured_agent\n\nexcept prisma.errors.PrismaError as e:\n"
                }
            ],
            "content": "(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def add_featured_category(\nagent_id:str,category:str\n)->prisma.models.FeaturedAgent|None:\n\"\"\"Removes a featured category from an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to remove from the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\":agent_id},\ndata={\"featuredCategories\":{\"push\":[category]}},\n)\n\nreturn featured_agent\n\nexcept prisma.errors.PrismaError as e:\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_agent_featured",
            "range": [
                2726,
                2811
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        2726,
                        2730
                    ],
                    "children": [],
                    "content": "raise AgentQueryError(f \"Database query failed: {str(e)}\""
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        2727,
                        2730
                    ],
                    "children": [],
                    "content": "AgentQueryError(f \"Database query failed: {str(e)}\""
                },
                {
                    "type": "FunctionName",
                    "name": "get_agent_featured",
                    "range": [
                        2728,
                        2744
                    ],
                    "children": [],
                    "content": "(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        2729,
                        2733
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "agent_id",
                            "range": [
                                2730,
                                2733
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        2731,
                                        2733
                                    ],
                                    "children": [],
                                    "content": ")\nexcept"
                                }
                            ],
                            "content": "\"Database query failed: {str(e)}\")\nexcept"
                        }
                    ],
                    "content": "f \"Database query failed: {str(e)}\")\nexcept"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        2734,
                        2743
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "prisma.models.FeaturedAgent",
                            "range": [
                                2736,
                                2740
                            ],
                            "children": [],
                            "content": "e:\nraise AgentQueryError"
                        },
                        {
                            "type": "UnionType",
                            "name": "|",
                            "range": [
                                2741,
                                2742
                            ],
                            "children": [],
                            "content": "(f"
                        },
                        {
                            "type": "Type",
                            "name": "None",
                            "range": [
                                2742,
                                2743
                            ],
                            "children": [],
                            "content": "f \"Unexpected error occurred: {str(e)}\""
                        }
                    ],
                    "content": "Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\""
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        2744,
                        2811
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                2745,
                                2747
                            ],
                            "children": [],
                            "content": "\n\n\n"
                        },
                        {
                            "type": "TryStatement",
                            "name": "try",
                            "range": [
                                2749,
                                2811
                            ],
                            "children": [
                                {
                                    "type": "TryBlock",
                                    "name": "try_block",
                                    "range": [
                                        2751,
                                        2778
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "featured_agent",
                                            "range": [
                                                2752,
                                                2777
                                            ],
                                            "children": [
                                                {
                                                    "type": "AwaitExpression",
                                                    "name": "await",
                                                    "range": [
                                                        2754,
                                                        2777
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "find_unique",
                                                            "range": [
                                                                2765,
                                                                2777
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "prisma.models.FeaturedAgent.prisma",
                                                                    "range": [
                                                                        2755,
                                                                        2764
                                                                    ],
                                                                    "children": [],
                                                                    "content": ")->prisma.models.FeaturedAgent|None"
                                                                },
                                                                {
                                                                    "type": "Arguments",
                                                                    "name": "arguments",
                                                                    "range": [
                                                                        2766,
                                                                        2777
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "KeywordArgument",
                                                                            "name": "where",
                                                                            "range": [
                                                                                2768,
                                                                                2774
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ObjectExpression",
                                                                                    "name": "object",
                                                                                    "range": [
                                                                                        2770,
                                                                                        2774
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "agentId",
                                                                                            "range": [
                                                                                                2771,
                                                                                                2773
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "try:\n"
                                                                                        }
                                                                                    ],
                                                                                    "content": "\ntry:\nfeatured_agent"
                                                                                }
                                                                            ],
                                                                            "content": "\"Retrieve an agent's featured categories from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent"
                                                                        }
                                                                    ],
                                                                    "content": "\n\"\"\"Retrieve an agent's featured categories from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma"
                                                                }
                                                            ],
                                                            "content": ":\n\"\"\"Retrieve an agent's featured categories from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma"
                                                        }
                                                    ],
                                                    "content": "str)->prisma.models.FeaturedAgent|None:\n\"\"\"Retrieve an agent's featured categories from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma"
                                                }
                                            ],
                                            "content": "agent_id:str)->prisma.models.FeaturedAgent|None:\n\"\"\"Retrieve an agent's featured categories from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                2779,
                                                2781
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "featured_agent",
                                                    "range": [
                                                        2780,
                                                        2781
                                                    ],
                                                    "children": [],
                                                    "content": ".FeaturedAgent"
                                                }
                                            ],
                                            "content": "models.FeaturedAgent"
                                        }
                                    ],
                                    "content": "(agent_id:str)->prisma.models.FeaturedAgent|None:\n\"\"\"Retrieve an agent's featured categories from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma."
                                },
                                {
                                    "type": "ExceptClause",
                                    "name": "except",
                                    "range": [
                                        2782,
                                        2798
                                    ],
                                    "children": [
                                        {
                                            "type": "ExceptionType",
                                            "name": "PrismaError",
                                            "range": [
                                                2783,
                                                2787
                                            ],
                                            "children": [],
                                            "content": "prisma().find_unique"
                                        },
                                        {
                                            "type": "Alias",
                                            "name": "e",
                                            "range": [
                                                2788,
                                                2789
                                            ],
                                            "children": [],
                                            "content": "(\n"
                                        },
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                2792,
                                                2798
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "AgentQueryError",
                                                    "range": [
                                                        2793,
                                                        2798
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "TemplateLiteral",
                                                            "name": "f-string",
                                                            "range": [
                                                                2795,
                                                                2797
                                                            ],
                                                            "children": [],
                                                            "content": "agent_id},"
                                                        }
                                                    ],
                                                    "content": "\"agentId\":agent_id},\n"
                                                }
                                            ],
                                            "content": "{\"agentId\":agent_id},\n"
                                        }
                                    ],
                                    "content": ".prisma().find_unique(\nwhere={\"agentId\":agent_id},\n"
                                },
                                {
                                    "type": "ExceptClause",
                                    "name": "except",
                                    "range": [
                                        2799,
                                        2811
                                    ],
                                    "children": [
                                        {
                                            "type": "ExceptionType",
                                            "name": "Exception",
                                            "range": [
                                                2800,
                                                2801
                                            ],
                                            "children": [],
                                            "content": "\nreturn"
                                        },
                                        {
                                            "type": "Alias",
                                            "name": "e",
                                            "range": [
                                                2802,
                                                2803
                                            ],
                                            "children": [],
                                            "content": "featured_agent\n"
                                        },
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                2805,
                                                2811
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "AgentQueryError",
                                                    "range": [
                                                        2806,
                                                        2811
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "TemplateLiteral",
                                                            "name": "f-string",
                                                            "range": [
                                                                2808,
                                                                2810
                                                            ],
                                                            "children": [],
                                                            "content": ".PrismaError as"
                                                        }
                                                    ],
                                                    "content": ".errors.PrismaError as e"
                                                }
                                            ],
                                            "content": "prisma.errors.PrismaError as e"
                                        }
                                    ],
                                    "content": ")\nreturn featured_agent\nexcept prisma.errors.PrismaError as e"
                                }
                            ],
                            "content": "def get_agent_featured(agent_id:str)->prisma.models.FeaturedAgent|None:\n\"\"\"Retrieve an agent's featured categories from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().find_unique(\nwhere={\"agentId\":agent_id},\n)\nreturn featured_agent\nexcept prisma.errors.PrismaError as e"
                        }
                    ],
                    "content": ")\n\n\nasync def get_agent_featured(agent_id:str)->prisma.models.FeaturedAgent|None:\n\"\"\"Retrieve an agent's featured categories from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().find_unique(\nwhere={\"agentId\":agent_id},\n)\nreturn featured_agent\nexcept prisma.errors.PrismaError as e"
                }
            ],
            "content": "raise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_featured(agent_id:str)->prisma.models.FeaturedAgent|None:\n\"\"\"Retrieve an agent's featured categories from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().find_unique(\nwhere={\"agentId\":agent_id},\n)\nreturn featured_agent\nexcept prisma.errors.PrismaError as e"
        },
        {
            "type": "FunctionDecl",
            "name": "get_not_featured_agents",
            "range": [
                2812,
                3020
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "async",
                    "range": [
                        2812,
                        2816
                    ],
                    "children": [],
                    "content": ":\nraise AgentQueryError("
                },
                {
                    "type": "Keyword",
                    "name": "def",
                    "range": [
                        2813,
                        2816
                    ],
                    "children": [],
                    "content": "\nraise AgentQueryError("
                },
                {
                    "type": "Identifier",
                    "name": "get_not_featured_agents",
                    "range": [
                        2814,
                        2834
                    ],
                    "children": [],
                    "content": "raise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        2815,
                        2829
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "page",
                            "range": [
                                2817,
                                2821
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        2819,
                                        2821
                                    ],
                                    "children": [],
                                    "content": ")\nexcept"
                                }
                            ],
                            "content": "f \"Database query failed: {str(e)}\")\nexcept"
                        },
                        {
                            "type": "Parameter",
                            "name": "page_size",
                            "range": [
                                2823,
                                2827
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        2825,
                                        2827
                                    ],
                                    "children": [],
                                    "content": ":\nraise"
                                }
                            ],
                            "content": "as e:\nraise"
                        }
                    ],
                    "content": "AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError("
                },
                {
                    "type": "ReturnType",
                    "name": "typing.List[prisma.models.Agents]",
                    "range": [
                        2830,
                        2841
                    ],
                    "children": [],
                    "content": "f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_not_featured_agents(\npage"
                },
                {
                    "type": "Docstring",
                    "name": "Retrieve a list of not featured agents from the database.",
                    "range": [
                        2844,
                        2846
                    ],
                    "children": [],
                    "content": "=1,"
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        2848,
                        3020
                    ],
                    "children": [
                        {
                            "type": "Block",
                            "name": "try_block",
                            "range": [
                                2850,
                                2987
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "agents",
                                    "range": [
                                        2851,
                                        2863
                                    ],
                                    "children": [
                                        {
                                            "type": "AwaitExpression",
                                            "name": "await",
                                            "range": [
                                                2853,
                                                2859
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "get_client",
                                                    "range": [
                                                        2854,
                                                        2860
                                                    ],
                                                    "children": [],
                                                    "content": "->typing.List[prisma"
                                                }
                                            ],
                                            "content": ")->typing.List["
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "query_raw",
                                            "range": [
                                                2861,
                                                2986
                                            ],
                                            "children": [
                                                {
                                                    "type": "StringLiteral",
                                                    "name": "query",
                                                    "range": [
                                                        2865,
                                                        2974
                                                    ],
                                                    "children": [],
                                                    "content": "]:\n\"\"\" \\n     Retrieve a list of not featured agents from the database. \\n     \"\"\"\ntry:\nagents=await prisma.client.get_client().query_raw(\nquery=f\"\"\" \\n             SELECT  \\n                 \" market\".\"Agents \".id,  \\n                 \" market\".\"Agents\".\"createdAt \",  \\n                 \" market\".\"Agents\".\"updatedAt \",  \\n                 \" market\".\"Agents \".version,  \\n                 \" market\".\"Agents \".name,  \\n                 LEFT(\" market\".\"Agents \".description, 500) AS description,  \\n                 \" market\".\"Agents \".author,  \\n                 \" market\".\"Agents \".keywords,  \\n                 \" market\".\"Agents \".categories,  \\n                 \" market\".\"Agents \".graph, \\n                 \" market\".\"Agents\".\"submissionStatus \", \\n                 \" market\".\"Agents\".\"submissionDate \", \\n                 \" market\".\"Agents \".search::text AS search \\n             FROM \" market\".\"Agents \" \\n             LEFT JOIN \" market\".\"FeaturedAgent \" ON \" market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId \" \\n             WHERE (\" market"
                                                },
                                                {
                                                    "type": "Assignment",
                                                    "name": "model",
                                                    "range": [
                                                        2977,
                                                        2984
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "prisma.models.Agents",
                                                            "range": [
                                                                2979,
                                                                2983
                                                            ],
                                                            "children": [],
                                                            "content": "\" IS NULL OR \" market\".\"FeaturedAgent\".\""
                                                        }
                                                    ],
                                                    "content": "\".\"agentId \" IS NULL OR \" market\".\"FeaturedAgent\".\"featuredCategories"
                                                }
                                            ],
                                            "content": ".models.Agents]:\n\"\"\" \\n     Retrieve a list of not featured agents from the database. \\n     \"\"\"\ntry:\nagents=await prisma.client.get_client().query_raw(\nquery=f\"\"\" \\n             SELECT  \\n                 \" market\".\"Agents \".id,  \\n                 \" market\".\"Agents\".\"createdAt \",  \\n                 \" market\".\"Agents\".\"updatedAt \",  \\n                 \" market\".\"Agents \".version,  \\n                 \" market\".\"Agents \".name,  \\n                 LEFT(\" market\".\"Agents \".description, 500) AS description,  \\n                 \" market\".\"Agents \".author,  \\n                 \" market\".\"Agents \".keywords,  \\n                 \" market\".\"Agents \".categories,  \\n                 \" market\".\"Agents \".graph, \\n                 \" market\".\"Agents\".\"submissionStatus \", \\n                 \" market\".\"Agents\".\"submissionDate \", \\n                 \" market\".\"Agents \".search::text AS search \\n             FROM \" market\".\"Agents \" \\n             LEFT JOIN \" market\".\"FeaturedAgent \" ON \" market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId \" \\n             WHERE (\" market\".\"FeaturedAgent\".\"agentId \" IS NULL OR \" market\".\"FeaturedAgent\".\"featuredCategories \" = '{{}}') \\n                 AND \" market"
                                        }
                                    ],
                                    "content": "10\n)->typing.List[prisma.models."
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        2988,
                                        2990
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "agents",
                                            "range": [
                                                2989,
                                                2990
                                            ],
                                            "children": [],
                                            "content": "\".\"submissionStatus"
                                        }
                                    ],
                                    "content": "Agents\".\"submissionStatus"
                                }
                            ],
                            "content": "=10\n)->typing.List[prisma.models.Agents]:\n\"\"\" \\n     Retrieve a list of not featured agents from the database. \\n     \"\"\"\ntry:\nagents=await prisma.client.get_client().query_raw(\nquery=f\"\"\" \\n             SELECT  \\n                 \" market\".\"Agents \".id,  \\n                 \" market\".\"Agents\".\"createdAt \",  \\n                 \" market\".\"Agents\".\"updatedAt \",  \\n                 \" market\".\"Agents \".version,  \\n                 \" market\".\"Agents \".name,  \\n                 LEFT(\" market\".\"Agents \".description, 500) AS description,  \\n                 \" market\".\"Agents \".author,  \\n                 \" market\".\"Agents \".keywords,  \\n                 \" market\".\"Agents \".categories,  \\n                 \" market\".\"Agents \".graph, \\n                 \" market\".\"Agents\".\"submissionStatus \", \\n                 \" market\".\"Agents\".\"submissionDate \", \\n                 \" market\".\"Agents \".search::text AS search \\n             FROM \" market\".\"Agents \" \\n             LEFT JOIN \" market\".\"FeaturedAgent \" ON \" market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId \" \\n             WHERE (\" market\".\"FeaturedAgent\".\"agentId \" IS NULL OR \" market\".\"FeaturedAgent\".\"featuredCategories \" = '{{}}') \\n                 AND \" market\".\""
                        },
                        {
                            "type": "ExceptClause",
                            "name": "except",
                            "range": [
                                2991,
                                3007
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "PrismaError",
                                    "range": [
                                        2992,
                                        2996
                                    ],
                                    "children": [],
                                    "content": "market\".\"Agents\".\"createdAt"
                                },
                                {
                                    "type": "Block",
                                    "name": "except_block",
                                    "range": [
                                        2999,
                                        3007
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                3001,
                                                3006
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "AgentQueryError",
                                                    "range": [
                                                        3002,
                                                        3006
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "StringLiteral",
                                                            "name": "Database query failed: {str(e)}",
                                                            "range": [
                                                                3004,
                                                                3005
                                                            ],
                                                            "children": [],
                                                            "content": ".models"
                                                        }
                                                    ],
                                                    "content": "=prisma.models."
                                                }
                                            ],
                                            "content": "model=prisma.models."
                                        }
                                    ],
                                    "content": ",\nmodel=prisma.models.Agents"
                                }
                            ],
                            "content": "\" = 'APPROVED' \\n             ORDER BY \" market\".\"Agents\".\"createdAt \" DESC \\n             LIMIT {page_size} OFFSET {page_size * (page - 1)} \\n             \"\"\",\nmodel=prisma.models.Agents"
                        },
                        {
                            "type": "ExceptClause",
                            "name": "except",
                            "range": [
                                3008,
                                3020
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "Exception",
                                    "range": [
                                        3009,
                                        3011
                                    ],
                                    "children": [],
                                    "content": "\n)\n"
                                },
                                {
                                    "type": "Block",
                                    "name": "except_block",
                                    "range": [
                                        3012,
                                        3020
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                3014,
                                                3019
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "AgentQueryError",
                                                    "range": [
                                                        3015,
                                                        3019
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "StringLiteral",
                                                            "name": "Unexpected error occurred: {str(e)}",
                                                            "range": [
                                                                3017,
                                                                3018
                                                            ],
                                                            "children": [],
                                                            "content": ".errors"
                                                        }
                                                    ],
                                                    "content": "except prisma.errors."
                                                }
                                            ],
                                            "content": "\nexcept prisma.errors."
                                        }
                                    ],
                                    "content": "return agents\nexcept prisma.errors.PrismaError"
                                }
                            ],
                            "content": ",\n)\nreturn agents\nexcept prisma.errors.PrismaError"
                        }
                    ],
                    "content": ":int=10\n)->typing.List[prisma.models.Agents]:\n\"\"\" \\n     Retrieve a list of not featured agents from the database. \\n     \"\"\"\ntry:\nagents=await prisma.client.get_client().query_raw(\nquery=f\"\"\" \\n             SELECT  \\n                 \" market\".\"Agents \".id,  \\n                 \" market\".\"Agents\".\"createdAt \",  \\n                 \" market\".\"Agents\".\"updatedAt \",  \\n                 \" market\".\"Agents \".version,  \\n                 \" market\".\"Agents \".name,  \\n                 LEFT(\" market\".\"Agents \".description, 500) AS description,  \\n                 \" market\".\"Agents \".author,  \\n                 \" market\".\"Agents \".keywords,  \\n                 \" market\".\"Agents \".categories,  \\n                 \" market\".\"Agents \".graph, \\n                 \" market\".\"Agents\".\"submissionStatus \", \\n                 \" market\".\"Agents\".\"submissionDate \", \\n                 \" market\".\"Agents \".search::text AS search \\n             FROM \" market\".\"Agents \" \\n             LEFT JOIN \" market\".\"FeaturedAgent \" ON \" market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId \" \\n             WHERE (\" market\".\"FeaturedAgent\".\"agentId \" IS NULL OR \" market\".\"FeaturedAgent\".\"featuredCategories \" = '{{}}') \\n                 AND \" market\".\"Agents\".\"submissionStatus \" = 'APPROVED' \\n             ORDER BY \" market\".\"Agents\".\"createdAt \" DESC \\n             LIMIT {page_size} OFFSET {page_size * (page - 1)} \\n             \"\"\",\nmodel=prisma.models.Agents,\n)\nreturn agents\nexcept prisma.errors.PrismaError"
                }
            ],
            "content": ":\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_not_featured_agents(\npage:int=1,page_size:int=10\n)->typing.List[prisma.models.Agents]:\n\"\"\" \\n     Retrieve a list of not featured agents from the database. \\n     \"\"\"\ntry:\nagents=await prisma.client.get_client().query_raw(\nquery=f\"\"\" \\n             SELECT  \\n                 \" market\".\"Agents \".id,  \\n                 \" market\".\"Agents\".\"createdAt \",  \\n                 \" market\".\"Agents\".\"updatedAt \",  \\n                 \" market\".\"Agents \".version,  \\n                 \" market\".\"Agents \".name,  \\n                 LEFT(\" market\".\"Agents \".description, 500) AS description,  \\n                 \" market\".\"Agents \".author,  \\n                 \" market\".\"Agents \".keywords,  \\n                 \" market\".\"Agents \".categories,  \\n                 \" market\".\"Agents \".graph, \\n                 \" market\".\"Agents\".\"submissionStatus \", \\n                 \" market\".\"Agents\".\"submissionDate \", \\n                 \" market\".\"Agents \".search::text AS search \\n             FROM \" market\".\"Agents \" \\n             LEFT JOIN \" market\".\"FeaturedAgent \" ON \" market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId \" \\n             WHERE (\" market\".\"FeaturedAgent\".\"agentId \" IS NULL OR \" market\".\"FeaturedAgent\".\"featuredCategories \" = '{{}}') \\n                 AND \" market\".\"Agents\".\"submissionStatus \" = 'APPROVED' \\n             ORDER BY \" market\".\"Agents\".\"createdAt \" DESC \\n             LIMIT {page_size} OFFSET {page_size * (page - 1)} \\n             \"\"\",\nmodel=prisma.models.Agents,\n)\nreturn agents\nexcept prisma.errors.PrismaError"
        },
        {
            "type": "FunctionDecl",
            "name": "get_all_categories",
            "range": [
                3021,
                3164
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        3021,
                        3021
                    ],
                    "children": [],
                    "content": "as"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        3022,
                        3022
                    ],
                    "children": [],
                    "content": "e"
                },
                {
                    "type": "Identifier",
                    "name": "get_all_categories",
                    "range": [
                        3023,
                        3023
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "ReturnType",
                    "name": "-> market.model.CategoriesResponse",
                    "range": [
                        3026,
                        3032
                    ],
                    "children": [],
                    "content": "AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept"
                },
                {
                    "type": "Docstring",
                    "name": "\"\"\" \\n     Retrieve all unique categories from the database. \\n  \\n     Returns: \\n         CategoriesResponse: A list of unique categories. \\n     \"\"\"",
                    "range": [
                        3035,
                        3037
                    ],
                    "children": [],
                    "content": "e:\n"
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        3039,
                        3134
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])",
                            "range": [
                                3042,
                                3062
                            ],
                            "children": [],
                            "content": "\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_all_categories()->market.model.CategoriesResponse:\n\"\"\" \\n     Retrieve all unique categories from the database. \\n  \\n     Returns: \\n         CategoriesResponse: A list of unique categories. \\n     \""
                        },
                        {
                            "type": "Comment",
                            "name": "# Aggregate categories on the Python side",
                            "range": [
                                3065,
                                3072
                            ],
                            "children": [],
                            "content": "try:\nagents=await prisma."
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "all_categories = set()",
                            "range": [
                                3073,
                                3077
                            ],
                            "children": [],
                            "content": "models.Agents.prisma"
                        },
                        {
                            "type": "ForStatement",
                            "name": "for agent in agents:",
                            "range": [
                                3079,
                                3093
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "all_categories.update(agent.categories)",
                                    "range": [
                                        3085,
                                        3092
                                    ],
                                    "children": [],
                                    "content": "[\"categories\"])\n\n#Aggregate"
                                }
                            ],
                            "content": ").find_many(distinct=[\"categories\"])\n\n#Aggregate categories"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "unique_categories = sorted(list(all_categories))",
                            "range": [
                                3095,
                                3103
                            ],
                            "children": [],
                            "content": "the Python side\nall_categories=set()"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return market.model.CategoriesResponse(unique_categories=unique_categories)",
                            "range": [
                                3106,
                                3116
                            ],
                            "children": [],
                            "content": "agent in agents:\nall_categories.update(agent."
                        },
                        {
                            "type": "CatchClause",
                            "name": "except prisma.errors.PrismaError as e:",
                            "range": [
                                3118,
                                3133
                            ],
                            "children": [
                                {
                                    "type": "ThrowStatement",
                                    "name": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                    "range": [
                                        3128,
                                        3133
                                    ],
                                    "children": [],
                                    "content": "))\n\nreturn market"
                                }
                            ],
                            "content": ")\n\nunique_categories=sorted(list(all_categories))\n\nreturn market"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except Exception:",
                            "range": [
                                3135,
                                3163
                            ],
                            "children": [
                                {
                                    "type": "Comment",
                                    "name": "# Return an empty list of categories in case of unexpected errors",
                                    "range": [
                                        3139,
                                        3151
                                    ],
                                    "children": [],
                                    "content": "unique_categories=unique_categories)\nexcept prisma.errors.PrismaError as e"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return market.model.CategoriesResponse(unique_categories=[])",
                                    "range": [
                                        3152,
                                        3163
                                    ],
                                    "children": [],
                                    "content": ":\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception:"
                                }
                            ],
                            "content": "model.CategoriesResponse(unique_categories=unique_categories)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception:"
                        }
                    ],
                    "content": "AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_all_categories()->market.model.CategoriesResponse:\n\"\"\" \\n     Retrieve all unique categories from the database. \\n  \\n     Returns: \\n         CategoriesResponse: A list of unique categories. \\n     \"\"\"\ntry:\nagents=await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n#Aggregate categories on the Python side\nall_categories=set()\nfor agent in agents:\nall_categories.update(agent.categories)\n\nunique_categories=sorted(list(all_categories))\n\nreturn market."
                }
            ],
            "content": "as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_all_categories()->market.model.CategoriesResponse:\n\"\"\" \\n     Retrieve all unique categories from the database. \\n  \\n     Returns: \\n         CategoriesResponse: A list of unique categories. \\n     \"\"\"\ntry:\nagents=await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n#Aggregate categories on the Python side\nall_categories=set()\nfor agent in agents:\nall_categories.update(agent.categories)\n\nunique_categories=sorted(list(all_categories))\n\nreturn market.model.CategoriesResponse(unique_categories=unique_categories)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception:\n"
        },
        {
            "type": "FunctionDecl",
            "name": "create_agent_installed_event",
            "range": [
                3165,
                3268
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "async",
                    "range": [
                        3165,
                        3169
                    ],
                    "children": [],
                    "content": "#Return an empty list"
                },
                {
                    "type": "Keyword",
                    "name": "def",
                    "range": [
                        3166,
                        3169
                    ],
                    "children": [],
                    "content": "Return an empty list"
                },
                {
                    "type": "Identifier",
                    "name": "create_agent_installed_event",
                    "range": [
                        3167,
                        3191
                    ],
                    "children": [],
                    "content": "an empty list of categories in case of unexpected errors\nreturn market.model.CategoriesResponse(unique_categories=[])\n\n"
                },
                {
                    "type": "Parameter",
                    "name": "event_data",
                    "range": [
                        3170,
                        3176
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "event_data",
                            "range": [
                                3170,
                                3176
                            ],
                            "children": [],
                            "content": "of categories in case of unexpected errors"
                        },
                        {
                            "type": "Type",
                            "name": "market.model.AgentInstalledFromMarketplaceEventData",
                            "range": [
                                3172,
                                3176
                            ],
                            "children": [],
                            "content": "in case of unexpected errors"
                        }
                    ],
                    "content": "of categories in case of unexpected errors"
                },
                {
                    "type": "Block",
                    "name": "try",
                    "range": [
                        3182,
                        3268
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "try",
                            "range": [
                                3182,
                                3185
                            ],
                            "children": [],
                            "content": ".CategoriesResponse(unique_categories"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "await prisma.models.InstallTracker.prisma().create(data={...})",
                            "range": [
                                3185,
                                3237
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "await",
                                    "range": [
                                        3185,
                                        3190
                                    ],
                                    "children": [],
                                    "content": "unique_categories=[])\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "prisma.models.InstallTracker.prisma().create",
                                    "range": [
                                        3190,
                                        3237
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "prisma.models.InstallTracker.prisma",
                                            "range": [
                                                3190,
                                                3193
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "prisma",
                                                    "range": [
                                                        3190,
                                                        3196
                                                    ],
                                                    "children": [],
                                                    "content": "\n\n\nasync def create_agent_installed_event("
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "models",
                                                    "range": [
                                                        3197,
                                                        3202
                                                    ],
                                                    "children": [],
                                                    "content": "\nevent_data:market.model"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "InstallTracker",
                                                    "range": [
                                                        3203,
                                                        3216
                                                    ],
                                                    "children": [],
                                                    "content": ".AgentInstalledFromMarketplaceEventData,\n):\ntry:\nawait prisma.models"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "prisma",
                                                    "range": [
                                                        3217,
                                                        3222
                                                    ],
                                                    "children": [],
                                                    "content": ".InstallTracker.prisma()"
                                                }
                                            ],
                                            "content": "\n\n\nasync"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "create",
                                            "range": [
                                                3222,
                                                3237
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "create",
                                                    "range": [
                                                        3222,
                                                        3227
                                                    ],
                                                    "children": [],
                                                    "content": ").create(\ndata"
                                                },
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "data",
                                                    "range": [
                                                        3228,
                                                        3235
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "installedAgentId",
                                                            "range": [
                                                                3228,
                                                                3231
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "installedAgentId",
                                                                    "range": [
                                                                        3228,
                                                                        3243
                                                                    ],
                                                                    "children": [],
                                                                    "content": "={\n\"installedAgentId\":event_data.installed_agent_id,\n\"marketplaceAgentId\":event_data.marketplace_agent_id,"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "event_data.installed_agent_id",
                                                                    "range": [
                                                                        3244,
                                                                        3261
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\n\"installationLocation\":prisma.enums.InstallationLocation(\nevent_data.installation_location.name\n),"
                                                                }
                                                            ],
                                                            "content": "={\n\"installedAgentId\""
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "marketplaceAgentId",
                                                            "range": [
                                                                3231,
                                                                3234
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "marketplaceAgentId",
                                                                    "range": [
                                                                        3231,
                                                                        3248
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\"installedAgentId\":event_data.installed_agent_id,\n\"marketplaceAgentId\":event_data.marketplace_agent_id,\n\"installationLocation\":prisma."
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "event_data.marketplace_agent_id",
                                                                    "range": [
                                                                        3249,
                                                                        3266
                                                                    ],
                                                                    "children": [],
                                                                    "content": "enums.InstallationLocation(\nevent_data.installation_location.name\n),\n}\n)\n"
                                                                }
                                                            ],
                                                            "content": "\"installedAgentId\":event_data."
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "installationLocation",
                                                            "range": [
                                                                3234,
                                                                3235
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "installationLocation",
                                                                    "range": [
                                                                        3234,
                                                                        3253
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".installed_agent_id,\n\"marketplaceAgentId\":event_data.marketplace_agent_id,\n\"installationLocation\":prisma.enums.InstallationLocation(\n"
                                                                },
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "prisma.enums.InstallationLocation",
                                                                    "range": [
                                                                        3254,
                                                                        3265
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "prisma",
                                                                            "range": [
                                                                                3254,
                                                                                3259
                                                                            ],
                                                                            "children": [],
                                                                            "content": "event_data.installation_location.name\n"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "enums",
                                                                            "range": [
                                                                                3260,
                                                                                3265
                                                                            ],
                                                                            "children": [],
                                                                            "content": "),\n}\n)"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "InstallationLocation",
                                                                            "range": [
                                                                                3266,
                                                                                3283
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "event_data.installation_location.name",
                                                                            "range": [
                                                                                3284,
                                                                                3307
                                                                            ],
                                                                            "children": [],
                                                                            "content": "except Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n"
                                                                        }
                                                                    ],
                                                                    "content": "event_data.installation_location.name\n),\n}\n)"
                                                                }
                                                            ],
                                                            "content": ".installed_agent_id"
                                                        }
                                                    ],
                                                    "content": "={\n\"installedAgentId\":event_data.installed_agent_id"
                                                }
                                            ],
                                            "content": ").create(\ndata={\n\"installedAgentId\":event_data.installed_agent_id,\n"
                                        }
                                    ],
                                    "content": "\n\n\nasync def create_agent_installed_event(\nevent_data:market.model.AgentInstalledFromMarketplaceEventData,\n):\ntry:\nawait prisma.models.InstallTracker.prisma().create(\ndata={\n\"installedAgentId\":event_data.installed_agent_id,\n"
                                }
                            ],
                            "content": "unique_categories=[])\n\n\nasync def create_agent_installed_event(\nevent_data:market.model.AgentInstalledFromMarketplaceEventData,\n):\ntry:\nawait prisma.models.InstallTracker.prisma().create(\ndata={\n\"installedAgentId\":event_data.installed_agent_id,\n"
                        },
                        {
                            "type": "Block",
                            "name": "except",
                            "range": [
                                3239,
                                3268
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "except",
                                    "range": [
                                        3239,
                                        3245
                                    ],
                                    "children": [],
                                    "content": ":event_data.marketplace_agent_id,\n\"installationLocation\""
                                },
                                {
                                    "type": "Identifier",
                                    "name": "prisma.errors.PrismaError",
                                    "range": [
                                        3245,
                                        3261
                                    ],
                                    "children": [],
                                    "content": "\"installationLocation\":prisma.enums.InstallationLocation(\nevent_data.installation_location.name\n),"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "e",
                                    "range": [
                                        3263,
                                        3264
                                    ],
                                    "children": [],
                                    "content": "}\n"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                    "range": [
                                        3265,
                                        3268
                                    ],
                                    "children": [
                                        {
                                            "type": "Keyword",
                                            "name": "raise",
                                            "range": [
                                                3265,
                                                3270
                                            ],
                                            "children": [],
                                            "content": ")\nexcept prisma.errors"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "AgentQueryError",
                                            "range": [
                                                3270,
                                                3287
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "AgentQueryError",
                                                    "range": [
                                                        3270,
                                                        3284
                                                    ],
                                                    "children": [],
                                                    "content": "errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept"
                                                },
                                                {
                                                    "type": "TemplateLiteral",
                                                    "name": "f\"Database query failed: {str(e)}\"",
                                                    "range": [
                                                        3285,
                                                        3307
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "str",
                                                            "range": [
                                                                3299,
                                                                3302
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "e",
                                                            "range": [
                                                                3303,
                                                                3304
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": "Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n"
                                                }
                                            ],
                                            "content": "errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e"
                                        }
                                    ],
                                    "content": ")\nexcept prisma"
                                }
                            ],
                            "content": ":event_data.marketplace_agent_id,\n\"installationLocation\":prisma.enums.InstallationLocation(\nevent_data.installation_location.name\n),\n}\n)\nexcept prisma"
                        },
                        {
                            "type": "Block",
                            "name": "except",
                            "range": [
                                3256,
                                3268
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "except",
                                    "range": [
                                        3256,
                                        3262
                                    ],
                                    "children": [],
                                    "content": "installation_location.name\n),\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "Exception",
                                    "range": [
                                        3262,
                                        3271
                                    ],
                                    "children": [],
                                    "content": "\n}\n)\nexcept prisma.errors."
                                },
                                {
                                    "type": "Identifier",
                                    "name": "e",
                                    "range": [
                                        3273,
                                        3274
                                    ],
                                    "children": [],
                                    "content": "as e"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                                    "range": [
                                        3275,
                                        3268
                                    ],
                                    "children": [
                                        {
                                            "type": "Keyword",
                                            "name": "raise",
                                            "range": [
                                                3275,
                                                3280
                                            ],
                                            "children": [],
                                            "content": ":\nraise AgentQueryError(f"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "AgentQueryError",
                                            "range": [
                                                3280,
                                                3297
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "AgentQueryError",
                                                    "range": [
                                                        3280,
                                                        3294
                                                    ],
                                                    "children": [],
                                                    "content": "f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\""
                                                },
                                                {
                                                    "type": "TemplateLiteral",
                                                    "name": "f\"Unexpected error occurred: {str(e)}\"",
                                                    "range": [
                                                        3295,
                                                        3317
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "str",
                                                            "range": [
                                                                3309,
                                                                3312
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "e",
                                                            "range": [
                                                                3313,
                                                                3314
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ")\n"
                                                }
                                            ],
                                            "content": "f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n"
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": "installation_location.name\n),\n}\n)\nexcept prisma"
                        }
                    ],
                    "content": ".CategoriesResponse(unique_categories=[])\n\n\nasync def create_agent_installed_event(\nevent_data:market.model.AgentInstalledFromMarketplaceEventData,\n):\ntry:\nawait prisma.models.InstallTracker.prisma().create(\ndata={\n\"installedAgentId\":event_data.installed_agent_id,\n\"marketplaceAgentId\":event_data.marketplace_agent_id,\n\"installationLocation\":prisma.enums.InstallationLocation(\nevent_data.installation_location.name\n),\n}\n)\nexcept prisma"
                }
            ],
            "content": "#Return an empty list of categories in case of unexpected errors\nreturn market.model.CategoriesResponse(unique_categories=[])\n\n\nasync def create_agent_installed_event(\nevent_data:market.model.AgentInstalledFromMarketplaceEventData,\n):\ntry:\nawait prisma.models.InstallTracker.prisma().create(\ndata={\n\"installedAgentId\":event_data.installed_agent_id,\n\"marketplaceAgentId\":event_data.marketplace_agent_id,\n\"installationLocation\":prisma.enums.InstallationLocation(\nevent_data.installation_location.name\n),\n}\n)\nexcept prisma"
        }
    ],
    "content": "class AgentQueryError(Exception):\n\"\"\"Custom exception for agent query errors\"\"\"\n\npass\n\n\nclass TopAgentsDBResponse(pydantic.BaseModel):\n\"\"\" \\n     Represents a response containing a list of top agents. \\n  \\n     Attributes: \\n         analytics (list[AgentResponse]): The list of top agents. \\n         total_count (int): The total count of agents. \\n         page (int): The current page number. \\n         page_size (int): The number of agents per page. \\n         total_pages (int): The total number of pages. \\n     \"\"\"\n\nanalytics:list[prisma.models.AnalyticsTracker]\ntotal_count:int\npage:int\npage_size:int\ntotal_pages:int\n\n\nclass FeaturedAgentResponse(pydantic.BaseModel):\n\"\"\" \\n     Represents a response containing a list of featured agents. \\n  \\n     Attributes: \\n         featured_agents (list[FeaturedAgent]): The list of featured agents. \\n         total_count (int): The total count of featured agents. \\n         page (int): The current page number. \\n         page_size (int): The number of agents per page. \\n         total_pages (int): The total number of pages. \\n     \"\"\"\n\nfeatured_agents:list[prisma.models.FeaturedAgent]\ntotal_count:int\npage:int\npage_size:int\ntotal_pages:int\n\n\nasync def delete_agent(agent_id:str)->prisma.models.Agents|None:\n\"\"\" \\n     Delete an agent from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent to delete. \\n  \\n     Returns: \\n         prisma.models.Agents | None: The deleted agent if found, None otherwise. \\n  \\n     Raises: \\n         AgentQueryError: If there is an error deleting the agent from the database. \\n     \"\"\"\ntry:\ndeleted_agent=await prisma.models.Agents.prisma().delete(\nwhere={\"id\":agent_id}\n)\nreturn deleted_agent\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def create_agent_entry(\nname:str,\ndescription:str,\nauthor:str,\nkeywords:typing.List[str],\ncategories:typing.List[str],\ngraph:prisma.Json,\nsubmission_state:prisma.enums.SubmissionStatus=prisma.enums.SubmissionStatus.PENDING,\n):\n\"\"\" \\n     Create a new agent entry in the database. \\n  \\n     Args: \\n         name (str): The name of the agent. \\n         description (str): The description of the agent. \\n         author (str): The author of the agent. \\n         keywords (List[str]): The keywords associated with the agent. \\n         categories (List[str]): The categories associated with the agent. \\n         graph (dict): The graph data of the agent. \\n  \\n     Returns: \\n         dict: The newly created agent entry. \\n  \\n     Raises: \\n         AgentQueryError: If there is an error creating the agent entry. \\n     \"\"\"\ntry:\nagent=await prisma.models.Agents.prisma().create(\ndata={\n\"name\":name,\n\"description\":description,\n\"author\":author,\n\"keywords\":keywords,\n\"categories\":categories,\n\"graph\":graph,\n\"AnalyticsTracker\":{\"create\":{\"downloads\":0,\"views\":0}},\n\"submissionStatus\":submission_state,\n}\n)\n\nreturn agent\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def update_agent_entry(\nagent_id:str,\nversion:int,\nsubmission_state:prisma.enums.SubmissionStatus,\ncomments:str|None=None,\n)->prisma.models.Agents|None:\n\"\"\" \\n     Update an existing agent entry in the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         version (int): The version of the agent. \\n         submission_state (prisma.enums.SubmissionStatus): The submission state of the agent. \\n     \"\"\"\n\ntry:\nagent=await prisma.models.Agents.prisma().update(\nwhere={\"id\":agent_id},\ndata={\n\"version\":version,\n\"submissionStatus\":submission_state,\n\"submissionReviewDate\":datetime.datetime.now(datetime.timezone.utc),\n\"submissionReviewComments\":comments,\n},\n)\n\nreturn agent\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Agent Update Failed Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agents(\npage:int=1,\npage_size:int=10,\nname:str|None=None,\nkeyword:str|None=None,\ncategory:str|None=None,\ndescription:str|None=None,\ndescription_threshold:int=60,\nsubmission_status:prisma.enums.SubmissionStatus=prisma.enums.SubmissionStatus.APPROVED,\nsort_by:str=\"createdAt\",\nsort_order:typing.Literal[\"desc\"]|typing.Literal[\"asc\"]=\"desc\",\n):\n\"\"\" \\n     Retrieve a list of agents from the database based on the provided filters and pagination parameters. \\n  \\n     Args: \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n         name (str, optional): Filter agents by name. Defaults to None. \\n         keyword (str, optional): Filter agents by keyword. Defaults to None. \\n         category (str, optional): Filter agents by category. Defaults to None. \\n         description (str, optional): Filter agents by description. Defaults to None. \\n         description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60. \\n         sort_by (str, optional): The field to sort the agents by. Defaults to \" createdAt \". \\n         sort_order (str, optional): The sort order (\" asc \" or \" desc \"). Defaults to \" desc \". \\n  \\n     Returns: \\n         dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Define the base query\nquery={}\n\n#Add optional filters\nif name:\nquery[\"name\"]={\"contains\":name,\"mode\":\"insensitive\"}\nif keyword:\nquery[\"keywords\"]={\"has\":keyword}\nif category:\nquery[\"categories\"]={\"has\":category}\n\nquery[\"submissionStatus\"]=submission_status\n\n#Define sorting\norder={sort_by:sort_order}\n\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\nagents=await prisma.models.Agents.prisma().find_many(\nwhere=query,#type:ignore\norder=order,#type:ignore\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\n#Apply fuzzy search on description if provided\nif description:\ntry:\nfiltered_agents=[]\nfor agent in agents:\nif(\nagent.description\nand fuzzywuzzy.fuzz.partial_ratio(\ndescription.lower(),agent.description.lower()\n)\n>=description_threshold\n):\nfiltered_agents.append(agent)\nagents=filtered_agents\nexcept AttributeError as e:\nraise AgentQueryError(f \"Error during fuzzy search: {str(e)}\")\n\n#Get total count for pagination info\ntotal_count=len(agents)\n\nreturn{\n\"agents\":agents,\n\"total_count\":total_count,\n\"page\":page,\n\"page_size\":page_size,\n\"total_pages\":(total_count+page_size-1)//page_size,\n}\n\nexcept AgentQueryError as e:\n#Log the error or handle it as needed\nraise e\nexcept ValueError as e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")\nexcept Exception as e:\n#Catch any other unexpected exceptions\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_details(agent_id:str,version:int|None=None):\n\"\"\" \\n     Retrieve agent details from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         version (int | None, optional): The version of the agent. Defaults to None. \\n  \\n     Returns: \\n         dict: The agent details. \\n  \\n     Raises: \\n         AgentQueryError: If the agent is not found or if there is an error querying the database. \\n     \"\"\"\ntry:\nquery={\"id\":agent_id}\nif version is not None:\nquery[\"version\"]=version#type:ignore\n\nagent=await prisma.models.Agents.prisma().find_first(where=query)#type:ignore\n\nif not agent:\nraise AgentQueryError(\"Agent not found\")\n\nreturn agent\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def search_db(\nquery:str,\npage:int=1,\npage_size:int=10,\ncategories:typing.List[str]|None=None,\ndescription_threshold:int=60,\nsort_by:str=\"rank\",\nsort_order:typing.Literal[\"desc\"]|typing.Literal[\"asc\"]=\"desc\",\nsubmission_status:prisma.enums.SubmissionStatus=prisma.enums.SubmissionStatus.APPROVED,\n)->market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:\n\"\"\"Perform a search for agents based on the provided query string. \\n  \\n     Args: \\n         query (str): the search string \\n         page (int, optional): page for searching. Defaults to 1. \\n         page_size (int, optional): the number of results to return. Defaults to 10. \\n         categories (List[str] | None, optional): list of category filters. Defaults to None. \\n         description_threshold (int, optional): number of characters to return. Defaults to 60. \\n         sort_by (str, optional): sort by option. Defaults to \" rank \". \\n         sort_order (\" asc\" | \"desc \", optional): the sort order. Defaults to \" desc \". \\n  \\n     Raises: \\n         AgentQueryError: Raises an error if the query fails. \\n         AgentQueryError: Raises if an unexpected error occurs. \\n  \\n     Returns: \\n         List[AgentsWithRank]: List of agents matching the search criteria. \\n     \"\"\"\ntry:\noffset=(page-1)*page_size\n\ncategory_filter=\"1=1\"\nif categories:\ncategory_conditions=[f \"'{cat}' = ANY(categories)\" for cat in categories]\ncategory_filter=\"AND (\"+\" OR \".join(category_conditions)+\")\"\n\n#Construct the ORDER BY clause based on the sort_by parameter\nif sort_by in[\"createdAt\",\"updatedAt\"]:\norder_by_clause=f '\"{sort_by}\" {sort_order.upper()}, rank DESC'\nelif sort_by==\"name\":\norder_by_clause=f \"name {sort_order.upper()}, rank DESC\"\nelse:\norder_by_clause='rank DESC, \"createdAt\" DESC'\n\nsubmission_status_filter=f\"\"\"\"submissionStatus \" = '{submission_status}'\"\"\"\n\nsql_query=f\"\"\" \\n         WITH query AS ( \\n             SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q  \\n             FROM unnest(to_tsvector('{query}')) \\n         ) \\n         SELECT  \\n             id,  \\n             \" createdAt \",  \\n             \" updatedAt \",  \\n             version,  \\n             name,  \\n             LEFT(description, {description_threshold}) AS description,  \\n             author,  \\n             keywords,  \\n             categories,  \\n             graph, \\n             \" submissionStatus \", \\n             \" submissionDate \", \\n             CASE  \\n                 WHEN query.q::text = '' THEN 1.0 \\n                 ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0) \\n             END AS rank \\n         FROM market.\" Agents \", query \\n         WHERE  \\n             (query.q::text = '' OR search @@ query.q) \\n             AND {category_filter}  \\n             AND {submission_status_filter} \\n         ORDER BY {order_by_clause} \\n         LIMIT {page_size} \\n         OFFSET {offset}; \\n         \"\"\"\n\nresults=await prisma.client.get_client().query_raw(\nquery=sql_query,\nmodel=market.utils.extension_types.AgentsWithRank,\n)\n\nclass CountResponse(pydantic.BaseModel):\ncount:int\n\ncount_query=f\"\"\" \\n         WITH query AS ( \\n             SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q  \\n             FROM unnest(to_tsvector('{query}')) \\n         ) \\n         SELECT COUNT(*) \\n         FROM market.\" Agents \", query \\n         WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter}; \\n         \"\"\"\n\ntotal_count=await prisma.client.get_client().query_first(\nquery=count_query,\nmodel=CountResponse,\n)\ntotal_count=total_count.count if total_count else0\n\nreturn market.model.ListResponse(\nitems=results,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size-1)//page_size,\n)\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_top_agents_by_downloads(\npage:int=1,\npage_size:int=10,\nsubmission_status:prisma.enums.SubmissionStatus=prisma.enums.SubmissionStatus.APPROVED,\n)->market.model.ListResponse[prisma.models.AnalyticsTracker]:\n\"\"\"Retrieve the top agents by download count. \\n  \\n     Args: \\n         page (int, optional): The page number. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\n#Agents with no downloads will not be included in the results...is this the desired behavior?\nanalytics=await prisma.models.AnalyticsTracker.prisma().find_many(\ninclude={\"agent\":True},\norder={\"downloads\":\"desc\"},\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\ntry:\ntotal_count=await prisma.models.AnalyticsTracker.prisma().count(\nwhere={\"agent\":{\"is\":{\"submissionStatus\":submission_status}}},\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\nreturn market.model.ListResponse(\nitems=analytics,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size-1)//page_size,\n)\n\nexcept AgentQueryError as e:\n#Log the error or handle it as needed\nraise e from e\nexcept ValueError as e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")from e\nexcept Exception as e:\n#Catch any other unexpected exceptions\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")from e\n\n\nasync def set_agent_featured(\nagent_id:str,is_active:bool=True,featured_categories:list[str]=[\"featured\"]\n)->prisma.models.FeaturedAgent:\n\"\"\"Set an agent as featured in the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str, optional): The category to set the agent as featured. Defaults to \" featured \". \\n  \\n     Raises: \\n         AgentQueryError: If there is an error setting the agent as featured. \\n     \"\"\"\ntry:\nagent=await prisma.models.Agents.prisma().find_unique(where={\"id\":agent_id})\nif not agent:\nraise AgentQueryError(f \"Agent with ID {agent_id} not found.\")\n\nfeatured=await prisma.models.FeaturedAgent.prisma().upsert(\nwhere={\"agentId\":agent_id},\ndata={\n\"update\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n},\n\"create\":{\n\"featuredCategories\":featured_categories,\n\"isActive\":is_active,\n\"agent\":{\"connect\":{\"id\":agent_id}},\n},\n},\n)\nreturn featured\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_featured_agents(\ncategory:str=\"featured\",\npage:int=1,\npage_size:int=10,\nsubmission_status:prisma.enums.SubmissionStatus=prisma.enums.SubmissionStatus.APPROVED,\n)->FeaturedAgentResponse:\n\"\"\"Retrieve a list of featured agents from the database based on the provided category. \\n  \\n     Args: \\n         category (str, optional): The category of featured agents to retrieve. Defaults to \" featured \". \\n         page (int, optional): The page number to retrieve. Defaults to 1. \\n         page_size (int, optional): The number of agents per page. Defaults to 10. \\n  \\n     Returns: \\n         dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages. \\n     \"\"\"\ntry:\n#Calculate pagination\nskip=(page-1)*page_size\n\n#Execute the query\ntry:\nfeatured_agents=await prisma.models.FeaturedAgent.prisma().find_many(\nwhere={\n\"featuredCategories\":{\"has\":category},\n\"isActive\":True,\n\"agent\":{\"is\":{\"submissionStatus\":submission_status}},\n},\ninclude={\"agent\":{\"include\":{\"AnalyticsTracker\":True}}},\nskip=skip,\ntake=page_size,\n)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\n\n#Get total count for pagination info\ntotal_count=len(featured_agents)\n\nreturn FeaturedAgentResponse(\nfeatured_agents=featured_agents,\ntotal_count=total_count,\npage=page,\npage_size=page_size,\ntotal_pages=(total_count+page_size-1)//page_size,\n)\n\nexcept AgentQueryError as e:\n#Log the error or handle it as needed\nraise e from e\nexcept ValueError as e:\nraise AgentQueryError(f \"Invalid input parameter: {str(e)}\")from e\nexcept Exception as e:\n#Catch any other unexpected exceptions\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")from e\n\n\nasync def remove_featured_category(\nagent_id:str,category:str\n)->prisma.models.FeaturedAgent|None:\n\"\"\"Adds a featured category to an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to add to the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\n#get the existing categories\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().find_unique(\nwhere={\"agentId\":agent_id},\ninclude={\"agent\":True},\n)\n\nif not featured_agent:\nraise AgentQueryError(f \"Agent with ID {agent_id} not found.\")\n\n#remove the category from the list\nfeatured_agent.featuredCategories.remove(category)\n\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\":agent_id},\ndata={\"featuredCategories\":featured_agent.featuredCategories},\n)\n\nreturn featured_agent\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def add_featured_category(\nagent_id:str,category:str\n)->prisma.models.FeaturedAgent|None:\n\"\"\"Removes a featured category from an agent. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n         category (str): The category to remove from the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The updated list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().update(\nwhere={\"agentId\":agent_id},\ndata={\"featuredCategories\":{\"push\":[category]}},\n)\n\nreturn featured_agent\n\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_featured(agent_id:str)->prisma.models.FeaturedAgent|None:\n\"\"\"Retrieve an agent's featured categories from the database. \\n  \\n     Args: \\n         agent_id (str): The ID of the agent. \\n  \\n     Returns: \\n         FeaturedAgentResponse: The list of featured agents. \\n     \"\"\"\ntry:\nfeatured_agent=await prisma.models.FeaturedAgent.prisma().find_unique(\nwhere={\"agentId\":agent_id},\n)\nreturn featured_agent\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_not_featured_agents(\npage:int=1,page_size:int=10\n)->typing.List[prisma.models.Agents]:\n\"\"\" \\n     Retrieve a list of not featured agents from the database. \\n     \"\"\"\ntry:\nagents=await prisma.client.get_client().query_raw(\nquery=f\"\"\" \\n             SELECT  \\n                 \" market\".\"Agents \".id,  \\n                 \" market\".\"Agents\".\"createdAt \",  \\n                 \" market\".\"Agents\".\"updatedAt \",  \\n                 \" market\".\"Agents \".version,  \\n                 \" market\".\"Agents \".name,  \\n                 LEFT(\" market\".\"Agents \".description, 500) AS description,  \\n                 \" market\".\"Agents \".author,  \\n                 \" market\".\"Agents \".keywords,  \\n                 \" market\".\"Agents \".categories,  \\n                 \" market\".\"Agents \".graph, \\n                 \" market\".\"Agents\".\"submissionStatus \", \\n                 \" market\".\"Agents\".\"submissionDate \", \\n                 \" market\".\"Agents \".search::text AS search \\n             FROM \" market\".\"Agents \" \\n             LEFT JOIN \" market\".\"FeaturedAgent \" ON \" market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId \" \\n             WHERE (\" market\".\"FeaturedAgent\".\"agentId \" IS NULL OR \" market\".\"FeaturedAgent\".\"featuredCategories \" = '{{}}') \\n                 AND \" market\".\"Agents\".\"submissionStatus \" = 'APPROVED' \\n             ORDER BY \" market\".\"Agents\".\"createdAt \" DESC \\n             LIMIT {page_size} OFFSET {page_size * (page - 1)} \\n             \"\"\",\nmodel=prisma.models.Agents,\n)\nreturn agents\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception as e:\nraise AgentQueryError(f \"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_all_categories()->market.model.CategoriesResponse:\n\"\"\" \\n     Retrieve all unique categories from the database. \\n  \\n     Returns: \\n         CategoriesResponse: A list of unique categories. \\n     \"\"\"\ntry:\nagents=await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n#Aggregate categories on the Python side\nall_categories=set()\nfor agent in agents:\nall_categories.update(agent.categories)\n\nunique_categories=sorted(list(all_categories))\n\nreturn market.model.CategoriesResponse(unique_categories=unique_categories)\nexcept prisma.errors.PrismaError as e:\nraise AgentQueryError(f \"Database query failed: {str(e)}\")\nexcept Exception:\n#Return an empty list of categories in case of unexpected errors\nreturn market.model.CategoriesResponse(unique_categories=[])\n\n\nasync def create_agent_installed_event(\nevent_data:market.model.AgentInstalledFromMarketplaceEventData,\n):\ntry:\nawait prisma.models.InstallTracker.prisma().create(\ndata={\n\"installedAgentId\":event_data.installed_agent_id,\n\"marketplaceAgentId\":event_data.marketplace_agent_id,\n\"installationLocation\":prisma.enums.InstallationLocation(\nevent_data.installation_location.name\n),\n}\n)\nexcept prisma"
}