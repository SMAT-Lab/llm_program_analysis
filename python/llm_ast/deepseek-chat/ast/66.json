{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        535
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "logging",
            "range": [
                0,
                1
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "logging",
                    "range": [
                        0,
                        1
                    ],
                    "children": [],
                    "content": "import logging"
                }
            ],
            "content": "import logging"
        },
        {
            "type": "ImportDeclaration",
            "name": "os",
            "range": [
                3,
                4
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "os",
                    "range": [
                        3,
                        4
                    ],
                    "children": [],
                    "content": "import os"
                }
            ],
            "content": "import os"
        },
        {
            "type": "ImportDeclaration",
            "name": "signal",
            "range": [
                6,
                7
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "signal",
                    "range": [
                        6,
                        7
                    ],
                    "children": [],
                    "content": "import signal"
                }
            ],
            "content": "import signal"
        },
        {
            "type": "ImportDeclaration",
            "name": "sys",
            "range": [
                9,
                10
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "sys",
                    "range": [
                        9,
                        10
                    ],
                    "children": [],
                    "content": "import sys"
                }
            ],
            "content": "import sys"
        },
        {
            "type": "ImportDeclaration",
            "name": "ABC",
            "range": [
                12,
                15
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "abc",
                    "range": [
                        12,
                        13
                    ],
                    "children": [],
                    "content": "from abc"
                },
                {
                    "type": "ImportedItem",
                    "name": "ABC",
                    "range": [
                        14,
                        15
                    ],
                    "children": [],
                    "content": "import ABC"
                }
            ],
            "content": "from abc import ABC"
        },
        {
            "type": "ImportDeclaration",
            "name": "abstractmethod",
            "range": [
                12,
                17
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "abc",
                    "range": [
                        12,
                        13
                    ],
                    "children": [],
                    "content": "from abc"
                },
                {
                    "type": "ImportedItem",
                    "name": "abstractmethod",
                    "range": [
                        16,
                        17
                    ],
                    "children": [],
                    "content": ",abstractmethod"
                }
            ],
            "content": "from abc import ABC,abstractmethod"
        },
        {
            "type": "ImportDeclaration",
            "name": "Process",
            "range": [
                19,
                22
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "multiprocessing",
                    "range": [
                        19,
                        20
                    ],
                    "children": [],
                    "content": "from multiprocessing"
                },
                {
                    "type": "ImportedItem",
                    "name": "Process",
                    "range": [
                        21,
                        22
                    ],
                    "children": [],
                    "content": "import Process"
                }
            ],
            "content": "from multiprocessing import Process"
        },
        {
            "type": "ImportDeclaration",
            "name": "set_start_method",
            "range": [
                19,
                24
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "multiprocessing",
                    "range": [
                        19,
                        20
                    ],
                    "children": [],
                    "content": "from multiprocessing"
                },
                {
                    "type": "ImportedItem",
                    "name": "set_start_method",
                    "range": [
                        23,
                        24
                    ],
                    "children": [],
                    "content": ",set_start_method"
                }
            ],
            "content": "from multiprocessing import Process,set_start_method"
        },
        {
            "type": "ImportDeclaration",
            "name": "Optional",
            "range": [
                26,
                29
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "typing",
                    "range": [
                        26,
                        27
                    ],
                    "children": [],
                    "content": "from typing"
                },
                {
                    "type": "ImportedItem",
                    "name": "Optional",
                    "range": [
                        28,
                        29
                    ],
                    "children": [],
                    "content": "import Optional"
                }
            ],
            "content": "from typing import Optional"
        },
        {
            "type": "ImportDeclaration",
            "name": "configure_logging",
            "range": [
                32,
                39
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "backend.util.logging",
                    "range": [
                        32,
                        37
                    ],
                    "children": [],
                    "content": "from backend.util.logging"
                },
                {
                    "type": "ImportedItem",
                    "name": "configure_logging",
                    "range": [
                        38,
                        39
                    ],
                    "children": [],
                    "content": "import configure_logging"
                }
            ],
            "content": "from backend.util.logging import configure_logging"
        },
        {
            "type": "ImportDeclaration",
            "name": "sentry_init",
            "range": [
                41,
                48
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "backend.util.metrics",
                    "range": [
                        41,
                        46
                    ],
                    "children": [],
                    "content": "from backend.util.metrics"
                },
                {
                    "type": "ImportedItem",
                    "name": "sentry_init",
                    "range": [
                        47,
                        48
                    ],
                    "children": [],
                    "content": "import sentry_init"
                }
            ],
            "content": "from backend.util.metrics import sentry_init"
        },
        {
            "type": "VariableDeclaration",
            "name": "logger",
            "range": [
                51,
                58
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        52,
                        53
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "getLogger",
                            "range": [
                                53,
                                58
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "logging",
                                    "range": [
                                        53,
                                        54
                                    ],
                                    "children": [],
                                    "content": "logging."
                                },
                                {
                                    "type": "Arguments",
                                    "name": "(",
                                    "range": [
                                        55,
                                        58
                                    ],
                                    "children": [
                                        {
                                            "type": "StringLiteral",
                                            "name": "__name__",
                                            "range": [
                                                56,
                                                57
                                            ],
                                            "children": [],
                                            "content": "(__name__"
                                        }
                                    ],
                                    "content": "getLogger(__name__)"
                                }
                            ],
                            "content": "logging.getLogger(__name__)"
                        }
                    ],
                    "content": "=logging"
                }
            ],
            "content": "logger=logging.getLogger(__name__)"
        },
        {
            "type": "VariableDeclaration",
            "name": "_SERVICE_NAME",
            "range": [
                60,
                62
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        61,
                        62
                    ],
                    "children": [
                        {
                            "type": "StringLiteral",
                            "name": "\"MainProcess\"",
                            "range": [
                                62,
                                63
                            ],
                            "children": [],
                            "content": "\"MainProcess\"\n"
                        }
                    ],
                    "content": "=\"MainProcess\""
                }
            ],
            "content": "_SERVICE_NAME=\"MainProcess\""
        },
        {
            "type": "FunctionDecl",
            "name": "get_service_name",
            "range": [
                65,
                73
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "get_service_name",
                    "range": [
                        65,
                        69
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                65,
                                65
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "FunctionName",
                            "name": "get_service_name",
                            "range": [
                                66,
                                66
                            ],
                            "children": [],
                            "content": "def"
                        },
                        {
                            "type": "ReturnTypeIndicator",
                            "name": ":",
                            "range": [
                                69,
                                69
                            ],
                            "children": [],
                            "content": ")"
                        }
                    ],
                    "content": "\ndef get_service_name()"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        70,
                        73
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                71,
                                72
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "return",
                                    "range": [
                                        71,
                                        71
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "_SERVICE_NAME",
                                    "range": [
                                        72,
                                        72
                                    ],
                                    "children": [],
                                    "content": "return"
                                }
                            ],
                            "content": "\nreturn"
                        }
                    ],
                    "content": ":\nreturn _SERVICE_NAME"
                }
            ],
            "content": "\ndef get_service_name():\nreturn _SERVICE_NAME"
        },
        {
            "type": "FunctionDecl",
            "name": "set_service_name",
            "range": [
                74,
                89
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "name",
                    "range": [
                        77,
                        79
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                79,
                                79
                            ],
                            "children": [],
                            "content": "("
                        }
                    ],
                    "content": "def set_service_name("
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        82,
                        89
                    ],
                    "children": [
                        {
                            "type": "GlobalStatement",
                            "name": "_SERVICE_NAME",
                            "range": [
                                83,
                                84
                            ],
                            "children": [],
                            "content": "):"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                86,
                                88
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "_SERVICE_NAME",
                                    "range": [
                                        86,
                                        86
                                    ],
                                    "children": [],
                                    "content": "global"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "name",
                                    "range": [
                                        88,
                                        88
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "global _SERVICE_NAME\n"
                        }
                    ],
                    "content": "str):\nglobal _SERVICE_NAME\n_SERVICE_NAME"
                }
            ],
            "content": "\n\n\ndef set_service_name(name:str):\nglobal _SERVICE_NAME\n_SERVICE_NAME"
        },
        {
            "type": "ClassDecl",
            "name": "AppProcess",
            "range": [
                90,
                535
            ],
            "children": [
                {
                    "type": "FunctionDecl",
                    "name": "run",
                    "range": [
                        144,
                        156
                    ],
                    "children": [
                        {
                            "type": "FunctionSignature",
                            "name": "run",
                            "range": [
                                144,
                                149
                            ],
                            "children": [],
                            "content": "\n\n@abstractmethod\ndef"
                        },
                        {
                            "type": "Block",
                            "name": "run_block",
                            "range": [
                                150,
                                156
                            ],
                            "children": [
                                {
                                    "type": "PassStatement",
                                    "name": "pass",
                                    "range": [
                                        155,
                                        156
                                    ],
                                    "children": [],
                                    "content": "\n\"\""
                                }
                            ],
                            "content": "run(self):\n\"\""
                        }
                    ],
                    "content": "\n\n@abstractmethod\ndef run(self):\n\"\""
                },
                {
                    "type": "FunctionDecl",
                    "name": "service_name",
                    "range": [
                        164,
                        178
                    ],
                    "children": [
                        {
                            "type": "FunctionSignature",
                            "name": "service_name",
                            "range": [
                                164,
                                172
                            ],
                            "children": [],
                            "content": "classmethod\n@property\ndef service_name(cls"
                        },
                        {
                            "type": "Block",
                            "name": "service_name_block",
                            "range": [
                                173,
                                178
                            ],
                            "children": [
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        174,
                                        178
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "cls.__name__",
                                            "range": [
                                                175,
                                                177
                                            ],
                                            "children": [],
                                            "content": ">str:"
                                        }
                                    ],
                                    "content": "->str:\n"
                                }
                            ],
                            "content": ")->str:\n"
                        }
                    ],
                    "content": "classmethod\n@property\ndef service_name(cls)->str:\n"
                },
                {
                    "type": "FunctionDecl",
                    "name": "cleanup",
                    "range": [
                        180,
                        192
                    ],
                    "children": [
                        {
                            "type": "FunctionSignature",
                            "name": "cleanup",
                            "range": [
                                180,
                                185
                            ],
                            "children": [],
                            "content": "cls.__name__\n\ndef"
                        },
                        {
                            "type": "Block",
                            "name": "cleanup_block",
                            "range": [
                                186,
                                192
                            ],
                            "children": [
                                {
                                    "type": "PassStatement",
                                    "name": "pass",
                                    "range": [
                                        191,
                                        192
                                    ],
                                    "children": [],
                                    "content": "\n\"\""
                                }
                            ],
                            "content": "cleanup(self):\n\"\""
                        }
                    ],
                    "content": "cls.__name__\n\ndef cleanup(self):\n\"\""
                },
                {
                    "type": "FunctionDecl",
                    "name": "health_check",
                    "range": [
                        194,
                        206
                    ],
                    "children": [
                        {
                            "type": "FunctionSignature",
                            "name": "health_check",
                            "range": [
                                194,
                                199
                            ],
                            "children": [],
                            "content": "\"\"\npass\n\ndef"
                        },
                        {
                            "type": "Block",
                            "name": "health_check_block",
                            "range": [
                                200,
                                206
                            ],
                            "children": [
                                {
                                    "type": "PassStatement",
                                    "name": "pass",
                                    "range": [
                                        205,
                                        206
                                    ],
                                    "children": [],
                                    "content": "\n\"\""
                                }
                            ],
                            "content": "health_check(self):\n\"\""
                        }
                    ],
                    "content": "\"\"\npass\n\ndef health_check(self):\n\"\""
                },
                {
                    "type": "FunctionDecl",
                    "name": "execute_run_command",
                    "range": [
                        208,
                        304
                    ],
                    "children": [
                        {
                            "type": "FunctionSignature",
                            "name": "execute_run_command",
                            "range": [
                                208,
                                215
                            ],
                            "children": [],
                            "content": "\"\"\npass\n\ndef execute_run_command("
                        },
                        {
                            "type": "Block",
                            "name": "execute_run_command_block",
                            "range": [
                                216,
                                304
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "signal.signal",
                                    "range": [
                                        217,
                                        229
                                    ],
                                    "children": [],
                                    "content": ",silent):\nsignal.signal(signal.SIGTERM,"
                                },
                                {
                                    "type": "TryStatement",
                                    "name": "try",
                                    "range": [
                                        231,
                                        304
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "try_block",
                                            "range": [
                                                233,
                                                285
                                            ],
                                            "children": [
                                                {
                                                    "type": "IfStatement",
                                                    "name": "if",
                                                    "range": [
                                                        234,
                                                        263
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "silent",
                                                            "range": [
                                                                235,
                                                                236
                                                            ],
                                                            "children": [],
                                                            "content": "\ntry"
                                                        },
                                                        {
                                                            "type": "Block",
                                                            "name": "if_block",
                                                            "range": [
                                                                237,
                                                                263
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "name": "sys.stdout",
                                                                    "range": [
                                                                        238,
                                                                        250
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nif silent:\nsys.stdout=open(os."
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "name": "sys.stderr",
                                                                    "range": [
                                                                        251,
                                                                        263
                                                                    ],
                                                                    "children": [],
                                                                    "content": "devnull,\"w\")\nsys.stderr=open(os."
                                                                }
                                                            ],
                                                            "content": ":\nif silent:\nsys.stdout=open(os.devnull,\"w\")\nsys.stderr=open(os."
                                                        }
                                                    ],
                                                    "content": "\n\ntry:\nif silent:\nsys.stdout=open(os.devnull,\"w\")\nsys.stderr=open(os."
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "set_service_name",
                                                    "range": [
                                                        265,
                                                        271
                                                    ],
                                                    "children": [],
                                                    "content": ",\"w\")\n\nset_service_name("
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "logger.info",
                                                    "range": [
                                                        272,
                                                        279
                                                    ],
                                                    "children": [],
                                                    "content": "self.service_name)\nlogger.info"
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "self.run",
                                                    "range": [
                                                        280,
                                                        285
                                                    ],
                                                    "children": [],
                                                    "content": "(f \"[{self.service_name}] Starting...\")\nself"
                                                }
                                            ],
                                            "content": ")\n\ntry:\nif silent:\nsys.stdout=open(os.devnull,\"w\")\nsys.stderr=open(os.devnull,\"w\")\n\nset_service_name(self.service_name)\nlogger.info(f \"[{self.service_name}] Starting...\")\nself"
                                        },
                                        {
                                            "type": "ExceptClause",
                                            "name": "except",
                                            "range": [
                                                286,
                                                304
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "except_block",
                                                    "range": [
                                                        295,
                                                        304
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "logger.warning",
                                                            "range": [
                                                                296,
                                                                303
                                                            ],
                                                            "children": [],
                                                            "content": ")as e:\nlogger.warning"
                                                        }
                                                    ],
                                                    "content": "SystemExit)as e:\nlogger.warning("
                                                }
                                            ],
                                            "content": ".run()\nexcept(KeyboardInterrupt,SystemExit)as e:\nlogger.warning("
                                        }
                                    ],
                                    "content": "._self_terminate)\n\ntry:\nif silent:\nsys.stdout=open(os.devnull,\"w\")\nsys.stderr=open(os.devnull,\"w\")\n\nset_service_name(self.service_name)\nlogger.info(f \"[{self.service_name}] Starting...\")\nself.run()\nexcept(KeyboardInterrupt,SystemExit)as e:\nlogger.warning("
                                }
                            ],
                            "content": "self,silent):\nsignal.signal(signal.SIGTERM,self._self_terminate)\n\ntry:\nif silent:\nsys.stdout=open(os.devnull,\"w\")\nsys.stderr=open(os.devnull,\"w\")\n\nset_service_name(self.service_name)\nlogger.info(f \"[{self.service_name}] Starting...\")\nself.run()\nexcept(KeyboardInterrupt,SystemExit)as e:\nlogger.warning("
                        }
                    ],
                    "content": "\"\"\npass\n\ndef execute_run_command(self,silent):\nsignal.signal(signal.SIGTERM,self._self_terminate)\n\ntry:\nif silent:\nsys.stdout=open(os.devnull,\"w\")\nsys.stderr=open(os.devnull,\"w\")\n\nset_service_name(self.service_name)\nlogger.info(f \"[{self.service_name}] Starting...\")\nself.run()\nexcept(KeyboardInterrupt,SystemExit)as e:\nlogger.warning("
                },
                {
                    "type": "FunctionDecl",
                    "name": "_self_terminate",
                    "range": [
                        305,
                        330
                    ],
                    "children": [
                        {
                            "type": "FunctionSignature",
                            "name": "_self_terminate",
                            "range": [
                                305,
                                316
                            ],
                            "children": [],
                            "content": "f \"[{self.service_name}] Terminated: {e}; quitting...\")\n\ndef _self_terminate(self,signum:"
                        },
                        {
                            "type": "Block",
                            "name": "_self_terminate_block",
                            "range": [
                                317,
                                330
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "self.cleanup",
                                    "range": [
                                        318,
                                        323
                                    ],
                                    "children": [],
                                    "content": ",frame):\nself"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "sys.exit",
                                    "range": [
                                        324,
                                        330
                                    ],
                                    "children": [],
                                    "content": ".cleanup()\nsys."
                                }
                            ],
                            "content": "int,frame):\nself.cleanup()\nsys."
                        }
                    ],
                    "content": "f \"[{self.service_name}] Terminated: {e}; quitting...\")\n\ndef _self_terminate(self,signum:int,frame):\nself.cleanup()\nsys."
                },
                {
                    "type": "FunctionDecl",
                    "name": "__enter__",
                    "range": [
                        343,
                        361
                    ],
                    "children": [
                        {
                            "type": "FunctionSignature",
                            "name": "__enter__",
                            "range": [
                                343,
                                348
                            ],
                            "children": [],
                            "content": "the process#\n\ndef"
                        },
                        {
                            "type": "Block",
                            "name": "__enter___block",
                            "range": [
                                349,
                                361
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "self.start",
                                    "range": [
                                        350,
                                        358
                                    ],
                                    "children": [],
                                    "content": "(self):\nself.start("
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        359,
                                        361
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "self",
                                            "range": [
                                                360,
                                                361
                                            ],
                                            "children": [],
                                            "content": "=True"
                                        }
                                    ],
                                    "content": "background=True"
                                }
                            ],
                            "content": "__enter__(self):\nself.start(background=True"
                        }
                    ],
                    "content": "the process#\n\ndef __enter__(self):\nself.start(background=True"
                },
                {
                    "type": "FunctionDecl",
                    "name": "__exit__",
                    "range": [
                        363,
                        383
                    ],
                    "children": [
                        {
                            "type": "FunctionSignature",
                            "name": "__exit__",
                            "range": [
                                363,
                                375
                            ],
                            "children": [],
                            "content": "\nreturn self\n\ndef __exit__(self,*args,"
                        },
                        {
                            "type": "Block",
                            "name": "__exit___block",
                            "range": [
                                376,
                                383
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "self.stop",
                                    "range": [
                                        377,
                                        382
                                    ],
                                    "children": [],
                                    "content": "*kwargs):\nself"
                                }
                            ],
                            "content": "**kwargs):\nself."
                        }
                    ],
                    "content": "\nreturn self\n\ndef __exit__(self,*args,**kwargs):\nself."
                },
                {
                    "type": "FunctionDecl",
                    "name": "start",
                    "range": [
                        384,
                        490
                    ],
                    "children": [
                        {
                            "type": "FunctionSignature",
                            "name": "start",
                            "range": [
                                384,
                                408
                            ],
                            "children": [],
                            "content": "stop()\n\ndef start(self,background:bool=False,silent:bool=False,**proc_args"
                        },
                        {
                            "type": "Block",
                            "name": "start_block",
                            "range": [
                                409,
                                490
                            ],
                            "children": [
                                {
                                    "type": "IfStatement",
                                    "name": "if",
                                    "range": [
                                        414,
                                        428
                                    ],
                                    "children": [
                                        {
                                            "type": "UnaryExpression",
                                            "name": "not background",
                                            "range": [
                                                415,
                                                417
                                            ],
                                            "children": [],
                                            "content": "\"\"\" \\n         Start the background process. \\n         Args: \\n             background: Whether to run the process in the background. \\n             silent: Whether to disable stdout and stderr. \\n             proc_args: Additional arguments to pass to the process. \\n         Returns: \\n             the process id or 0 if the process is not running in the background. \\n         \"\"\""
                                        },
                                        {
                                            "type": "Block",
                                            "name": "if_block",
                                            "range": [
                                                418,
                                                428
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "self.execute_run_command",
                                                    "range": [
                                                        419,
                                                        425
                                                    ],
                                                    "children": [],
                                                    "content": "if not background:\nself."
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "name": "return",
                                                    "range": [
                                                        426,
                                                        428
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "0",
                                                            "range": [
                                                                427,
                                                                428
                                                            ],
                                                            "children": [],
                                                            "content": "(silent"
                                                        }
                                                    ],
                                                    "content": "execute_run_command(silent"
                                                }
                                            ],
                                            "content": "\nif not background:\nself.execute_run_command(silent"
                                        }
                                    ],
                                    "content": "\n\"\"\" \\n         Start the background process. \\n         Args: \\n             background: Whether to run the process in the background. \\n             silent: Whether to disable stdout and stderr. \\n             proc_args: Additional arguments to pass to the process. \\n         Returns: \\n             the process id or 0 if the process is not running in the background. \\n         \"\"\"\nif not background:\nself.execute_run_command(silent"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "self.process",
                                    "range": [
                                        430,
                                        467
                                    ],
                                    "children": [],
                                    "content": "\nreturn0\n\nself.process=Process(\nname=self.__class__.__name__,\ntarget=self.execute_run_command,\nargs=(silent,),\n**"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "self.process.start",
                                    "range": [
                                        468,
                                        475
                                    ],
                                    "children": [],
                                    "content": "proc_args,\n)\nself.process"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "self.health_check",
                                    "range": [
                                        476,
                                        481
                                    ],
                                    "children": [],
                                    "content": ".start()\nself"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        482,
                                        490
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "self.process.pid or 0",
                                            "range": [
                                                483,
                                                489
                                            ],
                                            "children": [],
                                            "content": "health_check()\nreturn self."
                                        }
                                    ],
                                    "content": ".health_check()\nreturn self.process"
                                }
                            ],
                            "content": ")->int:\n\"\"\" \\n         Start the background process. \\n         Args: \\n             background: Whether to run the process in the background. \\n             silent: Whether to disable stdout and stderr. \\n             proc_args: Additional arguments to pass to the process. \\n         Returns: \\n             the process id or 0 if the process is not running in the background. \\n         \"\"\"\nif not background:\nself.execute_run_command(silent)\nreturn0\n\nself.process=Process(\nname=self.__class__.__name__,\ntarget=self.execute_run_command,\nargs=(silent,),\n**proc_args,\n)\nself.process.start()\nself.health_check()\nreturn self.process"
                        }
                    ],
                    "content": "stop()\n\ndef start(self,background:bool=False,silent:bool=False,**proc_args)->int:\n\"\"\" \\n         Start the background process. \\n         Args: \\n             background: Whether to run the process in the background. \\n             silent: Whether to disable stdout and stderr. \\n             proc_args: Additional arguments to pass to the process. \\n         Returns: \\n             the process id or 0 if the process is not running in the background. \\n         \"\"\"\nif not background:\nself.execute_run_command(silent)\nreturn0\n\nself.process=Process(\nname=self.__class__.__name__,\ntarget=self.execute_run_command,\nargs=(silent,),\n**proc_args,\n)\nself.process.start()\nself.health_check()\nreturn self.process"
                },
                {
                    "type": "FunctionDecl",
                    "name": "stop",
                    "range": [
                        492,
                        535
                    ],
                    "children": [
                        {
                            "type": "FunctionSignature",
                            "name": "stop",
                            "range": [
                                492,
                                497
                            ],
                            "children": [],
                            "content": "pid or0\n\ndef"
                        },
                        {
                            "type": "Block",
                            "name": "stop_block",
                            "range": [
                                498,
                                535
                            ],
                            "children": [
                                {
                                    "type": "IfStatement",
                                    "name": "if",
                                    "range": [
                                        503,
                                        511
                                    ],
                                    "children": [
                                        {
                                            "type": "UnaryExpression",
                                            "name": "not self.process",
                                            "range": [
                                                504,
                                                508
                                            ],
                                            "children": [],
                                            "content": "\"\"\" \\n         Stop the background process. \\n         \"\"\"\nif"
                                        },
                                        {
                                            "type": "Block",
                                            "name": "if_block",
                                            "range": [
                                                509,
                                                511
                                            ],
                                            "children": [
                                                {
                                                    "type": "ReturnStatement",
                                                    "name": "return",
                                                    "range": [
                                                        510,
                                                        511
                                                    ],
                                                    "children": [],
                                                    "content": "self."
                                                }
                                            ],
                                            "content": "not self."
                                        }
                                    ],
                                    "content": "\n\"\"\" \\n         Stop the background process. \\n         \"\"\"\nif not self."
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "self.process.terminate",
                                    "range": [
                                        513,
                                        520
                                    ],
                                    "children": [],
                                    "content": ":\nreturn\n\nself.process"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "self.process.join",
                                    "range": [
                                        521,
                                        528
                                    ],
                                    "children": [],
                                    "content": ".terminate()\nself.process"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "self.process",
                                    "range": [
                                        529,
                                        534
                                    ],
                                    "children": [],
                                    "content": ".join()\nself"
                                }
                            ],
                            "content": "stop(self):\n\"\"\" \\n         Stop the background process. \\n         \"\"\"\nif not self.process:\nreturn\n\nself.process.terminate()\nself.process.join()\nself."
                        }
                    ],
                    "content": "pid or0\n\ndef stop(self):\n\"\"\" \\n         Stop the background process. \\n         \"\"\"\nif not self.process:\nreturn\n\nself.process.terminate()\nself.process.join()\nself."
                }
            ],
            "content": "=name\n\n\nclass AppProcess(ABC):\n\"\"\" \\n     A class to represent an object that can be executed in a background process. \\n     \"\"\"\n\nprocess:Optional[Process]=None\n\nset_start_method(\"spawn\",force=True)\nconfigure_logging()\nsentry_init()\n\n#Methods that are executed INSIDE the process#\n\n@abstractmethod\ndef run(self):\n\"\"\" \\n         The method that will be executed in the process. \\n         \"\"\"\npass\n\n@classmethod\n@property\ndef service_name(cls)->str:\nreturn cls.__name__\n\ndef cleanup(self):\n\"\"\" \\n         Implement this method on a subclass to do post-execution cleanup, \\n         e.g. disconnecting from a database or terminating child processes. \\n         \"\"\"\npass\n\ndef health_check(self):\n\"\"\" \\n         A method to check the health of the process. \\n         \"\"\"\npass\n\ndef execute_run_command(self,silent):\nsignal.signal(signal.SIGTERM,self._self_terminate)\n\ntry:\nif silent:\nsys.stdout=open(os.devnull,\"w\")\nsys.stderr=open(os.devnull,\"w\")\n\nset_service_name(self.service_name)\nlogger.info(f \"[{self.service_name}] Starting...\")\nself.run()\nexcept(KeyboardInterrupt,SystemExit)as e:\nlogger.warning(f \"[{self.service_name}] Terminated: {e}; quitting...\")\n\ndef _self_terminate(self,signum:int,frame):\nself.cleanup()\nsys.exit(0)\n\n#Methods that are executed OUTSIDE the process#\n\ndef __enter__(self):\nself.start(background=True)\nreturn self\n\ndef __exit__(self,*args,**kwargs):\nself.stop()\n\ndef start(self,background:bool=False,silent:bool=False,**proc_args)->int:\n\"\"\" \\n         Start the background process. \\n         Args: \\n             background: Whether to run the process in the background. \\n             silent: Whether to disable stdout and stderr. \\n             proc_args: Additional arguments to pass to the process. \\n         Returns: \\n             the process id or 0 if the process is not running in the background. \\n         \"\"\"\nif not background:\nself.execute_run_command(silent)\nreturn0\n\nself.process=Process(\nname=self.__class__.__name__,\ntarget=self.execute_run_command,\nargs=(silent,),\n**proc_args,\n)\nself.process.start()\nself.health_check()\nreturn self.process.pid or0\n\ndef stop(self):\n\"\"\" \\n         Stop the background process. \\n         \"\"\"\nif not self.process:\nreturn\n\nself.process.terminate()\nself.process.join()\nself."
        }
    ],
    "content": "import logging\nimport os\nimport signal\nimport sys\nfrom abc import ABC,abstractmethod\nfrom multiprocessing import Process,set_start_method\nfrom typing import Optional\n\nfrom backend.util.logging import configure_logging\nfrom backend.util.metrics import sentry_init\n\nlogger=logging.getLogger(__name__)\n_SERVICE_NAME=\"MainProcess\"\n\n\ndef get_service_name():\nreturn _SERVICE_NAME\n\n\ndef set_service_name(name:str):\nglobal _SERVICE_NAME\n_SERVICE_NAME=name\n\n\nclass AppProcess(ABC):\n\"\"\" \\n     A class to represent an object that can be executed in a background process. \\n     \"\"\"\n\nprocess:Optional[Process]=None\n\nset_start_method(\"spawn\",force=True)\nconfigure_logging()\nsentry_init()\n\n#Methods that are executed INSIDE the process#\n\n@abstractmethod\ndef run(self):\n\"\"\" \\n         The method that will be executed in the process. \\n         \"\"\"\npass\n\n@classmethod\n@property\ndef service_name(cls)->str:\nreturn cls.__name__\n\ndef cleanup(self):\n\"\"\" \\n         Implement this method on a subclass to do post-execution cleanup, \\n         e.g. disconnecting from a database or terminating child processes. \\n         \"\"\"\npass\n\ndef health_check(self):\n\"\"\" \\n         A method to check the health of the process. \\n         \"\"\"\npass\n\ndef execute_run_command(self,silent):\nsignal.signal(signal.SIGTERM,self._self_terminate)\n\ntry:\nif silent:\nsys.stdout=open(os.devnull,\"w\")\nsys.stderr=open(os.devnull,\"w\")\n\nset_service_name(self.service_name)\nlogger.info(f \"[{self.service_name}] Starting...\")\nself.run()\nexcept(KeyboardInterrupt,SystemExit)as e:\nlogger.warning(f \"[{self.service_name}] Terminated: {e}; quitting...\")\n\ndef _self_terminate(self,signum:int,frame):\nself.cleanup()\nsys.exit(0)\n\n#Methods that are executed OUTSIDE the process#\n\ndef __enter__(self):\nself.start(background=True)\nreturn self\n\ndef __exit__(self,*args,**kwargs):\nself.stop()\n\ndef start(self,background:bool=False,silent:bool=False,**proc_args)->int:\n\"\"\" \\n         Start the background process. \\n         Args: \\n             background: Whether to run the process in the background. \\n             silent: Whether to disable stdout and stderr. \\n             proc_args: Additional arguments to pass to the process. \\n         Returns: \\n             the process id or 0 if the process is not running in the background. \\n         \"\"\"\nif not background:\nself.execute_run_command(silent)\nreturn0\n\nself.process=Process(\nname=self.__class__.__name__,\ntarget=self.execute_run_command,\nargs=(silent,),\n**proc_args,\n)\nself.process.start()\nself.health_check()\nreturn self.process.pid or0\n\ndef stop(self):\n\"\"\" \\n         Stop the background process. \\n         \"\"\"\nif not self.process:\nreturn\n\nself.process.terminate()\nself.process.join()\nself."
}