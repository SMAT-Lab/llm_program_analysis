{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        222
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                2
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "logging",
                    "range": [
                        1,
                        1
                    ],
                    "children": [],
                    "content": "logging"
                }
            ],
            "content": "import logging\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                3,
                5
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "os",
                    "range": [
                        4,
                        4
                    ],
                    "children": [],
                    "content": "os"
                }
            ],
            "content": "import os\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                6,
                8
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "uuid",
                    "range": [
                        7,
                        7
                    ],
                    "children": [],
                    "content": "uuid"
                }
            ],
            "content": "import uuid\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                10,
                12
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "fastapi",
                    "range": [
                        11,
                        11
                    ],
                    "children": [],
                    "content": "fastapi"
                }
            ],
            "content": "import fastapi\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                13,
                19
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "google.cloud",
                    "range": [
                        14,
                        17
                    ],
                    "children": [],
                    "content": "google.cloud import"
                },
                {
                    "type": "ImportPath",
                    "name": "storage",
                    "range": [
                        18,
                        18
                    ],
                    "children": [],
                    "content": "storage"
                }
            ],
            "content": "from google.cloud import storage\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                21,
                31
            ],
            "children": [
                {
                    "type": "ImportPath",
                    "name": "backend.server.v2.store.exceptions",
                    "range": [
                        22,
                        30
                    ],
                    "children": [],
                    "content": "backend.server.v2.store.exceptions"
                }
            ],
            "content": "import backend.server.v2.store.exceptions\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                32,
                40
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "backend.util.settings",
                    "range": [
                        33,
                        37
                    ],
                    "children": [],
                    "content": "backend.util.settings"
                },
                {
                    "type": "ImportPath",
                    "name": "Settings",
                    "range": [
                        39,
                        39
                    ],
                    "children": [],
                    "content": "Settings"
                }
            ],
            "content": "from backend.util.settings import Settings\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "logger",
            "range": [
                42,
                50
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        43,
                        43
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "logging.getLogger",
                            "range": [
                                44,
                                49
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "__name__",
                                    "range": [
                                        48,
                                        48
                                    ],
                                    "children": [],
                                    "content": "__name__"
                                }
                            ],
                            "content": "logging.getLogger(__name__)"
                        }
                    ],
                    "content": "="
                }
            ],
            "content": "logger=logging.getLogger(__name__)\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "ALLOWED_IMAGE_TYPES",
            "range": [
                52,
                63
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        53,
                        53
                    ],
                    "children": [
                        {
                            "type": "SetLiteral",
                            "name": "",
                            "range": [
                                54,
                                62
                            ],
                            "children": [
                                {
                                    "type": "StringLiteral",
                                    "name": "\"image/jpeg\"",
                                    "range": [
                                        55,
                                        55
                                    ],
                                    "children": [],
                                    "content": "\"image/jpeg\""
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "\"image/png\"",
                                    "range": [
                                        57,
                                        57
                                    ],
                                    "children": [],
                                    "content": "\"image/png\""
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "\"image/gif\"",
                                    "range": [
                                        59,
                                        59
                                    ],
                                    "children": [],
                                    "content": "\"image/gif\""
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "\"image/webp\"",
                                    "range": [
                                        61,
                                        61
                                    ],
                                    "children": [],
                                    "content": "\"image/webp\""
                                }
                            ],
                            "content": "{\"image/jpeg\",\"image/png\",\"image/gif\",\"image/webp\"}"
                        }
                    ],
                    "content": "="
                }
            ],
            "content": "ALLOWED_IMAGE_TYPES={\"image/jpeg\",\"image/png\",\"image/gif\",\"image/webp\"}\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "ALLOWED_VIDEO_TYPES",
            "range": [
                64,
                71
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        65,
                        65
                    ],
                    "children": [
                        {
                            "type": "SetLiteral",
                            "name": "",
                            "range": [
                                66,
                                70
                            ],
                            "children": [
                                {
                                    "type": "StringLiteral",
                                    "name": "\"video/mp4\"",
                                    "range": [
                                        67,
                                        67
                                    ],
                                    "children": [],
                                    "content": "\"video/mp4\""
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "\"video/webm\"",
                                    "range": [
                                        69,
                                        69
                                    ],
                                    "children": [],
                                    "content": "\"video/webm\""
                                }
                            ],
                            "content": "{\"video/mp4\",\"video/webm\"}"
                        }
                    ],
                    "content": "="
                }
            ],
            "content": "ALLOWED_VIDEO_TYPES={\"video/mp4\",\"video/webm\"}\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "MAX_FILE_SIZE",
            "range": [
                72,
                82
            ],
            "children": [
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        73,
                        73
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "*",
                            "range": [
                                75,
                                75
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "*",
                                    "range": [
                                        77,
                                        77
                                    ],
                                    "children": [
                                        {
                                            "type": "NumericLiteral",
                                            "name": "50",
                                            "range": [
                                                74,
                                                74
                                            ],
                                            "children": [],
                                            "content": "50"
                                        },
                                        {
                                            "type": "NumericLiteral",
                                            "name": "1024",
                                            "range": [
                                                76,
                                                76
                                            ],
                                            "children": [],
                                            "content": "1024"
                                        }
                                    ],
                                    "content": "*"
                                },
                                {
                                    "type": "NumericLiteral",
                                    "name": "1024",
                                    "range": [
                                        78,
                                        78
                                    ],
                                    "children": [],
                                    "content": "1024"
                                }
                            ],
                            "content": "*"
                        }
                    ],
                    "content": "="
                }
            ],
            "content": "MAX_FILE_SIZE=50*1024*1024#50MB\n"
        },
        {
            "type": "FunctionDecl",
            "name": "check_media_exists",
            "range": [
                84,
                222
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        84,
                        89
                    ],
                    "children": [],
                    "content": "\nasync def check_media_exists(user_id"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        85,
                        88
                    ],
                    "children": [],
                    "content": "async def check_media_exists("
                },
                {
                    "type": "Identifier",
                    "name": "check_media_exists",
                    "range": [
                        86,
                        105
                    ],
                    "children": [],
                    "content": "def check_media_exists(user_id:str,filename:str)->str|None:\n\"\"\" \\n     Check if a media file exists in storage for the given user. \\n     Tries both images and videos directories. \\n  \\n     Args: \\n         user_id (str): ID of the user who uploaded the file \\n         filename (str): Name of the file to check \\n  \\n     Returns: \\n         str | None: URL of the blob if it exists, None otherwise \\n     \""
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        87,
                        95
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                88,
                                94
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        90,
                                        93
                                    ],
                                    "children": [],
                                    "content": ":str,filename"
                                }
                            ],
                            "content": "(user_id:str,filename:"
                        },
                        {
                            "type": "Parameter",
                            "name": "filename",
                            "range": [
                                92,
                                98
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        94,
                                        97
                                    ],
                                    "children": [],
                                    "content": ":str)-"
                                }
                            ],
                            "content": ",filename:str)->"
                        }
                    ],
                    "content": "check_media_exists(user_id:str,filename:str"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        96,
                        100
                    ],
                    "children": [
                        {
                            "type": "TypeUnion",
                            "name": "str | None",
                            "range": [
                                98,
                                100
                            ],
                            "children": [],
                            "content": ">str|"
                        }
                    ],
                    "content": ")->str|"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        101,
                        222
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                103,
                                105
                            ],
                            "children": [],
                            "content": "\n\"\"\" \\n     Check if a media file exists in storage for the given user. \\n     Tries both images and videos directories. \\n  \\n     Args: \\n         user_id (str): ID of the user who uploaded the file \\n         filename (str): Name of the file to check \\n  \\n     Returns: \\n         str | None: URL of the blob if it exists, None otherwise \\n     \""
                        },
                        {
                            "type": "TryStatement",
                            "name": "try_statement",
                            "range": [
                                107,
                                222
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "try_block",
                                    "range": [
                                        107,
                                        205
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "settings_assignment",
                                            "range": [
                                                110,
                                                114
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "settings",
                                                    "range": [
                                                        110,
                                                        117
                                                    ],
                                                    "children": [],
                                                    "content": "\nsettings=Settings()\nstorage_client"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "Settings",
                                                    "range": [
                                                        112,
                                                        114
                                                    ],
                                                    "children": [],
                                                    "content": "=Settings("
                                                }
                                            ],
                                            "content": "\nsettings=Settings("
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "storage_client_assignment",
                                            "range": [
                                                116,
                                                122
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "storage_client",
                                                    "range": [
                                                        116,
                                                        129
                                                    ],
                                                    "children": [],
                                                    "content": "\nstorage_client=storage.Client()\nbucket=storage_client.bucket"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "storage.Client",
                                                    "range": [
                                                        118,
                                                        122
                                                    ],
                                                    "children": [],
                                                    "content": "=storage.Client("
                                                }
                                            ],
                                            "content": "\nstorage_client=storage.Client("
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "bucket_assignment",
                                            "range": [
                                                124,
                                                135
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "bucket",
                                                    "range": [
                                                        124,
                                                        130
                                                    ],
                                                    "children": [],
                                                    "content": "\nbucket=storage_client.bucket("
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "storage_client.bucket",
                                                    "range": [
                                                        126,
                                                        135
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "settings.config.media_gcs_bucket_name",
                                                            "range": [
                                                                130,
                                                                135
                                                            ],
                                                            "children": [],
                                                            "content": "(settings.config.media_gcs_bucket_name"
                                                        }
                                                    ],
                                                    "content": "=storage_client.bucket(settings.config.media_gcs_bucket_name"
                                                }
                                            ],
                                            "content": "\nbucket=storage_client.bucket(settings.config.media_gcs_bucket_name"
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "Check images",
                                            "range": [
                                                138,
                                                141
                                            ],
                                            "children": [],
                                            "content": "\n#Check images"
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "image_path_assignment",
                                            "range": [
                                                142,
                                                146
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "image_path",
                                                    "range": [
                                                        142,
                                                        152
                                                    ],
                                                    "children": [],
                                                    "content": "\nimage_path=f \"users/{user_id}/images/{filename}\"\nimage_blob=bucket.blob"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "f\"users/{user_id}/images/{filename}\"",
                                                    "range": [
                                                        144,
                                                        146
                                                    ],
                                                    "children": [],
                                                    "content": "=f \"users/{user_id}/images/{filename}\""
                                                }
                                            ],
                                            "content": "\nimage_path=f \"users/{user_id}/images/{filename}\""
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "image_blob_assignment",
                                            "range": [
                                                147,
                                                155
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "image_blob",
                                                    "range": [
                                                        147,
                                                        157
                                                    ],
                                                    "children": [],
                                                    "content": "\nimage_blob=bucket.blob(image_path)\nif"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "bucket.blob",
                                                    "range": [
                                                        149,
                                                        155
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "image_path",
                                                            "range": [
                                                                153,
                                                                155
                                                            ],
                                                            "children": [],
                                                            "content": "(image_path)"
                                                        }
                                                    ],
                                                    "content": "=bucket.blob(image_path)"
                                                }
                                            ],
                                            "content": "\nimage_blob=bucket.blob(image_path)"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_image_blob_exists",
                                            "range": [
                                                156,
                                                168
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "image_blob.exists()",
                                                    "range": [
                                                        157,
                                                        162
                                                    ],
                                                    "children": [],
                                                    "content": "if image_blob.exists()"
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "name": "return_image_blob_public_url",
                                                    "range": [
                                                        164,
                                                        168
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "image_blob.public_url",
                                                            "range": [
                                                                165,
                                                                168
                                                            ],
                                                            "children": [],
                                                            "content": "return image_blob.public_url"
                                                        }
                                                    ],
                                                    "content": "\nreturn image_blob.public_url"
                                                }
                                            ],
                                            "content": "\nif image_blob.exists():\nreturn image_blob.public_url"
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "Check videos",
                                            "range": [
                                                170,
                                                173
                                            ],
                                            "children": [],
                                            "content": "\n#Check videos"
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "video_path_assignment",
                                            "range": [
                                                174,
                                                178
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "video_path",
                                                    "range": [
                                                        174,
                                                        184
                                                    ],
                                                    "children": [],
                                                    "content": "\nvideo_path=f \"users/{user_id}/videos/{filename}\"\n\nvideo_blob=bucket."
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "f\"users/{user_id}/videos/{filename}\"",
                                                    "range": [
                                                        176,
                                                        178
                                                    ],
                                                    "children": [],
                                                    "content": "=f \"users/{user_id}/videos/{filename}\""
                                                }
                                            ],
                                            "content": "\nvideo_path=f \"users/{user_id}/videos/{filename}\""
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "video_blob_assignment",
                                            "range": [
                                                180,
                                                188
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "video_blob",
                                                    "range": [
                                                        180,
                                                        190
                                                    ],
                                                    "children": [],
                                                    "content": "\nvideo_blob=bucket.blob(video_path)\nif"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "bucket.blob",
                                                    "range": [
                                                        182,
                                                        188
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "video_path",
                                                            "range": [
                                                                186,
                                                                188
                                                            ],
                                                            "children": [],
                                                            "content": "(video_path)"
                                                        }
                                                    ],
                                                    "content": "=bucket.blob(video_path)"
                                                }
                                            ],
                                            "content": "\nvideo_blob=bucket.blob(video_path)"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_video_blob_exists",
                                            "range": [
                                                189,
                                                201
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "video_blob.exists()",
                                                    "range": [
                                                        190,
                                                        195
                                                    ],
                                                    "children": [],
                                                    "content": "if video_blob.exists()"
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "name": "return_video_blob_public_url",
                                                    "range": [
                                                        197,
                                                        201
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "video_blob.public_url",
                                                            "range": [
                                                                198,
                                                                201
                                                            ],
                                                            "children": [],
                                                            "content": "return video_blob.public_url"
                                                        }
                                                    ],
                                                    "content": "\nreturn video_blob.public_url"
                                                }
                                            ],
                                            "content": "\nif video_blob.exists():\nreturn video_blob.public_url"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return_none",
                                            "range": [
                                                203,
                                                205
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "None",
                                                    "range": [
                                                        204,
                                                        205
                                                    ],
                                                    "children": [],
                                                    "content": "return None"
                                                }
                                            ],
                                            "content": "\nreturn None"
                                        }
                                    ],
                                    "content": "\ntry:\nsettings=Settings()\nstorage_client=storage.Client()\nbucket=storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n#Check images\nimage_path=f \"users/{user_id}/images/{filename}\"\nimage_blob=bucket.blob(image_path)\nif image_blob.exists():\nreturn image_blob.public_url\n\n#Check videos\nvideo_path=f \"users/{user_id}/videos/{filename}\"\n\nvideo_blob=bucket.blob(video_path)\nif video_blob.exists():\nreturn video_blob.public_url\n\nreturn None"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except_block",
                                    "range": [
                                        206,
                                        222
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "Exception",
                                            "range": [
                                                207,
                                                209
                                            ],
                                            "children": [],
                                            "content": "except Exception as"
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "e_assignment",
                                            "range": [
                                                208,
                                                210
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "e",
                                                    "range": [
                                                        209,
                                                        210
                                                    ],
                                                    "children": [],
                                                    "content": "as e"
                                                }
                                            ],
                                            "content": "Exception as e"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "logger.error",
                                            "range": [
                                                212,
                                                218
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "f\"Error checking if media file exists: {str(e)}\"",
                                                    "range": [
                                                        216,
                                                        218
                                                    ],
                                                    "children": [],
                                                    "content": "(f \"Error checking if media file exists: {str(e)}\""
                                                }
                                            ],
                                            "content": "\nlogger.error(f \"Error checking if media file exists: {str(e)}\""
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return_none",
                                            "range": [
                                                220,
                                                222
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "None",
                                                    "range": [
                                                        221,
                                                        222
                                                    ],
                                                    "children": [],
                                                    "content": "return None"
                                                }
                                            ],
                                            "content": "\nreturn None"
                                        }
                                    ],
                                    "content": "\nexcept Exception as e:\nlogger.error(f \"Error checking if media file exists: {str(e)}\")\nreturn None"
                                }
                            ],
                            "content": "\ntry:\nsettings=Settings()\nstorage_client=storage.Client()\nbucket=storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n#Check images\nimage_path=f \"users/{user_id}/images/{filename}\"\nimage_blob=bucket.blob(image_path)\nif image_blob.exists():\nreturn image_blob.public_url\n\n#Check videos\nvideo_path=f \"users/{user_id}/videos/{filename}\"\n\nvideo_blob=bucket.blob(video_path)\nif video_blob.exists():\nreturn video_blob.public_url\n\nreturn None\nexcept Exception as e:\nlogger.error(f \"Error checking if media file exists: {str(e)}\")\nreturn None"
                        }
                    ],
                    "content": "None:\n\"\"\" \\n     Check if a media file exists in storage for the given user. \\n     Tries both images and videos directories. \\n  \\n     Args: \\n         user_id (str): ID of the user who uploaded the file \\n         filename (str): Name of the file to check \\n  \\n     Returns: \\n         str | None: URL of the blob if it exists, None otherwise \\n     \"\"\"\ntry:\nsettings=Settings()\nstorage_client=storage.Client()\nbucket=storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n#Check images\nimage_path=f \"users/{user_id}/images/{filename}\"\nimage_blob=bucket.blob(image_path)\nif image_blob.exists():\nreturn image_blob.public_url\n\n#Check videos\nvideo_path=f \"users/{user_id}/videos/{filename}\"\n\nvideo_blob=bucket.blob(video_path)\nif video_blob.exists():\nreturn video_blob.public_url\n\nreturn None\nexcept Exception as e:\nlogger.error(f \"Error checking if media file exists: {str(e)}\")\nreturn None"
                }
            ],
            "content": "\nasync def check_media_exists(user_id:str,filename:str)->str|None:\n\"\"\" \\n     Check if a media file exists in storage for the given user. \\n     Tries both images and videos directories. \\n  \\n     Args: \\n         user_id (str): ID of the user who uploaded the file \\n         filename (str): Name of the file to check \\n  \\n     Returns: \\n         str | None: URL of the blob if it exists, None otherwise \\n     \"\"\"\ntry:\nsettings=Settings()\nstorage_client=storage.Client()\nbucket=storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n#Check images\nimage_path=f \"users/{user_id}/images/{filename}\"\nimage_blob=bucket.blob(image_path)\nif image_blob.exists():\nreturn image_blob.public_url\n\n#Check videos\nvideo_path=f \"users/{user_id}/videos/{filename}\"\n\nvideo_blob=bucket.blob(video_path)\nif video_blob.exists():\nreturn video_blob.public_url\n\nreturn None\nexcept Exception as e:\nlogger.error(f \"Error checking if media file exists: {str(e)}\")\nreturn None"
        }
    ],
    "content": "import logging\nimport os\nimport uuid\n\nimport fastapi\nfrom google.cloud import storage\n\nimport backend.server.v2.store.exceptions\nfrom backend.util.settings import Settings\n\nlogger=logging.getLogger(__name__)\n\nALLOWED_IMAGE_TYPES={\"image/jpeg\",\"image/png\",\"image/gif\",\"image/webp\"}\nALLOWED_VIDEO_TYPES={\"video/mp4\",\"video/webm\"}\nMAX_FILE_SIZE=50*1024*1024#50MB\n\n\nasync def check_media_exists(user_id:str,filename:str)->str|None:\n\"\"\" \\n     Check if a media file exists in storage for the given user. \\n     Tries both images and videos directories. \\n  \\n     Args: \\n         user_id (str): ID of the user who uploaded the file \\n         filename (str): Name of the file to check \\n  \\n     Returns: \\n         str | None: URL of the blob if it exists, None otherwise \\n     \"\"\"\ntry:\nsettings=Settings()\nstorage_client=storage.Client()\nbucket=storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n#Check images\nimage_path=f \"users/{user_id}/images/{filename}\"\nimage_blob=bucket.blob(image_path)\nif image_blob.exists():\nreturn image_blob.public_url\n\n#Check videos\nvideo_path=f \"users/{user_id}/videos/{filename}\"\n\nvideo_blob=bucket.blob(video_path)\nif video_blob.exists():\nreturn video_blob.public_url\n\nreturn None\nexcept Exception as e:\nlogger.error(f \"Error checking if media file exists: {str(e)}\")\nreturn None"
}