{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        311
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "gray_code",
            "range": [
                0,
                96
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "bit_count",
                    "range": [
                        3,
                        5
                    ],
                    "children": [],
                    "content": "bit_count:int"
                },
                {
                    "type": "ReturnType",
                    "name": "list",
                    "range": [
                        9,
                        10
                    ],
                    "children": [],
                    "content": "list:"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        12,
                        14
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Takes in an integer n and returns a n-bit \\n     gray code sequence \\n     An n-bit gray code sequence is a sequence of 2^n \\n     integers where: \\n  \\n     a) Every integer is between [0,2^n -1] inclusive \\n     b) The sequence begins with 0 \\n     c) An integer appears at most one times in the sequence \\n     d)The binary representation of every pair of integers differ \\n        by exactly one bit \\n     e) The binary representation of first and last bit also \\n        differ by exactly one bit \\n  \\n     >>> gray_code(2) \\n     [0, 1, 3, 2] \\n  \\n     >>> gray_code(1) \\n     [0, 1] \\n  \\n     >>> gray_code(3) \\n     [0, 1, 3, 2, 6, 7, 5, 4] \\n  \\n     >>> gray_code(-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The given input must be positive \\n  \\n     >>> gray_code(10.6) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: unsupported operand type(s) for <<: 'int' and 'float' \\n     \"\"\""
                },
                {
                    "type": "Comment",
                    "name": "# bit count represents no. of bits in the gray code",
                    "range": [
                        17,
                        29
                    ],
                    "children": [],
                    "content": "#bit count represents no.of bits in the gray code\n"
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        30,
                        41
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "bit_count < 0",
                            "range": [
                                31,
                                33
                            ],
                            "children": [],
                            "content": "bit_count<0"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "ValueError",
                            "range": [
                                36,
                                40
                            ],
                            "children": [
                                {
                                    "type": "Message",
                                    "name": "\"The given input must be positive\"",
                                    "range": [
                                        39,
                                        39
                                    ],
                                    "children": [],
                                    "content": "\"The given input must be positive\""
                                }
                            ],
                            "content": "raise ValueError(\"The given input must be positive\")"
                        }
                    ],
                    "content": "if bit_count<0:\nraise ValueError(\"The given input must be positive\")\n"
                },
                {
                    "type": "Comment",
                    "name": "# get the generated string sequence",
                    "range": [
                        43,
                        49
                    ],
                    "children": [],
                    "content": "#get the generated string sequence\n"
                },
                {
                    "type": "Assignment",
                    "name": "sequence = gray_code_sequence_string(bit_count)",
                    "range": [
                        50,
                        56
                    ],
                    "children": [],
                    "content": "sequence=gray_code_sequence_string(bit_count)\n"
                },
                {
                    "type": "Comment",
                    "name": "#",
                    "range": [
                        57,
                        58
                    ],
                    "children": [],
                    "content": "#\n"
                },
                {
                    "type": "Comment",
                    "name": "# convert them to integers",
                    "range": [
                        59,
                        64
                    ],
                    "children": [],
                    "content": "#convert them to integers\n"
                },
                {
                    "type": "ForStatement",
                    "name": "",
                    "range": [
                        65,
                        91
                    ],
                    "children": [
                        {
                            "type": "Iterator",
                            "name": "i",
                            "range": [
                                66,
                                66
                            ],
                            "children": [],
                            "content": "i"
                        },
                        {
                            "type": "Range",
                            "name": "range(len(sequence))",
                            "range": [
                                68,
                                74
                            ],
                            "children": [],
                            "content": "range(len(sequence))"
                        },
                        {
                            "type": "Assignment",
                            "name": "sequence[i] = int(sequence[i], 2)",
                            "range": [
                                77,
                                90
                            ],
                            "children": [],
                            "content": "sequence[i]=int(sequence[i],2)"
                        }
                    ],
                    "content": "for i in range(len(sequence)):\nsequence[i]=int(sequence[i],2)\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return sequence",
                    "range": [
                        93,
                        94
                    ],
                    "children": [],
                    "content": "return sequence"
                }
            ],
            "content": "def gray_code(bit_count:int)->list:\n\"\"\" \\n     Takes in an integer n and returns a n-bit \\n     gray code sequence \\n     An n-bit gray code sequence is a sequence of 2^n \\n     integers where: \\n  \\n     a) Every integer is between [0,2^n -1] inclusive \\n     b) The sequence begins with 0 \\n     c) An integer appears at most one times in the sequence \\n     d)The binary representation of every pair of integers differ \\n        by exactly one bit \\n     e) The binary representation of first and last bit also \\n        differ by exactly one bit \\n  \\n     >>> gray_code(2) \\n     [0, 1, 3, 2] \\n  \\n     >>> gray_code(1) \\n     [0, 1] \\n  \\n     >>> gray_code(3) \\n     [0, 1, 3, 2, 6, 7, 5, 4] \\n  \\n     >>> gray_code(-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The given input must be positive \\n  \\n     >>> gray_code(10.6) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: unsupported operand type(s) for <<: 'int' and 'float' \\n     \"\"\"\n\n#bit count represents no.of bits in the gray code\nif bit_count<0:\nraise ValueError(\"The given input must be positive\")\n\n#get the generated string sequence\nsequence=gray_code_sequence_string(bit_count)\n#\n#convert them to integers\nfor i in range(len(sequence)):\nsequence[i]=int(sequence[i],2)\n\nreturn sequence\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "gray_code_sequence_string",
            "range": [
                97,
                311
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "bit_count",
                    "range": [
                        100,
                        103
                    ],
                    "children": [],
                    "content": "(bit_count:int"
                },
                {
                    "type": "ReturnType",
                    "name": "list",
                    "range": [
                        106,
                        107
                    ],
                    "children": [],
                    "content": ">list"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        109,
                        111
                    ],
                    "children": [],
                    "content": "\n\"\"\" \\n     Will output the n-bit grey sequence as a \\n     string of bits \\n  \\n     >>> gray_code_sequence_string(2) \\n     ['00', '01', '11', '10'] \\n  \\n     >>> gray_code_sequence_string(1) \\n     ['0', '1'] \\n     \""
                },
                {
                    "type": "Comment",
                    "name": "The approach is a recursive one",
                    "range": [
                        114,
                        121
                    ],
                    "children": [],
                    "content": "\n#The approach is a recursive one"
                },
                {
                    "type": "Comment",
                    "name": "Base case achieved when either n = 0 or n = 1",
                    "range": [
                        122,
                        135
                    ],
                    "children": [],
                    "content": "\n#Base case achieved when either n=0or n=1"
                },
                {
                    "type": "IfStatement",
                    "name": "if bit_count == 0",
                    "range": [
                        136,
                        147
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return [\"0\"]",
                            "range": [
                                143,
                                147
                            ],
                            "children": [],
                            "content": "\nreturn[\"0\"]"
                        }
                    ],
                    "content": "\nif bit_count==0:\nreturn[\"0\"]"
                },
                {
                    "type": "IfStatement",
                    "name": "if bit_count == 1",
                    "range": [
                        149,
                        162
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return [\"0\", \"1\"]",
                            "range": [
                                156,
                                162
                            ],
                            "children": [],
                            "content": "\nreturn[\"0\",\"1\"]"
                        }
                    ],
                    "content": "\nif bit_count==1:\nreturn[\"0\",\"1\"]"
                },
                {
                    "type": "VariableDeclaration",
                    "name": "seq_len = 1 << bit_count",
                    "range": [
                        164,
                        177
                    ],
                    "children": [],
                    "content": "\nseq_len=1<<bit_count#defines the length of the sequence"
                },
                {
                    "type": "Comment",
                    "name": "1 << n is equivalent to 2 ^ n",
                    "range": [
                        178,
                        189
                    ],
                    "children": [],
                    "content": "\n#1<<n is equivalent to2^n"
                },
                {
                    "type": "Comment",
                    "name": "recursive answer will generate answer for n - 1 bits",
                    "range": [
                        191,
                        202
                    ],
                    "children": [],
                    "content": "\n#recursive answer will generate answer for n-1bits"
                },
                {
                    "type": "VariableDeclaration",
                    "name": "smaller_sequence = gray_code_sequence_string(bit_count - 1)",
                    "range": [
                        203,
                        211
                    ],
                    "children": [],
                    "content": "\nsmaller_sequence=gray_code_sequence_string(bit_count-1)"
                },
                {
                    "type": "VariableDeclaration",
                    "name": "sequence = []",
                    "range": [
                        213,
                        217
                    ],
                    "children": [],
                    "content": "\nsequence=[]"
                },
                {
                    "type": "Comment",
                    "name": "append 0 to first half of the smaller sequence generated",
                    "range": [
                        219,
                        230
                    ],
                    "children": [],
                    "content": "\n#append0to first half of the smaller sequence generated"
                },
                {
                    "type": "ForStatement",
                    "name": "for i in range(seq_len // 2)",
                    "range": [
                        231,
                        258
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "generated_no = \"0\" + smaller_sequence[i]",
                            "range": [
                                243,
                                251
                            ],
                            "children": [],
                            "content": "\ngenerated_no=\"0\"+smaller_sequence[i]"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "sequence.append(generated_no)",
                            "range": [
                                252,
                                258
                            ],
                            "children": [],
                            "content": "\nsequence.append(generated_no)"
                        }
                    ],
                    "content": "\nfor i in range(seq_len//2):\ngenerated_no=\"0\"+smaller_sequence[i]\nsequence.append(generated_no)"
                },
                {
                    "type": "Comment",
                    "name": "append 1 to second half ... start from the end of the list",
                    "range": [
                        260,
                        276
                    ],
                    "children": [],
                    "content": "\n#append1to second half...start from the end of the list"
                },
                {
                    "type": "ForStatement",
                    "name": "for i in reversed(range(seq_len // 2))",
                    "range": [
                        277,
                        307
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "generated_no = \"1\" + smaller_sequence[i]",
                            "range": [
                                292,
                                300
                            ],
                            "children": [],
                            "content": "\ngenerated_no=\"1\"+smaller_sequence[i]"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "sequence.append(generated_no)",
                            "range": [
                                301,
                                307
                            ],
                            "children": [],
                            "content": "\nsequence.append(generated_no)"
                        }
                    ],
                    "content": "\nfor i in reversed(range(seq_len//2)):\ngenerated_no=\"1\"+smaller_sequence[i]\nsequence.append(generated_no)"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return sequence",
                    "range": [
                        309,
                        311
                    ],
                    "children": [],
                    "content": "\nreturn sequence"
                }
            ],
            "content": "\ndef gray_code_sequence_string(bit_count:int)->list:\n\"\"\" \\n     Will output the n-bit grey sequence as a \\n     string of bits \\n  \\n     >>> gray_code_sequence_string(2) \\n     ['00', '01', '11', '10'] \\n  \\n     >>> gray_code_sequence_string(1) \\n     ['0', '1'] \\n     \"\"\"\n\n#The approach is a recursive one\n#Base case achieved when either n=0or n=1\nif bit_count==0:\nreturn[\"0\"]\n\nif bit_count==1:\nreturn[\"0\",\"1\"]\n\nseq_len=1<<bit_count#defines the length of the sequence\n#1<<n is equivalent to2^n\n\n#recursive answer will generate answer for n-1bits\nsmaller_sequence=gray_code_sequence_string(bit_count-1)\n\nsequence=[]\n\n#append0to first half of the smaller sequence generated\nfor i in range(seq_len//2):\ngenerated_no=\"0\"+smaller_sequence[i]\nsequence.append(generated_no)\n\n#append1to second half...start from the end of the list\nfor i in reversed(range(seq_len//2)):\ngenerated_no=\"1\"+smaller_sequence[i]\nsequence.append(generated_no)\n\nreturn sequence"
        }
    ],
    "content": "def gray_code(bit_count:int)->list:\n\"\"\" \\n     Takes in an integer n and returns a n-bit \\n     gray code sequence \\n     An n-bit gray code sequence is a sequence of 2^n \\n     integers where: \\n  \\n     a) Every integer is between [0,2^n -1] inclusive \\n     b) The sequence begins with 0 \\n     c) An integer appears at most one times in the sequence \\n     d)The binary representation of every pair of integers differ \\n        by exactly one bit \\n     e) The binary representation of first and last bit also \\n        differ by exactly one bit \\n  \\n     >>> gray_code(2) \\n     [0, 1, 3, 2] \\n  \\n     >>> gray_code(1) \\n     [0, 1] \\n  \\n     >>> gray_code(3) \\n     [0, 1, 3, 2, 6, 7, 5, 4] \\n  \\n     >>> gray_code(-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The given input must be positive \\n  \\n     >>> gray_code(10.6) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: unsupported operand type(s) for <<: 'int' and 'float' \\n     \"\"\"\n\n#bit count represents no.of bits in the gray code\nif bit_count<0:\nraise ValueError(\"The given input must be positive\")\n\n#get the generated string sequence\nsequence=gray_code_sequence_string(bit_count)\n#\n#convert them to integers\nfor i in range(len(sequence)):\nsequence[i]=int(sequence[i],2)\n\nreturn sequence\n\n\ndef gray_code_sequence_string(bit_count:int)->list:\n\"\"\" \\n     Will output the n-bit grey sequence as a \\n     string of bits \\n  \\n     >>> gray_code_sequence_string(2) \\n     ['00', '01', '11', '10'] \\n  \\n     >>> gray_code_sequence_string(1) \\n     ['0', '1'] \\n     \"\"\"\n\n#The approach is a recursive one\n#Base case achieved when either n=0or n=1\nif bit_count==0:\nreturn[\"0\"]\n\nif bit_count==1:\nreturn[\"0\",\"1\"]\n\nseq_len=1<<bit_count#defines the length of the sequence\n#1<<n is equivalent to2^n\n\n#recursive answer will generate answer for n-1bits\nsmaller_sequence=gray_code_sequence_string(bit_count-1)\n\nsequence=[]\n\n#append0to first half of the smaller sequence generated\nfor i in range(seq_len//2):\ngenerated_no=\"0\"+smaller_sequence[i]\nsequence.append(generated_no)\n\n#append1to second half...start from the end of the list\nfor i in reversed(range(seq_len//2)):\ngenerated_no=\"1\"+smaller_sequence[i]\nsequence.append(generated_no)\n\nreturn sequence"
}