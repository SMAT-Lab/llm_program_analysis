{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        75
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "get_highest_set_bit_position",
            "range": [
                0,
                55
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "number",
                    "range": [
                        3,
                        5
                    ],
                    "children": [],
                    "content": "number:int"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        9,
                        9
                    ],
                    "children": [],
                    "content": "int"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        12,
                        14
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Returns position of the highest set bit of a number. \\n     Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious \\n     >>> get_highest_set_bit_position(25) \\n     5 \\n     >>> get_highest_set_bit_position(37) \\n     6 \\n     >>> get_highest_set_bit_position(1) \\n     1 \\n     >>> get_highest_set_bit_position(4) \\n     3 \\n     >>> get_highest_set_bit_position(0) \\n     0 \\n     >>> get_highest_set_bit_position(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be an 'int' type \\n     \"\"\""
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        16,
                        31
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                17,
                                23
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "isinstance",
                                    "range": [
                                        18,
                                        23
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "number",
                                            "range": [
                                                20,
                                                20
                                            ],
                                            "children": [],
                                            "content": "number"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "int",
                                            "range": [
                                                22,
                                                22
                                            ],
                                            "children": [],
                                            "content": "int"
                                        }
                                    ],
                                    "content": "isinstance(number,int)"
                                }
                            ],
                            "content": "not isinstance(number,int)"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "",
                            "range": [
                                26,
                                30
                            ],
                            "children": [
                                {
                                    "type": "ExceptionType",
                                    "name": "TypeError",
                                    "range": [
                                        27,
                                        27
                                    ],
                                    "children": [],
                                    "content": "TypeError"
                                },
                                {
                                    "type": "Message",
                                    "name": "Input value must be an 'int' type",
                                    "range": [
                                        29,
                                        29
                                    ],
                                    "children": [],
                                    "content": "\"Input value must be an 'int' type\""
                                }
                            ],
                            "content": "raise TypeError(\"Input value must be an 'int' type\")"
                        }
                    ],
                    "content": "if not isinstance(number,int):\nraise TypeError(\"Input value must be an 'int' type\")\n"
                },
                {
                    "type": "VariableDeclaration",
                    "name": "position",
                    "range": [
                        33,
                        35
                    ],
                    "children": [],
                    "content": "position=0"
                },
                {
                    "type": "WhileStatement",
                    "name": "",
                    "range": [
                        37,
                        51
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "number",
                            "range": [
                                38,
                                38
                            ],
                            "children": [],
                            "content": "number"
                        },
                        {
                            "type": "Increment",
                            "name": "position",
                            "range": [
                                41,
                                44
                            ],
                            "children": [],
                            "content": "position+=1"
                        },
                        {
                            "type": "ShiftOperation",
                            "name": "number",
                            "range": [
                                46,
                                50
                            ],
                            "children": [],
                            "content": "number>>=1"
                        }
                    ],
                    "content": "while number:\nposition+=1\nnumber>>=1\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        53,
                        54
                    ],
                    "children": [
                        {
                            "type": "ReturnValue",
                            "name": "position",
                            "range": [
                                54,
                                54
                            ],
                            "children": [],
                            "content": "position"
                        }
                    ],
                    "content": "return position"
                }
            ],
            "content": "def get_highest_set_bit_position(number:int)->int:\n\"\"\" \\n     Returns position of the highest set bit of a number. \\n     Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious \\n     >>> get_highest_set_bit_position(25) \\n     5 \\n     >>> get_highest_set_bit_position(37) \\n     6 \\n     >>> get_highest_set_bit_position(1) \\n     1 \\n     >>> get_highest_set_bit_position(4) \\n     3 \\n     >>> get_highest_set_bit_position(0) \\n     0 \\n     >>> get_highest_set_bit_position(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be an 'int' type \\n     \"\"\"\nif not isinstance(number,int):\nraise TypeError(\"Input value must be an 'int' type\")\n\nposition=0\nwhile number:\nposition+=1\nnumber>>=1\n\nreturn position\n"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                58,
                63
            ],
            "children": [
                {
                    "type": "BinaryExpression",
                    "name": "",
                    "range": [
                        59,
                        62
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "__name__",
                            "range": [
                                59,
                                59
                            ],
                            "children": [],
                            "content": "__name__"
                        },
                        {
                            "type": "Operator",
                            "name": "==",
                            "range": [
                                60,
                                61
                            ],
                            "children": [],
                            "content": "=="
                        },
                        {
                            "type": "Literal",
                            "name": "\"__main__\"",
                            "range": [
                                62,
                                62
                            ],
                            "children": [],
                            "content": "\"__main__\""
                        }
                    ],
                    "content": "__name__==\"__main__\""
                }
            ],
            "content": "if __name__==\"__main__\":"
        },
        {
            "type": "ImportStatement",
            "name": "doctest",
            "range": [
                65,
                66
            ],
            "children": [
                {
                    "type": "Module",
                    "name": "doctest",
                    "range": [
                        66,
                        66
                    ],
                    "children": [],
                    "content": "doctest"
                }
            ],
            "content": "import doctest"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                69,
                73
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "",
                    "range": [
                        69,
                        73
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "",
                            "range": [
                                69,
                                71
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "doctest",
                                    "range": [
                                        69,
                                        69
                                    ],
                                    "children": [],
                                    "content": "doctest"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "testmod",
                                    "range": [
                                        71,
                                        71
                                    ],
                                    "children": [],
                                    "content": "testmod"
                                }
                            ],
                            "content": "doctest.testmod"
                        }
                    ],
                    "content": "doctest.testmod()"
                }
            ],
            "content": "doctest.testmod()"
        }
    ],
    "content": "def get_highest_set_bit_position(number:int)->int:\n\"\"\" \\n     Returns position of the highest set bit of a number. \\n     Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious \\n     >>> get_highest_set_bit_position(25) \\n     5 \\n     >>> get_highest_set_bit_position(37) \\n     6 \\n     >>> get_highest_set_bit_position(1) \\n     1 \\n     >>> get_highest_set_bit_position(4) \\n     3 \\n     >>> get_highest_set_bit_position(0) \\n     0 \\n     >>> get_highest_set_bit_position(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be an 'int' type \\n     \"\"\"\nif not isinstance(number,int):\nraise TypeError(\"Input value must be an 'int' type\")\n\nposition=0\nwhile number:\nposition+=1\nnumber>>=1\n\nreturn position\n\n\nif __name__==\"__main__\":\nimport doctest\n\ndoctest.testmod()\n"
}