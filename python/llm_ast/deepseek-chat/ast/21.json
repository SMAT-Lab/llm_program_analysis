{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        4132
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                2
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "asyncio",
                    "range": [
                        0,
                        1
                    ],
                    "children": [],
                    "content": "import asyncio"
                }
            ],
            "content": "import asyncio\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                3,
                5
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "logging",
                    "range": [
                        3,
                        4
                    ],
                    "children": [],
                    "content": "import logging"
                }
            ],
            "content": "import logging\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                6,
                10
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "defaultdict",
                    "range": [
                        7,
                        9
                    ],
                    "children": [],
                    "content": "collections import defaultdict"
                }
            ],
            "content": "from collections import defaultdict\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                11,
                21
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "TYPE_CHECKING",
                    "range": [
                        12,
                        14
                    ],
                    "children": [],
                    "content": "typing import TYPE_CHECKING"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Annotated",
                    "range": [
                        16,
                        16
                    ],
                    "children": [],
                    "content": "Annotated"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Any",
                    "range": [
                        18,
                        18
                    ],
                    "children": [],
                    "content": "Any"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Sequence",
                    "range": [
                        20,
                        20
                    ],
                    "children": [],
                    "content": "Sequence"
                }
            ],
            "content": "from typing import TYPE_CHECKING,Annotated,Any,Sequence\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                23,
                25
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "pydantic",
                    "range": [
                        23,
                        24
                    ],
                    "children": [],
                    "content": "import pydantic"
                }
            ],
            "content": "import pydantic\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                26,
                34
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "auth_middleware",
                    "range": [
                        27,
                        33
                    ],
                    "children": [],
                    "content": "autogpt_libs.auth.middleware import auth_middleware"
                }
            ],
            "content": "from autogpt_libs.auth.middleware import auth_middleware\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                35,
                43
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "feature_flag",
                    "range": [
                        36,
                        42
                    ],
                    "children": [],
                    "content": "autogpt_libs.feature_flag.client import feature_flag"
                }
            ],
            "content": "from autogpt_libs.feature_flag.client import feature_flag\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                44,
                52
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "thread_cached",
                    "range": [
                        45,
                        51
                    ],
                    "children": [],
                    "content": "autogpt_libs.utils.cache import thread_cached"
                }
            ],
            "content": "from autogpt_libs.utils.cache import thread_cached\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                53,
                61
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "APIRouter",
                    "range": [
                        54,
                        56
                    ],
                    "children": [],
                    "content": "fastapi import APIRouter"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Depends",
                    "range": [
                        58,
                        58
                    ],
                    "children": [],
                    "content": "Depends"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "HTTPException",
                    "range": [
                        60,
                        60
                    ],
                    "children": [],
                    "content": "HTTPException"
                }
            ],
            "content": "from fastapi import APIRouter,Depends,HTTPException\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                62,
                68
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "Optional",
                    "range": [
                        63,
                        65
                    ],
                    "children": [],
                    "content": "typing_extensions import Optional"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "TypedDict",
                    "range": [
                        67,
                        67
                    ],
                    "children": [],
                    "content": "TypedDict"
                }
            ],
            "content": "from typing_extensions import Optional,TypedDict\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                70,
                76
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "block",
                    "range": [
                        71,
                        75
                    ],
                    "children": [],
                    "content": "backend.data.block"
                }
            ],
            "content": "import backend.data.block\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                77,
                85
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "router",
                    "range": [
                        78,
                        84
                    ],
                    "children": [],
                    "content": "backend.server.integrations.router"
                }
            ],
            "content": "import backend.server.integrations.router\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                86,
                94
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "analytics",
                    "range": [
                        87,
                        93
                    ],
                    "children": [],
                    "content": "backend.server.routers.analytics"
                }
            ],
            "content": "import backend.server.routers.analytics\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                95,
                103
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "execution_db",
                    "range": [
                        96,
                        102
                    ],
                    "children": [],
                    "content": "backend.data import execution as execution_db"
                }
            ],
            "content": "from backend.data import execution as execution_db\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                104,
                112
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "graph_db",
                    "range": [
                        105,
                        111
                    ],
                    "children": [],
                    "content": "backend.data import graph as graph_db"
                }
            ],
            "content": "from backend.data import graph as graph_db\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                113,
                153
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "APIKeyError",
                    "range": [
                        122,
                        122
                    ],
                    "children": [],
                    "content": "APIKeyError"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "APIKeyNotFoundError",
                    "range": [
                        125,
                        125
                    ],
                    "children": [],
                    "content": "APIKeyNotFoundError"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "APIKeyPermissionError",
                    "range": [
                        128,
                        128
                    ],
                    "children": [],
                    "content": "APIKeyPermissionError"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "APIKeyWithoutHash",
                    "range": [
                        131,
                        131
                    ],
                    "children": [],
                    "content": "APIKeyWithoutHash"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "generate_api_key",
                    "range": [
                        134,
                        134
                    ],
                    "children": [],
                    "content": "generate_api_key"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "get_api_key_by_id",
                    "range": [
                        137,
                        137
                    ],
                    "children": [],
                    "content": "get_api_key_by_id"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "list_user_api_keys",
                    "range": [
                        140,
                        140
                    ],
                    "children": [],
                    "content": "list_user_api_keys"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "revoke_api_key",
                    "range": [
                        143,
                        143
                    ],
                    "children": [],
                    "content": "revoke_api_key"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "suspend_api_key",
                    "range": [
                        146,
                        146
                    ],
                    "children": [],
                    "content": "suspend_api_key"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "update_api_key_permissions",
                    "range": [
                        149,
                        149
                    ],
                    "children": [],
                    "content": "update_api_key_permissions"
                }
            ],
            "content": "from backend.data.api_key import(\nAPIKeyError,\nAPIKeyNotFoundError,\nAPIKeyPermissionError,\nAPIKeyWithoutHash,\ngenerate_api_key,\nget_api_key_by_id,\nlist_user_api_keys,\nrevoke_api_key,\nsuspend_api_key,\nupdate_api_key_permissions,\n)\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                154,
                164
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "BlockInput",
                    "range": [
                        155,
                        161
                    ],
                    "children": [],
                    "content": "backend.data.block import BlockInput"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "CompletedBlockOutput",
                    "range": [
                        163,
                        163
                    ],
                    "children": [],
                    "content": "CompletedBlockOutput"
                }
            ],
            "content": "from backend.data.block import BlockInput,CompletedBlockOutput\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                165,
                175
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "get_block_costs",
                    "range": [
                        166,
                        172
                    ],
                    "children": [],
                    "content": "backend.data.credit import get_block_costs"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "get_user_credit_model",
                    "range": [
                        174,
                        174
                    ],
                    "children": [],
                    "content": "get_user_credit_model"
                }
            ],
            "content": "from backend.data.credit import get_block_costs,get_user_credit_model\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                176,
                184
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "get_or_create_user",
                    "range": [
                        177,
                        183
                    ],
                    "children": [],
                    "content": "backend.data.user import get_or_create_user"
                }
            ],
            "content": "from backend.data.user import get_or_create_user\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                185,
                195
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "ExecutionManager",
                    "range": [
                        186,
                        190
                    ],
                    "children": [],
                    "content": "backend.executor import ExecutionManager"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "ExecutionScheduler",
                    "range": [
                        192,
                        192
                    ],
                    "children": [],
                    "content": "ExecutionScheduler"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "scheduler",
                    "range": [
                        194,
                        194
                    ],
                    "children": [],
                    "content": "scheduler"
                }
            ],
            "content": "from backend.executor import ExecutionManager,ExecutionScheduler,scheduler\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                196,
                204
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "IntegrationCredentialsManager",
                    "range": [
                        197,
                        203
                    ],
                    "children": [],
                    "content": "backend.integrations.creds_manager import IntegrationCredentialsManager"
                }
            ],
            "content": "from backend.integrations.creds_manager import IntegrationCredentialsManager\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                205,
                223
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "on_graph_activate",
                    "range": [
                        206,
                        216
                    ],
                    "children": [],
                    "content": "backend.integrations.webhooks.graph_lifecycle_hooks import(\non_graph_activate"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "on_graph_deactivate",
                    "range": [
                        218,
                        218
                    ],
                    "children": [],
                    "content": "\n"
                }
            ],
            "content": "from backend.integrations.webhooks.graph_lifecycle_hooks import(\non_graph_activate,\non_graph_deactivate,\n)\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                224,
                249
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "CreateAPIKeyRequest",
                    "range": [
                        225,
                        233
                    ],
                    "children": [],
                    "content": "backend.server.model import(\nCreateAPIKeyRequest"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "CreateAPIKeyResponse",
                    "range": [
                        235,
                        235
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "CreateGraph",
                    "range": [
                        237,
                        239
                    ],
                    "children": [],
                    "content": ",\nCreateGraph"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "SetGraphActiveVersion",
                    "range": [
                        241,
                        242
                    ],
                    "children": [],
                    "content": "\nSetGraphActiveVersion"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "UpdatePermissionsRequest",
                    "range": [
                        244,
                        246
                    ],
                    "children": [],
                    "content": "\nUpdatePermissionsRequest,"
                }
            ],
            "content": "from backend.server.model import(\nCreateAPIKeyRequest,\nCreateAPIKeyResponse,\nCreateGraph,\nSetGraphActiveVersion,\nUpdatePermissionsRequest,\n)\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                250,
                258
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "get_user_id",
                    "range": [
                        251,
                        257
                    ],
                    "children": [],
                    "content": "backend.server.utils import get_user_id"
                }
            ],
            "content": "from backend.server.utils import get_user_id\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                259,
                267
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "get_service_client",
                    "range": [
                        260,
                        266
                    ],
                    "children": [],
                    "content": "backend.util.service import get_service_client"
                }
            ],
            "content": "from backend.util.service import get_service_client\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                268,
                276
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "Settings",
                    "range": [
                        269,
                        275
                    ],
                    "children": [],
                    "content": "backend.util.settings import Settings"
                }
            ],
            "content": "from backend.util.settings import Settings\n"
        },
        {
            "type": "FunctionDecl",
            "name": "execution_manager_client",
            "range": [
                281,
                295
            ],
            "children": [
                {
                    "type": "ReturnStatement",
                    "range": [
                        290,
                        294
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "get_service_client",
                                "range": [
                                    291,
                                    291
                                ],
                                "content": "\n"
                            },
                            "arguments": [
                                {
                                    "type": "Identifier",
                                    "name": "ExecutionManager",
                                    "range": [
                                        293,
                                        293
                                    ],
                                    "content": "@"
                                }
                            ],
                            "range": [
                                291,
                                294
                            ],
                            "content": "\n\n@thread_cached"
                        }
                    ],
                    "content": "\n\n\n@thread_cached"
                }
            ],
            "content": "\nfrom backend.data.model import Credentials\n\n\n@thread_cached\n"
        },
        {
            "type": "FunctionDecl",
            "name": "execution_scheduler_client",
            "range": [
                300,
                314
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "range": [
                        300,
                        307
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                300,
                                300
                            ],
                            "content": "-"
                        },
                        {
                            "type": "Identifier",
                            "name": "execution_scheduler_client",
                            "range": [
                                301,
                                301
                            ],
                            "content": ">"
                        },
                        {
                            "type": "Operator",
                            "name": "->",
                            "range": [
                                304,
                                305
                            ],
                            "content": "\nreturn"
                        },
                        {
                            "type": "Identifier",
                            "name": "ExecutionScheduler",
                            "range": [
                                306,
                                306
                            ],
                            "content": "get_service_client"
                        }
                    ],
                    "content": "->ExecutionManager:\nreturn get_service_client("
                },
                {
                    "type": "FunctionBody",
                    "range": [
                        308,
                        314
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "range": [
                                309,
                                313
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "return",
                                    "range": [
                                        309,
                                        309
                                    ],
                                    "content": ")"
                                },
                                {
                                    "type": "CallExpression",
                                    "range": [
                                        310,
                                        313
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "get_service_client",
                                            "range": [
                                                310,
                                                310
                                            ],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "ExecutionScheduler",
                                            "range": [
                                                312,
                                                312
                                            ],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "\n\n\n@"
                                }
                            ],
                            "content": ")\n\n\n@"
                        }
                    ],
                    "content": "ExecutionManager)\n\n\n@thread_cached"
                }
            ],
            "content": "->ExecutionManager:\nreturn get_service_client(ExecutionManager)\n\n\n@thread_cached"
        },
        {
            "type": "VariableDeclaration",
            "name": "v1_router",
            "range": [
                346,
                350
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        347,
                        347
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "CallExpression",
                    "name": "APIRouter",
                    "range": [
                        348,
                        350
                    ],
                    "children": [],
                    "content": "integration_creds_manager=IntegrationCredentialsManager"
                }
            ],
            "content": ")\nintegration_creds_manager=IntegrationCredentialsManager"
        },
        {
            "type": "CallExpression",
            "name": "include_router",
            "range": [
                353,
                381
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "backend.server.integrations.router.router",
                    "range": [
                        358,
                        366
                    ],
                    "children": [],
                    "content": "get_user_credit_model()\n\n#Define the API"
                },
                {
                    "type": "Identifier",
                    "name": "prefix",
                    "range": [
                        369,
                        371
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"/integrations\"",
                            "range": [
                                371,
                                371
                            ],
                            "children": [],
                            "content": "APIRouter"
                        }
                    ],
                    "content": "v1_router=APIRouter"
                },
                {
                    "type": "Identifier",
                    "name": "tags",
                    "range": [
                        374,
                        378
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "[\"integrations\"]",
                            "range": [
                                376,
                                378
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"integrations\"",
                                    "range": [
                                        377,
                                        377
                                    ],
                                    "children": [],
                                    "content": "."
                                }
                            ],
                            "content": "v1_router.include_router"
                        }
                    ],
                    "content": "\n\nv1_router.include_router"
                }
            ],
            "content": "\n\n\n_user_credit_model=get_user_credit_model()\n\n#Define the API routes\nv1_router=APIRouter()\n\nv1_router.include_router(\nbackend"
        },
        {
            "type": "CallExpression",
            "name": "include_router",
            "range": [
                384,
                422
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "backend.server.routers.analytics.router",
                    "range": [
                        389,
                        397
                    ],
                    "children": [],
                    "content": "router,\nprefix=\"/integrations\",\ntags"
                },
                {
                    "type": "Identifier",
                    "name": "prefix",
                    "range": [
                        400,
                        402
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"/analytics\"",
                            "range": [
                                402,
                                402
                            ],
                            "children": [],
                            "content": ","
                        }
                    ],
                    "content": "\"integrations\"],"
                },
                {
                    "type": "Identifier",
                    "name": "tags",
                    "range": [
                        405,
                        409
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "[\"analytics\"]",
                            "range": [
                                407,
                                409
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"analytics\"",
                                    "range": [
                                        408,
                                        408
                                    ],
                                    "children": [],
                                    "content": "."
                                }
                            ],
                            "content": "v1_router.include_router"
                        }
                    ],
                    "content": "\n\nv1_router.include_router"
                },
                {
                    "type": "Identifier",
                    "name": "dependencies",
                    "range": [
                        412,
                        419
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "[Depends(auth_middleware)]",
                            "range": [
                                414,
                                419
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "Depends",
                                    "range": [
                                        415,
                                        419
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "auth_middleware",
                                            "range": [
                                                417,
                                                417
                                            ],
                                            "children": [],
                                            "content": "."
                                        }
                                    ],
                                    "content": ".routers.analytics."
                                }
                            ],
                            "content": "server.routers.analytics."
                        }
                    ],
                    "content": "backend.server.routers.analytics."
                }
            ],
            "content": ".integrations.router.router,\nprefix=\"/integrations\",\ntags=[\"integrations\"],\n)\n\nv1_router.include_router(\nbackend.server.routers.analytics.router,\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_or_create_user_route",
            "range": [
                447,
                476
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "user_data",
                    "range": [
                        451,
                        458
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "dict",
                            "range": [
                                453,
                                453
                            ],
                            "children": [],
                            "content": "#"
                        },
                        {
                            "type": "DefaultValue",
                            "name": "Depends",
                            "range": [
                                455,
                                458
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "auth_middleware",
                                    "range": [
                                        457,
                                        457
                                    ],
                                    "children": [],
                                    "content": "#"
                                }
                            ],
                            "content": "####"
                        }
                    ],
                    "content": "########"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        461,
                        476
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "user",
                            "range": [
                                462,
                                468
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        463,
                                        468
                                    ],
                                    "children": [
                                        {
                                            "type": "AwaitExpression",
                                            "name": "await",
                                            "range": [
                                                464,
                                                468
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "get_or_create_user",
                                                    "range": [
                                                        465,
                                                        468
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "user_data",
                                                            "range": [
                                                                467,
                                                                467
                                                            ],
                                                            "children": [],
                                                            "content": "#"
                                                        }
                                                    ],
                                                    "content": "####"
                                                }
                                            ],
                                            "content": "#####"
                                        }
                                    ],
                                    "content": "######"
                                }
                            ],
                            "content": "#######"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                470,
                                475
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": ".",
                                    "range": [
                                        472,
                                        475
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "user",
                                            "range": [
                                                471,
                                                471
                                            ],
                                            "children": [],
                                            "content": "#"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "model_dump",
                                            "range": [
                                                473,
                                                475
                                            ],
                                            "children": [],
                                            "content": "###"
                                        }
                                    ],
                                    "content": "####"
                                }
                            ],
                            "content": "######"
                        }
                    ],
                    "content": "################"
                }
            ],
            "content": "\n\n############################"
        },
        {
            "type": "FunctionDecl",
            "name": "get_graph_blocks",
            "range": [
                502,
                579
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        502,
                        517
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                502,
                                505
                            ],
                            "children": [],
                            "content": "###\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "get_graph_blocks",
                            "range": [
                                503,
                                517
                            ],
                            "children": [],
                            "content": "##\n############"
                        },
                        {
                            "type": "ReturnType",
                            "name": "",
                            "range": [
                                506,
                                517
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "->",
                                    "range": [
                                        506,
                                        508
                                    ],
                                    "children": [],
                                    "content": "###"
                                },
                                {
                                    "type": "Type",
                                    "name": "Sequence",
                                    "range": [
                                        508,
                                        517
                                    ],
                                    "children": [
                                        {
                                            "type": "GenericType",
                                            "name": "dict",
                                            "range": [
                                                510,
                                                515
                                            ],
                                            "children": [
                                                {
                                                    "type": "Type",
                                                    "name": "Any",
                                                    "range": [
                                                        512,
                                                        515
                                                    ],
                                                    "children": [],
                                                    "content": "####"
                                                }
                                            ],
                                            "content": "######"
                                        }
                                    ],
                                    "content": "##########"
                                }
                            ],
                            "content": "############"
                        }
                    ],
                    "content": "###\n############"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        518,
                        579
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "blocks",
                            "range": [
                                519,
                                541
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        520,
                                        541
                                    ],
                                    "children": [
                                        {
                                            "type": "ListComprehension",
                                            "name": "",
                                            "range": [
                                                521,
                                                541
                                            ],
                                            "children": [
                                                {
                                                    "type": "Expression",
                                                    "name": "block",
                                                    "range": [
                                                        522,
                                                        540
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "block",
                                                            "range": [
                                                                522,
                                                                540
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "block",
                                                                    "range": [
                                                                        522,
                                                                        527
                                                                    ],
                                                                    "children": [],
                                                                    "content": "#####Auth"
                                                                }
                                                            ],
                                                            "content": "#####Auth#############"
                                                        }
                                                    ],
                                                    "content": "#####Auth#############"
                                                },
                                                {
                                                    "type": "ForStatement",
                                                    "name": "",
                                                    "range": [
                                                        525,
                                                        540
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Variable",
                                                            "name": "block",
                                                            "range": [
                                                                526,
                                                                531
                                                            ],
                                                            "children": [],
                                                            "content": "#Auth####"
                                                        },
                                                        {
                                                            "type": "Expression",
                                                            "name": "backend.data.block.get_blocks().values()",
                                                            "range": [
                                                                528,
                                                                540
                                                            ],
                                                            "children": [],
                                                            "content": "#############"
                                                        }
                                                    ],
                                                    "content": "##Auth#############"
                                                }
                                            ],
                                            "content": "######Auth##############"
                                        }
                                    ],
                                    "content": "#######Auth##############"
                                }
                            ],
                            "content": "########Auth##############"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "costs",
                            "range": [
                                543,
                                548
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        544,
                                        548
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_block_costs",
                                            "range": [
                                                545,
                                                548
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "get_block_costs",
                                                    "range": [
                                                        545,
                                                        548
                                                    ],
                                                    "children": [],
                                                    "content": "####"
                                                }
                                            ],
                                            "content": "####"
                                        }
                                    ],
                                    "content": "#####"
                                }
                            ],
                            "content": "######"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                549,
                                579
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "return",
                                    "range": [
                                        549,
                                        555
                                    ],
                                    "children": [],
                                    "content": "#######"
                                },
                                {
                                    "type": "ListComprehension",
                                    "name": "",
                                    "range": [
                                        550,
                                        579
                                    ],
                                    "children": [
                                        {
                                            "type": "Expression",
                                            "name": "",
                                            "range": [
                                                551,
                                                573
                                            ],
                                            "children": [
                                                {
                                                    "type": "Dictionary",
                                                    "name": "",
                                                    "range": [
                                                        551,
                                                        573
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "KeyValuePair",
                                                            "name": "",
                                                            "range": [
                                                                552,
                                                                562
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Expression",
                                                                    "name": "*b.to_dict()",
                                                                    "range": [
                                                                        552,
                                                                        562
                                                                    ],
                                                                    "children": [],
                                                                    "content": "#####\n#####"
                                                                }
                                                            ],
                                                            "content": "#####\n#####"
                                                        },
                                                        {
                                                            "type": "KeyValuePair",
                                                            "name": "",
                                                            "range": [
                                                                560,
                                                                572
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Key",
                                                                    "name": "costs",
                                                                    "range": [
                                                                        560,
                                                                        565
                                                                    ],
                                                                    "children": [],
                                                                    "content": "######"
                                                                },
                                                                {
                                                                    "type": "Expression",
                                                                    "name": "costs.get(b.id, [])",
                                                                    "range": [
                                                                        562,
                                                                        572
                                                                    ],
                                                                    "children": [],
                                                                    "content": "###########"
                                                                }
                                                            ],
                                                            "content": "#############"
                                                        }
                                                    ],
                                                    "content": "######\n################"
                                                }
                                            ],
                                            "content": "######\n################"
                                        },
                                        {
                                            "type": "ForStatement",
                                            "name": "",
                                            "range": [
                                                574,
                                                579
                                            ],
                                            "children": [
                                                {
                                                    "type": "Variable",
                                                    "name": "b",
                                                    "range": [
                                                        575,
                                                        576
                                                    ],
                                                    "children": [],
                                                    "content": "##"
                                                },
                                                {
                                                    "type": "Expression",
                                                    "name": "blocks",
                                                    "range": [
                                                        577,
                                                        579
                                                    ],
                                                    "children": [],
                                                    "content": "###"
                                                }
                                            ],
                                            "content": "######"
                                        }
                                    ],
                                    "content": "#######\n######################"
                                }
                            ],
                            "content": "########\n######################"
                        }
                    ],
                    "content": "#########Auth#############################\n######################"
                }
            ],
            "content": "###\n#####################Auth#############################\n######################"
        },
        {
            "type": "FunctionDecl",
            "name": "execute_graph_block",
            "range": [
                610,
                690
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "block_id",
                    "range": [
                        613,
                        615
                    ],
                    "children": [],
                    "content": "#\n\n"
                },
                {
                    "type": "Parameter",
                    "name": "data",
                    "range": [
                        617,
                        619
                    ],
                    "children": [],
                    "content": "@v1_router."
                },
                {
                    "type": "ReturnType",
                    "name": "CompletedBlockOutput",
                    "range": [
                        621,
                        623
                    ],
                    "children": [],
                    "content": "(\"/auth/user\","
                },
                {
                    "type": "Assignment",
                    "name": "obj",
                    "range": [
                        626,
                        638
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "get_block",
                            "range": [
                                634,
                                637
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "block_id",
                                    "range": [
                                        636,
                                        636
                                    ],
                                    "children": [],
                                    "content": ")"
                                }
                            ],
                            "content": "(auth_middleware)]"
                        }
                    ],
                    "content": "[\"auth\"],dependencies=[Depends(auth_middleware)])"
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        639,
                        656
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "not obj",
                            "range": [
                                640,
                                641
                            ],
                            "children": [],
                            "content": "async def"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "HTTPException",
                            "range": [
                                644,
                                655
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "status_code",
                                    "range": [
                                        647,
                                        649
                                    ],
                                    "children": [],
                                    "content": "=Depends("
                                },
                                {
                                    "type": "Argument",
                                    "name": "detail",
                                    "range": [
                                        651,
                                        654
                                    ],
                                    "children": [],
                                    "content": ")):\n"
                                }
                            ],
                            "content": "user_data:dict=Depends(auth_middleware)):\nuser"
                        }
                    ],
                    "content": "\nasync def get_or_create_user_route(user_data:dict=Depends(auth_middleware)):\nuser="
                },
                {
                    "type": "Assignment",
                    "name": "output",
                    "range": [
                        658,
                        664
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "defaultdict",
                            "range": [
                                660,
                                663
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "list",
                                    "range": [
                                        662,
                                        662
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "user_data)\nreturn"
                        }
                    ],
                    "content": "get_or_create_user(user_data)\nreturn user"
                },
                {
                    "type": "ForStatement",
                    "name": "",
                    "range": [
                        665,
                        687
                    ],
                    "children": [
                        {
                            "type": "Iteration",
                            "name": "name, data in obj.execute(data)",
                            "range": [
                                666,
                                675
                            ],
                            "children": [],
                            "content": "model_dump()\n\n\n####"
                        },
                        {
                            "type": "Assignment",
                            "name": "output[name].append(data)",
                            "range": [
                                678,
                                686
                            ],
                            "children": [],
                            "content": "#########"
                        }
                    ],
                    "content": ".model_dump()\n\n\n################"
                },
                {
                    "type": "ReturnStatement",
                    "name": "output",
                    "range": [
                        688,
                        689
                    ],
                    "children": [],
                    "content": "##"
                }
            ],
            "content": "####\n\n\n@v1_router.post(\"/auth/user\",tags=[\"auth\"],dependencies=[Depends(auth_middleware)])\nasync def get_or_create_user_route(user_data:dict=Depends(auth_middleware)):\nuser=await get_or_create_user(user_data)\nreturn user.model_dump()\n\n\n###################"
        },
        {
            "type": "CallExpression",
            "name": "get",
            "range": [
                694,
                708
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "path",
                    "range": [
                        696,
                        698
                    ],
                    "children": [],
                    "content": "###"
                },
                {
                    "type": "Argument",
                    "name": "dependencies",
                    "range": [
                        700,
                        707
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "Depends",
                            "range": [
                                703,
                                706
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "auth_middleware",
                                    "range": [
                                        705,
                                        705
                                    ],
                                    "children": [],
                                    "content": "#"
                                }
                            ],
                            "content": "####"
                        }
                    ],
                    "content": "########"
                }
            ],
            "content": "###############"
        },
        {
            "type": "FunctionDecl",
            "name": "get_user_credits",
            "range": [
                710,
                776
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        715,
                        725
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated",
                            "range": [
                                717,
                                725
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "str",
                                    "range": [
                                        719,
                                        719
                                    ],
                                    "children": [],
                                    "content": "#"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "Depends",
                                    "range": [
                                        721,
                                        724
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "get_user_id",
                                            "range": [
                                                723,
                                                723
                                            ],
                                            "children": [],
                                            "content": "#"
                                        }
                                    ],
                                    "content": "####"
                                }
                            ],
                            "content": "#########"
                        }
                    ],
                    "content": "###########"
                },
                {
                    "type": "ReturnType",
                    "name": "dict",
                    "range": [
                        731,
                        736
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "str",
                            "range": [
                                733,
                                733
                            ],
                            "children": [],
                            "content": "#"
                        },
                        {
                            "type": "Type",
                            "name": "int",
                            "range": [
                                735,
                                735
                            ],
                            "children": [],
                            "content": "#"
                        }
                    ],
                    "content": "######"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        759,
                        775
                    ],
                    "children": [
                        {
                            "type": "Dictionary",
                            "name": "credits",
                            "range": [
                                760,
                                775
                            ],
                            "children": [
                                {
                                    "type": "KeyValuePair",
                                    "name": "credits",
                                    "range": [
                                        761,
                                        774
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "max",
                                            "range": [
                                                763,
                                                774
                                            ],
                                            "children": [
                                                {
                                                    "type": "AwaitExpression",
                                                    "name": "await",
                                                    "range": [
                                                        765,
                                                        771
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "get_or_refill_credit",
                                                            "range": [
                                                                768,
                                                                771
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "user_id",
                                                                    "range": [
                                                                        770,
                                                                        770
                                                                    ],
                                                                    "children": [],
                                                                    "content": "#"
                                                                }
                                                            ],
                                                            "content": "####"
                                                        }
                                                    ],
                                                    "content": "#######"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "0",
                                                    "range": [
                                                        773,
                                                        773
                                                    ],
                                                    "children": [],
                                                    "content": "#"
                                                }
                                            ],
                                            "content": "############"
                                        }
                                    ],
                                    "content": "##############"
                                }
                            ],
                            "content": "################"
                        }
                    ],
                    "content": "#################"
                }
            ],
            "content": "##################\n#####################Blocks##########################"
        },
        {
            "type": "ClassDecl",
            "name": "DeleteGraphResponse",
            "range": [
                777,
                788
            ],
            "children": [
                {
                    "type": "TypedDict",
                    "name": "DeleteGraphResponse",
                    "range": [
                        779,
                        781
                    ],
                    "children": [],
                    "content": "###"
                },
                {
                    "type": "FieldDecl",
                    "name": "version_counts",
                    "range": [
                        784,
                        786
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                786,
                                786
                            ],
                            "children": [],
                            "content": "#"
                        }
                    ],
                    "content": "###"
                }
            ],
            "content": "#\n##########"
        },
        {
            "type": "CallExpression",
            "name": "get",
            "range": [
                789,
                812
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "path",
                    "range": [
                        794,
                        796
                    ],
                    "children": [],
                    "content": "###"
                },
                {
                    "type": "Literal",
                    "name": "tags",
                    "range": [
                        798,
                        802
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "",
                            "range": [
                                800,
                                802
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"graphs\"",
                                    "range": [
                                        801,
                                        801
                                    ],
                                    "children": [],
                                    "content": "#"
                                }
                            ],
                            "content": "###"
                        }
                    ],
                    "content": "#####"
                },
                {
                    "type": "Literal",
                    "name": "dependencies",
                    "range": [
                        804,
                        811
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "",
                            "range": [
                                806,
                                811
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "Depends",
                                    "range": [
                                        807,
                                        810
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "auth_middleware",
                                            "range": [
                                                809,
                                                809
                                            ],
                                            "children": [],
                                            "content": "#"
                                        }
                                    ],
                                    "content": "####"
                                }
                            ],
                            "content": "######"
                        }
                    ],
                    "content": "########"
                }
            ],
            "content": "########################"
        },
        {
            "type": "FunctionDecl",
            "name": "get_graph",
            "range": [
                914,
                1003
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        914,
                        959
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                914,
                                919
                            ],
                            "children": [],
                            "content": "*b.to_dict()"
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                915,
                                918
                            ],
                            "children": [],
                            "content": "b.to_dict("
                        },
                        {
                            "type": "Identifier",
                            "name": "get_graph",
                            "range": [
                                916,
                                925
                            ],
                            "children": [],
                            "content": ".to_dict(),\"costs\":costs.get"
                        },
                        {
                            "type": "ParameterList",
                            "name": "",
                            "range": [
                                917,
                                953
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "graph_id",
                                    "range": [
                                        919,
                                        922
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "",
                                            "range": [
                                                920,
                                                921
                                            ],
                                            "children": [
                                                {
                                                    "type": "Type",
                                                    "name": "str",
                                                    "range": [
                                                        921,
                                                        924
                                                    ],
                                                    "children": [],
                                                    "content": "\"costs\":costs."
                                                }
                                            ],
                                            "content": ",\"costs\""
                                        }
                                    ],
                                    "content": "),\"costs\":"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "user_id",
                                    "range": [
                                        924,
                                        935
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "",
                                            "range": [
                                                925,
                                                934
                                            ],
                                            "children": [
                                                {
                                                    "type": "Type",
                                                    "name": "Annotated",
                                                    "range": [
                                                        926,
                                                        935
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Type",
                                                            "name": "str",
                                                            "range": [
                                                                928,
                                                                931
                                                            ],
                                                            "children": [],
                                                            "content": ".id,["
                                                        },
                                                        {
                                                            "type": "Dependency",
                                                            "name": "Depends",
                                                            "range": [
                                                                930,
                                                                933
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "get_user_id",
                                                                    "range": [
                                                                        932,
                                                                        933
                                                                    ],
                                                                    "children": [],
                                                                    "content": "])"
                                                                }
                                                            ],
                                                            "content": ",[])"
                                                        }
                                                    ],
                                                    "content": "(b.id,[])}for"
                                                }
                                            ],
                                            "content": "get(b.id,[])}"
                                        }
                                    ],
                                    "content": ".get(b.id,[])}for"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "version",
                                    "range": [
                                        937,
                                        943
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "",
                                            "range": [
                                                938,
                                                942
                                            ],
                                            "children": [
                                                {
                                                    "type": "Type",
                                                    "name": "int",
                                                    "range": [
                                                        939,
                                                        942
                                                    ],
                                                    "children": [],
                                                    "content": "]\n\n\n"
                                                },
                                                {
                                                    "type": "Type",
                                                    "name": "None",
                                                    "range": [
                                                        941,
                                                        944
                                                    ],
                                                    "children": [],
                                                    "content": "\n\n@v1_router"
                                                }
                                            ],
                                            "content": "blocks]\n\n\n"
                                        }
                                    ],
                                    "content": "in blocks]\n\n\n@"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "hide_credentials",
                                    "range": [
                                        946,
                                        950
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "",
                                            "range": [
                                                947,
                                                949
                                            ],
                                            "children": [
                                                {
                                                    "type": "Type",
                                                    "name": "bool",
                                                    "range": [
                                                        948,
                                                        951
                                                    ],
                                                    "children": [],
                                                    "content": "\npath=\"/blocks/{block_id}/execute\""
                                                }
                                            ],
                                            "content": "(\npath"
                                        }
                                    ],
                                    "content": "post(\npath="
                                }
                            ],
                            "content": "to_dict(),\"costs\":costs.get(b.id,[])}for b in blocks]\n\n\n@v1_router.post(\npath=\"/blocks/{block_id}/execute\",\n"
                        },
                        {
                            "type": "ReturnType",
                            "name": "",
                            "range": [
                                954,
                                959
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "graph_db.GraphModel",
                                    "range": [
                                        956,
                                        959
                                    ],
                                    "children": [],
                                    "content": "[\"blocks\"],"
                                }
                            ],
                            "content": "tags=[\"blocks\"],"
                        }
                    ],
                    "content": "*b.to_dict(),\"costs\":costs.get(b.id,[])}for b in blocks]\n\n\n@v1_router.post(\npath=\"/blocks/{block_id}/execute\",\ntags=[\"blocks\"],"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        960,
                        1003
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "graph",
                            "range": [
                                961,
                                981
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "await",
                                    "range": [
                                        963,
                                        968
                                    ],
                                    "children": [],
                                    "content": "[Depends(auth_middleware)]"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "graph_db.get_graph",
                                    "range": [
                                        964,
                                        981
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "graph_id",
                                            "range": [
                                                969,
                                                970
                                            ],
                                            "children": [],
                                            "content": ",\n"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "version",
                                            "range": [
                                                971,
                                                972
                                            ],
                                            "children": [],
                                            "content": ")\n"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "user_id",
                                            "range": [
                                                973,
                                                975
                                            ],
                                            "children": [],
                                            "content": "def execute_graph_block("
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "for_export",
                                            "range": [
                                                977,
                                                979
                                            ],
                                            "children": [],
                                            "content": ":str,"
                                        }
                                    ],
                                    "content": "Depends(auth_middleware)],\n)\ndef execute_graph_block(block_id:str,data:"
                                }
                            ],
                            "content": "dependencies=[Depends(auth_middleware)],\n)\ndef execute_graph_block(block_id:str,data:"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                983,
                                1000
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        983,
                                        986
                                    ],
                                    "children": [
                                        {
                                            "type": "UnaryExpression",
                                            "name": "not",
                                            "range": [
                                                984,
                                                985
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "graph",
                                                    "range": [
                                                        985,
                                                        986
                                                    ],
                                                    "children": [],
                                                    "content": ">CompletedBlockOutput"
                                                }
                                            ],
                                            "content": "->"
                                        }
                                    ],
                                    "content": ")->CompletedBlockOutput"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        987,
                                        1000
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "",
                                            "range": [
                                                988,
                                                999
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "HTTPException",
                                                    "range": [
                                                        989,
                                                        999
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "status_code",
                                                            "range": [
                                                                991,
                                                                993
                                                            ],
                                                            "children": [],
                                                            "content": "backend.data"
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "detail",
                                                            "range": [
                                                                995,
                                                                998
                                                            ],
                                                            "children": [],
                                                            "content": "block.get_block("
                                                        }
                                                    ],
                                                    "content": "obj=backend.data.block.get_block(block_id"
                                                }
                                            ],
                                            "content": "\nobj=backend.data.block.get_block(block_id"
                                        }
                                    ],
                                    "content": ":\nobj=backend.data.block.get_block(block_id)"
                                }
                            ],
                            "content": ")->CompletedBlockOutput:\nobj=backend.data.block.get_block(block_id)"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                1001,
                                1003
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "graph",
                                    "range": [
                                        1002,
                                        1003
                                    ],
                                    "children": [],
                                    "content": "if not"
                                }
                            ],
                            "content": "\nif not"
                        }
                    ],
                    "content": "\ndependencies=[Depends(auth_middleware)],\n)\ndef execute_graph_block(block_id:str,data:BlockInput)->CompletedBlockOutput:\nobj=backend.data.block.get_block(block_id)\nif not"
                }
            ],
            "content": "*b.to_dict(),\"costs\":costs.get(b.id,[])}for b in blocks]\n\n\n@v1_router.post(\npath=\"/blocks/{block_id}/execute\",\ntags=[\"blocks\"],\ndependencies=[Depends(auth_middleware)],\n)\ndef execute_graph_block(block_id:str,data:BlockInput)->CompletedBlockOutput:\nobj=backend.data.block.get_block(block_id)\nif not"
        },
        {
            "type": "FunctionDecl",
            "name": "get_graph_all_versions",
            "range": [
                1066,
                1132
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        1066,
                        1096
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                1066,
                                1071
                            ],
                            "children": [],
                            "content": "######"
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                1067,
                                1070
                            ],
                            "children": [],
                            "content": "####"
                        },
                        {
                            "type": "Identifier",
                            "name": "get_graph_all_versions",
                            "range": [
                                1068,
                                1089
                            ],
                            "children": [],
                            "content": "######################"
                        },
                        {
                            "type": "ParameterList",
                            "name": "",
                            "range": [
                                1069,
                                1086
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "graph_id",
                                    "range": [
                                        1071,
                                        1074
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "",
                                            "range": [
                                                1072,
                                                1073
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "str",
                                                    "range": [
                                                        1073,
                                                        1076
                                                    ],
                                                    "children": [],
                                                    "content": "####"
                                                }
                                            ],
                                            "content": "##"
                                        }
                                    ],
                                    "content": "####"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "user_id",
                                    "range": [
                                        1075,
                                        1085
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "",
                                            "range": [
                                                1076,
                                                1085
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "Annotated",
                                                    "range": [
                                                        1077,
                                                        1086
                                                    ],
                                                    "children": [],
                                                    "content": "##########"
                                                },
                                                {
                                                    "type": "TypeArgumentList",
                                                    "name": "",
                                                    "range": [
                                                        1078,
                                                        1085
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "str",
                                                            "range": [
                                                                1079,
                                                                1082
                                                            ],
                                                            "children": [],
                                                            "content": "####"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "Depends",
                                                            "range": [
                                                                1081,
                                                                1088
                                                            ],
                                                            "children": [],
                                                            "content": "########"
                                                        }
                                                    ],
                                                    "content": "########"
                                                }
                                            ],
                                            "content": "##########"
                                        }
                                    ],
                                    "content": "###########"
                                }
                            ],
                            "content": "##################"
                        },
                        {
                            "type": "ReturnType",
                            "name": "",
                            "range": [
                                1088,
                                1096
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "Sequence",
                                    "range": [
                                        1090,
                                        1097
                                    ],
                                    "children": [],
                                    "content": "########"
                                },
                                {
                                    "type": "TypeArgumentList",
                                    "name": "",
                                    "range": [
                                        1091,
                                        1096
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "graph_db",
                                            "range": [
                                                1092,
                                                1099
                                            ],
                                            "children": [],
                                            "content": "########"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "GraphModel",
                                            "range": [
                                                1094,
                                                1103
                                            ],
                                            "children": [],
                                            "content": "##########"
                                        }
                                    ],
                                    "content": "######"
                                }
                            ],
                            "content": "#########"
                        }
                    ],
                    "content": "###############################"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        1097,
                        1132
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "graphs",
                            "range": [
                                1098,
                                1111
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "await",
                                    "range": [
                                        1100,
                                        1105
                                    ],
                                    "children": [],
                                    "content": "######"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "",
                                    "range": [
                                        1101,
                                        1110
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "graph_db",
                                            "range": [
                                                1101,
                                                1108
                                            ],
                                            "children": [],
                                            "content": "########"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "get_graph_all_versions",
                                            "range": [
                                                1103,
                                                1126
                                            ],
                                            "children": [],
                                            "content": "#########\n##############"
                                        },
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                1104,
                                                1110
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "graph_id",
                                                    "range": [
                                                        1105,
                                                        1112
                                                    ],
                                                    "children": [],
                                                    "content": "#######\n"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "user_id",
                                                    "range": [
                                                        1107,
                                                        1114
                                                    ],
                                                    "children": [],
                                                    "content": "#####\n##"
                                                }
                                            ],
                                            "content": "#######"
                                        }
                                    ],
                                    "content": "##########"
                                }
                            ],
                            "content": "##############"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                1112,
                                1129
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        1113,
                                        1115
                                    ],
                                    "children": [
                                        {
                                            "type": "UnaryExpression",
                                            "name": "not",
                                            "range": [
                                                1113,
                                                1117
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "graphs",
                                                    "range": [
                                                        1114,
                                                        1120
                                                    ],
                                                    "children": [],
                                                    "content": "#######"
                                                }
                                            ],
                                            "content": "#####"
                                        }
                                    ],
                                    "content": "###"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        1115,
                                        1129
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "",
                                            "range": [
                                                1117,
                                                1128
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "",
                                                    "range": [
                                                        1118,
                                                        1127
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "HTTPException",
                                                            "range": [
                                                                1118,
                                                                1131
                                                            ],
                                                            "children": [],
                                                            "content": "##############"
                                                        },
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "",
                                                            "range": [
                                                                1119,
                                                                1127
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "AssignmentExpression",
                                                                    "name": "status_code",
                                                                    "range": [
                                                                        1120,
                                                                        1123
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "404",
                                                                            "range": [
                                                                                1122,
                                                                                1125
                                                                            ],
                                                                            "children": [],
                                                                            "content": "####"
                                                                        }
                                                                    ],
                                                                    "content": "####"
                                                                },
                                                                {
                                                                    "type": "AssignmentExpression",
                                                                    "name": "detail",
                                                                    "range": [
                                                                        1124,
                                                                        1127
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "TemplateLiteral",
                                                                            "name": "",
                                                                            "range": [
                                                                                1126,
                                                                                1127
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "TemplateElement",
                                                                                    "name": "Graph #{graph_id} not found.",
                                                                                    "range": [
                                                                                        1127,
                                                                                        1128
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "##"
                                                                                }
                                                                            ],
                                                                            "content": "##"
                                                                        }
                                                                    ],
                                                                    "content": "####"
                                                                }
                                                            ],
                                                            "content": "#########"
                                                        }
                                                    ],
                                                    "content": "##########"
                                                }
                                            ],
                                            "content": "############"
                                        }
                                    ],
                                    "content": "###############"
                                }
                            ],
                            "content": "\n#################"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                1130,
                                1132
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "graphs",
                                    "range": [
                                        1131,
                                        1132
                                    ],
                                    "children": [],
                                    "content": "##"
                                }
                            ],
                            "content": "###"
                        }
                    ],
                    "content": "###############\n####################"
                }
            ],
            "content": "##############################################\n####################"
        },
        {
            "type": "CallExpression",
            "name": "post",
            "range": [
                1136,
                1158
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "path",
                    "range": [
                        1139,
                        1141
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"/graphs\"",
                            "range": [
                                1141,
                                1141
                            ],
                            "children": [],
                            "content": "#"
                        }
                    ],
                    "content": "###"
                },
                {
                    "type": "Argument",
                    "name": "tags",
                    "range": [
                        1143,
                        1147
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "",
                            "range": [
                                1145,
                                1147
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"graphs\"",
                                    "range": [
                                        1146,
                                        1146
                                    ],
                                    "children": [],
                                    "content": "#"
                                }
                            ],
                            "content": "###"
                        }
                    ],
                    "content": "#####"
                },
                {
                    "type": "Argument",
                    "name": "dependencies",
                    "range": [
                        1149,
                        1156
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "",
                            "range": [
                                1151,
                                1156
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "Depends",
                                    "range": [
                                        1152,
                                        1155
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "auth_middleware",
                                            "range": [
                                                1154,
                                                1154
                                            ],
                                            "children": [],
                                            "content": "#"
                                        }
                                    ],
                                    "content": "####"
                                }
                            ],
                            "content": "######"
                        }
                    ],
                    "content": "########"
                }
            ],
            "content": "#######################"
        },
        {
            "type": "FunctionDecl",
            "name": "do_create_graph",
            "range": [
                1204,
                1418
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "async",
                    "range": [
                        1204,
                        1204
                    ],
                    "children": [],
                    "content": "#"
                },
                {
                    "type": "Keyword",
                    "name": "def",
                    "range": [
                        1205,
                        1205
                    ],
                    "children": [],
                    "content": "#"
                },
                {
                    "type": "Identifier",
                    "name": "do_create_graph",
                    "range": [
                        1206,
                        1206
                    ],
                    "children": [],
                    "content": "#"
                },
                {
                    "type": "Parameter",
                    "name": "create_graph",
                    "range": [
                        1209,
                        1211
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "create_graph",
                            "range": [
                                1209,
                                1209
                            ],
                            "children": [],
                            "content": "#"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "CreateGraph",
                            "range": [
                                1211,
                                1211
                            ],
                            "children": [],
                            "content": "#"
                        }
                    ],
                    "content": "###"
                },
                {
                    "type": "Parameter",
                    "name": "is_template",
                    "range": [
                        1214,
                        1216
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "is_template",
                            "range": [
                                1214,
                                1214
                            ],
                            "children": [],
                            "content": "#"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "bool",
                            "range": [
                                1216,
                                1216
                            ],
                            "children": [],
                            "content": "#"
                        }
                    ],
                    "content": "###"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        1230,
                        1232
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "user_id",
                            "range": [
                                1230,
                                1230
                            ],
                            "children": [],
                            "content": "dependencies"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                1232,
                                1232
                            ],
                            "children": [],
                            "content": "["
                        }
                    ],
                    "content": "dependencies=["
                },
                {
                    "type": "ReturnType",
                    "name": "->",
                    "range": [
                        1236,
                        1237
                    ],
                    "children": [],
                    "content": ")]"
                },
                {
                    "type": "TypeAnnotation",
                    "name": "graph_db.GraphModel",
                    "range": [
                        1238,
                        1240
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "graph_db",
                            "range": [
                                1238,
                                1238
                            ],
                            "children": [],
                            "content": ")"
                        },
                        {
                            "type": "Identifier",
                            "name": "GraphModel",
                            "range": [
                                1240,
                                1240
                            ],
                            "children": [],
                            "content": "async"
                        }
                    ],
                    "content": ")\nasync"
                },
                {
                    "type": "Block",
                    "name": "FunctionBody",
                    "range": [
                        1242,
                        1418
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                1243,
                                1261
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "create_graph.graph",
                                    "range": [
                                        1244,
                                        1247
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "create_graph",
                                            "range": [
                                                1244,
                                                1244
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "graph",
                                            "range": [
                                                1246,
                                                1246
                                            ],
                                            "children": [],
                                            "content": ":"
                                        }
                                    ],
                                    "content": "\nuser_id:Annotated"
                                },
                                {
                                    "type": "Assignment",
                                    "name": "graph = graph_db.make_graph_model(create_graph.graph, user_id)",
                                    "range": [
                                        1249,
                                        1260
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "graph",
                                            "range": [
                                                1249,
                                                1249
                                            ],
                                            "children": [],
                                            "content": "str"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "graph_db.make_graph_model",
                                            "range": [
                                                1251,
                                                1260
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "graph_db",
                                                    "range": [
                                                        1251,
                                                        1251
                                                    ],
                                                    "children": [],
                                                    "content": "Depends"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "make_graph_model",
                                                    "range": [
                                                        1253,
                                                        1253
                                                    ],
                                                    "children": [],
                                                    "content": "get_user_id"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "create_graph",
                                                    "range": [
                                                        1255,
                                                        1255
                                                    ],
                                                    "children": [],
                                                    "content": "]"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "graph",
                                                    "range": [
                                                        1257,
                                                        1257
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "user_id",
                                                    "range": [
                                                        1259,
                                                        1259
                                                    ],
                                                    "children": [],
                                                    "content": "-"
                                                }
                                            ],
                                            "content": "Depends(get_user_id)],\n)->"
                                        }
                                    ],
                                    "content": "str,Depends(get_user_id)],\n)->"
                                }
                            ],
                            "content": "(\nuser_id:Annotated[str,Depends(get_user_id)],\n)->dict"
                        },
                        {
                            "type": "ElifStatement",
                            "name": "elif",
                            "range": [
                                1262,
                                1306
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "create_graph.template_id",
                                    "range": [
                                        1263,
                                        1266
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "create_graph",
                                            "range": [
                                                1263,
                                                1263
                                            ],
                                            "children": [],
                                            "content": "str"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "template_id",
                                            "range": [
                                                1265,
                                                1265
                                            ],
                                            "children": [],
                                            "content": "int"
                                        }
                                    ],
                                    "content": "str,int]"
                                },
                                {
                                    "type": "Assignment",
                                    "name": "graph = await graph_db.get_graph(create_graph.template_id, create_graph.template_version, template=True, user_id=user_id)",
                                    "range": [
                                        1277,
                                        1305
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "graph",
                                            "range": [
                                                1277,
                                                1277
                                            ],
                                            "children": [],
                                            "content": "it"
                                        },
                                        {
                                            "type": "Keyword",
                                            "name": "await",
                                            "range": [
                                                1279,
                                                1279
                                            ],
                                            "children": [],
                                            "content": "t"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "graph_db.get_graph",
                                            "range": [
                                                1280,
                                                1305
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "graph_db",
                                                    "range": [
                                                        1280,
                                                        1280
                                                    ],
                                                    "children": [],
                                                    "content": "have"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "get_graph",
                                                    "range": [
                                                        1282,
                                                        1282
                                                    ],
                                                    "children": [],
                                                    "content": "be"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "create_graph",
                                                    "range": [
                                                        1285,
                                                        1285
                                                    ],
                                                    "children": [],
                                                    "content": "on"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "template_id",
                                                    "range": [
                                                        1287,
                                                        1287
                                                    ],
                                                    "children": [],
                                                    "content": "endpoints"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "create_graph",
                                                    "range": [
                                                        1290,
                                                        1290
                                                    ],
                                                    "children": [],
                                                    "content": "#"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "template_version",
                                                    "range": [
                                                        1292,
                                                        1292
                                                    ],
                                                    "children": [],
                                                    "content": "create_graph"
                                                },
                                                {
                                                    "type": "Keyword",
                                                    "name": "template",
                                                    "range": [
                                                        1295,
                                                        1295
                                                    ],
                                                    "children": [],
                                                    "content": "t"
                                                },
                                                {
                                                    "type": "Boolean",
                                                    "name": "True",
                                                    "range": [
                                                        1297,
                                                        1297
                                                    ],
                                                    "children": [],
                                                    "content": "directly"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "user_id",
                                                    "range": [
                                                        1300,
                                                        1300
                                                    ],
                                                    "children": [],
                                                    "content": "endpoint"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "user_id",
                                                    "range": [
                                                        1302,
                                                        1302
                                                    ],
                                                    "children": [],
                                                    "content": "user_id"
                                                }
                                            ],
                                            "content": "have to be annotated like on other endpoints,\n#because create_graph isn't used directly as an endpoint\nuser_id:str,"
                                        }
                                    ],
                                    "content": "it 's at least 0 for user to see. \\n     return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)} \\n  \\n  \\n ######################################################## \\n ##################### Graphs ########################### \\n ######################################################## \\n  \\n  \\n class DeleteGraphResponse(TypedDict): \\n     version_counts: int \\n  \\n  \\n @v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]) \\n async def get_graphs( \\n     user_id: Annotated[str, Depends(get_user_id)] \\n ) -> Sequence[graph_db.GraphModel]: \\n     return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id) \\n  \\n  \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)] \\n ) \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}/versions/{version}\", \\n     tags=[\"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n async def get_graph( \\n     graph_id: str, \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     version: int | None = None, \\n     hide_credentials: bool = False, \\n ) -> graph_db.GraphModel: \\n     graph = await graph_db.get_graph( \\n         graph_id, version, user_id=user_id, for_export=hide_credentials \\n     ) \\n     if not graph: \\n         raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\") \\n     return graph \\n  \\n  \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}/versions\", \\n     tags=[\"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n @v1_router.get( \\n     path=\"/templates/{graph_id}/versions\", \\n     tags=[\"templates\", \"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n async def get_graph_all_versions( \\n     graph_id: str, user_id: Annotated[str, Depends(get_user_id)] \\n ) -> Sequence[graph_db.GraphModel]: \\n     graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id) \\n     if not graphs: \\n         raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\") \\n     return graphs \\n  \\n  \\n @v1_router.post( \\n     path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)] \\n ) \\n async def create_new_graph( \\n     create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)] \\n ) -> graph_db.GraphModel: \\n     return await do_create_graph(create_graph, is_template=False, user_id=user_id) \\n  \\n  \\n async def do_create_graph( \\n     create_graph: CreateGraph, \\n     is_template: bool, \\n     # user_id doesn' t have to be annotated like on other endpoints,\n#because create_graph isn't used directly as an endpoint\nuser_id:str,"
                                }
                            ],
                            "content": "[str,int]:\n#Credits can go negative,so ensure it 's at least 0 for user to see. \\n     return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)} \\n  \\n  \\n ######################################################## \\n ##################### Graphs ########################### \\n ######################################################## \\n  \\n  \\n class DeleteGraphResponse(TypedDict): \\n     version_counts: int \\n  \\n  \\n @v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]) \\n async def get_graphs( \\n     user_id: Annotated[str, Depends(get_user_id)] \\n ) -> Sequence[graph_db.GraphModel]: \\n     return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id) \\n  \\n  \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)] \\n ) \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}/versions/{version}\", \\n     tags=[\"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n async def get_graph( \\n     graph_id: str, \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     version: int | None = None, \\n     hide_credentials: bool = False, \\n ) -> graph_db.GraphModel: \\n     graph = await graph_db.get_graph( \\n         graph_id, version, user_id=user_id, for_export=hide_credentials \\n     ) \\n     if not graph: \\n         raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\") \\n     return graph \\n  \\n  \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}/versions\", \\n     tags=[\"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n @v1_router.get( \\n     path=\"/templates/{graph_id}/versions\", \\n     tags=[\"templates\", \"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n async def get_graph_all_versions( \\n     graph_id: str, user_id: Annotated[str, Depends(get_user_id)] \\n ) -> Sequence[graph_db.GraphModel]: \\n     graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id) \\n     if not graphs: \\n         raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\") \\n     return graphs \\n  \\n  \\n @v1_router.post( \\n     path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)] \\n ) \\n async def create_new_graph( \\n     create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)] \\n ) -> graph_db.GraphModel: \\n     return await do_create_graph(create_graph, is_template=False, user_id=user_id) \\n  \\n  \\n async def do_create_graph( \\n     create_graph: CreateGraph, \\n     is_template: bool, \\n     # user_id doesn' t have to be annotated like on other endpoints,\n#because create_graph isn't used directly as an endpoint\nuser_id:str,\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                1307,
                                1324
                            ],
                            "children": [
                                {
                                    "type": "UnaryExpression",
                                    "name": "not graph",
                                    "range": [
                                        1308,
                                        1309
                                    ],
                                    "children": [
                                        {
                                            "type": "Keyword",
                                            "name": "not",
                                            "range": [
                                                1308,
                                                1308
                                            ],
                                            "children": [],
                                            "content": "-"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "graph",
                                            "range": [
                                                1309,
                                                1309
                                            ],
                                            "children": [],
                                            "content": ">"
                                        }
                                    ],
                                    "content": "->"
                                },
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise HTTPException(400, detail=f\"Template #{create_graph.template_id} not found\")",
                                    "range": [
                                        1312,
                                        1323
                                    ],
                                    "children": [
                                        {
                                            "type": "Keyword",
                                            "name": "raise",
                                            "range": [
                                                1312,
                                                1312
                                            ],
                                            "children": [],
                                            "content": "GraphModel"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "HTTPException",
                                            "range": [
                                                1313,
                                                1323
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "HTTPException",
                                                    "range": [
                                                        1313,
                                                        1313
                                                    ],
                                                    "children": [],
                                                    "content": ":"
                                                },
                                                {
                                                    "type": "NumericLiteral",
                                                    "name": "400",
                                                    "range": [
                                                        1316,
                                                        1316
                                                    ],
                                                    "children": [],
                                                    "content": "create_graph"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "detail",
                                                    "range": [
                                                        1318,
                                                        1318
                                                    ],
                                                    "children": [],
                                                    "content": "graph"
                                                },
                                                {
                                                    "type": "StringLiteral",
                                                    "name": "f\"Template #{create_graph.template_id} not found\"",
                                                    "range": [
                                                        1320,
                                                        1321
                                                    ],
                                                    "children": [],
                                                    "content": "\ngraph"
                                                }
                                            ],
                                            "content": ":\nif create_graph.graph:\ngraph=graph_db"
                                        }
                                    ],
                                    "content": "GraphModel:\nif create_graph.graph:\ngraph=graph_db"
                                }
                            ],
                            "content": ")->graph_db.GraphModel:\nif create_graph.graph:\ngraph=graph_db."
                        },
                        {
                            "type": "Assignment",
                            "name": "graph.version = 1",
                            "range": [
                                1325,
                                1329
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "graph",
                                    "range": [
                                        1325,
                                        1325
                                    ],
                                    "children": [],
                                    "content": "make_graph_model"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "version",
                                    "range": [
                                        1327,
                                        1327
                                    ],
                                    "children": [],
                                    "content": "create_graph"
                                },
                                {
                                    "type": "NumericLiteral",
                                    "name": "1",
                                    "range": [
                                        1329,
                                        1329
                                    ],
                                    "children": [],
                                    "content": "graph"
                                }
                            ],
                            "content": "make_graph_model(create_graph.graph"
                        },
                        {
                            "type": "ElseStatement",
                            "name": "else",
                            "range": [
                                1331,
                                1347
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise HTTPException(status_code=400, detail=\"Either graph or template_id must be provided.\")",
                                    "range": [
                                        1334,
                                        1346
                                    ],
                                    "children": [
                                        {
                                            "type": "Keyword",
                                            "name": "raise",
                                            "range": [
                                                1334,
                                                1334
                                            ],
                                            "children": [],
                                            "content": "elif"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "HTTPException",
                                            "range": [
                                                1335,
                                                1346
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "HTTPException",
                                                    "range": [
                                                        1335,
                                                        1335
                                                    ],
                                                    "children": [],
                                                    "content": "create_graph"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "status_code",
                                                    "range": [
                                                        1338,
                                                        1338
                                                    ],
                                                    "children": [],
                                                    "content": ":"
                                                },
                                                {
                                                    "type": "NumericLiteral",
                                                    "name": "400",
                                                    "range": [
                                                        1340,
                                                        1340
                                                    ],
                                                    "children": [],
                                                    "content": "#"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "detail",
                                                    "range": [
                                                        1342,
                                                        1342
                                                    ],
                                                    "children": [],
                                                    "content": "a"
                                                },
                                                {
                                                    "type": "StringLiteral",
                                                    "name": "\"Either graph or template_id must be provided.\"",
                                                    "range": [
                                                        1344,
                                                        1344
                                                    ],
                                                    "children": [],
                                                    "content": "graph"
                                                }
                                            ],
                                            "content": "create_graph.template_id:\n#Create a new graph from a"
                                        }
                                    ],
                                    "content": "elif create_graph.template_id:\n#Create a new graph from a"
                                }
                            ],
                            "content": "user_id)\nelif create_graph.template_id:\n#Create a new graph from a template"
                        },
                        {
                            "type": "Assignment",
                            "name": "graph.is_template = is_template",
                            "range": [
                                1349,
                                1353
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "graph",
                                    "range": [
                                        1349,
                                        1349
                                    ],
                                    "children": [],
                                    "content": "graph"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "is_template",
                                    "range": [
                                        1351,
                                        1351
                                    ],
                                    "children": [],
                                    "content": "await"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "is_template",
                                    "range": [
                                        1353,
                                        1353
                                    ],
                                    "children": [],
                                    "content": "."
                                }
                            ],
                            "content": "graph=await graph_db."
                        },
                        {
                            "type": "Assignment",
                            "name": "graph.is_active = not is_template",
                            "range": [
                                1355,
                                1361
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "graph",
                                    "range": [
                                        1355,
                                        1355
                                    ],
                                    "children": [],
                                    "content": "("
                                },
                                {
                                    "type": "Identifier",
                                    "name": "is_active",
                                    "range": [
                                        1357,
                                        1357
                                    ],
                                    "children": [],
                                    "content": "create_graph"
                                },
                                {
                                    "type": "UnaryExpression",
                                    "name": "not is_template",
                                    "range": [
                                        1359,
                                        1360
                                    ],
                                    "children": [
                                        {
                                            "type": "Keyword",
                                            "name": "not",
                                            "range": [
                                                1359,
                                                1359
                                            ],
                                            "children": [],
                                            "content": "template_id"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "is_template",
                                            "range": [
                                                1360,
                                                1360
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": "template_id,"
                                }
                            ],
                            "content": "(\ncreate_graph.template_id,\n"
                        },
                        {
                            "type": "CallExpression",
                            "name": "graph.reassign_ids(user_id=user_id, reassign_graph_id=True)",
                            "range": [
                                1363,
                                1373
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "graph",
                                    "range": [
                                        1363,
                                        1363
                                    ],
                                    "children": [],
                                    "content": "."
                                },
                                {
                                    "type": "Identifier",
                                    "name": "reassign_ids",
                                    "range": [
                                        1365,
                                        1365
                                    ],
                                    "children": [],
                                    "content": ","
                                },
                                {
                                    "type": "Identifier",
                                    "name": "user_id",
                                    "range": [
                                        1367,
                                        1367
                                    ],
                                    "children": [],
                                    "content": "template"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "user_id",
                                    "range": [
                                        1369,
                                        1369
                                    ],
                                    "children": [],
                                    "content": "True"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "reassign_graph_id",
                                    "range": [
                                        1371,
                                        1371
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Boolean",
                                    "name": "True",
                                    "range": [
                                        1373,
                                        1373
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": ".template_version,\ntemplate=True,\nuser_id="
                        },
                        {
                            "type": "Assignment",
                            "name": "graph = await graph_db.create_graph(graph, user_id=user_id)",
                            "range": [
                                1376,
                                1388
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "graph",
                                    "range": [
                                        1376,
                                        1376
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Keyword",
                                    "name": "await",
                                    "range": [
                                        1378,
                                        1378
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "graph_db.create_graph",
                                    "range": [
                                        1379,
                                        1388
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "graph_db",
                                            "range": [
                                                1379,
                                                1379
                                            ],
                                            "children": [],
                                            "content": "if"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "create_graph",
                                            "range": [
                                                1381,
                                                1381
                                            ],
                                            "children": [],
                                            "content": "graph"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "graph",
                                            "range": [
                                                1383,
                                                1383
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "user_id",
                                            "range": [
                                                1385,
                                                1385
                                            ],
                                            "children": [],
                                            "content": "HTTPException"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "user_id",
                                            "range": [
                                                1387,
                                                1387
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "if not graph:\nraise HTTPException(\n400"
                                }
                            ],
                            "content": "\n)\nif not graph:\nraise HTTPException(\n400"
                        },
                        {
                            "type": "Assignment",
                            "name": "graph = await on_graph_activate(graph, get_credentials=lambda id: integration_creds_manager.get(user_id, id))",
                            "range": [
                                1390,
                                1415
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "graph",
                                    "range": [
                                        1390,
                                        1390
                                    ],
                                    "children": [],
                                    "content": "detail"
                                },
                                {
                                    "type": "Keyword",
                                    "name": "await",
                                    "range": [
                                        1392,
                                        1392
                                    ],
                                    "children": [],
                                    "content": "f"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "on_graph_activate",
                                    "range": [
                                        1393,
                                        1415
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "on_graph_activate",
                                            "range": [
                                                1393,
                                                1393
                                            ],
                                            "children": [],
                                            "content": "\"Template #{create_graph.template_id} not found\""
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "graph",
                                            "range": [
                                                1396,
                                                1396
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "LambdaExpression",
                                            "name": "get_credentials=lambda id: integration_creds_manager.get(user_id, id)",
                                            "range": [
                                                1399,
                                                1414
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "get_credentials",
                                                    "range": [
                                                        1399,
                                                        1399
                                                    ],
                                                    "children": [],
                                                    "content": "version"
                                                },
                                                {
                                                    "type": "Keyword",
                                                    "name": "lambda",
                                                    "range": [
                                                        1401,
                                                        1401
                                                    ],
                                                    "children": [],
                                                    "content": "1"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "id",
                                                    "range": [
                                                        1402,
                                                        1402
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "integration_creds_manager.get",
                                                    "range": [
                                                        1404,
                                                        1414
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "integration_creds_manager",
                                                            "range": [
                                                                1404,
                                                                1404
                                                            ],
                                                            "children": [],
                                                            "content": ":"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "get",
                                                            "range": [
                                                                1406,
                                                                1406
                                                            ],
                                                            "children": [],
                                                            "content": "raise"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "user_id",
                                                            "range": [
                                                                1408,
                                                                1408
                                                            ],
                                                            "children": [],
                                                            "content": "("
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "id",
                                                            "range": [
                                                                1410,
                                                                1410
                                                            ],
                                                            "children": [],
                                                            "content": "status_code"
                                                        }
                                                    ],
                                                    "content": ":\nraise HTTPException(\nstatus_code=400,detail"
                                                }
                                            ],
                                            "content": "version=1\nelse:\nraise HTTPException(\nstatus_code=400,detail"
                                        }
                                    ],
                                    "content": "\"Template #{create_graph.template_id} not found\"\n)\ngraph.version=1\nelse:\nraise HTTPException(\nstatus_code=400,detail="
                                }
                            ],
                            "content": "detail=f \"Template #{create_graph.template_id} not found\"\n)\ngraph.version=1\nelse:\nraise HTTPException(\nstatus_code=400,detail="
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return graph",
                            "range": [
                                1416,
                                1417
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "return",
                                    "range": [
                                        1416,
                                        1416
                                    ],
                                    "children": [],
                                    "content": "\"Either graph or template_id must be provided.\""
                                },
                                {
                                    "type": "Identifier",
                                    "name": "graph",
                                    "range": [
                                        1417,
                                        1417
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "\"Either graph or template_id must be provided.\"\n"
                        }
                    ],
                    "content": "get_user_credits(\nuser_id:Annotated[str,Depends(get_user_id)],\n)->dict[str,int]:\n#Credits can go negative,so ensure it 's at least 0 for user to see. \\n     return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)} \\n  \\n  \\n ######################################################## \\n ##################### Graphs ########################### \\n ######################################################## \\n  \\n  \\n class DeleteGraphResponse(TypedDict): \\n     version_counts: int \\n  \\n  \\n @v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]) \\n async def get_graphs( \\n     user_id: Annotated[str, Depends(get_user_id)] \\n ) -> Sequence[graph_db.GraphModel]: \\n     return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id) \\n  \\n  \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)] \\n ) \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}/versions/{version}\", \\n     tags=[\"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n async def get_graph( \\n     graph_id: str, \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     version: int | None = None, \\n     hide_credentials: bool = False, \\n ) -> graph_db.GraphModel: \\n     graph = await graph_db.get_graph( \\n         graph_id, version, user_id=user_id, for_export=hide_credentials \\n     ) \\n     if not graph: \\n         raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\") \\n     return graph \\n  \\n  \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}/versions\", \\n     tags=[\"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n @v1_router.get( \\n     path=\"/templates/{graph_id}/versions\", \\n     tags=[\"templates\", \"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n async def get_graph_all_versions( \\n     graph_id: str, user_id: Annotated[str, Depends(get_user_id)] \\n ) -> Sequence[graph_db.GraphModel]: \\n     graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id) \\n     if not graphs: \\n         raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\") \\n     return graphs \\n  \\n  \\n @v1_router.post( \\n     path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)] \\n ) \\n async def create_new_graph( \\n     create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)] \\n ) -> graph_db.GraphModel: \\n     return await do_create_graph(create_graph, is_template=False, user_id=user_id) \\n  \\n  \\n async def do_create_graph( \\n     create_graph: CreateGraph, \\n     is_template: bool, \\n     # user_id doesn' t have to be annotated like on other endpoints,\n#because create_graph isn't used directly as an endpoint\nuser_id:str,\n)->graph_db.GraphModel:\nif create_graph.graph:\ngraph=graph_db.make_graph_model(create_graph.graph,user_id)\nelif create_graph.template_id:\n#Create a new graph from a template\ngraph=await graph_db.get_graph(\ncreate_graph.template_id,\ncreate_graph.template_version,\ntemplate=True,\nuser_id=user_id,\n)\nif not graph:\nraise HTTPException(\n400,detail=f \"Template #{create_graph.template_id} not found\"\n)\ngraph.version=1\nelse:\nraise HTTPException(\nstatus_code=400,detail=\"Either graph or template_id must be provided.\"\n)"
                }
            ],
            "content": "##############\n\n\n@v1_router.get(path=\"/credits\",dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\nuser_id:Annotated[str,Depends(get_user_id)],\n)->dict[str,int]:\n#Credits can go negative,so ensure it 's at least 0 for user to see. \\n     return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)} \\n  \\n  \\n ######################################################## \\n ##################### Graphs ########################### \\n ######################################################## \\n  \\n  \\n class DeleteGraphResponse(TypedDict): \\n     version_counts: int \\n  \\n  \\n @v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]) \\n async def get_graphs( \\n     user_id: Annotated[str, Depends(get_user_id)] \\n ) -> Sequence[graph_db.GraphModel]: \\n     return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id) \\n  \\n  \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)] \\n ) \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}/versions/{version}\", \\n     tags=[\"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n async def get_graph( \\n     graph_id: str, \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     version: int | None = None, \\n     hide_credentials: bool = False, \\n ) -> graph_db.GraphModel: \\n     graph = await graph_db.get_graph( \\n         graph_id, version, user_id=user_id, for_export=hide_credentials \\n     ) \\n     if not graph: \\n         raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\") \\n     return graph \\n  \\n  \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}/versions\", \\n     tags=[\"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n @v1_router.get( \\n     path=\"/templates/{graph_id}/versions\", \\n     tags=[\"templates\", \"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n async def get_graph_all_versions( \\n     graph_id: str, user_id: Annotated[str, Depends(get_user_id)] \\n ) -> Sequence[graph_db.GraphModel]: \\n     graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id) \\n     if not graphs: \\n         raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\") \\n     return graphs \\n  \\n  \\n @v1_router.post( \\n     path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)] \\n ) \\n async def create_new_graph( \\n     create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)] \\n ) -> graph_db.GraphModel: \\n     return await do_create_graph(create_graph, is_template=False, user_id=user_id) \\n  \\n  \\n async def do_create_graph( \\n     create_graph: CreateGraph, \\n     is_template: bool, \\n     # user_id doesn' t have to be annotated like on other endpoints,\n#because create_graph isn't used directly as an endpoint\nuser_id:str,\n)->graph_db.GraphModel:\nif create_graph.graph:\ngraph=graph_db.make_graph_model(create_graph.graph,user_id)\nelif create_graph.template_id:\n#Create a new graph from a template\ngraph=await graph_db.get_graph(\ncreate_graph.template_id,\ncreate_graph.template_version,\ntemplate=True,\nuser_id=user_id,\n)\nif not graph:\nraise HTTPException(\n400,detail=f \"Template #{create_graph.template_id} not found\"\n)\ngraph.version=1\nelse:\nraise HTTPException(\nstatus_code=400,detail=\"Either graph or template_id must be provided.\"\n)"
        },
        {
            "type": "FunctionDecl",
            "name": "delete_graph",
            "range": [
                1446,
                1539
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "graph_id",
                    "range": [
                        1451,
                        1453
                    ],
                    "children": [],
                    "content": "graph_db.create_graph"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        1455,
                        1465
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated",
                            "range": [
                                1457,
                                1465
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "str",
                                    "range": [
                                        1459,
                                        1460
                                    ],
                                    "children": [],
                                    "content": "user_id)"
                                },
                                {
                                    "type": "Dependency",
                                    "name": "Depends",
                                    "range": [
                                        1461,
                                        1465
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_user_id",
                                            "range": [
                                                1463,
                                                1464
                                            ],
                                            "children": [],
                                            "content": "=await"
                                        }
                                    ],
                                    "content": "\ngraph=await on_graph_activate"
                                }
                            ],
                            "content": "user_id=user_id)\ngraph=await on_graph_activate"
                        }
                    ],
                    "content": "graph,user_id=user_id)\ngraph=await on_graph_activate"
                },
                {
                    "type": "ReturnType",
                    "name": "DeleteGraphResponse",
                    "range": [
                        1469,
                        1470
                    ],
                    "children": [],
                    "content": ",\n"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1472,
                        1539
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                1473,
                                1489
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "active_version",
                                    "range": [
                                        1474,
                                        1487
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "graph_db.get_graph",
                                            "range": [
                                                1477,
                                                1487
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "graph_id",
                                                    "range": [
                                                        1482,
                                                        1483
                                                    ],
                                                    "children": [],
                                                    "content": "id)"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "user_id",
                                                    "range": [
                                                        1485,
                                                        1486
                                                    ],
                                                    "children": [],
                                                    "content": "\n)"
                                                }
                                            ],
                                            "content": ".get(user_id,id),\n)\n"
                                        }
                                    ],
                                    "content": "id:integration_creds_manager.get(user_id,id),\n)\n"
                                }
                            ],
                            "content": "lambda id:integration_creds_manager.get(user_id,id),\n)\nreturn graph"
                        },
                        {
                            "type": "CallExpression",
                            "name": "on_graph_deactivate",
                            "range": [
                                1514,
                                1521
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "active_version",
                                    "range": [
                                        1517,
                                        1518
                                    ],
                                    "children": [],
                                    "content": "\n)"
                                },
                                {
                                    "type": "Argument",
                                    "name": "get_credentials",
                                    "range": [
                                        1519,
                                        1520
                                    ],
                                    "children": [],
                                    "content": "\nasync"
                                }
                            ],
                            "content": "auth_middleware)]\n)\nasync def"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                1523,
                                1539
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        1524,
                                        1538
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "version_counts",
                                            "range": [
                                                1525,
                                                1537
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "graph_db.delete_graph",
                                                    "range": [
                                                        1527,
                                                        1537
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "graph_id",
                                                            "range": [
                                                                1532,
                                                                1533
                                                            ],
                                                            "children": [],
                                                            "content": "[str"
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "user_id",
                                                            "range": [
                                                                1535,
                                                                1536
                                                            ],
                                                            "children": [],
                                                            "content": "Depends("
                                                        }
                                                    ],
                                                    "content": "str,user_id:Annotated[str,Depends(get_user_id"
                                                }
                                            ],
                                            "content": "graph_id:str,user_id:Annotated[str,Depends(get_user_id"
                                        }
                                    ],
                                    "content": "\ngraph_id:str,user_id:Annotated[str,Depends(get_user_id)"
                                }
                            ],
                            "content": "(\ngraph_id:str,user_id:Annotated[str,Depends(get_user_id)]"
                        }
                    ],
                    "content": "=lambda id:integration_creds_manager.get(user_id,id),\n)\nreturn graph\n\n\n@v1_router.delete(\npath=\"/graphs/{graph_id}\",tags=[\"graphs\"],dependencies=[Depends(auth_middleware)]\n)\nasync def delete_graph(\ngraph_id:str,user_id:Annotated[str,Depends(get_user_id)]"
                }
            ],
            "content": "\n\ngraph=await graph_db.create_graph(graph,user_id=user_id)\ngraph=await on_graph_activate(\ngraph,\nget_credentials=lambda id:integration_creds_manager.get(user_id,id),\n)\nreturn graph\n\n\n@v1_router.delete(\npath=\"/graphs/{graph_id}\",tags=[\"graphs\"],dependencies=[Depends(auth_middleware)]\n)\nasync def delete_graph(\ngraph_id:str,user_id:Annotated[str,Depends(get_user_id)]"
        },
        {
            "type": "FunctionDecl",
            "name": "get_credentials",
            "range": [
                1491,
                1512
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "credentials_id",
                    "range": [
                        1494,
                        1496
                    ],
                    "children": [],
                    "content": "v1_router.delete"
                },
                {
                    "type": "ReturnType",
                    "name": "Credentials | None",
                    "range": [
                        1498,
                        1500
                    ],
                    "children": [],
                    "content": "\npath="
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1502,
                        1512
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                1503,
                                1512
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "integration_creds_manager.get",
                                    "range": [
                                        1504,
                                        1511
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "user_id",
                                            "range": [
                                                1508,
                                                1509
                                            ],
                                            "children": [],
                                            "content": ",dependencies"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "credentials_id",
                                            "range": [
                                                1510,
                                                1511
                                            ],
                                            "children": [],
                                            "content": "=["
                                        }
                                    ],
                                    "content": "=[\"graphs\"],dependencies=["
                                }
                            ],
                            "content": "tags=[\"graphs\"],dependencies=[Depends"
                        }
                    ],
                    "content": ",tags=[\"graphs\"],dependencies=[Depends"
                }
            ],
            "content": "\n\n@v1_router.delete(\npath=\"/graphs/{graph_id}\",tags=[\"graphs\"],dependencies=[Depends"
        },
        {
            "type": "FunctionDecl",
            "name": "update_graph",
            "range": [
                1599,
                1949
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@v1_router.put",
                    "range": [
                        1540,
                        1565
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "path",
                            "range": [
                                1546,
                                1548
                            ],
                            "children": [],
                            "content": "\nif active_version"
                        },
                        {
                            "type": "Argument",
                            "name": "tags",
                            "range": [
                                1550,
                                1554
                            ],
                            "children": [],
                            "content": "=await graph_db.get_graph"
                        },
                        {
                            "type": "Argument",
                            "name": "dependencies",
                            "range": [
                                1556,
                                1563
                            ],
                            "children": [],
                            "content": "graph_id,user_id=user_id):\n"
                        }
                    ],
                    "content": "\n)->DeleteGraphResponse:\nif active_version:=await graph_db.get_graph(graph_id,user_id=user_id):\n\ndef"
                },
                {
                    "type": "Decorator",
                    "name": "@v1_router.put",
                    "range": [
                        1567,
                        1597
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "path",
                            "range": [
                                1573,
                                1575
                            ],
                            "children": [],
                            "content": ">\"Credentials | None\":"
                        },
                        {
                            "type": "Argument",
                            "name": "tags",
                            "range": [
                                1578,
                                1584
                            ],
                            "children": [],
                            "content": "integration_creds_manager.get(user_id,credentials_id"
                        },
                        {
                            "type": "Argument",
                            "name": "dependencies",
                            "range": [
                                1587,
                                1594
                            ],
                            "children": [],
                            "content": "\nawait on_graph_deactivate(active_version,get_credentials)"
                        }
                    ],
                    "content": "(credentials_id:str)->\"Credentials | None\":\nreturn integration_creds_manager.get(user_id,credentials_id)\n\nawait on_graph_deactivate(active_version,get_credentials)\n\nreturn"
                },
                {
                    "type": "FunctionSignature",
                    "name": "update_graph",
                    "range": [
                        1599,
                        1635
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "graph_id",
                            "range": [
                                1604,
                                1606
                            ],
                            "children": [],
                            "content": "delete_graph(graph_id"
                        },
                        {
                            "type": "Parameter",
                            "name": "graph",
                            "range": [
                                1609,
                                1614
                            ],
                            "children": [],
                            "content": "=user_id)}\n\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                1616,
                                1627
                            ],
                            "children": [],
                            "content": "@v1_router.put(\npath=\"/graphs/{graph_id}\",tags="
                        }
                    ],
                    "content": "\"version_counts\":await graph_db.delete_graph(graph_id,user_id=user_id)}\n\n\n@v1_router.put(\npath=\"/graphs/{graph_id}\",tags=[\"graphs\"],dependencies=[Depends"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        1636,
                        1949
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "name": "# Sanity check",
                            "range": [
                                1637,
                                1640
                            ],
                            "children": [],
                            "content": "auth_middleware)]\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                1641,
                                1663
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        1642,
                                        1651
                                    ],
                                    "children": [],
                                    "content": "\n@v1_router.put(\npath=\"/templates/{graph_id}\""
                                },
                                {
                                    "type": "Body",
                                    "name": "",
                                    "range": [
                                        1652,
                                        1663
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "",
                                            "range": [
                                                1654,
                                                1662
                                            ],
                                            "children": [],
                                            "content": "tags=[\"templates\",\"graphs\"],\n"
                                        }
                                    ],
                                    "content": ",\ntags=[\"templates\",\"graphs\"],\ndependencies"
                                }
                            ],
                            "content": ")\n@v1_router.put(\npath=\"/templates/{graph_id}\",\ntags=[\"templates\",\"graphs\"],\ndependencies"
                        },
                        {
                            "type": "Comment",
                            "name": "# Determine new version",
                            "range": [
                                1665,
                                1669
                            ],
                            "children": [],
                            "content": "[Depends(auth_middleware)"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "existing_versions",
                            "range": [
                                1670,
                                1683
                            ],
                            "children": [],
                            "content": "],\n)\nasync def update_graph(\ngraph_id:str,"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                1684,
                                1699
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        1685,
                                        1686
                                    ],
                                    "children": [],
                                    "content": "graph:"
                                },
                                {
                                    "type": "Body",
                                    "name": "",
                                    "range": [
                                        1687,
                                        1699
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "",
                                            "range": [
                                                1689,
                                                1698
                                            ],
                                            "children": [],
                                            "content": "Graph,\nuser_id:Annotated[str,Depends"
                                        }
                                    ],
                                    "content": "graph_db.Graph,\nuser_id:Annotated[str,Depends("
                                }
                            ],
                            "content": "\ngraph:graph_db.Graph,\nuser_id:Annotated[str,Depends("
                        },
                        {
                            "type": "VariableDecl",
                            "name": "latest_version_number",
                            "range": [
                                1700,
                                1712
                            ],
                            "children": [],
                            "content": "get_user_id)],\n)->graph_db.GraphModel:\n"
                        },
                        {
                            "type": "Assignment",
                            "name": "graph.version",
                            "range": [
                                1713,
                                1720
                            ],
                            "children": [],
                            "content": "#Sanity check\nif graph.id"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "latest_version_graph",
                            "range": [
                                1722,
                                1741
                            ],
                            "children": [],
                            "content": "graph.id!=graph_id:\nraise HTTPException(400,detail=\"Graph ID does not match ID in URI\")\n\n#"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "current_active_version",
                            "range": [
                                1742,
                                1760
                            ],
                            "children": [],
                            "content": "Determine new version\nexisting_versions=await graph_db.get_graph_all_versions(graph_id,user_id=user_id)\nif"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                1761,
                                1783
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        1762,
                                        1769
                                    ],
                                    "children": [],
                                    "content": "existing_versions:\nraise HTTPException(404,"
                                },
                                {
                                    "type": "Body",
                                    "name": "",
                                    "range": [
                                        1770,
                                        1783
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "",
                                            "range": [
                                                1772,
                                                1782
                                            ],
                                            "children": [],
                                            "content": "f \"Graph #{graph_id} not found\")\nlatest_version_number=max(g.version"
                                        }
                                    ],
                                    "content": "detail=f \"Graph #{graph_id} not found\")\nlatest_version_number=max(g.version for"
                                }
                            ],
                            "content": "not existing_versions:\nraise HTTPException(404,detail=f \"Graph #{graph_id} not found\")\nlatest_version_number=max(g.version for"
                        },
                        {
                            "type": "Assignment",
                            "name": "graph.is_active",
                            "range": [
                                1784,
                                1792
                            ],
                            "children": [],
                            "content": "g in existing_versions)\ngraph.version="
                        },
                        {
                            "type": "Assignment",
                            "name": "graph",
                            "range": [
                                1793,
                                1803
                            ],
                            "children": [],
                            "content": "latest_version_number+1\n\nlatest_version_graph=next(\nv"
                        },
                        {
                            "type": "CallExpression",
                            "name": "graph.reassign_ids",
                            "range": [
                                1804,
                                1812
                            ],
                            "children": [],
                            "content": "for v in existing_versions if v.version="
                        },
                        {
                            "type": "VariableDecl",
                            "name": "new_graph_version",
                            "range": [
                                1814,
                                1827
                            ],
                            "children": [],
                            "content": "latest_version_number\n)\ncurrent_active_version=next((v for v in existing_versions"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                1829,
                                1918
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        1830,
                                        1833
                                    ],
                                    "children": [],
                                    "content": ".is_active),"
                                },
                                {
                                    "type": "Body",
                                    "name": "",
                                    "range": [
                                        1834,
                                        1918
                                    ],
                                    "children": [
                                        {
                                            "type": "FunctionDecl",
                                            "name": "get_credentials",
                                            "range": [
                                                1836,
                                                1857
                                            ],
                                            "children": [],
                                            "content": "\nif latest_version_graph.is_template!=graph.is_template:\nraise HTTPException(\n400,detail=\"Changing is_template on an existing graph is forbidden\"\n"
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "# Handle activation of the new graph first to ensure continuity",
                                            "range": [
                                                1859,
                                                1870
                                            ],
                                            "children": [],
                                            "content": "\ngraph.is_active=not graph.is_template\ngraph="
                                        },
                                        {
                                            "type": "Assignment",
                                            "name": "new_graph_version",
                                            "range": [
                                                1871,
                                                1886
                                            ],
                                            "children": [],
                                            "content": "graph_db.make_graph_model(graph,user_id)\ngraph.reassign_ids(user_id=user_id"
                                        },
                                        {
                                            "type": "Comment",
                                            "name": "# Ensure new version is the only active version",
                                            "range": [
                                                1887,
                                                1896
                                            ],
                                            "children": [],
                                            "content": ")\n\nnew_graph_version=await graph_db.create_graph("
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "graph_db.set_graph_active_version",
                                            "range": [
                                                1897,
                                                1917
                                            ],
                                            "children": [],
                                            "content": "graph,user_id=user_id)\n\nif new_graph_version.is_active:\n\ndef get_credentials(credentials_id:str"
                                        }
                                    ],
                                    "content": "None)\nif latest_version_graph.is_template!=graph.is_template:\nraise HTTPException(\n400,detail=\"Changing is_template on an existing graph is forbidden\"\n)\ngraph.is_active=not graph.is_template\ngraph=graph_db.make_graph_model(graph,user_id)\ngraph.reassign_ids(user_id=user_id)\n\nnew_graph_version=await graph_db.create_graph(graph,user_id=user_id)\n\nif new_graph_version.is_active:\n\ndef get_credentials(credentials_id:str)"
                                }
                            ],
                            "content": "v.is_active),None)\nif latest_version_graph.is_template!=graph.is_template:\nraise HTTPException(\n400,detail=\"Changing is_template on an existing graph is forbidden\"\n)\ngraph.is_active=not graph.is_template\ngraph=graph_db.make_graph_model(graph,user_id)\ngraph.reassign_ids(user_id=user_id)\n\nnew_graph_version=await graph_db.create_graph(graph,user_id=user_id)\n\nif new_graph_version.is_active:\n\ndef get_credentials(credentials_id:str)"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                1919,
                                1946
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        1920,
                                        1921
                                    ],
                                    "children": [],
                                    "content": ">\"Credentials | None\""
                                },
                                {
                                    "type": "Body",
                                    "name": "",
                                    "range": [
                                        1922,
                                        1946
                                    ],
                                    "children": [
                                        {
                                            "type": "Comment",
                                            "name": "# Handle deactivation of the previously active version",
                                            "range": [
                                                1923,
                                                1931
                                            ],
                                            "children": [],
                                            "content": "\nreturn integration_creds_manager.get(user_id,credentials_id"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "on_graph_deactivate",
                                            "range": [
                                                1932,
                                                1945
                                            ],
                                            "children": [],
                                            "content": ")\n\n#Handle activation of the new graph first to ensure continuity"
                                        }
                                    ],
                                    "content": ":\nreturn integration_creds_manager.get(user_id,credentials_id)\n\n#Handle activation of the new graph first to ensure continuity\n"
                                }
                            ],
                            "content": "->\"Credentials | None\":\nreturn integration_creds_manager.get(user_id,credentials_id)\n\n#Handle activation of the new graph first to ensure continuity\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                1947,
                                1949
                            ],
                            "children": [],
                            "content": "new_graph_version=await"
                        }
                    ],
                    "content": "(auth_middleware)]\n)\n@v1_router.put(\npath=\"/templates/{graph_id}\",\ntags=[\"templates\",\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def update_graph(\ngraph_id:str,\ngraph:graph_db.Graph,\nuser_id:Annotated[str,Depends(get_user_id)],\n)->graph_db.GraphModel:\n#Sanity check\nif graph.id and graph.id!=graph_id:\nraise HTTPException(400,detail=\"Graph ID does not match ID in URI\")\n\n#Determine new version\nexisting_versions=await graph_db.get_graph_all_versions(graph_id,user_id=user_id)\nif not existing_versions:\nraise HTTPException(404,detail=f \"Graph #{graph_id} not found\")\nlatest_version_number=max(g.version for g in existing_versions)\ngraph.version=latest_version_number+1\n\nlatest_version_graph=next(\nv for v in existing_versions if v.version==latest_version_number\n)\ncurrent_active_version=next((v for v in existing_versions if v.is_active),None)\nif latest_version_graph.is_template!=graph.is_template:\nraise HTTPException(\n400,detail=\"Changing is_template on an existing graph is forbidden\"\n)\ngraph.is_active=not graph.is_template\ngraph=graph_db.make_graph_model(graph,user_id)\ngraph.reassign_ids(user_id=user_id)\n\nnew_graph_version=await graph_db.create_graph(graph,user_id=user_id)\n\nif new_graph_version.is_active:\n\ndef get_credentials(credentials_id:str)->\"Credentials | None\":\nreturn integration_creds_manager.get(user_id,credentials_id)\n\n#Handle activation of the new graph first to ensure continuity\nnew_graph_version=await"
                }
            ],
            "content": "\"version_counts\":await graph_db.delete_graph(graph_id,user_id=user_id)}\n\n\n@v1_router.put(\npath=\"/graphs/{graph_id}\",tags=[\"graphs\"],dependencies=[Depends(auth_middleware)]\n)\n@v1_router.put(\npath=\"/templates/{graph_id}\",\ntags=[\"templates\",\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def update_graph(\ngraph_id:str,\ngraph:graph_db.Graph,\nuser_id:Annotated[str,Depends(get_user_id)],\n)->graph_db.GraphModel:\n#Sanity check\nif graph.id and graph.id!=graph_id:\nraise HTTPException(400,detail=\"Graph ID does not match ID in URI\")\n\n#Determine new version\nexisting_versions=await graph_db.get_graph_all_versions(graph_id,user_id=user_id)\nif not existing_versions:\nraise HTTPException(404,detail=f \"Graph #{graph_id} not found\")\nlatest_version_number=max(g.version for g in existing_versions)\ngraph.version=latest_version_number+1\n\nlatest_version_graph=next(\nv for v in existing_versions if v.version==latest_version_number\n)\ncurrent_active_version=next((v for v in existing_versions if v.is_active),None)\nif latest_version_graph.is_template!=graph.is_template:\nraise HTTPException(\n400,detail=\"Changing is_template on an existing graph is forbidden\"\n)\ngraph.is_active=not graph.is_template\ngraph=graph_db.make_graph_model(graph,user_id)\ngraph.reassign_ids(user_id=user_id)\n\nnew_graph_version=await graph_db.create_graph(graph,user_id=user_id)\n\nif new_graph_version.is_active:\n\ndef get_credentials(credentials_id:str)->\"Credentials | None\":\nreturn integration_creds_manager.get(user_id,credentials_id)\n\n#Handle activation of the new graph first to ensure continuity\nnew_graph_version=await"
        },
        {
            "type": "FunctionDecl",
            "name": "set_graph_active_version",
            "range": [
                1980,
                2146
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "graph_id",
                    "range": [
                        1985,
                        1987
                    ],
                    "children": [],
                    "content": "new_graph_version.version"
                },
                {
                    "type": "Parameter",
                    "name": "request_body",
                    "range": [
                        1990,
                        1992
                    ],
                    "children": [],
                    "content": "=user_id\n"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        1995,
                        2005
                    ],
                    "children": [],
                    "content": "if current_active_version:\n#Handle deactivation of the previously active"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "new_active_version",
                    "range": [
                        2011,
                        2015
                    ],
                    "children": [],
                    "content": "\ncurrent_active_version,\nget_credentials"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "new_active_graph",
                    "range": [
                        2017,
                        2033
                    ],
                    "children": [],
                    "content": "get_credentials,\n)\n\nreturn new_graph_version\n\n\n@v1_router.put(\n"
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        2035,
                        2048
                    ],
                    "children": [],
                    "content": "=\"/graphs/{graph_id}/versions/active\",\ntags=[\"graphs\"],\ndependencies=["
                },
                {
                    "type": "AssignmentExpression",
                    "name": "current_active_graph",
                    "range": [
                        2050,
                        2062
                    ],
                    "children": [],
                    "content": "(auth_middleware)],\n)\nasync def set_graph_active_version(\n"
                },
                {
                    "type": "AwaitExpression",
                    "name": "",
                    "range": [
                        2100,
                        2112
                    ],
                    "children": [],
                    "content": "get_graph(\ngraph_id,new_active_version,user_id=user_id\n)\n"
                },
                {
                    "type": "AwaitExpression",
                    "name": "",
                    "range": [
                        2124,
                        2145
                    ],
                    "children": [],
                    "content": "\"Graph #{graph_id} v{new_active_version} not found\")\n\ncurrent_active_graph=await graph_db.get_graph(graph_id,user_id=user_id)\n\ndef get_credentials("
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        2147,
                        2180
                    ],
                    "children": [],
                    "content": ":str)->\"Credentials | None\":\nreturn integration_creds_manager.get(user_id,credentials_id)\n\n#Handle activation of the new graph first to ensure continuity\nawait on_graph_activate("
                }
            ],
            "content": "=graph_id,version=new_graph_version.version,user_id=user_id\n)\nif current_active_version:\n#Handle deactivation of the previously active version\nawait on_graph_deactivate(\ncurrent_active_version,\nget_credentials=get_credentials,\n)\n\nreturn new_graph_version\n\n\n@v1_router.put(\npath=\"/graphs/{graph_id}/versions/active\",\ntags=[\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def set_graph_active_version(\ngraph_id:str,\nrequest_body:SetGraphActiveVersion,\nuser_id:Annotated[str,Depends(get_user_id)],\n):\nnew_active_version=request_body.active_graph_version\nnew_active_graph=await graph_db.get_graph(\ngraph_id,new_active_version,user_id=user_id\n)\nif not new_active_graph:\nraise HTTPException(404,f \"Graph #{graph_id} v{new_active_version} not found\")\n\ncurrent_active_graph=await graph_db.get_graph(graph_id,user_id=user_id)\n\ndef get_credentials(credentials_id"
        },
        {
            "type": "FunctionDecl",
            "name": "get_credentials",
            "range": [
                2065,
                2086
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "credentials_id",
                    "range": [
                        2068,
                        2070
                    ],
                    "children": [],
                    "content": "request_body:SetGraphActiveVersion"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        2077,
                        2085
                    ],
                    "children": [],
                    "content": "str,Depends(get_user_id)],\n"
                }
            ],
            "content": "str,\nrequest_body:SetGraphActiveVersion,\nuser_id:Annotated[str,Depends(get_user_id)],\n)"
        },
        {
            "type": "FunctionDecl",
            "name": "execute_graph",
            "range": [
                2212,
                2261
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "graph_id",
                    "range": [
                        2216,
                        2218
                    ],
                    "children": [],
                    "content": ",\nuser_id"
                },
                {
                    "type": "Parameter",
                    "name": "node_input",
                    "range": [
                        2221,
                        2228
                    ],
                    "children": [],
                    "content": ",\n)\nif current_active_graph and current_active_graph"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        2231,
                        2241
                    ],
                    "children": [],
                    "content": "!=new_active_version:\n#Handle deactivation of the previously"
                },
                {
                    "type": "ReturnType",
                    "name": "dict",
                    "range": [
                        2247,
                        2252
                    ],
                    "children": [],
                    "content": "(\ncurrent_active_graph,\nget_credentials"
                }
            ],
            "content": "\nversion=new_active_version,\nuser_id=user_id,\n)\nif current_active_graph and current_active_graph.version!=new_active_version:\n#Handle deactivation of the previously active version\nawait on_graph_deactivate(\ncurrent_active_graph,\nget_credentials=get_credentials,\n)\n\n\n@"
        },
        {
            "type": "TryStatement",
            "name": "try",
            "range": [
                2262,
                2327
            ],
            "children": [
                {
                    "type": "Block",
                    "name": "tryBlock",
                    "range": [
                        2264,
                        2292
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "graph_exec",
                            "range": [
                                2265,
                                2282
                            ],
                            "children": [],
                            "content": "(\npath=\"/graphs/{graph_id}/execute\",\ntags=[\"graphs\"],\ndependencies=[Depends"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                2284,
                                2292
                            ],
                            "children": [],
                            "content": "auth_middleware)],\n)\ndef execute_graph"
                        }
                    ],
                    "content": "post(\npath=\"/graphs/{graph_id}/execute\",\ntags=[\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\ndef execute_graph"
                },
                {
                    "type": "CatchClause",
                    "name": "except",
                    "range": [
                        2293,
                        2327
                    ],
                    "children": [
                        {
                            "type": "Block",
                            "name": "catchBlock",
                            "range": [
                                2298,
                                2327
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "msg",
                                    "range": [
                                        2299,
                                        2315
                                    ],
                                    "children": [],
                                    "content": "\nnode_input:dict[Any,Any],\nuser_id:Annotated[str,"
                                },
                                {
                                    "type": "ThrowStatement",
                                    "name": "raise",
                                    "range": [
                                        2316,
                                        2327
                                    ],
                                    "children": [],
                                    "content": "Depends(get_user_id)],\n)->dict["
                                }
                            ],
                            "content": ",\nnode_input:dict[Any,Any],\nuser_id:Annotated[str,Depends(get_user_id)],\n)->dict["
                        }
                    ],
                    "content": "(\ngraph_id:str,\nnode_input:dict[Any,Any],\nuser_id:Annotated[str,Depends(get_user_id)],\n)->dict["
                }
            ],
            "content": "v1_router.post(\npath=\"/graphs/{graph_id}/execute\",\ntags=[\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\ndef execute_graph(\ngraph_id:str,\nnode_input:dict[Any,Any],\nuser_id:Annotated[str,Depends(get_user_id)],\n)->dict["
        },
        {
            "type": "FunctionDecl",
            "name": "stop_graph_run",
            "range": [
                2358,
                2459
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@v1_router.post",
                    "range": [
                        2328,
                        2357
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "path",
                            "range": [
                                2334,
                                2336
                            ],
                            "children": [],
                            "content": "FIXME:add"
                        },
                        {
                            "type": "Argument",
                            "name": "tags",
                            "range": [
                                2339,
                                2343
                            ],
                            "children": [],
                            "content": "type\ntry:\n"
                        },
                        {
                            "type": "Argument",
                            "name": "dependencies",
                            "range": [
                                2346,
                                2353
                            ],
                            "children": [],
                            "content": "execution_manager_client().add_execution(\ngraph_id"
                        }
                    ],
                    "content": "str,Any]:#FIXME:add proper return type\ntry:\ngraph_exec=execution_manager_client().add_execution(\ngraph_id,node_input,user_id"
                },
                {
                    "type": "Parameter",
                    "name": "graph_exec_id",
                    "range": [
                        2363,
                        2365
                    ],
                    "children": [],
                    "content": "return{\"id\""
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        2367,
                        2377
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated[str, Depends(get_user_id)]",
                            "range": [
                                2369,
                                2377
                            ],
                            "children": [],
                            "content": "graph_exec_id}\nexcept Exception as e:\n"
                        }
                    ],
                    "content": "graph_exec.graph_exec_id}\nexcept Exception as e:\n"
                },
                {
                    "type": "ReturnType",
                    "name": "Sequence[execution_db.ExecutionResult]",
                    "range": [
                        2382,
                        2387
                    ],
                    "children": [],
                    "content": "__str__().encode("
                },
                {
                    "type": "Block",
                    "name": "FunctionBody",
                    "range": [
                        2389,
                        2459
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if not await graph_db.get_execution",
                            "range": [
                                2390,
                                2417
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id)",
                                    "range": [
                                        2391,
                                        2404
                                    ],
                                    "children": [],
                                    "content": "(\"unicode_escape\")\nraise HTTPException(status_code=400,detail=msg"
                                },
                                {
                                    "type": "Block",
                                    "name": "IfBody",
                                    "range": [
                                        2405,
                                        2417
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")",
                                            "range": [
                                                2407,
                                                2416
                                            ],
                                            "children": [],
                                            "content": "\n\n@v1_router.post(\npath="
                                        }
                                    ],
                                    "content": ")\n\n\n@v1_router.post(\npath=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\""
                                }
                            ],
                            "content": "decode(\"unicode_escape\")\nraise HTTPException(status_code=400,detail=msg)\n\n\n@v1_router.post(\npath=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "await asyncio.to_thread(lambda: execution_manager_client().cancel_execution(graph_exec_id))",
                            "range": [
                                2419,
                                2437
                            ],
                            "children": [],
                            "content": "\ntags=[\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return await execution_db.get_execution_results(graph_exec_id)",
                            "range": [
                                2451,
                                2458
                            ],
                            "children": [],
                            "content": "[str,Depends(get_user_id)]"
                        }
                    ],
                    "content": ".decode(\"unicode_escape\")\nraise HTTPException(status_code=400,detail=msg)\n\n\n@v1_router.post(\npath=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\ntags=[\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def stop_graph_run(\ngraph_exec_id:str,user_id:Annotated[str,Depends(get_user_id)]\n"
                }
            ],
            "content": "=user_id\n)\nreturn{\"id\":graph_exec.graph_exec_id}\nexcept Exception as e:\nmsg=e.__str__().encode().decode(\"unicode_escape\")\nraise HTTPException(status_code=400,detail=msg)\n\n\n@v1_router.post(\npath=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\ntags=[\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def stop_graph_run(\ngraph_exec_id:str,user_id:Annotated[str,Depends(get_user_id)]\n"
        },
        {
            "type": "Decorator",
            "name": "@",
            "range": [
                2460,
                2460
            ],
            "children": [],
            "content": ")"
        },
        {
            "type": "CallExpression",
            "name": "v1_router.get",
            "range": [
                2461,
                2488
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "path",
                    "range": [
                        2466,
                        2468
                    ],
                    "children": [],
                    "content": ".ExecutionResult]"
                },
                {
                    "type": "Argument",
                    "name": "tags",
                    "range": [
                        2471,
                        2475
                    ],
                    "children": [],
                    "content": "if not await graph_db."
                },
                {
                    "type": "Argument",
                    "name": "dependencies",
                    "range": [
                        2478,
                        2485
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "Depends",
                            "range": [
                                2481,
                                2484
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "auth_middleware",
                                    "range": [
                                        2483,
                                        2483
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": ",execution_id=graph_exec_id"
                        }
                    ],
                    "content": "user_id=user_id,execution_id=graph_exec_id)"
                }
            ],
            "content": "->Sequence[execution_db.ExecutionResult]:\nif not await graph_db.get_execution(user_id=user_id,execution_id=graph_exec_id):\nraise"
        },
        {
            "type": "FunctionDecl",
            "name": "get_executions",
            "range": [
                2490,
                2529
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        2495,
                        2505
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated",
                            "range": [
                                2497,
                                2505
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "str",
                                    "range": [
                                        2499,
                                        2499
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "Depends",
                                    "range": [
                                        2501,
                                        2504
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "get_user_id",
                                            "range": [
                                                2503,
                                                2503
                                            ],
                                            "children": [],
                                            "content": "to_thread"
                                        }
                                    ],
                                    "content": "asyncio.to_thread("
                                }
                            ],
                            "content": ")\n\nawait asyncio.to_thread(\n"
                        }
                    ],
                    "content": "f \"Agent execution #{graph_exec_id} not found\")\n\nawait asyncio.to_thread(\n"
                },
                {
                    "type": "ReturnType",
                    "name": "list",
                    "range": [
                        2511,
                        2516
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "graph_db.GraphExecution",
                            "range": [
                                2513,
                                2516
                            ],
                            "children": [],
                            "content": "(graph_exec_id)\n"
                        }
                    ],
                    "content": ".cancel_execution(graph_exec_id)\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        2519,
                        2528
                    ],
                    "children": [
                        {
                            "type": "AwaitExpression",
                            "name": "await",
                            "range": [
                                2520,
                                2520
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "graph_db.get_executions",
                                    "range": [
                                        2521,
                                        2528
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "user_id",
                                            "range": [
                                                2525,
                                                2527
                                            ],
                                            "children": [],
                                            "content": "graph execution in"
                                        }
                                    ],
                                    "content": "Retrieve&return canceled graph execution in its"
                                }
                            ],
                            "content": "#"
                        }
                    ],
                    "content": "\n#Retrieve&return canceled graph execution in its"
                }
            ],
            "content": "(404,detail=f \"Agent execution #{graph_exec_id} not found\")\n\nawait asyncio.to_thread(\nlambda:execution_manager_client().cancel_execution(graph_exec_id)\n)\n\n#Retrieve&return canceled graph execution in its final"
        },
        {
            "type": "CallExpression",
            "name": "get",
            "range": [
                2533,
                2558
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "path",
                    "range": [
                        2536,
                        2538
                    ],
                    "children": [],
                    "content": "get_execution_results(graph_exec_id"
                },
                {
                    "type": "Argument",
                    "name": "tags",
                    "range": [
                        2541,
                        2545
                    ],
                    "children": [],
                    "content": "\n\n@v1_router."
                },
                {
                    "type": "Argument",
                    "name": "dependencies",
                    "range": [
                        2548,
                        2555
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "Depends",
                            "range": [
                                2551,
                                2554
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "auth_middleware",
                                    "range": [
                                        2553,
                                        2553
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "\"/executions\",\ntags"
                        }
                    ],
                    "content": "\npath=\"/executions\",\ntags="
                }
            ],
            "content": "await execution_db.get_execution_results(graph_exec_id)\n\n\n@v1_router.get(\npath=\"/executions\",\ntags=[\"graphs\"]"
        },
        {
            "type": "FunctionDecl",
            "name": "get_graph_run_node_execution_results",
            "range": [
                2560,
                2640
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "graph_id",
                    "range": [
                        2565,
                        2567
                    ],
                    "children": [],
                    "content": "(auth_middleware)"
                },
                {
                    "type": "Parameter",
                    "name": "graph_exec_id",
                    "range": [
                        2570,
                        2572
                    ],
                    "children": [],
                    "content": "\n)\n"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        2575,
                        2585
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "Annotated",
                            "range": [
                                2577,
                                2585
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "str",
                                    "range": [
                                        2579,
                                        2579
                                    ],
                                    "children": [],
                                    "content": ":"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "Depends",
                                    "range": [
                                        2581,
                                        2584
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "get_user_id",
                                            "range": [
                                                2583,
                                                2583
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": "[str,Depends"
                                }
                            ],
                            "content": "\nuser_id:Annotated[str,Depends("
                        }
                    ],
                    "content": "get_executions(\nuser_id:Annotated[str,Depends("
                },
                {
                    "type": "ReturnType",
                    "name": "Sequence",
                    "range": [
                        2591,
                        2596
                    ],
                    "children": [],
                    "content": ")->list[graph_db"
                },
                {
                    "type": "Statement",
                    "name": "graph",
                    "range": [
                        2599,
                        2611
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "get_graph",
                            "range": [
                                2604,
                                2611
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "graph_id",
                                    "range": [
                                        2606,
                                        2606
                                    ],
                                    "children": [],
                                    "content": "get_executions"
                                },
                                {
                                    "type": "Argument",
                                    "name": "user_id",
                                    "range": [
                                        2608,
                                        2610
                                    ],
                                    "children": [],
                                    "content": "user_id=user_id"
                                }
                            ],
                            "content": "graph_db.get_executions(user_id=user_id)"
                        }
                    ],
                    "content": "]:\nreturn await graph_db.get_executions(user_id=user_id)"
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        2613,
                        2629
                    ],
                    "children": [
                        {
                            "type": "Statement",
                            "name": "raise",
                            "range": [
                                2618,
                                2629
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "HTTPException",
                                    "range": [
                                        2619,
                                        2629
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "status_code",
                                            "range": [
                                                2621,
                                                2623
                                            ],
                                            "children": [],
                                            "content": "path=\"/graphs/{graph_id}/executions/{graph_exec_id}\""
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "detail",
                                            "range": [
                                                2625,
                                                2628
                                            ],
                                            "children": [],
                                            "content": "\ntags=["
                                        }
                                    ],
                                    "content": "(\npath=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\ntags=[\"graphs\""
                                }
                            ],
                            "content": "get(\npath=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\ntags=[\"graphs\""
                        }
                    ],
                    "content": "\n\n@v1_router.get(\npath=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\ntags=[\"graphs\""
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        2632,
                        2639
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "get_execution_results",
                            "range": [
                                2636,
                                2639
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "graph_exec_id",
                                    "range": [
                                        2638,
                                        2638
                                    ],
                                    "children": [],
                                    "content": "auth_middleware"
                                }
                            ],
                            "content": "Depends(auth_middleware)"
                        }
                    ],
                    "content": "\ndependencies=[Depends(auth_middleware)"
                }
            ],
            "content": "\ndependencies=[Depends(auth_middleware)],\n)\nasync def get_executions(\nuser_id:Annotated[str,Depends(get_user_id)],\n)->list[graph_db.GraphExecution]:\nreturn await graph_db.get_executions(user_id=user_id)\n\n\n@v1_router.get(\npath=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\ntags=[\"graphs\"],\ndependencies=[Depends(auth_middleware)]"
        },
        {
            "type": "CallExpression",
            "name": "get",
            "range": [
                2641,
                2672
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "path",
                    "range": [
                        2647,
                        2649
                    ],
                    "children": [],
                    "content": "get_graph_run_node_execution_results(\n"
                },
                {
                    "type": "Argument",
                    "name": "tags",
                    "range": [
                        2652,
                        2658
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "",
                            "range": [
                                2654,
                                2658
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"graphs\"",
                                    "range": [
                                        2655,
                                        2655
                                    ],
                                    "children": [],
                                    "content": "graph_exec_id"
                                },
                                {
                                    "type": "Literal",
                                    "name": "\"templates\"",
                                    "range": [
                                        2657,
                                        2657
                                    ],
                                    "children": [],
                                    "content": "str"
                                }
                            ],
                            "content": "\ngraph_exec_id:str,"
                        }
                    ],
                    "content": "str,\ngraph_exec_id:str,"
                },
                {
                    "type": "Argument",
                    "name": "dependencies",
                    "range": [
                        2661,
                        2668
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "",
                            "range": [
                                2663,
                                2668
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "Depends",
                                    "range": [
                                        2664,
                                        2667
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "auth_middleware",
                                            "range": [
                                                2666,
                                                2666
                                            ],
                                            "children": [],
                                            "content": "Depends"
                                        }
                                    ],
                                    "content": "str,Depends("
                                }
                            ],
                            "content": "[str,Depends(get_user_id"
                        }
                    ],
                    "content": ":Annotated[str,Depends(get_user_id"
                }
            ],
            "content": ",\n)\nasync def get_graph_run_node_execution_results(\ngraph_id:str,\ngraph_exec_id:str,\nuser_id:Annotated[str,Depends(get_user_id)],\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_templates",
            "range": [
                2673,
                2715
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        2678,
                        2688
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated",
                            "range": [
                                2680,
                                2688
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "str",
                                    "range": [
                                        2682,
                                        2682
                                    ],
                                    "children": [],
                                    "content": ":"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "Depends",
                                    "range": [
                                        2684,
                                        2687
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "get_user_id",
                                            "range": [
                                                2686,
                                                2686
                                            ],
                                            "children": [],
                                            "content": "await"
                                        }
                                    ],
                                    "content": "graph=await graph_db"
                                }
                            ],
                            "content": "ExecutionResult]:\ngraph=await graph_db."
                        }
                    ],
                    "content": "execution_db.ExecutionResult]:\ngraph=await graph_db."
                },
                {
                    "type": "ReturnType",
                    "name": "Sequence",
                    "range": [
                        2693,
                        2698
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "graph_db.GraphModel",
                            "range": [
                                2695,
                                2697
                            ],
                            "children": [],
                            "content": "user_id)\n"
                        }
                    ],
                    "content": "user_id=user_id)\nif"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        2701,
                        2714
                    ],
                    "children": [
                        {
                            "type": "AwaitExpression",
                            "name": "await",
                            "range": [
                                2702,
                                2714
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "graph_db.get_graphs",
                                    "range": [
                                        2703,
                                        2714
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "filter_by",
                                            "range": [
                                                2707,
                                                2709
                                            ],
                                            "children": [],
                                            "content": "=404,"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "user_id",
                                            "range": [
                                                2711,
                                                2713
                                            ],
                                            "children": [],
                                            "content": "=f \"Graph #{graph_id} not found.\""
                                        }
                                    ],
                                    "content": "raise HTTPException(status_code=404,detail=f \"Graph #{graph_id} not found.\")"
                                }
                            ],
                            "content": "\nraise HTTPException(status_code=404,detail=f \"Graph #{graph_id} not found.\")"
                        }
                    ],
                    "content": ":\nraise HTTPException(status_code=404,detail=f \"Graph #{graph_id} not found.\")"
                }
            ],
            "content": ")->Sequence[execution_db.ExecutionResult]:\ngraph=await graph_db.get_graph(graph_id,user_id=user_id)\nif not graph:\nraise HTTPException(status_code=404,detail=f \"Graph #{graph_id} not found.\")\n"
        },
        {
            "type": "Decorator",
            "name": "@v1_router.get",
            "range": [
                2716,
                2747
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "",
                    "range": [
                        2720,
                        2746
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "path",
                            "range": [
                                2722,
                                2724
                            ],
                            "children": [],
                            "content": "(graph_exec_id)"
                        },
                        {
                            "type": "Argument",
                            "name": "tags",
                            "range": [
                                2727,
                                2733
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "",
                                    "range": [
                                        2729,
                                        2733
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"templates\"",
                                            "range": [
                                                2730,
                                                2730
                                            ],
                                            "children": [],
                                            "content": "#"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"graphs\"",
                                            "range": [
                                                2732,
                                                2732
                                            ],
                                            "children": [],
                                            "content": "#"
                                        }
                                    ],
                                    "content": "#####"
                                }
                            ],
                            "content": "\n######"
                        },
                        {
                            "type": "Argument",
                            "name": "dependencies",
                            "range": [
                                2736,
                                2743
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "",
                                    "range": [
                                        2738,
                                        2743
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "Depends",
                                            "range": [
                                                2739,
                                                2742
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "auth_middleware",
                                                    "range": [
                                                        2741,
                                                        2741
                                                    ],
                                                    "children": [],
                                                    "content": "#"
                                                }
                                            ],
                                            "content": "####"
                                        }
                                    ],
                                    "content": "######"
                                }
                            ],
                            "content": "########"
                        }
                    ],
                    "content": ".get_execution_results(graph_exec_id)\n\n\n###################"
                }
            ],
            "content": "\nreturn await execution_db.get_execution_results(graph_exec_id)\n\n\n####################"
        },
        {
            "type": "FunctionDecl",
            "name": "get_template",
            "range": [
                2748,
                2809
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "graph_id",
                    "range": [
                        2753,
                        2755
                    ],
                    "children": [],
                    "content": "###"
                },
                {
                    "type": "Parameter",
                    "name": "version",
                    "range": [
                        2757,
                        2763
                    ],
                    "children": [],
                    "content": "#######"
                },
                {
                    "type": "ReturnType",
                    "name": "-> graph_db.GraphModel",
                    "range": [
                        2766,
                        2771
                    ],
                    "children": [],
                    "content": "######"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        2772,
                        2809
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "graph",
                            "range": [
                                2773,
                                2787
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "await graph_db.get_graph",
                                    "range": [
                                        2775,
                                        2787
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "graph_id",
                                            "range": [
                                                2780,
                                                2780
                                            ],
                                            "children": [],
                                            "content": "#"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "version",
                                            "range": [
                                                2782,
                                                2782
                                            ],
                                            "children": [],
                                            "content": "#"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "template",
                                            "range": [
                                                2784,
                                                2786
                                            ],
                                            "children": [],
                                            "content": "\n##"
                                        }
                                    ],
                                    "content": "#########\n###"
                                }
                            ],
                            "content": "###########\n###"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                2789,
                                2805
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "not graph",
                                    "range": [
                                        2790,
                                        2791
                                    ],
                                    "children": [],
                                    "content": "##"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        2792,
                                        2805
                                    ],
                                    "children": [
                                        {
                                            "type": "ThrowStatement",
                                            "name": "raise HTTPException",
                                            "range": [
                                                2794,
                                                2805
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "",
                                                    "range": [
                                                        2796,
                                                        2805
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "status_code",
                                                            "range": [
                                                                2797,
                                                                2799
                                                            ],
                                                            "children": [],
                                                            "content": "###"
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "detail",
                                                            "range": [
                                                                2801,
                                                                2804
                                                            ],
                                                            "children": [],
                                                            "content": "####"
                                                        }
                                                    ],
                                                    "content": "##########"
                                                }
                                            ],
                                            "content": "############"
                                        }
                                    ],
                                    "content": "##############"
                                }
                            ],
                            "content": "#################"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return graph",
                            "range": [
                                2807,
                                2808
                            ],
                            "children": [],
                            "content": "##"
                        }
                    ],
                    "content": "############\n#####################Templates###"
                }
            ],
            "content": "####################################\n#####################Templates###"
        },
        {
            "type": "FunctionDecl",
            "name": "create_new_template",
            "range": [
                2842,
                2885
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "create_graph",
                    "range": [
                        2847,
                        2849
                    ],
                    "children": [],
                    "content": "###"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        2851,
                        2861
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated",
                            "range": [
                                2853,
                                2861
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "str",
                                    "range": [
                                        2855,
                                        2855
                                    ],
                                    "children": [],
                                    "content": "#"
                                },
                                {
                                    "type": "Dependency",
                                    "name": "Depends",
                                    "range": [
                                        2857,
                                        2861
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_user_id",
                                            "range": [
                                                2859,
                                                2861
                                            ],
                                            "children": [],
                                            "content": "###"
                                        }
                                    ],
                                    "content": "#####"
                                }
                            ],
                            "content": "#########"
                        }
                    ],
                    "content": "###########"
                },
                {
                    "type": "ReturnType",
                    "name": "graph_db.GraphModel",
                    "range": [
                        2866,
                        2868
                    ],
                    "children": [],
                    "content": "###"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        2871,
                        2885
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                2871,
                                2885
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "do_create_graph",
                                    "range": [
                                        2873,
                                        2884
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "create_graph",
                                            "range": [
                                                2875,
                                                2875
                                            ],
                                            "children": [],
                                            "content": "#"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "is_template",
                                            "range": [
                                                2877,
                                                2879
                                            ],
                                            "children": [],
                                            "content": "###"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "user_id",
                                            "range": [
                                                2881,
                                                2883
                                            ],
                                            "children": [],
                                            "content": "###"
                                        }
                                    ],
                                    "content": "############"
                                }
                            ],
                            "content": "###############"
                        }
                    ],
                    "content": "###############"
                }
            ],
            "content": "############################################"
        },
        {
            "type": "ClassDecl",
            "name": "ScheduleCreationRequest",
            "range": [
                2886,
                2912
            ],
            "children": [
                {
                    "type": "Property",
                    "name": "cron",
                    "range": [
                        2895,
                        2897
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                2897,
                                2897
                            ],
                            "children": [],
                            "content": "path"
                        }
                    ],
                    "content": "(\npath"
                },
                {
                    "type": "Property",
                    "name": "input_data",
                    "range": [
                        2899,
                        2906
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "dict",
                            "range": [
                                2901,
                                2901
                            ],
                            "children": [
                                {
                                    "type": "TypeArgument",
                                    "name": "Any",
                                    "range": [
                                        2903,
                                        2903
                                    ],
                                    "children": [],
                                    "content": "="
                                },
                                {
                                    "type": "TypeArgument",
                                    "name": "Any",
                                    "range": [
                                        2905,
                                        2905
                                    ],
                                    "children": [],
                                    "content": "\"graphs\""
                                }
                            ],
                            "content": "\n"
                        }
                    ],
                    "content": "\"/templates\",\ntags=[\"graphs\","
                },
                {
                    "type": "Property",
                    "name": "graph_id",
                    "range": [
                        2908,
                        2910
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                2910,
                                2910
                            ],
                            "children": [],
                            "content": "\n"
                        }
                    ],
                    "content": "],\n"
                }
            ],
            "content": "##\n\n\n@v1_router.get(\npath=\"/templates\",\ntags=[\"graphs\",\"templates\"],\ndependencies="
        },
        {
            "type": "FunctionDecl",
            "name": "create_schedule",
            "range": [
                2943,
                3063
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        2948,
                        2958
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated",
                            "range": [
                                2950,
                                2958
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "str",
                                    "range": [
                                        2952,
                                        2953
                                    ],
                                    "children": [],
                                    "content": "await graph_db"
                                },
                                {
                                    "type": "Dependency",
                                    "name": "Depends",
                                    "range": [
                                        2954,
                                        2958
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_user_id",
                                            "range": [
                                                2956,
                                                2957
                                            ],
                                            "children": [],
                                            "content": "(filter_by"
                                        }
                                    ],
                                    "content": ".get_graphs(filter_by="
                                }
                            ],
                            "content": "\nreturn await graph_db.get_graphs(filter_by="
                        }
                    ],
                    "content": "]:\nreturn await graph_db.get_graphs(filter_by="
                },
                {
                    "type": "Parameter",
                    "name": "schedule",
                    "range": [
                        2961,
                        2964
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "ScheduleCreationRequest",
                            "range": [
                                2963,
                                2964
                            ],
                            "children": [],
                            "content": "user_id)"
                        }
                    ],
                    "content": "user_id=user_id)"
                },
                {
                    "type": "ReturnType",
                    "name": "scheduler.JobInfo",
                    "range": [
                        2969,
                        2971
                    ],
                    "children": [],
                    "content": "v1_router.get"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        2974,
                        3063
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "graph",
                            "range": [
                                2974,
                                2988
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "graph_db.get_graph",
                                    "range": [
                                        2977,
                                        2988
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "schedule.graph_id",
                                            "range": [
                                                2981,
                                                2983
                                            ],
                                            "children": [],
                                            "content": "[\"templates\","
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "user_id",
                                            "range": [
                                                2985,
                                                2987
                                            ],
                                            "children": [],
                                            "content": "],\n"
                                        }
                                    ],
                                    "content": ",\ntags=[\"templates\",\"graphs\"],\ndependencies"
                                }
                            ],
                            "content": "path=\"/templates/{graph_id}\",\ntags=[\"templates\",\"graphs\"],\ndependencies"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                2990,
                                3009
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "not graph",
                                    "range": [
                                        2991,
                                        2992
                                    ],
                                    "children": [],
                                    "content": "Depends("
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        2994,
                                        3009
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "HTTPException",
                                            "range": [
                                                2995,
                                                3008
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "status_code=404",
                                                    "range": [
                                                        2999,
                                                        3001
                                                    ],
                                                    "children": [],
                                                    "content": "\nasync def"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "detail=f\"Graph #{schedule.graph_id} not found.\"",
                                                    "range": [
                                                        3003,
                                                        3006
                                                    ],
                                                    "children": [],
                                                    "content": "(\ngraph_id:"
                                                }
                                            ],
                                            "content": "],\n)\nasync def get_template(\ngraph_id:str,"
                                        }
                                    ],
                                    "content": ")],\n)\nasync def get_template(\ngraph_id:str,version"
                                }
                            ],
                            "content": "[Depends(auth_middleware)],\n)\nasync def get_template(\ngraph_id:str,version"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                3011,
                                3063
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "asyncio.to_thread",
                                    "range": [
                                        3013,
                                        3062
                                    ],
                                    "children": [
                                        {
                                            "type": "Lambda",
                                            "name": "",
                                            "range": [
                                                3018,
                                                3061
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "execution_scheduler_client.add_execution_schedule",
                                                    "range": [
                                                        3024,
                                                        3060
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "graph_id=schedule.graph_id",
                                                            "range": [
                                                                3027,
                                                                3031
                                                            ],
                                                            "children": [],
                                                            "content": "await graph_db.get_graph("
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "graph_version=graph.version",
                                                            "range": [
                                                                3034,
                                                                3038
                                                            ],
                                                            "children": [],
                                                            "content": "version,template=True"
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "cron=schedule.cron",
                                                            "range": [
                                                                3041,
                                                                3045
                                                            ],
                                                            "children": [],
                                                            "content": "if not graph:\n"
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "input_data=schedule.input_data",
                                                            "range": [
                                                                3048,
                                                                3052
                                                            ],
                                                            "children": [],
                                                            "content": "(status_code=404,"
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "user_id=user_id",
                                                            "range": [
                                                                3055,
                                                                3057
                                                            ],
                                                            "children": [],
                                                            "content": "f \"Template #{graph_id} not found.\")"
                                                        }
                                                    ],
                                                    "content": "\ngraph=await graph_db.get_graph(graph_id,version,template=True)\nif not graph:\nraise HTTPException(status_code=404,detail=f \"Template #{graph_id} not found.\")\nreturn graph"
                                                }
                                            ],
                                            "content": "->graph_db.GraphModel:\ngraph=await graph_db.get_graph(graph_id,version,template=True)\nif not graph:\nraise HTTPException(status_code=404,detail=f \"Template #{graph_id} not found.\")\nreturn graph\n"
                                        }
                                    ],
                                    "content": "None=None\n)->graph_db.GraphModel:\ngraph=await graph_db.get_graph(graph_id,version,template=True)\nif not graph:\nraise HTTPException(status_code=404,detail=f \"Template #{graph_id} not found.\")\nreturn graph\n\n"
                                }
                            ],
                            "content": "int|None=None\n)->graph_db.GraphModel:\ngraph=await graph_db.get_graph(graph_id,version,template=True)\nif not graph:\nraise HTTPException(status_code=404,detail=f \"Template #{graph_id} not found.\")\nreturn graph\n\n\n"
                        }
                    ],
                    "content": "path=\"/templates/{graph_id}\",\ntags=[\"templates\",\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def get_template(\ngraph_id:str,version:int|None=None\n)->graph_db.GraphModel:\ngraph=await graph_db.get_graph(graph_id,version,template=True)\nif not graph:\nraise HTTPException(status_code=404,detail=f \"Template #{graph_id} not found.\")\nreturn graph\n\n\n"
                }
            ],
            "content": "Sequence[graph_db.GraphModel]:\nreturn await graph_db.get_graphs(filter_by=\"template\",user_id=user_id)\n\n\n@v1_router.get(\npath=\"/templates/{graph_id}\",\ntags=[\"templates\",\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def get_template(\ngraph_id:str,version:int|None=None\n)->graph_db.GraphModel:\ngraph=await graph_db.get_graph(graph_id,version,template=True)\nif not graph:\nraise HTTPException(status_code=404,detail=f \"Template #{graph_id} not found.\")\nreturn graph\n\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "delete_schedule",
            "range": [
                3094,
                3146
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "schedule_id",
                    "range": [
                        3098,
                        3100
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                3100,
                                3100
                            ],
                            "content": "\n"
                        }
                    ],
                    "content": "create_new_template(\n"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        3103,
                        3113
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated",
                            "range": [
                                3105,
                                3113
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "str",
                                    "range": [
                                        3107,
                                        3107
                                    ],
                                    "content": "Annotated"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "Depends",
                                    "range": [
                                        3109,
                                        3112
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "get_user_id",
                                            "range": [
                                                3111,
                                                3111
                                            ],
                                            "content": "Depends"
                                        }
                                    ],
                                    "content": "str,Depends("
                                }
                            ],
                            "content": "user_id:Annotated[str,Depends(get_user_id"
                        }
                    ],
                    "content": "CreateGraph,user_id:Annotated[str,Depends(get_user_id"
                },
                {
                    "type": "ReturnType",
                    "name": "dict",
                    "range": [
                        3119,
                        3124
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "Any",
                            "range": [
                                3121,
                                3121
                            ],
                            "content": "."
                        },
                        {
                            "type": "Type",
                            "name": "Any",
                            "range": [
                                3123,
                                3123
                            ],
                            "content": ":"
                        }
                    ],
                    "content": ">graph_db.GraphModel:\n"
                },
                {
                    "type": "CallExpression",
                    "name": "execution_scheduler_client",
                    "range": [
                        3127,
                        3138
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "delete_schedule",
                            "range": [
                                3131,
                                3138
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "schedule_id",
                                    "range": [
                                        3133,
                                        3133
                                    ],
                                    "content": "True"
                                },
                                {
                                    "type": "KeywordArgument",
                                    "name": "user_id",
                                    "range": [
                                        3135,
                                        3137
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "user_id",
                                            "range": [
                                                3137,
                                                3137
                                            ],
                                            "content": "user_id"
                                        }
                                    ],
                                    "content": "user_id=user_id"
                                }
                            ],
                            "content": "is_template=True,user_id=user_id)"
                        }
                    ],
                    "content": "do_create_graph(create_graph,is_template=True,user_id=user_id)"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        3140,
                        3145
                    ],
                    "children": [
                        {
                            "type": "Dictionary",
                            "name": "",
                            "range": [
                                3141,
                                3145
                            ],
                            "children": [
                                {
                                    "type": "KeyValuePair",
                                    "name": "id",
                                    "range": [
                                        3142,
                                        3144
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "schedule_id",
                                            "range": [
                                                3144,
                                                3144
                                            ],
                                            "content": "#"
                                        }
                                    ],
                                    "content": "###"
                                }
                            ],
                            "content": "\n####"
                        }
                    ],
                    "content": "\n\n####"
                }
            ],
            "content": ")\nasync def create_new_template(\ncreate_graph:CreateGraph,user_id:Annotated[str,Depends(get_user_id)]\n)->graph_db.GraphModel:\nreturn await do_create_graph(create_graph,is_template=True,user_id=user_id)\n\n\n#####"
        },
        {
            "type": "FunctionDecl",
            "name": "get_execution_schedules",
            "range": [
                3177,
                3233
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        3181,
                        3191
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated",
                            "range": [
                                3183,
                                3191
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "str",
                                    "range": [
                                        3185,
                                        3186
                                    ],
                                    "children": [],
                                    "content": "##"
                                },
                                {
                                    "type": "Dependency",
                                    "name": "Depends",
                                    "range": [
                                        3187,
                                        3191
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_user_id",
                                            "range": [
                                                3189,
                                                3190
                                            ],
                                            "children": [],
                                            "content": "##"
                                        }
                                    ],
                                    "content": "#####"
                                }
                            ],
                            "content": "#########"
                        }
                    ],
                    "content": "###########"
                },
                {
                    "type": "Parameter",
                    "name": "graph_id",
                    "range": [
                        3194,
                        3200
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                3196,
                                3196
                            ],
                            "children": [],
                            "content": "#"
                        },
                        {
                            "type": "OptionalType",
                            "name": "None",
                            "range": [
                                3198,
                                3200
                            ],
                            "children": [],
                            "content": "\n##"
                        }
                    ],
                    "content": "####\n##"
                },
                {
                    "type": "ReturnType",
                    "name": "list",
                    "range": [
                        3206,
                        3211
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "scheduler.JobInfo",
                            "range": [
                                3208,
                                3211
                            ],
                            "children": [],
                            "content": "####"
                        }
                    ],
                    "content": "######"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        3214,
                        3233
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                3214,
                                3233
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "execution_scheduler_client",
                                    "range": [
                                        3215,
                                        3217
                                    ],
                                    "children": [],
                                    "content": "###"
                                },
                                {
                                    "type": "MethodCall",
                                    "name": "get_execution_schedules",
                                    "range": [
                                        3219,
                                        3232
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "user_id",
                                            "range": [
                                                3222,
                                                3224
                                            ],
                                            "children": [],
                                            "content": "###"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "graph_id",
                                            "range": [
                                                3227,
                                                3229
                                            ],
                                            "children": [],
                                            "content": "###"
                                        }
                                    ],
                                    "content": "#Schedules############"
                                }
                            ],
                            "content": "######Schedules#############"
                        }
                    ],
                    "content": "######Schedules#############"
                }
            ],
            "content": "#####################\n#####################Schedules#############"
        },
        {
            "type": "FunctionDecl",
            "name": "create_api_key",
            "range": [
                3277,
                3393
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "v1_router.post",
                    "range": [
                        3234,
                        3276
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "post",
                            "range": [
                                3237,
                                3275
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"/api-keys\"",
                                    "range": [
                                        3240,
                                        3240
                                    ],
                                    "children": [],
                                    "content": "#"
                                },
                                {
                                    "type": "Literal",
                                    "name": "response_model=list[CreateAPIKeyResponse]|dict[str, str]",
                                    "range": [
                                        3243,
                                        3255
                                    ],
                                    "children": [],
                                    "content": "##\n##########"
                                },
                                {
                                    "type": "Literal",
                                    "name": "tags=[\"api-keys\"]",
                                    "range": [
                                        3258,
                                        3262
                                    ],
                                    "children": [],
                                    "content": "#####"
                                },
                                {
                                    "type": "Literal",
                                    "name": "dependencies=[Depends(auth_middleware)]",
                                    "range": [
                                        3265,
                                        3272
                                    ],
                                    "children": [],
                                    "content": "########"
                                }
                            ],
                            "content": "########\n##############################"
                        }
                    ],
                    "content": "###########\n###############################"
                },
                {
                    "type": "Decorator",
                    "name": "feature_flag",
                    "range": [
                        3277,
                        3282
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "feature_flag",
                            "range": [
                                3278,
                                3281
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"api-keys-enabled\"",
                                    "range": [
                                        3280,
                                        3280
                                    ],
                                    "children": [],
                                    "content": "#"
                                }
                            ],
                            "content": "####"
                        }
                    ],
                    "content": "######"
                },
                {
                    "type": "FunctionSignature",
                    "name": "create_api_key",
                    "range": [
                        3283,
                        3308
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "request: CreateAPIKeyRequest",
                            "range": [
                                3288,
                                3291
                            ],
                            "children": [],
                            "content": "####"
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id: Annotated[str, Depends(get_user_id)]",
                            "range": [
                                3292,
                                3303
                            ],
                            "children": [],
                            "content": "##########\n\n"
                        },
                        {
                            "type": "ReturnType",
                            "name": "-> CreateAPIKeyResponse",
                            "range": [
                                3305,
                                3307
                            ],
                            "children": [],
                            "content": "class ScheduleCreationRequest("
                        }
                    ],
                    "content": "###################\n\n\nclass ScheduleCreationRequest(pydantic"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        3309,
                        3393
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                3314,
                                3364
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        3315,
                                        3364
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDeclaration",
                                            "name": "api_key, plain_text = await generate_api_key",
                                            "range": [
                                                3317,
                                                3321
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "generate_api_key",
                                                    "range": [
                                                        3321,
                                                        3351
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "name=request.name",
                                                            "range": [
                                                                3325,
                                                                3329
                                                            ],
                                                            "children": [],
                                                            "content": "]\ngraph_id:str"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "user_id=user_id",
                                                            "range": [
                                                                3332,
                                                                3334
                                                            ],
                                                            "children": [],
                                                            "content": "\n@v1_router"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "permissions=request.permissions",
                                                            "range": [
                                                                3337,
                                                                3341
                                                            ],
                                                            "children": [],
                                                            "content": "(\npath=\"/schedules\""
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "description=request.description",
                                                            "range": [
                                                                3344,
                                                                3348
                                                            ],
                                                            "children": [],
                                                            "content": "tags=[\"schedules\"]"
                                                        }
                                                    ],
                                                    "content": "[Any,Any]\ngraph_id:str\n\n\n@v1_router.post(\npath=\"/schedules\",\ntags=[\"schedules\"],\ndependencies"
                                                }
                                            ],
                                            "content": "\ninput_data:dict["
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)",
                                            "range": [
                                                3353,
                                                3364
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "CreateAPIKeyResponse",
                                                    "range": [
                                                        3355,
                                                        3363
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "api_key=api_key",
                                                            "range": [
                                                                3356,
                                                                3358
                                                            ],
                                                            "children": [],
                                                            "content": "auth_middleware)]"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "plain_text_key=plain_text",
                                                            "range": [
                                                                3360,
                                                                3362
                                                            ],
                                                            "children": [],
                                                            "content": "\n)\n"
                                                        }
                                                    ],
                                                    "content": "(auth_middleware)],\n)\nasync"
                                                }
                                            ],
                                            "content": "[Depends(auth_middleware)],\n)\nasync def"
                                        }
                                    ],
                                    "content": ":str\ninput_data:dict[Any,Any]\ngraph_id:str\n\n\n@v1_router.post(\npath=\"/schedules\",\ntags=[\"schedules\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def"
                                }
                            ],
                            "content": "cron:str\ninput_data:dict[Any,Any]\ngraph_id:str\n\n\n@v1_router.post(\npath=\"/schedules\",\ntags=[\"schedules\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def"
                        },
                        {
                            "type": "CatchStatement",
                            "name": "",
                            "range": [
                                3365,
                                3393
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        3369,
                                        3393
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "logger.error",
                                            "range": [
                                                3371,
                                                3377
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "f\"Failed to create API key: {str(e)}\"",
                                                    "range": [
                                                        3375,
                                                        3376
                                                    ],
                                                    "children": [],
                                                    "content": "(get_user_id"
                                                }
                                            ],
                                            "content": "[str,Depends(get_user_id)"
                                        },
                                        {
                                            "type": "ThrowStatement",
                                            "name": "raise HTTPException(status_code=400, detail=str(e))",
                                            "range": [
                                                3379,
                                                3393
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "HTTPException",
                                                    "range": [
                                                        3381,
                                                        3392
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "status_code=400",
                                                            "range": [
                                                                3382,
                                                                3384
                                                            ],
                                                            "children": [],
                                                            "content": ":ScheduleCreationRequest,"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "detail=str(e)",
                                                            "range": [
                                                                3386,
                                                                3391
                                                            ],
                                                            "children": [],
                                                            "content": ")->scheduler.JobInfo"
                                                        }
                                                    ],
                                                    "content": "schedule:ScheduleCreationRequest,\n)->scheduler.JobInfo:"
                                                }
                                            ],
                                            "content": ",\nschedule:ScheduleCreationRequest,\n)->scheduler.JobInfo:\n"
                                        }
                                    ],
                                    "content": ":Annotated[str,Depends(get_user_id)],\nschedule:ScheduleCreationRequest,\n)->scheduler.JobInfo:\n"
                                }
                            ],
                            "content": "create_schedule(\nuser_id:Annotated[str,Depends(get_user_id)],\nschedule:ScheduleCreationRequest,\n)->scheduler.JobInfo:\n"
                        }
                    ],
                    "content": ".BaseModel):\ncron:str\ninput_data:dict[Any,Any]\ngraph_id:str\n\n\n@v1_router.post(\npath=\"/schedules\",\ntags=[\"schedules\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def create_schedule(\nuser_id:Annotated[str,Depends(get_user_id)],\nschedule:ScheduleCreationRequest,\n)->scheduler.JobInfo:\n"
                }
            ],
            "content": "#########################\n\n\nclass ScheduleCreationRequest(pydantic.BaseModel):\ncron:str\ninput_data:dict[Any,Any]\ngraph_id:str\n\n\n@v1_router.post(\npath=\"/schedules\",\ntags=[\"schedules\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def create_schedule(\nuser_id:Annotated[str,Depends(get_user_id)],\nschedule:ScheduleCreationRequest,\n)->scheduler.JobInfo:\n"
        },
        {
            "type": "Decorator",
            "name": "v1_router.get",
            "range": [
                3394,
                3435
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "path",
                    "range": [
                        3400,
                        3400
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Argument",
                    "name": "response_model",
                    "range": [
                        3403,
                        3415
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "list[APIKeyWithoutHash] | dict[str, str]",
                            "range": [
                                3405,
                                3415
                            ],
                            "children": [],
                            "content": "user_id=user_id)\nif not graph:\nraise"
                        }
                    ],
                    "content": "graph_id,user_id=user_id)\nif not graph:\nraise"
                },
                {
                    "type": "Argument",
                    "name": "tags",
                    "range": [
                        3418,
                        3422
                    ],
                    "children": [
                        {
                            "type": "List",
                            "name": "[\"api-keys\"]",
                            "range": [
                                3420,
                                3422
                            ],
                            "children": [],
                            "content": "=404,"
                        }
                    ],
                    "content": "\nstatus_code=404,"
                },
                {
                    "type": "Argument",
                    "name": "dependencies",
                    "range": [
                        3425,
                        3432
                    ],
                    "children": [
                        {
                            "type": "List",
                            "name": "[Depends(auth_middleware)]",
                            "range": [
                                3427,
                                3432
                            ],
                            "children": [],
                            "content": "\n)\n\nreturn await"
                        }
                    ],
                    "content": "f \"Graph #{schedule.graph_id} not found.\"\n)\n\nreturn await"
                }
            ],
            "content": "graph=await graph_db.get_graph(schedule.graph_id,user_id=user_id)\nif not graph:\nraise HTTPException(\nstatus_code=404,detail=f \"Graph #{schedule.graph_id} not found.\"\n)\n\nreturn await asyncio.to_thread"
        },
        {
            "type": "Decorator",
            "name": "feature_flag",
            "range": [
                3437,
                3441
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "\"api-keys-enabled\"",
                    "range": [
                        3440,
                        3440
                    ],
                    "children": [],
                    "content": "execution_scheduler_client"
                }
            ],
            "content": "\nlambda:execution_scheduler_client("
        },
        {
            "type": "FunctionDecl",
            "name": "get_api_keys",
            "range": [
                3443,
                3511
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        3448,
                        3458
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "Annotated[str, Depends(get_user_id)]",
                            "range": [
                                3450,
                                3458
                            ],
                            "children": [],
                            "content": ".graph_id,\ngraph_version=graph.version"
                        }
                    ],
                    "content": "=schedule.graph_id,\ngraph_version=graph.version"
                },
                {
                    "type": "ReturnType",
                    "name": "list[APIKeyWithoutHash]",
                    "range": [
                        3463,
                        3466
                    ],
                    "children": [],
                    "content": "schedule.cron,"
                },
                {
                    "type": "Docstring",
                    "name": "\"List all API keys for the user\"",
                    "range": [
                        3469,
                        3471
                    ],
                    "children": [],
                    "content": "=schedule."
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        3473,
                        3511
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return await list_user_api_keys(user_id)",
                            "range": [
                                3476,
                                3481
                            ],
                            "children": [],
                            "content": "=user_id,\n)\n"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except APIKeyError as e",
                            "range": [
                                3483,
                                3511
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "logger.error(f\"Failed to list API keys: {str(e)}\")",
                                    "range": [
                                        3489,
                                        3495
                                    ],
                                    "children": [],
                                    "content": "delete(\npath=\"/schedules/{schedule_id}\","
                                },
                                {
                                    "type": "ThrowStatement",
                                    "name": "raise HTTPException(status_code=400, detail=str(e))",
                                    "range": [
                                        3497,
                                        3510
                                    ],
                                    "children": [],
                                    "content": "tags=[\"schedules\"],\ndependencies=[Depends(auth_middleware)"
                                }
                            ],
                            "content": "\n\n\n@v1_router.delete(\npath=\"/schedules/{schedule_id}\",\ntags=[\"schedules\"],\ndependencies=[Depends(auth_middleware)]"
                        }
                    ],
                    "content": ",\nuser_id=user_id,\n)\n)\n\n\n@v1_router.delete(\npath=\"/schedules/{schedule_id}\",\ntags=[\"schedules\"],\ndependencies=[Depends(auth_middleware)]"
                }
            ],
            "content": ".add_execution_schedule(\ngraph_id=schedule.graph_id,\ngraph_version=graph.version,\ncron=schedule.cron,\ninput_data=schedule.input_data,\nuser_id=user_id,\n)\n)\n\n\n@v1_router.delete(\npath=\"/schedules/{schedule_id}\",\ntags=[\"schedules\"],\ndependencies=[Depends(auth_middleware)]"
        },
        {
            "type": "FunctionDecl",
            "name": "get_api_key",
            "range": [
                3555,
                3653
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "feature_flag",
                    "range": [
                        3555,
                        3559
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "api-keys-enabled",
                            "range": [
                                3558,
                                3559
                            ],
                            "children": [],
                            "content": "=user_id"
                        }
                    ],
                    "content": "schedule_id,user_id=user_id"
                },
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        3561,
                        3585
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                3561,
                                3561
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                3562,
                                3562
                            ],
                            "children": [],
                            "content": "return"
                        },
                        {
                            "type": "Identifier",
                            "name": "get_api_key",
                            "range": [
                                3563,
                                3563
                            ],
                            "children": [],
                            "content": "{"
                        },
                        {
                            "type": "ParameterList",
                            "name": "",
                            "range": [
                                3564,
                                3581
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "key_id",
                                    "range": [
                                        3566,
                                        3568
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "str",
                                            "range": [
                                                3568,
                                                3568
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "schedule_id}\n"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "user_id",
                                    "range": [
                                        3570,
                                        3580
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "Annotated",
                                            "range": [
                                                3572,
                                                3580
                                            ],
                                            "children": [
                                                {
                                                    "type": "TypeArgument",
                                                    "name": "str",
                                                    "range": [
                                                        3574,
                                                        3574
                                                    ],
                                                    "children": [],
                                                    "content": "get"
                                                },
                                                {
                                                    "type": "TypeArgument",
                                                    "name": "Depends",
                                                    "range": [
                                                        3576,
                                                        3580
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "get_user_id",
                                                            "range": [
                                                                3578,
                                                                3578
                                                            ],
                                                            "children": [],
                                                            "content": "="
                                                        }
                                                    ],
                                                    "content": "\npath=\"/schedules\","
                                                }
                                            ],
                                            "content": "v1_router.get(\npath=\"/schedules\","
                                        }
                                    ],
                                    "content": "\n@v1_router.get(\npath=\"/schedules\","
                                }
                            ],
                            "content": "\"id\":schedule_id}\n\n\n@v1_router.get(\npath=\"/schedules\",\n"
                        },
                        {
                            "type": "ReturnType",
                            "name": "APIKeyWithoutHash",
                            "range": [
                                3585,
                                3585
                            ],
                            "children": [],
                            "content": "\"schedules\""
                        }
                    ],
                    "content": "\nreturn{\"id\":schedule_id}\n\n\n@v1_router.get(\npath=\"/schedules\",\ntags=[\"schedules\""
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        3587,
                        3653
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "Get a specific API key",
                            "range": [
                                3588,
                                3590
                            ],
                            "children": [],
                            "content": "\ndependencies="
                        },
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                3592,
                                3653
                            ],
                            "children": [
                                {
                                    "type": "TryBlock",
                                    "name": "",
                                    "range": [
                                        3592,
                                        3624
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "api_key",
                                            "range": [
                                                3595,
                                                3603
                                            ],
                                            "children": [
                                                {
                                                    "type": "AwaitExpression",
                                                    "name": "await",
                                                    "range": [
                                                        3597,
                                                        3597
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "get_api_key_by_id",
                                                            "range": [
                                                                3598,
                                                                3603
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "key_id",
                                                                    "range": [
                                                                        3600,
                                                                        3600
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\n"
                                                                },
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "user_id",
                                                                    "range": [
                                                                        3602,
                                                                        3602
                                                                    ],
                                                                    "children": [],
                                                                    "content": "get_execution_schedules"
                                                                }
                                                            ],
                                                            "content": "\n)\ndef get_execution_schedules("
                                                        }
                                                    ],
                                                    "content": ","
                                                }
                                            ],
                                            "content": ")],\n)\ndef get_execution_schedules("
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "",
                                            "range": [
                                                3605,
                                                3621
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "not api_key",
                                                    "range": [
                                                        3606,
                                                        3607
                                                    ],
                                                    "children": [],
                                                    "content": ":Annotated"
                                                },
                                                {
                                                    "type": "IfBlock",
                                                    "name": "",
                                                    "range": [
                                                        3608,
                                                        3621
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "RaiseStatement",
                                                            "name": "raise",
                                                            "range": [
                                                                3610,
                                                                3620
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "HTTPException",
                                                                    "range": [
                                                                        3611,
                                                                        3620
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "status_code",
                                                                            "range": [
                                                                                3613,
                                                                                3615
                                                                            ],
                                                                            "children": [],
                                                                            "content": "get_user_id)]"
                                                                        },
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "detail",
                                                                            "range": [
                                                                                3617,
                                                                                3619
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\ngraph_id:"
                                                                        }
                                                                    ],
                                                                    "content": "Depends(get_user_id)],\ngraph_id:str"
                                                                }
                                                            ],
                                                            "content": ",Depends(get_user_id)],\ngraph_id:str"
                                                        }
                                                    ],
                                                    "content": "[str,Depends(get_user_id)],\ngraph_id:str|"
                                                }
                                            ],
                                            "content": "user_id:Annotated[str,Depends(get_user_id)],\ngraph_id:str|"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                3622,
                                                3623
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "api_key",
                                                    "range": [
                                                        3623,
                                                        3623
                                                    ],
                                                    "children": [],
                                                    "content": "="
                                                }
                                            ],
                                            "content": "None="
                                        }
                                    ],
                                    "content": "Depends(auth_middleware)],\n)\ndef get_execution_schedules(\nuser_id:Annotated[str,Depends(get_user_id)],\ngraph_id:str|None=None"
                                },
                                {
                                    "type": "ExceptBlock",
                                    "name": "",
                                    "range": [
                                        3625,
                                        3653
                                    ],
                                    "children": [
                                        {
                                            "type": "Exception",
                                            "name": "APIKeyError",
                                            "range": [
                                                3626,
                                                3626
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "AsClause",
                                            "name": "e",
                                            "range": [
                                                3627,
                                                3628
                                            ],
                                            "children": [],
                                            "content": ")-"
                                        },
                                        {
                                            "type": "ExceptBlockBody",
                                            "name": "",
                                            "range": [
                                                3629,
                                                3653
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        3631,
                                                        3637
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "logger.error",
                                                            "range": [
                                                                3631,
                                                                3637
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "Failed to get API key: {str(e)}",
                                                                    "range": [
                                                                        3635,
                                                                        3636
                                                                    ],
                                                                    "children": [],
                                                                    "content": "]:"
                                                                }
                                                            ],
                                                            "content": "[scheduler.JobInfo]:\n"
                                                        }
                                                    ],
                                                    "content": "[scheduler.JobInfo]:\n"
                                                },
                                                {
                                                    "type": "RaiseStatement",
                                                    "name": "raise",
                                                    "range": [
                                                        3639,
                                                        3652
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "HTTPException",
                                                            "range": [
                                                                3640,
                                                                3652
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "status_code",
                                                                    "range": [
                                                                        3642,
                                                                        3644
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".get_execution_schedules("
                                                                },
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "detail",
                                                                    "range": [
                                                                        3646,
                                                                        3648
                                                                    ],
                                                                    "children": [],
                                                                    "content": "user_id=user_id"
                                                                }
                                                            ],
                                                            "content": "().get_execution_schedules(\nuser_id=user_id,\ngraph_id="
                                                        }
                                                    ],
                                                    "content": "execution_scheduler_client().get_execution_schedules(\nuser_id=user_id,\ngraph_id="
                                                }
                                            ],
                                            "content": ">list[scheduler.JobInfo]:\nreturn execution_scheduler_client().get_execution_schedules(\nuser_id=user_id,\ngraph_id=graph_id"
                                        }
                                    ],
                                    "content": ",\n)->list[scheduler.JobInfo]:\nreturn execution_scheduler_client().get_execution_schedules(\nuser_id=user_id,\ngraph_id=graph_id"
                                }
                            ],
                            "content": "Depends(auth_middleware)],\n)\ndef get_execution_schedules(\nuser_id:Annotated[str,Depends(get_user_id)],\ngraph_id:str|None=None,\n)->list[scheduler.JobInfo]:\nreturn execution_scheduler_client().get_execution_schedules(\nuser_id=user_id,\ngraph_id=graph_id"
                        }
                    ],
                    "content": ",\ndependencies=[Depends(auth_middleware)],\n)\ndef get_execution_schedules(\nuser_id:Annotated[str,Depends(get_user_id)],\ngraph_id:str|None=None,\n)->list[scheduler.JobInfo]:\nreturn execution_scheduler_client().get_execution_schedules(\nuser_id=user_id,\ngraph_id=graph_id"
                }
            ],
            "content": "schedule_id,user_id=user_id)\nreturn{\"id\":schedule_id}\n\n\n@v1_router.get(\npath=\"/schedules\",\ntags=[\"schedules\"],\ndependencies=[Depends(auth_middleware)],\n)\ndef get_execution_schedules(\nuser_id:Annotated[str,Depends(get_user_id)],\ngraph_id:str|None=None,\n)->list[scheduler.JobInfo]:\nreturn execution_scheduler_client().get_execution_schedules(\nuser_id=user_id,\ngraph_id=graph_id"
        },
        {
            "type": "Decorator",
            "name": "v1_router.delete",
            "range": [
                3654,
                3695
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "path",
                    "range": [
                        3658,
                        3660
                    ],
                    "children": [],
                    "content": "\n\n#"
                },
                {
                    "type": "Argument",
                    "name": "response_model",
                    "range": [
                        3663,
                        3675
                    ],
                    "children": [],
                    "content": "#############"
                },
                {
                    "type": "Argument",
                    "name": "tags",
                    "range": [
                        3678,
                        3682
                    ],
                    "children": [],
                    "content": "#####"
                },
                {
                    "type": "Argument",
                    "name": "dependencies",
                    "range": [
                        3685,
                        3692
                    ],
                    "children": [],
                    "content": "########"
                }
            ],
            "content": ",\n)\n\n\n####################################"
        },
        {
            "type": "Decorator",
            "name": "feature_flag",
            "range": [
                3697,
                3701
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "flag",
                    "range": [
                        3699,
                        3700
                    ],
                    "children": [],
                    "content": "##"
                }
            ],
            "content": "#####"
        },
        {
            "type": "FunctionDecl",
            "name": "delete_api_key",
            "range": [
                3703,
                3809
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "key_id",
                    "range": [
                        3708,
                        3710
                    ],
                    "children": [],
                    "content": "###"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        3712,
                        3722
                    ],
                    "children": [],
                    "content": "####\n######"
                },
                {
                    "type": "ReturnType",
                    "name": "Optional[APIKeyWithoutHash]",
                    "range": [
                        3725,
                        3730
                    ],
                    "children": [],
                    "content": "######"
                },
                {
                    "type": "Docstring",
                    "name": "Revoke an API key",
                    "range": [
                        3733,
                        3735
                    ],
                    "children": [],
                    "content": "###"
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        3737,
                        3809
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                3740,
                                3747
                            ],
                            "children": [],
                            "content": "########"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except APIKeyNotFoundError",
                            "range": [
                                3749,
                                3764
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise HTTPException",
                                    "range": [
                                        3753,
                                        3763
                                    ],
                                    "children": [],
                                    "content": "###########"
                                }
                            ],
                            "content": "################"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except APIKeyPermissionError",
                            "range": [
                                3765,
                                3780
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise HTTPException",
                                    "range": [
                                        3769,
                                        3779
                                    ],
                                    "children": [],
                                    "content": "#\n#########"
                                }
                            ],
                            "content": "#####\n##########"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except APIKeyError as e",
                            "range": [
                                3781,
                                3809
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "logger.error",
                                    "range": [
                                        3787,
                                        3793
                                    ],
                                    "children": [],
                                    "content": "#######"
                                },
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise HTTPException",
                                    "range": [
                                        3795,
                                        3808
                                    ],
                                    "children": [],
                                    "content": "##############"
                                }
                            ],
                            "content": "#############################"
                        }
                    ],
                    "content": "#API KEY##############################\n#######################################"
                }
            ],
            "content": "#############\n#####################API KEY##############################\n#######################################"
        },
        {
            "type": "Decorator",
            "name": "@v1_router.post",
            "range": [
                3810,
                3852
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "post",
                    "range": [
                        3813,
                        3851
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"/api-keys/{key_id}/suspend\"",
                            "range": [
                                3816,
                                3816
                            ],
                            "children": [],
                            "content": "#"
                        },
                        {
                            "type": "KeywordArgument",
                            "name": "response_model",
                            "range": [
                                3819,
                                3831
                            ],
                            "children": [
                                {
                                    "type": "TypeExpression",
                                    "name": "list[APIKeyWithoutHash] | dict[str, str]",
                                    "range": [
                                        3821,
                                        3831
                                    ],
                                    "children": [],
                                    "content": "######\n\n\n@v1_router"
                                }
                            ],
                            "content": "########\n\n\n@v1_router"
                        },
                        {
                            "type": "KeywordArgument",
                            "name": "tags",
                            "range": [
                                3834,
                                3838
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "[\"api-keys\"]",
                                    "range": [
                                        3836,
                                        3838
                                    ],
                                    "children": [],
                                    "content": "\"/api-keys\",\n"
                                }
                            ],
                            "content": "(\n\"/api-keys\",\n"
                        },
                        {
                            "type": "KeywordArgument",
                            "name": "dependencies",
                            "range": [
                                3841,
                                3848
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "[Depends(auth_middleware)]",
                                    "range": [
                                        3843,
                                        3848
                                    ],
                                    "children": [],
                                    "content": "CreateAPIKeyResponse]|dict[str"
                                }
                            ],
                            "content": "list[CreateAPIKeyResponse]|dict[str"
                        }
                    ],
                    "content": "##############\n\n\n@v1_router.post(\n\"/api-keys\",\nresponse_model=list[CreateAPIKeyResponse]|dict[str,str]"
                }
            ],
            "content": "#################\n\n\n@v1_router.post(\n\"/api-keys\",\nresponse_model=list[CreateAPIKeyResponse]|dict[str,str],"
        },
        {
            "type": "Decorator",
            "name": "@feature_flag",
            "range": [
                3853,
                3857
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "feature_flag",
                    "range": [
                        3854,
                        3857
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"api-keys-enabled\"",
                            "range": [
                                3856,
                                3856
                            ],
                            "children": [],
                            "content": "["
                        }
                    ],
                    "content": "tags=[\"api-keys\""
                }
            ],
            "content": "\ntags=[\"api-keys\""
        },
        {
            "type": "FunctionDecl",
            "name": "suspend_key",
            "range": [
                3859,
                3965
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "async",
                    "range": [
                        3859,
                        3859
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "Keyword",
                    "name": "def",
                    "range": [
                        3860,
                        3860
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Identifier",
                    "name": "suspend_key",
                    "range": [
                        3861,
                        3861
                    ],
                    "children": [],
                    "content": "dependencies"
                },
                {
                    "type": "ParameterList",
                    "name": "key_id: str, user_id: Annotated[str, Depends(get_user_id)]",
                    "range": [
                        3862,
                        3879
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "key_id: str",
                            "range": [
                                3864,
                                3866
                            ],
                            "children": [],
                            "content": "Depends(auth_middleware"
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id: Annotated[str, Depends(get_user_id)]",
                            "range": [
                                3868,
                                3878
                            ],
                            "children": [],
                            "content": "],\n)\n@feature_flag(\"api-keys-enabled\")\n"
                        }
                    ],
                    "content": "=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync"
                },
                {
                    "type": "ReturnType",
                    "name": "-> Optional[APIKeyWithoutHash]",
                    "range": [
                        3881,
                        3886
                    ],
                    "children": [],
                    "content": "create_api_key(\nrequest:CreateAPIKeyRequest"
                },
                {
                    "type": "Docstring",
                    "name": "\"Suspend an API key\"",
                    "range": [
                        3889,
                        3891
                    ],
                    "children": [],
                    "content": ":Annotated["
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        3893,
                        3965
                    ],
                    "children": [
                        {
                            "type": "Block",
                            "name": "try block",
                            "range": [
                                3895,
                                3904
                            ],
                            "children": [
                                {
                                    "type": "ReturnStatement",
                                    "name": "return await suspend_api_key(key_id, user_id)",
                                    "range": [
                                        3896,
                                        3903
                                    ],
                                    "children": [],
                                    "content": "get_user_id)]\n)->CreateAPIKeyResponse"
                                }
                            ],
                            "content": "(get_user_id)]\n)->CreateAPIKeyResponse:"
                        },
                        {
                            "type": "ExceptClause",
                            "name": "except APIKeyNotFoundError",
                            "range": [
                                3905,
                                3920
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "except block",
                                    "range": [
                                        3908,
                                        3920
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise HTTPException(status_code=404, detail=\"API key not found\")",
                                            "range": [
                                                3909,
                                                3919
                                            ],
                                            "children": [],
                                            "content": "\ntry:\napi_key,plain_text=await generate_api_key("
                                        }
                                    ],
                                    "content": "\"\"\ntry:\napi_key,plain_text=await generate_api_key(\n"
                                }
                            ],
                            "content": "\n\"\"\"Create a new API key\"\"\"\ntry:\napi_key,plain_text=await generate_api_key(\n"
                        },
                        {
                            "type": "ExceptClause",
                            "name": "except APIKeyPermissionError",
                            "range": [
                                3921,
                                3936
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "except block",
                                    "range": [
                                        3924,
                                        3936
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise HTTPException(status_code=403, detail=\"Permission denied\")",
                                            "range": [
                                                3925,
                                                3935
                                            ],
                                            "children": [],
                                            "content": "name,\nuser_id=user_id,\npermissions=request"
                                        }
                                    ],
                                    "content": ".name,\nuser_id=user_id,\npermissions=request."
                                }
                            ],
                            "content": "name=request.name,\nuser_id=user_id,\npermissions=request."
                        },
                        {
                            "type": "ExceptClause",
                            "name": "except APIKeyError as e",
                            "range": [
                                3937,
                                3965
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "except block",
                                    "range": [
                                        3942,
                                        3965
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "logger.error(f\"Failed to suspend API key: {str(e)}\")",
                                            "range": [
                                                3943,
                                                3949
                                            ],
                                            "children": [],
                                            "content": ".description,\n)\nreturn"
                                        },
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise HTTPException(status_code=400, detail=str(e))",
                                            "range": [
                                                3951,
                                                3964
                                            ],
                                            "children": [],
                                            "content": "(api_key=api_key,plain_text_key=plain_text)\nexcept APIKeyError as e"
                                        }
                                    ],
                                    "content": "request.description,\n)\nreturn CreateAPIKeyResponse(api_key=api_key,plain_text_key=plain_text)\nexcept APIKeyError as e:"
                                }
                            ],
                            "content": "permissions,\ndescription=request.description,\n)\nreturn CreateAPIKeyResponse(api_key=api_key,plain_text_key=plain_text)\nexcept APIKeyError as e:"
                        }
                    ],
                    "content": ",Depends(get_user_id)]\n)->CreateAPIKeyResponse:\n\"\"\"Create a new API key\"\"\"\ntry:\napi_key,plain_text=await generate_api_key(\nname=request.name,\nuser_id=user_id,\npermissions=request.permissions,\ndescription=request.description,\n)\nreturn CreateAPIKeyResponse(api_key=api_key,plain_text_key=plain_text)\nexcept APIKeyError as e:"
                }
            ],
            "content": ",\ndependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def create_api_key(\nrequest:CreateAPIKeyRequest,user_id:Annotated[str,Depends(get_user_id)]\n)->CreateAPIKeyResponse:\n\"\"\"Create a new API key\"\"\"\ntry:\napi_key,plain_text=await generate_api_key(\nname=request.name,\nuser_id=user_id,\npermissions=request.permissions,\ndescription=request.description,\n)\nreturn CreateAPIKeyResponse(api_key=api_key,plain_text_key=plain_text)\nexcept APIKeyError as e:"
        },
        {
            "type": "FunctionDecl",
            "name": "update_permissions",
            "range": [
                3966,
                4132
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "v1_router.put",
                    "range": [
                        3966,
                        4007
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "",
                            "range": [
                                3966,
                                4007
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "v1_router.put",
                                    "range": [
                                        3966,
                                        3969
                                    ],
                                    "children": [],
                                    "content": "\nlogger.error"
                                },
                                {
                                    "type": "Literal",
                                    "name": "\"/api-keys/{key_id}/permissions\"",
                                    "range": [
                                        3972,
                                        3972
                                    ],
                                    "children": [],
                                    "content": "\"Failed to create API key: {str(e)}\""
                                },
                                {
                                    "type": "Keyword",
                                    "name": "response_model",
                                    "range": [
                                        3975,
                                        3975
                                    ],
                                    "children": [],
                                    "content": "raise"
                                },
                                {
                                    "type": "TypeExpression",
                                    "name": "list[APIKeyWithoutHash] | dict[str, str]",
                                    "range": [
                                        3977,
                                        3987
                                    ],
                                    "children": [],
                                    "content": "(status_code=400,detail=str(e)"
                                },
                                {
                                    "type": "Keyword",
                                    "name": "tags",
                                    "range": [
                                        3990,
                                        3990
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "ArrayExpression",
                                    "name": "[\"api-keys\"]",
                                    "range": [
                                        3992,
                                        3994
                                    ],
                                    "children": [],
                                    "content": "@v1_router."
                                },
                                {
                                    "type": "Keyword",
                                    "name": "dependencies",
                                    "range": [
                                        3997,
                                        3997
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "ArrayExpression",
                                    "name": "[Depends(auth_middleware)]",
                                    "range": [
                                        3999,
                                        4004
                                    ],
                                    "children": [],
                                    "content": ",\nresponse_model=list["
                                }
                            ],
                            "content": "\nlogger.error(f \"Failed to create API key: {str(e)}\")\nraise HTTPException(status_code=400,detail=str(e))\n\n\n@v1_router.get(\n\"/api-keys\",\nresponse_model=list[APIKeyWithoutHash]|"
                        }
                    ],
                    "content": "\nlogger.error(f \"Failed to create API key: {str(e)}\")\nraise HTTPException(status_code=400,detail=str(e))\n\n\n@v1_router.get(\n\"/api-keys\",\nresponse_model=list[APIKeyWithoutHash]|"
                },
                {
                    "type": "Decorator",
                    "name": "feature_flag",
                    "range": [
                        4009,
                        4013
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "",
                            "range": [
                                4009,
                                4013
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"api-keys-enabled\"",
                                    "range": [
                                        4012,
                                        4012
                                    ],
                                    "children": [],
                                    "content": "str"
                                }
                            ],
                            "content": "[str,str]"
                        }
                    ],
                    "content": "[str,str]"
                },
                {
                    "type": "FunctionSignature",
                    "name": "update_permissions",
                    "range": [
                        4015,
                        4050
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "key_id",
                            "range": [
                                4020,
                                4022
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": ": str",
                                    "range": [
                                        4021,
                                        4022
                                    ],
                                    "children": [],
                                    "content": ",\n"
                                }
                            ],
                            "content": "],\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "request",
                            "range": [
                                4025,
                                4027
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": ": UpdatePermissionsRequest",
                                    "range": [
                                        4026,
                                        4027
                                    ],
                                    "children": [],
                                    "content": "Depends("
                                }
                            ],
                            "content": "[Depends("
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                4030,
                                4040
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": ": Annotated[str, Depends(get_user_id)]",
                                    "range": [
                                        4031,
                                        4040
                                    ],
                                    "children": [],
                                    "content": ",\n)\n@feature_flag(\"api-keys-enabled\")\n"
                                }
                            ],
                            "content": "],\n)\n@feature_flag(\"api-keys-enabled\")\n"
                        },
                        {
                            "type": "ReturnTypeAnnotation",
                            "name": "-> Optional[APIKeyWithoutHash]",
                            "range": [
                                4044,
                                4050
                            ],
                            "children": [],
                            "content": "(\nuser_id:Annotated[str"
                        }
                    ],
                    "content": "\ntags=[\"api-keys\"],\ndependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_keys(\nuser_id:Annotated[str"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        4051,
                        4132
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                4056,
                                4132
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        4058,
                                        4071
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "",
                                            "range": [
                                                4059,
                                                4070
                                            ],
                                            "children": [
                                                {
                                                    "type": "AwaitExpression",
                                                    "name": "",
                                                    "range": [
                                                        4060,
                                                        4070
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "update_api_key_permissions",
                                                            "range": [
                                                                4061,
                                                                4070
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "key_id",
                                                                    "range": [
                                                                        4063,
                                                                        4063
                                                                    ],
                                                                    "children": [],
                                                                    "content": "APIKeyWithoutHash"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "user_id",
                                                                    "range": [
                                                                        4065,
                                                                        4065
                                                                    ],
                                                                    "children": [],
                                                                    "content": ":"
                                                                },
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "request.permissions",
                                                                    "range": [
                                                                        4067,
                                                                        4069
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\"\"\"List all API keys for the user\"\"\""
                                                                }
                                                            ],
                                                            "content": "list[APIKeyWithoutHash]:\n\"\"\"List all API keys for the user\"\"\"\n"
                                                        }
                                                    ],
                                                    "content": ">list[APIKeyWithoutHash]:\n\"\"\"List all API keys for the user\"\"\"\n"
                                                }
                                            ],
                                            "content": "->list[APIKeyWithoutHash]:\n\"\"\"List all API keys for the user\"\"\"\n"
                                        }
                                    ],
                                    "content": ")->list[APIKeyWithoutHash]:\n\"\"\"List all API keys for the user\"\"\"\ntry"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "APIKeyNotFoundError",
                                    "range": [
                                        4072,
                                        4087
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "",
                                            "range": [
                                                4074,
                                                4087
                                            ],
                                            "children": [
                                                {
                                                    "type": "RaiseStatement",
                                                    "name": "",
                                                    "range": [
                                                        4076,
                                                        4086
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "HTTPException",
                                                            "range": [
                                                                4077,
                                                                4086
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Keyword",
                                                                    "name": "status_code",
                                                                    "range": [
                                                                        4079,
                                                                        4079
                                                                    ],
                                                                    "children": [],
                                                                    "content": ")"
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "404",
                                                                    "range": [
                                                                        4081,
                                                                        4081
                                                                    ],
                                                                    "children": [],
                                                                    "content": "except"
                                                                },
                                                                {
                                                                    "type": "Keyword",
                                                                    "name": "detail",
                                                                    "range": [
                                                                        4083,
                                                                        4083
                                                                    ],
                                                                    "children": [],
                                                                    "content": "as"
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"API key not found\"",
                                                                    "range": [
                                                                        4085,
                                                                        4085
                                                                    ],
                                                                    "children": [],
                                                                    "content": ":"
                                                                }
                                                            ],
                                                            "content": "(user_id)\nexcept APIKeyError as e:\n"
                                                        }
                                                    ],
                                                    "content": "list_user_api_keys(user_id)\nexcept APIKeyError as e:\n"
                                                }
                                            ],
                                            "content": "return await list_user_api_keys(user_id)\nexcept APIKeyError as e:\nlogger"
                                        }
                                    ],
                                    "content": ":\nreturn await list_user_api_keys(user_id)\nexcept APIKeyError as e:\nlogger"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "APIKeyPermissionError",
                                    "range": [
                                        4088,
                                        4103
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "",
                                            "range": [
                                                4090,
                                                4103
                                            ],
                                            "children": [
                                                {
                                                    "type": "RaiseStatement",
                                                    "name": "",
                                                    "range": [
                                                        4092,
                                                        4102
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "HTTPException",
                                                            "range": [
                                                                4093,
                                                                4102
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Keyword",
                                                                    "name": "status_code",
                                                                    "range": [
                                                                        4095,
                                                                        4095
                                                                    ],
                                                                    "children": [],
                                                                    "content": "raise"
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "403",
                                                                    "range": [
                                                                        4097,
                                                                        4097
                                                                    ],
                                                                    "children": [],
                                                                    "content": "("
                                                                },
                                                                {
                                                                    "type": "Keyword",
                                                                    "name": "detail",
                                                                    "range": [
                                                                        4099,
                                                                        4099
                                                                    ],
                                                                    "children": [],
                                                                    "content": "="
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"Permission denied\"",
                                                                    "range": [
                                                                        4101,
                                                                        4101
                                                                    ],
                                                                    "children": [],
                                                                    "content": ","
                                                                }
                                                            ],
                                                            "content": ")\nraise HTTPException(status_code=400,detail"
                                                        }
                                                    ],
                                                    "content": "\"Failed to list API keys: {str(e)}\")\nraise HTTPException(status_code=400,detail"
                                                }
                                            ],
                                            "content": "(f \"Failed to list API keys: {str(e)}\")\nraise HTTPException(status_code=400,detail="
                                        }
                                    ],
                                    "content": ".error(f \"Failed to list API keys: {str(e)}\")\nraise HTTPException(status_code=400,detail="
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "APIKeyError",
                                    "range": [
                                        4104,
                                        4132
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "",
                                            "range": [
                                                4108,
                                                4132
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        4110,
                                                        4116
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "logger.error",
                                                            "range": [
                                                                4110,
                                                                4116
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "TemplateLiteral",
                                                                    "name": "f\"Failed to update API key permissions: {str(e)}\"",
                                                                    "range": [
                                                                        4114,
                                                                        4115
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".get"
                                                                }
                                                            ],
                                                            "content": "\n\n@v1_router.get("
                                                        }
                                                    ],
                                                    "content": "\n\n@v1_router.get("
                                                },
                                                {
                                                    "type": "RaiseStatement",
                                                    "name": "",
                                                    "range": [
                                                        4118,
                                                        4131
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "HTTPException",
                                                            "range": [
                                                                4119,
                                                                4131
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Keyword",
                                                                    "name": "status_code",
                                                                    "range": [
                                                                        4121,
                                                                        4121
                                                                    ],
                                                                    "children": [],
                                                                    "content": "response_model"
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "400",
                                                                    "range": [
                                                                        4123,
                                                                        4123
                                                                    ],
                                                                    "children": [],
                                                                    "content": "list"
                                                                },
                                                                {
                                                                    "type": "Keyword",
                                                                    "name": "detail",
                                                                    "range": [
                                                                        4125,
                                                                        4125
                                                                    ],
                                                                    "children": [],
                                                                    "content": "APIKeyWithoutHash"
                                                                },
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "str",
                                                                    "range": [
                                                                        4127,
                                                                        4130
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "e",
                                                                            "range": [
                                                                                4129,
                                                                                4129
                                                                            ],
                                                                            "children": [],
                                                                            "content": "["
                                                                        }
                                                                    ],
                                                                    "content": "|dict[str"
                                                                }
                                                            ],
                                                            "content": ",\nresponse_model=list[APIKeyWithoutHash]|dict[str,"
                                                        }
                                                    ],
                                                    "content": "\"/api-keys/{key_id}\",\nresponse_model=list[APIKeyWithoutHash]|dict[str,"
                                                }
                                            ],
                                            "content": ")\n\n\n@v1_router.get(\n\"/api-keys/{key_id}\",\nresponse_model=list[APIKeyWithoutHash]|dict[str,str"
                                        }
                                    ],
                                    "content": "str(e))\n\n\n@v1_router.get(\n\"/api-keys/{key_id}\",\nresponse_model=list[APIKeyWithoutHash]|dict[str,str"
                                }
                            ],
                            "content": "]\n)->list[APIKeyWithoutHash]:\n\"\"\"List all API keys for the user\"\"\"\ntry:\nreturn await list_user_api_keys(user_id)\nexcept APIKeyError as e:\nlogger.error(f \"Failed to list API keys: {str(e)}\")\nraise HTTPException(status_code=400,detail=str(e))\n\n\n@v1_router.get(\n\"/api-keys/{key_id}\",\nresponse_model=list[APIKeyWithoutHash]|dict[str,str"
                        }
                    ],
                    "content": ",Depends(get_user_id)]\n)->list[APIKeyWithoutHash]:\n\"\"\"List all API keys for the user\"\"\"\ntry:\nreturn await list_user_api_keys(user_id)\nexcept APIKeyError as e:\nlogger.error(f \"Failed to list API keys: {str(e)}\")\nraise HTTPException(status_code=400,detail=str(e))\n\n\n@v1_router.get(\n\"/api-keys/{key_id}\",\nresponse_model=list[APIKeyWithoutHash]|dict[str,str"
                }
            ],
            "content": "\nlogger.error(f \"Failed to create API key: {str(e)}\")\nraise HTTPException(status_code=400,detail=str(e))\n\n\n@v1_router.get(\n\"/api-keys\",\nresponse_model=list[APIKeyWithoutHash]|dict[str,str],\ntags=[\"api-keys\"],\ndependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_keys(\nuser_id:Annotated[str,Depends(get_user_id)]\n)->list[APIKeyWithoutHash]:\n\"\"\"List all API keys for the user\"\"\"\ntry:\nreturn await list_user_api_keys(user_id)\nexcept APIKeyError as e:\nlogger.error(f \"Failed to list API keys: {str(e)}\")\nraise HTTPException(status_code=400,detail=str(e))\n\n\n@v1_router.get(\n\"/api-keys/{key_id}\",\nresponse_model=list[APIKeyWithoutHash]|dict[str,str"
        }
    ],
    "content": "import asyncio\nimport logging\nfrom collections import defaultdict\nfrom typing import TYPE_CHECKING,Annotated,Any,Sequence\n\nimport pydantic\nfrom autogpt_libs.auth.middleware import auth_middleware\nfrom autogpt_libs.feature_flag.client import feature_flag\nfrom autogpt_libs.utils.cache import thread_cached\nfrom fastapi import APIRouter,Depends,HTTPException\nfrom typing_extensions import Optional,TypedDict\n\nimport backend.data.block\nimport backend.server.integrations.router\nimport backend.server.routers.analytics\nfrom backend.data import execution as execution_db\nfrom backend.data import graph as graph_db\nfrom backend.data.api_key import(\nAPIKeyError,\nAPIKeyNotFoundError,\nAPIKeyPermissionError,\nAPIKeyWithoutHash,\ngenerate_api_key,\nget_api_key_by_id,\nlist_user_api_keys,\nrevoke_api_key,\nsuspend_api_key,\nupdate_api_key_permissions,\n)\nfrom backend.data.block import BlockInput,CompletedBlockOutput\nfrom backend.data.credit import get_block_costs,get_user_credit_model\nfrom backend.data.user import get_or_create_user\nfrom backend.executor import ExecutionManager,ExecutionScheduler,scheduler\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.webhooks.graph_lifecycle_hooks import(\non_graph_activate,\non_graph_deactivate,\n)\nfrom backend.server.model import(\nCreateAPIKeyRequest,\nCreateAPIKeyResponse,\nCreateGraph,\nSetGraphActiveVersion,\nUpdatePermissionsRequest,\n)\nfrom backend.server.utils import get_user_id\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\n\nif TYPE_CHECKING:\nfrom backend.data.model import Credentials\n\n\n@thread_cached\ndef execution_manager_client()->ExecutionManager:\nreturn get_service_client(ExecutionManager)\n\n\n@thread_cached\ndef execution_scheduler_client()->ExecutionScheduler:\nreturn get_service_client(ExecutionScheduler)\n\n\nsettings=Settings()\nlogger=logging.getLogger(__name__)\nintegration_creds_manager=IntegrationCredentialsManager()\n\n\n_user_credit_model=get_user_credit_model()\n\n#Define the API routes\nv1_router=APIRouter()\n\nv1_router.include_router(\nbackend.server.integrations.router.router,\nprefix=\"/integrations\",\ntags=[\"integrations\"],\n)\n\nv1_router.include_router(\nbackend.server.routers.analytics.router,\nprefix=\"/analytics\",\ntags=[\"analytics\"],\ndependencies=[Depends(auth_middleware)],\n)\n\n\n########################################################\n#####################Auth#############################\n########################################################\n\n\n@v1_router.post(\"/auth/user\",tags=[\"auth\"],dependencies=[Depends(auth_middleware)])\nasync def get_or_create_user_route(user_data:dict=Depends(auth_middleware)):\nuser=await get_or_create_user(user_data)\nreturn user.model_dump()\n\n\n########################################################\n#####################Blocks###########################\n########################################################\n\n\n@v1_router.get(path=\"/blocks\",tags=[\"blocks\"],dependencies=[Depends(auth_middleware)])\ndef get_graph_blocks()->Sequence[dict[Any,Any]]:\nblocks=[block()for block in backend.data.block.get_blocks().values()]\ncosts=get_block_costs()\nreturn[{**b.to_dict(),\"costs\":costs.get(b.id,[])}for b in blocks]\n\n\n@v1_router.post(\npath=\"/blocks/{block_id}/execute\",\ntags=[\"blocks\"],\ndependencies=[Depends(auth_middleware)],\n)\ndef execute_graph_block(block_id:str,data:BlockInput)->CompletedBlockOutput:\nobj=backend.data.block.get_block(block_id)\nif not obj:\nraise HTTPException(status_code=404,detail=f \"Block #{block_id} not found.\")\n\noutput=defaultdict(list)\nfor name,data in obj.execute(data):\noutput[name].append(data)\nreturn output\n\n\n########################################################\n#####################Credits##########################\n########################################################\n\n\n@v1_router.get(path=\"/credits\",dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\nuser_id:Annotated[str,Depends(get_user_id)],\n)->dict[str,int]:\n#Credits can go negative,so ensure it 's at least 0 for user to see. \\n     return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)} \\n  \\n  \\n ######################################################## \\n ##################### Graphs ########################### \\n ######################################################## \\n  \\n  \\n class DeleteGraphResponse(TypedDict): \\n     version_counts: int \\n  \\n  \\n @v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]) \\n async def get_graphs( \\n     user_id: Annotated[str, Depends(get_user_id)] \\n ) -> Sequence[graph_db.GraphModel]: \\n     return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id) \\n  \\n  \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)] \\n ) \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}/versions/{version}\", \\n     tags=[\"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n async def get_graph( \\n     graph_id: str, \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     version: int | None = None, \\n     hide_credentials: bool = False, \\n ) -> graph_db.GraphModel: \\n     graph = await graph_db.get_graph( \\n         graph_id, version, user_id=user_id, for_export=hide_credentials \\n     ) \\n     if not graph: \\n         raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\") \\n     return graph \\n  \\n  \\n @v1_router.get( \\n     path=\"/graphs/{graph_id}/versions\", \\n     tags=[\"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n @v1_router.get( \\n     path=\"/templates/{graph_id}/versions\", \\n     tags=[\"templates\", \"graphs\"], \\n     dependencies=[Depends(auth_middleware)], \\n ) \\n async def get_graph_all_versions( \\n     graph_id: str, user_id: Annotated[str, Depends(get_user_id)] \\n ) -> Sequence[graph_db.GraphModel]: \\n     graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id) \\n     if not graphs: \\n         raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\") \\n     return graphs \\n  \\n  \\n @v1_router.post( \\n     path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)] \\n ) \\n async def create_new_graph( \\n     create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)] \\n ) -> graph_db.GraphModel: \\n     return await do_create_graph(create_graph, is_template=False, user_id=user_id) \\n  \\n  \\n async def do_create_graph( \\n     create_graph: CreateGraph, \\n     is_template: bool, \\n     # user_id doesn' t have to be annotated like on other endpoints,\n#because create_graph isn't used directly as an endpoint\nuser_id:str,\n)->graph_db.GraphModel:\nif create_graph.graph:\ngraph=graph_db.make_graph_model(create_graph.graph,user_id)\nelif create_graph.template_id:\n#Create a new graph from a template\ngraph=await graph_db.get_graph(\ncreate_graph.template_id,\ncreate_graph.template_version,\ntemplate=True,\nuser_id=user_id,\n)\nif not graph:\nraise HTTPException(\n400,detail=f \"Template #{create_graph.template_id} not found\"\n)\ngraph.version=1\nelse:\nraise HTTPException(\nstatus_code=400,detail=\"Either graph or template_id must be provided.\"\n)\n\ngraph.is_template=is_template\ngraph.is_active=not is_template\ngraph.reassign_ids(user_id=user_id,reassign_graph_id=True)\n\ngraph=await graph_db.create_graph(graph,user_id=user_id)\ngraph=await on_graph_activate(\ngraph,\nget_credentials=lambda id:integration_creds_manager.get(user_id,id),\n)\nreturn graph\n\n\n@v1_router.delete(\npath=\"/graphs/{graph_id}\",tags=[\"graphs\"],dependencies=[Depends(auth_middleware)]\n)\nasync def delete_graph(\ngraph_id:str,user_id:Annotated[str,Depends(get_user_id)]\n)->DeleteGraphResponse:\nif active_version:=await graph_db.get_graph(graph_id,user_id=user_id):\n\ndef get_credentials(credentials_id:str)->\"Credentials | None\":\nreturn integration_creds_manager.get(user_id,credentials_id)\n\nawait on_graph_deactivate(active_version,get_credentials)\n\nreturn{\"version_counts\":await graph_db.delete_graph(graph_id,user_id=user_id)}\n\n\n@v1_router.put(\npath=\"/graphs/{graph_id}\",tags=[\"graphs\"],dependencies=[Depends(auth_middleware)]\n)\n@v1_router.put(\npath=\"/templates/{graph_id}\",\ntags=[\"templates\",\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def update_graph(\ngraph_id:str,\ngraph:graph_db.Graph,\nuser_id:Annotated[str,Depends(get_user_id)],\n)->graph_db.GraphModel:\n#Sanity check\nif graph.id and graph.id!=graph_id:\nraise HTTPException(400,detail=\"Graph ID does not match ID in URI\")\n\n#Determine new version\nexisting_versions=await graph_db.get_graph_all_versions(graph_id,user_id=user_id)\nif not existing_versions:\nraise HTTPException(404,detail=f \"Graph #{graph_id} not found\")\nlatest_version_number=max(g.version for g in existing_versions)\ngraph.version=latest_version_number+1\n\nlatest_version_graph=next(\nv for v in existing_versions if v.version==latest_version_number\n)\ncurrent_active_version=next((v for v in existing_versions if v.is_active),None)\nif latest_version_graph.is_template!=graph.is_template:\nraise HTTPException(\n400,detail=\"Changing is_template on an existing graph is forbidden\"\n)\ngraph.is_active=not graph.is_template\ngraph=graph_db.make_graph_model(graph,user_id)\ngraph.reassign_ids(user_id=user_id)\n\nnew_graph_version=await graph_db.create_graph(graph,user_id=user_id)\n\nif new_graph_version.is_active:\n\ndef get_credentials(credentials_id:str)->\"Credentials | None\":\nreturn integration_creds_manager.get(user_id,credentials_id)\n\n#Handle activation of the new graph first to ensure continuity\nnew_graph_version=await on_graph_activate(\nnew_graph_version,\nget_credentials=get_credentials,\n)\n#Ensure new version is the only active version\nawait graph_db.set_graph_active_version(\ngraph_id=graph_id,version=new_graph_version.version,user_id=user_id\n)\nif current_active_version:\n#Handle deactivation of the previously active version\nawait on_graph_deactivate(\ncurrent_active_version,\nget_credentials=get_credentials,\n)\n\nreturn new_graph_version\n\n\n@v1_router.put(\npath=\"/graphs/{graph_id}/versions/active\",\ntags=[\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def set_graph_active_version(\ngraph_id:str,\nrequest_body:SetGraphActiveVersion,\nuser_id:Annotated[str,Depends(get_user_id)],\n):\nnew_active_version=request_body.active_graph_version\nnew_active_graph=await graph_db.get_graph(\ngraph_id,new_active_version,user_id=user_id\n)\nif not new_active_graph:\nraise HTTPException(404,f \"Graph #{graph_id} v{new_active_version} not found\")\n\ncurrent_active_graph=await graph_db.get_graph(graph_id,user_id=user_id)\n\ndef get_credentials(credentials_id:str)->\"Credentials | None\":\nreturn integration_creds_manager.get(user_id,credentials_id)\n\n#Handle activation of the new graph first to ensure continuity\nawait on_graph_activate(\nnew_active_graph,\nget_credentials=get_credentials,\n)\n#Ensure new version is the only active version\nawait graph_db.set_graph_active_version(\ngraph_id=graph_id,\nversion=new_active_version,\nuser_id=user_id,\n)\nif current_active_graph and current_active_graph.version!=new_active_version:\n#Handle deactivation of the previously active version\nawait on_graph_deactivate(\ncurrent_active_graph,\nget_credentials=get_credentials,\n)\n\n\n@v1_router.post(\npath=\"/graphs/{graph_id}/execute\",\ntags=[\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\ndef execute_graph(\ngraph_id:str,\nnode_input:dict[Any,Any],\nuser_id:Annotated[str,Depends(get_user_id)],\n)->dict[str,Any]:#FIXME:add proper return type\ntry:\ngraph_exec=execution_manager_client().add_execution(\ngraph_id,node_input,user_id=user_id\n)\nreturn{\"id\":graph_exec.graph_exec_id}\nexcept Exception as e:\nmsg=e.__str__().encode().decode(\"unicode_escape\")\nraise HTTPException(status_code=400,detail=msg)\n\n\n@v1_router.post(\npath=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\ntags=[\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def stop_graph_run(\ngraph_exec_id:str,user_id:Annotated[str,Depends(get_user_id)]\n)->Sequence[execution_db.ExecutionResult]:\nif not await graph_db.get_execution(user_id=user_id,execution_id=graph_exec_id):\nraise HTTPException(404,detail=f \"Agent execution #{graph_exec_id} not found\")\n\nawait asyncio.to_thread(\nlambda:execution_manager_client().cancel_execution(graph_exec_id)\n)\n\n#Retrieve&return canceled graph execution in its final state\nreturn await execution_db.get_execution_results(graph_exec_id)\n\n\n@v1_router.get(\npath=\"/executions\",\ntags=[\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def get_executions(\nuser_id:Annotated[str,Depends(get_user_id)],\n)->list[graph_db.GraphExecution]:\nreturn await graph_db.get_executions(user_id=user_id)\n\n\n@v1_router.get(\npath=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\ntags=[\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_run_node_execution_results(\ngraph_id:str,\ngraph_exec_id:str,\nuser_id:Annotated[str,Depends(get_user_id)],\n)->Sequence[execution_db.ExecutionResult]:\ngraph=await graph_db.get_graph(graph_id,user_id=user_id)\nif not graph:\nraise HTTPException(status_code=404,detail=f \"Graph #{graph_id} not found.\")\n\nreturn await execution_db.get_execution_results(graph_exec_id)\n\n\n########################################################\n#####################Templates########################\n########################################################\n\n\n@v1_router.get(\npath=\"/templates\",\ntags=[\"graphs\",\"templates\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def get_templates(\nuser_id:Annotated[str,Depends(get_user_id)]\n)->Sequence[graph_db.GraphModel]:\nreturn await graph_db.get_graphs(filter_by=\"template\",user_id=user_id)\n\n\n@v1_router.get(\npath=\"/templates/{graph_id}\",\ntags=[\"templates\",\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def get_template(\ngraph_id:str,version:int|None=None\n)->graph_db.GraphModel:\ngraph=await graph_db.get_graph(graph_id,version,template=True)\nif not graph:\nraise HTTPException(status_code=404,detail=f \"Template #{graph_id} not found.\")\nreturn graph\n\n\n@v1_router.post(\npath=\"/templates\",\ntags=[\"templates\",\"graphs\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def create_new_template(\ncreate_graph:CreateGraph,user_id:Annotated[str,Depends(get_user_id)]\n)->graph_db.GraphModel:\nreturn await do_create_graph(create_graph,is_template=True,user_id=user_id)\n\n\n########################################################\n#####################Schedules########################\n########################################################\n\n\nclass ScheduleCreationRequest(pydantic.BaseModel):\ncron:str\ninput_data:dict[Any,Any]\ngraph_id:str\n\n\n@v1_router.post(\npath=\"/schedules\",\ntags=[\"schedules\"],\ndependencies=[Depends(auth_middleware)],\n)\nasync def create_schedule(\nuser_id:Annotated[str,Depends(get_user_id)],\nschedule:ScheduleCreationRequest,\n)->scheduler.JobInfo:\ngraph=await graph_db.get_graph(schedule.graph_id,user_id=user_id)\nif not graph:\nraise HTTPException(\nstatus_code=404,detail=f \"Graph #{schedule.graph_id} not found.\"\n)\n\nreturn await asyncio.to_thread(\nlambda:execution_scheduler_client().add_execution_schedule(\ngraph_id=schedule.graph_id,\ngraph_version=graph.version,\ncron=schedule.cron,\ninput_data=schedule.input_data,\nuser_id=user_id,\n)\n)\n\n\n@v1_router.delete(\npath=\"/schedules/{schedule_id}\",\ntags=[\"schedules\"],\ndependencies=[Depends(auth_middleware)],\n)\ndef delete_schedule(\nschedule_id:str,\nuser_id:Annotated[str,Depends(get_user_id)],\n)->dict[Any,Any]:\nexecution_scheduler_client().delete_schedule(schedule_id,user_id=user_id)\nreturn{\"id\":schedule_id}\n\n\n@v1_router.get(\npath=\"/schedules\",\ntags=[\"schedules\"],\ndependencies=[Depends(auth_middleware)],\n)\ndef get_execution_schedules(\nuser_id:Annotated[str,Depends(get_user_id)],\ngraph_id:str|None=None,\n)->list[scheduler.JobInfo]:\nreturn execution_scheduler_client().get_execution_schedules(\nuser_id=user_id,\ngraph_id=graph_id,\n)\n\n\n########################################################\n#####################API KEY##############################\n########################################################\n\n\n@v1_router.post(\n\"/api-keys\",\nresponse_model=list[CreateAPIKeyResponse]|dict[str,str],\ntags=[\"api-keys\"],\ndependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def create_api_key(\nrequest:CreateAPIKeyRequest,user_id:Annotated[str,Depends(get_user_id)]\n)->CreateAPIKeyResponse:\n\"\"\"Create a new API key\"\"\"\ntry:\napi_key,plain_text=await generate_api_key(\nname=request.name,\nuser_id=user_id,\npermissions=request.permissions,\ndescription=request.description,\n)\nreturn CreateAPIKeyResponse(api_key=api_key,plain_text_key=plain_text)\nexcept APIKeyError as e:\nlogger.error(f \"Failed to create API key: {str(e)}\")\nraise HTTPException(status_code=400,detail=str(e))\n\n\n@v1_router.get(\n\"/api-keys\",\nresponse_model=list[APIKeyWithoutHash]|dict[str,str],\ntags=[\"api-keys\"],\ndependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_keys(\nuser_id:Annotated[str,Depends(get_user_id)]\n)->list[APIKeyWithoutHash]:\n\"\"\"List all API keys for the user\"\"\"\ntry:\nreturn await list_user_api_keys(user_id)\nexcept APIKeyError as e:\nlogger.error(f \"Failed to list API keys: {str(e)}\")\nraise HTTPException(status_code=400,detail=str(e))\n\n\n@v1_router.get(\n\"/api-keys/{key_id}\",\nresponse_model=list[APIKeyWithoutHash]|dict[str,str"
}