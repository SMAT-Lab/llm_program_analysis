{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        460
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                1,
                1
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "",
                    "range": [
                        1,
                        1
                    ],
                    "value": " \\n  \\n The nqueens problem is of placing N queens on a N * N \\n chess board such that no queen can attack any other queens placed \\n on that chess board. \\n This means that one queen cannot have any other queen on its horizontal, vertical and \\n diagonal lines. \\n  \\n ",
                    "children": [],
                    "content": "\" \\n  \\n The nqueens problem is of placing N queens on a N * N \\n chess board such that no queen can attack any other queens placed \\n on that chess board. \\n This means that one queen cannot have any other queen on its horizontal, vertical and \\n diagonal lines. \\n  \\n \""
                }
            ],
            "content": "\" \\n  \\n The nqueens problem is of placing N queens on a N * N \\n chess board such that no queen can attack any other queens placed \\n on that chess board. \\n This means that one queen cannot have any other queen on its horizontal, vertical and \\n diagonal lines. \\n  \\n \""
        },
        {
            "type": "ImportDeclaration",
            "name": "annotations",
            "range": [
                4,
                8
            ],
            "children": [
                {
                    "type": "ModuleSpecifier",
                    "name": "__future__",
                    "range": [
                        5,
                        5
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "annotations",
                    "range": [
                        7,
                        7
                    ],
                    "children": [],
                    "content": "import"
                }
            ],
            "content": "\nfrom __future__ import annotations"
        },
        {
            "type": "VariableDeclaration",
            "name": "solution",
            "range": [
                9,
                12
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        10,
                        11
                    ],
                    "children": [],
                    "content": "\nsolution"
                },
                {
                    "type": "ArrayExpression",
                    "name": "[]",
                    "range": [
                        11,
                        12
                    ],
                    "children": [],
                    "content": "solution="
                }
            ],
            "content": "\n\nsolution="
        },
        {
            "type": "FunctionDecl",
            "name": "is_safe",
            "range": [
                15,
                250
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        17,
                        35
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "board",
                            "range": [
                                18,
                                26
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "list[list[int]]",
                                    "range": [
                                        20,
                                        26
                                    ],
                                    "children": [],
                                    "content": "(board:list[list["
                                }
                            ],
                            "content": "def is_safe(board:list[list["
                        },
                        {
                            "type": "Parameter",
                            "name": "row",
                            "range": [
                                28,
                                30
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        29,
                                        30
                                    ],
                                    "children": [],
                                    "content": "],"
                                }
                            ],
                            "content": "]],"
                        },
                        {
                            "type": "Parameter",
                            "name": "column",
                            "range": [
                                32,
                                34
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        33,
                                        34
                                    ],
                                    "children": [],
                                    "content": "int,"
                                }
                            ],
                            "content": ":int,"
                        }
                    ],
                    "content": "\ndef is_safe(board:list[list[int]],row:int,column"
                },
                {
                    "type": "ReturnType",
                    "name": "bool",
                    "range": [
                        36,
                        38
                    ],
                    "children": [],
                    "content": ":int)"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        39,
                        250
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                41,
                                43
                            ],
                            "children": [],
                            "content": "bool:\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "n = len(board)",
                            "range": [
                                46,
                                57
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "n",
                                    "range": [
                                        46,
                                        47
                                    ],
                                    "children": [],
                                    "content": "\"\"\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "len",
                                    "range": [
                                        48,
                                        51
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "board",
                                            "range": [
                                                50,
                                                51
                                            ],
                                            "children": [],
                                            "content": "=len"
                                        }
                                    ],
                                    "content": "\nn=len"
                                }
                            ],
                            "content": "\"\"\n\nn=len(board)#Size of"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                84,
                                248
                            ],
                            "children": [
                                {
                                    "type": "LogicalExpression",
                                    "name": "and",
                                    "range": [
                                        85,
                                        248
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "all",
                                            "range": [
                                                87,
                                                124
                                            ],
                                            "children": [
                                                {
                                                    "type": "GeneratorExpression",
                                                    "name": "board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n))",
                                                    "range": [
                                                        89,
                                                        123
                                                    ],
                                                    "children": [],
                                                    "content": "\nall(board[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,"
                                                }
                                            ],
                                            "content": "return(\nall(board[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,n"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "all",
                                            "range": [
                                                127,
                                                170
                                            ],
                                            "children": [
                                                {
                                                    "type": "GeneratorExpression",
                                                    "name": "board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))",
                                                    "range": [
                                                        129,
                                                        169
                                                    ],
                                                    "children": [],
                                                    "content": "and all(\nboard[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,-1,-1"
                                                }
                                            ],
                                            "content": ")\nand all(\nboard[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,-1,-1)"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "all",
                                            "range": [
                                                173,
                                                206
                                            ],
                                            "children": [
                                                {
                                                    "type": "GeneratorExpression",
                                                    "name": "board[i][j] != 1 for i, j in zip(range(row, n), range(column, n))",
                                                    "range": [
                                                        175,
                                                        205
                                                    ],
                                                    "children": [],
                                                    "content": "and all(board[i][j]!=1for i,j in zip(range(row,n),range(column,"
                                                }
                                            ],
                                            "content": ")\nand all(board[i][j]!=1for i,j in zip(range(row,n),range(column,n"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "all",
                                            "range": [
                                                209,
                                                246
                                            ],
                                            "children": [
                                                {
                                                    "type": "GeneratorExpression",
                                                    "name": "board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1))",
                                                    "range": [
                                                        211,
                                                        245
                                                    ],
                                                    "children": [],
                                                    "content": "and all(board[i][j]!=1for i,j in zip(range(row,n),range(column,-1,-"
                                                }
                                            ],
                                            "content": ")\nand all(board[i][j]!=1for i,j in zip(range(row,n),range(column,-1,-1"
                                        }
                                    ],
                                    "content": "diagonal\nreturn(\nall(board[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,n)))\nand all(\nboard[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,-1,-1))\n)\nand all(board[i][j]!=1for i,j in zip(range(row,n),range(column,n)))\nand all(board[i][j]!=1for i,j in zip(range(row,n),range(column,-1,-1))"
                                }
                            ],
                            "content": "upper diagonal\nreturn(\nall(board[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,n)))\nand all(\nboard[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,-1,-1))\n)\nand all(board[i][j]!=1for i,j in zip(range(row,n),range(column,n)))\nand all(board[i][j]!=1for i,j in zip(range(row,n),range(column,-1,-1))"
                        }
                    ],
                    "content": "->bool:\n\"\"\" \\n     This function returns a boolean value True if it is safe to place a queen there \\n     considering the current state of the board. \\n  \\n     Parameters: \\n     board (2D matrix): The chessboard \\n     row, column: Coordinates of the cell on the board \\n  \\n     Returns: \\n     Boolean Value \\n  \\n     >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1) \\n     True \\n     >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1) \\n     False \\n     \"\"\"\n\nn=len(board)#Size of the board\n\n#Check if there is any queen in the same row,column,\n#left upper diagonal,and right upper diagonal\nreturn(\nall(board[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,n)))\nand all(\nboard[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,-1,-1))\n)\nand all(board[i][j]!=1for i,j in zip(range(row,n),range(column,n)))\nand all(board[i][j]!=1for i,j in zip(range(row,n),range(column,-1,-1)))\n"
                }
            ],
            "content": "\n\n\ndef is_safe(board:list[list[int]],row:int,column:int)->bool:\n\"\"\" \\n     This function returns a boolean value True if it is safe to place a queen there \\n     considering the current state of the board. \\n  \\n     Parameters: \\n     board (2D matrix): The chessboard \\n     row, column: Coordinates of the cell on the board \\n  \\n     Returns: \\n     Boolean Value \\n  \\n     >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1) \\n     True \\n     >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1) \\n     False \\n     \"\"\"\n\nn=len(board)#Size of the board\n\n#Check if there is any queen in the same row,column,\n#left upper diagonal,and right upper diagonal\nreturn(\nall(board[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,n)))\nand all(\nboard[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,-1,-1))\n)\nand all(board[i][j]!=1for i,j in zip(range(row,n),range(column,n)))\nand all(board[i][j]!=1for i,j in zip(range(row,n),range(column,-1,-1)))\n"
        },
        {
            "type": "FunctionDecl",
            "name": "solve",
            "range": [
                251,
                368
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        253,
                        267
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "board",
                            "range": [
                                254,
                                262
                            ],
                            "children": [],
                            "content": "\ndef solve(board:list[list"
                        },
                        {
                            "type": "Parameter",
                            "name": "row",
                            "range": [
                                264,
                                266
                            ],
                            "children": [],
                            "content": "int]]"
                        }
                    ],
                    "content": "\n\ndef solve(board:list[list[int]],"
                },
                {
                    "type": "ReturnType",
                    "name": "returnType",
                    "range": [
                        268,
                        270
                    ],
                    "children": [],
                    "content": "row:int"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        271,
                        368
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                273,
                                275
                            ],
                            "children": [],
                            "content": ">bool:"
                        },
                        {
                            "type": "IfStatement",
                            "name": "ifStatement",
                            "range": [
                                277,
                                309
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        278,
                                        284
                                    ],
                                    "children": [],
                                    "content": "\" \\n     This function creates a state space tree and calls the safe function until it \\n     receives a False Boolean and terminates that branch and backtracks to the next \\n     possible solution branch. \\n     \"\"\"\nif row>="
                                },
                                {
                                    "type": "Docstring",
                                    "name": "docstring",
                                    "range": [
                                        287,
                                        289
                                    ],
                                    "children": [],
                                    "content": "board):"
                                },
                                {
                                    "type": "Block",
                                    "name": "consequent",
                                    "range": [
                                        290,
                                        309
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "expressionStatement",
                                            "range": [
                                                291,
                                                297
                                            ],
                                            "children": [],
                                            "content": "\"\"\" \\n         If the row number exceeds N, we have a board with a successful combination \\n         and that combination is appended to the solution list and the board is printed. \\n         \"\"\"\nsolution.append"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "expressionStatement",
                                            "range": [
                                                298,
                                                302
                                            ],
                                            "children": [],
                                            "content": "(board)\nprintboard"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "expressionStatement",
                                            "range": [
                                                303,
                                                306
                                            ],
                                            "children": [],
                                            "content": "(board)\n"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "returnStatement",
                                            "range": [
                                                307,
                                                309
                                            ],
                                            "children": [],
                                            "content": "print()"
                                        }
                                    ],
                                    "content": "\n\"\"\" \\n         If the row number exceeds N, we have a board with a successful combination \\n         and that combination is appended to the solution list and the board is printed. \\n         \"\"\"\nsolution.append(board)\nprintboard(board)\nprint()"
                                }
                            ],
                            "content": "\"\"\" \\n     This function creates a state space tree and calls the safe function until it \\n     receives a False Boolean and terminates that branch and backtracks to the next \\n     possible solution branch. \\n     \"\"\"\nif row>=len(board):\n\"\"\" \\n         If the row number exceeds N, we have a board with a successful combination \\n         and that combination is appended to the solution list and the board is printed. \\n         \"\"\"\nsolution.append(board)\nprintboard(board)\nprint()"
                        },
                        {
                            "type": "ForStatement",
                            "name": "forStatement",
                            "range": [
                                310,
                                365
                            ],
                            "children": [
                                {
                                    "type": "Initialization",
                                    "name": "initialization",
                                    "range": [
                                        311,
                                        319
                                    ],
                                    "children": [],
                                    "content": "return True\nfor i in range(len"
                                },
                                {
                                    "type": "Docstring",
                                    "name": "docstring",
                                    "range": [
                                        322,
                                        324
                                    ],
                                    "children": [],
                                    "content": ")):"
                                },
                                {
                                    "type": "Block",
                                    "name": "body",
                                    "range": [
                                        325,
                                        365
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "ifStatement",
                                            "range": [
                                                326,
                                                355
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "condition",
                                                    "range": [
                                                        327,
                                                        334
                                                    ],
                                                    "children": [],
                                                    "content": "\" \\n         For every row, it iterates through each column to check if it is feasible to \\n         place a queen there. \\n         If all the combinations for that particular branch are successful, the board is \\n         reinitialized for the next possible combination. \\n         \"\"\"\nif is_safe(board,"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "consequent",
                                                    "range": [
                                                        335,
                                                        355
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "expressionStatement",
                                                            "range": [
                                                                337,
                                                                346
                                                            ],
                                                            "children": [],
                                                            "content": "i):\nboard[row][i"
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "expressionStatement",
                                                            "range": [
                                                                347,
                                                                354
                                                            ],
                                                            "children": [],
                                                            "content": "]=1\nsolve(board,"
                                                        }
                                                    ],
                                                    "content": "row,i):\nboard[row][i]=1\nsolve(board,row"
                                                }
                                            ],
                                            "content": "\"\"\" \\n         For every row, it iterates through each column to check if it is feasible to \\n         place a queen there. \\n         If all the combinations for that particular branch are successful, the board is \\n         reinitialized for the next possible combination. \\n         \"\"\"\nif is_safe(board,row,i):\nboard[row][i]=1\nsolve(board,row"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "expressionStatement",
                                            "range": [
                                                356,
                                                365
                                            ],
                                            "children": [],
                                            "content": "+1)\nboard[row][i"
                                        }
                                    ],
                                    "content": "\n\"\"\" \\n         For every row, it iterates through each column to check if it is feasible to \\n         place a queen there. \\n         If all the combinations for that particular branch are successful, the board is \\n         reinitialized for the next possible combination. \\n         \"\"\"\nif is_safe(board,row,i):\nboard[row][i]=1\nsolve(board,row+1)\nboard[row][i"
                                }
                            ],
                            "content": "\nreturn True\nfor i in range(len(board)):\n\"\"\" \\n         For every row, it iterates through each column to check if it is feasible to \\n         place a queen there. \\n         If all the combinations for that particular branch are successful, the board is \\n         reinitialized for the next possible combination. \\n         \"\"\"\nif is_safe(board,row,i):\nboard[row][i]=1\nsolve(board,row+1)\nboard[row][i"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "returnStatement",
                            "range": [
                                366,
                                368
                            ],
                            "children": [],
                            "content": "]=0"
                        }
                    ],
                    "content": ")->bool:\n\"\"\" \\n     This function creates a state space tree and calls the safe function until it \\n     receives a False Boolean and terminates that branch and backtracks to the next \\n     possible solution branch. \\n     \"\"\"\nif row>=len(board):\n\"\"\" \\n         If the row number exceeds N, we have a board with a successful combination \\n         and that combination is appended to the solution list and the board is printed. \\n         \"\"\"\nsolution.append(board)\nprintboard(board)\nprint()\nreturn True\nfor i in range(len(board)):\n\"\"\" \\n         For every row, it iterates through each column to check if it is feasible to \\n         place a queen there. \\n         If all the combinations for that particular branch are successful, the board is \\n         reinitialized for the next possible combination. \\n         \"\"\"\nif is_safe(board,row,i):\nboard[row][i]=1\nsolve(board,row+1)\nboard[row][i]=0"
                }
            ],
            "content": ")\n\n\ndef solve(board:list[list[int]],row:int)->bool:\n\"\"\" \\n     This function creates a state space tree and calls the safe function until it \\n     receives a False Boolean and terminates that branch and backtracks to the next \\n     possible solution branch. \\n     \"\"\"\nif row>=len(board):\n\"\"\" \\n         If the row number exceeds N, we have a board with a successful combination \\n         and that combination is appended to the solution list and the board is printed. \\n         \"\"\"\nsolution.append(board)\nprintboard(board)\nprint()\nreturn True\nfor i in range(len(board)):\n\"\"\" \\n         For every row, it iterates through each column to check if it is feasible to \\n         place a queen there. \\n         If all the combinations for that particular branch are successful, the board is \\n         reinitialized for the next possible combination. \\n         \"\"\"\nif is_safe(board,row,i):\nboard[row][i]=1\nsolve(board,row+1)\nboard[row][i]=0"
        },
        {
            "type": "FunctionDecl",
            "name": "printboard",
            "range": [
                369,
                460
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "board",
                    "range": [
                        372,
                        380
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "list[list[int]]",
                            "range": [
                                374,
                                380
                            ],
                            "children": [],
                            "content": "\ndef printboard(board:list"
                        }
                    ],
                    "content": "\n\n\ndef printboard(board:list"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        384,
                        384
                    ],
                    "children": [],
                    "content": "int"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        386,
                        460
                    ],
                    "children": [
                        {
                            "type": "ForStatement",
                            "name": "",
                            "range": [
                                391,
                                459
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclaration",
                                    "name": "i",
                                    "range": [
                                        392,
                                        392
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "range",
                                    "range": [
                                        394,
                                        400
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "len",
                                            "range": [
                                                396,
                                                399
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "board",
                                                    "range": [
                                                        398,
                                                        398
                                                    ],
                                                    "children": [],
                                                    "content": "i"
                                                }
                                            ],
                                            "content": "\nfor i in"
                                        }
                                    ],
                                    "content": "\" \\n     Prints the boards that have a successful combination. \\n     \"\"\"\nfor i in range"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        402,
                                        459
                                    ],
                                    "children": [
                                        {
                                            "type": "ForStatement",
                                            "name": "",
                                            "range": [
                                                403,
                                                458
                                            ],
                                            "children": [
                                                {
                                                    "type": "VariableDeclaration",
                                                    "name": "j",
                                                    "range": [
                                                        404,
                                                        404
                                                    ],
                                                    "children": [],
                                                    "content": "board"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "range",
                                                    "range": [
                                                        406,
                                                        412
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "len",
                                                            "range": [
                                                                408,
                                                                411
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "board",
                                                                    "range": [
                                                                        410,
                                                                        410
                                                                    ],
                                                                    "children": [],
                                                                    "content": "j"
                                                                }
                                                            ],
                                                            "content": "\nfor j in"
                                                        }
                                                    ],
                                                    "content": "):\nfor j in range"
                                                },
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "",
                                                    "range": [
                                                        414,
                                                        458
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "IfStatement",
                                                            "name": "",
                                                            "range": [
                                                                415,
                                                                455
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "BinaryExpression",
                                                                    "name": "==",
                                                                    "range": [
                                                                        416,
                                                                        425
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "name": "board[i][j]",
                                                                            "range": [
                                                                                416,
                                                                                422
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "board",
                                                                                    "range": [
                                                                                        416,
                                                                                        416
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "board"
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "i",
                                                                                    "range": [
                                                                                        418,
                                                                                        418
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": ")"
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "j",
                                                                                    "range": [
                                                                                        421,
                                                                                        421
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "if"
                                                                                }
                                                                            ],
                                                                            "content": "board)):\nif board"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "1",
                                                                            "range": [
                                                                                425,
                                                                                425
                                                                            ],
                                                                            "children": [],
                                                                            "content": "]"
                                                                        }
                                                                    ],
                                                                    "content": "board)):\nif board[i]"
                                                                },
                                                                {
                                                                    "type": "BlockStatement",
                                                                    "name": "",
                                                                    "range": [
                                                                        427,
                                                                        440
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "name": "",
                                                                            "range": [
                                                                                428,
                                                                                435
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "CallExpression",
                                                                                    "name": "print",
                                                                                    "range": [
                                                                                        428,
                                                                                        435
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Literal",
                                                                                            "name": "\"Q\"",
                                                                                            "range": [
                                                                                                430,
                                                                                                430
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "="
                                                                                        },
                                                                                        {
                                                                                            "type": "AssignmentExpression",
                                                                                            "name": "end=\" \"",
                                                                                            "range": [
                                                                                                432,
                                                                                                434
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "end",
                                                                                                    "range": [
                                                                                                        432,
                                                                                                        432
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": ":"
                                                                                                },
                                                                                                {
                                                                                                    "type": "Literal",
                                                                                                    "name": "\" \"",
                                                                                                    "range": [
                                                                                                        434,
                                                                                                        434
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": "print"
                                                                                                }
                                                                                            ],
                                                                                            "content": ":\nprint"
                                                                                        }
                                                                                    ],
                                                                                    "content": "]==1:\nprint("
                                                                                }
                                                                            ],
                                                                            "content": "]==1:\nprint("
                                                                        }
                                                                    ],
                                                                    "content": "j]==1:\nprint(\"Q\",end=\" \""
                                                                },
                                                                {
                                                                    "type": "ElseStatement",
                                                                    "name": "",
                                                                    "range": [
                                                                        441,
                                                                        455
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "BlockStatement",
                                                                            "name": "",
                                                                            "range": [
                                                                                443,
                                                                                455
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        444,
                                                                                        451
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "CallExpression",
                                                                                            "name": "print",
                                                                                            "range": [
                                                                                                444,
                                                                                                451
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Literal",
                                                                                                    "name": "\".\"",
                                                                                                    "range": [
                                                                                                        446,
                                                                                                        446
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": "\n"
                                                                                                },
                                                                                                {
                                                                                                    "type": "AssignmentExpression",
                                                                                                    "name": "end=\" \"",
                                                                                                    "range": [
                                                                                                        448,
                                                                                                        450
                                                                                                    ],
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "end",
                                                                                                            "range": [
                                                                                                                448,
                                                                                                                448
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": ":"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Literal",
                                                                                                            "name": "\" \"",
                                                                                                            "range": [
                                                                                                                450,
                                                                                                                450
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": "print"
                                                                                                        }
                                                                                                    ],
                                                                                                    "content": ":\nprint"
                                                                                                }
                                                                                            ],
                                                                                            "content": "is present\nelse:\nprint("
                                                                                        }
                                                                                    ],
                                                                                    "content": "is present\nelse:\nprint("
                                                                                }
                                                                            ],
                                                                            "content": "Queen is present\nelse:\nprint(\".\",end="
                                                                        }
                                                                    ],
                                                                    "content": ")#Queen is present\nelse:\nprint(\".\",end="
                                                                }
                                                            ],
                                                            "content": "(board)):\nif board[i][j]==1:\nprint(\"Q\",end=\" \")#Queen is present\nelse:\nprint(\".\",end="
                                                        }
                                                    ],
                                                    "content": "len(board)):\nif board[i][j]==1:\nprint(\"Q\",end=\" \")#Queen is present\nelse:\nprint(\".\",end=\" \")#"
                                                }
                                            ],
                                            "content": "(board)):\nfor j in range(len(board)):\nif board[i][j]==1:\nprint(\"Q\",end=\" \")#Queen is present\nelse:\nprint(\".\",end=\" \")#"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                456,
                                                459
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "print",
                                                    "range": [
                                                        456,
                                                        459
                                                    ],
                                                    "children": [],
                                                    "content": "\" \")#Empty"
                                                }
                                            ],
                                            "content": "\" \")#Empty"
                                        }
                                    ],
                                    "content": "len(board)):\nfor j in range(len(board)):\nif board[i][j]==1:\nprint(\"Q\",end=\" \")#Queen is present\nelse:\nprint(\".\",end=\" \")#Empty"
                                }
                            ],
                            "content": ":\n\"\"\" \\n     Prints the boards that have a successful combination. \\n     \"\"\"\nfor i in range(len(board)):\nfor j in range(len(board)):\nif board[i][j]==1:\nprint(\"Q\",end=\" \")#Queen is present\nelse:\nprint(\".\",end=\" \")#Empty"
                        }
                    ],
                    "content": "])->None:\n\"\"\" \\n     Prints the boards that have a successful combination. \\n     \"\"\"\nfor i in range(len(board)):\nfor j in range(len(board)):\nif board[i][j]==1:\nprint(\"Q\",end=\" \")#Queen is present\nelse:\nprint(\".\",end=\" \")#Empty cell"
                }
            ],
            "content": "\nreturn False\n\n\ndef printboard(board:list[list[int]])->None:\n\"\"\" \\n     Prints the boards that have a successful combination. \\n     \"\"\"\nfor i in range(len(board)):\nfor j in range(len(board)):\nif board[i][j]==1:\nprint(\"Q\",end=\" \")#Queen is present\nelse:\nprint(\".\",end=\" \")#Empty cell"
        }
    ],
    "content": "\"\"\" \\n  \\n The nqueens problem is of placing N queens on a N * N \\n chess board such that no queen can attack any other queens placed \\n on that chess board. \\n This means that one queen cannot have any other queen on its horizontal, vertical and \\n diagonal lines. \\n  \\n \"\"\"\n\nfrom __future__ import annotations\n\nsolution=[]\n\n\ndef is_safe(board:list[list[int]],row:int,column:int)->bool:\n\"\"\" \\n     This function returns a boolean value True if it is safe to place a queen there \\n     considering the current state of the board. \\n  \\n     Parameters: \\n     board (2D matrix): The chessboard \\n     row, column: Coordinates of the cell on the board \\n  \\n     Returns: \\n     Boolean Value \\n  \\n     >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1) \\n     True \\n     >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1) \\n     False \\n     \"\"\"\n\nn=len(board)#Size of the board\n\n#Check if there is any queen in the same row,column,\n#left upper diagonal,and right upper diagonal\nreturn(\nall(board[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,n)))\nand all(\nboard[i][j]!=1for i,j in zip(range(row,-1,-1),range(column,-1,-1))\n)\nand all(board[i][j]!=1for i,j in zip(range(row,n),range(column,n)))\nand all(board[i][j]!=1for i,j in zip(range(row,n),range(column,-1,-1)))\n)\n\n\ndef solve(board:list[list[int]],row:int)->bool:\n\"\"\" \\n     This function creates a state space tree and calls the safe function until it \\n     receives a False Boolean and terminates that branch and backtracks to the next \\n     possible solution branch. \\n     \"\"\"\nif row>=len(board):\n\"\"\" \\n         If the row number exceeds N, we have a board with a successful combination \\n         and that combination is appended to the solution list and the board is printed. \\n         \"\"\"\nsolution.append(board)\nprintboard(board)\nprint()\nreturn True\nfor i in range(len(board)):\n\"\"\" \\n         For every row, it iterates through each column to check if it is feasible to \\n         place a queen there. \\n         If all the combinations for that particular branch are successful, the board is \\n         reinitialized for the next possible combination. \\n         \"\"\"\nif is_safe(board,row,i):\nboard[row][i]=1\nsolve(board,row+1)\nboard[row][i]=0\nreturn False\n\n\ndef printboard(board:list[list[int]])->None:\n\"\"\" \\n     Prints the boards that have a successful combination. \\n     \"\"\"\nfor i in range(len(board)):\nfor j in range(len(board)):\nif board[i][j]==1:\nprint(\"Q\",end=\" \")#Queen is present\nelse:\nprint(\".\",end=\" \")#Empty cell"
}