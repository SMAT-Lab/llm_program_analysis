{
    "type": "Program",
    "name": "Global",
    "range": [
        36,
        548
    ],
    "children": [
        {
            "type": "ClassDecl",
            "name": "FilterType",
            "range": [
                36,
                42
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "Protocol",
                    "range": [
                        38,
                        40
                    ],
                    "children": [],
                    "content": "(Protocol)"
                }
            ],
            "content": "class FilterType(Protocol):\n"
        },
        {
            "type": "FunctionDecl",
            "name": "process",
            "range": [
                46,
                65
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        49,
                        49
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "Parameter",
                    "name": "sample",
                    "range": [
                        51,
                        53
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "float",
                            "range": [
                                53,
                                53
                            ],
                            "children": [],
                            "content": "float"
                        }
                    ],
                    "content": "sample:float"
                },
                {
                    "type": "ReturnType",
                    "name": "float",
                    "range": [
                        57,
                        57
                    ],
                    "children": [],
                    "content": "float"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        60,
                        62
                    ],
                    "children": [],
                    "content": "\"\"\" \\n         Calculate y[n] \\n  \\n         >>> issubclass(FilterType, Protocol) \\n         True \\n         \"\"\""
                }
            ],
            "content": "def process(self,sample:float)->float:\n\"\"\" \\n         Calculate y[n] \\n  \\n         >>> issubclass(FilterType, Protocol) \\n         True \\n         \"\"\"\n\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_bounds",
            "range": [
                66,
                157
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        68,
                        80
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "fft_results",
                            "range": [
                                70,
                                74
                            ],
                            "children": [],
                            "content": "fft_results:np.ndarray"
                        },
                        {
                            "type": "Parameter",
                            "name": "samplerate",
                            "range": [
                                76,
                                78
                            ],
                            "children": [],
                            "content": "samplerate:int"
                        }
                    ],
                    "content": "(\nfft_results:np.ndarray,samplerate:int\n)"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        81,
                        92
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "tuple",
                            "range": [
                                83,
                                92
                            ],
                            "children": [],
                            "content": "tuple[int|float,int|float]"
                        }
                    ],
                    "content": "->tuple[int|float,int|float]"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        95,
                        97
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Get bounds for printing fft results \\n  \\n     >>> import numpy \\n     >>> array = numpy.linspace(-20.0, 20.0, 1000) \\n     >>> get_bounds(array, 1000) \\n     (-20, 20) \\n     \"\"\""
                },
                {
                    "type": "Body",
                    "name": "body",
                    "range": [
                        99,
                        156
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "lowest",
                            "range": [
                                99,
                                124
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "min",
                                    "range": [
                                        101,
                                        124
                                    ],
                                    "children": [
                                        {
                                            "type": "List",
                                            "name": "list",
                                            "range": [
                                                103,
                                                123
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "-20",
                                                    "range": [
                                                        104,
                                                        105
                                                    ],
                                                    "children": [],
                                                    "content": "-20"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "np.min",
                                                    "range": [
                                                        107,
                                                        122
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "fft_results",
                                                            "range": [
                                                                111,
                                                                121
                                                            ],
                                                            "children": [],
                                                            "content": "fft_results[1:samplerate//2-1]"
                                                        }
                                                    ],
                                                    "content": "np.min(fft_results[1:samplerate//2-1])"
                                                }
                                            ],
                                            "content": "[-20,np.min(fft_results[1:samplerate//2-1])]"
                                        }
                                    ],
                                    "content": "min([-20,np.min(fft_results[1:samplerate//2-1])])"
                                }
                            ],
                            "content": "lowest=min([-20,np.min(fft_results[1:samplerate//2-1])])"
                        },
                        {
                            "type": "Assignment",
                            "name": "highest",
                            "range": [
                                126,
                                150
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "max",
                                    "range": [
                                        128,
                                        150
                                    ],
                                    "children": [
                                        {
                                            "type": "List",
                                            "name": "list",
                                            "range": [
                                                130,
                                                149
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "20",
                                                    "range": [
                                                        131,
                                                        132
                                                    ],
                                                    "children": [],
                                                    "content": "20,"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "np.max",
                                                    "range": [
                                                        133,
                                                        148
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "fft_results",
                                                            "range": [
                                                                137,
                                                                147
                                                            ],
                                                            "children": [],
                                                            "content": "fft_results[1:samplerate//2-1]"
                                                        }
                                                    ],
                                                    "content": "np.max(fft_results[1:samplerate//2-1])"
                                                }
                                            ],
                                            "content": "[20,np.max(fft_results[1:samplerate//2-1])]"
                                        }
                                    ],
                                    "content": "max([20,np.max(fft_results[1:samplerate//2-1])])"
                                }
                            ],
                            "content": "highest=max([20,np.max(fft_results[1:samplerate//2-1])])"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                152,
                                155
                            ],
                            "children": [
                                {
                                    "type": "Tuple",
                                    "name": "tuple",
                                    "range": [
                                        153,
                                        155
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "lowest",
                                            "range": [
                                                153,
                                                153
                                            ],
                                            "children": [],
                                            "content": "lowest"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "highest",
                                            "range": [
                                                155,
                                                155
                                            ],
                                            "children": [],
                                            "content": "highest"
                                        }
                                    ],
                                    "content": "lowest,highest"
                                }
                            ],
                            "content": "return lowest,highest"
                        }
                    ],
                    "content": "lowest=min([-20,np.min(fft_results[1:samplerate//2-1])])\nhighest=max([20,np.max(fft_results[1:samplerate//2-1])])\nreturn lowest,highest\n"
                }
            ],
            "content": "def get_bounds(\nfft_results:np.ndarray,samplerate:int\n)->tuple[int|float,int|float]:\n\"\"\" \\n     Get bounds for printing fft results \\n  \\n     >>> import numpy \\n     >>> array = numpy.linspace(-20.0, 20.0, 1000) \\n     >>> get_bounds(array, 1000) \\n     (-20, 20) \\n     \"\"\"\nlowest=min([-20,np.min(fft_results[1:samplerate//2-1])])\nhighest=max([20,np.max(fft_results[1:samplerate//2-1])])\nreturn lowest,highest\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "show_frequency_response",
            "range": [
                158,
                368
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        160,
                        168
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "filter_type",
                            "range": [
                                161,
                                163
                            ],
                            "children": [],
                            "content": "(filter_type:"
                        },
                        {
                            "type": "Parameter",
                            "name": "samplerate",
                            "range": [
                                165,
                                167
                            ],
                            "children": [],
                            "content": ",samplerate:"
                        }
                    ],
                    "content": "show_frequency_response(filter_type:FilterType,samplerate:int"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        169,
                        171
                    ],
                    "children": [],
                    "content": ")->"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        174,
                        176
                    ],
                    "children": [],
                    "content": "\n\"\"\" \\n     Show frequency response of a filter \\n  \\n     >>> from audio_filters.iir_filter import IIRFilter \\n     >>> filt = IIRFilter(4) \\n     >>> show_frequency_response(filt, 48000) \\n     \""
                },
                {
                    "type": "VariableDecl",
                    "name": "size",
                    "range": [
                        179,
                        181
                    ],
                    "children": [],
                    "content": "\nsize="
                },
                {
                    "type": "VariableDecl",
                    "name": "inputs",
                    "range": [
                        183,
                        197
                    ],
                    "children": [],
                    "content": "\ninputs=[1]+[0]*(size-1"
                },
                {
                    "type": "VariableDecl",
                    "name": "outputs",
                    "range": [
                        199,
                        212
                    ],
                    "children": [],
                    "content": "\noutputs=[filter_type.process(item)for item in inputs"
                },
                {
                    "type": "VariableDecl",
                    "name": "filler",
                    "range": [
                        215,
                        225
                    ],
                    "children": [],
                    "content": "\nfiller=[0]*(samplerate-size"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "outputs += filler",
                    "range": [
                        231,
                        234
                    ],
                    "children": [],
                    "content": "\noutputs+="
                },
                {
                    "type": "VariableDecl",
                    "name": "fft_out",
                    "range": [
                        236,
                        250
                    ],
                    "children": [],
                    "content": "\nfft_out=np.abs(np.fft.fft(outputs)"
                },
                {
                    "type": "VariableDecl",
                    "name": "fft_db",
                    "range": [
                        252,
                        261
                    ],
                    "children": [],
                    "content": "\nfft_db=20*np.log10(fft_out"
                },
                {
                    "type": "CallExpression",
                    "name": "plt.xlim",
                    "range": [
                        275,
                        286
                    ],
                    "children": [],
                    "content": "\nplt.xlim(24,samplerate/2-1"
                },
                {
                    "type": "CallExpression",
                    "name": "plt.xlabel",
                    "range": [
                        288,
                        293
                    ],
                    "children": [],
                    "content": "\nplt.xlabel(\"Frequency (Hz)\""
                },
                {
                    "type": "CallExpression",
                    "name": "plt.xscale",
                    "range": [
                        295,
                        300
                    ],
                    "children": [],
                    "content": "\nplt.xscale(\"log\""
                },
                {
                    "type": "VariableDecl",
                    "name": "bounds",
                    "range": [
                        309,
                        316
                    ],
                    "children": [],
                    "content": "\nbounds=get_bounds(fft_db,samplerate"
                },
                {
                    "type": "CallExpression",
                    "name": "plt.ylim",
                    "range": [
                        318,
                        346
                    ],
                    "children": [],
                    "content": "\nplt.ylim(max([-80,bounds[0]]),min([80,bounds[1]])"
                },
                {
                    "type": "CallExpression",
                    "name": "plt.ylabel",
                    "range": [
                        348,
                        353
                    ],
                    "children": [],
                    "content": "\nplt.ylabel(\"Gain (dB)\""
                },
                {
                    "type": "CallExpression",
                    "name": "plt.plot",
                    "range": [
                        356,
                        361
                    ],
                    "children": [],
                    "content": "\nplt.plot(fft_db"
                },
                {
                    "type": "CallExpression",
                    "name": "plt.show",
                    "range": [
                        363,
                        367
                    ],
                    "children": [],
                    "content": "\nplt.show("
                }
            ],
            "content": "\ndef show_frequency_response(filter_type:FilterType,samplerate:int)->None:\n\"\"\" \\n     Show frequency response of a filter \\n  \\n     >>> from audio_filters.iir_filter import IIRFilter \\n     >>> filt = IIRFilter(4) \\n     >>> show_frequency_response(filt, 48000) \\n     \"\"\"\n\nsize=512\ninputs=[1]+[0]*(size-1)\noutputs=[filter_type.process(item)for item in inputs]\n\nfiller=[0]*(samplerate-size)#zero-padding\noutputs+=filler\nfft_out=np.abs(np.fft.fft(outputs))\nfft_db=20*np.log10(fft_out)\n\n#Frequencies on log scale from24to nyquist frequency\nplt.xlim(24,samplerate/2-1)\nplt.xlabel(\"Frequency (Hz)\")\nplt.xscale(\"log\")\n\n#Display within reasonable bounds\nbounds=get_bounds(fft_db,samplerate)\nplt.ylim(max([-80,bounds[0]]),min([80,bounds[1]]))\nplt.ylabel(\"Gain (dB)\")\n\nplt.plot(fft_db)\nplt.show()"
        },
        {
            "type": "FunctionDecl",
            "name": "show_phase_response",
            "range": [
                371,
                385
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "filter_type",
                    "range": [
                        374,
                        376
                    ],
                    "children": [],
                    "content": "(filter_type:"
                },
                {
                    "type": "Parameter",
                    "name": "samplerate",
                    "range": [
                        378,
                        380
                    ],
                    "children": [],
                    "content": ",samplerate:"
                }
            ],
            "content": "\ndef show_phase_response(filter_type:FilterType,samplerate:int)->None"
        },
        {
            "type": "Docstring",
            "name": "docstring",
            "range": [
                387,
                389
            ],
            "children": [],
            "content": "\n\"\"\" \\n     Show phase response of a filter \\n  \\n     >>> from audio_filters.iir_filter import IIRFilter \\n     >>> filt = IIRFilter(4) \\n     >>> show_phase_response(filt, 48000) \\n     \""
        },
        {
            "type": "VariableDecl",
            "name": "size",
            "range": [
                392,
                394
            ],
            "children": [],
            "content": "\nsize="
        },
        {
            "type": "VariableDecl",
            "name": "inputs",
            "range": [
                396,
                425
            ],
            "children": [
                {
                    "type": "ListLiteral",
                    "name": "inputs",
                    "range": [
                        398,
                        400
                    ],
                    "children": [],
                    "content": "=[1"
                },
                {
                    "type": "ListLiteral",
                    "name": "inputs",
                    "range": [
                        402,
                        404
                    ],
                    "children": [],
                    "content": "+[0"
                },
                {
                    "type": "BinaryExpression",
                    "name": "inputs",
                    "range": [
                        406,
                        410
                    ],
                    "children": [],
                    "content": "*(size-1"
                }
            ],
            "content": "\ninputs=[1]+[0]*(size-1)\noutputs=[filter_type.process(item)for item in inputs"
        },
        {
            "type": "VariableDecl",
            "name": "outputs",
            "range": [
                412,
                425
            ],
            "children": [
                {
                    "type": "ListComprehension",
                    "name": "outputs",
                    "range": [
                        414,
                        425
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "process",
                            "range": [
                                417,
                                420
                            ],
                            "children": [],
                            "content": ".process(item"
                        }
                    ],
                    "content": "=[filter_type.process(item)for item in inputs"
                }
            ],
            "content": "\noutputs=[filter_type.process(item)for item in inputs"
        },
        {
            "type": "VariableDecl",
            "name": "filler",
            "range": [
                428,
                443
            ],
            "children": [
                {
                    "type": "ListLiteral",
                    "name": "filler",
                    "range": [
                        430,
                        432
                    ],
                    "children": [],
                    "content": "=[0"
                },
                {
                    "type": "BinaryExpression",
                    "name": "filler",
                    "range": [
                        434,
                        438
                    ],
                    "children": [],
                    "content": "*(samplerate-size"
                }
            ],
            "content": "\nfiller=[0]*(samplerate-size)#zero-padding"
        },
        {
            "type": "ExpressionStatement",
            "name": "outputs",
            "range": [
                444,
                448
            ],
            "children": [],
            "content": "\noutputs+=filler"
        },
        {
            "type": "VariableDecl",
            "name": "fft_out",
            "range": [
                449,
                463
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "angle",
                    "range": [
                        453,
                        462
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "fft",
                            "range": [
                                459,
                                461
                            ],
                            "children": [],
                            "content": ".fft("
                        }
                    ],
                    "content": ".angle(np.fft.fft(outputs"
                }
            ],
            "content": "\nfft_out=np.angle(np.fft.fft(outputs)"
        },
        {
            "type": "ExpressionStatement",
            "name": "plt.xlim",
            "range": [
                477,
                488
            ],
            "children": [],
            "content": "\nplt.xlim(24,samplerate/2-1"
        },
        {
            "type": "ExpressionStatement",
            "name": "plt.xlabel",
            "range": [
                490,
                495
            ],
            "children": [],
            "content": "\nplt.xlabel(\"Frequency (Hz)\""
        },
        {
            "type": "ExpressionStatement",
            "name": "plt.xscale",
            "range": [
                497,
                502
            ],
            "children": [],
            "content": "\nplt.xscale(\"log\""
        },
        {
            "type": "ExpressionStatement",
            "name": "plt.ylim",
            "range": [
                505,
                517
            ],
            "children": [],
            "content": "\nplt.ylim(-2*pi,2*pi"
        },
        {
            "type": "ExpressionStatement",
            "name": "plt.ylabel",
            "range": [
                519,
                524
            ],
            "children": [],
            "content": "\nplt.ylabel(\"Phase shift (Radians)\""
        },
        {
            "type": "ExpressionStatement",
            "name": "plt.plot",
            "range": [
                526,
                541
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "unwrap",
                    "range": [
                        532,
                        540
                    ],
                    "children": [],
                    "content": ".unwrap(fft_out,-2*pi"
                }
            ],
            "content": "\nplt.plot(np.unwrap(fft_out,-2*pi)"
        },
        {
            "type": "ExpressionStatement",
            "name": "plt.show",
            "range": [
                543,
                547
            ],
            "children": [],
            "content": "\nplt.show("
        }
    ],
    "content": "class FilterType(Protocol):\n@abstractmethod\ndef process(self,sample:float)->float:\n\"\"\" \\n         Calculate y[n] \\n  \\n         >>> issubclass(FilterType, Protocol) \\n         True \\n         \"\"\"\n\n\ndef get_bounds(\nfft_results:np.ndarray,samplerate:int\n)->tuple[int|float,int|float]:\n\"\"\" \\n     Get bounds for printing fft results \\n  \\n     >>> import numpy \\n     >>> array = numpy.linspace(-20.0, 20.0, 1000) \\n     >>> get_bounds(array, 1000) \\n     (-20, 20) \\n     \"\"\"\nlowest=min([-20,np.min(fft_results[1:samplerate//2-1])])\nhighest=max([20,np.max(fft_results[1:samplerate//2-1])])\nreturn lowest,highest\n\n\ndef show_frequency_response(filter_type:FilterType,samplerate:int)->None:\n\"\"\" \\n     Show frequency response of a filter \\n  \\n     >>> from audio_filters.iir_filter import IIRFilter \\n     >>> filt = IIRFilter(4) \\n     >>> show_frequency_response(filt, 48000) \\n     \"\"\"\n\nsize=512\ninputs=[1]+[0]*(size-1)\noutputs=[filter_type.process(item)for item in inputs]\n\nfiller=[0]*(samplerate-size)#zero-padding\noutputs+=filler\nfft_out=np.abs(np.fft.fft(outputs))\nfft_db=20*np.log10(fft_out)\n\n#Frequencies on log scale from24to nyquist frequency\nplt.xlim(24,samplerate/2-1)\nplt.xlabel(\"Frequency (Hz)\")\nplt.xscale(\"log\")\n\n#Display within reasonable bounds\nbounds=get_bounds(fft_db,samplerate)\nplt.ylim(max([-80,bounds[0]]),min([80,bounds[1]]))\nplt.ylabel(\"Gain (dB)\")\n\nplt.plot(fft_db)\nplt.show()\n\n\ndef show_phase_response(filter_type:FilterType,samplerate:int)->None:\n\"\"\" \\n     Show phase response of a filter \\n  \\n     >>> from audio_filters.iir_filter import IIRFilter \\n     >>> filt = IIRFilter(4) \\n     >>> show_phase_response(filt, 48000) \\n     \"\"\"\n\nsize=512\ninputs=[1]+[0]*(size-1)\noutputs=[filter_type.process(item)for item in inputs]\n\nfiller=[0]*(samplerate-size)#zero-padding\noutputs+=filler\nfft_out=np.angle(np.fft.fft(outputs))\n\n#Frequencies on log scale from24to nyquist frequency\nplt.xlim(24,samplerate/2-1)\nplt.xlabel(\"Frequency (Hz)\")\nplt.xscale(\"log\")\n\nplt.ylim(-2*pi,2*pi)\nplt.ylabel(\"Phase shift (Radians)\")\nplt.plot(np.unwrap(fft_out,-2*pi))\nplt.show()"
}