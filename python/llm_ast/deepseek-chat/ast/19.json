{
    "type": "Program",
    "name": "Global",
    "range": [
        78,
        815
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "default",
            "range": [
                87,
                121
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        89,
                        93
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                90,
                                90
                            ],
                            "children": [],
                            "content": "default"
                        },
                        {
                            "type": "Parameter",
                            "name": "o",
                            "range": [
                                92,
                                92
                            ],
                            "children": [],
                            "content": "self"
                        }
                    ],
                    "content": "def default(self,"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        94,
                        121
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                96,
                                111
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        97,
                                        102
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "isinstance",
                                            "range": [
                                                97,
                                                102
                                            ],
                                            "children": [
                                                {
                                                    "type": "ArgumentList",
                                                    "name": "",
                                                    "range": [
                                                        98,
                                                        102
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "o",
                                                            "range": [
                                                                99,
                                                                99
                                                            ],
                                                            "children": [],
                                                            "content": "isinstance"
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "datetime",
                                                            "range": [
                                                                101,
                                                                101
                                                            ],
                                                            "children": [],
                                                            "content": "o"
                                                        }
                                                    ],
                                                    "content": "if isinstance(o,"
                                                }
                                            ],
                                            "content": "\nif isinstance(o,"
                                        }
                                    ],
                                    "content": "\nif isinstance(o,"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        103,
                                        111
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "",
                                            "range": [
                                                105,
                                                110
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "isoformat",
                                                    "range": [
                                                        106,
                                                        110
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "",
                                                            "range": [
                                                                106,
                                                                108
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "o",
                                                                    "range": [
                                                                        106,
                                                                        106
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\n"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "isoformat",
                                                                    "range": [
                                                                        108,
                                                                        108
                                                                    ],
                                                                    "children": [],
                                                                    "content": "o"
                                                                }
                                                            ],
                                                            "content": "\nreturn o"
                                                        }
                                                    ],
                                                    "content": "\nreturn o.isoformat"
                                                }
                                            ],
                                            "content": ":\nreturn o.isoformat"
                                        }
                                    ],
                                    "content": "datetime):\nreturn o.isoformat("
                                }
                            ],
                            "content": ":\nif isinstance(o,datetime):\nreturn o.isoformat("
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                112,
                                120
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "default",
                                    "range": [
                                        113,
                                        120
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "",
                                            "range": [
                                                113,
                                                117
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "super",
                                                    "range": [
                                                        113,
                                                        115
                                                    ],
                                                    "children": [],
                                                    "content": "\nreturn super"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "default",
                                                    "range": [
                                                        117,
                                                        117
                                                    ],
                                                    "children": [],
                                                    "content": ")"
                                                }
                                            ],
                                            "content": "\nreturn super()"
                                        },
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                118,
                                                120
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "o",
                                                    "range": [
                                                        119,
                                                        119
                                                    ],
                                                    "children": [],
                                                    "content": "default"
                                                }
                                            ],
                                            "content": ".default("
                                        }
                                    ],
                                    "content": "\nreturn super().default("
                                }
                            ],
                            "content": ")\nreturn super().default("
                        }
                    ],
                    "content": "o):\nif isinstance(o,datetime):\nreturn o.isoformat()\nreturn super().default(o"
                }
            ],
            "content": ":\ndef default(self,o):\nif isinstance(o,datetime):\nreturn o.isoformat()\nreturn super().default(o"
        },
        {
            "type": "VariableDeclaration",
            "name": "M",
            "range": [
                123,
                132
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        124,
                        132
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "TypeVar",
                            "range": [
                                125,
                                125
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "CallExpression",
                            "name": "",
                            "range": [
                                126,
                                132
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"M\"",
                                    "range": [
                                        127,
                                        127
                                    ],
                                    "children": [],
                                    "content": "="
                                },
                                {
                                    "type": "KeywordArgument",
                                    "name": "bound",
                                    "range": [
                                        129,
                                        131
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "BaseModel",
                                            "range": [
                                                131,
                                                131
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": "(\"M\","
                                }
                            ],
                            "content": "M=TypeVar(\"M\",bound"
                        }
                    ],
                    "content": "\n\nM=TypeVar(\"M\",bound"
                }
            ],
            "content": "\n\n\nM=TypeVar(\"M\",bound"
        },
        {
            "type": "ClassDecl",
            "name": "BaseRedisEventBus",
            "range": [
                136,
                145
            ],
            "children": [
                {
                    "type": "GenericType",
                    "name": "Generic",
                    "range": [
                        139,
                        142
                    ],
                    "children": [
                        {
                            "type": "TypeParameter",
                            "name": "M",
                            "range": [
                                141,
                                141
                            ],
                            "children": [],
                            "content": "("
                        }
                    ],
                    "content": "class BaseRedisEventBus(Generic"
                },
                {
                    "type": "Inheritance",
                    "name": "ABC",
                    "range": [
                        144,
                        144
                    ],
                    "children": [],
                    "content": "M"
                }
            ],
            "content": "\n\n\nclass BaseRedisEventBus(Generic[M]"
        },
        {
            "type": "FunctionDecl",
            "name": "event_bus_name",
            "range": [
                162,
                173
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@property",
                    "range": [
                        156,
                        157
                    ],
                    "children": [],
                    "content": "]\n"
                },
                {
                    "type": "Decorator",
                    "name": "@abstractmethod",
                    "range": [
                        159,
                        160
                    ],
                    "children": [],
                    "content": "@property"
                },
                {
                    "type": "ReturnType",
                    "name": "str",
                    "range": [
                        169,
                        169
                    ],
                    "children": [],
                    "content": ")"
                }
            ],
            "content": "@abstractmethod\ndef event_bus_name(self)->str:"
        },
        {
            "type": "FunctionDecl",
            "name": "_serialize_message",
            "range": [
                175,
                232
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        178,
                        178
                    ],
                    "children": [],
                    "content": "def"
                },
                {
                    "type": "Parameter",
                    "name": "item",
                    "range": [
                        180,
                        180
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "M",
                            "range": [
                                182,
                                182
                            ],
                            "children": [],
                            "content": ","
                        }
                    ],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "channel_key",
                    "range": [
                        184,
                        184
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                186,
                                186
                            ],
                            "children": [],
                            "content": ","
                        }
                    ],
                    "content": ":"
                },
                {
                    "type": "ReturnType",
                    "name": "tuple",
                    "range": [
                        190,
                        190
                    ],
                    "children": [
                        {
                            "type": "TypeParameter",
                            "name": "str",
                            "range": [
                                192,
                                192
                            ],
                            "children": [],
                            "content": ">"
                        },
                        {
                            "type": "TypeParameter",
                            "name": "str",
                            "range": [
                                194,
                                194
                            ],
                            "children": [],
                            "content": "["
                        }
                    ],
                    "content": ")"
                }
            ],
            "content": "pass\n\ndef _serialize_message(self,item:M,channel_key:str)->tuple[str,str]:\nmessage=json.dumps(item.model_dump(),cls=DateTimeEncoder)\nchannel_name=f \"{self.event_bus_name}/{channel_key}\"\nlogger.info(f \"[{channel_name}] Publishing an event to Redis {message}\")\nreturn message"
        },
        {
            "type": "FunctionDecl",
            "name": "_deserialize_message",
            "range": [
                234,
                324
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        237,
                        237
                    ],
                    "children": [],
                    "content": "def"
                },
                {
                    "type": "Parameter",
                    "name": "msg",
                    "range": [
                        239,
                        239
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Any",
                            "range": [
                                241,
                                241
                            ],
                            "children": [],
                            "content": ","
                        }
                    ],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "channel_key",
                    "range": [
                        243,
                        243
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                245,
                                245
                            ],
                            "children": [],
                            "content": ","
                        }
                    ],
                    "content": ":"
                },
                {
                    "type": "ReturnType",
                    "name": "M",
                    "range": [
                        249,
                        249
                    ],
                    "children": [
                        {
                            "type": "TypeParameter",
                            "name": "None",
                            "range": [
                                251,
                                251
                            ],
                            "children": [],
                            "content": ">"
                        }
                    ],
                    "content": ")"
                }
            ],
            "content": "channel_name\n\ndef _deserialize_message(self,msg:Any,channel_key:str)->M|None:\nmessage_type=\"pmessage\" if\"*\"in channel_key else \"message\"\nif msg[\"type\"]!=message_type:\nreturn None\ntry:\ndata=json.loads(msg[\"data\"])\nlogger.info(f \"Consuming an event from Redis {data}\")\nreturn self.Model(**data)\nexcept Exception as e:\nlogger.error(f \"Failed to parse event result from Redis {msg} {e}\""
        },
        {
            "type": "FunctionDecl",
            "name": "_get_pubsub_channel",
            "range": [
                325,
                375
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        329,
                        329
                    ],
                    "children": [],
                    "content": "_get_pubsub_channel"
                },
                {
                    "type": "Parameter",
                    "name": "connection",
                    "range": [
                        331,
                        331
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "redis.Redis",
                            "range": [
                                333,
                                335
                            ],
                            "children": [],
                            "content": ",connection:"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "redis.AsyncRedis",
                            "range": [
                                337,
                                339
                            ],
                            "children": [],
                            "content": ".Redis|"
                        }
                    ],
                    "content": "\n"
                },
                {
                    "type": "Parameter",
                    "name": "channel_key",
                    "range": [
                        341,
                        341
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                343,
                                343
                            ],
                            "children": [],
                            "content": ","
                        }
                    ],
                    "content": "."
                },
                {
                    "type": "ReturnType",
                    "name": "tuple",
                    "range": [
                        348,
                        348
                    ],
                    "children": [
                        {
                            "type": "TypeParameter",
                            "name": "PubSub",
                            "range": [
                                350,
                                350
                            ],
                            "children": [],
                            "content": ">"
                        },
                        {
                            "type": "TypeParameter",
                            "name": "AsyncPubSub",
                            "range": [
                                352,
                                352
                            ],
                            "children": [],
                            "content": "["
                        },
                        {
                            "type": "TypeParameter",
                            "name": "str",
                            "range": [
                                354,
                                354
                            ],
                            "children": [],
                            "content": "|"
                        }
                    ],
                    "content": ")"
                }
            ],
            "content": ")\n\ndef _get_pubsub_channel(\nself,connection:redis.Redis|redis.AsyncRedis,channel_key:str\n)->tuple[PubSub|AsyncPubSub,str]:\nfull_channel_name=f \"{self.event_bus_name}/{channel_key}\"\npubsub=connection.pubsub()\nreturn pubsub"
        },
        {
            "type": "ClassDecl",
            "name": "AsyncRedisEventBus",
            "range": [
                560,
                569
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BaseRedisEventBus",
                    "range": [
                        563,
                        569
                    ],
                    "children": [],
                    "content": "\nclass AsyncRedisEventBus(BaseRedisEventBus[M"
                }
            ],
            "content": "event\n\n\nclass AsyncRedisEventBus(BaseRedisEventBus[M"
        },
        {
            "type": "PropertyDecl",
            "name": "connection",
            "range": [
                580,
                603
            ],
            "children": [
                {
                    "type": "ReturnType",
                    "name": "redis.AsyncRedis",
                    "range": [
                        589,
                        594
                    ],
                    "children": [],
                    "content": "connection(self)->"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        595,
                        603
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                596,
                                603
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "",
                                    "range": [
                                        597,
                                        603
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "redis.get_redis_async",
                                            "range": [
                                                598,
                                                603
                                            ],
                                            "children": [],
                                            "content": ":\nreturn await redis."
                                        }
                                    ],
                                    "content": "AsyncRedis:\nreturn await redis."
                                }
                            ],
                            "content": ".AsyncRedis:\nreturn await redis."
                        }
                    ],
                    "content": "redis.AsyncRedis:\nreturn await redis."
                }
            ],
            "content": "M]\n\n@property\nasync def connection(self)->redis.AsyncRedis:\nreturn await redis."
        },
        {
            "type": "FunctionDecl",
            "name": "publish_event",
            "range": [
                605,
                650
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "",
                    "range": [
                        608,
                        618
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "event",
                            "range": [
                                611,
                                613
                            ],
                            "children": [],
                            "content": "publish_event(self"
                        },
                        {
                            "type": "Parameter",
                            "name": "channel_key",
                            "range": [
                                615,
                                617
                            ],
                            "children": [],
                            "content": "event:M"
                        }
                    ],
                    "content": "\nasync def publish_event(self,event:M,"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        619,
                        650
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "message, full_channel_name",
                            "range": [
                                621,
                                633
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "self._serialize_message",
                                    "range": [
                                        625,
                                        633
                                    ],
                                    "children": [],
                                    "content": "message,full_channel_name=self._serialize_message(event"
                                }
                            ],
                            "content": "str):\nmessage,full_channel_name=self._serialize_message(event"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "connection",
                            "range": [
                                634,
                                640
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "",
                                    "range": [
                                        636,
                                        640
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "self.connection",
                                            "range": [
                                                637,
                                                640
                                            ],
                                            "children": [],
                                            "content": "\nconnection=await"
                                        }
                                    ],
                                    "content": ")\nconnection=await"
                                }
                            ],
                            "content": ",channel_key)\nconnection=await"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                641,
                                650
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "",
                                    "range": [
                                        641,
                                        650
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "connection.publish",
                                            "range": [
                                                642,
                                                650
                                            ],
                                            "children": [],
                                            "content": ".connection\nawait connection.publish(full_channel_name"
                                        }
                                    ],
                                    "content": "self.connection\nawait connection.publish(full_channel_name"
                                }
                            ],
                            "content": "self.connection\nawait connection.publish(full_channel_name"
                        }
                    ],
                    "content": "channel_key:str):\nmessage,full_channel_name=self._serialize_message(event,channel_key)\nconnection=await self.connection\nawait connection.publish(full_channel_name"
                }
            ],
            "content": "()\n\nasync def publish_event(self,event:M,channel_key:str):\nmessage,full_channel_name=self._serialize_message(event,channel_key)\nconnection=await self.connection\nawait connection.publish(full_channel_name"
        },
        {
            "type": "FunctionDecl",
            "name": "listen_events",
            "range": [
                652,
                752
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "",
                    "range": [
                        655,
                        661
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "channel_key",
                            "range": [
                                658,
                                660
                            ],
                            "children": [],
                            "content": "listen_events(self"
                        }
                    ],
                    "content": "\nasync def listen_events(self,"
                },
                {
                    "type": "ReturnType",
                    "name": "AsyncGenerator[M, None]",
                    "range": [
                        662,
                        670
                    ],
                    "children": [],
                    "content": "channel_key:str)->AsyncGenerator[M"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        671,
                        752
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "pubsub, full_channel_name",
                            "range": [
                                672,
                                689
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "self._get_pubsub_channel",
                                    "range": [
                                        676,
                                        689
                                    ],
                                    "children": [],
                                    "content": "pubsub,full_channel_name=self._get_pubsub_channel(\nawait self.connection,"
                                }
                            ],
                            "content": "None]:\npubsub,full_channel_name=self._get_pubsub_channel(\nawait self.connection,"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "",
                            "range": [
                                690,
                                697
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "isinstance",
                                    "range": [
                                        691,
                                        697
                                    ],
                                    "children": [],
                                    "content": "\n)\nassert isinstance(pubsub"
                                }
                            ],
                            "content": "channel_key\n)\nassert isinstance(pubsub"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                699,
                                723
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        700,
                                        703
                                    ],
                                    "children": [],
                                    "content": ")\n\nif"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        704,
                                        712
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                705,
                                                712
                                            ],
                                            "children": [
                                                {
                                                    "type": "AwaitExpression",
                                                    "name": "",
                                                    "range": [
                                                        705,
                                                        712
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "pubsub.psubscribe",
                                                            "range": [
                                                                706,
                                                                712
                                                            ],
                                                            "children": [],
                                                            "content": "channel_key:\nawait pubsub.psubscribe"
                                                        }
                                                    ],
                                                    "content": "in channel_key:\nawait pubsub.psubscribe"
                                                }
                                            ],
                                            "content": "in channel_key:\nawait pubsub.psubscribe"
                                        }
                                    ],
                                    "content": "\"*\"in channel_key:\nawait pubsub.psubscribe"
                                },
                                {
                                    "type": "ElseStatement",
                                    "name": "",
                                    "range": [
                                        713,
                                        723
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "",
                                            "range": [
                                                714,
                                                723
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        716,
                                                        723
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AwaitExpression",
                                                            "name": "",
                                                            "range": [
                                                                716,
                                                                723
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "pubsub.subscribe",
                                                                    "range": [
                                                                        717,
                                                                        723
                                                                    ],
                                                                    "children": [],
                                                                    "content": "else:\nawait pubsub.subscribe"
                                                                }
                                                            ],
                                                            "content": "\nelse:\nawait pubsub.subscribe"
                                                        }
                                                    ],
                                                    "content": "\nelse:\nawait pubsub.subscribe"
                                                }
                                            ],
                                            "content": "full_channel_name)\nelse:\nawait pubsub.subscribe"
                                        }
                                    ],
                                    "content": "(full_channel_name)\nelse:\nawait pubsub.subscribe"
                                }
                            ],
                            "content": "AsyncPubSub)\n\nif\"*\"in channel_key:\nawait pubsub.psubscribe(full_channel_name)\nelse:\nawait pubsub.subscribe"
                        },
                        {
                            "type": "ForStatement",
                            "name": "",
                            "range": [
                                725,
                                752
                            ],
                            "children": [
                                {
                                    "type": "Initialization",
                                    "name": "message",
                                    "range": [
                                        727,
                                        728
                                    ],
                                    "children": [],
                                    "content": "\n\n"
                                },
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        729,
                                        734
                                    ],
                                    "children": [],
                                    "content": "async for message in pubsub."
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        735,
                                        752
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "",
                                            "range": [
                                                736,
                                                748
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "",
                                                    "range": [
                                                        737,
                                                        739
                                                    ],
                                                    "children": [],
                                                    "content": "):\n"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "",
                                                    "range": [
                                                        740,
                                                        748
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "",
                                                            "range": [
                                                                740,
                                                                748
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "self._deserialize_message",
                                                                    "range": [
                                                                        742,
                                                                        748
                                                                    ],
                                                                    "children": [],
                                                                    "content": ":=self._deserialize_message(message"
                                                                }
                                                            ],
                                                            "content": "if event:=self._deserialize_message(message"
                                                        }
                                                    ],
                                                    "content": "if event:=self._deserialize_message(message"
                                                }
                                            ],
                                            "content": "():\nif event:=self._deserialize_message(message"
                                        },
                                        {
                                            "type": "YieldStatement",
                                            "name": "",
                                            "range": [
                                                750,
                                                752
                                            ],
                                            "children": [],
                                            "content": "channel_key):"
                                        }
                                    ],
                                    "content": "listen():\nif event:=self._deserialize_message(message,channel_key):"
                                }
                            ],
                            "content": "full_channel_name)\n\nasync for message in pubsub.listen():\nif event:=self._deserialize_message(message,channel_key):"
                        }
                    ],
                    "content": ",None]:\npubsub,full_channel_name=self._get_pubsub_channel(\nawait self.connection,channel_key\n)\nassert isinstance(pubsub,AsyncPubSub)\n\nif\"*\"in channel_key:\nawait pubsub.psubscribe(full_channel_name)\nelse:\nawait pubsub.subscribe(full_channel_name)\n\nasync for message in pubsub.listen():\nif event:=self._deserialize_message(message,channel_key):"
                }
            ],
            "content": "message)\n\nasync def listen_events(self,channel_key:str)->AsyncGenerator[M,None]:\npubsub,full_channel_name=self._get_pubsub_channel(\nawait self.connection,channel_key\n)\nassert isinstance(pubsub,AsyncPubSub)\n\nif\"*\"in channel_key:\nawait pubsub.psubscribe(full_channel_name)\nelse:\nawait pubsub.subscribe(full_channel_name)\n\nasync for message in pubsub.listen():\nif event:=self._deserialize_message(message,channel_key):"
        },
        {
            "type": "FunctionDecl",
            "name": "wait_for_event",
            "range": [
                754,
                815
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "",
                    "range": [
                        757,
                        773
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "channel_key",
                            "range": [
                                761,
                                763
                            ],
                            "children": [],
                            "content": "(\nself"
                        },
                        {
                            "type": "Parameter",
                            "name": "timeout",
                            "range": [
                                765,
                                772
                            ],
                            "children": [],
                            "content": "channel_key:str,timeout:Optional["
                        }
                    ],
                    "content": "\nasync def wait_for_event(\nself,channel_key:str,timeout:Optional[float"
                },
                {
                    "type": "ReturnType",
                    "name": "M | None",
                    "range": [
                        775,
                        780
                    ],
                    "children": [],
                    "content": "=None\n)->"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        781,
                        815
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                782,
                                815
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        783,
                                        808
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "",
                                            "range": [
                                                785,
                                                808
                                            ],
                                            "children": [
                                                {
                                                    "type": "AwaitExpression",
                                                    "name": "",
                                                    "range": [
                                                        786,
                                                        808
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "asyncio.wait_for",
                                                            "range": [
                                                                787,
                                                                808
                                                            ],
                                                            "children": [],
                                                            "content": ":\nreturn await asyncio.wait_for(\nanext(aiter(self.listen_events(channel_key))),"
                                                        }
                                                    ],
                                                    "content": "try:\nreturn await asyncio.wait_for(\nanext(aiter(self.listen_events(channel_key))),"
                                                }
                                            ],
                                            "content": "\ntry:\nreturn await asyncio.wait_for(\nanext(aiter(self.listen_events(channel_key))),"
                                        }
                                    ],
                                    "content": "None:\ntry:\nreturn await asyncio.wait_for(\nanext(aiter(self.listen_events(channel_key))),"
                                },
                                {
                                    "type": "CatchStatement",
                                    "name": "TimeoutError",
                                    "range": [
                                        809,
                                        815
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "",
                                            "range": [
                                                810,
                                                815
                                            ],
                                            "children": [
                                                {
                                                    "type": "ReturnStatement",
                                                    "name": "",
                                                    "range": [
                                                        813,
                                                        815
                                                    ],
                                                    "children": [],
                                                    "content": "except TimeoutError:"
                                                }
                                            ],
                                            "content": "\n)\nexcept TimeoutError:"
                                        }
                                    ],
                                    "content": "timeout\n)\nexcept TimeoutError:"
                                }
                            ],
                            "content": "|None:\ntry:\nreturn await asyncio.wait_for(\nanext(aiter(self.listen_events(channel_key))),timeout\n)\nexcept TimeoutError:"
                        }
                    ],
                    "content": "M|None:\ntry:\nreturn await asyncio.wait_for(\nanext(aiter(self.listen_events(channel_key))),timeout\n)\nexcept TimeoutError:"
                }
            ],
            "content": "yield event\n\nasync def wait_for_event(\nself,channel_key:str,timeout:Optional[float]=None\n)->M|None:\ntry:\nreturn await asyncio.wait_for(\nanext(aiter(self.listen_events(channel_key))),timeout\n)\nexcept TimeoutError:"
        }
    ],
    "content": "\n\nclass DateTimeEncoder(json.JSONEncoder):\ndef default(self,o):\nif isinstance(o,datetime):\nreturn o.isoformat()\nreturn super().default(o)\n\n\nM=TypeVar(\"M\",bound=BaseModel)\n\n\nclass BaseRedisEventBus(Generic[M],ABC):\nModel:type[M]\n\n@property\n@abstractmethod\ndef event_bus_name(self)->str:\npass\n\ndef _serialize_message(self,item:M,channel_key:str)->tuple[str,str]:\nmessage=json.dumps(item.model_dump(),cls=DateTimeEncoder)\nchannel_name=f \"{self.event_bus_name}/{channel_key}\"\nlogger.info(f \"[{channel_name}] Publishing an event to Redis {message}\")\nreturn message,channel_name\n\ndef _deserialize_message(self,msg:Any,channel_key:str)->M|None:\nmessage_type=\"pmessage\" if\"*\"in channel_key else \"message\"\nif msg[\"type\"]!=message_type:\nreturn None\ntry:\ndata=json.loads(msg[\"data\"])\nlogger.info(f \"Consuming an event from Redis {data}\")\nreturn self.Model(**data)\nexcept Exception as e:\nlogger.error(f \"Failed to parse event result from Redis {msg} {e}\")\n\ndef _get_pubsub_channel(\nself,connection:redis.Redis|redis.AsyncRedis,channel_key:str\n)->tuple[PubSub|AsyncPubSub,str]:\nfull_channel_name=f \"{self.event_bus_name}/{channel_key}\"\npubsub=connection.pubsub()\nreturn pubsub,full_channel_name\n\n\nclass RedisEventBus(BaseRedisEventBus[M],ABC):\nModel:type[M]\n\n@property\ndef connection(self)->redis.Redis:\nreturn redis.get_redis()\n\ndef publish_event(self,event:M,channel_key:str):\nmessage,full_channel_name=self._serialize_message(event,channel_key)\nself.connection.publish(full_channel_name,message)\n\ndef listen_events(self,channel_key:str)->Generator[M,None,None]:\npubsub,full_channel_name=self._get_pubsub_channel(\nself.connection,channel_key\n)\nassert isinstance(pubsub,PubSub)\n\nif\"*\"in channel_key:\npubsub.psubscribe(full_channel_name)\nelse:\npubsub.subscribe(full_channel_name)\n\nfor message in pubsub.listen():\nif event:=self._deserialize_message(message,channel_key):\nyield event\n\n\nclass AsyncRedisEventBus(BaseRedisEventBus[M],ABC):\nModel:type[M]\n\n@property\nasync def connection(self)->redis.AsyncRedis:\nreturn await redis.get_redis_async()\n\nasync def publish_event(self,event:M,channel_key:str):\nmessage,full_channel_name=self._serialize_message(event,channel_key)\nconnection=await self.connection\nawait connection.publish(full_channel_name,message)\n\nasync def listen_events(self,channel_key:str)->AsyncGenerator[M,None]:\npubsub,full_channel_name=self._get_pubsub_channel(\nawait self.connection,channel_key\n)\nassert isinstance(pubsub,AsyncPubSub)\n\nif\"*\"in channel_key:\nawait pubsub.psubscribe(full_channel_name)\nelse:\nawait pubsub.subscribe(full_channel_name)\n\nasync for message in pubsub.listen():\nif event:=self._deserialize_message(message,channel_key):\nyield event\n\nasync def wait_for_event(\nself,channel_key:str,timeout:Optional[float]=None\n)->M|None:\ntry:\nreturn await asyncio.wait_for(\nanext(aiter(self.listen_events(channel_key))),timeout\n)\nexcept TimeoutError:"
}