{
    "type": "Program",
    "name": "Global",
    "range": [
        78,
        765
    ],
    "children": [
        {
            "type": "ClassDecl",
            "name": "GetWikipediaSummaryBlock",
            "range": [
                78,
                84
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "",
                    "range": [
                        80,
                        84
                    ],
                    "children": [
                        {
                            "type": "ParentClass",
                            "name": "Block",
                            "range": [
                                81,
                                81
                            ],
                            "children": [],
                            "content": "("
                        },
                        {
                            "type": "ParentClass",
                            "name": "GetRequest",
                            "range": [
                                83,
                                83
                            ],
                            "children": [],
                            "content": ","
                        }
                    ],
                    "content": "GetWikipediaSummaryBlock(Block,GetRequest"
                }
            ],
            "content": "\nclass GetWikipediaSummaryBlock(Block,GetRequest"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                87,
                91
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "",
                    "range": [
                        89,
                        91
                    ],
                    "children": [
                        {
                            "type": "ParentClass",
                            "name": "BlockSchema",
                            "range": [
                                90,
                                90
                            ],
                            "children": [],
                            "content": "("
                        }
                    ],
                    "content": "Input(BlockSchema"
                }
            ],
            "content": "\nclass Input(BlockSchema"
        },
        {
            "type": "VariableDecl",
            "name": "topic",
            "range": [
                94,
                103
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        96,
                        96
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "Assignment",
                    "name": "",
                    "range": [
                        97,
                        103
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "",
                            "range": [
                                98,
                                103
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        100,
                                        102
                                    ],
                                    "children": [],
                                    "content": "(description="
                                }
                            ],
                            "content": "=SchemaField(description=\"The topic to fetch the summary for\""
                        }
                    ],
                    "content": "str=SchemaField(description=\"The topic to fetch the summary for\""
                }
            ],
            "content": "\ntopic:str=SchemaField(description=\"The topic to fetch the summary for\""
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                106,
                110
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "",
                    "range": [
                        108,
                        110
                    ],
                    "children": [
                        {
                            "type": "ParentClass",
                            "name": "BlockSchema",
                            "range": [
                                109,
                                109
                            ],
                            "children": [],
                            "content": "("
                        }
                    ],
                    "content": "Output(BlockSchema"
                }
            ],
            "content": "\nclass Output(BlockSchema"
        },
        {
            "type": "VariableDecl",
            "name": "summary",
            "range": [
                113,
                122
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        115,
                        115
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "Assignment",
                    "name": "",
                    "range": [
                        116,
                        122
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "",
                            "range": [
                                117,
                                122
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        119,
                                        121
                                    ],
                                    "children": [],
                                    "content": "(description="
                                }
                            ],
                            "content": "=SchemaField(description=\"The summary of the given topic\""
                        }
                    ],
                    "content": "str=SchemaField(description=\"The summary of the given topic\""
                }
            ],
            "content": "\nsummary:str=SchemaField(description=\"The summary of the given topic\""
        },
        {
            "type": "VariableDecl",
            "name": "error",
            "range": [
                124,
                135
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        126,
                        126
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "Assignment",
                    "name": "",
                    "range": [
                        127,
                        135
                    ],
                    "children": [
                        {
                            "type": "SchemaField",
                            "name": "",
                            "range": [
                                128,
                                135
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        131,
                                        133
                                    ],
                                    "children": [],
                                    "content": "\ndescription="
                                }
                            ],
                            "content": "=SchemaField(\ndescription=\"Error message if the summary cannot be retrieved\"\n"
                        }
                    ],
                    "content": "str=SchemaField(\ndescription=\"Error message if the summary cannot be retrieved\"\n"
                }
            ],
            "content": "\nerror:str=SchemaField(\ndescription=\"Error message if the summary cannot be retrieved\"\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                138,
                222
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        141,
                        141
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "SuperCall",
                    "name": "",
                    "range": [
                        145,
                        150
                    ],
                    "children": [],
                    "content": "\nsuper().__init__"
                },
                {
                    "type": "Assignment",
                    "name": "id",
                    "range": [
                        152,
                        154
                    ],
                    "children": [],
                    "content": "\nid="
                },
                {
                    "type": "Assignment",
                    "name": "description",
                    "range": [
                        157,
                        159
                    ],
                    "children": [],
                    "content": "\ndescription="
                },
                {
                    "type": "Assignment",
                    "name": "categories",
                    "range": [
                        162,
                        168
                    ],
                    "children": [],
                    "content": "\ncategories={BlockCategory.SEARCH"
                },
                {
                    "type": "Assignment",
                    "name": "input_schema",
                    "range": [
                        171,
                        176
                    ],
                    "children": [],
                    "content": "\ninput_schema=GetWikipediaSummaryBlock.Input"
                },
                {
                    "type": "Assignment",
                    "name": "output_schema",
                    "range": [
                        178,
                        182
                    ],
                    "children": [],
                    "content": "\noutput_schema=GetWikipediaSummaryBlock."
                },
                {
                    "type": "Assignment",
                    "name": "test_input",
                    "range": [
                        185,
                        191
                    ],
                    "children": [],
                    "content": "\ntest_input={\"topic\":\"Artificial Intelligence\""
                },
                {
                    "type": "Assignment",
                    "name": "test_output",
                    "range": [
                        194,
                        200
                    ],
                    "children": [],
                    "content": "\ntest_output=(\"summary\",\"summary content\""
                },
                {
                    "type": "Assignment",
                    "name": "test_mock",
                    "range": [
                        203,
                        218
                    ],
                    "children": [],
                    "content": "\ntest_mock={\"get_request\":lambda url,json:{\"extract\":\"summary content\"}"
                }
            ],
            "content": "\ndef __init__(self):\nsuper().__init__(\nid=\"f5b0f5d0-1862-4d61-94be-3ad0fa772760\",\ndescription=\"This block fetches the summary of a given topic from Wikipedia.\",\ncategories={BlockCategory.SEARCH},\ninput_schema=GetWikipediaSummaryBlock.Input,\noutput_schema=GetWikipediaSummaryBlock.Output,\ntest_input={\"topic\":\"Artificial Intelligence\"},\ntest_output=(\"summary\",\"summary content\"),\ntest_mock={\"get_request\":lambda url,json:{\"extract\":\"summary content\"}},\n)"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                224,
                288
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        227,
                        227
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        229,
                        231
                    ],
                    "children": [],
                    "content": ",input_data:"
                },
                {
                    "type": "Parameter",
                    "name": "kwargs",
                    "range": [
                        235,
                        235
                    ],
                    "children": [],
                    "content": "*"
                },
                {
                    "type": "Assignment",
                    "name": "topic",
                    "range": [
                        242,
                        246
                    ],
                    "children": [],
                    "content": "\ntopic=input_data."
                },
                {
                    "type": "Assignment",
                    "name": "url",
                    "range": [
                        248,
                        251
                    ],
                    "children": [],
                    "content": "\nurl=f"
                },
                {
                    "type": "Assignment",
                    "name": "response",
                    "range": [
                        253,
                        264
                    ],
                    "children": [],
                    "content": "\nresponse=self.get_request(url,json=True"
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        266,
                        278
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                267,
                                270
                            ],
                            "children": [],
                            "content": "if \"extract\" not in"
                        },
                        {
                            "type": "Throw",
                            "name": "RuntimeError",
                            "range": [
                                273,
                                278
                            ],
                            "children": [],
                            "content": "\nraise RuntimeError(f \"Unable to parse Wikipedia response: {response}\""
                        }
                    ],
                    "content": "\nif \"extract\" not in response:\nraise RuntimeError(f \"Unable to parse Wikipedia response: {response}\""
                },
                {
                    "type": "Yield",
                    "name": "",
                    "range": [
                        280,
                        286
                    ],
                    "children": [],
                    "content": "\nyield \"summary\",response[\"extract\""
                }
            ],
            "content": "\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\ntopic=input_data.topic\nurl=f \"https://en.wikipedia.org/api/rest_v1/page/summary/{topic}\"\nresponse=self.get_request(url,json=True)\nif \"extract\" not in response:\nraise RuntimeError(f \"Unable to parse Wikipedia response: {response}\")\nyield \"summary\",response[\"extract\"]\n"
        },
        {
            "type": "ClassDecl",
            "name": "GetWeatherInformationBlock",
            "range": [
                358,
                365
            ],
            "children": [
                {
                    "type": "ClassInheritance",
                    "name": "Block",
                    "range": [
                        361,
                        361
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "ClassInheritance",
                    "name": "GetRequest",
                    "range": [
                        363,
                        363
                    ],
                    "children": [],
                    "content": "GetWeatherInformationBlock"
                }
            ],
            "content": "}\n\n\nclass GetWeatherInformationBlock(Block"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                367,
                372
            ],
            "children": [
                {
                    "type": "ClassInheritance",
                    "name": "BlockSchema",
                    "range": [
                        370,
                        370
                    ],
                    "children": [],
                    "content": "\n"
                }
            ],
            "content": "GetRequest):\nclass Input"
        },
        {
            "type": "VariableDecl",
            "name": "location",
            "range": [
                374,
                385
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        376,
                        376
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        377,
                        377
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "SchemaField",
                            "range": [
                                378,
                                385
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        381,
                                        383
                                    ],
                                    "children": [],
                                    "content": "=SchemaField("
                                }
                            ],
                            "content": "location:str=SchemaField(\ndescription"
                        }
                    ],
                    "content": "\n"
                }
            ],
            "content": "BlockSchema):\nlocation:str=SchemaField(\ndescription"
        },
        {
            "type": "VariableDecl",
            "name": "credentials",
            "range": [
                387,
                416
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "CredentialsMetaInput",
                    "range": [
                        389,
                        389
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        405,
                        405
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "CredentialsField",
                            "range": [
                                406,
                                416
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        409,
                                        413
                                    ],
                                    "children": [],
                                    "content": "=CredentialsField(\ndescription"
                                }
                            ],
                            "content": "]\n]=CredentialsField(\ndescription=\"The OpenWeatherMap integration can be used with \"\n"
                        }
                    ],
                    "content": "\"api_key\""
                }
            ],
            "content": "\"Location to get weather information for\"\n)\ncredentials:CredentialsMetaInput[\nLiteral[ProviderName.OPENWEATHERMAP],Literal[\"api_key\"]\n]=CredentialsField(\ndescription=\"The OpenWeatherMap integration can be used with \"\n"
        },
        {
            "type": "VariableDecl",
            "name": "use_celsius",
            "range": [
                418,
                435
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "bool",
                    "range": [
                        420,
                        420
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        421,
                        421
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "SchemaField",
                            "range": [
                                422,
                                435
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "default",
                                    "range": [
                                        425,
                                        427
                                    ],
                                    "children": [],
                                    "content": "=SchemaField("
                                },
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        430,
                                        432
                                    ],
                                    "children": [],
                                    "content": "=True,"
                                }
                            ],
                            "content": "use_celsius:bool=SchemaField(\ndefault=True,\ndescription="
                        }
                    ],
                    "content": "\n"
                }
            ],
            "content": ",\n)\nuse_celsius:bool=SchemaField(\ndefault=True,\ndescription="
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                438,
                443
            ],
            "children": [
                {
                    "type": "ClassInheritance",
                    "name": "BlockSchema",
                    "range": [
                        441,
                        441
                    ],
                    "children": [],
                    "content": "\n"
                }
            ],
            "content": "\n)\n\nclass Output"
        },
        {
            "type": "VariableDecl",
            "name": "temperature",
            "range": [
                445,
                456
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        447,
                        447
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        448,
                        448
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "SchemaField",
                            "range": [
                                449,
                                456
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        452,
                                        454
                                    ],
                                    "children": [],
                                    "content": "=SchemaField("
                                }
                            ],
                            "content": "temperature:str=SchemaField(\ndescription"
                        }
                    ],
                    "content": "\n"
                }
            ],
            "content": "BlockSchema):\ntemperature:str=SchemaField(\ndescription"
        },
        {
            "type": "VariableDecl",
            "name": "humidity",
            "range": [
                458,
                467
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        460,
                        460
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        461,
                        461
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "SchemaField",
                            "range": [
                                462,
                                467
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        465,
                                        466
                                    ],
                                    "children": [],
                                    "content": "=SchemaField"
                                }
                            ],
                            "content": "humidity:str=SchemaField("
                        }
                    ],
                    "content": "\n"
                }
            ],
            "content": "\"Temperature in the specified location\"\n)\nhumidity:str=SchemaField("
        },
        {
            "type": "VariableDecl",
            "name": "condition",
            "range": [
                469,
                480
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        471,
                        471
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        472,
                        472
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "SchemaField",
                            "range": [
                                473,
                                480
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        477,
                                        478
                                    ],
                                    "children": [],
                                    "content": "SchemaField("
                                }
                            ],
                            "content": "condition:str=SchemaField(\ndescription"
                        }
                    ],
                    "content": "\n"
                }
            ],
            "content": "=\"Humidity in the specified location\")\ncondition:str=SchemaField(\ndescription"
        },
        {
            "type": "VariableDecl",
            "name": "error",
            "range": [
                482,
                493
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        484,
                        484
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        485,
                        485
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "SchemaField",
                            "range": [
                                486,
                                493
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "description",
                                    "range": [
                                        490,
                                        491
                                    ],
                                    "children": [],
                                    "content": "SchemaField("
                                }
                            ],
                            "content": "error:str=SchemaField(\ndescription"
                        }
                    ],
                    "content": "\n"
                }
            ],
            "content": "\"Weather condition in the specified location\"\n)\nerror:str=SchemaField(\ndescription"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                496,
                634
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        499,
                        499
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "CallExpression",
                    "name": "super",
                    "range": [
                        503,
                        633
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "id",
                            "range": [
                                510,
                                512
                            ],
                            "children": [],
                            "content": ".__init__("
                        },
                        {
                            "type": "Argument",
                            "name": "input_schema",
                            "range": [
                                515,
                                520
                            ],
                            "children": [],
                            "content": "=\"f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f\",\ninput_schema="
                        },
                        {
                            "type": "Argument",
                            "name": "output_schema",
                            "range": [
                                522,
                                526
                            ],
                            "children": [],
                            "content": ".Input,\noutput_schema"
                        },
                        {
                            "type": "Argument",
                            "name": "description",
                            "range": [
                                529,
                                531
                            ],
                            "children": [],
                            "content": ".Output,"
                        },
                        {
                            "type": "Argument",
                            "name": "test_input",
                            "range": [
                                534,
                                553
                            ],
                            "children": [],
                            "content": "=\"Retrieves weather information for a specified location using OpenWeatherMap API.\",\ntest_input={\n\"location\":\"New York\",\n\"use_celsius\":True,\n\"credentials\":"
                        },
                        {
                            "type": "Argument",
                            "name": "test_output",
                            "range": [
                                556,
                                581
                            ],
                            "children": [],
                            "content": "\n},\ntest_output=[\n(\"temperature\",\"21.66\"),\n(\"humidity\",\"32\"),\n(\"condition\",\"overcast clouds\""
                        },
                        {
                            "type": "Argument",
                            "name": "test_mock",
                            "range": [
                                584,
                                625
                            ],
                            "children": [],
                            "content": "\n],\ntest_mock={\n\"get_request\":lambda url,json:{\n\"main\":{\"temp\":21.66,\"humidity\":32},\n\"weather\":[{\"description\":\"overcast clouds\"}],"
                        },
                        {
                            "type": "Argument",
                            "name": "test_credentials",
                            "range": [
                                628,
                                630
                            ],
                            "children": [],
                            "content": "\n},"
                        }
                    ],
                    "content": "self):\nsuper().__init__(\nid=\"f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f\",\ninput_schema=GetWeatherInformationBlock.Input,\noutput_schema=GetWeatherInformationBlock.Output,\ndescription=\"Retrieves weather information for a specified location using OpenWeatherMap API.\",\ntest_input={\n\"location\":\"New York\",\n\"use_celsius\":True,\n\"credentials\":TEST_CREDENTIALS_INPUT,\n},\ntest_output=[\n(\"temperature\",\"21.66\"),\n(\"humidity\",\"32\"),\n(\"condition\",\"overcast clouds\"),\n],\ntest_mock={\n\"get_request\":lambda url,json:{\n\"main\":{\"temp\":21.66,\"humidity\":32},\n\"weather\":[{\"description\":\"overcast clouds\"}],\n}\n},\ntest_credentials="
                }
            ],
            "content": "\n)\n\ndef __init__(self):\nsuper().__init__(\nid=\"f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f\",\ninput_schema=GetWeatherInformationBlock.Input,\noutput_schema=GetWeatherInformationBlock.Output,\ndescription=\"Retrieves weather information for a specified location using OpenWeatherMap API.\",\ntest_input={\n\"location\":\"New York\",\n\"use_celsius\":True,\n\"credentials\":TEST_CREDENTIALS_INPUT,\n},\ntest_output=[\n(\"temperature\",\"21.66\"),\n(\"humidity\",\"32\"),\n(\"condition\",\"overcast clouds\"),\n],\ntest_mock={\n\"get_request\":lambda url,json:{\n\"main\":{\"temp\":21.66,\"humidity\":32},\n\"weather\":[{\"description\":\"overcast clouds\"}],\n}\n},\ntest_credentials=TEST_CREDENTIALS"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                636,
                765
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        640,
                        640
                    ],
                    "children": [],
                    "content": "def"
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        642,
                        644
                    ],
                    "children": [],
                    "content": "(\nself"
                },
                {
                    "type": "Parameter",
                    "name": "credentials",
                    "range": [
                        648,
                        650
                    ],
                    "children": [],
                    "content": "Input,*"
                },
                {
                    "type": "Parameter",
                    "name": "kwargs",
                    "range": [
                        654,
                        654
                    ],
                    "children": [],
                    "content": "APIKeyCredentials"
                },
                {
                    "type": "ReturnType",
                    "name": "BlockOutput",
                    "range": [
                        659,
                        659
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "units",
                    "range": [
                        662,
                        671
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                663,
                                663
                            ],
                            "children": [
                                {
                                    "type": "ConditionalExpression",
                                    "name": "if",
                                    "range": [
                                        665,
                                        669
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "input_data.use_celsius",
                                            "range": [
                                                666,
                                                668
                                            ],
                                            "children": [],
                                            "content": "units=\"metric\""
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"metric\"",
                                            "range": [
                                                664,
                                                664
                                            ],
                                            "children": [],
                                            "content": ":"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "\"imperial\"",
                                            "range": [
                                                670,
                                                670
                                            ],
                                            "children": [],
                                            "content": "input_data"
                                        }
                                    ],
                                    "content": "\nunits=\"metric\" if"
                                }
                            ],
                            "content": "BlockOutput"
                        }
                    ],
                    "content": ">BlockOutput:\nunits=\"metric\" if input_data."
                },
                {
                    "type": "VariableDecl",
                    "name": "api_key",
                    "range": [
                        672,
                        677
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                673,
                                673
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "credentials.api_key",
                                    "range": [
                                        674,
                                        676
                                    ],
                                    "children": [],
                                    "content": "\"imperial\"\napi_key"
                                }
                            ],
                            "content": "else"
                        }
                    ],
                    "content": "use_celsius else \"imperial\"\napi_key="
                },
                {
                    "type": "VariableDecl",
                    "name": "location",
                    "range": [
                        678,
                        683
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                679,
                                679
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "input_data.location",
                                    "range": [
                                        680,
                                        682
                                    ],
                                    "children": [],
                                    "content": "api_key\nlocation"
                                }
                            ],
                            "content": "."
                        }
                    ],
                    "content": "credentials.api_key\nlocation="
                },
                {
                    "type": "VariableDecl",
                    "name": "url",
                    "range": [
                        684,
                        688
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                685,
                                685
                            ],
                            "children": [
                                {
                                    "type": "TemplateLiteral",
                                    "name": "f",
                                    "range": [
                                        686,
                                        688
                                    ],
                                    "children": [
                                        {
                                            "type": "TemplateElement",
                                            "name": "http://api.openweathermap.org/data/2.5/weather?q=",
                                            "range": [
                                                687,
                                                687
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "TemplateElement",
                                            "name": "&appid=",
                                            "range": [
                                                687,
                                                687
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "TemplateElement",
                                            "name": "&units=",
                                            "range": [
                                                687,
                                                687
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "location\nurl"
                                }
                            ],
                            "content": "."
                        }
                    ],
                    "content": "input_data.location\nurl"
                },
                {
                    "type": "VariableDecl",
                    "name": "weather_data",
                    "range": [
                        689,
                        701
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                690,
                                690
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "self.get_request",
                                    "range": [
                                        691,
                                        701
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "url",
                                            "range": [
                                                695,
                                                695
                                            ],
                                            "children": [],
                                            "content": "self"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "json",
                                            "range": [
                                                698,
                                                699
                                            ],
                                            "children": [],
                                            "content": "(url"
                                        }
                                    ],
                                    "content": "\"http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}\"\nweather_data=self.get_request(url,json"
                                }
                            ],
                            "content": "f"
                        }
                    ],
                    "content": "=f \"http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}\"\nweather_data=self.get_request(url,json"
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        703,
                        764
                    ],
                    "children": [
                        {
                            "type": "LogicalExpression",
                            "name": "and",
                            "range": [
                                707,
                                709
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "in",
                                    "range": [
                                        705,
                                        705
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"main\"",
                                            "range": [
                                                704,
                                                704
                                            ],
                                            "children": [],
                                            "content": ")"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "weather_data",
                                            "range": [
                                                706,
                                                706
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "\n"
                                },
                                {
                                    "type": "BinaryExpression",
                                    "name": "in",
                                    "range": [
                                        709,
                                        709
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"weather\"",
                                            "range": [
                                                708,
                                                708
                                            ],
                                            "children": [],
                                            "content": "\"main\""
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "weather_data",
                                            "range": [
                                                710,
                                                710
                                            ],
                                            "children": [],
                                            "content": "weather_data"
                                        }
                                    ],
                                    "content": "in"
                                }
                            ],
                            "content": "if \"main\" in"
                        },
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                712,
                                754
                            ],
                            "children": [
                                {
                                    "type": "YieldExpression",
                                    "name": "yield",
                                    "range": [
                                        713,
                                        726
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"temperature\"",
                                            "range": [
                                                714,
                                                714
                                            ],
                                            "children": [],
                                            "content": "weather_data"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "str",
                                            "range": [
                                                716,
                                                725
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "weather_data[\"main\"][\"temp\"]",
                                                    "range": [
                                                        718,
                                                        724
                                                    ],
                                                    "children": [],
                                                    "content": "\"temperature\",str(weather_data[\"main\""
                                                }
                                            ],
                                            "content": "\nyield \"temperature\",str(weather_data[\"main\"]"
                                        }
                                    ],
                                    "content": "in weather_data:\nyield \"temperature\",str(weather_data[\"main\"]["
                                },
                                {
                                    "type": "YieldExpression",
                                    "name": "yield",
                                    "range": [
                                        727,
                                        740
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"humidity\"",
                                            "range": [
                                                728,
                                                728
                                            ],
                                            "children": [],
                                            "content": "]"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "str",
                                            "range": [
                                                730,
                                                739
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "weather_data[\"main\"][\"humidity\"]",
                                                    "range": [
                                                        732,
                                                        738
                                                    ],
                                                    "children": [],
                                                    "content": "\"humidity\",str(weather_data[\"main\""
                                                }
                                            ],
                                            "content": "\nyield \"humidity\",str(weather_data[\"main\"]"
                                        }
                                    ],
                                    "content": "\"temp\"])\nyield \"humidity\",str(weather_data[\"main\"]["
                                },
                                {
                                    "type": "YieldExpression",
                                    "name": "yield",
                                    "range": [
                                        741,
                                        754
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"condition\"",
                                            "range": [
                                                742,
                                                742
                                            ],
                                            "children": [],
                                            "content": "]"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "weather_data[\"weather\"][0][\"description\"]",
                                            "range": [
                                                744,
                                                753
                                            ],
                                            "children": [],
                                            "content": "\nyield \"condition\",weather_data[\"weather\"][0"
                                        }
                                    ],
                                    "content": "\"humidity\"])\nyield \"condition\",weather_data[\"weather\"][0]"
                                }
                            ],
                            "content": "\"weather\" in weather_data:\nyield \"temperature\",str(weather_data[\"main\"][\"temp\"])\nyield \"humidity\",str(weather_data[\"main\"][\"humidity\"])\nyield \"condition\",weather_data[\"weather\"][0]"
                        },
                        {
                            "type": "ElseStatement",
                            "name": "else",
                            "range": [
                                755,
                                764
                            ],
                            "children": [
                                {
                                    "type": "ThrowStatement",
                                    "name": "raise",
                                    "range": [
                                        758,
                                        763
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "RuntimeError",
                                            "range": [
                                                760,
                                                763
                                            ],
                                            "children": [
                                                {
                                                    "type": "TemplateLiteral",
                                                    "name": "f",
                                                    "range": [
                                                        761,
                                                        763
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "TemplateElement",
                                                            "name": "Expected keys not found in response: ",
                                                            "range": [
                                                                762,
                                                                762
                                                            ],
                                                            "children": [],
                                                            "content": "raise"
                                                        },
                                                        {
                                                            "type": "TemplateElement",
                                                            "name": "weather_data",
                                                            "range": [
                                                                762,
                                                                762
                                                            ],
                                                            "children": [],
                                                            "content": "raise"
                                                        }
                                                    ],
                                                    "content": "\nraise RuntimeError"
                                                }
                                            ],
                                            "content": ":\nraise RuntimeError"
                                        }
                                    ],
                                    "content": "\nelse:\nraise RuntimeError"
                                }
                            ],
                            "content": "[\"description\"]\nelse:\nraise RuntimeError("
                        }
                    ],
                    "content": "True)\n\nif \"main\" in weather_data and \"weather\" in weather_data:\nyield \"temperature\",str(weather_data[\"main\"][\"temp\"])\nyield \"humidity\",str(weather_data[\"main\"][\"humidity\"])\nyield \"condition\",weather_data[\"weather\"][0][\"description\"]\nelse:\nraise RuntimeError("
                }
            ],
            "content": "\n)\n\ndef run(\nself,input_data:Input,*,credentials:APIKeyCredentials,**kwargs\n)->BlockOutput:\nunits=\"metric\" if input_data.use_celsius else \"imperial\"\napi_key=credentials.api_key\nlocation=input_data.location\nurl=f \"http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}\"\nweather_data=self.get_request(url,json=True)\n\nif \"main\" in weather_data and \"weather\" in weather_data:\nyield \"temperature\",str(weather_data[\"main\"][\"temp\"])\nyield \"humidity\",str(weather_data[\"main\"][\"humidity\"])\nyield \"condition\",weather_data[\"weather\"][0][\"description\"]\nelse:\nraise RuntimeError(f"
        }
    ],
    "content": "\nclass GetWikipediaSummaryBlock(Block,GetRequest):\nclass Input(BlockSchema):\ntopic:str=SchemaField(description=\"The topic to fetch the summary for\")\n\nclass Output(BlockSchema):\nsummary:str=SchemaField(description=\"The summary of the given topic\")\nerror:str=SchemaField(\ndescription=\"Error message if the summary cannot be retrieved\"\n)\n\ndef __init__(self):\nsuper().__init__(\nid=\"f5b0f5d0-1862-4d61-94be-3ad0fa772760\",\ndescription=\"This block fetches the summary of a given topic from Wikipedia.\",\ncategories={BlockCategory.SEARCH},\ninput_schema=GetWikipediaSummaryBlock.Input,\noutput_schema=GetWikipediaSummaryBlock.Output,\ntest_input={\"topic\":\"Artificial Intelligence\"},\ntest_output=(\"summary\",\"summary content\"),\ntest_mock={\"get_request\":lambda url,json:{\"extract\":\"summary content\"}},\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\ntopic=input_data.topic\nurl=f \"https://en.wikipedia.org/api/rest_v1/page/summary/{topic}\"\nresponse=self.get_request(url,json=True)\nif \"extract\" not in response:\nraise RuntimeError(f \"Unable to parse Wikipedia response: {response}\")\nyield \"summary\",response[\"extract\"]\n\n\nTEST_CREDENTIALS=APIKeyCredentials(\nid=\"01234567-89ab-cdef-0123-456789abcdef\",\nprovider=\"openweathermap\",\napi_key=SecretStr(\"mock-openweathermap-api-key\"),\ntitle=\"Mock OpenWeatherMap API key\",\nexpires_at=None,\n)\nTEST_CREDENTIALS_INPUT={\n\"provider\":TEST_CREDENTIALS.provider,\n\"id\":TEST_CREDENTIALS.id,\n\"type\":TEST_CREDENTIALS.type,\n\"title\":TEST_CREDENTIALS.type,\n}\n\n\nclass GetWeatherInformationBlock(Block,GetRequest):\nclass Input(BlockSchema):\nlocation:str=SchemaField(\ndescription=\"Location to get weather information for\"\n)\ncredentials:CredentialsMetaInput[\nLiteral[ProviderName.OPENWEATHERMAP],Literal[\"api_key\"]\n]=CredentialsField(\ndescription=\"The OpenWeatherMap integration can be used with \"\n\"any API key with sufficient permissions for the blocks it is used on.\",\n)\nuse_celsius:bool=SchemaField(\ndefault=True,\ndescription=\"Whether to use Celsius or Fahrenheit for temperature\",\n)\n\nclass Output(BlockSchema):\ntemperature:str=SchemaField(\ndescription=\"Temperature in the specified location\"\n)\nhumidity:str=SchemaField(description=\"Humidity in the specified location\")\ncondition:str=SchemaField(\ndescription=\"Weather condition in the specified location\"\n)\nerror:str=SchemaField(\ndescription=\"Error message if the weather information cannot be retrieved\"\n)\n\ndef __init__(self):\nsuper().__init__(\nid=\"f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f\",\ninput_schema=GetWeatherInformationBlock.Input,\noutput_schema=GetWeatherInformationBlock.Output,\ndescription=\"Retrieves weather information for a specified location using OpenWeatherMap API.\",\ntest_input={\n\"location\":\"New York\",\n\"use_celsius\":True,\n\"credentials\":TEST_CREDENTIALS_INPUT,\n},\ntest_output=[\n(\"temperature\",\"21.66\"),\n(\"humidity\",\"32\"),\n(\"condition\",\"overcast clouds\"),\n],\ntest_mock={\n\"get_request\":lambda url,json:{\n\"main\":{\"temp\":21.66,\"humidity\":32},\n\"weather\":[{\"description\":\"overcast clouds\"}],\n}\n},\ntest_credentials=TEST_CREDENTIALS,\n)\n\ndef run(\nself,input_data:Input,*,credentials:APIKeyCredentials,**kwargs\n)->BlockOutput:\nunits=\"metric\" if input_data.use_celsius else \"imperial\"\napi_key=credentials.api_key\nlocation=input_data.location\nurl=f \"http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}\"\nweather_data=self.get_request(url,json=True)\n\nif \"main\" in weather_data and \"weather\" in weather_data:\nyield \"temperature\",str(weather_data[\"main\"][\"temp\"])\nyield \"humidity\",str(weather_data[\"main\"][\"humidity\"])\nyield \"condition\",weather_data[\"weather\"][0][\"description\"]\nelse:\nraise RuntimeError(f"
}