{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        340
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                1,
                1
            ],
            "children": [
                {
                    "type": "Text",
                    "name": " \\n Minimax helps to achieve maximum score in a game by checking all possible moves \\n depth is current depth in game tree. \\n  \\n nodeIndex is index of current node in scores[]. \\n if move is of maximizer return true else false \\n leaves of game tree is stored in scores[] \\n height is maximum height of Game tree \\n ",
                    "range": [
                        1,
                        1
                    ],
                    "children": [],
                    "content": "\" \\n Minimax helps to achieve maximum score in a game by checking all possible moves \\n depth is current depth in game tree. \\n  \\n nodeIndex is index of current node in scores[]. \\n if move is of maximizer return true else false \\n leaves of game tree is stored in scores[] \\n height is maximum height of Game tree \\n \""
                }
            ],
            "content": "\" \\n Minimax helps to achieve maximum score in a game by checking all possible moves \\n depth is current depth in game tree. \\n  \\n nodeIndex is index of current node in scores[]. \\n if move is of maximizer return true else false \\n leaves of game tree is stored in scores[] \\n height is maximum height of Game tree \\n \""
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                4,
                7
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "annotations",
                    "range": [
                        7,
                        7
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        4,
                        4
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "ModuleSpecifier",
                    "name": "__future__",
                    "range": [
                        5,
                        5
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        6,
                        6
                    ],
                    "children": [],
                    "content": "__future__"
                }
            ],
            "content": "\nfrom __future__ import"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                10,
                11
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "math",
                    "range": [
                        11,
                        11
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        10,
                        10
                    ],
                    "children": [],
                    "content": "\n"
                }
            ],
            "content": "\nimport"
        },
        {
            "type": "FunctionDecl",
            "name": "minimax",
            "range": [
                14,
                253
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        16,
                        41
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "depth",
                            "range": [
                                18,
                                20
                            ],
                            "children": [],
                            "content": "(\ndepth"
                        },
                        {
                            "type": "Parameter",
                            "name": "node_index",
                            "range": [
                                22,
                                24
                            ],
                            "children": [],
                            "content": "int,node_index"
                        },
                        {
                            "type": "Parameter",
                            "name": "is_max",
                            "range": [
                                26,
                                28
                            ],
                            "children": [],
                            "content": "int,is_max"
                        },
                        {
                            "type": "Parameter",
                            "name": "scores",
                            "range": [
                                30,
                                35
                            ],
                            "children": [],
                            "content": "bool,scores:list["
                        },
                        {
                            "type": "Parameter",
                            "name": "height",
                            "range": [
                                37,
                                39
                            ],
                            "children": [],
                            "content": "],height"
                        }
                    ],
                    "content": "def minimax(\ndepth:int,node_index:int,is_max:bool,scores:list[int],height:float"
                },
                {
                    "type": "ReturnType",
                    "name": "returnType",
                    "range": [
                        42,
                        44
                    ],
                    "children": [],
                    "content": "\n)-"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        45,
                        253
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                47,
                                49
                            ],
                            "children": [],
                            "content": ":\n\"\""
                        },
                        {
                            "type": "IfStatement",
                            "name": "ifDepthLessThanZero",
                            "range": [
                                52,
                                63
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        53,
                                        55
                                    ],
                                    "children": [],
                                    "content": "\nif depth"
                                },
                                {
                                    "type": "Body",
                                    "name": "body",
                                    "range": [
                                        58,
                                        62
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raiseValueError",
                                            "range": [
                                                58,
                                                62
                                            ],
                                            "children": [],
                                            "content": ":\nraise ValueError("
                                        }
                                    ],
                                    "content": ":\nraise ValueError("
                                }
                            ],
                            "content": "\n\nif depth<0:\nraise ValueError(\"Depth cannot be less than 0\""
                        },
                        {
                            "type": "IfStatement",
                            "name": "ifScoresEmpty",
                            "range": [
                                64,
                                79
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        65,
                                        71
                                    ],
                                    "children": [],
                                    "content": "\nif len(scores)="
                                },
                                {
                                    "type": "Body",
                                    "name": "body",
                                    "range": [
                                        74,
                                        78
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raiseValueError",
                                            "range": [
                                                74,
                                                78
                                            ],
                                            "children": [],
                                            "content": ":\nraise ValueError("
                                        }
                                    ],
                                    "content": ":\nraise ValueError("
                                }
                            ],
                            "content": ")\nif len(scores)==0:\nraise ValueError(\"Scores cannot be empty\""
                        },
                        {
                            "type": "Comment",
                            "name": "baseCaseComment",
                            "range": [
                                81,
                                106
                            ],
                            "children": [],
                            "content": "\n\n#Base case:If the current depth equals the height of the tree,\n#return the score of the current node"
                        },
                        {
                            "type": "IfStatement",
                            "name": "ifDepthEqualsHeight",
                            "range": [
                                107,
                                119
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        108,
                                        111
                                    ],
                                    "children": [],
                                    "content": "\nif depth="
                                },
                                {
                                    "type": "Body",
                                    "name": "body",
                                    "range": [
                                        114,
                                        118
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "returnScoresNodeIndex",
                                            "range": [
                                                114,
                                                118
                                            ],
                                            "children": [],
                                            "content": ":\nreturn scores["
                                        }
                                    ],
                                    "content": ":\nreturn scores["
                                }
                            ],
                            "content": ".\nif depth==height:\nreturn scores[node_index"
                        },
                        {
                            "type": "Comment",
                            "name": "maximizerTurnComment",
                            "range": [
                                121,
                                140
                            ],
                            "children": [],
                            "content": "\n\n#If it 's the maximizer' s turn,choose the maximum score\n#between the two possible moves"
                        },
                        {
                            "type": "IfStatement",
                            "name": "ifIsMax",
                            "range": [
                                141,
                                188
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        142,
                                        143
                                    ],
                                    "children": [],
                                    "content": "\nif"
                                },
                                {
                                    "type": "Body",
                                    "name": "body",
                                    "range": [
                                        145,
                                        187
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "returnMax",
                                            "range": [
                                                145,
                                                187
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "minimaxLeft",
                                                    "range": [
                                                        149,
                                                        164
                                                    ],
                                                    "children": [],
                                                    "content": "(\nminimax(depth+1,node_index*2,False,scores,"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "minimaxRight",
                                                    "range": [
                                                        167,
                                                        184
                                                    ],
                                                    "children": [],
                                                    "content": ",\nminimax(depth+1,node_index*2+1,False,scores,"
                                                }
                                            ],
                                            "content": ":\nreturn max(\nminimax(depth+1,node_index*2,False,scores,height),\nminimax(depth+1,node_index*2+1,False,scores,height),"
                                        }
                                    ],
                                    "content": ":\nreturn max(\nminimax(depth+1,node_index*2,False,scores,height),\nminimax(depth+1,node_index*2+1,False,scores,height),"
                                }
                            ],
                            "content": ".\nif is_max:\nreturn max(\nminimax(depth+1,node_index*2,False,scores,height),\nminimax(depth+1,node_index*2+1,False,scores,height),\n"
                        },
                        {
                            "type": "Comment",
                            "name": "minimizerTurnComment",
                            "range": [
                                190,
                                209
                            ],
                            "children": [],
                            "content": "\n\n#If it 's the minimizer' s turn,choose the minimum score\n#between the two possible moves"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "returnMin",
                            "range": [
                                210,
                                252
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "minimaxLeft",
                                    "range": [
                                        214,
                                        229
                                    ],
                                    "children": [],
                                    "content": "(\nminimax(depth+1,node_index*2,True,scores,"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "minimaxRight",
                                    "range": [
                                        232,
                                        249
                                    ],
                                    "children": [],
                                    "content": ",\nminimax(depth+1,node_index*2+1,True,scores,"
                                }
                            ],
                            "content": ".\nreturn min(\nminimax(depth+1,node_index*2,True,scores,height),\nminimax(depth+1,node_index*2+1,True,scores,height),"
                        }
                    ],
                    "content": ">int:\n\"\"\" \\n     This function implements the minimax algorithm, which helps achieve the optimal \\n     score for a player in a two-player game by checking all possible moves. \\n     If the player is the maximizer, then the score is maximized. \\n     If the player is the minimizer, then the score is minimized. \\n  \\n     Parameters: \\n     - depth: Current depth in the game tree. \\n     - node_index: Index of the current node in the scores list. \\n     - is_max: A boolean indicating whether the current move \\n               is for the maximizer (True) or minimizer (False). \\n     - scores: A list containing the scores of the leaves of the game tree. \\n     - height: The maximum height of the game tree. \\n  \\n     Returns: \\n     - An integer representing the optimal score for the current player. \\n  \\n     >>> import math \\n     >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423] \\n     >>> height = math.log(len(scores), 2) \\n     >>> minimax(0, 0, True, scores, height) \\n     65 \\n     >>> minimax(-1, 0, True, scores, height) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Depth cannot be less than 0 \\n     >>> minimax(0, 0, True, [], 2) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Scores cannot be empty \\n     >>> scores = [3, 5, 2, 9, 12, 5, 23, 23] \\n     >>> height = math.log(len(scores), 2) \\n     >>> minimax(0, 0, True, scores, height) \\n     12 \\n     \"\"\"\n\nif depth<0:\nraise ValueError(\"Depth cannot be less than 0\")\nif len(scores)==0:\nraise ValueError(\"Scores cannot be empty\")\n\n#Base case:If the current depth equals the height of the tree,\n#return the score of the current node.\nif depth==height:\nreturn scores[node_index]\n\n#If it 's the maximizer' s turn,choose the maximum score\n#between the two possible moves.\nif is_max:\nreturn max(\nminimax(depth+1,node_index*2,False,scores,height),\nminimax(depth+1,node_index*2+1,False,scores,height),\n)\n\n#If it 's the minimizer' s turn,choose the minimum score\n#between the two possible moves.\nreturn min(\nminimax(depth+1,node_index*2,True,scores,height),\nminimax(depth+1,node_index*2+1,True,scores,height),\n"
                }
            ],
            "content": "\n\ndef minimax(\ndepth:int,node_index:int,is_max:bool,scores:list[int],height:float\n)->int:\n\"\"\" \\n     This function implements the minimax algorithm, which helps achieve the optimal \\n     score for a player in a two-player game by checking all possible moves. \\n     If the player is the maximizer, then the score is maximized. \\n     If the player is the minimizer, then the score is minimized. \\n  \\n     Parameters: \\n     - depth: Current depth in the game tree. \\n     - node_index: Index of the current node in the scores list. \\n     - is_max: A boolean indicating whether the current move \\n               is for the maximizer (True) or minimizer (False). \\n     - scores: A list containing the scores of the leaves of the game tree. \\n     - height: The maximum height of the game tree. \\n  \\n     Returns: \\n     - An integer representing the optimal score for the current player. \\n  \\n     >>> import math \\n     >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423] \\n     >>> height = math.log(len(scores), 2) \\n     >>> minimax(0, 0, True, scores, height) \\n     65 \\n     >>> minimax(-1, 0, True, scores, height) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Depth cannot be less than 0 \\n     >>> minimax(0, 0, True, [], 2) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Scores cannot be empty \\n     >>> scores = [3, 5, 2, 9, 12, 5, 23, 23] \\n     >>> height = math.log(len(scores), 2) \\n     >>> minimax(0, 0, True, scores, height) \\n     12 \\n     \"\"\"\n\nif depth<0:\nraise ValueError(\"Depth cannot be less than 0\")\nif len(scores)==0:\nraise ValueError(\"Scores cannot be empty\")\n\n#Base case:If the current depth equals the height of the tree,\n#return the score of the current node.\nif depth==height:\nreturn scores[node_index]\n\n#If it 's the maximizer' s turn,choose the maximum score\n#between the two possible moves.\nif is_max:\nreturn max(\nminimax(depth+1,node_index*2,False,scores,height),\nminimax(depth+1,node_index*2+1,False,scores,height),\n)\n\n#If it 's the minimizer' s turn,choose the minimum score\n#between the two possible moves.\nreturn min(\nminimax(depth+1,node_index*2,True,scores,height),\nminimax(depth+1,node_index*2+1,True,scores,height),\n"
        },
        {
            "type": "FunctionDecl",
            "name": "main",
            "range": [
                254,
                261
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "def",
                    "range": [
                        254,
                        254
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Identifier",
                    "name": "main",
                    "range": [
                        255,
                        255
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Operator",
                    "name": "->",
                    "range": [
                        258,
                        259
                    ],
                    "children": [],
                    "content": "def main"
                },
                {
                    "type": "Keyword",
                    "name": "None",
                    "range": [
                        260,
                        260
                    ],
                    "children": [],
                    "content": "("
                }
            ],
            "content": ")\n\n\ndef main()"
        },
        {
            "type": "VariableDecl",
            "name": "scores",
            "range": [
                270,
                288
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "scores",
                    "range": [
                        270,
                        270
                    ],
                    "children": [],
                    "content": "and"
                },
                {
                    "type": "Literal",
                    "name": "90",
                    "range": [
                        273,
                        273
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Literal",
                    "name": "23",
                    "range": [
                        275,
                        275
                    ],
                    "children": [],
                    "content": "="
                },
                {
                    "type": "Literal",
                    "name": "6",
                    "range": [
                        277,
                        277
                    ],
                    "children": [],
                    "content": "90"
                },
                {
                    "type": "Literal",
                    "name": "33",
                    "range": [
                        279,
                        279
                    ],
                    "children": [],
                    "content": "23"
                },
                {
                    "type": "Literal",
                    "name": "21",
                    "range": [
                        281,
                        281
                    ],
                    "children": [],
                    "content": "6"
                },
                {
                    "type": "Literal",
                    "name": "65",
                    "range": [
                        283,
                        283
                    ],
                    "children": [],
                    "content": "33"
                },
                {
                    "type": "Literal",
                    "name": "123",
                    "range": [
                        285,
                        285
                    ],
                    "children": [],
                    "content": "21"
                },
                {
                    "type": "Literal",
                    "name": "34423",
                    "range": [
                        287,
                        287
                    ],
                    "children": [],
                    "content": "65"
                }
            ],
            "content": "and height calculation\nscores=[90,23,6,33,21,65,"
        },
        {
            "type": "VariableDecl",
            "name": "height",
            "range": [
                290,
                302
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "height",
                    "range": [
                        290,
                        290
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "Identifier",
                    "name": "math",
                    "range": [
                        292,
                        292
                    ],
                    "children": [],
                    "content": "]"
                },
                {
                    "type": "Identifier",
                    "name": "log",
                    "range": [
                        294,
                        294
                    ],
                    "children": [],
                    "content": "height"
                },
                {
                    "type": "Identifier",
                    "name": "len",
                    "range": [
                        296,
                        296
                    ],
                    "children": [],
                    "content": "math"
                },
                {
                    "type": "Identifier",
                    "name": "scores",
                    "range": [
                        298,
                        298
                    ],
                    "children": [],
                    "content": "log"
                },
                {
                    "type": "Literal",
                    "name": "2",
                    "range": [
                        301,
                        301
                    ],
                    "children": [],
                    "content": "("
                }
            ],
            "content": ",34423]\nheight=math.log(len(scores"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                317,
                324
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "print",
                    "range": [
                        317,
                        317
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"Optimal value : \"",
                            "range": [
                                319,
                                319
                            ],
                            "children": [],
                            "content": "algorithm"
                        },
                        {
                            "type": "Identifier",
                            "name": "end",
                            "range": [
                                321,
                                321
                            ],
                            "children": [],
                            "content": "print"
                        },
                        {
                            "type": "Literal",
                            "name": "\"\"",
                            "range": [
                                323,
                                323
                            ],
                            "children": [],
                            "content": "\"Optimal value : \""
                        }
                    ],
                    "content": "the"
                }
            ],
            "content": "the minimax algorithm\nprint(\"Optimal value : \","
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                326,
                340
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "print",
                    "range": [
                        326,
                        326
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "minimax",
                            "range": [
                                328,
                                328
                            ],
                            "children": [],
                            "content": ")"
                        },
                        {
                            "type": "Literal",
                            "name": "0",
                            "range": [
                                330,
                                330
                            ],
                            "children": [],
                            "content": "print"
                        },
                        {
                            "type": "Literal",
                            "name": "0",
                            "range": [
                                332,
                                332
                            ],
                            "children": [],
                            "content": "minimax"
                        },
                        {
                            "type": "Keyword",
                            "name": "True",
                            "range": [
                                334,
                                334
                            ],
                            "children": [],
                            "content": "0"
                        },
                        {
                            "type": "Identifier",
                            "name": "scores",
                            "range": [
                                336,
                                336
                            ],
                            "children": [],
                            "content": "0"
                        },
                        {
                            "type": "Identifier",
                            "name": "height",
                            "range": [
                                338,
                                338
                            ],
                            "children": [],
                            "content": "True"
                        }
                    ],
                    "content": "="
                }
            ],
            "content": "=\"\")\nprint(minimax(0,0,True,scores"
        }
    ],
    "content": "\"\"\" \\n Minimax helps to achieve maximum score in a game by checking all possible moves \\n depth is current depth in game tree. \\n  \\n nodeIndex is index of current node in scores[]. \\n if move is of maximizer return true else false \\n leaves of game tree is stored in scores[] \\n height is maximum height of Game tree \\n \"\"\"\n\nfrom __future__ import annotations\n\nimport math\n\n\ndef minimax(\ndepth:int,node_index:int,is_max:bool,scores:list[int],height:float\n)->int:\n\"\"\" \\n     This function implements the minimax algorithm, which helps achieve the optimal \\n     score for a player in a two-player game by checking all possible moves. \\n     If the player is the maximizer, then the score is maximized. \\n     If the player is the minimizer, then the score is minimized. \\n  \\n     Parameters: \\n     - depth: Current depth in the game tree. \\n     - node_index: Index of the current node in the scores list. \\n     - is_max: A boolean indicating whether the current move \\n               is for the maximizer (True) or minimizer (False). \\n     - scores: A list containing the scores of the leaves of the game tree. \\n     - height: The maximum height of the game tree. \\n  \\n     Returns: \\n     - An integer representing the optimal score for the current player. \\n  \\n     >>> import math \\n     >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423] \\n     >>> height = math.log(len(scores), 2) \\n     >>> minimax(0, 0, True, scores, height) \\n     65 \\n     >>> minimax(-1, 0, True, scores, height) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Depth cannot be less than 0 \\n     >>> minimax(0, 0, True, [], 2) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Scores cannot be empty \\n     >>> scores = [3, 5, 2, 9, 12, 5, 23, 23] \\n     >>> height = math.log(len(scores), 2) \\n     >>> minimax(0, 0, True, scores, height) \\n     12 \\n     \"\"\"\n\nif depth<0:\nraise ValueError(\"Depth cannot be less than 0\")\nif len(scores)==0:\nraise ValueError(\"Scores cannot be empty\")\n\n#Base case:If the current depth equals the height of the tree,\n#return the score of the current node.\nif depth==height:\nreturn scores[node_index]\n\n#If it 's the maximizer' s turn,choose the maximum score\n#between the two possible moves.\nif is_max:\nreturn max(\nminimax(depth+1,node_index*2,False,scores,height),\nminimax(depth+1,node_index*2+1,False,scores,height),\n)\n\n#If it 's the minimizer' s turn,choose the minimum score\n#between the two possible moves.\nreturn min(\nminimax(depth+1,node_index*2,True,scores,height),\nminimax(depth+1,node_index*2+1,True,scores,height),\n)\n\n\ndef main()->None:\n#Sample scores and height calculation\nscores=[90,23,6,33,21,65,123,34423]\nheight=math.log(len(scores),2)\n\n#Calculate and print the optimal value using the minimax algorithm\nprint(\"Optimal value : \",end=\"\")\nprint(minimax(0,0,True,scores"
}