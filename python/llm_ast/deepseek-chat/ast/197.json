{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        172
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                0,
                15
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "",
                    "range": [
                        1,
                        15
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "https",
                            "range": [
                                1,
                                5
                            ],
                            "children": [],
                            "content": "https://www"
                        },
                        {
                            "type": "Literal",
                            "name": "www.tutorialspoint.com",
                            "range": [
                                6,
                                15
                            ],
                            "children": [],
                            "content": ".tutorialspoint.com/python3/bitwise_operators_example.htm"
                        },
                        {
                            "type": "Literal",
                            "name": "/python3/bitwise_operators_example.htm",
                            "range": [
                                10,
                                15
                            ],
                            "children": [],
                            "content": "/python3/bitwise_operators_example.htm"
                        }
                    ],
                    "content": "https://www.tutorialspoint.com/python3/bitwise_operators_example.htm"
                }
            ],
            "content": "#https://www.tutorialspoint.com/python3/bitwise_operators_example.htm"
        },
        {
            "type": "Whitespace",
            "name": "",
            "range": [
                16,
                18
            ],
            "children": [],
            "content": "\n\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "binary_or",
            "range": [
                19,
                152
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        21,
                        29
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "a",
                            "range": [
                                22,
                                24
                            ],
                            "children": [],
                            "content": "a:int"
                        },
                        {
                            "type": "Parameter",
                            "name": "b",
                            "range": [
                                26,
                                28
                            ],
                            "children": [],
                            "content": "b:int"
                        }
                    ],
                    "content": "(a:int,b:int)"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        30,
                        32
                    ],
                    "children": [],
                    "content": "->str"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        35,
                        41
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Take in 2 integers, convert them to binary, and return a binary number that is the \\n     result of a binary or operation on the integers provided. \\n  \\n     >>> binary_or(25, 32) \\n     '0b111001' \\n     >>> binary_or(37, 50) \\n     '0b110111' \\n     >>> binary_or(21, 30) \\n     '0b11111' \\n     >>> binary_or(58, 73) \\n     '0b1111011' \\n     >>> binary_or(0, 255) \\n     '0b11111111' \\n     >>> binary_or(0, 256) \\n     '0b100000000' \\n     >>> binary_or(0, -1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of both inputs must be positive \\n     >>> binary_or(0, 1.1) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: 'float' object cannot be interpreted as an integer \\n     >>> binary_or(\"0\", \"1\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\""
                },
                {
                    "type": "IfStatement",
                    "name": "if_statement",
                    "range": [
                        43,
                        58
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "condition",
                            "range": [
                                44,
                                50
                            ],
                            "children": [],
                            "content": "a<0or b<0"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "raise_statement",
                            "range": [
                                53,
                                57
                            ],
                            "children": [],
                            "content": "raise ValueError(\"the value of both inputs must be positive\")"
                        }
                    ],
                    "content": "if a<0or b<0:\nraise ValueError(\"the value of both inputs must be positive\")\n"
                },
                {
                    "type": "Assignment",
                    "name": "a_binary_assignment",
                    "range": [
                        59,
                        77
                    ],
                    "children": [],
                    "content": "a_binary=str(bin(a))[2:]#remove the leading \"0b\"\n"
                },
                {
                    "type": "Assignment",
                    "name": "b_binary_assignment",
                    "range": [
                        78,
                        91
                    ],
                    "children": [],
                    "content": "b_binary=str(bin(b))[2:]\n"
                },
                {
                    "type": "Assignment",
                    "name": "max_len_assignment",
                    "range": [
                        92,
                        106
                    ],
                    "children": [],
                    "content": "max_len=max(len(a_binary),len(b_binary))\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return_statement",
                    "range": [
                        107,
                        152
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "binary_expression",
                            "range": [
                                108,
                                151
                            ],
                            "children": [],
                            "content": "\"0b\"+\"\".join(\nstr(int(\"1\"in(char_a,char_b)))\nfor char_a,char_b in zip(a_binary.zfill(max_len),b_binary.zfill(max_len))\n)"
                        }
                    ],
                    "content": "return \"0b\"+\"\".join(\nstr(int(\"1\"in(char_a,char_b)))\nfor char_a,char_b in zip(a_binary.zfill(max_len),b_binary.zfill(max_len))\n)\n"
                }
            ],
            "content": "def binary_or(a:int,b:int)->str:\n\"\"\" \\n     Take in 2 integers, convert them to binary, and return a binary number that is the \\n     result of a binary or operation on the integers provided. \\n  \\n     >>> binary_or(25, 32) \\n     '0b111001' \\n     >>> binary_or(37, 50) \\n     '0b110111' \\n     >>> binary_or(21, 30) \\n     '0b11111' \\n     >>> binary_or(58, 73) \\n     '0b1111011' \\n     >>> binary_or(0, 255) \\n     '0b11111111' \\n     >>> binary_or(0, 256) \\n     '0b100000000' \\n     >>> binary_or(0, -1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of both inputs must be positive \\n     >>> binary_or(0, 1.1) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: 'float' object cannot be interpreted as an integer \\n     >>> binary_or(\"0\", \"1\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\"\nif a<0or b<0:\nraise ValueError(\"the value of both inputs must be positive\")\na_binary=str(bin(a))[2:]#remove the leading \"0b\"\nb_binary=str(bin(b))[2:]\nmax_len=max(len(a_binary),len(b_binary))\nreturn \"0b\"+\"\".join(\nstr(int(\"1\"in(char_a,char_b)))\nfor char_a,char_b in zip(a_binary.zfill(max_len),b_binary.zfill(max_len))\n)\n"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                155,
                161
            ],
            "children": [
                {
                    "type": "BinaryExpression",
                    "name": "",
                    "range": [
                        155,
                        160
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "__name__",
                            "range": [
                                156,
                                156
                            ],
                            "children": [],
                            "content": "__name__"
                        },
                        {
                            "type": "Operator",
                            "name": "==",
                            "range": [
                                157,
                                158
                            ],
                            "children": [],
                            "content": "=="
                        },
                        {
                            "type": "Literal",
                            "name": "\"__main__\"",
                            "range": [
                                159,
                                159
                            ],
                            "children": [],
                            "content": "\"__main__\""
                        }
                    ],
                    "content": "if __name__==\"__main__\":"
                }
            ],
            "content": "if __name__==\"__main__\":\n"
        },
        {
            "type": "ImportStatement",
            "name": "doctest",
            "range": [
                162,
                164
            ],
            "children": [
                {
                    "type": "Module",
                    "name": "doctest",
                    "range": [
                        163,
                        163
                    ],
                    "children": [],
                    "content": "doctest"
                }
            ],
            "content": "import doctest\n"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                166,
                171
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "",
                    "range": [
                        166,
                        170
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "",
                            "range": [
                                166,
                                168
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "doctest",
                                    "range": [
                                        166,
                                        166
                                    ],
                                    "children": [],
                                    "content": "doctest"
                                },
                                {
                                    "type": "Property",
                                    "name": "testmod",
                                    "range": [
                                        168,
                                        168
                                    ],
                                    "children": [],
                                    "content": "testmod"
                                }
                            ],
                            "content": "doctest.testmod"
                        }
                    ],
                    "content": "doctest.testmod()"
                }
            ],
            "content": "doctest.testmod()\n"
        }
    ],
    "content": "#https://www.tutorialspoint.com/python3/bitwise_operators_example.htm\n\n\ndef binary_or(a:int,b:int)->str:\n\"\"\" \\n     Take in 2 integers, convert them to binary, and return a binary number that is the \\n     result of a binary or operation on the integers provided. \\n  \\n     >>> binary_or(25, 32) \\n     '0b111001' \\n     >>> binary_or(37, 50) \\n     '0b110111' \\n     >>> binary_or(21, 30) \\n     '0b11111' \\n     >>> binary_or(58, 73) \\n     '0b1111011' \\n     >>> binary_or(0, 255) \\n     '0b11111111' \\n     >>> binary_or(0, 256) \\n     '0b100000000' \\n     >>> binary_or(0, -1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of both inputs must be positive \\n     >>> binary_or(0, 1.1) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: 'float' object cannot be interpreted as an integer \\n     >>> binary_or(\"0\", \"1\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\"\nif a<0or b<0:\nraise ValueError(\"the value of both inputs must be positive\")\na_binary=str(bin(a))[2:]#remove the leading \"0b\"\nb_binary=str(bin(b))[2:]\nmax_len=max(len(a_binary),len(b_binary))\nreturn \"0b\"+\"\".join(\nstr(int(\"1\"in(char_a,char_b)))\nfor char_a,char_b in zip(a_binary.zfill(max_len),b_binary.zfill(max_len))\n)\n\n\nif __name__==\"__main__\":\nimport doctest\n\ndoctest.testmod()\n"
}