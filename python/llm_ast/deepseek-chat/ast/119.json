{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        236
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                3
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "",
                    "range": [
                        0,
                        1
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "from",
                            "range": [
                                0,
                                0
                            ],
                            "children": [],
                            "content": "from"
                        }
                    ],
                    "content": "from timeit"
                },
                {
                    "type": "ImportClause",
                    "name": "",
                    "range": [
                        1,
                        3
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "timeit",
                            "range": [
                                1,
                                1
                            ],
                            "children": [],
                            "content": "timeit"
                        },
                        {
                            "type": "Identifier",
                            "name": "import",
                            "range": [
                                2,
                                2
                            ],
                            "children": [],
                            "content": "import"
                        },
                        {
                            "type": "Identifier",
                            "name": "timeit",
                            "range": [
                                3,
                                3
                            ],
                            "children": [],
                            "content": "timeit"
                        }
                    ],
                    "content": "timeit import timeit"
                }
            ],
            "content": "from timeit import timeit"
        },
        {
            "type": "FunctionDecl",
            "name": "get_set_bits_count_using_brian_kernighans_algorithm",
            "range": [
                7,
                57
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "number",
                    "range": [
                        10,
                        12
                    ],
                    "children": [],
                    "content": "number:int"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        16,
                        16
                    ],
                    "children": [],
                    "content": "int"
                },
                {
                    "type": "Docstring",
                    "name": "\"\"\" \\n     Count the number of set bits in a 32 bit integer \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(25) \\n     3 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(37) \\n     3 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(21) \\n     3 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(58) \\n     4 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(0) \\n     0 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(256) \\n     1 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of input must not be negative \\n     \"\"\"",
                    "range": [
                        19,
                        21
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Count the number of set bits in a 32 bit integer \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(25) \\n     3 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(37) \\n     3 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(21) \\n     3 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(58) \\n     4 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(0) \\n     0 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(256) \\n     1 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of input must not be negative \\n     \"\"\""
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        23,
                        34
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "BinaryExpression",
                            "range": [
                                24,
                                26
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "number",
                                    "range": [
                                        24,
                                        24
                                    ],
                                    "children": [],
                                    "content": "number"
                                },
                                {
                                    "type": "Literal",
                                    "name": "0",
                                    "range": [
                                        26,
                                        26
                                    ],
                                    "children": [],
                                    "content": "0"
                                }
                            ],
                            "content": "number<0"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "raise",
                            "range": [
                                29,
                                33
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "ValueError",
                                    "range": [
                                        32,
                                        32
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"the value of input must not be negative\"",
                                            "range": [
                                                32,
                                                32
                                            ],
                                            "children": [],
                                            "content": "\"the value of input must not be negative\""
                                        }
                                    ],
                                    "content": "\"the value of input must not be negative\""
                                }
                            ],
                            "content": "raise ValueError(\"the value of input must not be negative\")"
                        }
                    ],
                    "content": "if number<0:\nraise ValueError(\"the value of input must not be negative\")\n"
                },
                {
                    "type": "VariableDeclaration",
                    "name": "result = 0",
                    "range": [
                        35,
                        37
                    ],
                    "children": [],
                    "content": "result=0"
                },
                {
                    "type": "WhileStatement",
                    "name": "while",
                    "range": [
                        39,
                        54
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "Identifier",
                            "range": [
                                40,
                                40
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "number",
                                    "range": [
                                        40,
                                        40
                                    ],
                                    "children": [],
                                    "content": "number"
                                }
                            ],
                            "content": "number"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "BinaryExpression",
                            "range": [
                                43,
                                48
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "number",
                                    "range": [
                                        43,
                                        43
                                    ],
                                    "children": [],
                                    "content": "number"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "number",
                                    "range": [
                                        48,
                                        48
                                    ],
                                    "children": [],
                                    "content": "1"
                                }
                            ],
                            "content": "number&=number-1"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "BinaryExpression",
                            "range": [
                                50,
                                53
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "result",
                                    "range": [
                                        50,
                                        50
                                    ],
                                    "children": [],
                                    "content": "result"
                                },
                                {
                                    "type": "Literal",
                                    "name": "1",
                                    "range": [
                                        53,
                                        53
                                    ],
                                    "children": [],
                                    "content": "1"
                                }
                            ],
                            "content": "result+=1"
                        }
                    ],
                    "content": "while number:\nnumber&=number-1\nresult+=1\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        55,
                        56
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "result",
                            "range": [
                                55,
                                55
                            ],
                            "children": [],
                            "content": "return"
                        }
                    ],
                    "content": "return result"
                }
            ],
            "content": "def get_set_bits_count_using_brian_kernighans_algorithm(number:int)->int:\n\"\"\" \\n     Count the number of set bits in a 32 bit integer \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(25) \\n     3 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(37) \\n     3 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(21) \\n     3 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(58) \\n     4 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(0) \\n     0 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(256) \\n     1 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of input must not be negative \\n     \"\"\"\nif number<0:\nraise ValueError(\"the value of input must not be negative\")\nresult=0\nwhile number:\nnumber&=number-1\nresult+=1\nreturn result\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_set_bits_count_using_modulo_operator",
            "range": [
                60,
                118
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "number",
                    "range": [
                        63,
                        65
                    ],
                    "children": [],
                    "content": "number:int"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        69,
                        69
                    ],
                    "children": [],
                    "content": "int"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        72,
                        74
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Count the number of set bits in a 32 bit integer \\n     >>> get_set_bits_count_using_modulo_operator(25) \\n     3 \\n     >>> get_set_bits_count_using_modulo_operator(37) \\n     3 \\n     >>> get_set_bits_count_using_modulo_operator(21) \\n     3 \\n     >>> get_set_bits_count_using_modulo_operator(58) \\n     4 \\n     >>> get_set_bits_count_using_modulo_operator(0) \\n     0 \\n     >>> get_set_bits_count_using_modulo_operator(256) \\n     1 \\n     >>> get_set_bits_count_using_modulo_operator(-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of input must not be negative \\n     \"\"\""
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        76,
                        87
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                77,
                                79
                            ],
                            "children": [],
                            "content": "number<0"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "",
                            "range": [
                                82,
                                86
                            ],
                            "children": [
                                {
                                    "type": "Exception",
                                    "name": "ValueError",
                                    "range": [
                                        83,
                                        83
                                    ],
                                    "children": [],
                                    "content": "ValueError"
                                },
                                {
                                    "type": "Message",
                                    "name": "",
                                    "range": [
                                        85,
                                        85
                                    ],
                                    "children": [],
                                    "content": "\"the value of input must not be negative\""
                                }
                            ],
                            "content": "raise ValueError(\"the value of input must not be negative\")"
                        }
                    ],
                    "content": "if number<0:\nraise ValueError(\"the value of input must not be negative\")\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "result",
                    "range": [
                        88,
                        90
                    ],
                    "children": [],
                    "content": "result=0"
                },
                {
                    "type": "WhileStatement",
                    "name": "",
                    "range": [
                        92,
                        115
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                93,
                                93
                            ],
                            "children": [],
                            "content": "number"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                96,
                                109
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        97,
                                        102
                                    ],
                                    "children": [],
                                    "content": "number%2==1"
                                },
                                {
                                    "type": "Increment",
                                    "name": "result",
                                    "range": [
                                        105,
                                        108
                                    ],
                                    "children": [],
                                    "content": "result+=1"
                                }
                            ],
                            "content": "if number%2==1:\nresult+=1\n"
                        },
                        {
                            "type": "Assignment",
                            "name": "number",
                            "range": [
                                110,
                                114
                            ],
                            "children": [],
                            "content": "number>>=1"
                        }
                    ],
                    "content": "while number:\nif number%2==1:\nresult+=1\nnumber>>=1\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        116,
                        117
                    ],
                    "children": [],
                    "content": "return result"
                }
            ],
            "content": "def get_set_bits_count_using_modulo_operator(number:int)->int:\n\"\"\" \\n     Count the number of set bits in a 32 bit integer \\n     >>> get_set_bits_count_using_modulo_operator(25) \\n     3 \\n     >>> get_set_bits_count_using_modulo_operator(37) \\n     3 \\n     >>> get_set_bits_count_using_modulo_operator(21) \\n     3 \\n     >>> get_set_bits_count_using_modulo_operator(58) \\n     4 \\n     >>> get_set_bits_count_using_modulo_operator(0) \\n     0 \\n     >>> get_set_bits_count_using_modulo_operator(256) \\n     1 \\n     >>> get_set_bits_count_using_modulo_operator(-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of input must not be negative \\n     \"\"\"\nif number<0:\nraise ValueError(\"the value of input must not be negative\")\nresult=0\nwhile number:\nif number%2==1:\nresult+=1\nnumber>>=1\nreturn result\n"
        },
        {
            "type": "FunctionDecl",
            "name": "benchmark",
            "range": [
                121,
                134
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        121,
                        128
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                121,
                                124
                            ],
                            "children": [],
                            "content": "def benchmark()"
                        },
                        {
                            "type": "Identifier",
                            "name": "benchmark",
                            "range": [
                                122,
                                131
                            ],
                            "children": [],
                            "content": "benchmark()->None:\n\"\"\" \\n     Benchmark code for comparing 2 functions, with different length int values. \\n     Brian Kernighan's algorithm is consistently faster than using modulo_operator. \\n     \""
                        },
                        {
                            "type": "Operator",
                            "name": "->",
                            "range": [
                                125,
                                127
                            ],
                            "children": [],
                            "content": "->None"
                        },
                        {
                            "type": "Keyword",
                            "name": "None",
                            "range": [
                                127,
                                131
                            ],
                            "children": [],
                            "content": "None:\n\"\"\" \\n     Benchmark code for comparing 2 functions, with different length int values. \\n     Brian Kernighan's algorithm is consistently faster than using modulo_operator. \\n     \""
                        }
                    ],
                    "content": "def benchmark()->None:"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        129,
                        134
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\" \\n     Benchmark code for comparing 2 functions, with different length int values. \\n     Brian Kernighan's algorithm is consistently faster than using modulo_operator. \\n     \"",
                            "range": [
                                131,
                                132
                            ],
                            "children": [],
                            "content": "\" \\n     Benchmark code for comparing 2 functions, with different length int values. \\n     Brian Kernighan's algorithm is consistently faster than using modulo_operator. \\n     \"\"\""
                        }
                    ],
                    "content": "\n\"\"\" \\n     Benchmark code for comparing 2 functions, with different length int values. \\n     Brian Kernighan's algorithm is consistently faster than using modulo_operator. \\n     \"\"\"\n\n"
                }
            ],
            "content": "def benchmark()->None:\n\"\"\" \\n     Benchmark code for comparing 2 functions, with different length int values. \\n     Brian Kernighan's algorithm is consistently faster than using modulo_operator. \\n     \"\"\"\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "do_benchmark",
            "range": [
                135,
                211
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        135,
                        145
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                135,
                                138
                            ],
                            "children": [],
                            "content": "def do_benchmark(number"
                        },
                        {
                            "type": "Identifier",
                            "name": "do_benchmark",
                            "range": [
                                136,
                                148
                            ],
                            "children": [],
                            "content": "do_benchmark(number:int)->None:\nsetup="
                        },
                        {
                            "type": "Identifier",
                            "name": "number",
                            "range": [
                                138,
                                144
                            ],
                            "children": [],
                            "content": "number:int)->None"
                        },
                        {
                            "type": "Keyword",
                            "name": "int",
                            "range": [
                                140,
                                143
                            ],
                            "children": [],
                            "content": "int)->"
                        },
                        {
                            "type": "Operator",
                            "name": "->",
                            "range": [
                                142,
                                144
                            ],
                            "children": [],
                            "content": "->None"
                        },
                        {
                            "type": "Keyword",
                            "name": "None",
                            "range": [
                                144,
                                148
                            ],
                            "children": [],
                            "content": "None:\nsetup="
                        }
                    ],
                    "content": "def do_benchmark(number:int)->None:"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        146,
                        211
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "",
                            "range": [
                                147,
                                150
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "setup",
                                    "range": [
                                        147,
                                        152
                                    ],
                                    "children": [],
                                    "content": "setup=\"import __main__ as z\"\nprint("
                                },
                                {
                                    "type": "Literal",
                                    "name": "\"import __main__ as z\"",
                                    "range": [
                                        149,
                                        150
                                    ],
                                    "children": [],
                                    "content": "\"import __main__ as z\"\n"
                                }
                            ],
                            "content": "setup=\"import __main__ as z\"\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                151,
                                156
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "print",
                                    "range": [
                                        151,
                                        156
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "print",
                                            "range": [
                                                151,
                                                156
                                            ],
                                            "children": [],
                                            "content": "print(f \"Benchmark when {number = }:\")\n"
                                        },
                                        {
                                            "type": "TemplateLiteral",
                                            "name": "",
                                            "range": [
                                                153,
                                                155
                                            ],
                                            "children": [
                                                {
                                                    "type": "TemplateElement",
                                                    "name": "\"Benchmark when {number = }:\"",
                                                    "range": [
                                                        154,
                                                        155
                                                    ],
                                                    "children": [],
                                                    "content": "\"Benchmark when {number = }:\")"
                                                }
                                            ],
                                            "content": "f \"Benchmark when {number = }:\")"
                                        }
                                    ],
                                    "content": "print(f \"Benchmark when {number = }:\")\n"
                                }
                            ],
                            "content": "print(f \"Benchmark when {number = }:\")\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                157,
                                162
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "print",
                                    "range": [
                                        157,
                                        162
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "print",
                                            "range": [
                                                157,
                                                162
                                            ],
                                            "children": [],
                                            "content": "print(f \"{get_set_bits_count_using_modulo_operator(number) = }\")\n"
                                        },
                                        {
                                            "type": "TemplateLiteral",
                                            "name": "",
                                            "range": [
                                                159,
                                                161
                                            ],
                                            "children": [
                                                {
                                                    "type": "TemplateElement",
                                                    "name": "\"{get_set_bits_count_using_modulo_operator(number) = }\"",
                                                    "range": [
                                                        160,
                                                        161
                                                    ],
                                                    "children": [],
                                                    "content": "\"{get_set_bits_count_using_modulo_operator(number) = }\")"
                                                }
                                            ],
                                            "content": "f \"{get_set_bits_count_using_modulo_operator(number) = }\")"
                                        }
                                    ],
                                    "content": "print(f \"{get_set_bits_count_using_modulo_operator(number) = }\")\n"
                                }
                            ],
                            "content": "print(f \"{get_set_bits_count_using_modulo_operator(number) = }\")\n"
                        },
                        {
                            "type": "Assignment",
                            "name": "",
                            "range": [
                                163,
                                176
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "timing",
                                    "range": [
                                        163,
                                        169
                                    ],
                                    "children": [],
                                    "content": "timing=timeit(\nf \"z.get_set_bits_count_using_modulo_operator({number})\""
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "timeit",
                                    "range": [
                                        165,
                                        176
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "timeit",
                                            "range": [
                                                165,
                                                171
                                            ],
                                            "children": [],
                                            "content": "timeit(\nf \"z.get_set_bits_count_using_modulo_operator({number})\",setup"
                                        },
                                        {
                                            "type": "TemplateLiteral",
                                            "name": "",
                                            "range": [
                                                168,
                                                170
                                            ],
                                            "children": [
                                                {
                                                    "type": "TemplateElement",
                                                    "name": "\"z.get_set_bits_count_using_modulo_operator({number})\"",
                                                    "range": [
                                                        169,
                                                        170
                                                    ],
                                                    "children": [],
                                                    "content": "\"z.get_set_bits_count_using_modulo_operator({number})\","
                                                }
                                            ],
                                            "content": "f \"z.get_set_bits_count_using_modulo_operator({number})\","
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "setup",
                                            "range": [
                                                171,
                                                176
                                            ],
                                            "children": [],
                                            "content": "setup=setup\n)\n"
                                        }
                                    ],
                                    "content": "timeit(\nf \"z.get_set_bits_count_using_modulo_operator({number})\",setup=setup\n)\n"
                                }
                            ],
                            "content": "timing=timeit(\nf \"z.get_set_bits_count_using_modulo_operator({number})\",setup=setup\n)\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                177,
                                182
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "print",
                                    "range": [
                                        177,
                                        182
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "print",
                                            "range": [
                                                177,
                                                182
                                            ],
                                            "children": [],
                                            "content": "print(f \"timeit() runs in {timing} seconds\")\n"
                                        },
                                        {
                                            "type": "TemplateLiteral",
                                            "name": "",
                                            "range": [
                                                179,
                                                181
                                            ],
                                            "children": [
                                                {
                                                    "type": "TemplateElement",
                                                    "name": "\"timeit() runs in {timing} seconds\"",
                                                    "range": [
                                                        180,
                                                        181
                                                    ],
                                                    "children": [],
                                                    "content": "\"timeit() runs in {timing} seconds\")"
                                                }
                                            ],
                                            "content": "f \"timeit() runs in {timing} seconds\")"
                                        }
                                    ],
                                    "content": "print(f \"timeit() runs in {timing} seconds\")\n"
                                }
                            ],
                            "content": "print(f \"timeit() runs in {timing} seconds\")\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                183,
                                188
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "print",
                                    "range": [
                                        183,
                                        188
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "print",
                                            "range": [
                                                183,
                                                188
                                            ],
                                            "children": [],
                                            "content": "print(f \"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\n"
                                        },
                                        {
                                            "type": "TemplateLiteral",
                                            "name": "",
                                            "range": [
                                                185,
                                                187
                                            ],
                                            "children": [
                                                {
                                                    "type": "TemplateElement",
                                                    "name": "\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\"",
                                                    "range": [
                                                        186,
                                                        187
                                                    ],
                                                    "children": [],
                                                    "content": "\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")"
                                                }
                                            ],
                                            "content": "f \"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")"
                                        }
                                    ],
                                    "content": "print(f \"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\n"
                                }
                            ],
                            "content": "print(f \"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\n"
                        },
                        {
                            "type": "Assignment",
                            "name": "",
                            "range": [
                                189,
                                204
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "timing",
                                    "range": [
                                        189,
                                        195
                                    ],
                                    "children": [],
                                    "content": "timing=timeit(\nf \"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\""
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "timeit",
                                    "range": [
                                        191,
                                        204
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "timeit",
                                            "range": [
                                                191,
                                                197
                                            ],
                                            "children": [],
                                            "content": "timeit(\nf \"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n"
                                        },
                                        {
                                            "type": "TemplateLiteral",
                                            "name": "",
                                            "range": [
                                                194,
                                                196
                                            ],
                                            "children": [
                                                {
                                                    "type": "TemplateElement",
                                                    "name": "\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\"",
                                                    "range": [
                                                        195,
                                                        196
                                                    ],
                                                    "children": [],
                                                    "content": "\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\","
                                                }
                                            ],
                                            "content": "f \"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\","
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "setup",
                                            "range": [
                                                198,
                                                203
                                            ],
                                            "children": [],
                                            "content": "setup=setup,\n)"
                                        }
                                    ],
                                    "content": "timeit(\nf \"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\nsetup=setup,\n)\n"
                                }
                            ],
                            "content": "timing=timeit(\nf \"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\nsetup=setup,\n)\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                205,
                                210
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "print",
                                    "range": [
                                        205,
                                        210
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "print",
                                            "range": [
                                                205,
                                                210
                                            ],
                                            "children": [],
                                            "content": "print(f \"timeit() runs in {timing} seconds\")\n"
                                        },
                                        {
                                            "type": "TemplateLiteral",
                                            "name": "",
                                            "range": [
                                                207,
                                                209
                                            ],
                                            "children": [
                                                {
                                                    "type": "TemplateElement",
                                                    "name": "\"timeit() runs in {timing} seconds\"",
                                                    "range": [
                                                        208,
                                                        209
                                                    ],
                                                    "children": [],
                                                    "content": "\"timeit() runs in {timing} seconds\")"
                                                }
                                            ],
                                            "content": "f \"timeit() runs in {timing} seconds\")"
                                        }
                                    ],
                                    "content": "print(f \"timeit() runs in {timing} seconds\")\n"
                                }
                            ],
                            "content": "print(f \"timeit() runs in {timing} seconds\")\n"
                        }
                    ],
                    "content": "\nsetup=\"import __main__ as z\"\nprint(f \"Benchmark when {number = }:\")\nprint(f \"{get_set_bits_count_using_modulo_operator(number) = }\")\ntiming=timeit(\nf \"z.get_set_bits_count_using_modulo_operator({number})\",setup=setup\n)\nprint(f \"timeit() runs in {timing} seconds\")\nprint(f \"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\ntiming=timeit(\nf \"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\nsetup=setup,\n)\nprint(f \"timeit() runs in {timing} seconds\")\n\n"
                }
            ],
            "content": "def do_benchmark(number:int)->None:\nsetup=\"import __main__ as z\"\nprint(f \"Benchmark when {number = }:\")\nprint(f \"{get_set_bits_count_using_modulo_operator(number) = }\")\ntiming=timeit(\nf \"z.get_set_bits_count_using_modulo_operator({number})\",setup=setup\n)\nprint(f \"timeit() runs in {timing} seconds\")\nprint(f \"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\ntiming=timeit(\nf \"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\nsetup=setup,\n)\nprint(f \"timeit() runs in {timing} seconds\")\n\n"
        },
        {
            "type": "ForStatement",
            "name": "",
            "range": [
                212,
                235
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "for",
                    "range": [
                        212,
                        215
                    ],
                    "children": [],
                    "content": "for number in("
                },
                {
                    "type": "Identifier",
                    "name": "number",
                    "range": [
                        213,
                        219
                    ],
                    "children": [],
                    "content": "number in(25,37,"
                },
                {
                    "type": "Tuple",
                    "name": "",
                    "range": [
                        215,
                        224
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "25",
                            "range": [
                                216,
                                218
                            ],
                            "children": [],
                            "content": "25,37"
                        },
                        {
                            "type": "Literal",
                            "name": "37",
                            "range": [
                                218,
                                220
                            ],
                            "children": [],
                            "content": "37,58"
                        },
                        {
                            "type": "Literal",
                            "name": "58",
                            "range": [
                                220,
                                222
                            ],
                            "children": [],
                            "content": "58,0"
                        },
                        {
                            "type": "Literal",
                            "name": "0",
                            "range": [
                                222,
                                223
                            ],
                            "children": [],
                            "content": "0)"
                        }
                    ],
                    "content": "(25,37,58,0):"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        225,
                        235
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                226,
                                230
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "do_benchmark",
                                    "range": [
                                        226,
                                        230
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "do_benchmark",
                                            "range": [
                                                226,
                                                238
                                            ],
                                            "children": [],
                                            "content": "do_benchmark(number)\nprint()\n\n\nif __name__"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "number",
                                            "range": [
                                                228,
                                                234
                                            ],
                                            "children": [],
                                            "content": "number)\nprint()\n"
                                        }
                                    ],
                                    "content": "do_benchmark(number)\n"
                                }
                            ],
                            "content": "do_benchmark(number)\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                231,
                                235
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "print",
                                    "range": [
                                        231,
                                        235
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "print",
                                            "range": [
                                                231,
                                                236
                                            ],
                                            "children": [],
                                            "content": "print()\n\n\n"
                                        }
                                    ],
                                    "content": "print()\n\n"
                                }
                            ],
                            "content": "print()\n\n"
                        }
                    ],
                    "content": "\ndo_benchmark(number)\nprint()\n\n"
                }
            ],
            "content": "for number in(25,37,58,0):\ndo_benchmark(number)\nprint()\n\n"
        }
    ],
    "content": "from timeit import timeit\n\n\ndef get_set_bits_count_using_brian_kernighans_algorithm(number:int)->int:\n\"\"\" \\n     Count the number of set bits in a 32 bit integer \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(25) \\n     3 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(37) \\n     3 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(21) \\n     3 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(58) \\n     4 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(0) \\n     0 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(256) \\n     1 \\n     >>> get_set_bits_count_using_brian_kernighans_algorithm(-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of input must not be negative \\n     \"\"\"\nif number<0:\nraise ValueError(\"the value of input must not be negative\")\nresult=0\nwhile number:\nnumber&=number-1\nresult+=1\nreturn result\n\n\ndef get_set_bits_count_using_modulo_operator(number:int)->int:\n\"\"\" \\n     Count the number of set bits in a 32 bit integer \\n     >>> get_set_bits_count_using_modulo_operator(25) \\n     3 \\n     >>> get_set_bits_count_using_modulo_operator(37) \\n     3 \\n     >>> get_set_bits_count_using_modulo_operator(21) \\n     3 \\n     >>> get_set_bits_count_using_modulo_operator(58) \\n     4 \\n     >>> get_set_bits_count_using_modulo_operator(0) \\n     0 \\n     >>> get_set_bits_count_using_modulo_operator(256) \\n     1 \\n     >>> get_set_bits_count_using_modulo_operator(-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of input must not be negative \\n     \"\"\"\nif number<0:\nraise ValueError(\"the value of input must not be negative\")\nresult=0\nwhile number:\nif number%2==1:\nresult+=1\nnumber>>=1\nreturn result\n\n\ndef benchmark()->None:\n\"\"\" \\n     Benchmark code for comparing 2 functions, with different length int values. \\n     Brian Kernighan's algorithm is consistently faster than using modulo_operator. \\n     \"\"\"\n\ndef do_benchmark(number:int)->None:\nsetup=\"import __main__ as z\"\nprint(f \"Benchmark when {number = }:\")\nprint(f \"{get_set_bits_count_using_modulo_operator(number) = }\")\ntiming=timeit(\nf \"z.get_set_bits_count_using_modulo_operator({number})\",setup=setup\n)\nprint(f \"timeit() runs in {timing} seconds\")\nprint(f \"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\ntiming=timeit(\nf \"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\nsetup=setup,\n)\nprint(f \"timeit() runs in {timing} seconds\")\n\nfor number in(25,37,58,0):\ndo_benchmark(number)\nprint()\n\n\n"
}