{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        194
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                1,
                1
            ],
            "children": [],
            "content": "\" \\n In this problem, we want to determine all possible permutations \\n of the given sequence. We use backtracking to solve this problem. \\n  \\n Time complexity: O(n! * n), \\n where n denotes the length of the given sequence. \\n \""
        },
        {
            "type": "ImportDeclaration",
            "name": "annotations",
            "range": [
                4,
                8
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        4,
                        4
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "ModuleSpecifier",
                    "name": "__future__",
                    "range": [
                        5,
                        5
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        6,
                        6
                    ],
                    "children": [],
                    "content": "__future__"
                },
                {
                    "type": "ImportedDefaultBinding",
                    "name": "annotations",
                    "range": [
                        7,
                        7
                    ],
                    "children": [],
                    "content": "import"
                }
            ],
            "content": "\nfrom __future__ import annotations"
        },
        {
            "type": "FunctionDecl",
            "name": "generate_all_permutations",
            "range": [
                9,
                25
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "sequence",
                    "range": [
                        12,
                        19
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "list[int | str]",
                            "range": [
                                14,
                                19
                            ],
                            "children": [],
                            "content": "(sequence:list[int"
                        }
                    ],
                    "content": "def generate_all_permutations(sequence:list[int"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        23,
                        23
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        25,
                        25
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "create_state_space_tree",
                            "range": [
                                26,
                                48
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "create_state_space_tree",
                                    "range": [
                                        26,
                                        48
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "sequence",
                                            "range": [
                                                28,
                                                28
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "[]",
                                            "range": [
                                                30,
                                                31
                                            ],
                                            "children": [],
                                            "content": "(sequence"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "0",
                                            "range": [
                                                33,
                                                33
                                            ],
                                            "children": [],
                                            "content": "["
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "[0 for i in range(len(sequence))]",
                                            "range": [
                                                35,
                                                47
                                            ],
                                            "children": [
                                                {
                                                    "type": "ListComprehension",
                                                    "name": "",
                                                    "range": [
                                                        35,
                                                        47
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "0",
                                                            "range": [
                                                                36,
                                                                36
                                                            ],
                                                            "children": [],
                                                            "content": "0"
                                                        },
                                                        {
                                                            "type": "ForStatement",
                                                            "name": "for i in range(len(sequence))",
                                                            "range": [
                                                                37,
                                                                46
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "VariableDeclaration",
                                                                    "name": "i",
                                                                    "range": [
                                                                        38,
                                                                        38
                                                                    ],
                                                                    "children": [],
                                                                    "content": "["
                                                                },
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "range",
                                                                    "range": [
                                                                        40,
                                                                        46
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "len(sequence)",
                                                                            "range": [
                                                                                42,
                                                                                45
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "CallExpression",
                                                                                    "name": "len",
                                                                                    "range": [
                                                                                        42,
                                                                                        45
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Argument",
                                                                                            "name": "sequence",
                                                                                            "range": [
                                                                                                44,
                                                                                                44
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "("
                                                                                        }
                                                                                    ],
                                                                                    "content": "in range(len"
                                                                                }
                                                                            ],
                                                                            "content": "in range(len"
                                                                        }
                                                                    ],
                                                                    "content": "for i in range(len("
                                                                }
                                                            ],
                                                            "content": ",[0for i in range(len("
                                                        }
                                                    ],
                                                    "content": ",0,[0for i in range(len(sequence"
                                                }
                                            ],
                                            "content": ",0,[0for i in range(len(sequence"
                                        }
                                    ],
                                    "content": "None:\ncreate_state_space_tree(sequence,[],0,[0for i in range(len(sequence)"
                                }
                            ],
                            "content": "None:\ncreate_state_space_tree(sequence,[],0,[0for i in range(len(sequence)"
                        }
                    ],
                    "content": ">"
                }
            ],
            "content": "\n\n\ndef generate_all_permutations(sequence:list[int|str])->"
        },
        {
            "type": "FunctionDecl",
            "name": "create_state_space_tree",
            "range": [
                51,
                186
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        53,
                        88
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "sequence",
                            "range": [
                                55,
                                62
                            ],
                            "children": [],
                            "content": "def create_state_space_tree(\nsequence:list["
                        },
                        {
                            "type": "Parameter",
                            "name": "current_sequence",
                            "range": [
                                65,
                                72
                            ],
                            "children": [],
                            "content": "str],\ncurrent_sequence:list["
                        },
                        {
                            "type": "Parameter",
                            "name": "index",
                            "range": [
                                75,
                                78
                            ],
                            "children": [],
                            "content": "str],\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "index_used",
                            "range": [
                                80,
                                85
                            ],
                            "children": [],
                            "content": ":int,\nindex_used:"
                        }
                    ],
                    "content": "\n\ndef create_state_space_tree(\nsequence:list[int|str],\ncurrent_sequence:list[int|str],\nindex:int,\nindex_used:list[int"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        89,
                        91
                    ],
                    "children": [],
                    "content": "],\n"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        94,
                        102
                    ],
                    "children": [],
                    "content": ">None:\n\"\"\" \\n     Creates a state space tree to iterate through each branch using DFS. \\n     We know that each state has exactly len(sequence) - index children. \\n     It terminates when it reaches the end of the given sequence. \\n  \\n     :param sequence: The input sequence for which permutations are generated. \\n     :param current_sequence: The current permutation being built. \\n     :param index: The current index in the sequence. \\n     :param index_used: list to track which elements are used in permutation. \\n  \\n     Example 1: \\n     >>> sequence = [1, 2, 3] \\n     >>> current_sequence = [] \\n     >>> index_used = [False, False, False] \\n     >>> create_state_space_tree(sequence, current_sequence, 0, index_used) \\n     [1, 2, 3] \\n     [1, 3, 2] \\n     [2, 1, 3] \\n     [2, 3, 1] \\n     [3, 1, 2] \\n     [3, 2, 1] \\n  \\n     Example 2: \\n     >>> sequence = [\" A\", \"B"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        103,
                        186
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                105,
                                121
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        106,
                                        112
                                    ],
                                    "children": [],
                                    "content": "\"\"\n\nif index=="
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "body",
                                    "range": [
                                        114,
                                        121
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "print_statement",
                                            "range": [
                                                115,
                                                118
                                            ],
                                            "children": [],
                                            "content": "sequence):\n"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return_statement",
                                            "range": [
                                                120,
                                                121
                                            ],
                                            "children": [],
                                            "content": "(current_sequence"
                                        }
                                    ],
                                    "content": "(sequence):\nprint(current_sequence"
                                }
                            ],
                            "content": "\"] \\n     >>> current_sequence = [] \\n     >>> index_used = [False, False, False] \\n     >>> create_state_space_tree(sequence, current_sequence, 0, index_used) \\n     ['A', 'B', 'C'] \\n     ['A', 'C', 'B'] \\n     ['B', 'A', 'C'] \\n     ['B', 'C', 'A'] \\n     ['C', 'A', 'B'] \\n     ['C', 'B', 'A'] \\n  \\n     Example 3: \\n     >>> sequence = [1] \\n     >>> current_sequence = [] \\n     >>> index_used = [False] \\n     >>> create_state_space_tree(sequence, current_sequence, 0, index_used) \\n     [1] \\n     \"\"\"\n\nif index==len(sequence):\nprint(current_sequence"
                        },
                        {
                            "type": "ForStatement",
                            "name": "for_loop",
                            "range": [
                                123,
                                185
                            ],
                            "children": [
                                {
                                    "type": "Initialization",
                                    "name": "initialization",
                                    "range": [
                                        124,
                                        132
                                    ],
                                    "children": [],
                                    "content": "return\n\nfor i in range(len"
                                },
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        133,
                                        141
                                    ],
                                    "children": [],
                                    "content": "(sequence)):\nif not index_used"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "body",
                                    "range": [
                                        142,
                                        185
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "if_statement",
                                            "range": [
                                                135,
                                                141
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "condition",
                                                    "range": [
                                                        136,
                                                        140
                                                    ],
                                                    "children": [],
                                                    "content": "):\nif not"
                                                },
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "body",
                                                    "range": [
                                                        142,
                                                        185
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "expression_statement",
                                                            "range": [
                                                                143,
                                                                151
                                                            ],
                                                            "children": [],
                                                            "content": "i]:\ncurrent_sequence.append(sequence"
                                                        },
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "assignment",
                                                            "range": [
                                                                153,
                                                                158
                                                            ],
                                                            "children": [],
                                                            "content": "i])\nindex_used["
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "function_call",
                                                            "range": [
                                                                160,
                                                                171
                                                            ],
                                                            "children": [],
                                                            "content": "]=True\ncreate_state_space_tree(sequence,current_sequence,index+"
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "expression_statement",
                                                            "range": [
                                                                173,
                                                                177
                                                            ],
                                                            "children": [],
                                                            "content": ",index_used)\ncurrent_sequence"
                                                        },
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "assignment",
                                                            "range": [
                                                                179,
                                                                184
                                                            ],
                                                            "children": [],
                                                            "content": "pop()\nindex_used["
                                                        }
                                                    ],
                                                    "content": "[i]:\ncurrent_sequence.append(sequence[i])\nindex_used[i]=True\ncreate_state_space_tree(sequence,current_sequence,index+1,index_used)\ncurrent_sequence.pop()\nindex_used[i"
                                                }
                                            ],
                                            "content": ")):\nif not index_used"
                                        }
                                    ],
                                    "content": "[i]:\ncurrent_sequence.append(sequence[i])\nindex_used[i]=True\ncreate_state_space_tree(sequence,current_sequence,index+1,index_used)\ncurrent_sequence.pop()\nindex_used[i"
                                }
                            ],
                            "content": "\nreturn\n\nfor i in range(len(sequence)):\nif not index_used[i]:\ncurrent_sequence.append(sequence[i])\nindex_used[i]=True\ncreate_state_space_tree(sequence,current_sequence,index+1,index_used)\ncurrent_sequence.pop()\nindex_used[i"
                        }
                    ],
                    "content": "\", \"C \"] \\n     >>> current_sequence = [] \\n     >>> index_used = [False, False, False] \\n     >>> create_state_space_tree(sequence, current_sequence, 0, index_used) \\n     ['A', 'B', 'C'] \\n     ['A', 'C', 'B'] \\n     ['B', 'A', 'C'] \\n     ['B', 'C', 'A'] \\n     ['C', 'A', 'B'] \\n     ['C', 'B', 'A'] \\n  \\n     Example 3: \\n     >>> sequence = [1] \\n     >>> current_sequence = [] \\n     >>> index_used = [False] \\n     >>> create_state_space_tree(sequence, current_sequence, 0, index_used) \\n     [1] \\n     \"\"\"\n\nif index==len(sequence):\nprint(current_sequence)\nreturn\n\nfor i in range(len(sequence)):\nif not index_used[i]:\ncurrent_sequence.append(sequence[i])\nindex_used[i]=True\ncreate_state_space_tree(sequence,current_sequence,index+1,index_used)\ncurrent_sequence.pop()\nindex_used[i]"
                }
            ],
            "content": ")\n\n\ndef create_state_space_tree(\nsequence:list[int|str],\ncurrent_sequence:list[int|str],\nindex:int,\nindex_used:list[int],\n)->None:\n\"\"\" \\n     Creates a state space tree to iterate through each branch using DFS. \\n     We know that each state has exactly len(sequence) - index children. \\n     It terminates when it reaches the end of the given sequence. \\n  \\n     :param sequence: The input sequence for which permutations are generated. \\n     :param current_sequence: The current permutation being built. \\n     :param index: The current index in the sequence. \\n     :param index_used: list to track which elements are used in permutation. \\n  \\n     Example 1: \\n     >>> sequence = [1, 2, 3] \\n     >>> current_sequence = [] \\n     >>> index_used = [False, False, False] \\n     >>> create_state_space_tree(sequence, current_sequence, 0, index_used) \\n     [1, 2, 3] \\n     [1, 3, 2] \\n     [2, 1, 3] \\n     [2, 3, 1] \\n     [3, 1, 2] \\n     [3, 2, 1] \\n  \\n     Example 2: \\n     >>> sequence = [\" A\", \"B\", \"C \"] \\n     >>> current_sequence = [] \\n     >>> index_used = [False, False, False] \\n     >>> create_state_space_tree(sequence, current_sequence, 0, index_used) \\n     ['A', 'B', 'C'] \\n     ['A', 'C', 'B'] \\n     ['B', 'A', 'C'] \\n     ['B', 'C', 'A'] \\n     ['C', 'A', 'B'] \\n     ['C', 'B', 'A'] \\n  \\n     Example 3: \\n     >>> sequence = [1] \\n     >>> current_sequence = [] \\n     >>> index_used = [False] \\n     >>> create_state_space_tree(sequence, current_sequence, 0, index_used) \\n     [1] \\n     \"\"\"\n\nif index==len(sequence):\nprint(current_sequence)\nreturn\n\nfor i in range(len(sequence)):\nif not index_used[i]:\ncurrent_sequence.append(sequence[i])\nindex_used[i]=True\ncreate_state_space_tree(sequence,current_sequence,index+1,index_used)\ncurrent_sequence.pop()\nindex_used[i]"
        },
        {
            "type": "Literal",
            "name": "",
            "range": [
                187,
                187
            ],
            "children": [],
            "content": "="
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                188,
                192
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "print",
                    "range": [
                        188,
                        192
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "",
                            "range": [
                                188,
                                192
                            ],
                            "children": [],
                            "content": "False\n\n\n\"\""
                        }
                    ],
                    "content": "False\n\n\n\"\""
                }
            ],
            "content": "False\n\n\n\"\""
        },
        {
            "type": "Literal",
            "name": "",
            "range": [
                193,
                193
            ],
            "children": [],
            "content": "\" \\n remove the comment to take an input from the user \\n  \\n print(\""
        },
        {
            "type": "Literal",
            "name": "",
            "range": [
                194,
                194
            ],
            "children": [],
            "content": "Enter"
        }
    ],
    "content": "\"\"\" \\n In this problem, we want to determine all possible permutations \\n of the given sequence. We use backtracking to solve this problem. \\n  \\n Time complexity: O(n! * n), \\n where n denotes the length of the given sequence. \\n \"\"\"\n\nfrom __future__ import annotations\n\n\ndef generate_all_permutations(sequence:list[int|str])->None:\ncreate_state_space_tree(sequence,[],0,[0for i in range(len(sequence))])\n\n\ndef create_state_space_tree(\nsequence:list[int|str],\ncurrent_sequence:list[int|str],\nindex:int,\nindex_used:list[int],\n)->None:\n\"\"\" \\n     Creates a state space tree to iterate through each branch using DFS. \\n     We know that each state has exactly len(sequence) - index children. \\n     It terminates when it reaches the end of the given sequence. \\n  \\n     :param sequence: The input sequence for which permutations are generated. \\n     :param current_sequence: The current permutation being built. \\n     :param index: The current index in the sequence. \\n     :param index_used: list to track which elements are used in permutation. \\n  \\n     Example 1: \\n     >>> sequence = [1, 2, 3] \\n     >>> current_sequence = [] \\n     >>> index_used = [False, False, False] \\n     >>> create_state_space_tree(sequence, current_sequence, 0, index_used) \\n     [1, 2, 3] \\n     [1, 3, 2] \\n     [2, 1, 3] \\n     [2, 3, 1] \\n     [3, 1, 2] \\n     [3, 2, 1] \\n  \\n     Example 2: \\n     >>> sequence = [\" A\", \"B\", \"C \"] \\n     >>> current_sequence = [] \\n     >>> index_used = [False, False, False] \\n     >>> create_state_space_tree(sequence, current_sequence, 0, index_used) \\n     ['A', 'B', 'C'] \\n     ['A', 'C', 'B'] \\n     ['B', 'A', 'C'] \\n     ['B', 'C', 'A'] \\n     ['C', 'A', 'B'] \\n     ['C', 'B', 'A'] \\n  \\n     Example 3: \\n     >>> sequence = [1] \\n     >>> current_sequence = [] \\n     >>> index_used = [False] \\n     >>> create_state_space_tree(sequence, current_sequence, 0, index_used) \\n     [1] \\n     \"\"\"\n\nif index==len(sequence):\nprint(current_sequence)\nreturn\n\nfor i in range(len(sequence)):\nif not index_used[i]:\ncurrent_sequence.append(sequence[i])\nindex_used[i]=True\ncreate_state_space_tree(sequence,current_sequence,index+1,index_used)\ncurrent_sequence.pop()\nindex_used[i]=False\n\n\n\"\"\" \\n remove the comment to take an input from the user \\n  \\n print(\" Enter"
}