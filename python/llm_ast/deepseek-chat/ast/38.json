{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        4346
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                2
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "asyncio",
                    "range": [
                        0,
                        1
                    ],
                    "children": [],
                    "content": "import asyncio"
                }
            ],
            "content": "import asyncio\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                3,
                5
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "logging",
                    "range": [
                        3,
                        4
                    ],
                    "children": [],
                    "content": "import logging"
                }
            ],
            "content": "import logging\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                6,
                8
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "uuid",
                    "range": [
                        6,
                        7
                    ],
                    "children": [],
                    "content": "import uuid"
                }
            ],
            "content": "import uuid\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                9,
                13
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "defaultdict",
                    "range": [
                        11,
                        12
                    ],
                    "children": [],
                    "content": "import defaultdict"
                }
            ],
            "content": "from collections import defaultdict\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                14,
                20
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "datetime",
                    "range": [
                        16,
                        17
                    ],
                    "children": [],
                    "content": "import datetime"
                },
                {
                    "type": "ImportClause",
                    "name": "timezone",
                    "range": [
                        19,
                        20
                    ],
                    "children": [],
                    "content": "timezone\n"
                }
            ],
            "content": "from datetime import datetime,timezone\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                21,
                31
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "Any",
                    "range": [
                        23,
                        24
                    ],
                    "children": [],
                    "content": "import Any"
                },
                {
                    "type": "ImportClause",
                    "name": "Literal",
                    "range": [
                        26,
                        27
                    ],
                    "children": [],
                    "content": "Literal,"
                },
                {
                    "type": "ImportClause",
                    "name": "Optional",
                    "range": [
                        28,
                        29
                    ],
                    "children": [],
                    "content": "Optional,"
                },
                {
                    "type": "ImportClause",
                    "name": "Type",
                    "range": [
                        30,
                        31
                    ],
                    "children": [],
                    "content": "Type\n"
                }
            ],
            "content": "from typing import Any,Literal,Optional,Type\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                33,
                35
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "prisma",
                    "range": [
                        33,
                        34
                    ],
                    "children": [],
                    "content": "import prisma"
                }
            ],
            "content": "import prisma\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                36,
                48
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "AgentGraph",
                    "range": [
                        40,
                        41
                    ],
                    "children": [],
                    "content": "import AgentGraph"
                },
                {
                    "type": "ImportClause",
                    "name": "AgentGraphExecution",
                    "range": [
                        43,
                        44
                    ],
                    "children": [],
                    "content": "AgentGraphExecution,"
                },
                {
                    "type": "ImportClause",
                    "name": "AgentNode",
                    "range": [
                        45,
                        46
                    ],
                    "children": [],
                    "content": "AgentNode,"
                },
                {
                    "type": "ImportClause",
                    "name": "AgentNodeLink",
                    "range": [
                        47,
                        48
                    ],
                    "children": [],
                    "content": "AgentNodeLink\n"
                }
            ],
            "content": "from prisma.models import AgentGraph,AgentGraphExecution,AgentNode,AgentNodeLink\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                49,
                55
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "AgentGraphWhereInput",
                    "range": [
                        53,
                        54
                    ],
                    "children": [],
                    "content": "import AgentGraphWhereInput"
                }
            ],
            "content": "from prisma.types import AgentGraphWhereInput\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                56,
                62
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "computed_field",
                    "range": [
                        60,
                        61
                    ],
                    "children": [],
                    "content": "import computed_field"
                }
            ],
            "content": "from pydantic.fields import computed_field\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                64,
                72
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "AgentExecutorBlock",
                    "range": [
                        70,
                        71
                    ],
                    "children": [],
                    "content": "import AgentExecutorBlock"
                }
            ],
            "content": "from backend.blocks.agent import AgentExecutorBlock\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                73,
                83
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "AgentInputBlock",
                    "range": [
                        79,
                        80
                    ],
                    "children": [],
                    "content": "import AgentInputBlock"
                },
                {
                    "type": "ImportClause",
                    "name": "AgentOutputBlock",
                    "range": [
                        82,
                        83
                    ],
                    "children": [],
                    "content": "AgentOutputBlock\n"
                }
            ],
            "content": "from backend.blocks.basic import AgentInputBlock,AgentOutputBlock\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                84,
                90
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "json",
                    "range": [
                        88,
                        89
                    ],
                    "children": [],
                    "content": "import json"
                }
            ],
            "content": "from backend.util import json\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                92,
                103
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "BlockInput",
                    "range": [
                        95,
                        96
                    ],
                    "children": [],
                    "content": "import BlockInput"
                },
                {
                    "type": "ImportClause",
                    "name": "BlockType",
                    "range": [
                        98,
                        99
                    ],
                    "children": [],
                    "content": "BlockType,"
                },
                {
                    "type": "ImportClause",
                    "name": "get_block",
                    "range": [
                        100,
                        101
                    ],
                    "children": [],
                    "content": "get_block,"
                },
                {
                    "type": "ImportClause",
                    "name": "get_blocks",
                    "range": [
                        102,
                        103
                    ],
                    "children": [],
                    "content": "get_blocks\n"
                }
            ],
            "content": "from.block import BlockInput,BlockType,get_block,get_blocks\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                104,
                111
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "BaseDbModel",
                    "range": [
                        107,
                        108
                    ],
                    "children": [],
                    "content": "import BaseDbModel"
                },
                {
                    "type": "ImportClause",
                    "name": "transaction",
                    "range": [
                        110,
                        111
                    ],
                    "children": [],
                    "content": "transaction\n"
                }
            ],
            "content": "from.db import BaseDbModel,transaction\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                112,
                117
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "ExecutionStatus",
                    "range": [
                        115,
                        116
                    ],
                    "children": [],
                    "content": "import ExecutionStatus"
                }
            ],
            "content": "from.execution import ExecutionStatus\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                118,
                125
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "AGENT_GRAPH_INCLUDE",
                    "range": [
                        121,
                        122
                    ],
                    "children": [],
                    "content": "import AGENT_GRAPH_INCLUDE"
                },
                {
                    "type": "ImportClause",
                    "name": "AGENT_NODE_INCLUDE",
                    "range": [
                        124,
                        125
                    ],
                    "children": [],
                    "content": "AGENT_NODE_INCLUDE\n"
                }
            ],
            "content": "from.includes import AGENT_GRAPH_INCLUDE,AGENT_NODE_INCLUDE\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                126,
                131
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "Webhook",
                    "range": [
                        129,
                        130
                    ],
                    "children": [],
                    "content": "import Webhook"
                }
            ],
            "content": "from.integrations import Webhook\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "logger",
            "range": [
                133,
                141
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        134,
                        141
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "getLogger",
                            "range": [
                                135,
                                140
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "__name__",
                                    "range": [
                                        138,
                                        139
                                    ],
                                    "children": [],
                                    "content": "(__name__"
                                }
                            ],
                            "content": "logging.getLogger(__name__)"
                        }
                    ],
                    "content": "=logging.getLogger(__name__)\n"
                }
            ],
            "content": "logger=logging.getLogger(__name__)\n"
        },
        {
            "type": "ClassDecl",
            "name": "Link",
            "range": [
                144,
                172
            ],
            "children": [
                {
                    "type": "PropertyDecl",
                    "name": "source_id",
                    "range": [
                        151,
                        153
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                153,
                                153
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "source_id:str"
                },
                {
                    "type": "PropertyDecl",
                    "name": "sink_id",
                    "range": [
                        155,
                        157
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                157,
                                157
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "sink_id:str"
                },
                {
                    "type": "PropertyDecl",
                    "name": "source_name",
                    "range": [
                        159,
                        161
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                161,
                                161
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "source_name:str"
                },
                {
                    "type": "PropertyDecl",
                    "name": "sink_name",
                    "range": [
                        163,
                        165
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                165,
                                165
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "sink_name:str"
                },
                {
                    "type": "PropertyDecl",
                    "name": "is_static",
                    "range": [
                        167,
                        171
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "bool",
                            "range": [
                                169,
                                169
                            ],
                            "children": [],
                            "content": "bool"
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                170,
                                170
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "False",
                                    "range": [
                                        171,
                                        171
                                    ],
                                    "children": [],
                                    "content": "False"
                                }
                            ],
                            "content": "="
                        }
                    ],
                    "content": "is_static:bool=False"
                }
            ],
            "content": "class Link(BaseDbModel):\nsource_id:str\nsink_id:str\nsource_name:str\nsink_name:str\nis_static:bool=False\n"
        },
        {
            "type": "FunctionDecl",
            "name": "from_db",
            "range": [
                174,
                233
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "link",
                    "range": [
                        180,
                        182
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "AgentNodeLink",
                            "range": [
                                182,
                                182
                            ],
                            "children": [],
                            "content": "AgentNodeLink"
                        }
                    ],
                    "content": "link:AgentNodeLink"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        186,
                        232
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "Link",
                            "range": [
                                187,
                                232
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "id",
                                    "range": [
                                        190,
                                        194
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "link.id",
                                            "range": [
                                                192,
                                                194
                                            ],
                                            "children": [],
                                            "content": "link.id"
                                        }
                                    ],
                                    "content": "id=link.id"
                                },
                                {
                                    "type": "Argument",
                                    "name": "source_name",
                                    "range": [
                                        197,
                                        201
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "link.sourceName",
                                            "range": [
                                                199,
                                                201
                                            ],
                                            "children": [],
                                            "content": "link.sourceName"
                                        }
                                    ],
                                    "content": "source_name=link.sourceName"
                                },
                                {
                                    "type": "Argument",
                                    "name": "source_id",
                                    "range": [
                                        204,
                                        208
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "link.agentNodeSourceId",
                                            "range": [
                                                206,
                                                208
                                            ],
                                            "children": [],
                                            "content": "link.agentNodeSourceId"
                                        }
                                    ],
                                    "content": "source_id=link.agentNodeSourceId"
                                },
                                {
                                    "type": "Argument",
                                    "name": "sink_name",
                                    "range": [
                                        211,
                                        215
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "link.sinkName",
                                            "range": [
                                                213,
                                                215
                                            ],
                                            "children": [],
                                            "content": "link.sinkName"
                                        }
                                    ],
                                    "content": "sink_name=link.sinkName"
                                },
                                {
                                    "type": "Argument",
                                    "name": "sink_id",
                                    "range": [
                                        218,
                                        222
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "link.agentNodeSinkId",
                                            "range": [
                                                220,
                                                222
                                            ],
                                            "children": [],
                                            "content": "link.agentNodeSinkId"
                                        }
                                    ],
                                    "content": "sink_id=link.agentNodeSinkId"
                                },
                                {
                                    "type": "Argument",
                                    "name": "is_static",
                                    "range": [
                                        225,
                                        229
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "link.isStatic",
                                            "range": [
                                                227,
                                                229
                                            ],
                                            "children": [],
                                            "content": "link.isStatic"
                                        }
                                    ],
                                    "content": "is_static=link.isStatic"
                                }
                            ],
                            "content": "Link(\nid=link.id,\nsource_name=link.sourceName,\nsource_id=link.agentNodeSourceId,\nsink_name=link.sinkName,\nsink_id=link.agentNodeSinkId,\nis_static=link.isStatic,\n)"
                        }
                    ],
                    "content": "return Link(\nid=link.id,\nsource_name=link.sourceName,\nsource_id=link.agentNodeSourceId,\nsink_name=link.sinkName,\nsink_id=link.agentNodeSinkId,\nis_static=link.isStatic,\n)"
                }
            ],
            "content": "@staticmethod\ndef from_db(link:AgentNodeLink):\nreturn Link(\nid=link.id,\nsource_name=link.sourceName,\nsource_id=link.agentNodeSourceId,\nsink_name=link.sinkName,\nsink_id=link.agentNodeSinkId,\nis_static=link.isStatic,\n)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__hash__",
            "range": [
                235,
                263
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        238,
                        238
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        242,
                        262
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "hash",
                            "range": [
                                243,
                                262
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "tuple",
                                    "range": [
                                        245,
                                        261
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "self.source_id",
                                            "range": [
                                                246,
                                                248
                                            ],
                                            "children": [],
                                            "content": "self.source_id"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "self.sink_id",
                                            "range": [
                                                250,
                                                252
                                            ],
                                            "children": [],
                                            "content": "self.sink_id"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "self.source_name",
                                            "range": [
                                                254,
                                                256
                                            ],
                                            "children": [],
                                            "content": "self.source_name"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "self.sink_name",
                                            "range": [
                                                258,
                                                260
                                            ],
                                            "children": [],
                                            "content": "self.sink_name"
                                        }
                                    ],
                                    "content": "(self.source_id,self.sink_id,self.source_name,self.sink_name)"
                                }
                            ],
                            "content": "hash((self.source_id,self.sink_id,self.source_name,self.sink_name))"
                        }
                    ],
                    "content": "return hash((self.source_id,self.sink_id,self.source_name,self.sink_name))"
                }
            ],
            "content": "def __hash__(self):\nreturn hash((self.source_id,self.sink_id,self.source_name,self.sink_name))\n"
        },
        {
            "type": "ClassDecl",
            "name": "Node",
            "range": [
                266,
                334
            ],
            "children": [
                {
                    "type": "ClassHeritage",
                    "name": "BaseDbModel",
                    "range": [
                        268,
                        270
                    ],
                    "children": [],
                    "content": "(BaseDbModel)"
                },
                {
                    "type": "PropertyDecl",
                    "name": "block_id",
                    "range": [
                        273,
                        275
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                275,
                                275
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "block_id:str"
                },
                {
                    "type": "PropertyDecl",
                    "name": "input_default",
                    "range": [
                        277,
                        282
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "BlockInput",
                            "range": [
                                279,
                                279
                            ],
                            "children": [],
                            "content": "BlockInput"
                        },
                        {
                            "type": "ObjectLiteral",
                            "name": "{}",
                            "range": [
                                281,
                                282
                            ],
                            "children": [],
                            "content": "{}"
                        }
                    ],
                    "content": "input_default:BlockInput={}"
                },
                {
                    "type": "PropertyDecl",
                    "name": "metadata",
                    "range": [
                        291,
                        301
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "dict[str, Any]",
                            "range": [
                                293,
                                298
                            ],
                            "children": [],
                            "content": "dict[str,Any]"
                        },
                        {
                            "type": "ObjectLiteral",
                            "name": "{}",
                            "range": [
                                300,
                                301
                            ],
                            "children": [],
                            "content": "{}"
                        }
                    ],
                    "content": "metadata:dict[str,Any]={}"
                },
                {
                    "type": "PropertyDecl",
                    "name": "input_links",
                    "range": [
                        303,
                        311
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "list[Link]",
                            "range": [
                                305,
                                308
                            ],
                            "children": [],
                            "content": "list[Link]"
                        },
                        {
                            "type": "ArrayLiteral",
                            "name": "[]",
                            "range": [
                                310,
                                311
                            ],
                            "children": [],
                            "content": "[]"
                        }
                    ],
                    "content": "input_links:list[Link]=[]"
                },
                {
                    "type": "PropertyDecl",
                    "name": "output_links",
                    "range": [
                        313,
                        321
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "list[Link]",
                            "range": [
                                315,
                                318
                            ],
                            "children": [],
                            "content": "list[Link]"
                        },
                        {
                            "type": "ArrayLiteral",
                            "name": "[]",
                            "range": [
                                320,
                                321
                            ],
                            "children": [],
                            "content": "[]"
                        }
                    ],
                    "content": "output_links:list[Link]=[]"
                },
                {
                    "type": "PropertyDecl",
                    "name": "webhook_id",
                    "range": [
                        324,
                        331
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Optional[str]",
                            "range": [
                                326,
                                329
                            ],
                            "children": [],
                            "content": "Optional[str]"
                        },
                        {
                            "type": "NullLiteral",
                            "name": "None",
                            "range": [
                                331,
                                331
                            ],
                            "children": [],
                            "content": "None"
                        }
                    ],
                    "content": "webhook_id:Optional[str]=None"
                }
            ],
            "content": "class Node(BaseDbModel):\nblock_id:str\ninput_default:BlockInput={}#dict[input_name,default_value]\nmetadata:dict[str,Any]={}\ninput_links:list[Link]=[]\noutput_links:list[Link]=[]\n\nwebhook_id:Optional[str]=None\n\n\n"
        },
        {
            "type": "ClassDecl",
            "name": "NodeModel",
            "range": [
                335,
                359
            ],
            "children": [
                {
                    "type": "PropertyDecl",
                    "name": "graph_id",
                    "range": [
                        342,
                        344
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                344,
                                344
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "graph_id:str"
                },
                {
                    "type": "PropertyDecl",
                    "name": "graph_version",
                    "range": [
                        346,
                        348
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                348,
                                348
                            ],
                            "children": [],
                            "content": "int"
                        }
                    ],
                    "content": "graph_version:int"
                },
                {
                    "type": "PropertyDecl",
                    "name": "webhook",
                    "range": [
                        351,
                        358
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Optional[Webhook]",
                            "range": [
                                353,
                                356
                            ],
                            "children": [],
                            "content": "Optional[Webhook]"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                357,
                                358
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "None",
                                    "range": [
                                        358,
                                        358
                                    ],
                                    "children": [],
                                    "content": "None"
                                }
                            ],
                            "content": "=None"
                        }
                    ],
                    "content": "webhook:Optional[Webhook]=None"
                }
            ],
            "content": "class NodeModel(Node):\ngraph_id:str\ngraph_version:int\n\nwebhook:Optional[Webhook]=None\n"
        },
        {
            "type": "FunctionDecl",
            "name": "from_db",
            "range": [
                364,
                537
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "node",
                    "range": [
                        367,
                        369
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "AgentNode",
                            "range": [
                                369,
                                369
                            ],
                            "children": [],
                            "content": "AgentNode"
                        }
                    ],
                    "content": "node:AgentNode"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        372,
                        537
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                373,
                                386
                            ],
                            "children": [
                                {
                                    "type": "UnaryExpression",
                                    "name": "not",
                                    "range": [
                                        374,
                                        375
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "node.AgentBlock",
                                            "range": [
                                                375,
                                                377
                                            ],
                                            "children": [],
                                            "content": "node.AgentBlock"
                                        }
                                    ],
                                    "content": "not node"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        379,
                                        386
                                    ],
                                    "children": [
                                        {
                                            "type": "ThrowStatement",
                                            "name": "raise",
                                            "range": [
                                                380,
                                                385
                                            ],
                                            "children": [
                                                {
                                                    "type": "NewExpression",
                                                    "name": "ValueError",
                                                    "range": [
                                                        381,
                                                        385
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "TemplateLiteral",
                                                            "name": "f\"Invalid node {node.id}, invalid AgentBlock.\"",
                                                            "range": [
                                                                383,
                                                                384
                                                            ],
                                                            "children": [],
                                                            "content": "f \"Invalid node {node.id}, invalid AgentBlock.\""
                                                        }
                                                    ],
                                                    "content": "ValueError(f \"Invalid node {node.id}, invalid AgentBlock.\")"
                                                }
                                            ],
                                            "content": "raise ValueError(f \"Invalid node {node.id}, invalid AgentBlock.\")"
                                        }
                                    ],
                                    "content": "\nraise ValueError(f \"Invalid node {node.id}, invalid AgentBlock.\")\n"
                                }
                            ],
                            "content": "if not node.AgentBlock:\nraise ValueError(f \"Invalid node {node.id}, invalid AgentBlock.\")\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "obj",
                            "range": [
                                387,
                                489
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        388,
                                        389
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "NodeModel",
                                            "range": [
                                                389,
                                                489
                                            ],
                                            "children": [
                                                {
                                                    "type": "ArgumentList",
                                                    "name": "",
                                                    "range": [
                                                        390,
                                                        489
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "id=",
                                                            "range": [
                                                                392,
                                                                397
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "node.id",
                                                                    "range": [
                                                                        394,
                                                                        396
                                                                    ],
                                                                    "children": [],
                                                                    "content": "node.id"
                                                                }
                                                            ],
                                                            "content": "id=node.id,"
                                                        },
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "block_id=",
                                                            "range": [
                                                                399,
                                                                406
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "node.AgentBlock.id",
                                                                    "range": [
                                                                        401,
                                                                        405
                                                                    ],
                                                                    "children": [],
                                                                    "content": "node.AgentBlock.id"
                                                                }
                                                            ],
                                                            "content": "block_id=node.AgentBlock.id,"
                                                        },
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "input_default=",
                                                            "range": [
                                                                408,
                                                                426
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "json.loads",
                                                                    "range": [
                                                                        410,
                                                                        426
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "ArgumentList",
                                                                            "name": "",
                                                                            "range": [
                                                                                413,
                                                                                426
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "name": "node.constantInput",
                                                                                    "range": [
                                                                                        414,
                                                                                        416
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "node.constantInput"
                                                                                },
                                                                                {
                                                                                    "type": "AssignmentExpression",
                                                                                    "name": "target_type=",
                                                                                    "range": [
                                                                                        418,
                                                                                        425
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "TypeAnnotation",
                                                                                            "name": "dict[str, Any]",
                                                                                            "range": [
                                                                                                420,
                                                                                                425
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "dict[str,Any]"
                                                                                        }
                                                                                    ],
                                                                                    "content": "target_type=dict[str,Any]"
                                                                                }
                                                                            ],
                                                                            "content": "(node.constantInput,target_type=dict[str,Any])"
                                                                        }
                                                                    ],
                                                                    "content": "json.loads(node.constantInput,target_type=dict[str,Any])"
                                                                }
                                                            ],
                                                            "content": "input_default=json.loads(node.constantInput,target_type=dict[str,Any])"
                                                        },
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "metadata=",
                                                            "range": [
                                                                429,
                                                                447
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "json.loads",
                                                                    "range": [
                                                                        431,
                                                                        447
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "ArgumentList",
                                                                            "name": "",
                                                                            "range": [
                                                                                434,
                                                                                447
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "name": "node.metadata",
                                                                                    "range": [
                                                                                        435,
                                                                                        437
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "node.metadata"
                                                                                },
                                                                                {
                                                                                    "type": "AssignmentExpression",
                                                                                    "name": "target_type=",
                                                                                    "range": [
                                                                                        439,
                                                                                        446
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "TypeAnnotation",
                                                                                            "name": "dict[str, Any]",
                                                                                            "range": [
                                                                                                441,
                                                                                                446
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "dict[str,Any]"
                                                                                        }
                                                                                    ],
                                                                                    "content": "target_type=dict[str,Any]"
                                                                                }
                                                                            ],
                                                                            "content": "(node.metadata,target_type=dict[str,Any])"
                                                                        }
                                                                    ],
                                                                    "content": "json.loads(node.metadata,target_type=dict[str,Any])"
                                                                }
                                                            ],
                                                            "content": "metadata=json.loads(node.metadata,target_type=dict[str,Any])"
                                                        },
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "graph_id=",
                                                            "range": [
                                                                450,
                                                                455
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "node.agentGraphId",
                                                                    "range": [
                                                                        452,
                                                                        454
                                                                    ],
                                                                    "children": [],
                                                                    "content": "node.agentGraphId"
                                                                }
                                                            ],
                                                            "content": "graph_id=node.agentGraphId,"
                                                        },
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "graph_version=",
                                                            "range": [
                                                                457,
                                                                462
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "node.agentGraphVersion",
                                                                    "range": [
                                                                        459,
                                                                        461
                                                                    ],
                                                                    "children": [],
                                                                    "content": "node.agentGraphVersion"
                                                                }
                                                            ],
                                                            "content": "graph_version=node.agentGraphVersion,"
                                                        },
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "webhook_id=",
                                                            "range": [
                                                                464,
                                                                469
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "node.webhookId",
                                                                    "range": [
                                                                        466,
                                                                        468
                                                                    ],
                                                                    "children": [],
                                                                    "content": "node.webhookId"
                                                                }
                                                            ],
                                                            "content": "webhook_id=node.webhookId,"
                                                        },
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "webhook=",
                                                            "range": [
                                                                471,
                                                                487
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ConditionalExpression",
                                                                    "name": "if",
                                                                    "range": [
                                                                        473,
                                                                        486
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "Webhook.from_db",
                                                                            "range": [
                                                                                473,
                                                                                480
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ArgumentList",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        476,
                                                                                        480
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "MemberExpression",
                                                                                            "name": "node.Webhook",
                                                                                            "range": [
                                                                                                477,
                                                                                                479
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "node.Webhook"
                                                                                        }
                                                                                    ],
                                                                                    "content": "(node.Webhook)"
                                                                                }
                                                                            ],
                                                                            "content": "Webhook.from_db(node.Webhook)"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "None",
                                                                            "range": [
                                                                                486,
                                                                                486
                                                                            ],
                                                                            "children": [],
                                                                            "content": "None"
                                                                        }
                                                                    ],
                                                                    "content": "Webhook.from_db(node.Webhook)if node.Webhook else None"
                                                                }
                                                            ],
                                                            "content": "webhook=Webhook.from_db(node.Webhook)if node.Webhook else None,"
                                                        }
                                                    ],
                                                    "content": "(\nid=node.id,\nblock_id=node.AgentBlock.id,\ninput_default=json.loads(node.constantInput,target_type=dict[str,Any]),\nmetadata=json.loads(node.metadata,target_type=dict[str,Any]),\ngraph_id=node.agentGraphId,\ngraph_version=node.agentGraphVersion,\nwebhook_id=node.webhookId,\nwebhook=Webhook.from_db(node.Webhook)if node.Webhook else None,\n)"
                                                }
                                            ],
                                            "content": "NodeModel(\nid=node.id,\nblock_id=node.AgentBlock.id,\ninput_default=json.loads(node.constantInput,target_type=dict[str,Any]),\nmetadata=json.loads(node.metadata,target_type=dict[str,Any]),\ngraph_id=node.agentGraphId,\ngraph_version=node.agentGraphVersion,\nwebhook_id=node.webhookId,\nwebhook=Webhook.from_db(node.Webhook)if node.Webhook else None,\n)"
                                        }
                                    ],
                                    "content": "=NodeModel"
                                }
                            ],
                            "content": "obj=NodeModel(\nid=node.id,\nblock_id=node.AgentBlock.id,\ninput_default=json.loads(node.constantInput,target_type=dict[str,Any]),\nmetadata=json.loads(node.metadata,target_type=dict[str,Any]),\ngraph_id=node.agentGraphId,\ngraph_version=node.agentGraphVersion,\nwebhook_id=node.webhookId,\nwebhook=Webhook.from_db(node.Webhook)if node.Webhook else None,\n)"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "obj.input_links=",
                            "range": [
                                491,
                                512
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "",
                                    "range": [
                                        495,
                                        511
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "Link.from_db",
                                            "range": [
                                                496,
                                                501
                                            ],
                                            "children": [
                                                {
                                                    "type": "ArgumentList",
                                                    "name": "",
                                                    "range": [
                                                        498,
                                                        501
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "link",
                                                            "range": [
                                                                500,
                                                                500
                                                            ],
                                                            "children": [],
                                                            "content": "link"
                                                        }
                                                    ],
                                                    "content": "from_db(link)"
                                                }
                                            ],
                                            "content": "Link.from_db(link)"
                                        }
                                    ],
                                    "content": "[Link.from_db(link)for link in node.Input or[]]"
                                }
                            ],
                            "content": "obj.input_links=[Link.from_db(link)for link in node.Input or[]]\n"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "obj.output_links=",
                            "range": [
                                513,
                                534
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "",
                                    "range": [
                                        517,
                                        533
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "Link.from_db",
                                            "range": [
                                                518,
                                                523
                                            ],
                                            "children": [
                                                {
                                                    "type": "ArgumentList",
                                                    "name": "",
                                                    "range": [
                                                        520,
                                                        523
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "link",
                                                            "range": [
                                                                522,
                                                                522
                                                            ],
                                                            "children": [],
                                                            "content": "link"
                                                        }
                                                    ],
                                                    "content": "from_db(link)"
                                                }
                                            ],
                                            "content": "Link.from_db(link)"
                                        }
                                    ],
                                    "content": "[Link.from_db(link)for link in node.Output or[]]"
                                }
                            ],
                            "content": "obj.output_links=[Link.from_db(link)for link in node.Output or[]]\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                535,
                                536
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "obj",
                                    "range": [
                                        536,
                                        536
                                    ],
                                    "children": [],
                                    "content": "obj"
                                }
                            ],
                            "content": "return obj"
                        }
                    ],
                    "content": "\nif not node.AgentBlock:\nraise ValueError(f \"Invalid node {node.id}, invalid AgentBlock.\")\nobj=NodeModel(\nid=node.id,\nblock_id=node.AgentBlock.id,\ninput_default=json.loads(node.constantInput,target_type=dict[str,Any]),\nmetadata=json.loads(node.metadata,target_type=dict[str,Any]),\ngraph_id=node.agentGraphId,\ngraph_version=node.agentGraphVersion,\nwebhook_id=node.webhookId,\nwebhook=Webhook.from_db(node.Webhook)if node.Webhook else None,\n)\nobj.input_links=[Link.from_db(link)for link in node.Input or[]]\nobj.output_links=[Link.from_db(link)for link in node.Output or[]]\nreturn obj\n"
                }
            ],
            "content": "def from_db(node:AgentNode):\nif not node.AgentBlock:\nraise ValueError(f \"Invalid node {node.id}, invalid AgentBlock.\")\nobj=NodeModel(\nid=node.id,\nblock_id=node.AgentBlock.id,\ninput_default=json.loads(node.constantInput,target_type=dict[str,Any]),\nmetadata=json.loads(node.metadata,target_type=dict[str,Any]),\ngraph_id=node.agentGraphId,\ngraph_version=node.agentGraphVersion,\nwebhook_id=node.webhookId,\nwebhook=Webhook.from_db(node.Webhook)if node.Webhook else None,\n)\nobj.input_links=[Link.from_db(link)for link in node.Input or[]]\nobj.output_links=[Link.from_db(link)for link in node.Output or[]]\nreturn obj\n"
        },
        {
            "type": "FunctionDecl",
            "name": "is_triggered_by_event_type",
            "range": [
                539,
                659
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        542,
                        542
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "Parameter",
                    "name": "event_type",
                    "range": [
                        544,
                        546
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                546,
                                546
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "event_type:str"
                },
                {
                    "type": "TypeAnnotation",
                    "name": "-> bool",
                    "range": [
                        548,
                        550
                    ],
                    "children": [],
                    "content": "->bool"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        552,
                        659
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                553,
                                574
                            ],
                            "children": [
                                {
                                    "type": "UnaryExpression",
                                    "name": "not",
                                    "range": [
                                        554,
                                        555
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "block=",
                                            "range": [
                                                556,
                                                565
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "get_block",
                                                    "range": [
                                                        559,
                                                        564
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "",
                                                            "range": [
                                                                561,
                                                                564
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "self.block_id",
                                                                    "range": [
                                                                        562,
                                                                        563
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".block_id"
                                                                }
                                                            ],
                                                            "content": "self.block_id)"
                                                        }
                                                    ],
                                                    "content": "get_block(self.block_id)"
                                                }
                                            ],
                                            "content": "block:=get_block(self.block_id))"
                                        }
                                    ],
                                    "content": "not("
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        567,
                                        574
                                    ],
                                    "children": [
                                        {
                                            "type": "ThrowStatement",
                                            "name": "raise",
                                            "range": [
                                                568,
                                                573
                                            ],
                                            "children": [
                                                {
                                                    "type": "NewExpression",
                                                    "name": "ValueError",
                                                    "range": [
                                                        569,
                                                        573
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "TemplateLiteral",
                                                            "name": "f\"Block #{self.block_id} not found for node #{self.id}\"",
                                                            "range": [
                                                                571,
                                                                572
                                                            ],
                                                            "children": [],
                                                            "content": "f \"Block #{self.block_id} not found for node #{self.id}\""
                                                        }
                                                    ],
                                                    "content": "ValueError(f \"Block #{self.block_id} not found for node #{self.id}\")"
                                                }
                                            ],
                                            "content": "raise ValueError(f \"Block #{self.block_id} not found for node #{self.id}\")"
                                        }
                                    ],
                                    "content": "\nraise ValueError(f \"Block #{self.block_id} not found for node #{self.id}\")\n"
                                }
                            ],
                            "content": "if not(block:=get_block(self.block_id)):\nraise ValueError(f \"Block #{self.block_id} not found for node #{self.id}\")\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                575,
                                587
                            ],
                            "children": [
                                {
                                    "type": "UnaryExpression",
                                    "name": "not",
                                    "range": [
                                        576,
                                        577
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "block.webhook_config",
                                            "range": [
                                                577,
                                                579
                                            ],
                                            "children": [],
                                            "content": "block.webhook_config"
                                        }
                                    ],
                                    "content": "not block"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        581,
                                        587
                                    ],
                                    "children": [
                                        {
                                            "type": "ThrowStatement",
                                            "name": "raise",
                                            "range": [
                                                582,
                                                586
                                            ],
                                            "children": [
                                                {
                                                    "type": "NewExpression",
                                                    "name": "TypeError",
                                                    "range": [
                                                        583,
                                                        586
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"This method can't be used on non-webhook blocks\"",
                                                            "range": [
                                                                585,
                                                                585
                                                            ],
                                                            "children": [],
                                                            "content": "\"This method can't be used on non-webhook blocks\""
                                                        }
                                                    ],
                                                    "content": "TypeError(\"This method can't be used on non-webhook blocks\")"
                                                }
                                            ],
                                            "content": "raise TypeError(\"This method can't be used on non-webhook blocks\")"
                                        }
                                    ],
                                    "content": "\nraise TypeError(\"This method can't be used on non-webhook blocks\")\n"
                                }
                            ],
                            "content": "if not block.webhook_config:\nraise TypeError(\"This method can't be used on non-webhook blocks\")\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                588,
                                599
                            ],
                            "children": [
                                {
                                    "type": "UnaryExpression",
                                    "name": "not",
                                    "range": [
                                        589,
                                        590
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "block.webhook_config.event_filter_input",
                                            "range": [
                                                590,
                                                594
                                            ],
                                            "children": [],
                                            "content": "block.webhook_config.event_filter_input"
                                        }
                                    ],
                                    "content": "not block"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        596,
                                        599
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                597,
                                                598
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "True",
                                                    "range": [
                                                        598,
                                                        598
                                                    ],
                                                    "children": [],
                                                    "content": "True"
                                                }
                                            ],
                                            "content": "return True"
                                        }
                                    ],
                                    "content": "\nreturn True\n"
                                }
                            ],
                            "content": "if not block.webhook_config.event_filter_input:\nreturn True\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "event_filter",
                            "range": [
                                600,
                                614
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        601,
                                        602
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "self.input_default.get",
                                            "range": [
                                                602,
                                                613
                                            ],
                                            "children": [
                                                {
                                                    "type": "ArgumentList",
                                                    "name": "",
                                                    "range": [
                                                        606,
                                                        613
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "block.webhook_config.event_filter_input",
                                                            "range": [
                                                                608,
                                                                612
                                                            ],
                                                            "children": [],
                                                            "content": "block.webhook_config.event_filter_input"
                                                        }
                                                    ],
                                                    "content": "get(block.webhook_config.event_filter_input)"
                                                }
                                            ],
                                            "content": "self.input_default.get(block.webhook_config.event_filter_input)"
                                        }
                                    ],
                                    "content": "=self"
                                }
                            ],
                            "content": "event_filter=self.input_default.get(block.webhook_config.event_filter_input)\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                615,
                                626
                            ],
                            "children": [
                                {
                                    "type": "UnaryExpression",
                                    "name": "not",
                                    "range": [
                                        616,
                                        617
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "event_filter",
                                            "range": [
                                                617,
                                                617
                                            ],
                                            "children": [],
                                            "content": "event_filter"
                                        }
                                    ],
                                    "content": "not event_filter"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        619,
                                        626
                                    ],
                                    "children": [
                                        {
                                            "type": "ThrowStatement",
                                            "name": "raise",
                                            "range": [
                                                620,
                                                625
                                            ],
                                            "children": [
                                                {
                                                    "type": "NewExpression",
                                                    "name": "ValueError",
                                                    "range": [
                                                        621,
                                                        625
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "TemplateLiteral",
                                                            "name": "f\"Event filter is not configured on node #{self.id}\"",
                                                            "range": [
                                                                623,
                                                                624
                                                            ],
                                                            "children": [],
                                                            "content": "f \"Event filter is not configured on node #{self.id}\""
                                                        }
                                                    ],
                                                    "content": "ValueError(f \"Event filter is not configured on node #{self.id}\")"
                                                }
                                            ],
                                            "content": "raise ValueError(f \"Event filter is not configured on node #{self.id}\")"
                                        }
                                    ],
                                    "content": "\nraise ValueError(f \"Event filter is not configured on node #{self.id}\")\n"
                                }
                            ],
                            "content": "if not event_filter:\nraise ValueError(f \"Event filter is not configured on node #{self.id}\")\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                627,
                                658
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "in",
                                    "range": [
                                        628,
                                        630
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "event_type",
                                            "range": [
                                                628,
                                                628
                                            ],
                                            "children": [],
                                            "content": "event_type"
                                        },
                                        {
                                            "type": "ArrayExpression",
                                            "name": "",
                                            "range": [
                                                630,
                                                658
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "block.webhook_config.event_format.format",
                                                    "range": [
                                                        632,
                                                        644
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "",
                                                            "range": [
                                                                638,
                                                                644
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "AssignmentExpression",
                                                                    "name": "event=",
                                                                    "range": [
                                                                        640,
                                                                        642
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "k",
                                                                            "range": [
                                                                                642,
                                                                                642
                                                                            ],
                                                                            "children": [],
                                                                            "content": "k"
                                                                        }
                                                                    ],
                                                                    "content": "event=k"
                                                                }
                                                            ],
                                                            "content": "format(event=k)\n"
                                                        }
                                                    ],
                                                    "content": "block.webhook_config.event_format.format(event=k)\n"
                                                }
                                            ],
                                            "content": "[\nblock.webhook_config.event_format.format(event=k)\nfor k in event_filter\nif event_filter[k]is True\n]"
                                        }
                                    ],
                                    "content": "event_type in["
                                }
                            ],
                            "content": "return event_type in[\nblock.webhook_config.event_format.format(event=k)\nfor k in event_filter\nif event_filter[k]is True\n]"
                        }
                    ],
                    "content": "\nif not(block:=get_block(self.block_id)):\nraise ValueError(f \"Block #{self.block_id} not found for node #{self.id}\")\nif not block.webhook_config:\nraise TypeError(\"This method can't be used on non-webhook blocks\")\nif not block.webhook_config.event_filter_input:\nreturn True\nevent_filter=self.input_default.get(block.webhook_config.event_filter_input)\nif not event_filter:\nraise ValueError(f \"Event filter is not configured on node #{self.id}\")\nreturn event_type in[\nblock.webhook_config.event_format.format(event=k)\nfor k in event_filter\nif event_filter[k]is True\n]\n"
                }
            ],
            "content": "def is_triggered_by_event_type(self,event_type:str)->bool:\nif not(block:=get_block(self.block_id)):\nraise ValueError(f \"Block #{self.block_id} not found for node #{self.id}\")\nif not block.webhook_config:\nraise TypeError(\"This method can't be used on non-webhook blocks\")\nif not block.webhook_config.event_filter_input:\nreturn True\nevent_filter=self.input_default.get(block.webhook_config.event_filter_input)\nif not event_filter:\nraise ValueError(f \"Event filter is not configured on node #{self.id}\")\nreturn event_type in[\nblock.webhook_config.event_format.format(event=k)\nfor k in event_filter\nif event_filter[k]is True\n]\n"
        },
        {
            "type": "FunctionDecl",
            "name": "model_rebuild",
            "range": [
                674,
                678
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "",
                    "range": [
                        676,
                        678
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "model_rebuild",
                            "range": [
                                676,
                                676
                            ],
                            "children": [],
                            "content": "model_rebuild"
                        }
                    ],
                    "content": "model_rebuild()"
                }
            ],
            "content": "Webhook.model_rebuild()"
        },
        {
            "type": "ClassDecl",
            "name": "GraphExecution",
            "range": [
                682,
                720
            ],
            "children": [
                {
                    "type": "PropertyDecl",
                    "name": "execution_id",
                    "range": [
                        689,
                        691
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                691,
                                691
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "execution_id:str"
                },
                {
                    "type": "PropertyDecl",
                    "name": "started_at",
                    "range": [
                        693,
                        695
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "datetime",
                            "range": [
                                695,
                                695
                            ],
                            "children": [],
                            "content": "datetime"
                        }
                    ],
                    "content": "started_at:datetime"
                },
                {
                    "type": "PropertyDecl",
                    "name": "ended_at",
                    "range": [
                        697,
                        699
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "datetime",
                            "range": [
                                699,
                                699
                            ],
                            "children": [],
                            "content": "datetime"
                        }
                    ],
                    "content": "ended_at:datetime"
                },
                {
                    "type": "PropertyDecl",
                    "name": "duration",
                    "range": [
                        701,
                        703
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "float",
                            "range": [
                                703,
                                703
                            ],
                            "children": [],
                            "content": "float"
                        }
                    ],
                    "content": "duration:float"
                },
                {
                    "type": "PropertyDecl",
                    "name": "total_run_time",
                    "range": [
                        705,
                        707
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "float",
                            "range": [
                                707,
                                707
                            ],
                            "children": [],
                            "content": "float"
                        }
                    ],
                    "content": "total_run_time:float"
                },
                {
                    "type": "PropertyDecl",
                    "name": "status",
                    "range": [
                        709,
                        711
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "ExecutionStatus",
                            "range": [
                                711,
                                711
                            ],
                            "children": [],
                            "content": "ExecutionStatus"
                        }
                    ],
                    "content": "status:ExecutionStatus"
                },
                {
                    "type": "PropertyDecl",
                    "name": "graph_id",
                    "range": [
                        713,
                        715
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                715,
                                715
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "graph_id:str"
                },
                {
                    "type": "PropertyDecl",
                    "name": "graph_version",
                    "range": [
                        717,
                        719
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                719,
                                719
                            ],
                            "children": [],
                            "content": "int"
                        }
                    ],
                    "content": "graph_version:int"
                }
            ],
            "content": "class GraphExecution(BaseDbModel):\nexecution_id:str\nstarted_at:datetime\nended_at:datetime\nduration:float\ntotal_run_time:float\nstatus:ExecutionStatus\ngraph_id:str\ngraph_version:int\n"
        },
        {
            "type": "FunctionDecl",
            "name": "from_db",
            "range": [
                722,
                901
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "execution",
                    "range": [
                        728,
                        730
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "AgentGraphExecution",
                            "range": [
                                730,
                                730
                            ],
                            "children": [],
                            "content": "AgentGraphExecution"
                        }
                    ],
                    "content": "execution:AgentGraphExecution"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        733,
                        901
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "now",
                            "range": [
                                734,
                                743
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "datetime.now",
                                    "range": [
                                        736,
                                        743
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "datetime.now",
                                            "range": [
                                                736,
                                                738
                                            ],
                                            "children": [],
                                            "content": "datetime.now"
                                        },
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                739,
                                                743
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "timezone.utc",
                                                    "range": [
                                                        740,
                                                        742
                                                    ],
                                                    "children": [],
                                                    "content": "timezone.utc"
                                                }
                                            ],
                                            "content": "(timezone.utc)"
                                        }
                                    ],
                                    "content": "datetime.now(timezone.utc)"
                                }
                            ],
                            "content": "now=datetime.now(timezone.utc)"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "start_time",
                            "range": [
                                745,
                                754
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "or",
                                    "range": [
                                        747,
                                        754
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "execution.startedAt",
                                            "range": [
                                                747,
                                                749
                                            ],
                                            "children": [],
                                            "content": "execution.startedAt"
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "execution.createdAt",
                                            "range": [
                                                751,
                                                753
                                            ],
                                            "children": [],
                                            "content": "execution.createdAt"
                                        }
                                    ],
                                    "content": "execution.startedAt or execution.createdAt\n"
                                }
                            ],
                            "content": "start_time=execution.startedAt or execution.createdAt\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "end_time",
                            "range": [
                                756,
                                762
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "or",
                                    "range": [
                                        758,
                                        762
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "execution.updatedAt",
                                            "range": [
                                                758,
                                                760
                                            ],
                                            "children": [],
                                            "content": ".updatedAt or"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "now",
                                            "range": [
                                                761,
                                                761
                                            ],
                                            "children": [],
                                            "content": "now"
                                        }
                                    ],
                                    "content": ".updatedAt or now\n"
                                }
                            ],
                            "content": "=execution.updatedAt or now\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "duration",
                            "range": [
                                764,
                                774
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "total_seconds",
                                    "range": [
                                        765,
                                        774
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "-",
                                            "range": [
                                                766,
                                                768
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "end_time",
                                                    "range": [
                                                        766,
                                                        766
                                                    ],
                                                    "children": [],
                                                    "content": "end_time"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "start_time",
                                                    "range": [
                                                        768,
                                                        768
                                                    ],
                                                    "children": [],
                                                    "content": "start_time"
                                                }
                                            ],
                                            "content": "end_time-start_time"
                                        }
                                    ],
                                    "content": "(end_time-start_time).total_seconds()\n"
                                }
                            ],
                            "content": "=(end_time-start_time).total_seconds()\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "total_run_time",
                            "range": [
                                776,
                                778
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "duration",
                                    "range": [
                                        777,
                                        777
                                    ],
                                    "children": [],
                                    "content": "duration"
                                }
                            ],
                            "content": "=duration\n"
                        },
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                780,
                                813
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        782,
                                        804
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "name": "stats",
                                            "range": [
                                                783,
                                                803
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "json.loads",
                                                    "range": [
                                                        785,
                                                        803
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "json.loads",
                                                            "range": [
                                                                785,
                                                                787
                                                            ],
                                                            "children": [],
                                                            "content": "json.loads"
                                                        },
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "",
                                                            "range": [
                                                                788,
                                                                803
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "BinaryExpression",
                                                                    "name": "or",
                                                                    "range": [
                                                                        789,
                                                                        793
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "name": "execution.stats",
                                                                            "range": [
                                                                                789,
                                                                                791
                                                                            ],
                                                                            "children": [],
                                                                            "content": "execution.stats"
                                                                        },
                                                                        {
                                                                            "type": "StringLiteral",
                                                                            "name": "\"{}\"",
                                                                            "range": [
                                                                                793,
                                                                                793
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\"{}\""
                                                                        }
                                                                    ],
                                                                    "content": "execution.stats or\"{}\""
                                                                },
                                                                {
                                                                    "type": "KeywordArgument",
                                                                    "name": "target_type",
                                                                    "range": [
                                                                        795,
                                                                        802
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "TypeAnnotation",
                                                                            "name": "dict[str, Any]",
                                                                            "range": [
                                                                                797,
                                                                                802
                                                                            ],
                                                                            "children": [],
                                                                            "content": "dict[str,Any]"
                                                                        }
                                                                    ],
                                                                    "content": "target_type=dict[str,Any]"
                                                                }
                                                            ],
                                                            "content": "(execution.stats or\"{}\",target_type=dict[str,Any])"
                                                        }
                                                    ],
                                                    "content": "json.loads(execution.stats or\"{}\",target_type=dict[str,Any])"
                                                }
                                            ],
                                            "content": "stats=json.loads(execution.stats or\"{}\",target_type=dict[str,Any])"
                                        }
                                    ],
                                    "content": "\nstats=json.loads(execution.stats or\"{}\",target_type=dict[str,Any])\n"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "ValueError",
                                    "range": [
                                        805,
                                        813
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                808,
                                                813
                                            ],
                                            "children": [
                                                {
                                                    "type": "VariableDecl",
                                                    "name": "stats",
                                                    "range": [
                                                        809,
                                                        812
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ObjectExpression",
                                                            "name": "",
                                                            "range": [
                                                                811,
                                                                812
                                                            ],
                                                            "children": [],
                                                            "content": "{}"
                                                        }
                                                    ],
                                                    "content": "stats={}"
                                                }
                                            ],
                                            "content": "\nstats={}\n"
                                        }
                                    ],
                                    "content": "except ValueError:\nstats={}\n"
                                }
                            ],
                            "content": "try:\nstats=json.loads(execution.stats or\"{}\",target_type=dict[str,Any])\nexcept ValueError:\nstats={}\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                815,
                                825
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        816,
                                        824
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "duration",
                                            "range": [
                                                816,
                                                816
                                            ],
                                            "children": [],
                                            "content": "="
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "stats.get",
                                            "range": [
                                                817,
                                                824
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "stats.get",
                                                    "range": [
                                                        817,
                                                        819
                                                    ],
                                                    "children": [],
                                                    "content": "stats.get"
                                                },
                                                {
                                                    "type": "ArgumentList",
                                                    "name": "",
                                                    "range": [
                                                        820,
                                                        824
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "StringLiteral",
                                                            "name": "\"walltime\"",
                                                            "range": [
                                                                821,
                                                                821
                                                            ],
                                                            "children": [],
                                                            "content": "\"walltime\""
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "duration",
                                                            "range": [
                                                                823,
                                                                823
                                                            ],
                                                            "children": [],
                                                            "content": "duration"
                                                        }
                                                    ],
                                                    "content": "(\"walltime\",duration)"
                                                }
                                            ],
                                            "content": "stats.get(\"walltime\",duration)"
                                        }
                                    ],
                                    "content": "=stats.get(\"walltime\",duration)"
                                }
                            ],
                            "content": "duration=stats.get(\"walltime\",duration)\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                826,
                                836
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        827,
                                        835
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "total_run_time",
                                            "range": [
                                                827,
                                                827
                                            ],
                                            "children": [],
                                            "content": "="
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "stats.get",
                                            "range": [
                                                828,
                                                835
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "stats.get",
                                                    "range": [
                                                        828,
                                                        830
                                                    ],
                                                    "children": [],
                                                    "content": "stats.get"
                                                },
                                                {
                                                    "type": "ArgumentList",
                                                    "name": "",
                                                    "range": [
                                                        831,
                                                        835
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "StringLiteral",
                                                            "name": "\"nodes_walltime\"",
                                                            "range": [
                                                                832,
                                                                832
                                                            ],
                                                            "children": [],
                                                            "content": "\"nodes_walltime\""
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "total_run_time",
                                                            "range": [
                                                                834,
                                                                834
                                                            ],
                                                            "children": [],
                                                            "content": "total_run_time"
                                                        }
                                                    ],
                                                    "content": "(\"nodes_walltime\",total_run_time)"
                                                }
                                            ],
                                            "content": "stats.get(\"nodes_walltime\",total_run_time)"
                                        }
                                    ],
                                    "content": "=stats.get(\"nodes_walltime\",total_run_time)"
                                }
                            ],
                            "content": "total_run_time=stats.get(\"nodes_walltime\",total_run_time)\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                838,
                                901
                            ],
                            "children": [
                                {
                                    "type": "NewExpression",
                                    "name": "GraphExecution",
                                    "range": [
                                        839,
                                        900
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                840,
                                                900
                                            ],
                                            "children": [
                                                {
                                                    "type": "KeywordArgument",
                                                    "name": "id",
                                                    "range": [
                                                        842,
                                                        847
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "execution.id",
                                                            "range": [
                                                                844,
                                                                846
                                                            ],
                                                            "children": [],
                                                            "content": "execution.id"
                                                        }
                                                    ],
                                                    "content": "id=execution.id,"
                                                },
                                                {
                                                    "type": "KeywordArgument",
                                                    "name": "execution_id",
                                                    "range": [
                                                        849,
                                                        854
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "execution.id",
                                                            "range": [
                                                                852,
                                                                854
                                                            ],
                                                            "children": [],
                                                            "content": ".id,"
                                                        }
                                                    ],
                                                    "content": "execution_id=execution.id,"
                                                },
                                                {
                                                    "type": "KeywordArgument",
                                                    "name": "started_at",
                                                    "range": [
                                                        856,
                                                        859
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "start_time",
                                                            "range": [
                                                                858,
                                                                858
                                                            ],
                                                            "children": [],
                                                            "content": "start_time"
                                                        }
                                                    ],
                                                    "content": "started_at=start_time,"
                                                },
                                                {
                                                    "type": "KeywordArgument",
                                                    "name": "ended_at",
                                                    "range": [
                                                        861,
                                                        864
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "end_time",
                                                            "range": [
                                                                863,
                                                                863
                                                            ],
                                                            "children": [],
                                                            "content": "end_time"
                                                        }
                                                    ],
                                                    "content": "ended_at=end_time,"
                                                },
                                                {
                                                    "type": "KeywordArgument",
                                                    "name": "duration",
                                                    "range": [
                                                        866,
                                                        869
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "duration",
                                                            "range": [
                                                                868,
                                                                868
                                                            ],
                                                            "children": [],
                                                            "content": "duration"
                                                        }
                                                    ],
                                                    "content": "duration=duration,"
                                                },
                                                {
                                                    "type": "KeywordArgument",
                                                    "name": "total_run_time",
                                                    "range": [
                                                        871,
                                                        874
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "total_run_time",
                                                            "range": [
                                                                873,
                                                                873
                                                            ],
                                                            "children": [],
                                                            "content": "total_run_time"
                                                        }
                                                    ],
                                                    "content": "total_run_time=total_run_time,"
                                                },
                                                {
                                                    "type": "KeywordArgument",
                                                    "name": "status",
                                                    "range": [
                                                        876,
                                                        884
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "ExecutionStatus",
                                                            "range": [
                                                                878,
                                                                884
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "",
                                                                    "range": [
                                                                        879,
                                                                        884
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "name": "execution.executionStatus",
                                                                            "range": [
                                                                                880,
                                                                                882
                                                                            ],
                                                                            "children": [],
                                                                            "content": "execution.executionStatus"
                                                                        }
                                                                    ],
                                                                    "content": "(execution.executionStatus),"
                                                                }
                                                            ],
                                                            "content": "ExecutionStatus(execution.executionStatus),"
                                                        }
                                                    ],
                                                    "content": "status=ExecutionStatus(execution.executionStatus),"
                                                },
                                                {
                                                    "type": "KeywordArgument",
                                                    "name": "graph_id",
                                                    "range": [
                                                        886,
                                                        891
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "execution.agentGraphId",
                                                            "range": [
                                                                888,
                                                                890
                                                            ],
                                                            "children": [],
                                                            "content": "execution.agentGraphId"
                                                        }
                                                    ],
                                                    "content": "graph_id=execution.agentGraphId,"
                                                },
                                                {
                                                    "type": "KeywordArgument",
                                                    "name": "graph_version",
                                                    "range": [
                                                        893,
                                                        898
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "execution.agentGraphVersion",
                                                            "range": [
                                                                895,
                                                                897
                                                            ],
                                                            "children": [],
                                                            "content": "execution.agentGraphVersion"
                                                        }
                                                    ],
                                                    "content": "graph_version=execution.agentGraphVersion,"
                                                }
                                            ],
                                            "content": "(\nid=execution.id,\nexecution_id=execution.id,\nstarted_at=start_time,\nended_at=end_time,\nduration=duration,\ntotal_run_time=total_run_time,\nstatus=ExecutionStatus(execution.executionStatus),\ngraph_id=execution.agentGraphId,\ngraph_version=execution.agentGraphVersion,\n)"
                                        }
                                    ],
                                    "content": "GraphExecution(\nid=execution.id,\nexecution_id=execution.id,\nstarted_at=start_time,\nended_at=end_time,\nduration=duration,\ntotal_run_time=total_run_time,\nstatus=ExecutionStatus(execution.executionStatus),\ngraph_id=execution.agentGraphId,\ngraph_version=execution.agentGraphVersion,\n)"
                                }
                            ],
                            "content": "return GraphExecution(\nid=execution.id,\nexecution_id=execution.id,\nstarted_at=start_time,\nended_at=end_time,\nduration=duration,\ntotal_run_time=total_run_time,\nstatus=ExecutionStatus(execution.executionStatus),\ngraph_id=execution.agentGraphId,\ngraph_version=execution.agentGraphVersion,\n)\n"
                        }
                    ],
                    "content": "\nnow=datetime.now(timezone.utc)\nstart_time=execution.startedAt or execution.createdAt\nend_time=execution.updatedAt or now\nduration=(end_time-start_time).total_seconds()\ntotal_run_time=duration\n\ntry:\nstats=json.loads(execution.stats or\"{}\",target_type=dict[str,Any])\nexcept ValueError:\nstats={}\n\nduration=stats.get(\"walltime\",duration)\ntotal_run_time=stats.get(\"nodes_walltime\",total_run_time)\n\nreturn GraphExecution(\nid=execution.id,\nexecution_id=execution.id,\nstarted_at=start_time,\nended_at=end_time,\nduration=duration,\ntotal_run_time=total_run_time,\nstatus=ExecutionStatus(execution.executionStatus),\ngraph_id=execution.agentGraphId,\ngraph_version=execution.agentGraphVersion,\n)\n"
                }
            ],
            "content": "@staticmethod\ndef from_db(execution:AgentGraphExecution):\nnow=datetime.now(timezone.utc)\nstart_time=execution.startedAt or execution.createdAt\nend_time=execution.updatedAt or now\nduration=(end_time-start_time).total_seconds()\ntotal_run_time=duration\n\ntry:\nstats=json.loads(execution.stats or\"{}\",target_type=dict[str,Any])\nexcept ValueError:\nstats={}\n\nduration=stats.get(\"walltime\",duration)\ntotal_run_time=stats.get(\"nodes_walltime\",total_run_time)\n\nreturn GraphExecution(\nid=execution.id,\nexecution_id=execution.id,\nstarted_at=start_time,\nended_at=end_time,\nduration=duration,\ntotal_run_time=total_run_time,\nstatus=ExecutionStatus(execution.executionStatus),\ngraph_id=execution.agentGraphId,\ngraph_version=execution.agentGraphVersion,\n)\n"
        },
        {
            "type": "ClassDecl",
            "name": "Graph",
            "range": [
                904,
                956
            ],
            "children": [
                {
                    "type": "VariableDecl",
                    "name": "version",
                    "range": [
                        911,
                        915
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                913,
                                913
                            ],
                            "children": [],
                            "content": "int"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                914,
                                914
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "1",
                                    "range": [
                                        915,
                                        915
                                    ],
                                    "children": [],
                                    "content": "1"
                                }
                            ],
                            "content": "="
                        }
                    ],
                    "content": "version:int=1"
                },
                {
                    "type": "VariableDecl",
                    "name": "is_active",
                    "range": [
                        917,
                        921
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "bool",
                            "range": [
                                919,
                                919
                            ],
                            "children": [],
                            "content": "bool"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                920,
                                920
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "True",
                                    "range": [
                                        921,
                                        921
                                    ],
                                    "children": [],
                                    "content": "True"
                                }
                            ],
                            "content": "="
                        }
                    ],
                    "content": "is_active:bool=True"
                },
                {
                    "type": "VariableDecl",
                    "name": "is_template",
                    "range": [
                        923,
                        927
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "bool",
                            "range": [
                                925,
                                925
                            ],
                            "children": [],
                            "content": "bool"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                926,
                                926
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "False",
                                    "range": [
                                        927,
                                        927
                                    ],
                                    "children": [],
                                    "content": "False"
                                }
                            ],
                            "content": "="
                        }
                    ],
                    "content": "is_template:bool=False"
                },
                {
                    "type": "VariableDecl",
                    "name": "name",
                    "range": [
                        929,
                        931
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                931,
                                931
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "name:str"
                },
                {
                    "type": "VariableDecl",
                    "name": "description",
                    "range": [
                        933,
                        935
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                935,
                                935
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "description:str"
                },
                {
                    "type": "VariableDecl",
                    "name": "nodes",
                    "range": [
                        937,
                        945
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "list",
                            "range": [
                                939,
                                939
                            ],
                            "children": [
                                {
                                    "type": "TypeArgument",
                                    "name": "Node",
                                    "range": [
                                        941,
                                        941
                                    ],
                                    "children": [],
                                    "content": "Node"
                                }
                            ],
                            "content": "list"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                943,
                                943
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "[]",
                                    "range": [
                                        944,
                                        945
                                    ],
                                    "children": [],
                                    "content": "[]"
                                }
                            ],
                            "content": "="
                        }
                    ],
                    "content": "nodes:list[Node]=[]"
                },
                {
                    "type": "VariableDecl",
                    "name": "links",
                    "range": [
                        947,
                        955
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "list",
                            "range": [
                                949,
                                949
                            ],
                            "children": [
                                {
                                    "type": "TypeArgument",
                                    "name": "Link",
                                    "range": [
                                        951,
                                        951
                                    ],
                                    "children": [],
                                    "content": "Link"
                                }
                            ],
                            "content": "list"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                953,
                                953
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "[]",
                                    "range": [
                                        954,
                                        955
                                    ],
                                    "children": [],
                                    "content": "[]"
                                }
                            ],
                            "content": "="
                        }
                    ],
                    "content": "links:list[Link]=[]"
                }
            ],
            "content": "class Graph(BaseDbModel):\nversion:int=1\nis_active:bool=True\nis_template:bool=False\nname:str\ndescription:str\nnodes:list[Node]=[]\nlinks:list[Link]=[]\n"
        },
        {
            "type": "FunctionDecl",
            "name": "input_schema",
            "range": [
                964,
                1037
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@computed_field",
                    "range": [
                        958,
                        959
                    ],
                    "children": [],
                    "content": "@computed_field"
                },
                {
                    "type": "Decorator",
                    "name": "@property",
                    "range": [
                        961,
                        962
                    ],
                    "children": [],
                    "content": "@property"
                },
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        967,
                        967
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "ReturnType",
                    "name": "dict",
                    "range": [
                        971,
                        971
                    ],
                    "children": [
                        {
                            "type": "TypeArgument",
                            "name": "str",
                            "range": [
                                973,
                                973
                            ],
                            "children": [],
                            "content": "str"
                        },
                        {
                            "type": "TypeArgument",
                            "name": "Any",
                            "range": [
                                975,
                                975
                            ],
                            "children": [],
                            "content": "Any"
                        }
                    ],
                    "content": "dict"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        978,
                        1037
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                979,
                                979
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "_generate_schema",
                                    "range": [
                                        982,
                                        1036
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "AgentInputBlock.Input",
                                            "range": [
                                                985,
                                                987
                                            ],
                                            "children": [],
                                            "content": "AgentInputBlock.Input"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "ListComprehension",
                                            "range": [
                                                990,
                                                1033
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "node",
                                                    "range": [
                                                        992,
                                                        992
                                                    ],
                                                    "children": [],
                                                    "content": "node"
                                                },
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "input_default",
                                                    "range": [
                                                        993,
                                                        994
                                                    ],
                                                    "children": [],
                                                    "content": ".input_default"
                                                },
                                                {
                                                    "type": "ForStatement",
                                                    "name": "for",
                                                    "range": [
                                                        996,
                                                        1002
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "node",
                                                            "range": [
                                                                997,
                                                                997
                                                            ],
                                                            "children": [],
                                                            "content": "node"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "self.nodes",
                                                            "range": [
                                                                999,
                                                                1001
                                                            ],
                                                            "children": [],
                                                            "content": "self.nodes"
                                                        }
                                                    ],
                                                    "content": "for node in self.nodes\n"
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "name": "if",
                                                    "range": [
                                                        1003,
                                                        1032
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "=",
                                                            "range": [
                                                                1007,
                                                                1007
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "get_block",
                                                                    "range": [
                                                                        1008,
                                                                        1013
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "node.block_id",
                                                                            "range": [
                                                                                1010,
                                                                                1012
                                                                            ],
                                                                            "children": [],
                                                                            "content": "node.block_id"
                                                                        }
                                                                    ],
                                                                    "content": "get_block(node.block_id)"
                                                                }
                                                            ],
                                                            "content": "="
                                                        },
                                                        {
                                                            "type": "LogicalExpression",
                                                            "name": "and",
                                                            "range": [
                                                                1016,
                                                                1016
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "block_type",
                                                                    "range": [
                                                                        1018,
                                                                        1019
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".block_type"
                                                                },
                                                                {
                                                                    "type": "BinaryExpression",
                                                                    "name": "==",
                                                                    "range": [
                                                                        1020,
                                                                        1021
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "BlockType.INPUT",
                                                                            "range": [
                                                                                1022,
                                                                                1024
                                                                            ],
                                                                            "children": [],
                                                                            "content": "BlockType.INPUT"
                                                                        }
                                                                    ],
                                                                    "content": "=="
                                                                }
                                                            ],
                                                            "content": "and"
                                                        },
                                                        {
                                                            "type": "LogicalExpression",
                                                            "name": "and",
                                                            "range": [
                                                                1026,
                                                                1026
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"name\"",
                                                                    "range": [
                                                                        1027,
                                                                        1027
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\"name\""
                                                                },
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "input_default",
                                                                    "range": [
                                                                        1029,
                                                                        1031
                                                                    ],
                                                                    "children": [],
                                                                    "content": "node.input_default"
                                                                }
                                                            ],
                                                            "content": "and"
                                                        }
                                                    ],
                                                    "content": "if(b:=get_block(node.block_id))\nand b.block_type==BlockType.INPUT\nand \"name\" in node.input_default\n"
                                                }
                                            ],
                                            "content": "[\nnode.input_default\nfor node in self.nodes\nif(b:=get_block(node.block_id))\nand b.block_type==BlockType.INPUT\nand \"name\" in node.input_default\n]"
                                        }
                                    ],
                                    "content": "_generate_schema(\nAgentInputBlock.Input,\n[\nnode.input_default\nfor node in self.nodes\nif(b:=get_block(node.block_id))\nand b.block_type==BlockType.INPUT\nand \"name\" in node.input_default\n],\n)"
                                }
                            ],
                            "content": "return"
                        }
                    ],
                    "content": "\nreturn self._generate_schema(\nAgentInputBlock.Input,\n[\nnode.input_default\nfor node in self.nodes\nif(b:=get_block(node.block_id))\nand b.block_type==BlockType.INPUT\nand \"name\" in node.input_default\n],\n)\n"
                }
            ],
            "content": "def input_schema(self)->dict[str,Any]:\nreturn self._generate_schema(\nAgentInputBlock.Input,\n[\nnode.input_default\nfor node in self.nodes\nif(b:=get_block(node.block_id))\nand b.block_type==BlockType.INPUT\nand \"name\" in node.input_default\n],\n)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "output_schema",
            "range": [
                1045,
                1118
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@computed_field",
                    "range": [
                        1039,
                        1040
                    ],
                    "children": [],
                    "content": "@computed_field"
                },
                {
                    "type": "Decorator",
                    "name": "@property",
                    "range": [
                        1042,
                        1043
                    ],
                    "children": [],
                    "content": "@property"
                },
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1048,
                        1048
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "ReturnType",
                    "name": "dict",
                    "range": [
                        1052,
                        1052
                    ],
                    "children": [
                        {
                            "type": "TypeArgument",
                            "name": "str",
                            "range": [
                                1054,
                                1054
                            ],
                            "children": [],
                            "content": "str"
                        },
                        {
                            "type": "TypeArgument",
                            "name": "Any",
                            "range": [
                                1056,
                                1056
                            ],
                            "children": [],
                            "content": "Any"
                        }
                    ],
                    "content": "dict"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1059,
                        1118
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                1060,
                                1060
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "_generate_schema",
                                    "range": [
                                        1063,
                                        1117
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "AgentOutputBlock.Input",
                                            "range": [
                                                1066,
                                                1068
                                            ],
                                            "children": [],
                                            "content": "AgentOutputBlock.Input"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "ListComprehension",
                                            "range": [
                                                1071,
                                                1114
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "node",
                                                    "range": [
                                                        1073,
                                                        1073
                                                    ],
                                                    "children": [],
                                                    "content": "node"
                                                },
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "input_default",
                                                    "range": [
                                                        1074,
                                                        1075
                                                    ],
                                                    "children": [],
                                                    "content": ".input_default"
                                                },
                                                {
                                                    "type": "ForStatement",
                                                    "name": "for",
                                                    "range": [
                                                        1077,
                                                        1083
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "node",
                                                            "range": [
                                                                1078,
                                                                1078
                                                            ],
                                                            "children": [],
                                                            "content": "node"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "self.nodes",
                                                            "range": [
                                                                1080,
                                                                1082
                                                            ],
                                                            "children": [],
                                                            "content": "self.nodes"
                                                        }
                                                    ],
                                                    "content": "for node in self.nodes\n"
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "name": "if",
                                                    "range": [
                                                        1084,
                                                        1113
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "=",
                                                            "range": [
                                                                1088,
                                                                1088
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "get_block",
                                                                    "range": [
                                                                        1089,
                                                                        1094
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "node.block_id",
                                                                            "range": [
                                                                                1091,
                                                                                1093
                                                                            ],
                                                                            "children": [],
                                                                            "content": "node.block_id"
                                                                        }
                                                                    ],
                                                                    "content": "get_block(node.block_id)"
                                                                }
                                                            ],
                                                            "content": "="
                                                        },
                                                        {
                                                            "type": "LogicalExpression",
                                                            "name": "and",
                                                            "range": [
                                                                1097,
                                                                1097
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "block_type",
                                                                    "range": [
                                                                        1099,
                                                                        1100
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".block_type"
                                                                },
                                                                {
                                                                    "type": "BinaryExpression",
                                                                    "name": "==",
                                                                    "range": [
                                                                        1101,
                                                                        1102
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "BlockType.OUTPUT",
                                                                            "range": [
                                                                                1103,
                                                                                1105
                                                                            ],
                                                                            "children": [],
                                                                            "content": "BlockType.OUTPUT"
                                                                        }
                                                                    ],
                                                                    "content": "=="
                                                                }
                                                            ],
                                                            "content": "and"
                                                        },
                                                        {
                                                            "type": "LogicalExpression",
                                                            "name": "and",
                                                            "range": [
                                                                1107,
                                                                1107
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"name\"",
                                                                    "range": [
                                                                        1108,
                                                                        1108
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\"name\""
                                                                },
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "input_default",
                                                                    "range": [
                                                                        1110,
                                                                        1112
                                                                    ],
                                                                    "children": [],
                                                                    "content": "node.input_default"
                                                                }
                                                            ],
                                                            "content": "and"
                                                        }
                                                    ],
                                                    "content": "if(b:=get_block(node.block_id))\nand b.block_type==BlockType.OUTPUT\nand \"name\" in node.input_default\n"
                                                }
                                            ],
                                            "content": "[\nnode.input_default\nfor node in self.nodes\nif(b:=get_block(node.block_id))\nand b.block_type==BlockType.OUTPUT\nand \"name\" in node.input_default\n]"
                                        }
                                    ],
                                    "content": "_generate_schema(\nAgentOutputBlock.Input,\n[\nnode.input_default\nfor node in self.nodes\nif(b:=get_block(node.block_id))\nand b.block_type==BlockType.OUTPUT\nand \"name\" in node.input_default\n],\n)"
                                }
                            ],
                            "content": "return"
                        }
                    ],
                    "content": "\nreturn self._generate_schema(\nAgentOutputBlock.Input,\n[\nnode.input_default\nfor node in self.nodes\nif(b:=get_block(node.block_id))\nand b.block_type==BlockType.OUTPUT\nand \"name\" in node.input_default\n],\n)\n"
                }
            ],
            "content": "def output_schema(self)->dict[str,Any]:\nreturn self._generate_schema(\nAgentOutputBlock.Input,\n[\nnode.input_default\nfor node in self.nodes\nif(b:=get_block(node.block_id))\nand b.block_type==BlockType.OUTPUT\nand \"name\" in node.input_default\n],\n)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "_generate_schema",
            "range": [
                1123,
                1320
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@staticmethod",
                    "range": [
                        1120,
                        1121
                    ],
                    "children": [],
                    "content": "@staticmethod"
                },
                {
                    "type": "Parameter",
                    "name": "type_class",
                    "range": [
                        1127,
                        1127
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Type",
                            "range": [
                                1129,
                                1129
                            ],
                            "children": [
                                {
                                    "type": "TypeArgument",
                                    "name": "AgentInputBlock.Input",
                                    "range": [
                                        1131,
                                        1133
                                    ],
                                    "children": [],
                                    "content": "AgentInputBlock.Input"
                                },
                                {
                                    "type": "TypeArgument",
                                    "name": "AgentOutputBlock.Input",
                                    "range": [
                                        1136,
                                        1138
                                    ],
                                    "children": [],
                                    "content": "Type[AgentOutputBlock"
                                }
                            ],
                            "content": "Type"
                        }
                    ],
                    "content": "type_class"
                },
                {
                    "type": "Parameter",
                    "name": "data",
                    "range": [
                        1144,
                        1144
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "list",
                            "range": [
                                1146,
                                1146
                            ],
                            "children": [
                                {
                                    "type": "TypeArgument",
                                    "name": "dict",
                                    "range": [
                                        1148,
                                        1148
                                    ],
                                    "children": [],
                                    "content": "dict"
                                }
                            ],
                            "content": "list"
                        }
                    ],
                    "content": "data"
                },
                {
                    "type": "ReturnType",
                    "name": "dict",
                    "range": [
                        1155,
                        1155
                    ],
                    "children": [
                        {
                            "type": "TypeArgument",
                            "name": "str",
                            "range": [
                                1157,
                                1157
                            ],
                            "children": [],
                            "content": "str"
                        },
                        {
                            "type": "TypeArgument",
                            "name": "Any",
                            "range": [
                                1159,
                                1159
                            ],
                            "children": [],
                            "content": "Any"
                        }
                    ],
                    "content": "dict"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1162,
                        1320
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "props",
                            "range": [
                                1163,
                                1165
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1164,
                                        1164
                                    ],
                                    "children": [
                                        {
                                            "type": "ArrayExpression",
                                            "name": "[]",
                                            "range": [
                                                1165,
                                                1165
                                            ],
                                            "children": [],
                                            "content": "["
                                        }
                                    ],
                                    "content": "="
                                }
                            ],
                            "content": "props=["
                        },
                        {
                            "type": "ForStatement",
                            "name": "for",
                            "range": [
                                1168,
                                1172
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "p",
                                    "range": [
                                        1169,
                                        1169
                                    ],
                                    "children": [],
                                    "content": "p"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "data",
                                    "range": [
                                        1171,
                                        1171
                                    ],
                                    "children": [],
                                    "content": "data"
                                }
                            ],
                            "content": "for p in data:"
                        },
                        {
                            "type": "TryStatement",
                            "name": "try",
                            "range": [
                                1174,
                                1202
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        1176,
                                        1188
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                1177,
                                                1187
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "append",
                                                    "range": [
                                                        1179,
                                                        1187
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "type_class",
                                                            "range": [
                                                                1181,
                                                                1181
                                                            ],
                                                            "children": [],
                                                            "content": "type_class"
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "p",
                                                            "range": [
                                                                1185,
                                                                1185
                                                            ],
                                                            "children": [],
                                                            "content": "p"
                                                        }
                                                    ],
                                                    "content": "append(type_class(**p))"
                                                }
                                            ],
                                            "content": "props.append(type_class(**p))"
                                        }
                                    ],
                                    "content": "\nprops.append(type_class(**p))\n"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except",
                                    "range": [
                                        1189,
                                        1202
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "Exception",
                                            "range": [
                                                1190,
                                                1190
                                            ],
                                            "children": [],
                                            "content": "Exception"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "e",
                                            "range": [
                                                1192,
                                                1192
                                            ],
                                            "children": [],
                                            "content": "e"
                                        },
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                1194,
                                                1202
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        1195,
                                                        1201
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "warning",
                                                            "range": [
                                                                1197,
                                                                1201
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "f\"Invalid {type_class}: {p}, {e}\"",
                                                                    "range": [
                                                                        1199,
                                                                        1200
                                                                    ],
                                                                    "children": [],
                                                                    "content": "f \"Invalid {type_class}: {p}, {e}\""
                                                                }
                                                            ],
                                                            "content": "warning(f \"Invalid {type_class}: {p}, {e}\")"
                                                        }
                                                    ],
                                                    "content": "logger.warning(f \"Invalid {type_class}: {p}, {e}\")"
                                                }
                                            ],
                                            "content": "\nlogger.warning(f \"Invalid {type_class}: {p}, {e}\")\n"
                                        }
                                    ],
                                    "content": "except Exception as e:\nlogger.warning(f \"Invalid {type_class}: {p}, {e}\")\n"
                                }
                            ],
                            "content": "try:\nprops.append(type_class(**p))\nexcept Exception as e:\nlogger.warning(f \"Invalid {type_class}: {p}, {e}\")\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                1204,
                                1204
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        1205,
                                        1319
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "type",
                                            "range": [
                                                1207,
                                                1207
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"object\"",
                                                    "range": [
                                                        1209,
                                                        1209
                                                    ],
                                                    "children": [],
                                                    "content": "\"object\""
                                                }
                                            ],
                                            "content": "\"type\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "properties",
                                            "range": [
                                                1212,
                                                1212
                                            ],
                                            "children": [
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "",
                                                    "range": [
                                                        1214,
                                                        1297
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "p.name",
                                                            "range": [
                                                                1216,
                                                                1218
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ObjectExpression",
                                                                    "name": "",
                                                                    "range": [
                                                                        1220,
                                                                        1290
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "secret",
                                                                            "range": [
                                                                                1222,
                                                                                1222
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "name": "p.secret",
                                                                                    "range": [
                                                                                        1224,
                                                                                        1226
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "p.secret"
                                                                                }
                                                                            ],
                                                                            "content": "\"secret\""
                                                                        },
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "advanced",
                                                                            "range": [
                                                                                1229,
                                                                                1229
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "MemberExpression",
                                                                                    "name": "p.advanced",
                                                                                    "range": [
                                                                                        1231,
                                                                                        1233
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "p.advanced"
                                                                                }
                                                                            ],
                                                                            "content": "\"advanced\""
                                                                        },
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "title",
                                                                            "range": [
                                                                                1236,
                                                                                1236
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "LogicalExpression",
                                                                                    "name": "or",
                                                                                    "range": [
                                                                                        1241,
                                                                                        1241
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "MemberExpression",
                                                                                            "name": "p.title",
                                                                                            "range": [
                                                                                                1238,
                                                                                                1240
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "p.title"
                                                                                        },
                                                                                        {
                                                                                            "type": "MemberExpression",
                                                                                            "name": "p.name",
                                                                                            "range": [
                                                                                                1243,
                                                                                                1244
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": ".name"
                                                                                        }
                                                                                    ],
                                                                                    "content": "or"
                                                                                }
                                                                            ],
                                                                            "content": "\"title\""
                                                                        },
                                                                        {
                                                                            "type": "SpreadElement",
                                                                            "name": "...",
                                                                            "range": [
                                                                                1247,
                                                                                1248
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ObjectExpression",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        1250,
                                                                                        1264
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "description",
                                                                                            "range": [
                                                                                                1251,
                                                                                                1251
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "MemberExpression",
                                                                                                    "name": "p.description",
                                                                                                    "range": [
                                                                                                        1253,
                                                                                                        1255
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": "p.description"
                                                                                                }
                                                                                            ],
                                                                                            "content": "\"description\""
                                                                                        }
                                                                                    ],
                                                                                    "content": "{\"description\":p.description}if p.description else{})"
                                                                                }
                                                                            ],
                                                                            "content": "**"
                                                                        },
                                                                        {
                                                                            "type": "SpreadElement",
                                                                            "name": "...",
                                                                            "range": [
                                                                                1267,
                                                                                1268
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ObjectExpression",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        1270,
                                                                                        1287
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "default",
                                                                                            "range": [
                                                                                                1271,
                                                                                                1271
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "MemberExpression",
                                                                                                    "name": "p.value",
                                                                                                    "range": [
                                                                                                        1273,
                                                                                                        1275
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": "p.value"
                                                                                                }
                                                                                            ],
                                                                                            "content": "\"default\""
                                                                                        }
                                                                                    ],
                                                                                    "content": "{\"default\":p.value}if p.value is not None else{})"
                                                                                }
                                                                            ],
                                                                            "content": "**"
                                                                        }
                                                                    ],
                                                                    "content": "{\n\"secret\":p.secret,\n\"advanced\":p.advanced,\n\"title\":p.title or p.name,\n**({\"description\":p.description}if p.description else{}),\n**({\"default\":p.value}if p.value is not None else{}),\n}"
                                                                }
                                                            ],
                                                            "content": "p.name"
                                                        }
                                                    ],
                                                    "content": "{\np.name:{\n\"secret\":p.secret,\n\"advanced\":p.advanced,\n\"title\":p.title or p.name,\n**({\"description\":p.description}if p.description else{}),\n**({\"default\":p.value}if p.value is not None else{}),\n}\nfor p in props\n}"
                                                }
                                            ],
                                            "content": "\"properties\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "required",
                                            "range": [
                                                1300,
                                                1300
                                            ],
                                            "children": [
                                                {
                                                    "type": "ArrayExpression",
                                                    "name": "",
                                                    "range": [
                                                        1302,
                                                        1316
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "p.name",
                                                            "range": [
                                                                1303,
                                                                1305
                                                            ],
                                                            "children": [],
                                                            "content": "p.name"
                                                        }
                                                    ],
                                                    "content": "[p.name for p in props if p.value is None]"
                                                }
                                            ],
                                            "content": "\"required\""
                                        }
                                    ],
                                    "content": "{\n\"type\":\"object\",\n\"properties\":{\np.name:{\n\"secret\":p.secret,\n\"advanced\":p.advanced,\n\"title\":p.title or p.name,\n**({\"description\":p.description}if p.description else{}),\n**({\"default\":p.value}if p.value is not None else{}),\n}\nfor p in props\n},\n\"required\":[p.name for p in props if p.value is None],\n}"
                                }
                            ],
                            "content": "return"
                        }
                    ],
                    "content": "\nprops=[]\nfor p in data:\ntry:\nprops.append(type_class(**p))\nexcept Exception as e:\nlogger.warning(f \"Invalid {type_class}: {p}, {e}\")\n\nreturn{\n\"type\":\"object\",\n\"properties\":{\np.name:{\n\"secret\":p.secret,\n\"advanced\":p.advanced,\n\"title\":p.title or p.name,\n**({\"description\":p.description}if p.description else{}),\n**({\"default\":p.value}if p.value is not None else{}),\n}\nfor p in props\n},\n\"required\":[p.name for p in props if p.value is None],\n}\n"
                }
            ],
            "content": "def _generate_schema(\ntype_class:Type[AgentInputBlock.Input]|Type[AgentOutputBlock.Input],\ndata:list[dict],\n)->dict[str,Any]:\nprops=[]\nfor p in data:\ntry:\nprops.append(type_class(**p))\nexcept Exception as e:\nlogger.warning(f \"Invalid {type_class}: {p}, {e}\")\n\nreturn{\n\"type\":\"object\",\n\"properties\":{\np.name:{\n\"secret\":p.secret,\n\"advanced\":p.advanced,\n\"title\":p.title or p.name,\n**({\"description\":p.description}if p.description else{}),\n**({\"default\":p.value}if p.value is not None else{}),\n}\nfor p in props\n},\n\"required\":[p.name for p in props if p.value is None],\n}\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_node",
            "range": [
                2944,
                2992
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        2944,
                        2948
                    ],
                    "children": [],
                    "content": "async def get_node(node_id"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        2945,
                        2948
                    ],
                    "children": [],
                    "content": "def get_node(node_id"
                },
                {
                    "type": "FunctionName",
                    "name": "get_node",
                    "range": [
                        2946,
                        2954
                    ],
                    "children": [],
                    "content": "get_node(node_id:str)->NodeModel"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        2947,
                        2951
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "node_id",
                            "range": [
                                2948,
                                2950
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        2949,
                                        2950
                                    ],
                                    "children": [],
                                    "content": ":str"
                                }
                            ],
                            "content": "node_id:str"
                        }
                    ],
                    "content": "(node_id:str)"
                },
                {
                    "type": "ReturnType",
                    "name": "NodeModel",
                    "range": [
                        2952,
                        2954
                    ],
                    "children": [],
                    "content": "->NodeModel"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        2955,
                        2992
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "node",
                            "range": [
                                2957,
                                2983
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        2959,
                                        2960
                                    ],
                                    "children": [],
                                    "content": "await AgentNode"
                                },
                                {
                                    "type": "MemberExpression",
                                    "name": "AgentNode.prisma",
                                    "range": [
                                        2960,
                                        2962
                                    ],
                                    "children": [],
                                    "content": "AgentNode.prisma"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "find_unique_or_raise",
                                    "range": [
                                        2966,
                                        2983
                                    ],
                                    "children": [
                                        {
                                            "type": "ObjectExpression",
                                            "name": "where",
                                            "range": [
                                                2971,
                                                2975
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "id",
                                                    "range": [
                                                        2972,
                                                        2974
                                                    ],
                                                    "children": [],
                                                    "content": "\"id\":node_id"
                                                }
                                            ],
                                            "content": "{\"id\":node_id}"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "AGENT_NODE_INCLUDE",
                                            "range": [
                                                2980,
                                                2981
                                            ],
                                            "children": [],
                                            "content": "AGENT_NODE_INCLUDE,"
                                        }
                                    ],
                                    "content": "find_unique_or_raise(\nwhere={\"id\":node_id},\ninclude=AGENT_NODE_INCLUDE,\n)"
                                }
                            ],
                            "content": "node=await AgentNode.prisma().find_unique_or_raise(\nwhere={\"id\":node_id},\ninclude=AGENT_NODE_INCLUDE,\n)"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                2985,
                                2992
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "NodeModel.from_db",
                                    "range": [
                                        2986,
                                        2991
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "node",
                                            "range": [
                                                2990,
                                                2991
                                            ],
                                            "children": [],
                                            "content": "node)"
                                        }
                                    ],
                                    "content": "NodeModel.from_db(node)"
                                }
                            ],
                            "content": "return NodeModel.from_db(node)\n"
                        }
                    ],
                    "content": ":\nnode=await AgentNode.prisma().find_unique_or_raise(\nwhere={\"id\":node_id},\ninclude=AGENT_NODE_INCLUDE,\n)\nreturn NodeModel.from_db(node)\n"
                }
            ],
            "content": "async def get_node(node_id:str)->NodeModel:\nnode=await AgentNode.prisma().find_unique_or_raise(\nwhere={\"id\":node_id},\ninclude=AGENT_NODE_INCLUDE,\n)\nreturn NodeModel.from_db(node)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "set_node_webhook",
            "range": [
                2994,
                3095
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        2994,
                        2994
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        2995,
                        2995
                    ],
                    "children": [],
                    "content": "async"
                },
                {
                    "type": "FunctionName",
                    "name": "set_node_webhook",
                    "range": [
                        2996,
                        2996
                    ],
                    "children": [],
                    "content": "def"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        2997,
                        3007
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "node_id",
                            "range": [
                                2998,
                                3000
                            ],
                            "children": [],
                            "content": "(node_id:"
                        },
                        {
                            "type": "Parameter",
                            "name": "webhook_id",
                            "range": [
                                3002,
                                3006
                            ],
                            "children": [],
                            "content": ",webhook_id:str|"
                        }
                    ],
                    "content": "set_node_webhook(node_id:str,webhook_id:str|None"
                },
                {
                    "type": "ReturnType",
                    "name": "NodeModel",
                    "range": [
                        3008,
                        3010
                    ],
                    "children": [],
                    "content": ")->"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        3012,
                        3095
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "node",
                            "range": [
                                3013,
                                3074
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        3015,
                                        3015
                                    ],
                                    "children": [],
                                    "content": "="
                                },
                                {
                                    "type": "MemberExpression",
                                    "name": "AgentNode.prisma",
                                    "range": [
                                        3016,
                                        3018
                                    ],
                                    "children": [],
                                    "content": "await AgentNode."
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "update",
                                    "range": [
                                        3022,
                                        3074
                                    ],
                                    "children": [
                                        {
                                            "type": "ObjectExpression",
                                            "name": "where",
                                            "range": [
                                                3025,
                                                3031
                                            ],
                                            "children": [],
                                            "content": "\nwhere={\"id\":node_id"
                                        },
                                        {
                                            "type": "ObjectExpression",
                                            "name": "data",
                                            "range": [
                                                3034,
                                                3065
                                            ],
                                            "children": [],
                                            "content": "\ndata=(\n{\"Webhook\":{\"connect\":{\"id\":webhook_id}}}\nif webhook_id\nelse{\"Webhook\":{\"disconnect\":True}}"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "AGENT_NODE_INCLUDE",
                                            "range": [
                                                3069,
                                                3071
                                            ],
                                            "children": [],
                                            "content": "\ninclude="
                                        }
                                    ],
                                    "content": ".update(\nwhere={\"id\":node_id},\ndata=(\n{\"Webhook\":{\"connect\":{\"id\":webhook_id}}}\nif webhook_id\nelse{\"Webhook\":{\"disconnect\":True}}\n),\ninclude=AGENT_NODE_INCLUDE,\n"
                                }
                            ],
                            "content": "\nnode=await AgentNode.prisma().update(\nwhere={\"id\":node_id},\ndata=(\n{\"Webhook\":{\"connect\":{\"id\":webhook_id}}}\nif webhook_id\nelse{\"Webhook\":{\"disconnect\":True}}\n),\ninclude=AGENT_NODE_INCLUDE,\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                3076,
                                3086
                            ],
                            "children": [
                                {
                                    "type": "UnaryExpression",
                                    "name": "not",
                                    "range": [
                                        3077,
                                        3077
                                    ],
                                    "children": [],
                                    "content": "if"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "node",
                                    "range": [
                                        3078,
                                        3078
                                    ],
                                    "children": [],
                                    "content": "not"
                                },
                                {
                                    "type": "ThrowStatement",
                                    "name": "raise",
                                    "range": [
                                        3081,
                                        3086
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "ValueError",
                                            "range": [
                                                3082,
                                                3082
                                            ],
                                            "children": [],
                                            "content": "raise"
                                        },
                                        {
                                            "type": "TemplateLiteral",
                                            "name": "f",
                                            "range": [
                                                3084,
                                                3085
                                            ],
                                            "children": [],
                                            "content": "(f"
                                        }
                                    ],
                                    "content": "\nraise ValueError(f \"Node #{node_id} not found\""
                                }
                            ],
                            "content": "\nif not node:\nraise ValueError(f \"Node #{node_id} not found\""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                3088,
                                3094
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "NodeModel.from_db",
                                    "range": [
                                        3089,
                                        3091
                                    ],
                                    "children": [],
                                    "content": "return NodeModel."
                                },
                                {
                                    "type": "Identifier",
                                    "name": "node",
                                    "range": [
                                        3093,
                                        3093
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "\nreturn NodeModel.from_db(node"
                        }
                    ],
                    "content": ":\nnode=await AgentNode.prisma().update(\nwhere={\"id\":node_id},\ndata=(\n{\"Webhook\":{\"connect\":{\"id\":webhook_id}}}\nif webhook_id\nelse{\"Webhook\":{\"disconnect\":True}}\n),\ninclude=AGENT_NODE_INCLUDE,\n)\nif not node:\nraise ValueError(f \"Node #{node_id} not found\")\nreturn NodeModel.from_db(node)"
                }
            ],
            "content": "\nasync def set_node_webhook(node_id:str,webhook_id:str|None)->NodeModel:\nnode=await AgentNode.prisma().update(\nwhere={\"id\":node_id},\ndata=(\n{\"Webhook\":{\"connect\":{\"id\":webhook_id}}}\nif webhook_id\nelse{\"Webhook\":{\"disconnect\":True}}\n),\ninclude=AGENT_NODE_INCLUDE,\n)\nif not node:\nraise ValueError(f \"Node #{node_id} not found\")\nreturn NodeModel.from_db(node)"
        },
        {
            "type": "FunctionDecl",
            "name": "get_graphs",
            "range": [
                3097,
                3261
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        3097,
                        3102
                    ],
                    "children": [],
                    "content": "\n\nasync def get_graphs("
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        3098,
                        3101
                    ],
                    "children": [],
                    "content": "\nasync def get_graphs"
                },
                {
                    "type": "FunctionName",
                    "name": "get_graphs",
                    "range": [
                        3099,
                        3108
                    ],
                    "children": [],
                    "content": "async def get_graphs(\nuser_id:str,\n"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        3100,
                        3121
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                3102,
                                3105
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        3104,
                                        3107
                                    ],
                                    "children": [],
                                    "content": "user_id:str,"
                                }
                            ],
                            "content": "(\nuser_id:"
                        },
                        {
                            "type": "Parameter",
                            "name": "filter_by",
                            "range": [
                                3107,
                                3119
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "Literal",
                                    "range": [
                                        3109,
                                        3114
                                    ],
                                    "children": [],
                                    "content": "filter_by:Literal[\"active\","
                                },
                                {
                                    "type": "DefaultValue",
                                    "name": "\"active\"",
                                    "range": [
                                        3118,
                                        3121
                                    ],
                                    "children": [],
                                    "content": "None=\"active\","
                                }
                            ],
                            "content": ",\nfilter_by:Literal[\"active\",\"template\"]|None="
                        }
                    ],
                    "content": "def get_graphs(\nuser_id:str,\nfilter_by:Literal[\"active\",\"template\"]|None=\"active\","
                },
                {
                    "type": "ReturnType",
                    "name": "list[GraphModel]",
                    "range": [
                        3124,
                        3127
                    ],
                    "children": [],
                    "content": "->list["
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        3129,
                        3261
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                3130,
                                3132
                            ],
                            "children": [],
                            "content": ":\n\"\""
                        },
                        {
                            "type": "VariableDecl",
                            "name": "where_clause",
                            "range": [
                                3134,
                                3142
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "AgentGraphWhereInput",
                                    "range": [
                                        3136,
                                        3141
                                    ],
                                    "children": [],
                                    "content": "where_clause:AgentGraphWhereInput={\"userId\""
                                },
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        3137,
                                        3142
                                    ],
                                    "children": [],
                                    "content": ":AgentGraphWhereInput={\"userId\":"
                                }
                            ],
                            "content": "\"\"\nwhere_clause:AgentGraphWhereInput={\"userId\":"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                3145,
                                3158
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "filter_by == \"active\"",
                                    "range": [
                                        3146,
                                        3149
                                    ],
                                    "children": [],
                                    "content": "\nif filter_by="
                                },
                                {
                                    "type": "Body",
                                    "name": "body",
                                    "range": [
                                        3151,
                                        3158
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "where_clause[\"isActive\"] = True",
                                            "range": [
                                                3152,
                                                3157
                                            ],
                                            "children": [],
                                            "content": ":\nwhere_clause[\"isActive\"]"
                                        }
                                    ],
                                    "content": "\"active\":\nwhere_clause[\"isActive\"]="
                                }
                            ],
                            "content": "\n\nif filter_by==\"active\":\nwhere_clause[\"isActive\"]="
                        },
                        {
                            "type": "ElifStatement",
                            "name": "elif",
                            "range": [
                                3159,
                                3172
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "filter_by == \"template\"",
                                    "range": [
                                        3160,
                                        3163
                                    ],
                                    "children": [],
                                    "content": "\nelif filter_by="
                                },
                                {
                                    "type": "Body",
                                    "name": "body",
                                    "range": [
                                        3165,
                                        3172
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "where_clause[\"isTemplate\"] = True",
                                            "range": [
                                                3166,
                                                3171
                                            ],
                                            "children": [],
                                            "content": ":\nwhere_clause[\"isTemplate\"]"
                                        }
                                    ],
                                    "content": "\"template\":\nwhere_clause[\"isTemplate\"]="
                                }
                            ],
                            "content": "True\nelif filter_by==\"template\":\nwhere_clause[\"isTemplate\"]="
                        },
                        {
                            "type": "VariableDecl",
                            "name": "graphs",
                            "range": [
                                3174,
                                3184
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        3175,
                                        3184
                                    ],
                                    "children": [],
                                    "content": "\ngraphs=await AgentGraph.prisma()."
                                }
                            ],
                            "content": "\n\ngraphs=await AgentGraph.prisma()."
                        },
                        {
                            "type": "AwaitExpression",
                            "name": "await",
                            "range": [
                                3176,
                                3184
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "AgentGraph.prisma().find_many",
                                    "range": [
                                        3177,
                                        3184
                                    ],
                                    "children": [
                                        {
                                            "type": "Arguments",
                                            "name": "arguments",
                                            "range": [
                                                3180,
                                                3184
                                            ],
                                            "children": [],
                                            "content": ".prisma()."
                                        }
                                    ],
                                    "content": "=await AgentGraph.prisma()."
                                }
                            ],
                            "content": "graphs=await AgentGraph.prisma()."
                        },
                        {
                            "type": "VariableDecl",
                            "name": "graph_models",
                            "range": [
                                3215,
                                3219
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        3216,
                                        3219
                                    ],
                                    "children": [],
                                    "content": "\ngraph_models=["
                                }
                            ],
                            "content": "\n\ngraph_models=["
                        },
                        {
                            "type": "ForStatement",
                            "name": "for",
                            "range": [
                                3220,
                                3256
                            ],
                            "children": [
                                {
                                    "type": "Initialization",
                                    "name": "graph in graphs",
                                    "range": [
                                        3221,
                                        3224
                                    ],
                                    "children": [],
                                    "content": "\nfor graph in"
                                },
                                {
                                    "type": "Body",
                                    "name": "body",
                                    "range": [
                                        3225,
                                        3256
                                    ],
                                    "children": [
                                        {
                                            "type": "TryStatement",
                                            "name": "try",
                                            "range": [
                                                3226,
                                                3256
                                            ],
                                            "children": [
                                                {
                                                    "type": "Body",
                                                    "name": "body",
                                                    "range": [
                                                        3228,
                                                        3240
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "graph_models.append",
                                                            "range": [
                                                                3229,
                                                                3240
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Arguments",
                                                                    "name": "arguments",
                                                                    "range": [
                                                                        3232,
                                                                        3240
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".append(GraphModel.from_db(graph)"
                                                                }
                                                            ],
                                                            "content": ":\ngraph_models.append(GraphModel.from_db(graph)"
                                                        }
                                                    ],
                                                    "content": "try:\ngraph_models.append(GraphModel.from_db(graph)"
                                                },
                                                {
                                                    "type": "CatchClause",
                                                    "name": "except",
                                                    "range": [
                                                        3241,
                                                        3256
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Parameter",
                                                            "name": "Exception as e",
                                                            "range": [
                                                                3242,
                                                                3245
                                                            ],
                                                            "children": [],
                                                            "content": "\nexcept Exception as"
                                                        },
                                                        {
                                                            "type": "Body",
                                                            "name": "body",
                                                            "range": [
                                                                3246,
                                                                3256
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "logger.error",
                                                                    "range": [
                                                                        3247,
                                                                        3254
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Arguments",
                                                                            "name": "arguments",
                                                                            "range": [
                                                                                3250,
                                                                                3254
                                                                            ],
                                                                            "children": [],
                                                                            "content": ".error(f \"Error processing graph {graph.id}: {e}\""
                                                                        }
                                                                    ],
                                                                    "content": ":\nlogger.error(f \"Error processing graph {graph.id}: {e}\""
                                                                },
                                                                {
                                                                    "type": "ContinueStatement",
                                                                    "name": "continue",
                                                                    "range": [
                                                                        3255,
                                                                        3256
                                                                    ],
                                                                    "children": [],
                                                                    "content": ")\n"
                                                                }
                                                            ],
                                                            "content": "e:\nlogger.error(f \"Error processing graph {graph.id}: {e}\")\n"
                                                        }
                                                    ],
                                                    "content": ")\nexcept Exception as e:\nlogger.error(f \"Error processing graph {graph.id}: {e}\")\n"
                                                }
                                            ],
                                            "content": ":\ntry:\ngraph_models.append(GraphModel.from_db(graph))\nexcept Exception as e:\nlogger.error(f \"Error processing graph {graph.id}: {e}\")\n"
                                        }
                                    ],
                                    "content": "graphs:\ntry:\ngraph_models.append(GraphModel.from_db(graph))\nexcept Exception as e:\nlogger.error(f \"Error processing graph {graph.id}: {e}\")\n"
                                }
                            ],
                            "content": "]\nfor graph in graphs:\ntry:\ngraph_models.append(GraphModel.from_db(graph))\nexcept Exception as e:\nlogger.error(f \"Error processing graph {graph.id}: {e}\")\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                3258,
                                3261
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "graph_models",
                                    "range": [
                                        3259,
                                        3261
                                    ],
                                    "children": [],
                                    "content": "\nreturn graph_models"
                                }
                            ],
                            "content": "\n\nreturn graph_models"
                        }
                    ],
                    "content": "]:\n\"\"\" \\n     Retrieves graph metadata objects. \\n     Default behaviour is to get all currently active graphs. \\n  \\n     Args: \\n         filter_by: An optional filter to either select templates or active graphs. \\n         user_id: The ID of the user that owns the graph. \\n  \\n     Returns: \\n         list[GraphModel]: A list of objects representing the retrieved graphs. \\n     \"\"\"\nwhere_clause:AgentGraphWhereInput={\"userId\":user_id}\n\nif filter_by==\"active\":\nwhere_clause[\"isActive\"]=True\nelif filter_by==\"template\":\nwhere_clause[\"isTemplate\"]=True\n\ngraphs=await AgentGraph.prisma().find_many(\nwhere=where_clause,\ndistinct=[\"id\"],\norder={\"version\":\"desc\"},\ninclude=AGENT_GRAPH_INCLUDE,\n)\n\ngraph_models=[]\nfor graph in graphs:\ntry:\ngraph_models.append(GraphModel.from_db(graph))\nexcept Exception as e:\nlogger.error(f \"Error processing graph {graph.id}: {e}\")\ncontinue\n\nreturn graph_models"
                }
            ],
            "content": "\n\nasync def get_graphs(\nuser_id:str,\nfilter_by:Literal[\"active\",\"template\"]|None=\"active\",\n)->list[GraphModel]:\n\"\"\" \\n     Retrieves graph metadata objects. \\n     Default behaviour is to get all currently active graphs. \\n  \\n     Args: \\n         filter_by: An optional filter to either select templates or active graphs. \\n         user_id: The ID of the user that owns the graph. \\n  \\n     Returns: \\n         list[GraphModel]: A list of objects representing the retrieved graphs. \\n     \"\"\"\nwhere_clause:AgentGraphWhereInput={\"userId\":user_id}\n\nif filter_by==\"active\":\nwhere_clause[\"isActive\"]=True\nelif filter_by==\"template\":\nwhere_clause[\"isTemplate\"]=True\n\ngraphs=await AgentGraph.prisma().find_many(\nwhere=where_clause,\ndistinct=[\"id\"],\norder={\"version\":\"desc\"},\ninclude=AGENT_GRAPH_INCLUDE,\n)\n\ngraph_models=[]\nfor graph in graphs:\ntry:\ngraph_models.append(GraphModel.from_db(graph))\nexcept Exception as e:\nlogger.error(f \"Error processing graph {graph.id}: {e}\")\ncontinue\n\nreturn graph_models"
        },
        {
            "type": "FunctionDecl",
            "name": "get_executions",
            "range": [
                3262,
                3324
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        3266,
                        3268
                    ],
                    "children": [],
                    "content": "def get_executions("
                },
                {
                    "type": "ReturnType",
                    "name": "list[GraphExecution]",
                    "range": [
                        3270,
                        3275
                    ],
                    "children": [],
                    "content": ":str)->list"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        3277,
                        3324
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "executions",
                            "range": [
                                3278,
                                3287
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        3279,
                                        3279
                                    ],
                                    "children": [
                                        {
                                            "type": "AwaitExpression",
                                            "name": "await",
                                            "range": [
                                                3280,
                                                3280
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "AgentGraphExecution.prisma",
                                                    "range": [
                                                        3281,
                                                        3283
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "()",
                                                            "range": [
                                                                3284,
                                                                3285
                                                            ],
                                                            "children": [],
                                                            "content": "AgentGraphExecution."
                                                        },
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": ".find_many",
                                                            "range": [
                                                                3286,
                                                                3287
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "()",
                                                                    "range": [
                                                                        3288,
                                                                        3308
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "ObjectExpression",
                                                                            "name": "where",
                                                                            "range": [
                                                                                3290,
                                                                                3296
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "userId",
                                                                                    "range": [
                                                                                        3293,
                                                                                        3295
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "where={"
                                                                                }
                                                                            ],
                                                                            "content": "find_many(\nwhere={\"userId\""
                                                                        },
                                                                        {
                                                                            "type": "ObjectExpression",
                                                                            "name": "order",
                                                                            "range": [
                                                                                3299,
                                                                                3305
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "createdAt",
                                                                                    "range": [
                                                                                        3302,
                                                                                        3304
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "order={"
                                                                                }
                                                                            ],
                                                                            "content": "},\norder={\"createdAt\""
                                                                        }
                                                                    ],
                                                                    "content": ").find_many(\nwhere={\"userId\":user_id},\norder={\"createdAt\":\"desc\"}"
                                                                }
                                                            ],
                                                            "content": "prisma("
                                                        }
                                                    ],
                                                    "content": "executions=await"
                                                }
                                            ],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": ":"
                                }
                            ],
                            "content": "]:\nexecutions=await AgentGraphExecution.prisma("
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                3310,
                                3322
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "[]",
                                    "range": [
                                        3311,
                                        3322
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "GraphExecution.from_db",
                                            "range": [
                                                3312,
                                                3317
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "execution",
                                                    "range": [
                                                        3316,
                                                        3316
                                                    ],
                                                    "children": [],
                                                    "content": "."
                                                }
                                            ],
                                            "content": "\nreturn[GraphExecution.from_db"
                                        },
                                        {
                                            "type": "ForStatement",
                                            "name": "for",
                                            "range": [
                                                3318,
                                                3321
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "execution",
                                                    "range": [
                                                        3319,
                                                        3319
                                                    ],
                                                    "children": [],
                                                    "content": "execution"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "executions",
                                                    "range": [
                                                        3321,
                                                        3321
                                                    ],
                                                    "children": [],
                                                    "content": "for"
                                                }
                                            ],
                                            "content": "(execution)for"
                                        }
                                    ],
                                    "content": ")\nreturn[GraphExecution.from_db(execution)for execution"
                                }
                            ],
                            "content": "\n)\nreturn[GraphExecution.from_db(execution)for execution"
                        }
                    ],
                    "content": "GraphExecution]:\nexecutions=await AgentGraphExecution.prisma().find_many(\nwhere={\"userId\":user_id},\norder={\"createdAt\":\"desc\"},\n)\nreturn[GraphExecution.from_db(execution)for execution in executions"
                }
            ],
            "content": "\n\n\nasync def get_executions(user_id:str)->list[GraphExecution]:\nexecutions=await AgentGraphExecution.prisma().find_many(\nwhere={\"userId\":user_id},\norder={\"createdAt\":\"desc\"},\n)\nreturn[GraphExecution.from_db(execution)for execution in executions"
        },
        {
            "type": "FunctionDecl",
            "name": "get_execution",
            "range": [
                3325,
                3381
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        3325,
                        3329
                    ],
                    "children": [],
                    "content": "]\n\n\nasync"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        3326,
                        3329
                    ],
                    "children": [],
                    "content": "\n\n\nasync"
                },
                {
                    "type": "FunctionName",
                    "name": "get_execution",
                    "range": [
                        3327,
                        3340
                    ],
                    "children": [],
                    "content": "\n\nasync def get_execution(user_id:str,execution_id:str)"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        3328,
                        3336
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                3329,
                                3331
                            ],
                            "children": [],
                            "content": "async def get_execution"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                3330,
                                3331
                            ],
                            "children": [],
                            "content": "def get_execution"
                        },
                        {
                            "type": "Parameter",
                            "name": "execution_id",
                            "range": [
                                3333,
                                3335
                            ],
                            "children": [],
                            "content": "user_id:str"
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                3334,
                                3335
                            ],
                            "children": [],
                            "content": ":str"
                        }
                    ],
                    "content": "\nasync def get_execution(user_id:str,"
                },
                {
                    "type": "ReturnType",
                    "name": "GraphExecution | None",
                    "range": [
                        3337,
                        3341
                    ],
                    "children": [],
                    "content": "execution_id:str)-"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        3343,
                        3381
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "execution",
                            "range": [
                                3344,
                                3368
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        3345,
                                        3346
                                    ],
                                    "children": [],
                                    "content": "None:"
                                },
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        3346,
                                        3351
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "AgentGraphExecution.prisma",
                                            "range": [
                                                3347,
                                                3350
                                            ],
                                            "children": [],
                                            "content": "\nexecution=await"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "find_first",
                                            "range": [
                                                3353,
                                                3368
                                            ],
                                            "children": [
                                                {
                                                    "type": "ObjectLiteral",
                                                    "name": "where",
                                                    "range": [
                                                        3358,
                                                        3366
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "id",
                                                            "range": [
                                                                3359,
                                                                3361
                                                            ],
                                                            "children": [],
                                                            "content": "\nwhere="
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "userId",
                                                            "range": [
                                                                3363,
                                                                3365
                                                            ],
                                                            "children": [],
                                                            "content": "\"id\":execution_id"
                                                        }
                                                    ],
                                                    "content": "(\nwhere={\"id\":execution_id,"
                                                }
                                            ],
                                            "content": "prisma().find_first(\nwhere={\"id\":execution_id,\"userId\":"
                                        }
                                    ],
                                    "content": ":\nexecution=await AgentGraphExecution"
                                }
                            ],
                            "content": "|None:\nexecution=await AgentGraphExecution.prisma().find_first(\nwhere={\"id\":execution_id,\"userId\":"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                3370,
                                3380
                            ],
                            "children": [
                                {
                                    "type": "ConditionalExpression",
                                    "name": "if",
                                    "range": [
                                        3377,
                                        3380
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "GraphExecution.from_db",
                                            "range": [
                                                3371,
                                                3376
                                            ],
                                            "children": [],
                                            "content": "\n)\nreturn GraphExecution."
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "execution",
                                            "range": [
                                                3375,
                                                3376
                                            ],
                                            "children": [],
                                            "content": "GraphExecution."
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "None",
                                            "range": [
                                                3380,
                                                3381
                                            ],
                                            "children": [],
                                            "content": ")if"
                                        }
                                    ],
                                    "content": "from_db(execution)"
                                }
                            ],
                            "content": "}\n)\nreturn GraphExecution.from_db(execution)"
                        }
                    ],
                    "content": "GraphExecution|None:\nexecution=await AgentGraphExecution.prisma().find_first(\nwhere={\"id\":execution_id,\"userId\":user_id}\n)\nreturn GraphExecution.from_db(execution)if"
                }
            ],
            "content": "]\n\n\nasync def get_execution(user_id:str,execution_id:str)->GraphExecution|None:\nexecution=await AgentGraphExecution.prisma().find_first(\nwhere={\"id\":execution_id,\"userId\":user_id}\n)\nreturn GraphExecution.from_db(execution)if"
        },
        {
            "type": "FunctionDecl",
            "name": "get_graph",
            "range": [
                3383,
                3556
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        3383,
                        3387
                    ],
                    "children": [],
                    "content": "else None\n\n\n"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        3384,
                        3387
                    ],
                    "children": [],
                    "content": "None\n\n\n"
                },
                {
                    "type": "FunctionName",
                    "name": "get_graph",
                    "range": [
                        3385,
                        3394
                    ],
                    "children": [],
                    "content": "\n\n\nasync def get_graph(\ngraph_id:"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        3386,
                        3425
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "graph_id",
                            "range": [
                                3388,
                                3391
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        3389,
                                        3391
                                    ],
                                    "children": [],
                                    "content": "def get_graph("
                                }
                            ],
                            "content": "async def get_graph("
                        },
                        {
                            "type": "Parameter",
                            "name": "version",
                            "range": [
                                3393,
                                3399
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int | None",
                                    "range": [
                                        3394,
                                        3399
                                    ],
                                    "children": [],
                                    "content": ":str,\nversion:"
                                },
                                {
                                    "type": "DefaultValue",
                                    "name": "None",
                                    "range": [
                                        3398,
                                        3399
                                    ],
                                    "children": [],
                                    "content": "version:"
                                }
                            ],
                            "content": "graph_id:str,\nversion:"
                        },
                        {
                            "type": "Parameter",
                            "name": "template",
                            "range": [
                                3402,
                                3406
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "bool",
                                    "range": [
                                        3403,
                                        3406
                                    ],
                                    "children": [],
                                    "content": "=None,\n"
                                },
                                {
                                    "type": "DefaultValue",
                                    "name": "False",
                                    "range": [
                                        3405,
                                        3406
                                    ],
                                    "children": [],
                                    "content": ",\n"
                                }
                            ],
                            "content": "None=None,\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                3409,
                                3415
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str | None",
                                    "range": [
                                        3410,
                                        3415
                                    ],
                                    "children": [],
                                    "content": "=False,\nuser_id:"
                                },
                                {
                                    "type": "DefaultValue",
                                    "name": "None",
                                    "range": [
                                        3414,
                                        3415
                                    ],
                                    "children": [],
                                    "content": "user_id:"
                                }
                            ],
                            "content": "bool=False,\nuser_id:"
                        },
                        {
                            "type": "Parameter",
                            "name": "for_export",
                            "range": [
                                3418,
                                3422
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "bool",
                                    "range": [
                                        3419,
                                        3422
                                    ],
                                    "children": [],
                                    "content": "=None,\n"
                                },
                                {
                                    "type": "DefaultValue",
                                    "name": "False",
                                    "range": [
                                        3421,
                                        3422
                                    ],
                                    "children": [],
                                    "content": ",\n"
                                }
                            ],
                            "content": "None=None,\n"
                        }
                    ],
                    "content": "\n\nasync def get_graph(\ngraph_id:str,\nversion:int|None=None,\ntemplate:bool=False,\nuser_id:str|None=None,\nfor_export:bool"
                },
                {
                    "type": "ReturnType",
                    "name": "GraphModel | None",
                    "range": [
                        3426,
                        3431
                    ],
                    "children": [],
                    "content": "=False,\n)-"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        3432,
                        3556
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                3433,
                                3435
                            ],
                            "children": [],
                            "content": "GraphModel|None"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "where_clause",
                            "range": [
                                3437,
                                3448
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "AgentGraphWhereInput",
                                    "range": [
                                        3438,
                                        3441
                                    ],
                                    "children": [],
                                    "content": "\"\"\" \\n     Retrieves a graph from the DB. \\n     Defaults to the version with `is_active` if `version` is not passed, \\n     or the latest version with `is_template` if `template=True`. \\n  \\n     Returns `None` if the record is not found. \\n     \"\"\"\n"
                                },
                                {
                                    "type": "ObjectLiteral",
                                    "name": "initializer",
                                    "range": [
                                        3441,
                                        3448
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "id",
                                            "range": [
                                                3443,
                                                3446
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "graph_id",
                                                    "range": [
                                                        3445,
                                                        3446
                                                    ],
                                                    "children": [],
                                                    "content": "={"
                                                }
                                            ],
                                            "content": ":AgentGraphWhereInput={"
                                        }
                                    ],
                                    "content": "\nwhere_clause:AgentGraphWhereInput={\n\"id\""
                                }
                            ],
                            "content": "\n\"\"\" \\n     Retrieves a graph from the DB. \\n     Defaults to the version with `is_active` if `version` is not passed, \\n     or the latest version with `is_template` if `template=True`. \\n  \\n     Returns `None` if the record is not found. \\n     \"\"\"\nwhere_clause:AgentGraphWhereInput={\n\"id\""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                3450,
                                3463
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "version is not None",
                                    "range": [
                                        3451,
                                        3455
                                    ],
                                    "children": [],
                                    "content": ",\n}\nif"
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        3456,
                                        3463
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "where_clause[\"version\"] = version",
                                            "range": [
                                                3457,
                                                3462
                                            ],
                                            "children": [],
                                            "content": "is not None:\nwhere_clause"
                                        }
                                    ],
                                    "content": "version is not None:\nwhere_clause["
                                }
                            ],
                            "content": "graph_id,\n}\nif version is not None:\nwhere_clause["
                        },
                        {
                            "type": "ElifStatement",
                            "name": "elif",
                            "range": [
                                3464,
                                3475
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "not template",
                                    "range": [
                                        3465,
                                        3467
                                    ],
                                    "children": [],
                                    "content": "]=version"
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        3468,
                                        3475
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "where_clause[\"isActive\"] = True",
                                            "range": [
                                                3469,
                                                3474
                                            ],
                                            "children": [],
                                            "content": "elif not template:\nwhere_clause"
                                        }
                                    ],
                                    "content": "\nelif not template:\nwhere_clause["
                                }
                            ],
                            "content": "\"version\"]=version\nelif not template:\nwhere_clause["
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                3491,
                                3507
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "user_id is not None and not template",
                                    "range": [
                                        3492,
                                        3499
                                    ],
                                    "children": [],
                                    "content": "agents to work\nif user_id is not"
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        3500,
                                        3507
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "where_clause[\"userId\"] = user_id",
                                            "range": [
                                                3501,
                                                3506
                                            ],
                                            "children": [],
                                            "content": "and not template:\nwhere_clause"
                                        }
                                    ],
                                    "content": "None and not template:\nwhere_clause["
                                }
                            ],
                            "content": "store agents to work\nif user_id is not None and not template:\nwhere_clause["
                        },
                        {
                            "type": "VariableDecl",
                            "name": "graph",
                            "range": [
                                3509,
                                3541
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        3511,
                                        3541
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "AgentGraph.prisma().find_first",
                                            "range": [
                                                3512,
                                                3540
                                            ],
                                            "children": [
                                                {
                                                    "type": "Arguments",
                                                    "name": "arguments",
                                                    "range": [
                                                        3519,
                                                        3540
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "NamedArgument",
                                                            "name": "where",
                                                            "range": [
                                                                3521,
                                                                3524
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "where_clause",
                                                                    "range": [
                                                                        3523,
                                                                        3524
                                                                    ],
                                                                    "children": [],
                                                                    "content": "find_first("
                                                                }
                                                            ],
                                                            "content": ").find_first("
                                                        },
                                                        {
                                                            "type": "NamedArgument",
                                                            "name": "include",
                                                            "range": [
                                                                3526,
                                                                3529
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "AGENT_GRAPH_INCLUDE",
                                                                    "range": [
                                                                        3528,
                                                                        3529
                                                                    ],
                                                                    "children": [],
                                                                    "content": "where_clause,"
                                                                }
                                                            ],
                                                            "content": "where=where_clause,"
                                                        },
                                                        {
                                                            "type": "NamedArgument",
                                                            "name": "order",
                                                            "range": [
                                                                3531,
                                                                3538
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ObjectLiteral",
                                                                    "name": "initializer",
                                                                    "range": [
                                                                        3533,
                                                                        3537
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "version",
                                                                            "range": [
                                                                                3534,
                                                                                3536
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "StringLiteral",
                                                                                    "name": "desc",
                                                                                    "range": [
                                                                                        3536,
                                                                                        3536
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "order"
                                                                                }
                                                                            ],
                                                                            "content": ",\norder"
                                                                        }
                                                                    ],
                                                                    "content": "AGENT_GRAPH_INCLUDE,\norder="
                                                                }
                                                            ],
                                                            "content": "include=AGENT_GRAPH_INCLUDE,\norder={"
                                                        }
                                                    ],
                                                    "content": "prisma().find_first(\nwhere=where_clause,\ninclude=AGENT_GRAPH_INCLUDE,\norder={\"version\":"
                                                }
                                            ],
                                            "content": "\n\ngraph=await AgentGraph.prisma().find_first(\nwhere=where_clause,\ninclude=AGENT_GRAPH_INCLUDE,\norder={\"version\":"
                                        }
                                    ],
                                    "content": "user_id\n\ngraph=await AgentGraph.prisma().find_first(\nwhere=where_clause,\ninclude=AGENT_GRAPH_INCLUDE,\norder={\"version\":\"desc\""
                                }
                            ],
                            "content": "]=user_id\n\ngraph=await AgentGraph.prisma().find_first(\nwhere=where_clause,\ninclude=AGENT_GRAPH_INCLUDE,\norder={\"version\":\"desc\""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                3542,
                                3555
                            ],
                            "children": [
                                {
                                    "type": "ConditionalExpression",
                                    "name": "GraphModel.from_db(graph, for_export) if graph else None",
                                    "range": [
                                        3543,
                                        3554
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "GraphModel.from_db",
                                            "range": [
                                                3543,
                                                3550
                                            ],
                                            "children": [
                                                {
                                                    "type": "Arguments",
                                                    "name": "arguments",
                                                    "range": [
                                                        3546,
                                                        3550
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "graph",
                                                            "range": [
                                                                3547,
                                                                3548
                                                            ],
                                                            "children": [],
                                                            "content": "return GraphModel"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "for_export",
                                                            "range": [
                                                                3549,
                                                                3550
                                                            ],
                                                            "children": [],
                                                            "content": ".from_db"
                                                        }
                                                    ],
                                                    "content": "\nreturn GraphModel.from_db"
                                                }
                                            ],
                                            "content": ",\n)\nreturn GraphModel.from_db"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "graph",
                                            "range": [
                                                3552,
                                                3553
                                            ],
                                            "children": [],
                                            "content": "graph,"
                                        },
                                        {
                                            "type": "NullLiteral",
                                            "name": "None",
                                            "range": [
                                                3554,
                                                3554
                                            ],
                                            "children": [],
                                            "content": "for_export"
                                        }
                                    ],
                                    "content": ",\n)\nreturn GraphModel.from_db(graph,for_export"
                                }
                            ],
                            "content": "},\n)\nreturn GraphModel.from_db(graph,for_export)"
                        }
                    ],
                    "content": ">GraphModel|None:\n\"\"\" \\n     Retrieves a graph from the DB. \\n     Defaults to the version with `is_active` if `version` is not passed, \\n     or the latest version with `is_template` if `template=True`. \\n  \\n     Returns `None` if the record is not found. \\n     \"\"\"\nwhere_clause:AgentGraphWhereInput={\n\"id\":graph_id,\n}\nif version is not None:\nwhere_clause[\"version\"]=version\nelif not template:\nwhere_clause[\"isActive\"]=True\n\n#TODO:Fix hack workaround to get adding store agents to work\nif user_id is not None and not template:\nwhere_clause[\"userId\"]=user_id\n\ngraph=await AgentGraph.prisma().find_first(\nwhere=where_clause,\ninclude=AGENT_GRAPH_INCLUDE,\norder={\"version\":\"desc\"},\n)\nreturn GraphModel.from_db(graph,for_export)if"
                }
            ],
            "content": "else None\n\n\nasync def get_graph(\ngraph_id:str,\nversion:int|None=None,\ntemplate:bool=False,\nuser_id:str|None=None,\nfor_export:bool=False,\n)->GraphModel|None:\n\"\"\" \\n     Retrieves a graph from the DB. \\n     Defaults to the version with `is_active` if `version` is not passed, \\n     or the latest version with `is_template` if `template=True`. \\n  \\n     Returns `None` if the record is not found. \\n     \"\"\"\nwhere_clause:AgentGraphWhereInput={\n\"id\":graph_id,\n}\nif version is not None:\nwhere_clause[\"version\"]=version\nelif not template:\nwhere_clause[\"isActive\"]=True\n\n#TODO:Fix hack workaround to get adding store agents to work\nif user_id is not None and not template:\nwhere_clause[\"userId\"]=user_id\n\ngraph=await AgentGraph.prisma().find_first(\nwhere=where_clause,\ninclude=AGENT_GRAPH_INCLUDE,\norder={\"version\":\"desc\"},\n)\nreturn GraphModel.from_db(graph,for_export)if"
        },
        {
            "type": "FunctionDecl",
            "name": "set_graph_active_version",
            "range": [
                3557,
                3576
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "async",
                    "range": [
                        3557,
                        3561
                    ],
                    "children": [],
                    "content": "graph else None\n\n"
                },
                {
                    "type": "Keyword",
                    "name": "def",
                    "range": [
                        3558,
                        3561
                    ],
                    "children": [],
                    "content": "else None\n\n"
                },
                {
                    "type": "Identifier",
                    "name": "set_graph_active_version",
                    "range": [
                        3559,
                        3583
                    ],
                    "children": [],
                    "content": "None\n\n\nasync def set_graph_active_version(graph_id:str,version:int,user_id:str)->None:\n"
                },
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        3560,
                        3572
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "graph_id",
                            "range": [
                                3561,
                                3567
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "graph_id",
                                    "range": [
                                        3561,
                                        3567
                                    ],
                                    "children": [],
                                    "content": "\n\nasync def set_graph_active_version(graph_id"
                                },
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        3562,
                                        3567
                                    ],
                                    "children": [],
                                    "content": "\nasync def set_graph_active_version(graph_id"
                                }
                            ],
                            "content": "\n\nasync def set_graph_active_version(graph_id"
                        },
                        {
                            "type": "Parameter",
                            "name": "version",
                            "range": [
                                3565,
                                3571
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "version",
                                    "range": [
                                        3565,
                                        3571
                                    ],
                                    "children": [],
                                    "content": "set_graph_active_version(graph_id:str,version"
                                },
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        3566,
                                        3571
                                    ],
                                    "children": [],
                                    "content": "(graph_id:str,version"
                                }
                            ],
                            "content": "set_graph_active_version(graph_id:str,version"
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                3569,
                                3575
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "user_id",
                                    "range": [
                                        3569,
                                        3575
                                    ],
                                    "children": [],
                                    "content": "str,version:int,user_id"
                                },
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        3570,
                                        3575
                                    ],
                                    "children": [],
                                    "content": ",version:int,user_id"
                                }
                            ],
                            "content": "str,version:int,user_id"
                        }
                    ],
                    "content": "\n\n\nasync def set_graph_active_version(graph_id:str,version:"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        3573,
                        3576
                    ],
                    "children": [],
                    "content": "int,user_id:"
                }
            ],
            "content": "graph else None\n\n\nasync def set_graph_active_version(graph_id:str,version:int,user_id:"
        },
        {
            "type": "Comment",
            "name": "# Activate the requested version if it exists and is owned by the user.",
            "range": [
                3578,
                3592
            ],
            "children": [],
            "content": ")->None:\n#Activate the requested version if it exists and"
        },
        {
            "type": "VariableDecl",
            "name": "updated_count",
            "range": [
                3594,
                3603
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "updated_count",
                    "range": [
                        3594,
                        3603
                    ],
                    "children": [],
                    "content": "owned by the user.\nupdated_count=await AgentGraph"
                },
                {
                    "type": "Assignment",
                    "name": "=",
                    "range": [
                        3595,
                        3603
                    ],
                    "children": [
                        {
                            "type": "AwaitExpression",
                            "name": "await",
                            "range": [
                                3596,
                                3603
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "AgentGraph.prisma().update_many",
                                    "range": [
                                        3597,
                                        3637
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "AgentGraph.prisma",
                                            "range": [
                                                3597,
                                                3600
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "AgentGraph",
                                                    "range": [
                                                        3597,
                                                        3600
                                                    ],
                                                    "children": [],
                                                    "content": "user.\nupdated_count"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "prisma",
                                                    "range": [
                                                        3598,
                                                        3600
                                                    ],
                                                    "children": [],
                                                    "content": ".\nupdated_count"
                                                }
                                            ],
                                            "content": "user.\nupdated_count"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "update_many",
                                            "range": [
                                                3603,
                                                3637
                                            ],
                                            "children": [
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "data",
                                                    "range": [
                                                        3608,
                                                        3612
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "isActive",
                                                            "range": [
                                                                3609,
                                                                3611
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "True",
                                                                    "range": [
                                                                        3610,
                                                                        3611
                                                                    ],
                                                                    "children": [],
                                                                    "content": "(\n"
                                                                }
                                                            ],
                                                            "content": "update_many(\n"
                                                        }
                                                    ],
                                                    "content": ".update_many(\ndata"
                                                },
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "where",
                                                    "range": [
                                                        3617,
                                                        3634
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "id",
                                                            "range": [
                                                                3619,
                                                                3621
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "graph_id",
                                                                    "range": [
                                                                        3620,
                                                                        3621
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nwhere"
                                                                }
                                                            ],
                                                            "content": ",\nwhere"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "version",
                                                            "range": [
                                                                3624,
                                                                3626
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "version",
                                                                    "range": [
                                                                        3625,
                                                                        3626
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\"id\":"
                                                                }
                                                            ],
                                                            "content": "\n\"id\":"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "userId",
                                                            "range": [
                                                                3629,
                                                                3631
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "user_id",
                                                                    "range": [
                                                                        3630,
                                                                        3631
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\"version\":"
                                                                }
                                                            ],
                                                            "content": "\n\"version\":"
                                                        }
                                                    ],
                                                    "content": "True},\nwhere={\n\"id\":graph_id,\n\"version\":version,\n"
                                                }
                                            ],
                                            "content": "AgentGraph.prisma().update_many(\ndata={\"isActive\":True},\nwhere={\n\"id\":graph_id,\n\"version\":version,\n\"userId\":user_id"
                                        }
                                    ],
                                    "content": "user.\nupdated_count=await AgentGraph.prisma().update_many(\ndata={\"isActive\":True},\nwhere={\n\"id\":graph_id,\n\"version\":version,\n\"userId\":user_id"
                                }
                            ],
                            "content": "the user.\nupdated_count=await AgentGraph"
                        }
                    ],
                    "content": "by the user.\nupdated_count=await AgentGraph"
                }
            ],
            "content": "owned by the user.\nupdated_count=await AgentGraph"
        },
        {
            "type": "IfStatement",
            "name": "if",
            "range": [
                3639,
                3652
            ],
            "children": [
                {
                    "type": "BinaryExpression",
                    "name": "==",
                    "range": [
                        3641,
                        3643
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "updated_count",
                            "range": [
                                3640,
                                3643
                            ],
                            "children": [],
                            "content": "},\n)"
                        },
                        {
                            "type": "Literal",
                            "name": "0",
                            "range": [
                                3642,
                                3643
                            ],
                            "children": [],
                            "content": "\n)"
                        }
                    ],
                    "content": ",\n)"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        3644,
                        3652
                    ],
                    "children": [
                        {
                            "type": "ThrowStatement",
                            "name": "raise",
                            "range": [
                                3646,
                                3651
                            ],
                            "children": [
                                {
                                    "type": "NewExpression",
                                    "name": "Exception",
                                    "range": [
                                        3647,
                                        3651
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "f\"Graph #{graph_id} v{version} not found or not owned by user\"",
                                            "range": [
                                                3649,
                                                3651
                                            ],
                                            "children": [],
                                            "content": "0:\n"
                                        }
                                    ],
                                    "content": "==0:\n"
                                }
                            ],
                            "content": "updated_count==0:\n"
                        }
                    ],
                    "content": "\nif updated_count==0:\nraise"
                }
            ],
            "content": "\n},\n)\nif updated_count==0:\nraise"
        },
        {
            "type": "Comment",
            "name": "# Deactivate all other versions.",
            "range": [
                3654,
                3659
            ],
            "children": [],
            "content": "(f \"Graph #{graph_id} v{version} not found or not owned by user\")\n\n"
        },
        {
            "type": "ExpressionStatement",
            "name": "await",
            "range": [
                3661,
                3712
            ],
            "children": [
                {
                    "type": "AwaitExpression",
                    "name": "await",
                    "range": [
                        3661,
                        3712
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "AgentGraph.prisma().update_many",
                            "range": [
                                3662,
                                3711
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "AgentGraph.prisma",
                                    "range": [
                                        3662,
                                        3665
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "AgentGraph",
                                            "range": [
                                                3662,
                                                3665
                                            ],
                                            "children": [],
                                            "content": "all other versions."
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "prisma",
                                            "range": [
                                                3663,
                                                3665
                                            ],
                                            "children": [],
                                            "content": "other versions."
                                        }
                                    ],
                                    "content": "all other versions."
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "update_many",
                                    "range": [
                                        3668,
                                        3711
                                    ],
                                    "children": [
                                        {
                                            "type": "ObjectExpression",
                                            "name": "data",
                                            "range": [
                                                3673,
                                                3677
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "isActive",
                                                    "range": [
                                                        3674,
                                                        3676
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "False",
                                                            "range": [
                                                                3675,
                                                                3676
                                                            ],
                                                            "children": [],
                                                            "content": "(\n"
                                                        }
                                                    ],
                                                    "content": "update_many(\n"
                                                }
                                            ],
                                            "content": ".update_many(\ndata"
                                        },
                                        {
                                            "type": "ObjectExpression",
                                            "name": "where",
                                            "range": [
                                                3682,
                                                3708
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "id",
                                                    "range": [
                                                        3684,
                                                        3686
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "graph_id",
                                                            "range": [
                                                                3685,
                                                                3686
                                                            ],
                                                            "children": [],
                                                            "content": "\nwhere"
                                                        }
                                                    ],
                                                    "content": ",\nwhere"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "version",
                                                    "range": [
                                                        3689,
                                                        3695
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ObjectExpression",
                                                            "name": "not",
                                                            "range": [
                                                                3692,
                                                                3694
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "version",
                                                                    "range": [
                                                                        3693,
                                                                        3694
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\n"
                                                                }
                                                            ],
                                                            "content": "graph_id,\n"
                                                        }
                                                    ],
                                                    "content": "\n\"id\":graph_id,\n\"version\""
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "userId",
                                                    "range": [
                                                        3698,
                                                        3700
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "user_id",
                                                            "range": [
                                                                3699,
                                                                3700
                                                            ],
                                                            "children": [],
                                                            "content": ":version"
                                                        }
                                                    ],
                                                    "content": "\"not\":version"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "isActive",
                                                    "range": [
                                                        3703,
                                                        3705
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "True",
                                                            "range": [
                                                                3704,
                                                                3705
                                                            ],
                                                            "children": [],
                                                            "content": "\"userId\":"
                                                        }
                                                    ],
                                                    "content": "\n\"userId\":"
                                                }
                                            ],
                                            "content": "False},\nwhere={\n\"id\":graph_id,\n\"version\":{\"not\":version},\n\"userId\":user_id,\n"
                                        }
                                    ],
                                    "content": "AgentGraph.prisma().update_many(\ndata={\"isActive\":False},\nwhere={\n\"id\":graph_id,\n\"version\":{\"not\":version},\n\"userId\":user_id,\n\"isActive\":True"
                                }
                            ],
                            "content": "all other versions.\nawait AgentGraph.prisma().update_many(\ndata={\"isActive\":False},\nwhere={\n\"id\":graph_id,\n\"version\":{\"not\":version},\n\"userId\":user_id,\n\"isActive\":True"
                        }
                    ],
                    "content": "Deactivate all other versions.\nawait AgentGraph.prisma().update_many(\ndata={\"isActive\":False},\nwhere={\n\"id\":graph_id,\n\"version\":{\"not\":version},\n\"userId\":user_id,\n\"isActive\":True,"
                }
            ],
            "content": "Deactivate all other versions.\nawait AgentGraph.prisma().update_many(\ndata={\"isActive\":False},\nwhere={\n\"id\":graph_id,\n\"version\":{\"not\":version},\n\"userId\":user_id,\n\"isActive\":True,"
        },
        {
            "type": "FunctionDecl",
            "name": "get_graph_all_versions",
            "range": [
                3714,
                3799
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        3714,
                        3714
                    ],
                    "children": [],
                    "content": "}"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        3715,
                        3715
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "Identifier",
                    "name": "get_graph_all_versions",
                    "range": [
                        3716,
                        3716
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        3717,
                        3725
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "graph_id",
                            "range": [
                                3718,
                                3720
                            ],
                            "children": [],
                            "content": "\n\n\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                3722,
                                3724
                            ],
                            "children": [],
                            "content": "def get_graph_all_versions("
                        }
                    ],
                    "content": ")\n\n\nasync def get_graph_all_versions(graph_id"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        3726,
                        3731
                    ],
                    "children": [
                        {
                            "type": "ListType",
                            "name": "list",
                            "range": [
                                3728,
                                3731
                            ],
                            "children": [
                                {
                                    "type": "TypeName",
                                    "name": "GraphModel",
                                    "range": [
                                        3730,
                                        3730
                                    ],
                                    "children": [],
                                    "content": ":"
                                }
                            ],
                            "content": ",user_id:str"
                        }
                    ],
                    "content": ":str,user_id:str"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        3733,
                        3799
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "graph_versions",
                            "range": [
                                3734,
                                3773
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        3736,
                                        3736
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "AgentGraph.prisma().find_many",
                                            "range": [
                                                3737,
                                                3773
                                            ],
                                            "children": [
                                                {
                                                    "type": "Arguments",
                                                    "name": "arguments",
                                                    "range": [
                                                        3740,
                                                        3773
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "where",
                                                            "range": [
                                                                3746,
                                                                3756
                                                            ],
                                                            "children": [],
                                                            "content": "prisma().find_many(\nwhere={\"id\""
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "order",
                                                            "range": [
                                                                3759,
                                                                3765
                                                            ],
                                                            "children": [],
                                                            "content": ",\"userId\":user_id},\n"
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "include",
                                                            "range": [
                                                                3768,
                                                                3771
                                                            ],
                                                            "children": [],
                                                            "content": "{\"version\":\"desc\""
                                                        }
                                                    ],
                                                    "content": "\ngraph_versions=await AgentGraph.prisma().find_many(\nwhere={\"id\":graph_id,\"userId\":user_id},\norder={\"version\":\"desc\"},"
                                                }
                                            ],
                                            "content": "GraphModel]:\ngraph_versions=await AgentGraph.prisma().find_many(\nwhere={\"id\":graph_id,\"userId\":user_id},\norder={\"version\":\"desc\"},"
                                        }
                                    ],
                                    "content": "["
                                }
                            ],
                            "content": ">list[GraphModel]:\ngraph_versions=await AgentGraph.prisma().find_many(\nwhere={\"id\":graph_id,\"userId\":user_id},\norder={\"version\":\"desc\"},"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                3776,
                                3784
                            ],
                            "children": [
                                {
                                    "type": "UnaryExpression",
                                    "name": "not graph_versions",
                                    "range": [
                                        3777,
                                        3778
                                    ],
                                    "children": [],
                                    "content": "AGENT_GRAPH_INCLUDE,"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        3781,
                                        3783
                                    ],
                                    "children": [],
                                    "content": "\n\nif"
                                }
                            ],
                            "content": "=AGENT_GRAPH_INCLUDE,\n)\n\nif not"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                3786,
                                3798
                            ],
                            "children": [
                                {
                                    "type": "ListComprehension",
                                    "name": "list comprehension",
                                    "range": [
                                        3787,
                                        3798
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "GraphModel.from_db(graph)",
                                            "range": [
                                                3788,
                                                3793
                                            ],
                                            "children": [],
                                            "content": "return[]\n\nreturn"
                                        },
                                        {
                                            "type": "ForStatement",
                                            "name": "for graph in graph_versions",
                                            "range": [
                                                3794,
                                                3797
                                            ],
                                            "children": [],
                                            "content": "[GraphModel.from_db"
                                        }
                                    ],
                                    "content": "\nreturn[]\n\nreturn[GraphModel.from_db("
                                }
                            ],
                            "content": ":\nreturn[]\n\nreturn[GraphModel.from_db("
                        }
                    ],
                    "content": "->list[GraphModel]:\ngraph_versions=await AgentGraph.prisma().find_many(\nwhere={\"id\":graph_id,\"userId\":user_id},\norder={\"version\":\"desc\"},\ninclude=AGENT_GRAPH_INCLUDE,\n)\n\nif not graph_versions:\nreturn[]\n\nreturn[GraphModel.from_db(graph"
                }
            ],
            "content": "},\n)\n\n\nasync def get_graph_all_versions(graph_id:str,user_id:str)->list[GraphModel]:\ngraph_versions=await AgentGraph.prisma().find_many(\nwhere={\"id\":graph_id,\"userId\":user_id},\norder={\"version\":\"desc\"},\ninclude=AGENT_GRAPH_INCLUDE,\n)\n\nif not graph_versions:\nreturn[]\n\nreturn[GraphModel.from_db(graph"
        },
        {
            "type": "FunctionDecl",
            "name": "delete_graph",
            "range": [
                3801,
                3858
            ],
            "children": [
                {
                    "type": "Keyword",
                    "value": "async",
                    "range": [
                        3801,
                        3801
                    ],
                    "content": "for"
                },
                {
                    "type": "Keyword",
                    "value": "def",
                    "range": [
                        3802,
                        3802
                    ],
                    "content": "graph"
                },
                {
                    "type": "Identifier",
                    "value": "delete_graph",
                    "range": [
                        3803,
                        3803
                    ],
                    "content": "in"
                },
                {
                    "type": "ParameterList",
                    "range": [
                        3804,
                        3812
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "graph_id",
                            "range": [
                                3805,
                                3807
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "value": "graph_id",
                                    "range": [
                                        3805,
                                        3805
                                    ],
                                    "content": "]"
                                },
                                {
                                    "type": "TypeAnnotation",
                                    "value": "str",
                                    "range": [
                                        3807,
                                        3807
                                    ],
                                    "content": "\n"
                                }
                            ],
                            "content": "]\n\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                3809,
                                3811
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "value": "user_id",
                                    "range": [
                                        3809,
                                        3809
                                    ],
                                    "content": "async"
                                },
                                {
                                    "type": "TypeAnnotation",
                                    "value": "str",
                                    "range": [
                                        3811,
                                        3811
                                    ],
                                    "content": "delete_graph"
                                }
                            ],
                            "content": "async def delete_graph"
                        }
                    ],
                    "content": "graph_versions]\n\n\nasync def delete_graph("
                },
                {
                    "type": "ReturnType",
                    "range": [
                        3813,
                        3815
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "value": "int",
                            "range": [
                                3815,
                                3815
                            ],
                            "content": "str"
                        }
                    ],
                    "content": "graph_id:str"
                },
                {
                    "type": "BlockStatement",
                    "range": [
                        3817,
                        3858
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "entries_count",
                            "range": [
                                3818,
                                3842
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "value": "entries_count",
                                    "range": [
                                        3818,
                                        3818
                                    ],
                                    "content": ":"
                                },
                                {
                                    "type": "AwaitExpression",
                                    "range": [
                                        3820,
                                        3842
                                    ],
                                    "children": [
                                        {
                                            "type": "Keyword",
                                            "value": "await",
                                            "range": [
                                                3820,
                                                3820
                                            ],
                                            "content": ")"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "range": [
                                                3821,
                                                3842
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "range": [
                                                        3821,
                                                        3827
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "value": "AgentGraph",
                                                            "range": [
                                                                3821,
                                                                3821
                                                            ],
                                                            "content": "-"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "value": "prisma",
                                                            "range": [
                                                                3823,
                                                                3823
                                                            ],
                                                            "content": "int"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "value": "delete_many",
                                                            "range": [
                                                                3827,
                                                                3827
                                                            ],
                                                            "content": "="
                                                        }
                                                    ],
                                                    "content": "->int:\nentries_count="
                                                },
                                                {
                                                    "type": "ArgumentList",
                                                    "range": [
                                                        3828,
                                                        3842
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ObjectExpression",
                                                            "range": [
                                                                3832,
                                                                3840
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Property",
                                                                    "name": "id",
                                                                    "range": [
                                                                        3833,
                                                                        3835
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "\"id\"",
                                                                            "range": [
                                                                                3833,
                                                                                3833
                                                                            ],
                                                                            "content": ")"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "value": "graph_id",
                                                                            "range": [
                                                                                3835,
                                                                                3835
                                                                            ],
                                                                            "content": "delete_many"
                                                                        }
                                                                    ],
                                                                    "content": ").delete_many"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "userId",
                                                                    "range": [
                                                                        3837,
                                                                        3839
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "\"userId\"",
                                                                            "range": [
                                                                                3837,
                                                                                3837
                                                                            ],
                                                                            "content": "\n"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "value": "user_id",
                                                                            "range": [
                                                                                3839,
                                                                                3839
                                                                            ],
                                                                            "content": "="
                                                                        }
                                                                    ],
                                                                    "content": "\nwhere="
                                                                }
                                                            ],
                                                            "content": "().delete_many(\nwhere={"
                                                        }
                                                    ],
                                                    "content": "await AgentGraph.prisma().delete_many(\nwhere={\"id\":"
                                                }
                                            ],
                                            "content": "->int:\nentries_count=await AgentGraph.prisma().delete_many(\nwhere={\"id\":"
                                        }
                                    ],
                                    "content": ")->int:\nentries_count=await AgentGraph.prisma().delete_many(\nwhere={\"id\":"
                                }
                            ],
                            "content": ":str)->int:\nentries_count=await AgentGraph.prisma().delete_many(\nwhere={\"id\":"
                        },
                        {
                            "type": "IfStatement",
                            "range": [
                                3844,
                                3855
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "value": "if",
                                    "range": [
                                        3844,
                                        3844
                                    ],
                                    "content": ","
                                },
                                {
                                    "type": "Identifier",
                                    "value": "entries_count",
                                    "range": [
                                        3845,
                                        3845
                                    ],
                                    "content": "\"userId\""
                                },
                                {
                                    "type": "BlockStatement",
                                    "range": [
                                        3847,
                                        3855
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "range": [
                                                3848,
                                                3854
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "range": [
                                                        3848,
                                                        3854
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "range": [
                                                                3848,
                                                                3850
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "value": "logger",
                                                                    "range": [
                                                                        3848,
                                                                        3848
                                                                    ],
                                                                    "content": "}"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "value": "info",
                                                                    "range": [
                                                                        3850,
                                                                        3850
                                                                    ],
                                                                    "content": ")"
                                                                }
                                                            ],
                                                            "content": "}\n)"
                                                        },
                                                        {
                                                            "type": "ArgumentList",
                                                            "range": [
                                                                3851,
                                                                3854
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "f\"Deleted {entries_count} graph entries for Graph #{graph_id}\"",
                                                                    "range": [
                                                                        3852,
                                                                        3853
                                                                    ],
                                                                    "content": "if entries_count"
                                                                }
                                                            ],
                                                            "content": "\nif entries_count:"
                                                        }
                                                    ],
                                                    "content": "}\n)\nif entries_count:"
                                                }
                                            ],
                                            "content": "}\n)\nif entries_count:"
                                        }
                                    ],
                                    "content": "user_id}\n)\nif entries_count:\n"
                                }
                            ],
                            "content": ",\"userId\":user_id}\n)\nif entries_count:\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "range": [
                                3856,
                                3858
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "value": "return",
                                    "range": [
                                        3856,
                                        3856
                                    ],
                                    "content": "logger"
                                },
                                {
                                    "type": "Identifier",
                                    "value": "entries_count",
                                    "range": [
                                        3857,
                                        3857
                                    ],
                                    "content": "."
                                }
                            ],
                            "content": "logger.info"
                        }
                    ],
                    "content": "user_id:str)->int:\nentries_count=await AgentGraph.prisma().delete_many(\nwhere={\"id\":graph_id,\"userId\":user_id}\n)\nif entries_count:\nlogger.info"
                }
            ],
            "content": "for graph in graph_versions]\n\n\nasync def delete_graph(graph_id:str,user_id:str)->int:\nentries_count=await AgentGraph.prisma().delete_many(\nwhere={\"id\":graph_id,\"userId\":user_id}\n)\nif entries_count:\nlogger.info"
        },
        {
            "type": "FunctionDecl",
            "name": "create_graph",
            "range": [
                3860,
                3935
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "graph",
                    "range": [
                        3864,
                        3866
                    ],
                    "content": "return entries_count\n"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        3868,
                        3870
                    ],
                    "content": "\nasync def"
                },
                {
                    "type": "ReturnType",
                    "name": "GraphModel",
                    "range": [
                        3874,
                        3874
                    ],
                    "content": ":"
                },
                {
                    "type": "BlockStatement",
                    "range": [
                        3876,
                        3935
                    ],
                    "children": [
                        {
                            "type": "WithStatement",
                            "range": [
                                3877,
                                3885
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "tx",
                                    "range": [
                                        3883,
                                        3883
                                    ],
                                    "content": "GraphModel"
                                }
                            ],
                            "content": "user_id:str)->GraphModel:\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "range": [
                                3886,
                                3895
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "__create_graph",
                                    "range": [
                                        3887,
                                        3894
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "tx",
                                            "range": [
                                                3889,
                                                3889
                                            ],
                                            "content": "("
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "graph",
                                            "range": [
                                                3891,
                                                3891
                                            ],
                                            "content": "as"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "user_id",
                                            "range": [
                                                3893,
                                                3893
                                            ],
                                            "content": ":"
                                        }
                                    ],
                                    "content": "with transaction()as tx:\n"
                                }
                            ],
                            "content": "async with transaction()as tx:\nawait"
                        },
                        {
                            "type": "IfStatement",
                            "range": [
                                3897,
                                3926
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "range": [
                                        3898,
                                        3921
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_graph",
                                            "range": [
                                                3902,
                                                3921
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "graph.id",
                                                    "range": [
                                                        3905,
                                                        3907
                                                    ],
                                                    "content": "\nif created_graph"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "graph.version",
                                                    "range": [
                                                        3909,
                                                        3911
                                                    ],
                                                    "content": "=await get_graph"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "graph.is_template",
                                                    "range": [
                                                        3913,
                                                        3915
                                                    ],
                                                    "content": "\ngraph."
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "user_id",
                                                    "range": [
                                                        3917,
                                                        3919
                                                    ],
                                                    "content": ",graph."
                                                }
                                            ],
                                            "content": "user_id)\n\nif created_graph:=await get_graph(\ngraph.id,graph.version,"
                                        }
                                    ],
                                    "content": "tx,graph,user_id)\n\nif created_graph:=await get_graph(\ngraph.id,graph.version,"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "range": [
                                        3924,
                                        3926
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "created_graph",
                                            "range": [
                                                3925,
                                                3925
                                            ],
                                            "content": ","
                                        }
                                    ],
                                    "content": "is_template,user_id"
                                }
                            ],
                            "content": "(tx,graph,user_id)\n\nif created_graph:=await get_graph(\ngraph.id,graph.version,graph.is_template,user_id"
                        },
                        {
                            "type": "ThrowStatement",
                            "range": [
                                3928,
                                3934
                            ],
                            "children": [
                                {
                                    "type": "NewExpression",
                                    "name": "ValueError",
                                    "range": [
                                        3929,
                                        3933
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "value": "f\"Created graph {graph.id} v{graph.version} is not in DB\"",
                                            "range": [
                                                3931,
                                                3932
                                            ],
                                            "content": ":\n"
                                        }
                                    ],
                                    "content": "\n):\nreturn"
                                }
                            ],
                            "content": "user_id\n):\nreturn created_graph"
                        }
                    ],
                    "content": ",user_id:str)->GraphModel:\nasync with transaction()as tx:\nawait __create_graph(tx,graph,user_id)\n\nif created_graph:=await get_graph(\ngraph.id,graph.version,graph.is_template,user_id=user_id\n):\nreturn created_graph\n"
                }
            ],
            "content": "f \"Deleted {entries_count} graph entries for Graph #{graph_id}\")\nreturn entries_count\n\n\nasync def create_graph(graph:Graph,user_id:str)->GraphModel:\nasync with transaction()as tx:\nawait __create_graph(tx,graph,user_id)\n\nif created_graph:=await get_graph(\ngraph.id,graph.version,graph.is_template,user_id=user_id\n):\nreturn created_graph\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__create_graph",
            "range": [
                3936,
                4192
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "__create_graph",
                    "range": [
                        3936,
                        3950
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "async",
                            "range": [
                                3936,
                                3941
                            ],
                            "children": [],
                            "content": "\nraise ValueError(f \"Created graph {graph.id} v{graph.version} is not in DB\""
                        },
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                3937,
                                3940
                            ],
                            "children": [],
                            "content": "raise ValueError(f"
                        },
                        {
                            "type": "Identifier",
                            "name": "__create_graph",
                            "range": [
                                3938,
                                3950
                            ],
                            "children": [],
                            "content": "ValueError(f \"Created graph {graph.id} v{graph.version} is not in DB\")\n\n\nasync def __create_graph(tx"
                        },
                        {
                            "type": "ParameterList",
                            "name": "parameters",
                            "range": [
                                3939,
                                3949
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "tx",
                                    "range": [
                                        3940,
                                        3942
                                    ],
                                    "children": [],
                                    "content": "f \"Created graph {graph.id} v{graph.version} is not in DB\")"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "graph",
                                    "range": [
                                        3942,
                                        3948
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "Graph",
                                            "range": [
                                                3944,
                                                3948
                                            ],
                                            "children": [],
                                            "content": "\n\nasync def __create_graph"
                                        }
                                    ],
                                    "content": ")\n\n\nasync def __create_graph"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "user_id",
                                    "range": [
                                        3946,
                                        3952
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "str",
                                            "range": [
                                                3948,
                                                3952
                                            ],
                                            "children": [],
                                            "content": "__create_graph(tx,graph"
                                        }
                                    ],
                                    "content": "async def __create_graph(tx,graph"
                                }
                            ],
                            "content": "(f \"Created graph {graph.id} v{graph.version} is not in DB\")\n\n\nasync def __create_graph("
                        }
                    ],
                    "content": "\nraise ValueError(f \"Created graph {graph.id} v{graph.version} is not in DB\")\n\n\nasync def __create_graph(tx"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        3951,
                        4192
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "await AgentGraph.prisma(tx).create(data)",
                            "range": [
                                3952,
                                4017
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        3952,
                                        3957
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "AgentGraph.prisma(tx).create",
                                            "range": [
                                                3953,
                                                4016
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "AgentGraph.prisma",
                                                    "range": [
                                                        3953,
                                                        3965
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "AgentGraph",
                                                            "range": [
                                                                3953,
                                                                3962
                                                            ],
                                                            "children": [],
                                                            "content": ":Graph,user_id:str):\nawait"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "prisma",
                                                            "range": [
                                                                3963,
                                                                3969
                                                            ],
                                                            "children": [],
                                                            "content": "AgentGraph.prisma(tx)."
                                                        }
                                                    ],
                                                    "content": ":Graph,user_id:str):\nawait AgentGraph.prisma"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "prisma(tx)",
                                                    "range": [
                                                        3966,
                                                        3974
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "tx",
                                                            "range": [
                                                                3967,
                                                                3969
                                                            ],
                                                            "children": [],
                                                            "content": "tx)."
                                                        }
                                                    ],
                                                    "content": "(tx).create(\ndata="
                                                },
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "create",
                                                    "range": [
                                                        3975,
                                                        3981
                                                    ],
                                                    "children": [],
                                                    "content": "{\n\"id\":graph.id"
                                                },
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "data",
                                                    "range": [
                                                        3982,
                                                        4014
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "id",
                                                            "range": [
                                                                3987,
                                                                3993
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "graph.id",
                                                                    "range": [
                                                                        3989,
                                                                        3993
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\n\"name\":graph"
                                                                }
                                                            ],
                                                            "content": ".version,\n\"name\":graph"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "version",
                                                            "range": [
                                                                3994,
                                                                4000
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "graph.version",
                                                                    "range": [
                                                                        3996,
                                                                        4000
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\n\"description\":graph"
                                                                }
                                                            ],
                                                            "content": ".name,\n\"description\":graph"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "name",
                                                            "range": [
                                                                4001,
                                                                4007
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "graph.name",
                                                                    "range": [
                                                                        4003,
                                                                        4007
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\n\"isTemplate\":graph"
                                                                }
                                                            ],
                                                            "content": ".description,\n\"isTemplate\":graph"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "description",
                                                            "range": [
                                                                4008,
                                                                4014
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "graph.description",
                                                                    "range": [
                                                                        4010,
                                                                        4014
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\n\"isActive\":graph"
                                                                }
                                                            ],
                                                            "content": ".is_template,\n\"isActive\":graph"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "isTemplate",
                                                            "range": [
                                                                4015,
                                                                4021
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "graph.is_template",
                                                                    "range": [
                                                                        4017,
                                                                        4021
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",\n\"userId\":user_id"
                                                                }
                                                            ],
                                                            "content": ".is_active,\n\"userId\":user_id"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "isActive",
                                                            "range": [
                                                                4022,
                                                                4028
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "graph.is_active",
                                                                    "range": [
                                                                        4024,
                                                                        4028
                                                                    ],
                                                                    "children": [],
                                                                    "content": "}\n)\n\n"
                                                                }
                                                            ],
                                                            "content": ",\n}\n)\n\n"
                                                        },
                                                        {
                                                            "type": "Property",
                                                            "name": "userId",
                                                            "range": [
                                                                4029,
                                                                4035
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "user_id",
                                                                    "range": [
                                                                        4031,
                                                                        4035
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".gather(\n*"
                                                                }
                                                            ],
                                                            "content": "await asyncio.gather(\n*"
                                                        }
                                                    ],
                                                    "content": ",\n\"version\":graph.version,\n\"name\":graph.name,\n\"description\":graph.description,\n\"isTemplate\":graph.is_template,\n\"isActive\":graph"
                                                }
                                            ],
                                            "content": ":Graph,user_id:str):\nawait AgentGraph.prisma(tx).create(\ndata={\n\"id\":graph.id,\n\"version\":graph.version,\n\"name\":graph.name,\n\"description\":graph.description,\n\"isTemplate\":graph.is_template,\n\"isActive\":graph.is_active"
                                        }
                                    ],
                                    "content": "graph:Graph,user_id:"
                                }
                            ],
                            "content": "graph:Graph,user_id:str):\nawait AgentGraph.prisma(tx).create(\ndata={\n\"id\":graph.id,\n\"version\":graph.version,\n\"name\":graph.name,\n\"description\":graph.description,\n\"isTemplate\":graph.is_template,\n\"isActive\":graph.is_active,"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "await asyncio.gather(*[AgentNode.prisma(tx).create({...}) for node in graph.nodes])",
                            "range": [
                                4019,
                                4106
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        4019,
                                        4024
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "asyncio.gather",
                                            "range": [
                                                4025,
                                                4105
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "asyncio.gather",
                                                    "range": [
                                                        4025,
                                                        4039
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "asyncio",
                                                            "range": [
                                                                4025,
                                                                4031
                                                            ],
                                                            "children": [],
                                                            "content": "\n)\n\nawait asyncio."
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "gather",
                                                            "range": [
                                                                4032,
                                                                4038
                                                            ],
                                                            "children": [],
                                                            "content": "gather(\n*[\nAgentNode"
                                                        }
                                                    ],
                                                    "content": "\n)\n\nawait asyncio.gather(\n*[\nAgentNode."
                                                },
                                                {
                                                    "type": "SpreadElement",
                                                    "name": "*",
                                                    "range": [
                                                        4040,
                                                        4041
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArrayExpression",
                                                            "name": "[...]",
                                                            "range": [
                                                                4042,
                                                                4103
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "AgentNode.prisma(tx).create",
                                                                    "range": [
                                                                        4044,
                                                                        4094
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "name": "AgentNode.prisma",
                                                                            "range": [
                                                                                4044,
                                                                                4056
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "AgentNode",
                                                                                    "range": [
                                                                                        4044,
                                                                                        4052
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": ".create(\n{\n\"id\":node"
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "prisma",
                                                                                    "range": [
                                                                                        4053,
                                                                                        4059
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": ".id,\n\"agentBlockId\":node"
                                                                                }
                                                                            ],
                                                                            "content": ".create(\n{\n\"id\":node.id,\n"
                                                                        },
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "prisma(tx)",
                                                                            "range": [
                                                                                4060,
                                                                                4068
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "tx",
                                                                                    "range": [
                                                                                        4061,
                                                                                        4063
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "block_id,\n"
                                                                                }
                                                                            ],
                                                                            "content": ".block_id,\n\"agentGraphId\":graph.id"
                                                                        },
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "name": "create",
                                                                            "range": [
                                                                                4069,
                                                                                4075
                                                                            ],
                                                                            "children": [],
                                                                            "content": ",\n\"agentGraphVersion\":graph.version"
                                                                        },
                                                                        {
                                                                            "type": "ObjectExpression",
                                                                            "name": "{...}",
                                                                            "range": [
                                                                                4076,
                                                                                4092
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "id",
                                                                                    "range": [
                                                                                        4080,
                                                                                        4086
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "node.id",
                                                                                            "range": [
                                                                                                4082,
                                                                                                4086
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "dumps(node.input_default"
                                                                                        }
                                                                                    ],
                                                                                    "content": "json.dumps(node.input_default"
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "agentBlockId",
                                                                                    "range": [
                                                                                        4087,
                                                                                        4093
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "node.block_id",
                                                                                            "range": [
                                                                                                4089,
                                                                                                4093
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "\n\"metadata\":json."
                                                                                        }
                                                                                    ],
                                                                                    "content": "),\n\"metadata\":json."
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "agentGraphId",
                                                                                    "range": [
                                                                                        4094,
                                                                                        4100
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "graph.id",
                                                                                            "range": [
                                                                                                4096,
                                                                                                4100
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "node.metadata),"
                                                                                        }
                                                                                    ],
                                                                                    "content": "dumps(node.metadata),"
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "agentGraphVersion",
                                                                                    "range": [
                                                                                        4101,
                                                                                        4107
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "graph.version",
                                                                                            "range": [
                                                                                                4103,
                                                                                                4107
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "\n)\nfor node"
                                                                                        }
                                                                                    ],
                                                                                    "content": "\n}\n)\nfor node"
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "constantInput",
                                                                                    "range": [
                                                                                        4108,
                                                                                        4114
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "CallExpression",
                                                                                            "name": "json.dumps(node.input_default)",
                                                                                            "range": [
                                                                                                4110,
                                                                                                4126
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "MemberExpression",
                                                                                                    "name": "json.dumps",
                                                                                                    "range": [
                                                                                                        4110,
                                                                                                        4119
                                                                                                    ],
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "json",
                                                                                                            "range": [
                                                                                                                4110,
                                                                                                                4114
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": ".nodes\n]\n"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "dumps",
                                                                                                            "range": [
                                                                                                                4115,
                                                                                                                4119
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": ")\n\nawait asyncio"
                                                                                                        }
                                                                                                    ],
                                                                                                    "content": ".nodes\n]\n)\n\nawait asyncio"
                                                                                                },
                                                                                                {
                                                                                                    "type": "CallExpression",
                                                                                                    "name": "node.input_default",
                                                                                                    "range": [
                                                                                                        4120,
                                                                                                        4126
                                                                                                    ],
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "node",
                                                                                                            "range": [
                                                                                                                4120,
                                                                                                                4124
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": ".gather(\n*"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "input_default",
                                                                                                            "range": [
                                                                                                                4125,
                                                                                                                4126
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": "[\n"
                                                                                                        }
                                                                                                    ],
                                                                                                    "content": ".gather(\n*[\n"
                                                                                                }
                                                                                            ],
                                                                                            "content": ".nodes\n]\n)\n\nawait asyncio.gather(\n*[\n"
                                                                                        }
                                                                                    ],
                                                                                    "content": "in graph.nodes\n]\n"
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "metadata",
                                                                                    "range": [
                                                                                        4127,
                                                                                        4133
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "CallExpression",
                                                                                            "name": "json.dumps(node.metadata)",
                                                                                            "range": [
                                                                                                4129,
                                                                                                4145
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "MemberExpression",
                                                                                                    "name": "json.dumps",
                                                                                                    "range": [
                                                                                                        4129,
                                                                                                        4138
                                                                                                    ],
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "json",
                                                                                                            "range": [
                                                                                                                4129,
                                                                                                                4133
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": "prisma(tx)."
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "dumps",
                                                                                                            "range": [
                                                                                                                4134,
                                                                                                                4138
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": "create(\n{\n"
                                                                                                        }
                                                                                                    ],
                                                                                                    "content": "prisma(tx).create(\n{\n"
                                                                                                },
                                                                                                {
                                                                                                    "type": "CallExpression",
                                                                                                    "name": "node.metadata",
                                                                                                    "range": [
                                                                                                        4139,
                                                                                                        4145
                                                                                                    ],
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "node",
                                                                                                            "range": [
                                                                                                                4139,
                                                                                                                4143
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": "\"id\":str(uuid"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "metadata",
                                                                                                            "range": [
                                                                                                                4144,
                                                                                                                4145
                                                                                                            ],
                                                                                                            "children": [],
                                                                                                            "content": ".uuid4"
                                                                                                        }
                                                                                                    ],
                                                                                                    "content": "\"id\":str(uuid.uuid4"
                                                                                                }
                                                                                            ],
                                                                                            "content": "prisma(tx).create(\n{\n\"id\":str(uuid.uuid4"
                                                                                        }
                                                                                    ],
                                                                                    "content": "AgentNodeLink.prisma(tx)."
                                                                                }
                                                                            ],
                                                                            "content": ",\n\"constantInput\":json.dumps(node.input_default),\n\"metadata\":json"
                                                                        }
                                                                    ],
                                                                    "content": ".create(\n{\n\"id\":node.id,\n\"agentBlockId\":node.block_id,\n\"agentGraphId\":graph.id,\n\"agentGraphVersion\":graph.version,\n\"constantInput\":json.dumps(node.input_default),\n\"metadata\":json.dumps"
                                                                }
                                                            ],
                                                            "content": "tx).create(\n{\n\"id\":node.id,\n\"agentBlockId\":node.block_id,\n\"agentGraphId\":graph.id,\n\"agentGraphVersion\":graph.version,\n\"constantInput\":json.dumps(node.input_default),\n\"metadata\":json.dumps(node.metadata),\n}\n"
                                                        }
                                                    ],
                                                    "content": "prisma("
                                                }
                                            ],
                                            "content": "\n)\n\nawait asyncio.gather(\n*[\nAgentNode.prisma(tx).create(\n{\n\"id\":node.id,\n\"agentBlockId\":node.block_id,\n\"agentGraphId\":graph.id,\n\"agentGraphVersion\":graph.version,\n\"constantInput\":json.dumps(node.input_default),\n\"metadata\":json.dumps(node.metadata),\n}\n)\n"
                                        }
                                    ],
                                    "content": "\"userId\":user_id,\n}"
                                }
                            ],
                            "content": "\"userId\":user_id,\n}\n)\n\nawait asyncio.gather(\n*[\nAgentNode.prisma(tx).create(\n{\n\"id\":node.id,\n\"agentBlockId\":node.block_id,\n\"agentGraphId\":graph.id,\n\"agentGraphVersion\":graph.version,\n\"constantInput\":json.dumps(node.input_default),\n\"metadata\":json.dumps(node.metadata),\n}\n)\nfor"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "await asyncio.gather(*[AgentNodeLink.prisma(tx).create({...}) for link in graph.links])",
                            "range": [
                                4108,
                                4190
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        4108,
                                        4113
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "asyncio.gather",
                                            "range": [
                                                4114,
                                                4189
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "asyncio.gather",
                                                    "range": [
                                                        4114,
                                                        4128
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "asyncio",
                                                            "range": [
                                                                4114,
                                                                4120
                                                            ],
                                                            "children": [],
                                                            "content": "\n)\n\nawait asyncio."
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "gather",
                                                            "range": [
                                                                4121,
                                                                4127
                                                            ],
                                                            "children": [],
                                                            "content": "gather(\n*[\nAgentNodeLink"
                                                        }
                                                    ],
                                                    "content": "\n)\n\nawait asyncio.gather(\n*[\nAgentNodeLink."
                                                },
                                                {
                                                    "type": "SpreadElement",
                                                    "name": "*",
                                                    "range": [
                                                        4129,
                                                        4130
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArrayExpression",
                                                            "name": "[...]",
                                                            "range": [
                                                                4131,
                                                                4187
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "AgentNodeLink.prisma(tx).create",
                                                                    "range": [
                                                                        4133,
                                                                        4178
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "name": "AgentNodeLink.prisma",
                                                                            "range": [
                                                                                4133,
                                                                                4145
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "AgentNodeLink",
                                                                                    "range": [
                                                                                        4133,
                                                                                        4145
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": ".create(\n{\n\"id\":str(uuid.uuid4"
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "prisma",
                                                                                    "range": [
                                                                                        4146,
                                                                                        4152
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "()),\n\"sourceName\":"
                                                                                }
                                                                            ],
                                                                            "content": ".create(\n{\n\"id\":str(uuid.uuid4"
                                                                        },
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "prisma(tx)",
                                                                            "range": [
                                                                                4153,
                                                                                4161
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "tx",
                                                                                    "range": [
                                                                                        4154,
                                                                                        4156
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": ".source_name,"
                                                                                }
                                                                            ],
                                                                            "content": "link.source_name,\n\"sinkName\":link."
                                                                        },
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "name": "create",
                                                                            "range": [
                                                                                4162,
                                                                                4168
                                                                            ],
                                                                            "children": [],
                                                                            "content": "sink_name,\n\"agentNodeSourceId\":link."
                                                                        },
                                                                        {
                                                                            "type": "ObjectExpression",
                                                                            "name": "{...}",
                                                                            "range": [
                                                                                4169,
                                                                                4176
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "id",
                                                                                    "range": [
                                                                                        4170,
                                                                                        4176
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "CallExpression",
                                                                                            "name": "str(uuid.uuid4())",
                                                                                            "range": [
                                                                                                4172,
                                                                                                4184
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "CallExpression",
                                                                                                    "name": "uuid.uuid4()",
                                                                                                    "range": [
                                                                                                        4176,
                                                                                                        4184
                                                                                                    ],
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "MemberExpression",
                                                                                                            "name": "uuid.uuid4",
                                                                                                            "range": [
                                                                                                                4176,
                                                                                                                4184
                                                                                                            ],
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "uuid",
                                                                                                                    "range": [
                                                                                                                        4176,
                                                                                                                        4180
                                                                                                                    ],
                                                                                                                    "children": [],
                                                                                                                    "content": "sink_id,\n\"isStatic\":"
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "uuid4",
                                                                                                                    "range": [
                                                                                                                        4181,
                                                                                                                        4185
                                                                                                                    ],
                                                                                                                    "children": [],
                                                                                                                    "content": "link.is_static,\n"
                                                                                                                }
                                                                                                            ],
                                                                                                            "content": "sink_id,\n\"isStatic\":link.is_static,"
                                                                                                        }
                                                                                                    ],
                                                                                                    "content": "sink_id,\n\"isStatic\":link.is_static,"
                                                                                                }
                                                                                            ],
                                                                                            "content": "\"agentNodeSinkId\":link.sink_id,\n\"isStatic\":link.is_static,"
                                                                                        }
                                                                                    ],
                                                                                    "content": ",\n\"agentNodeSinkId\":link.sink_id"
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "sourceName",
                                                                                    "range": [
                                                                                        4185,
                                                                                        4191
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "link.source_name",
                                                                                            "range": [
                                                                                                4187,
                                                                                                4191
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "\n)\nfor link"
                                                                                        }
                                                                                    ],
                                                                                    "content": "\n}\n)\nfor link"
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "sinkName",
                                                                                    "range": [
                                                                                        4192,
                                                                                        4198
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "link.sink_name",
                                                                                            "range": [
                                                                                                4194,
                                                                                                4198
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": ".links\n]\n"
                                                                                        }
                                                                                    ],
                                                                                    "content": "in graph.links\n]\n"
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "agentNodeSourceId",
                                                                                    "range": [
                                                                                        4199,
                                                                                        4205
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "link.source_id",
                                                                                            "range": [
                                                                                                4201,
                                                                                                4205
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "\n\n#--"
                                                                                        }
                                                                                    ],
                                                                                    "content": ")\n\n\n#--"
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "agentNodeSinkId",
                                                                                    "range": [
                                                                                        4206,
                                                                                        4212
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "link.sink_id",
                                                                                            "range": [
                                                                                                4208,
                                                                                                4212
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "-----"
                                                                                        }
                                                                                    ],
                                                                                    "content": "-------"
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "isStatic",
                                                                                    "range": [
                                                                                        4213,
                                                                                        4219
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "link.is_static",
                                                                                            "range": [
                                                                                                4215,
                                                                                                4219
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "-----"
                                                                                        }
                                                                                    ],
                                                                                    "content": "-------"
                                                                                }
                                                                            ],
                                                                            "content": "source_id,\n\"agentNodeSinkId\":link.sink_id"
                                                                        }
                                                                    ],
                                                                    "content": ".create(\n{\n\"id\":str(uuid.uuid4()),\n\"sourceName\":link.source_name,\n\"sinkName\":link.sink_name,\n\"agentNodeSourceId\":link.source_id,\n\"agentNodeSinkId\":link.sink_id,\n"
                                                                }
                                                            ],
                                                            "content": "tx).create(\n{\n\"id\":str(uuid.uuid4()),\n\"sourceName\":link.source_name,\n\"sinkName\":link.sink_name,\n\"agentNodeSourceId\":link.source_id,\n\"agentNodeSinkId\":link.sink_id,\n\"isStatic\":link.is_static,\n}\n"
                                                        }
                                                    ],
                                                    "content": "prisma("
                                                }
                                            ],
                                            "content": "\n)\n\nawait asyncio.gather(\n*[\nAgentNodeLink.prisma(tx).create(\n{\n\"id\":str(uuid.uuid4()),\n\"sourceName\":link.source_name,\n\"sinkName\":link.sink_name,\n\"agentNodeSourceId\":link.source_id,\n\"agentNodeSinkId\":link.sink_id,\n\"isStatic\":link.is_static,\n}\n)\n"
                                        }
                                    ],
                                    "content": "in graph.nodes\n]"
                                }
                            ],
                            "content": "in graph.nodes\n]\n)\n\nawait asyncio.gather(\n*[\nAgentNodeLink.prisma(tx).create(\n{\n\"id\":str(uuid.uuid4()),\n\"sourceName\":link.source_name,\n\"sinkName\":link.sink_name,\n\"agentNodeSourceId\":link.source_id,\n\"agentNodeSinkId\":link.sink_id,\n\"isStatic\":link.is_static,\n}\n)\nfor"
                        }
                    ],
                    "content": ",graph:Graph,user_id:str):\nawait AgentGraph.prisma(tx).create(\ndata={\n\"id\":graph.id,\n\"version\":graph.version,\n\"name\":graph.name,\n\"description\":graph.description,\n\"isTemplate\":graph.is_template,\n\"isActive\":graph.is_active,\n\"userId\":user_id,\n}\n)\n\nawait asyncio.gather(\n*[\nAgentNode.prisma(tx).create(\n{\n\"id\":node.id,\n\"agentBlockId\":node.block_id,\n\"agentGraphId\":graph.id,\n\"agentGraphVersion\":graph.version,\n\"constantInput\":json.dumps(node.input_default),\n\"metadata\":json.dumps(node.metadata),\n}\n)\nfor node in graph.nodes\n]\n)\n\nawait asyncio.gather(\n*[\nAgentNodeLink.prisma(tx).create(\n{\n\"id\":str(uuid.uuid4()),\n\"sourceName\":link.source_name,\n\"sinkName\":link.sink_name,\n\"agentNodeSourceId\":link.source_id,\n\"agentNodeSinkId\":link.sink_id,\n\"isStatic\":link.is_static,\n}\n)\nfor link in"
                }
            ],
            "content": "\nraise ValueError(f \"Created graph {graph.id} v{graph.version} is not in DB\")\n\n\nasync def __create_graph(tx,graph:Graph,user_id:str):\nawait AgentGraph.prisma(tx).create(\ndata={\n\"id\":graph.id,\n\"version\":graph.version,\n\"name\":graph.name,\n\"description\":graph.description,\n\"isTemplate\":graph.is_template,\n\"isActive\":graph.is_active,\n\"userId\":user_id,\n}\n)\n\nawait asyncio.gather(\n*[\nAgentNode.prisma(tx).create(\n{\n\"id\":node.id,\n\"agentBlockId\":node.block_id,\n\"agentGraphId\":graph.id,\n\"agentGraphVersion\":graph.version,\n\"constantInput\":json.dumps(node.input_default),\n\"metadata\":json.dumps(node.metadata),\n}\n)\nfor node in graph.nodes\n]\n)\n\nawait asyncio.gather(\n*[\nAgentNodeLink.prisma(tx).create(\n{\n\"id\":str(uuid.uuid4()),\n\"sourceName\":link.source_name,\n\"sinkName\":link.sink_name,\n\"agentNodeSourceId\":link.source_id,\n\"agentNodeSinkId\":link.sink_id,\n\"isStatic\":link.is_static,\n}\n)\nfor link in"
        },
        {
            "type": "Comment",
            "name": "",
            "range": [
                4193,
                4243
            ],
            "children": [],
            "content": "graph.links\n]\n)\n\n\n#------------------------UTILITIES---------------"
        },
        {
            "type": "NewLine",
            "name": "",
            "range": [
                4244,
                4246
            ],
            "children": [],
            "content": "---"
        },
        {
            "type": "FunctionDecl",
            "name": "make_graph_model",
            "range": [
                4247,
                4346
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        4249,
                        4257
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "creatable_graph",
                            "range": [
                                4250,
                                4252
                            ],
                            "children": [],
                            "content": "---"
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                4254,
                                4256
                            ],
                            "children": [],
                            "content": "\n\n\n"
                        }
                    ],
                    "content": "----#\n\n\ndef"
                },
                {
                    "type": "ReturnType",
                    "name": "GraphModel",
                    "range": [
                        4258,
                        4260
                    ],
                    "children": [],
                    "content": "make_graph_model(creatable_graph"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        4263,
                        4265
                    ],
                    "children": [],
                    "content": ",user_id:"
                },
                {
                    "type": "Comment",
                    "name": "comment",
                    "range": [
                        4267,
                        4278
                    ],
                    "children": [],
                    "content": ")->GraphModel:\n\"\"\" \\n     Convert a Graph to a GraphModel, setting graph_id and graph_version on all nodes. \\n  \\n     Args: \\n         creatable_graph (Graph): The creatable graph to convert. \\n         user_id (str): The ID of the user creating the graph. \\n  \\n     Returns: \\n         GraphModel: The converted Graph object. \\n     \"\"\"\n#Create"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        4279,
                        4345
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "GraphModel",
                            "range": [
                                4280,
                                4344
                            ],
                            "children": [
                                {
                                    "type": "ArgumentList",
                                    "name": "arguments",
                                    "range": [
                                        4281,
                                        4344
                                    ],
                                    "children": [
                                        {
                                            "type": "KeywordArgument",
                                            "name": "creatable_graph",
                                            "range": [
                                                4285,
                                                4294
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "model_dump",
                                                    "range": [
                                                        4287,
                                                        4294
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "arguments",
                                                            "range": [
                                                                4288,
                                                                4294
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "KeywordArgument",
                                                                    "name": "exclude",
                                                                    "range": [
                                                                        4290,
                                                                        4293
                                                                    ],
                                                                    "children": [],
                                                                    "content": "GraphModel(\n*"
                                                                }
                                                            ],
                                                            "content": "\nreturn GraphModel(\n**"
                                                        }
                                                    ],
                                                    "content": "CreatableGraph\nreturn GraphModel(\n**"
                                                }
                                            ],
                                            "content": "properties from CreatableGraph\nreturn GraphModel(\n**"
                                        },
                                        {
                                            "type": "KeywordArgument",
                                            "name": "user_id",
                                            "range": [
                                                4297,
                                                4299
                                            ],
                                            "children": [],
                                            "content": "model_dump(exclude"
                                        },
                                        {
                                            "type": "KeywordArgument",
                                            "name": "nodes",
                                            "range": [
                                                4302,
                                                4341
                                            ],
                                            "children": [
                                                {
                                                    "type": "List",
                                                    "name": "nodes",
                                                    "range": [
                                                        4304,
                                                        4341
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "NodeModel",
                                                            "range": [
                                                                4306,
                                                                4332
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "arguments",
                                                                    "range": [
                                                                        4307,
                                                                        4332
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "KeywordArgument",
                                                                            "name": "creatable_node",
                                                                            "range": [
                                                                                4311,
                                                                                4316
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "CallExpression",
                                                                                    "name": "model_dump",
                                                                                    "range": [
                                                                                        4313,
                                                                                        4316
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "=[\nNodeModel"
                                                                                }
                                                                            ],
                                                                            "content": "\nnodes=[\nNodeModel"
                                                                        },
                                                                        {
                                                                            "type": "KeywordArgument",
                                                                            "name": "graph_id",
                                                                            "range": [
                                                                                4318,
                                                                                4323
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\n**creatable_node.model_dump"
                                                                        },
                                                                        {
                                                                            "type": "KeywordArgument",
                                                                            "name": "graph_version",
                                                                            "range": [
                                                                                4325,
                                                                                4330
                                                                            ],
                                                                            "children": [],
                                                                            "content": "),\ngraph_id=creatable_graph"
                                                                        }
                                                                    ],
                                                                    "content": "user_id=user_id,\nnodes=[\nNodeModel(\n**creatable_node.model_dump(),\ngraph_id=creatable_graph.id"
                                                                }
                                                            ],
                                                            "content": "\nuser_id=user_id,\nnodes=[\nNodeModel(\n**creatable_node.model_dump(),\ngraph_id=creatable_graph.id"
                                                        }
                                                    ],
                                                    "content": "),\nuser_id=user_id,\nnodes=[\nNodeModel(\n**creatable_node.model_dump(),\ngraph_id=creatable_graph.id,\ngraph_version=creatable_graph.version,\n"
                                                }
                                            ],
                                            "content": "\"nodes\"}),\nuser_id=user_id,\nnodes=[\nNodeModel(\n**creatable_node.model_dump(),\ngraph_id=creatable_graph.id,\ngraph_version=creatable_graph.version,\n"
                                        }
                                    ],
                                    "content": "Graph object,inheriting properties from CreatableGraph\nreturn GraphModel(\n**creatable_graph.model_dump(exclude={\"nodes\"}),\nuser_id=user_id,\nnodes=[\nNodeModel(\n**creatable_node.model_dump(),\ngraph_id=creatable_graph.id,\ngraph_version=creatable_graph.version,\n)\nfor"
                                }
                            ],
                            "content": "new Graph object,inheriting properties from CreatableGraph\nreturn GraphModel(\n**creatable_graph.model_dump(exclude={\"nodes\"}),\nuser_id=user_id,\nnodes=[\nNodeModel(\n**creatable_node.model_dump(),\ngraph_id=creatable_graph.id,\ngraph_version=creatable_graph.version,\n)\nfor"
                        }
                    ],
                    "content": "a new Graph object,inheriting properties from CreatableGraph\nreturn GraphModel(\n**creatable_graph.model_dump(exclude={\"nodes\"}),\nuser_id=user_id,\nnodes=[\nNodeModel(\n**creatable_node.model_dump(),\ngraph_id=creatable_graph.id,\ngraph_version=creatable_graph.version,\n)\nfor creatable_node"
                }
            ],
            "content": "------#\n\n\ndef make_graph_model(creatable_graph:Graph,user_id:str)->GraphModel:\n\"\"\" \\n     Convert a Graph to a GraphModel, setting graph_id and graph_version on all nodes. \\n  \\n     Args: \\n         creatable_graph (Graph): The creatable graph to convert. \\n         user_id (str): The ID of the user creating the graph. \\n  \\n     Returns: \\n         GraphModel: The converted Graph object. \\n     \"\"\"\n#Create a new Graph object,inheriting properties from CreatableGraph\nreturn GraphModel(\n**creatable_graph.model_dump(exclude={\"nodes\"}),\nuser_id=user_id,\nnodes=[\nNodeModel(\n**creatable_node.model_dump(),\ngraph_id=creatable_graph.id,\ngraph_version=creatable_graph.version,\n)\nfor creatable_node in"
        }
    ],
    "content": "import asyncio\nimport logging\nimport uuid\nfrom collections import defaultdict\nfrom datetime import datetime,timezone\nfrom typing import Any,Literal,Optional,Type\n\nimport prisma\nfrom prisma.models import AgentGraph,AgentGraphExecution,AgentNode,AgentNodeLink\nfrom prisma.types import AgentGraphWhereInput\nfrom pydantic.fields import computed_field\n\nfrom backend.blocks.agent import AgentExecutorBlock\nfrom backend.blocks.basic import AgentInputBlock,AgentOutputBlock\nfrom backend.util import json\n\nfrom.block import BlockInput,BlockType,get_block,get_blocks\nfrom.db import BaseDbModel,transaction\nfrom.execution import ExecutionStatus\nfrom.includes import AGENT_GRAPH_INCLUDE,AGENT_NODE_INCLUDE\nfrom.integrations import Webhook\n\nlogger=logging.getLogger(__name__)\n\n\nclass Link(BaseDbModel):\nsource_id:str\nsink_id:str\nsource_name:str\nsink_name:str\nis_static:bool=False\n\n@staticmethod\ndef from_db(link:AgentNodeLink):\nreturn Link(\nid=link.id,\nsource_name=link.sourceName,\nsource_id=link.agentNodeSourceId,\nsink_name=link.sinkName,\nsink_id=link.agentNodeSinkId,\nis_static=link.isStatic,\n)\n\ndef __hash__(self):\nreturn hash((self.source_id,self.sink_id,self.source_name,self.sink_name))\n\n\nclass Node(BaseDbModel):\nblock_id:str\ninput_default:BlockInput={}#dict[input_name,default_value]\nmetadata:dict[str,Any]={}\ninput_links:list[Link]=[]\noutput_links:list[Link]=[]\n\nwebhook_id:Optional[str]=None\n\n\nclass NodeModel(Node):\ngraph_id:str\ngraph_version:int\n\nwebhook:Optional[Webhook]=None\n\n@staticmethod\ndef from_db(node:AgentNode):\nif not node.AgentBlock:\nraise ValueError(f \"Invalid node {node.id}, invalid AgentBlock.\")\nobj=NodeModel(\nid=node.id,\nblock_id=node.AgentBlock.id,\ninput_default=json.loads(node.constantInput,target_type=dict[str,Any]),\nmetadata=json.loads(node.metadata,target_type=dict[str,Any]),\ngraph_id=node.agentGraphId,\ngraph_version=node.agentGraphVersion,\nwebhook_id=node.webhookId,\nwebhook=Webhook.from_db(node.Webhook)if node.Webhook else None,\n)\nobj.input_links=[Link.from_db(link)for link in node.Input or[]]\nobj.output_links=[Link.from_db(link)for link in node.Output or[]]\nreturn obj\n\ndef is_triggered_by_event_type(self,event_type:str)->bool:\nif not(block:=get_block(self.block_id)):\nraise ValueError(f \"Block #{self.block_id} not found for node #{self.id}\")\nif not block.webhook_config:\nraise TypeError(\"This method can't be used on non-webhook blocks\")\nif not block.webhook_config.event_filter_input:\nreturn True\nevent_filter=self.input_default.get(block.webhook_config.event_filter_input)\nif not event_filter:\nraise ValueError(f \"Event filter is not configured on node #{self.id}\")\nreturn event_type in[\nblock.webhook_config.event_format.format(event=k)\nfor k in event_filter\nif event_filter[k]is True\n]\n\n\n#Fix2-way reference Node<->Webhook\nWebhook.model_rebuild()\n\n\nclass GraphExecution(BaseDbModel):\nexecution_id:str\nstarted_at:datetime\nended_at:datetime\nduration:float\ntotal_run_time:float\nstatus:ExecutionStatus\ngraph_id:str\ngraph_version:int\n\n@staticmethod\ndef from_db(execution:AgentGraphExecution):\nnow=datetime.now(timezone.utc)\nstart_time=execution.startedAt or execution.createdAt\nend_time=execution.updatedAt or now\nduration=(end_time-start_time).total_seconds()\ntotal_run_time=duration\n\ntry:\nstats=json.loads(execution.stats or\"{}\",target_type=dict[str,Any])\nexcept ValueError:\nstats={}\n\nduration=stats.get(\"walltime\",duration)\ntotal_run_time=stats.get(\"nodes_walltime\",total_run_time)\n\nreturn GraphExecution(\nid=execution.id,\nexecution_id=execution.id,\nstarted_at=start_time,\nended_at=end_time,\nduration=duration,\ntotal_run_time=total_run_time,\nstatus=ExecutionStatus(execution.executionStatus),\ngraph_id=execution.agentGraphId,\ngraph_version=execution.agentGraphVersion,\n)\n\n\nclass Graph(BaseDbModel):\nversion:int=1\nis_active:bool=True\nis_template:bool=False\nname:str\ndescription:str\nnodes:list[Node]=[]\nlinks:list[Link]=[]\n\n@computed_field\n@property\ndef input_schema(self)->dict[str,Any]:\nreturn self._generate_schema(\nAgentInputBlock.Input,\n[\nnode.input_default\nfor node in self.nodes\nif(b:=get_block(node.block_id))\nand b.block_type==BlockType.INPUT\nand \"name\" in node.input_default\n],\n)\n\n@computed_field\n@property\ndef output_schema(self)->dict[str,Any]:\nreturn self._generate_schema(\nAgentOutputBlock.Input,\n[\nnode.input_default\nfor node in self.nodes\nif(b:=get_block(node.block_id))\nand b.block_type==BlockType.OUTPUT\nand \"name\" in node.input_default\n],\n)\n\n@staticmethod\ndef _generate_schema(\ntype_class:Type[AgentInputBlock.Input]|Type[AgentOutputBlock.Input],\ndata:list[dict],\n)->dict[str,Any]:\nprops=[]\nfor p in data:\ntry:\nprops.append(type_class(**p))\nexcept Exception as e:\nlogger.warning(f \"Invalid {type_class}: {p}, {e}\")\n\nreturn{\n\"type\":\"object\",\n\"properties\":{\np.name:{\n\"secret\":p.secret,\n\"advanced\":p.advanced,\n\"title\":p.title or p.name,\n**({\"description\":p.description}if p.description else{}),\n**({\"default\":p.value}if p.value is not None else{}),\n}\nfor p in props\n},\n\"required\":[p.name for p in props if p.value is None],\n}\n\n\nclass GraphModel(Graph):\nuser_id:str\nnodes:list[NodeModel]=[]#type:ignore\n\n@property\ndef starting_nodes(self)->list[Node]:\noutbound_nodes={link.sink_id for link in self.links}\ninput_nodes={\nv.id\nfor v in self.nodes\nif(b:=get_block(v.block_id))and b.block_type==BlockType.INPUT\n}\nreturn[\nnode\nfor node in self.nodes\nif node.id not in outbound_nodes or node.id in input_nodes\n]\n\ndef reassign_ids(self,user_id:str,reassign_graph_id:bool=False):\n\"\"\" \\n         Reassigns all IDs in the graph to new UUIDs. \\n         This method can be used before storing a new graph to the database. \\n         \"\"\"\n\n#Reassign Graph ID\nid_map={node.id:str(uuid.uuid4())for node in self.nodes}\nif reassign_graph_id:\nself.id=str(uuid.uuid4())\n\n#Reassign Node IDs\nfor node in self.nodes:\nnode.id=id_map[node.id]\n\n#Reassign Link IDs\nfor link in self.links:\nlink.source_id=id_map[link.source_id]\nlink.sink_id=id_map[link.sink_id]\n\n#Reassign User IDs for agent blocks\nfor node in self.nodes:\nif node.block_id!=AgentExecutorBlock().id:\ncontinue\nnode.input_default[\"user_id\"]=user_id\nnode.input_default.setdefault(\"data\",{})\n\nself.validate_graph()\n\ndef validate_graph(self,for_run:bool=False):\ndef sanitize(name):\nreturn name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")[0]\n\ninput_links=defaultdict(list)\nfor link in self.links:\ninput_links[link.sink_id].append(link)\n\n#Nodes:required fields are filled or connected and dependencies are satisfied\nfor node in self.nodes:\nblock=get_block(node.block_id)\nif block is None:\nraise ValueError(f \"Invalid block {node.block_id} for node #{node.id}\")\n\nprovided_inputs=set(\n[sanitize(name)for name in node.input_default]\n+[sanitize(link.sink_name)for link in input_links.get(node.id,[])]\n)\nfor name in block.input_schema.get_required_fields():\nif(\nname not in provided_inputs\nand not(\nname==\"payload\"\nand block.block_type\nin(BlockType.WEBHOOK,BlockType.WEBHOOK_MANUAL)\n)\nand(\nfor_run#Skip input completion validation,unless when executing.\nor block.block_type==BlockType.INPUT\nor block.block_type==BlockType.OUTPUT\nor block.block_type==BlockType.AGENT\n)\n):\nraise ValueError(\nf \"Node {block.name} #{node.id} required input missing: `{name}`\"\n)\n\n#Get input schema properties and check dependencies\ninput_schema=block.input_schema.model_fields\nrequired_fields=block.input_schema.get_required_fields()\n\ndef has_value(name):\nreturn(\nnode is not None\nand name in node.input_default\nand node.input_default[name]is not None\nand str(node.input_default[name]).strip()!=\"\"\n)or(name in input_schema and input_schema[name].default is not None)\n\n#Validate dependencies between fields\nfor field_name,field_info in input_schema.items():\n#Apply input dependency validation only on run&field with depends_on\njson_schema_extra=field_info.json_schema_extra or{}\ndependencies=json_schema_extra.get(\"depends_on\",[])\nif not for_run or not dependencies:\ncontinue\n\n#Check if dependent field has value in input_default\nfield_has_value=has_value(field_name)\nfield_is_required=field_name in required_fields\n\n#Check for missing dependencies when dependent field is present\nmissing_deps=[dep for dep in dependencies if not has_value(dep)]\nif missing_deps and(field_has_value or field_is_required):\nraise ValueError(\nf \"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n)\n\nnode_map={v.id:v for v in self.nodes}\n\ndef is_static_output_block(nid:str)->bool:\nbid=node_map[nid].block_id\nb=get_block(bid)\nreturn b.static_output if b else False\n\n#Links:links are connected and the connected pin data type are compatible.\nfor link in self.links:\nsource=(link.source_id,link.source_name)\nsink=(link.sink_id,link.sink_name)\nsuffix=f \"Link {source} <-> {sink}\"\n\nfor i,(node_id,name)in enumerate([source,sink]):\nnode=node_map.get(node_id)\nif not node:\nraise ValueError(\nf \"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n)\n\nblock=get_block(node.block_id)\nif not block:\nblocks={v().id:v().name for v in get_blocks().values()}\nraise ValueError(\nf \"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n)\n\nsanitized_name=sanitize(name)\nvals=node.input_default\nif i==0:\nfields=(\nblock.output_schema.get_fields()\nif block.block_type!=BlockType.AGENT\nelse vals.get(\"output_schema\",{}).get(\"properties\",{}).keys()\n)\nelse:\nfields=(\nblock.input_schema.get_fields()\nif block.block_type!=BlockType.AGENT\nelse vals.get(\"input_schema\",{}).get(\"properties\",{}).keys()\n)\nif sanitized_name not in fields:\nfields_msg=f \"Allowed fields: {fields}\"\nraise ValueError(f \"{suffix}, `{name}` invalid, {fields_msg}\")\n\nif is_static_output_block(link.source_id):\nlink.is_static=True#Each value block output should be static.\n\n@staticmethod\ndef from_db(graph:AgentGraph,for_export:bool=False):\nreturn GraphModel(\nid=graph.id,\nuser_id=graph.userId,\nversion=graph.version,\nis_active=graph.isActive,\nis_template=graph.isTemplate,\nname=graph.name or\"\",\ndescription=graph.description or\"\",\nnodes=[\nNodeModel.from_db(GraphModel._process_node(node,for_export))\nfor node in graph.AgentNodes or[]\n],\nlinks=list(\n{\nLink.from_db(link)\nfor node in graph.AgentNodes or[]\nfor link in(node.Input or[])+(node.Output or[])\n}\n),\n)\n\n@staticmethod\ndef _process_node(node:AgentNode,for_export:bool)->AgentNode:\nif for_export:\n#Remove credentials from node input\nif node.constantInput:\nconstant_input=json.loads(\nnode.constantInput,target_type=dict[str,Any]\n)\nconstant_input=GraphModel._hide_node_input_credentials(constant_input)\nnode.constantInput=json.dumps(constant_input)\n\n#Remove webhook info\nnode.webhookId=None\nnode.Webhook=None\n\nreturn node\n\n@staticmethod\ndef _hide_node_input_credentials(input_data:dict[str,Any])->dict[str,Any]:\nsensitive_keys=[\"credentials\",\"api_key\",\"password\",\"token\",\"secret\"]\nresult={}\nfor key,value in input_data.items():\nif isinstance(value,dict):\nresult[key]=GraphModel._hide_node_input_credentials(value)\nelif isinstance(value,str)and any(\nsensitive_key in key.lower()for sensitive_key in sensitive_keys\n):\n#Skip this key-value pair in the result\ncontinue\nelse:\nresult[key]=value\nreturn result\n\n\n#---------------------CRUD functions---------------------#\n\n\nasync def get_node(node_id:str)->NodeModel:\nnode=await AgentNode.prisma().find_unique_or_raise(\nwhere={\"id\":node_id},\ninclude=AGENT_NODE_INCLUDE,\n)\nreturn NodeModel.from_db(node)\n\n\nasync def set_node_webhook(node_id:str,webhook_id:str|None)->NodeModel:\nnode=await AgentNode.prisma().update(\nwhere={\"id\":node_id},\ndata=(\n{\"Webhook\":{\"connect\":{\"id\":webhook_id}}}\nif webhook_id\nelse{\"Webhook\":{\"disconnect\":True}}\n),\ninclude=AGENT_NODE_INCLUDE,\n)\nif not node:\nraise ValueError(f \"Node #{node_id} not found\")\nreturn NodeModel.from_db(node)\n\n\nasync def get_graphs(\nuser_id:str,\nfilter_by:Literal[\"active\",\"template\"]|None=\"active\",\n)->list[GraphModel]:\n\"\"\" \\n     Retrieves graph metadata objects. \\n     Default behaviour is to get all currently active graphs. \\n  \\n     Args: \\n         filter_by: An optional filter to either select templates or active graphs. \\n         user_id: The ID of the user that owns the graph. \\n  \\n     Returns: \\n         list[GraphModel]: A list of objects representing the retrieved graphs. \\n     \"\"\"\nwhere_clause:AgentGraphWhereInput={\"userId\":user_id}\n\nif filter_by==\"active\":\nwhere_clause[\"isActive\"]=True\nelif filter_by==\"template\":\nwhere_clause[\"isTemplate\"]=True\n\ngraphs=await AgentGraph.prisma().find_many(\nwhere=where_clause,\ndistinct=[\"id\"],\norder={\"version\":\"desc\"},\ninclude=AGENT_GRAPH_INCLUDE,\n)\n\ngraph_models=[]\nfor graph in graphs:\ntry:\ngraph_models.append(GraphModel.from_db(graph))\nexcept Exception as e:\nlogger.error(f \"Error processing graph {graph.id}: {e}\")\ncontinue\n\nreturn graph_models\n\n\nasync def get_executions(user_id:str)->list[GraphExecution]:\nexecutions=await AgentGraphExecution.prisma().find_many(\nwhere={\"userId\":user_id},\norder={\"createdAt\":\"desc\"},\n)\nreturn[GraphExecution.from_db(execution)for execution in executions]\n\n\nasync def get_execution(user_id:str,execution_id:str)->GraphExecution|None:\nexecution=await AgentGraphExecution.prisma().find_first(\nwhere={\"id\":execution_id,\"userId\":user_id}\n)\nreturn GraphExecution.from_db(execution)if execution else None\n\n\nasync def get_graph(\ngraph_id:str,\nversion:int|None=None,\ntemplate:bool=False,\nuser_id:str|None=None,\nfor_export:bool=False,\n)->GraphModel|None:\n\"\"\" \\n     Retrieves a graph from the DB. \\n     Defaults to the version with `is_active` if `version` is not passed, \\n     or the latest version with `is_template` if `template=True`. \\n  \\n     Returns `None` if the record is not found. \\n     \"\"\"\nwhere_clause:AgentGraphWhereInput={\n\"id\":graph_id,\n}\nif version is not None:\nwhere_clause[\"version\"]=version\nelif not template:\nwhere_clause[\"isActive\"]=True\n\n#TODO:Fix hack workaround to get adding store agents to work\nif user_id is not None and not template:\nwhere_clause[\"userId\"]=user_id\n\ngraph=await AgentGraph.prisma().find_first(\nwhere=where_clause,\ninclude=AGENT_GRAPH_INCLUDE,\norder={\"version\":\"desc\"},\n)\nreturn GraphModel.from_db(graph,for_export)if graph else None\n\n\nasync def set_graph_active_version(graph_id:str,version:int,user_id:str)->None:\n#Activate the requested version if it exists and is owned by the user.\nupdated_count=await AgentGraph.prisma().update_many(\ndata={\"isActive\":True},\nwhere={\n\"id\":graph_id,\n\"version\":version,\n\"userId\":user_id,\n},\n)\nif updated_count==0:\nraise Exception(f \"Graph #{graph_id} v{version} not found or not owned by user\")\n\n#Deactivate all other versions.\nawait AgentGraph.prisma().update_many(\ndata={\"isActive\":False},\nwhere={\n\"id\":graph_id,\n\"version\":{\"not\":version},\n\"userId\":user_id,\n\"isActive\":True,\n},\n)\n\n\nasync def get_graph_all_versions(graph_id:str,user_id:str)->list[GraphModel]:\ngraph_versions=await AgentGraph.prisma().find_many(\nwhere={\"id\":graph_id,\"userId\":user_id},\norder={\"version\":\"desc\"},\ninclude=AGENT_GRAPH_INCLUDE,\n)\n\nif not graph_versions:\nreturn[]\n\nreturn[GraphModel.from_db(graph)for graph in graph_versions]\n\n\nasync def delete_graph(graph_id:str,user_id:str)->int:\nentries_count=await AgentGraph.prisma().delete_many(\nwhere={\"id\":graph_id,\"userId\":user_id}\n)\nif entries_count:\nlogger.info(f \"Deleted {entries_count} graph entries for Graph #{graph_id}\")\nreturn entries_count\n\n\nasync def create_graph(graph:Graph,user_id:str)->GraphModel:\nasync with transaction()as tx:\nawait __create_graph(tx,graph,user_id)\n\nif created_graph:=await get_graph(\ngraph.id,graph.version,graph.is_template,user_id=user_id\n):\nreturn created_graph\n\nraise ValueError(f \"Created graph {graph.id} v{graph.version} is not in DB\")\n\n\nasync def __create_graph(tx,graph:Graph,user_id:str):\nawait AgentGraph.prisma(tx).create(\ndata={\n\"id\":graph.id,\n\"version\":graph.version,\n\"name\":graph.name,\n\"description\":graph.description,\n\"isTemplate\":graph.is_template,\n\"isActive\":graph.is_active,\n\"userId\":user_id,\n}\n)\n\nawait asyncio.gather(\n*[\nAgentNode.prisma(tx).create(\n{\n\"id\":node.id,\n\"agentBlockId\":node.block_id,\n\"agentGraphId\":graph.id,\n\"agentGraphVersion\":graph.version,\n\"constantInput\":json.dumps(node.input_default),\n\"metadata\":json.dumps(node.metadata),\n}\n)\nfor node in graph.nodes\n]\n)\n\nawait asyncio.gather(\n*[\nAgentNodeLink.prisma(tx).create(\n{\n\"id\":str(uuid.uuid4()),\n\"sourceName\":link.source_name,\n\"sinkName\":link.sink_name,\n\"agentNodeSourceId\":link.source_id,\n\"agentNodeSinkId\":link.sink_id,\n\"isStatic\":link.is_static,\n}\n)\nfor link in graph.links\n]\n)\n\n\n#------------------------UTILITIES------------------------#\n\n\ndef make_graph_model(creatable_graph:Graph,user_id:str)->GraphModel:\n\"\"\" \\n     Convert a Graph to a GraphModel, setting graph_id and graph_version on all nodes. \\n  \\n     Args: \\n         creatable_graph (Graph): The creatable graph to convert. \\n         user_id (str): The ID of the user creating the graph. \\n  \\n     Returns: \\n         GraphModel: The converted Graph object. \\n     \"\"\"\n#Create a new Graph object,inheriting properties from CreatableGraph\nreturn GraphModel(\n**creatable_graph.model_dump(exclude={\"nodes\"}),\nuser_id=user_id,\nnodes=[\nNodeModel(\n**creatable_node.model_dump(),\ngraph_id=creatable_graph.id,\ngraph_version=creatable_graph.version,\n)\nfor creatable_node in"
}