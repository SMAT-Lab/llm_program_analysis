{
    "type": "Program",
    "name": "Global",
    "range": [
        180,
        2543
    ],
    "children": [
        {
            "type": "EnumDeclaration",
            "name": "STANDARD",
            "range": [
                187,
                189
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\"Standard\"",
                    "range": [
                        189,
                        189
                    ],
                    "children": [],
                    "content": "]"
                }
            ],
            "content": "Any]]"
        },
        {
            "type": "EnumDeclaration",
            "name": "INPUT",
            "range": [
                191,
                193
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\"Input\"",
                    "range": [
                        193,
                        193
                    ],
                    "children": [],
                    "content": ","
                }
            ],
            "content": "Completed stream,"
        },
        {
            "type": "EnumDeclaration",
            "name": "OUTPUT",
            "range": [
                195,
                197
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\"Output\"",
                    "range": [
                        197,
                        197
                    ],
                    "children": [],
                    "content": "dict"
                }
            ],
            "content": "as a dict"
        },
        {
            "type": "EnumDeclaration",
            "name": "NOTE",
            "range": [
                199,
                201
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\"Note\"",
                    "range": [
                        201,
                        201
                    ],
                    "children": [],
                    "content": "\n"
                }
            ],
            "content": "\n\n\n"
        },
        {
            "type": "EnumDeclaration",
            "name": "WEBHOOK",
            "range": [
                203,
                205
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\"Webhook\"",
                    "range": [
                        205,
                        205
                    ],
                    "children": [],
                    "content": "Enum"
                }
            ],
            "content": "BlockType(Enum"
        },
        {
            "type": "EnumDeclaration",
            "name": "WEBHOOK_MANUAL",
            "range": [
                207,
                209
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\"Webhook (manual)\"",
                    "range": [
                        209,
                        209
                    ],
                    "children": [],
                    "content": "STANDARD"
                }
            ],
            "content": ":\nSTANDARD"
        },
        {
            "type": "EnumDeclaration",
            "name": "AGENT",
            "range": [
                211,
                213
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\"Agent\"",
                    "range": [
                        213,
                        213
                    ],
                    "children": [],
                    "content": "INPUT"
                }
            ],
            "content": "\"Standard\"\nINPUT"
        },
        {
            "type": "ClassDecl",
            "name": "BlockCategory",
            "range": [
                216,
                274
            ],
            "children": [
                {
                    "type": "EnumDecl",
                    "name": "",
                    "range": [
                        219,
                        274
                    ],
                    "children": [
                        {
                            "type": "EnumMember",
                            "name": "AI",
                            "range": [
                                223,
                                225
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Block that leverages AI to perform a task.\"",
                                    "range": [
                                        225,
                                        225
                                    ],
                                    "children": [],
                                    "content": "WEBHOOK"
                                }
                            ],
                            "content": "\"Note\"\nWEBHOOK"
                        },
                        {
                            "type": "EnumMember",
                            "name": "SOCIAL",
                            "range": [
                                227,
                                229
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Block that interacts with social media platforms.\"",
                                    "range": [
                                        229,
                                        229
                                    ],
                                    "children": [],
                                    "content": "WEBHOOK_MANUAL"
                                }
                            ],
                            "content": "\"Webhook\"\nWEBHOOK_MANUAL"
                        },
                        {
                            "type": "EnumMember",
                            "name": "TEXT",
                            "range": [
                                231,
                                233
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Block that processes text data.\"",
                                    "range": [
                                        233,
                                        233
                                    ],
                                    "children": [],
                                    "content": "AGENT"
                                }
                            ],
                            "content": "\"Webhook (manual)\"\nAGENT"
                        },
                        {
                            "type": "EnumMember",
                            "name": "SEARCH",
                            "range": [
                                235,
                                237
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Block that searches or extracts information from the internet.\"",
                                    "range": [
                                        237,
                                        237
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "\"Agent\"\n\n"
                        },
                        {
                            "type": "EnumMember",
                            "name": "BASIC",
                            "range": [
                                239,
                                241
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Block that performs basic operations.\"",
                                    "range": [
                                        241,
                                        241
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "class BlockCategory("
                        },
                        {
                            "type": "EnumMember",
                            "name": "INPUT",
                            "range": [
                                243,
                                245
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Block that interacts with input of the graph.\"",
                                    "range": [
                                        245,
                                        245
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "):\n"
                        },
                        {
                            "type": "EnumMember",
                            "name": "OUTPUT",
                            "range": [
                                247,
                                249
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Block that interacts with output of the graph.\"",
                                    "range": [
                                        249,
                                        249
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "=\"Block that leverages AI to perform a task.\"\n"
                        },
                        {
                            "type": "EnumMember",
                            "name": "LOGIC",
                            "range": [
                                251,
                                253
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Programming logic to control the flow of your agent\"",
                                    "range": [
                                        253,
                                        253
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "=\"Block that interacts with social media platforms.\"\n"
                        },
                        {
                            "type": "EnumMember",
                            "name": "COMMUNICATION",
                            "range": [
                                255,
                                257
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Block that interacts with communication platforms.\"",
                                    "range": [
                                        257,
                                        257
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "=\"Block that processes text data.\"\n"
                        },
                        {
                            "type": "EnumMember",
                            "name": "DEVELOPER_TOOLS",
                            "range": [
                                259,
                                261
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Developer tools such as GitHub blocks.\"",
                                    "range": [
                                        261,
                                        261
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "=\"Block that searches or extracts information from the internet.\"\n"
                        },
                        {
                            "type": "EnumMember",
                            "name": "DATA",
                            "range": [
                                263,
                                265
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Block that interacts with structured data.\"",
                                    "range": [
                                        265,
                                        265
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "=\"Block that performs basic operations.\"\n"
                        },
                        {
                            "type": "EnumMember",
                            "name": "HARDWARE",
                            "range": [
                                267,
                                269
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Block that interacts with hardware.\"",
                                    "range": [
                                        269,
                                        269
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "=\"Block that interacts with input of the graph.\"\n"
                        },
                        {
                            "type": "EnumMember",
                            "name": "AGENT",
                            "range": [
                                271,
                                273
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Block that interacts with other agents.\"",
                                    "range": [
                                        273,
                                        273
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "=\"Block that interacts with output of the graph.\"\n"
                        },
                        {
                            "type": "EnumMember",
                            "name": "CRM",
                            "range": [
                                275,
                                277
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Block that interacts with CRM services.\"",
                                    "range": [
                                        277,
                                        277
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "=\"Programming logic to control the flow of your agent\"\n"
                        }
                    ],
                    "content": "\"Output\"\nNOTE=\"Note\"\nWEBHOOK=\"Webhook\"\nWEBHOOK_MANUAL=\"Webhook (manual)\"\nAGENT=\"Agent\"\n\n\nclass BlockCategory(Enum):\nAI=\"Block that leverages AI to perform a task.\"\nSOCIAL=\"Block that interacts with social media platforms.\"\nTEXT=\"Block that processes text data.\"\nSEARCH=\"Block that searches or extracts information from the internet.\"\nBASIC=\"Block that performs basic operations.\"\nINPUT=\"Block that interacts with input of the graph.\"\nOUTPUT=\"Block that interacts with output of the graph.\"\nLOGIC"
                }
            ],
            "content": "\nOUTPUT=\"Output\"\nNOTE=\"Note\"\nWEBHOOK=\"Webhook\"\nWEBHOOK_MANUAL=\"Webhook (manual)\"\nAGENT=\"Agent\"\n\n\nclass BlockCategory(Enum):\nAI=\"Block that leverages AI to perform a task.\"\nSOCIAL=\"Block that interacts with social media platforms.\"\nTEXT=\"Block that processes text data.\"\nSEARCH=\"Block that searches or extracts information from the internet.\"\nBASIC=\"Block that performs basic operations.\"\nINPUT=\"Block that interacts with input of the graph.\"\nOUTPUT=\"Block that interacts with output of the graph.\"\nLOGIC"
        },
        {
            "type": "FunctionDecl",
            "name": "dict",
            "range": [
                280,
                310
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        283,
                        284
                    ],
                    "children": [],
                    "content": "=\"Developer tools such as GitHub blocks.\""
                },
                {
                    "type": "ReturnType",
                    "name": "dict[str, str]",
                    "range": [
                        285,
                        292
                    ],
                    "children": [],
                    "content": "\nDATA=\"Block that interacts with structured data.\"\nHARDWARE=\"Block that interacts with hardware.\""
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        293,
                        310
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                295,
                                308
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        296,
                                        308
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "category",
                                            "range": [
                                                297,
                                                302
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "self.name",
                                                    "range": [
                                                        299,
                                                        301
                                                    ],
                                                    "children": [],
                                                    "content": "=\"Block that interacts with CRM services.\"\n"
                                                }
                                            ],
                                            "content": "\nCRM=\"Block that interacts with CRM services.\"\n\n"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "description",
                                            "range": [
                                                303,
                                                308
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "self.value",
                                                    "range": [
                                                        305,
                                                        307
                                                    ],
                                                    "children": [],
                                                    "content": "(self)"
                                                }
                                            ],
                                            "content": "def dict(self)-"
                                        }
                                    ],
                                    "content": "\"Block that interacts with other agents.\"\nCRM=\"Block that interacts with CRM services.\"\n\ndef dict(self)-"
                                }
                            ],
                            "content": "=\"Block that interacts with other agents.\"\nCRM=\"Block that interacts with CRM services.\"\n\ndef dict(self)-"
                        }
                    ],
                    "content": "\nAGENT=\"Block that interacts with other agents.\"\nCRM=\"Block that interacts with CRM services.\"\n\ndef dict(self)->dict"
                }
            ],
            "content": "\"Block that interacts with communication platforms.\"\nDEVELOPER_TOOLS=\"Developer tools such as GitHub blocks.\"\nDATA=\"Block that interacts with structured data.\"\nHARDWARE=\"Block that interacts with hardware.\"\nAGENT=\"Block that interacts with other agents.\"\nCRM=\"Block that interacts with CRM services.\"\n\ndef dict(self)->dict"
        },
        {
            "type": "ClassDecl",
            "name": "BlockSchema",
            "range": [
                311,
                1074
            ],
            "children": [
                {
                    "type": "ClassVariableDecl",
                    "name": "cached_jsonschema",
                    "range": [
                        318,
                        328
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "ClassVar",
                            "range": [
                                320,
                                328
                            ],
                            "children": [
                                {
                                    "type": "GenericType",
                                    "name": "dict",
                                    "range": [
                                        322,
                                        328
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "str",
                                            "range": [
                                                324,
                                                326
                                            ],
                                            "children": [],
                                            "content": "name,\"description\""
                                        },
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "Any",
                                            "range": [
                                                326,
                                                328
                                            ],
                                            "children": [],
                                            "content": "\"description\":self"
                                        }
                                    ],
                                    "content": "self.name,\"description\":self"
                                }
                            ],
                            "content": "\"category\":self.name,\"description\":self"
                        }
                    ],
                    "content": "return{\"category\":self.name,\"description\":self"
                },
                {
                    "type": "FunctionDecl",
                    "name": "jsonschema",
                    "range": [
                        334,
                        624
                    ],
                    "children": [
                        {
                            "type": "ReturnType",
                            "name": "dict",
                            "range": [
                                341,
                                346
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        343,
                                        345
                                    ],
                                    "children": [],
                                    "content": ":ClassVar["
                                },
                                {
                                    "type": "TypeAnnotation",
                                    "name": "Any",
                                    "range": [
                                        345,
                                        346
                                    ],
                                    "children": [],
                                    "content": "[dict"
                                }
                            ],
                            "content": "\ncached_jsonschema:ClassVar[dict"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                349,
                                359
                            ],
                            "children": [
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        355,
                                        359
                                    ],
                                    "children": [],
                                    "content": "@classmethod\ndef jsonschema"
                                }
                            ],
                            "content": ",Any]]\n\n@classmethod\ndef jsonschema"
                        },
                        {
                            "type": "Assignment",
                            "name": "model",
                            "range": [
                                361,
                                376
                            ],
                            "children": [],
                            "content": "cls)->dict[str,Any]:\nif cls.cached_jsonschema"
                        },
                        {
                            "type": "FunctionDecl",
                            "name": "ref_to_dict",
                            "range": [
                                379,
                                550
                            ],
                            "children": [
                                {
                                    "type": "IfStatement",
                                    "name": "if",
                                    "range": [
                                        386,
                                        393
                                    ],
                                    "children": [],
                                    "content": "=jsonref.replace_refs(cls.model_json_schema"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        489,
                                        524
                                    ],
                                    "children": [],
                                    "content": "1),None)\nif one_key:\nobj.update(obj[one_key][0])\n\nreturn{\nkey:ref_to_dict(value)\nfor key"
                                },
                                {
                                    "type": "ElifStatement",
                                    "name": "elif",
                                    "range": [
                                        526,
                                        533
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                535,
                                                546
                                            ],
                                            "children": [],
                                            "content": "not key.startswith(\"$\")and key!=one_key"
                                        }
                                    ],
                                    "content": "value in obj.items()\n"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        548,
                                        550
                                    ],
                                    "children": [],
                                    "content": "}\nelif"
                                }
                            ],
                            "content": "return cls.cached_jsonschema\n\nmodel=jsonref.replace_refs(cls.model_json_schema(),merge_props=True)\n\ndef ref_to_dict(obj):\nif isinstance(obj,dict):\n#OpenAPI<3.1does not support sibling fields that has a$ref key\n#So sometimes,the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with1item.\nkeys={\"allOf\",\"anyOf\",\"oneOf\"}\none_key=next((k for k in keys if k in obj and len(obj[k])==1),None)\nif one_key:\nobj.update(obj[one_key][0])\n\nreturn{\nkey:ref_to_dict(value)\nfor key,value in obj.items()\nif not key.startswith(\"$\")and key!=one_key\n}\nelif"
                        },
                        {
                            "type": "Assignment",
                            "name": "cls.cached_jsonschema",
                            "range": [
                                552,
                                570
                            ],
                            "children": [],
                            "content": "(obj,list):\nreturn[ref_to_dict(item)for item in obj]\n"
                        },
                        {
                            "type": "ForStatement",
                            "name": "for",
                            "range": [
                                578,
                                618
                            ],
                            "children": [
                                {
                                    "type": "IfStatement",
                                    "name": "if",
                                    "range": [
                                        598,
                                        610
                                    ],
                                    "children": [],
                                    "content": "default properties values\nfor field in cls.cached_jsonschema.get("
                                }
                            ],
                            "content": "cached_jsonschema=cast(dict[str,Any],ref_to_dict(model))\n\n#Set default properties values\nfor field in cls.cached_jsonschema.get(\"properties\",{}).values("
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                620,
                                624
                            ],
                            "children": [],
                            "content": ":\nif isinstance("
                        }
                    ],
                    "content": "\nclass BlockSchema(BaseModel):\ncached_jsonschema:ClassVar[dict[str,Any]]\n\n@classmethod\ndef jsonschema(cls)->dict[str,Any]:\nif cls.cached_jsonschema:\nreturn cls.cached_jsonschema\n\nmodel=jsonref.replace_refs(cls.model_json_schema(),merge_props=True)\n\ndef ref_to_dict(obj):\nif isinstance(obj,dict):\n#OpenAPI<3.1does not support sibling fields that has a$ref key\n#So sometimes,the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with1item.\nkeys={\"allOf\",\"anyOf\",\"oneOf\"}\none_key=next((k for k in keys if k in obj and len(obj[k])==1),None)\nif one_key:\nobj.update(obj[one_key][0])\n\nreturn{\nkey:ref_to_dict(value)\nfor key,value in obj.items()\nif not key.startswith(\"$\")and key!=one_key\n}\nelif isinstance(obj,list):\nreturn[ref_to_dict(item)for item in obj]\n\nreturn obj\n\ncls.cached_jsonschema=cast(dict[str,Any],ref_to_dict(model))\n\n#Set default properties values\nfor field in cls.cached_jsonschema.get(\"properties\",{}).values():\nif isinstance("
                },
                {
                    "type": "FunctionDecl",
                    "name": "validate_data",
                    "range": [
                        629,
                        662
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                645,
                                662
                            ],
                            "children": [],
                            "content": "cls.cached_jsonschema\n\n@classmethod\ndef validate_data(cls,data:BlockInput)-"
                        }
                    ],
                    "content": "and \"advanced\" not in field:\nfield[\"advanced\"]=True\n\nreturn cls.cached_jsonschema\n\n@classmethod\ndef validate_data(cls,data:BlockInput)-"
                },
                {
                    "type": "FunctionDecl",
                    "name": "validate_field",
                    "range": [
                        667,
                        769
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                707,
                                710
                            ],
                            "children": [
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        712,
                                        715
                                    ],
                                    "children": [],
                                    "content": "\" \\n         Validate the data against a specific property (one of the input/output name). \\n         Returns the validation error message if the data does not match the schema. \\n         \"\"\"\nmodel_schema"
                                }
                            ],
                            "content": "|None:\n"
                        },
                        {
                            "type": "Assignment",
                            "name": "property_schema",
                            "range": [
                                717,
                                725
                            ],
                            "children": [],
                            "content": "cls.jsonschema().get(\"properties\""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                726,
                                729
                            ],
                            "children": [
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        731,
                                        734
                                    ],
                                    "children": [],
                                    "content": "if not model_schema:"
                                }
                            ],
                            "content": ",{})"
                        },
                        {
                            "type": "TryStatement",
                            "name": "try",
                            "range": [
                                736,
                                769
                            ],
                            "children": [
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        753,
                                        755
                                    ],
                                    "children": [],
                                    "content": ":\nreturn"
                                },
                                {
                                    "type": "ExceptStatement",
                                    "name": "except",
                                    "range": [
                                        756,
                                        769
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                764,
                                                769
                                            ],
                                            "children": [],
                                            "content": ".validate(json.to_dict"
                                        }
                                    ],
                                    "content": "f \"Invalid property name {field_name}\"\n\ntry:\njsonschema.validate(json.to_dict"
                                }
                            ],
                            "content": "return f \"Invalid model schema {cls}\"\n\nproperty_schema=model_schema.get(field_name)\nif not property_schema:\nreturn f \"Invalid property name {field_name}\"\n\ntry:\njsonschema.validate(json.to_dict"
                        }
                    ],
                    "content": ":\nreturn json.validate_with_jsonschema(schema=cls.jsonschema(),data=data)\n\n@classmethod\ndef validate_field(cls,field_name:str,data:BlockInput)->str|None:\n\"\"\" \\n         Validate the data against a specific property (one of the input/output name). \\n         Returns the validation error message if the data does not match the schema. \\n         \"\"\"\nmodel_schema=cls.jsonschema().get(\"properties\",{})\nif not model_schema:\nreturn f \"Invalid model schema {cls}\"\n\nproperty_schema=model_schema.get(field_name)\nif not property_schema:\nreturn f \"Invalid property name {field_name}\"\n\ntry:\njsonschema.validate(json.to_dict"
                },
                {
                    "type": "FunctionDecl",
                    "name": "get_fields",
                    "range": [
                        774,
                        798
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                787,
                                798
                            ],
                            "children": [],
                            "content": "\nreturn str(e)\n\n@classmethod\ndef"
                        }
                    ],
                    "content": "property_schema)\nreturn None\nexcept jsonschema.ValidationError as e:\nreturn str(e)\n\n@classmethod\ndef"
                },
                {
                    "type": "FunctionDecl",
                    "name": "get_required_fields",
                    "range": [
                        803,
                        842
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                816,
                                842
                            ],
                            "children": [],
                            "content": "model_fields.keys())\n\n@classmethod\ndef get_required_fields(cls)->set[str]:\nreturn{\n"
                        }
                    ],
                    "content": "->set[str]:\nreturn set(cls.model_fields.keys())\n\n@classmethod\ndef get_required_fields(cls)->set[str]:\nreturn{\n"
                },
                {
                    "type": "FunctionDecl",
                    "name": "__pydantic_init_subclass__",
                    "range": [
                        847,
                        1074
                    ],
                    "children": [
                        {
                            "type": "SuperCall",
                            "name": "super",
                            "range": [
                                862,
                                871
                            ],
                            "children": [],
                            "content": "()\n}\n\n@classmethod\ndef"
                        },
                        {
                            "type": "Assignment",
                            "name": "cls.cached_jsonschema",
                            "range": [
                                887,
                                893
                            ],
                            "children": [],
                            "content": "().__pydantic_init_subclass__(**"
                        },
                        {
                            "type": "ListComprehension",
                            "name": "credentials_fields",
                            "range": [
                                895,
                                950
                            ],
                            "children": [],
                            "content": ")\n\n#Reset cached JSON schema to prevent inheriting it from parent class\ncls.cached_jsonschema={}\n\ncredentials_fields=[\nfield_name\nfor field_name,info in cls.model_fields.items()\nif(\ninspect.isclass(info.annotation)\nand"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                951,
                                958
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise",
                                    "range": [
                                        960,
                                        967
                                    ],
                                    "children": [],
                                    "content": "or info.annotation,\nCredentialsMetaInput,"
                                }
                            ],
                            "content": "issubclass(\nget_origin(info.annotation"
                        },
                        {
                            "type": "ElifStatement",
                            "name": "elif",
                            "range": [
                                969,
                                990
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise",
                                    "range": [
                                        992,
                                        1001
                                    ],
                                    "children": [],
                                    "content": "\nelif(\nlen(credentials_fields)=="
                                }
                            ],
                            "content": ")\n)\n]\nif len(credentials_fields)>1:\nraise ValueError(\nf \"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n"
                        },
                        {
                            "type": "ElifStatement",
                            "name": "elif",
                            "range": [
                                1003,
                                1026
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise",
                                    "range": [
                                        1028,
                                        1038
                                    ],
                                    "children": [],
                                    "content": "(\nlen(credentials_fields)==0\nand"
                                }
                            ],
                            "content": "\nand credentials_fields[0]!=CREDENTIALS_FIELD_NAME\n):\nraise ValueError(\nf \"CredentialsMetaInput field on {cls.__qualname__} \"\n\"must be named 'credentials'\"\n)\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                1040,
                                1042
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "credentials_input_type",
                                    "range": [
                                        1054,
                                        1065
                                    ],
                                    "children": [],
                                    "content": "(\nf \"Field 'credentials' on {cls.__qualname__} \"\nf \"must be of type {CredentialsMetaInput.__name__}\"\n)\nif credentials_field"
                                },
                                {
                                    "type": "MethodCall",
                                    "name": "validate_credentials_field_schema",
                                    "range": [
                                        1069,
                                        1073
                                    ],
                                    "children": [],
                                    "content": ".model_fields.get("
                                }
                            ],
                            "content": "in cls."
                        }
                    ],
                    "content": ",field_info in cls.model_fields.items()\nif field_info.is_required()\n}\n\n@classmethod\ndef __pydantic_init_subclass__(cls,**kwargs):\n\"\"\"Validates the schema definition. Rules: \\n         - Only one `CredentialsMetaInput` field may be present. \\n           - This field MUST be called `credentials`. \\n         - A field that is called `credentials` MUST be a `CredentialsMetaInput`. \\n         \"\"\"\nsuper().__pydantic_init_subclass__(**kwargs)\n\n#Reset cached JSON schema to prevent inheriting it from parent class\ncls.cached_jsonschema={}\n\ncredentials_fields=[\nfield_name\nfor field_name,info in cls.model_fields.items()\nif(\ninspect.isclass(info.annotation)\nand issubclass(\nget_origin(info.annotation)or info.annotation,\nCredentialsMetaInput,\n)\n)\n]\nif len(credentials_fields)>1:\nraise ValueError(\nf \"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n)\nelif(\nlen(credentials_fields)==1\nand credentials_fields[0]!=CREDENTIALS_FIELD_NAME\n):\nraise ValueError(\nf \"CredentialsMetaInput field on {cls.__qualname__} \"\n\"must be named 'credentials'\"\n)\nelif(\nlen(credentials_fields)==0\nand CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n):\nraise TypeError(\nf \"Field 'credentials' on {cls.__qualname__} \"\nf \"must be of type {CredentialsMetaInput.__name__}\"\n)\nif credentials_field:=cls.model_fields.get(CREDENTIALS_FIELD_NAME"
                }
            ],
            "content": "[str,str]:\nreturn{\"category\":self.name,\"description\":self.value}\n\n\nclass BlockSchema(BaseModel):\ncached_jsonschema:ClassVar[dict[str,Any]]\n\n@classmethod\ndef jsonschema(cls)->dict[str,Any]:\nif cls.cached_jsonschema:\nreturn cls.cached_jsonschema\n\nmodel=jsonref.replace_refs(cls.model_json_schema(),merge_props=True)\n\ndef ref_to_dict(obj):\nif isinstance(obj,dict):\n#OpenAPI<3.1does not support sibling fields that has a$ref key\n#So sometimes,the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with1item.\nkeys={\"allOf\",\"anyOf\",\"oneOf\"}\none_key=next((k for k in keys if k in obj and len(obj[k])==1),None)\nif one_key:\nobj.update(obj[one_key][0])\n\nreturn{\nkey:ref_to_dict(value)\nfor key,value in obj.items()\nif not key.startswith(\"$\")and key!=one_key\n}\nelif isinstance(obj,list):\nreturn[ref_to_dict(item)for item in obj]\n\nreturn obj\n\ncls.cached_jsonschema=cast(dict[str,Any],ref_to_dict(model))\n\n#Set default properties values\nfor field in cls.cached_jsonschema.get(\"properties\",{}).values():\nif isinstance(field,dict)and \"advanced\" not in field:\nfield[\"advanced\"]=True\n\nreturn cls.cached_jsonschema\n\n@classmethod\ndef validate_data(cls,data:BlockInput)->str|None:\nreturn json.validate_with_jsonschema(schema=cls.jsonschema(),data=data)\n\n@classmethod\ndef validate_field(cls,field_name:str,data:BlockInput)->str|None:\n\"\"\" \\n         Validate the data against a specific property (one of the input/output name). \\n         Returns the validation error message if the data does not match the schema. \\n         \"\"\"\nmodel_schema=cls.jsonschema().get(\"properties\",{})\nif not model_schema:\nreturn f \"Invalid model schema {cls}\"\n\nproperty_schema=model_schema.get(field_name)\nif not property_schema:\nreturn f \"Invalid property name {field_name}\"\n\ntry:\njsonschema.validate(json.to_dict(data),property_schema)\nreturn None\nexcept jsonschema.ValidationError as e:\nreturn str(e)\n\n@classmethod\ndef get_fields(cls)->set[str]:\nreturn set(cls.model_fields.keys())\n\n@classmethod\ndef get_required_fields(cls)->set[str]:\nreturn{\nfield\nfor field,field_info in cls.model_fields.items()\nif field_info.is_required()\n}\n\n@classmethod\ndef __pydantic_init_subclass__(cls,**kwargs):\n\"\"\"Validates the schema definition. Rules: \\n         - Only one `CredentialsMetaInput` field may be present. \\n           - This field MUST be called `credentials`. \\n         - A field that is called `credentials` MUST be a `CredentialsMetaInput`. \\n         \"\"\"\nsuper().__pydantic_init_subclass__(**kwargs)\n\n#Reset cached JSON schema to prevent inheriting it from parent class\ncls.cached_jsonschema={}\n\ncredentials_fields=[\nfield_name\nfor field_name,info in cls.model_fields.items()\nif(\ninspect.isclass(info.annotation)\nand issubclass(\nget_origin(info.annotation)or info.annotation,\nCredentialsMetaInput,\n)\n)\n]\nif len(credentials_fields)>1:\nraise ValueError(\nf \"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n)\nelif(\nlen(credentials_fields)==1\nand credentials_fields[0]!=CREDENTIALS_FIELD_NAME\n):\nraise ValueError(\nf \"CredentialsMetaInput field on {cls.__qualname__} \"\n\"must be named 'credentials'\"\n)\nelif(\nlen(credentials_fields)==0\nand CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n):\nraise TypeError(\nf \"Field 'credentials' on {cls.__qualname__} \"\nf \"must be of type {CredentialsMetaInput.__name__}\"\n)\nif credentials_field:=cls.model_fields.get(CREDENTIALS_FIELD_NAME"
        },
        {
            "type": "TypeVarDeclaration",
            "name": "BlockSchemaInputType",
            "range": [
                1075,
                1085
            ],
            "children": [
                {
                    "type": "TypeVar",
                    "name": "TypeVar",
                    "range": [
                        1077,
                        1084
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"BlockSchemaInputType\"",
                            "range": [
                                1079,
                                1079
                            ],
                            "children": [],
                            "content": "="
                        },
                        {
                            "type": "Keyword",
                            "name": "bound",
                            "range": [
                                1081,
                                1081
                            ],
                            "children": [],
                            "content": "("
                        },
                        {
                            "type": "Identifier",
                            "name": "BlockSchema",
                            "range": [
                                1083,
                                1083
                            ],
                            "children": [],
                            "content": "CredentialsMetaInput"
                        }
                    ],
                    "content": "\ncredentials_input_type=cast(\nCredentialsMetaInput,"
                }
            ],
            "content": "):\ncredentials_input_type=cast(\nCredentialsMetaInput,credentials_field"
        },
        {
            "type": "TypeVarDeclaration",
            "name": "BlockSchemaOutputType",
            "range": [
                1086,
                1097
            ],
            "children": [
                {
                    "type": "TypeVar",
                    "name": "TypeVar",
                    "range": [
                        1088,
                        1095
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"BlockSchemaOutputType\"",
                            "range": [
                                1090,
                                1090
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Keyword",
                            "name": "bound",
                            "range": [
                                1092,
                                1092
                            ],
                            "children": [],
                            "content": "."
                        },
                        {
                            "type": "Identifier",
                            "name": "BlockSchema",
                            "range": [
                                1094,
                                1094
                            ],
                            "children": [],
                            "content": "("
                        }
                    ],
                    "content": "\n)\ncredentials_input_type.validate_credentials_field_schema(cls"
                }
            ],
            "content": ".annotation\n)\ncredentials_input_type.validate_credentials_field_schema(cls)\n"
        },
        {
            "type": "ClassDecl",
            "name": "EmptySchema",
            "range": [
                1098,
                1107
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "class",
                    "range": [
                        1098,
                        1098
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Identifier",
                    "name": "EmptySchema",
                    "range": [
                        1099,
                        1099
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Identifier",
                    "name": "BlockSchema",
                    "range": [
                        1101,
                        1101
                    ],
                    "children": [],
                    "content": "="
                },
                {
                    "type": "Keyword",
                    "name": "pass",
                    "range": [
                        1105,
                        1105
                    ],
                    "children": [],
                    "content": ","
                }
            ],
            "content": "\n\nBlockSchemaInputType=TypeVar(\"BlockSchemaInputType\",bound="
        },
        {
            "type": "ClassDecl",
            "name": "BlockManualWebhookConfig",
            "range": [
                1108,
                1170
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BaseModel",
                    "range": [
                        1110,
                        1112
                    ],
                    "children": [],
                    "content": "\nBlockSchemaOutputType="
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        1115,
                        1117
                    ],
                    "children": [],
                    "content": "\"BlockSchemaOutputType\",bound"
                },
                {
                    "type": "FieldDecl",
                    "name": "provider",
                    "range": [
                        1120,
                        1127
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                1121,
                                1122
                            ],
                            "children": [],
                            "content": "\n\n"
                        },
                        {
                            "type": "Docstring",
                            "name": "",
                            "range": [
                                1124,
                                1126
                            ],
                            "children": [],
                            "content": "class EmptySchema("
                        }
                    ],
                    "content": ")\n\n\nclass EmptySchema(BlockSchema"
                },
                {
                    "type": "FieldDecl",
                    "name": "webhook_type",
                    "range": [
                        1129,
                        1136
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                1130,
                                1131
                            ],
                            "children": [],
                            "content": "\npass"
                        },
                        {
                            "type": "Docstring",
                            "name": "",
                            "range": [
                                1133,
                                1135
                            ],
                            "children": [],
                            "content": "\n\n#"
                        }
                    ],
                    "content": ":\npass\n\n\n#-"
                },
                {
                    "type": "FieldDecl",
                    "name": "event_filter_input",
                    "range": [
                        1138,
                        1147
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                1139,
                                1140
                            ],
                            "children": [],
                            "content": "<-"
                        },
                        {
                            "type": "DefaultValue",
                            "name": "\"\"",
                            "range": [
                                1141,
                                1142
                            ],
                            "children": [],
                            "content": "-["
                        },
                        {
                            "type": "Docstring",
                            "name": "",
                            "range": [
                                1144,
                                1146
                            ],
                            "children": [],
                            "content": ":BlockWebhookConfig]"
                        }
                    ],
                    "content": "8<--[start:BlockWebhookConfig]\n"
                },
                {
                    "type": "FieldDecl",
                    "name": "event_format",
                    "range": [
                        1149,
                        1168
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                1150,
                                1151
                            ],
                            "children": [],
                            "content": "(BaseModel"
                        },
                        {
                            "type": "DefaultValue",
                            "name": "\"{event}\"",
                            "range": [
                                1152,
                                1153
                            ],
                            "children": [],
                            "content": "):"
                        },
                        {
                            "type": "Docstring",
                            "name": "",
                            "range": [
                                1155,
                                1167
                            ],
                            "children": [],
                            "content": "\"\"\" \\n     Configuration model for webhook-triggered blocks on which \\n     the user has to manually set up the webhook at the provider. \\n     \"\"\"\n\nprovider:str\n\"\"\"The service provider that the webhook connects to\"\"\"\n"
                        }
                    ],
                    "content": "BlockManualWebhookConfig(BaseModel):\n\"\"\" \\n     Configuration model for webhook-triggered blocks on which \\n     the user has to manually set up the webhook at the provider. \\n     \"\"\"\n\nprovider:str\n\"\"\"The service provider that the webhook connects to\"\"\"\n\n"
                }
            ],
            "content": "BlockSchema)\nBlockSchemaOutputType=TypeVar(\"BlockSchemaOutputType\",bound=BlockSchema)\n\n\nclass EmptySchema(BlockSchema):\npass\n\n\n#--8<--[start:BlockWebhookConfig]\nclass BlockManualWebhookConfig(BaseModel):\n\"\"\" \\n     Configuration model for webhook-triggered blocks on which \\n     the user has to manually set up the webhook at the provider. \\n     \"\"\"\n\nprovider:str\n\"\"\"The service provider that the webhook connects to\"\"\"\n\nwebhook_type:"
        },
        {
            "type": "ClassDecl",
            "name": "BlockWebhookConfig",
            "range": [
                1171,
                1209
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BlockManualWebhookConfig",
                    "range": [
                        1173,
                        1175
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Identifier for the webhook type. E.g. GitHub has repo and organization level hooks. \\n  \\n     Only for use in the corresponding `WebhooksManager`. \\n     \"\"\""
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        1178,
                        1180
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "",
                            "range": [
                                1178,
                                1180
                            ],
                            "children": [],
                            "content": "event_filter_input:str"
                        }
                    ],
                    "content": "event_filter_input:str"
                },
                {
                    "type": "FieldDecl",
                    "name": "resource_format",
                    "range": [
                        1183,
                        1186
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                1184,
                                1186
                            ],
                            "children": [],
                            "content": "\"\"\" \\n     Name of the block's event filter input. \\n     Leave empty if the corresponding webhook doesn't have distinct event/payload types. \\n     \"\"\""
                        },
                        {
                            "type": "Docstring",
                            "name": "",
                            "range": [
                                1187,
                                1195
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        1187,
                                        1195
                                    ],
                                    "children": [],
                                    "content": "\n\nevent_format:str=\"{event}\"\n\"\""
                                }
                            ],
                            "content": "\n\nevent_format:str=\"{event}\"\n\"\""
                        }
                    ],
                    "content": "\n\"\"\" \\n     Name of the block's event filter input. \\n     Leave empty if the corresponding webhook doesn't have distinct event/payload types. \\n     \"\"\""
                },
                {
                    "type": "Comment",
                    "name": "",
                    "range": [
                        1197,
                        1209
                    ],
                    "children": [],
                    "content": "pull_request.{event}\"` -> `\"pull_request.opened \"` \\n     \"\"\"\n\n"
                }
            ],
            "content": "str\n\"\"\" \\n     Identifier for the webhook type. E.g. GitHub has repo and organization level hooks. \\n  \\n     Only for use in the corresponding `WebhooksManager`. \\n     \"\"\"\n\nevent_filter_input:str=\"\"\n\"\"\" \\n     Name of the block's event filter input. \\n     Leave empty if the corresponding webhook doesn't have distinct event/payload types. \\n     \"\"\"\n\nevent_format:str=\"{event}\"\n\"\"\" \\n     Template string for the event(s) that a block instance subscribes to. \\n     Applied individually to each event selected in the event filter input. \\n  \\n     Example: `\" pull_request.{event}\"` -> `\"pull_request.opened \"` \\n     \"\"\"\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                1224,
                1538
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1228,
                        1232
                    ],
                    "children": [],
                    "content": "\" \\n     Template string for the resource that a block instance subscribes to. \\n     Fields will be filled from the block's inputs (except `payload`). \\n  \\n     Example: `f\"{repo}/"
                },
                {
                    "type": "Parameter",
                    "name": "id",
                    "range": [
                        1231,
                        1235
                    ],
                    "children": [],
                    "content": "}/pull_requests \"` (note: not how it's actually implemented) \\n  \\n     Only for use in the corresponding `WebhooksManager`. \\n     \"\"\""
                },
                {
                    "type": "Parameter",
                    "name": "description",
                    "range": [
                        1238,
                        1242
                    ],
                    "children": [],
                    "content": "--8<-"
                },
                {
                    "type": "Parameter",
                    "name": "contributors",
                    "range": [
                        1245,
                        1253
                    ],
                    "children": [],
                    "content": "end:BlockWebhookConfig]\n\n\nclass Block"
                },
                {
                    "type": "Parameter",
                    "name": "categories",
                    "range": [
                        1256,
                        1265
                    ],
                    "children": [],
                    "content": ",Generic[BlockSchemaInputType,BlockSchemaOutputType]):\n"
                },
                {
                    "type": "Parameter",
                    "name": "input_schema",
                    "range": [
                        1268,
                        1275
                    ],
                    "children": [],
                    "content": "(\nself,\nid:str"
                },
                {
                    "type": "Parameter",
                    "name": "output_schema",
                    "range": [
                        1278,
                        1285
                    ],
                    "children": [],
                    "content": ",\ndescription:str=\"\","
                },
                {
                    "type": "Parameter",
                    "name": "test_input",
                    "range": [
                        1288,
                        1299
                    ],
                    "children": [],
                    "content": ":list[ContributorDetails]=[],\ncategories:"
                },
                {
                    "type": "Parameter",
                    "name": "test_output",
                    "range": [
                        1302,
                        1313
                    ],
                    "children": [],
                    "content": "BlockCategory]|None=None,\ninput_schema:Type["
                },
                {
                    "type": "Parameter",
                    "name": "test_mock",
                    "range": [
                        1316,
                        1327
                    ],
                    "children": [],
                    "content": "=EmptySchema,\noutput_schema:Type[BlockSchemaOutputType]=EmptySchema"
                },
                {
                    "type": "Parameter",
                    "name": "test_credentials",
                    "range": [
                        1330,
                        1337
                    ],
                    "children": [],
                    "content": "test_input:BlockInput|list[BlockInput]"
                },
                {
                    "type": "Parameter",
                    "name": "disabled",
                    "range": [
                        1340,
                        1344
                    ],
                    "children": [],
                    "content": "=None,\ntest_output"
                },
                {
                    "type": "Parameter",
                    "name": "static_output",
                    "range": [
                        1347,
                        1351
                    ],
                    "children": [],
                    "content": "|list[BlockData]"
                },
                {
                    "type": "Parameter",
                    "name": "block_type",
                    "range": [
                        1354,
                        1361
                    ],
                    "children": [],
                    "content": "=None,\ntest_mock:dict["
                },
                {
                    "type": "Parameter",
                    "name": "webhook_config",
                    "range": [
                        1363,
                        1372
                    ],
                    "children": [],
                    "content": ",Any]|None=None,\ntest_credentials"
                },
                {
                    "type": "Block",
                    "name": "init_block",
                    "range": [
                        1375,
                        1538
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "self.id",
                            "range": [
                                1382,
                                1386
                            ],
                            "children": [],
                            "content": "disabled:bool=False"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.input_schema",
                            "range": [
                                1388,
                                1392
                            ],
                            "children": [],
                            "content": "\nstatic_output:bool="
                        },
                        {
                            "type": "Assignment",
                            "name": "self.output_schema",
                            "range": [
                                1394,
                                1398
                            ],
                            "children": [],
                            "content": ",\nblock_type:BlockType"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.test_input",
                            "range": [
                                1400,
                                1404
                            ],
                            "children": [],
                            "content": "BlockType.STANDARD,\n"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.test_output",
                            "range": [
                                1406,
                                1410
                            ],
                            "children": [],
                            "content": ":Optional[BlockWebhookConfig|"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.test_mock",
                            "range": [
                                1412,
                                1416
                            ],
                            "children": [],
                            "content": "]=None,\n"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.test_credentials",
                            "range": [
                                1418,
                                1422
                            ],
                            "children": [],
                            "content": ":\n\"\"\" \\n         Initialize the block with the given schema. \\n  \\n         Args: \\n             id: The unique identifier for the block, this value will be persisted in the \\n                 DB. So it should be a unique and constant across the application run. \\n                 Use the UUID format for the ID. \\n             description: The description of the block, explaining what the block does. \\n             contributors: The list of contributors who contributed to the block. \\n             input_schema: The schema, defined as a Pydantic model, for the input data. \\n             output_schema: The schema, defined as a Pydantic model, for the output data. \\n             test_input: The list or single sample input data for the block, for testing. \\n             test_output: The list or single expected output if the test_input is run. \\n             test_mock: function names on the block implementation to mock on test run. \\n             disabled: If the block is disabled, it will not be available for execution. \\n             static_output: Whether the output links of the block are static by default. \\n         \"\"\""
                        },
                        {
                            "type": "Assignment",
                            "name": "self.description",
                            "range": [
                                1424,
                                1428
                            ],
                            "children": [],
                            "content": "self.id=id"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.categories",
                            "range": [
                                1430,
                                1439
                            ],
                            "children": [],
                            "content": "self.input_schema=input_schema\nself.output_schema="
                        },
                        {
                            "type": "Assignment",
                            "name": "self.contributors",
                            "range": [
                                1440,
                                1449
                            ],
                            "children": [],
                            "content": "output_schema\nself.test_input=test_input\nself."
                        },
                        {
                            "type": "Assignment",
                            "name": "self.disabled",
                            "range": [
                                1450,
                                1454
                            ],
                            "children": [],
                            "content": "test_output=test_output\nself"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.static_output",
                            "range": [
                                1456,
                                1460
                            ],
                            "children": [],
                            "content": "test_mock=test_mock\nself"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.block_type",
                            "range": [
                                1462,
                                1466
                            ],
                            "children": [],
                            "content": "test_credentials=test_credentials\nself"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.webhook_config",
                            "range": [
                                1468,
                                1472
                            ],
                            "children": [],
                            "content": "description=description\nself"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.execution_stats",
                            "range": [
                                1474,
                                1480
                            ],
                            "children": [],
                            "content": "categories=categories or set()"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_webhook_config",
                            "range": [
                                1482,
                                1538
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "self.webhook_config",
                                    "range": [
                                        1483,
                                        1486
                                    ],
                                    "children": [],
                                    "content": ".contributors=contributors"
                                },
                                {
                                    "type": "Block",
                                    "name": "if_block",
                                    "range": [
                                        1487,
                                        1538
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "if_isinstance_BlockWebhookConfig",
                                            "range": [
                                                1488,
                                                1538
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "isinstance(self.webhook_config, BlockWebhookConfig)",
                                                    "range": [
                                                        1489,
                                                        1496
                                                    ],
                                                    "children": [],
                                                    "content": "()\nself.disabled=disabled"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "if_block",
                                                    "range": [
                                                        1497,
                                                        1538
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "IfStatement",
                                                            "name": "if_CREDENTIALS_FIELD_NAME_not_in_self.input_schema.model_fields",
                                                            "range": [
                                                                1512,
                                                                1530
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Condition",
                                                                    "name": "CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields",
                                                                    "range": [
                                                                        1513,
                                                                        1521
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=webhook_config\nself.execution_stats={}"
                                                                },
                                                                {
                                                                    "type": "Block",
                                                                    "name": "if_block",
                                                                    "range": [
                                                                        1522,
                                                                        1530
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "RaiseStatement",
                                                                            "name": "raise_TypeError",
                                                                            "range": [
                                                                                1523,
                                                                                1529
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\nif self.webhook_config:\n"
                                                                        }
                                                                    ],
                                                                    "content": "\n\nif self.webhook_config:\nif"
                                                                }
                                                            ],
                                                            "content": "webhook_config=webhook_config\nself.execution_stats={}\n\nif self.webhook_config:\nif"
                                                        },
                                                        {
                                                            "type": "Assignment",
                                                            "name": "self.block_type",
                                                            "range": [
                                                                1531,
                                                                1538
                                                            ],
                                                            "children": [],
                                                            "content": "isinstance(self.webhook_config,BlockWebhookConfig)"
                                                        }
                                                    ],
                                                    "content": "\nself.static_output=static_output\nself.block_type=block_type\nself.webhook_config=webhook_config\nself.execution_stats={}\n\nif self.webhook_config:\nif isinstance(self.webhook_config,BlockWebhookConfig)"
                                                },
                                                {
                                                    "type": "ElseStatement",
                                                    "name": "else",
                                                    "range": [
                                                        1539,
                                                        1549
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Assignment",
                                                            "name": "self.block_type",
                                                            "range": [
                                                                1542,
                                                                1549
                                                            ],
                                                            "children": [],
                                                            "content": "Enforce presence of credentials field on auto-"
                                                        }
                                                    ],
                                                    "content": ":\n#Enforce presence of credentials field on auto-"
                                                }
                                            ],
                                            "content": "set()\nself.disabled=disabled\nself.static_output=static_output\nself.block_type=block_type\nself.webhook_config=webhook_config\nself.execution_stats={}\n\nif self.webhook_config:\nif isinstance(self.webhook_config,BlockWebhookConfig)"
                                        }
                                    ],
                                    "content": "or set()\nself.disabled=disabled\nself.static_output=static_output\nself.block_type=block_type\nself.webhook_config=webhook_config\nself.execution_stats={}\n\nif self.webhook_config:\nif isinstance(self.webhook_config,BlockWebhookConfig)"
                                }
                            ],
                            "content": "self.contributors=contributors or set()\nself.disabled=disabled\nself.static_output=static_output\nself.block_type=block_type\nself.webhook_config=webhook_config\nself.execution_stats={}\n\nif self.webhook_config:\nif isinstance(self.webhook_config,BlockWebhookConfig)"
                        }
                    ],
                    "content": "[Credentials]=None,\ndisabled:bool=False,\nstatic_output:bool=False,\nblock_type:BlockType=BlockType.STANDARD,\nwebhook_config:Optional[BlockWebhookConfig|BlockManualWebhookConfig]=None,\n):\n\"\"\" \\n         Initialize the block with the given schema. \\n  \\n         Args: \\n             id: The unique identifier for the block, this value will be persisted in the \\n                 DB. So it should be a unique and constant across the application run. \\n                 Use the UUID format for the ID. \\n             description: The description of the block, explaining what the block does. \\n             contributors: The list of contributors who contributed to the block. \\n             input_schema: The schema, defined as a Pydantic model, for the input data. \\n             output_schema: The schema, defined as a Pydantic model, for the output data. \\n             test_input: The list or single sample input data for the block, for testing. \\n             test_output: The list or single expected output if the test_input is run. \\n             test_mock: function names on the block implementation to mock on test run. \\n             disabled: If the block is disabled, it will not be available for execution. \\n             static_output: Whether the output links of the block are static by default. \\n         \"\"\"\nself.id=id\nself.input_schema=input_schema\nself.output_schema=output_schema\nself.test_input=test_input\nself.test_output=test_output\nself.test_mock=test_mock\nself.test_credentials=test_credentials\nself.description=description\nself.categories=categories or set()\nself.contributors=contributors or set()\nself.disabled=disabled\nself.static_output=static_output\nself.block_type=block_type\nself.webhook_config=webhook_config\nself.execution_stats={}\n\nif self.webhook_config:\nif isinstance(self.webhook_config,BlockWebhookConfig)"
                }
            ],
            "content": ":str\n\"\"\" \\n     Template string for the resource that a block instance subscribes to. \\n     Fields will be filled from the block's inputs (except `payload`). \\n  \\n     Example: `f\"{repo}/pull_requests \"` (note: not how it's actually implemented) \\n  \\n     Only for use in the corresponding `WebhooksManager`. \\n     \"\"\"\n#--8<--[end:BlockWebhookConfig]\n\n\nclass Block(ABC,Generic[BlockSchemaInputType,BlockSchemaOutputType]):\ndef __init__(\nself,\nid:str=\"\",\ndescription:str=\"\",\ncontributors:list[ContributorDetails]=[],\ncategories:set[BlockCategory]|None=None,\ninput_schema:Type[BlockSchemaInputType]=EmptySchema,\noutput_schema:Type[BlockSchemaOutputType]=EmptySchema,\ntest_input:BlockInput|list[BlockInput]|None=None,\ntest_output:BlockData|list[BlockData]|None=None,\ntest_mock:dict[str,Any]|None=None,\ntest_credentials:Optional[Credentials]=None,\ndisabled:bool=False,\nstatic_output:bool=False,\nblock_type:BlockType=BlockType.STANDARD,\nwebhook_config:Optional[BlockWebhookConfig|BlockManualWebhookConfig]=None,\n):\n\"\"\" \\n         Initialize the block with the given schema. \\n  \\n         Args: \\n             id: The unique identifier for the block, this value will be persisted in the \\n                 DB. So it should be a unique and constant across the application run. \\n                 Use the UUID format for the ID. \\n             description: The description of the block, explaining what the block does. \\n             contributors: The list of contributors who contributed to the block. \\n             input_schema: The schema, defined as a Pydantic model, for the input data. \\n             output_schema: The schema, defined as a Pydantic model, for the output data. \\n             test_input: The list or single sample input data for the block, for testing. \\n             test_output: The list or single expected output if the test_input is run. \\n             test_mock: function names on the block implementation to mock on test run. \\n             disabled: If the block is disabled, it will not be available for execution. \\n             static_output: Whether the output links of the block are static by default. \\n         \"\"\"\nself.id=id\nself.input_schema=input_schema\nself.output_schema=output_schema\nself.test_input=test_input\nself.test_output=test_output\nself.test_mock=test_mock\nself.test_credentials=test_credentials\nself.description=description\nself.categories=categories or set()\nself.contributors=contributors or set()\nself.disabled=disabled\nself.static_output=static_output\nself.block_type=block_type\nself.webhook_config=webhook_config\nself.execution_stats={}\n\nif self.webhook_config:\nif isinstance(self.webhook_config,BlockWebhookConfig)"
        },
        {
            "type": "FunctionDecl",
            "name": "create",
            "range": [
                1704,
                1726
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "cls",
                    "range": [
                        1710,
                        1715
                    ],
                    "children": [],
                    "content": "raise TypeError(\nf \"{self.name} is webhook-triggered but has no 'payload' input\""
                },
                {
                    "type": "Block",
                    "name": "create_block",
                    "range": [
                        1721,
                        1726
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return_cls",
                            "range": [
                                1722,
                                1726
                            ],
                            "children": [],
                            "content": "webhook-triggered block if"
                        }
                    ],
                    "content": "Disable webhook-triggered block if"
                }
            ],
            "content": ".input_schema.model_fields:\nraise TypeError(\nf \"{self.name} is webhook-triggered but has no 'payload' input\"\n)\n\n#Disable webhook-triggered block if"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                1730,
                1754
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1734,
                        1738
                    ],
                    "children": [],
                    "content": "app_config.platform_base_url:\n"
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        1736,
                        1742
                    ],
                    "children": [],
                    "content": "platform_base_url:\nself.disabled="
                },
                {
                    "type": "Parameter",
                    "name": "kwargs",
                    "range": [
                        1741,
                        1743
                    ],
                    "children": [],
                    "content": "disabled=True"
                },
                {
                    "type": "Block",
                    "name": "run_block",
                    "range": [
                        1747,
                        1754
                    ],
                    "children": [
                        {
                            "type": "PassStatement",
                            "name": "pass",
                            "range": [
                                1753,
                                1754
                            ],
                            "children": [],
                            "content": ":Type"
                        }
                    ],
                    "content": "classmethod\ndef create(cls:Type"
                }
            ],
            "content": "available\nif not app_config.platform_base_url:\nself.disabled=True\n\n@classmethod\ndef create(cls:Type"
        },
        {
            "type": "FunctionDecl",
            "name": "run_once",
            "range": [
                1756,
                1811
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1759,
                        1763
                    ],
                    "children": [],
                    "content": "->\"Block\":\n"
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        1761,
                        1767
                    ],
                    "children": [],
                    "content": "\"Block\":\nreturn cls()"
                },
                {
                    "type": "Parameter",
                    "name": "output",
                    "range": [
                        1765,
                        1771
                    ],
                    "children": [],
                    "content": "cls()\n\n@abstractmethod"
                },
                {
                    "type": "Parameter",
                    "name": "kwargs",
                    "range": [
                        1770,
                        1772
                    ],
                    "children": [],
                    "content": "@abstractmethod\n"
                },
                {
                    "type": "Block",
                    "name": "run_once_block",
                    "range": [
                        1776,
                        1811
                    ],
                    "children": [
                        {
                            "type": "ForStatement",
                            "name": "for_name_data_in_self.run",
                            "range": [
                                1778,
                                1804
                            ],
                            "children": [
                                {
                                    "type": "Iteration",
                                    "name": "name, data in self.run(input_data, **kwargs)",
                                    "range": [
                                        1779,
                                        1793
                                    ],
                                    "children": [],
                                    "content": ":BlockSchemaInputType,**kwargs)->BlockOutput:\n\"\"\" \\n         Run the block with the given input data. \\n         Args: \\n             input_data: The input data with the structure of input_schema. \\n         Returns: \\n             A Generator that yields (output_name, output_data). \\n             output_name: One of the output name defined in Block's output_schema. \\n             output_data: The data for the output_name, matching the defined schema. \\n         \"\"\""
                                },
                                {
                                    "type": "Block",
                                    "name": "for_block",
                                    "range": [
                                        1794,
                                        1804
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "if_name_eq_output",
                                            "range": [
                                                1795,
                                                1800
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "name == output",
                                                    "range": [
                                                        1796,
                                                        1799
                                                    ],
                                                    "children": [],
                                                    "content": "\n\ndef run_once"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "if_block",
                                                    "range": [
                                                        1800,
                                                        1804
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ReturnStatement",
                                                            "name": "return_data",
                                                            "range": [
                                                                1802,
                                                                1804
                                                            ],
                                                            "children": [],
                                                            "content": ",input_data:"
                                                        }
                                                    ],
                                                    "content": "(self,input_data:"
                                                }
                                            ],
                                            "content": "pass\n\ndef run_once("
                                        }
                                    ],
                                    "content": "\npass\n\ndef run_once(self,input_data:"
                                }
                            ],
                            "content": "input_data:BlockSchemaInputType,**kwargs)->BlockOutput:\n\"\"\" \\n         Run the block with the given input data. \\n         Args: \\n             input_data: The input data with the structure of input_schema. \\n         Returns: \\n             A Generator that yields (output_name, output_data). \\n             output_name: One of the output name defined in Block's output_schema. \\n             output_data: The data for the output_name, matching the defined schema. \\n         \"\"\"\npass\n\ndef run_once(self,input_data:"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "raise_ValueError",
                            "range": [
                                1805,
                                1811
                            ],
                            "children": [],
                            "content": "BlockSchemaInputType,output:str,*"
                        }
                    ],
                    "content": "self,input_data:BlockSchemaInputType,**kwargs)->BlockOutput:\n\"\"\" \\n         Run the block with the given input data. \\n         Args: \\n             input_data: The input data with the structure of input_schema. \\n         Returns: \\n             A Generator that yields (output_name, output_data). \\n             output_name: One of the output name defined in Block's output_schema. \\n             output_data: The data for the output_name, matching the defined schema. \\n         \"\"\"\npass\n\ndef run_once(self,input_data:BlockSchemaInputType,output:str,*"
                }
            ],
            "content": "\"Block\"])->\"Block\":\nreturn cls()\n\n@abstractmethod\ndef run(self,input_data:BlockSchemaInputType,**kwargs)->BlockOutput:\n\"\"\" \\n         Run the block with the given input data. \\n         Args: \\n             input_data: The input data with the structure of input_schema. \\n         Returns: \\n             A Generator that yields (output_name, output_data). \\n             output_name: One of the output name defined in Block's output_schema. \\n             output_data: The data for the output_name, matching the defined schema. \\n         \"\"\"\npass\n\ndef run_once(self,input_data:BlockSchemaInputType,output:str,*"
        },
        {
            "type": "FunctionDecl",
            "name": "merge_stats",
            "range": [
                1813,
                1958
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1816,
                        1820
                    ],
                    "children": [],
                    "content": ">Any:\nfor"
                },
                {
                    "type": "Parameter",
                    "name": "stats",
                    "range": [
                        1818,
                        1825
                    ],
                    "children": [],
                    "content": ":\nfor name,data in self"
                },
                {
                    "type": "Block",
                    "name": "merge_stats_block",
                    "range": [
                        1829,
                        1958
                    ],
                    "children": [
                        {
                            "type": "ForStatement",
                            "name": "for_key_value_in_stats.items",
                            "range": [
                                1831,
                                1954
                            ],
                            "children": [
                                {
                                    "type": "Iteration",
                                    "name": "key, value in stats.items()",
                                    "range": [
                                        1832,
                                        1845
                                    ],
                                    "children": [],
                                    "content": "*kwargs):\nif name==output:\nreturn data"
                                },
                                {
                                    "type": "Block",
                                    "name": "for_block",
                                    "range": [
                                        1846,
                                        1954
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "if_isinstance_value_dict",
                                            "range": [
                                                1847,
                                                1874
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "isinstance(value, dict)",
                                                    "range": [
                                                        1848,
                                                        1855
                                                    ],
                                                    "children": [],
                                                    "content": "ValueError(f \"{self.name} did not produce any output for {output}\")\n\ndef"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "if_block",
                                                    "range": [
                                                        1856,
                                                        1874
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Assignment",
                                                            "name": "self.execution_stats.setdefault(key, {}).update(value)",
                                                            "range": [
                                                                1858,
                                                                1874
                                                            ],
                                                            "children": [],
                                                            "content": "self,stats:dict[str,Any])->dict[str,"
                                                        }
                                                    ],
                                                    "content": "merge_stats(self,stats:dict[str,Any])->dict[str,"
                                                }
                                            ],
                                            "content": "raise ValueError(f \"{self.name} did not produce any output for {output}\")\n\ndef merge_stats(self,stats:dict[str,Any])->dict[str,"
                                        },
                                        {
                                            "type": "ElseIfStatement",
                                            "name": "elif_isinstance_value_int_float",
                                            "range": [
                                                1875,
                                                1908
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "isinstance(value, (int, float))",
                                                    "range": [
                                                        1876,
                                                        1885
                                                    ],
                                                    "children": [],
                                                    "content": "]:\nfor key,value in stats."
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "elif_block",
                                                    "range": [
                                                        1886,
                                                        1908
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Assignment",
                                                            "name": "self.execution_stats.setdefault(key, 0)",
                                                            "range": [
                                                                1888,
                                                                1897
                                                            ],
                                                            "children": [],
                                                            "content": "):\nif isinstance(value,dict)"
                                                        },
                                                        {
                                                            "type": "Assignment",
                                                            "name": "self.execution_stats[key] += value",
                                                            "range": [
                                                                1899,
                                                                1908
                                                            ],
                                                            "children": [],
                                                            "content": "\nself.execution_stats.setdefault(key,{"
                                                        }
                                                    ],
                                                    "content": "items():\nif isinstance(value,dict):\nself.execution_stats.setdefault(key,{"
                                                }
                                            ],
                                            "content": "Any]:\nfor key,value in stats.items():\nif isinstance(value,dict):\nself.execution_stats.setdefault(key,{"
                                        },
                                        {
                                            "type": "ElseIfStatement",
                                            "name": "elif_isinstance_value_list",
                                            "range": [
                                                1909,
                                                1941
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "isinstance(value, list)",
                                                    "range": [
                                                        1910,
                                                        1915
                                                    ],
                                                    "children": [],
                                                    "content": ").update(value)"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "elif_block",
                                                    "range": [
                                                        1916,
                                                        1941
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Assignment",
                                                            "name": "self.execution_stats.setdefault(key, [])",
                                                            "range": [
                                                                1918,
                                                                1928
                                                            ],
                                                            "children": [],
                                                            "content": "isinstance(value,(int,float)):"
                                                        },
                                                        {
                                                            "type": "Assignment",
                                                            "name": "self.execution_stats[key].extend(value)",
                                                            "range": [
                                                                1930,
                                                                1941
                                                            ],
                                                            "children": [],
                                                            "content": "self.execution_stats.setdefault(key,0)\nself"
                                                        }
                                                    ],
                                                    "content": "\nelif isinstance(value,(int,float)):\nself.execution_stats.setdefault(key,0)\nself"
                                                }
                                            ],
                                            "content": "}).update(value)\nelif isinstance(value,(int,float)):\nself.execution_stats.setdefault(key,0)\nself"
                                        },
                                        {
                                            "type": "ElseStatement",
                                            "name": "else",
                                            "range": [
                                                1942,
                                                1954
                                            ],
                                            "children": [
                                                {
                                                    "type": "Assignment",
                                                    "name": "self.execution_stats[key] = value",
                                                    "range": [
                                                        1945,
                                                        1954
                                                    ],
                                                    "children": [],
                                                    "content": "key]+=value\nelif isinstance(value"
                                                }
                                            ],
                                            "content": ".execution_stats[key]+=value\nelif isinstance(value"
                                        }
                                    ],
                                    "content": "\nraise ValueError(f \"{self.name} did not produce any output for {output}\")\n\ndef merge_stats(self,stats:dict[str,Any])->dict[str,Any]:\nfor key,value in stats.items():\nif isinstance(value,dict):\nself.execution_stats.setdefault(key,{}).update(value)\nelif isinstance(value,(int,float)):\nself.execution_stats.setdefault(key,0)\nself.execution_stats[key]+=value\nelif isinstance(value"
                                }
                            ],
                            "content": "**kwargs):\nif name==output:\nreturn data\nraise ValueError(f \"{self.name} did not produce any output for {output}\")\n\ndef merge_stats(self,stats:dict[str,Any])->dict[str,Any]:\nfor key,value in stats.items():\nif isinstance(value,dict):\nself.execution_stats.setdefault(key,{}).update(value)\nelif isinstance(value,(int,float)):\nself.execution_stats.setdefault(key,0)\nself.execution_stats[key]+=value\nelif isinstance(value"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_self.execution_stats",
                            "range": [
                                1955,
                                1958
                            ],
                            "children": [],
                            "content": ",list):"
                        }
                    ],
                    "content": "input_data,**kwargs):\nif name==output:\nreturn data\nraise ValueError(f \"{self.name} did not produce any output for {output}\")\n\ndef merge_stats(self,stats:dict[str,Any])->dict[str,Any]:\nfor key,value in stats.items():\nif isinstance(value,dict):\nself.execution_stats.setdefault(key,{}).update(value)\nelif isinstance(value,(int,float)):\nself.execution_stats.setdefault(key,0)\nself.execution_stats[key]+=value\nelif isinstance(value,list):"
                }
            ],
            "content": "kwargs)->Any:\nfor name,data in self.run(input_data,**kwargs):\nif name==output:\nreturn data\nraise ValueError(f \"{self.name} did not produce any output for {output}\")\n\ndef merge_stats(self,stats:dict[str,Any])->dict[str,Any]:\nfor key,value in stats.items():\nif isinstance(value,dict):\nself.execution_stats.setdefault(key,{}).update(value)\nelif isinstance(value,(int,float)):\nself.execution_stats.setdefault(key,0)\nself.execution_stats[key]+=value\nelif isinstance(value,list):"
        },
        {
            "type": "FunctionDecl",
            "name": "name",
            "range": [
                1960,
                1976
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1966,
                        1970
                    ],
                    "children": [],
                    "content": "key,[])"
                },
                {
                    "type": "Block",
                    "name": "name_block",
                    "range": [
                        1971,
                        1976
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return_self.__class__.__name__",
                            "range": [
                                1970,
                                1976
                            ],
                            "children": [],
                            "content": ")\nself.execution_stats[key"
                        }
                    ],
                    "content": "\nself.execution_stats[key"
                }
            ],
            "content": "self.execution_stats.setdefault(key,[])\nself.execution_stats[key"
        },
        {
            "type": "FunctionDecl",
            "name": "to_dict",
            "range": [
                1978,
                2084
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1981,
                        1985
                    ],
                    "children": [],
                    "content": "value)\nelse:"
                },
                {
                    "type": "Block",
                    "name": "to_dict_block",
                    "range": [
                        1986,
                        2084
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return_dict",
                            "range": [
                                1985,
                                2084
                            ],
                            "children": [
                                {
                                    "type": "KeyValuePair",
                                    "name": "id",
                                    "range": [
                                        1988,
                                        1993
                                    ],
                                    "children": [],
                                    "content": ".execution_stats[key]="
                                },
                                {
                                    "type": "KeyValuePair",
                                    "name": "name",
                                    "range": [
                                        1995,
                                        2000
                                    ],
                                    "children": [],
                                    "content": "\nreturn self.execution_stats\n"
                                },
                                {
                                    "type": "KeyValuePair",
                                    "name": "inputSchema",
                                    "range": [
                                        2002,
                                        2011
                                    ],
                                    "children": [],
                                    "content": "@property\ndef name(self):\n"
                                },
                                {
                                    "type": "KeyValuePair",
                                    "name": "outputSchema",
                                    "range": [
                                        2013,
                                        2022
                                    ],
                                    "children": [],
                                    "content": "self.__class__.__name__\n\ndef to_dict("
                                },
                                {
                                    "type": "KeyValuePair",
                                    "name": "description",
                                    "range": [
                                        2024,
                                        2029
                                    ],
                                    "children": [],
                                    "content": "):\nreturn{\n"
                                },
                                {
                                    "type": "KeyValuePair",
                                    "name": "categories",
                                    "range": [
                                        2031,
                                        2045
                                    ],
                                    "children": [],
                                    "content": ":self.id,\n\"name\":self.name,\n\"inputSchema\":"
                                },
                                {
                                    "type": "KeyValuePair",
                                    "name": "contributors",
                                    "range": [
                                        2047,
                                        2063
                                    ],
                                    "children": [],
                                    "content": ".input_schema.jsonschema(),\n\"outputSchema\":self.output_schema.jsonschema()"
                                },
                                {
                                    "type": "KeyValuePair",
                                    "name": "staticOutput",
                                    "range": [
                                        2065,
                                        2072
                                    ],
                                    "children": [],
                                    "content": "\n\"description\":self.description,\n"
                                },
                                {
                                    "type": "KeyValuePair",
                                    "name": "uiType",
                                    "range": [
                                        2074,
                                        2081
                                    ],
                                    "children": [],
                                    "content": ":[category.dict()for"
                                }
                            ],
                            "content": ":\nself.execution_stats[key]=value\nreturn self.execution_stats\n\n@property\ndef name(self):\nreturn self.__class__.__name__\n\ndef to_dict(self):\nreturn{\n\"id\":self.id,\n\"name\":self.name,\n\"inputSchema\":self.input_schema.jsonschema(),\n\"outputSchema\":self.output_schema.jsonschema(),\n\"description\":self.description,\n\"categories\":[category.dict()for category in self"
                        }
                    ],
                    "content": "\nself.execution_stats[key]=value\nreturn self.execution_stats\n\n@property\ndef name(self):\nreturn self.__class__.__name__\n\ndef to_dict(self):\nreturn{\n\"id\":self.id,\n\"name\":self.name,\n\"inputSchema\":self.input_schema.jsonschema(),\n\"outputSchema\":self.output_schema.jsonschema(),\n\"description\":self.description,\n\"categories\":[category.dict()for category in self"
                }
            ],
            "content": ".extend(value)\nelse:\nself.execution_stats[key]=value\nreturn self.execution_stats\n\n@property\ndef name(self):\nreturn self.__class__.__name__\n\ndef to_dict(self):\nreturn{\n\"id\":self.id,\n\"name\":self.name,\n\"inputSchema\":self.input_schema.jsonschema(),\n\"outputSchema\":self.output_schema.jsonschema(),\n\"description\":self.description,\n\"categories\":[category.dict()for category in self"
        },
        {
            "type": "FunctionDecl",
            "name": "execute",
            "range": [
                2086,
                2208
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        2090,
                        2094
                    ],
                    "children": [],
                    "content": "\"contributors\":[\ncontributor"
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        2092,
                        2098
                    ],
                    "children": [],
                    "content": "[\ncontributor.model_dump()"
                },
                {
                    "type": "Parameter",
                    "name": "kwargs",
                    "range": [
                        2097,
                        2099
                    ],
                    "children": [],
                    "content": "()for"
                },
                {
                    "type": "Block",
                    "name": "execute_block",
                    "range": [
                        2103,
                        2208
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if_error_eq_self.input_schema.validate_data",
                            "range": [
                                2104,
                                2126
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "error := self.input_schema.validate_data(input_data)",
                                    "range": [
                                        2105,
                                        2116
                                    ],
                                    "children": [],
                                    "content": "\n],\n\"staticOutput\":self.static_output,\n\"uiType\""
                                },
                                {
                                    "type": "Block",
                                    "name": "if_block",
                                    "range": [
                                        2117,
                                        2126
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise_ValueError",
                                            "range": [
                                                2118,
                                                2126
                                            ],
                                            "children": [],
                                            "content": "self.block_type.value,\n}\n"
                                        }
                                    ],
                                    "content": ":self.block_type.value,\n}\n"
                                }
                            ],
                            "content": "contributors\n],\n\"staticOutput\":self.static_output,\n\"uiType\":self.block_type.value,\n}\n"
                        },
                        {
                            "type": "ForStatement",
                            "name": "for_output_name_output_data_in_self.run",
                            "range": [
                                2128,
                                2207
                            ],
                            "children": [
                                {
                                    "type": "Iteration",
                                    "name": "output_name, output_data in self.run(self.input_schema(**input_data), **kwargs)",
                                    "range": [
                                        2129,
                                        2152
                                    ],
                                    "children": [],
                                    "content": "execute(self,input_data:BlockInput,**kwargs)->BlockOutput:\nif error:=self.input_schema"
                                },
                                {
                                    "type": "Block",
                                    "name": "for_block",
                                    "range": [
                                        2153,
                                        2207
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "if_output_name_eq_error",
                                            "range": [
                                                2154,
                                                2166
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "output_name == \"error\"",
                                                    "range": [
                                                        2155,
                                                        2159
                                                    ],
                                                    "children": [],
                                                    "content": "(input_data):\n"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "if_block",
                                                    "range": [
                                                        2160,
                                                        2166
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "RaiseStatement",
                                                            "name": "raise_RuntimeError",
                                                            "range": [
                                                                2161,
                                                                2166
                                                            ],
                                                            "children": [],
                                                            "content": "ValueError(\nf \"Unable to execute block with invalid input data: {error}\"\n"
                                                        }
                                                    ],
                                                    "content": "raise ValueError(\nf \"Unable to execute block with invalid input data: {error}\"\n"
                                                }
                                            ],
                                            "content": "validate_data(input_data):\nraise ValueError(\nf \"Unable to execute block with invalid input data: {error}\"\n"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_self.block_type_eq_BlockType.STANDARD_and_error_eq_self.output_schema.validate_field",
                                            "range": [
                                                2167,
                                                2202
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "self.block_type == BlockType.STANDARD and (error := self.output_schema.validate_field(output_name, output_data))",
                                                    "range": [
                                                        2168,
                                                        2193
                                                    ],
                                                    "children": [],
                                                    "content": "\n\nfor output_name,output_data in self.run(\nself.input_schema(**input_data),**kwargs\n)"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "if_block",
                                                    "range": [
                                                        2194,
                                                        2202
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "RaiseStatement",
                                                            "name": "raise_ValueError",
                                                            "range": [
                                                                2196,
                                                                2202
                                                            ],
                                                            "children": [],
                                                            "content": "if output_name==\"error\":\n"
                                                        }
                                                    ],
                                                    "content": ":\nif output_name==\"error\":\n"
                                                }
                                            ],
                                            "content": ")\n\nfor output_name,output_data in self.run(\nself.input_schema(**input_data),**kwargs\n):\nif output_name==\"error\":\n"
                                        },
                                        {
                                            "type": "YieldStatement",
                                            "name": "yield_output_name_output_data",
                                            "range": [
                                                2203,
                                                2207
                                            ],
                                            "children": [],
                                            "content": "raise RuntimeError(output_data)"
                                        }
                                    ],
                                    "content": ".validate_data(input_data):\nraise ValueError(\nf \"Unable to execute block with invalid input data: {error}\"\n)\n\nfor output_name,output_data in self.run(\nself.input_schema(**input_data),**kwargs\n):\nif output_name==\"error\":\nraise RuntimeError(output_data)"
                                }
                            ],
                            "content": "def execute(self,input_data:BlockInput,**kwargs)->BlockOutput:\nif error:=self.input_schema.validate_data(input_data):\nraise ValueError(\nf \"Unable to execute block with invalid input data: {error}\"\n)\n\nfor output_name,output_data in self.run(\nself.input_schema(**input_data),**kwargs\n):\nif output_name==\"error\":\nraise RuntimeError(output_data)"
                        }
                    ],
                    "content": ".contributors\n],\n\"staticOutput\":self.static_output,\n\"uiType\":self.block_type.value,\n}\n\ndef execute(self,input_data:BlockInput,**kwargs)->BlockOutput:\nif error:=self.input_schema.validate_data(input_data):\nraise ValueError(\nf \"Unable to execute block with invalid input data: {error}\"\n)\n\nfor output_name,output_data in self.run(\nself.input_schema(**input_data),**kwargs\n):\nif output_name==\"error\":\nraise RuntimeError(output_data)\n"
                }
            ],
            "content": "categories],\n\"contributors\":[\ncontributor.model_dump()for contributor in self.contributors\n],\n\"staticOutput\":self.static_output,\n\"uiType\":self.block_type.value,\n}\n\ndef execute(self,input_data:BlockInput,**kwargs)->BlockOutput:\nif error:=self.input_schema.validate_data(input_data):\nraise ValueError(\nf \"Unable to execute block with invalid input data: {error}\"\n)\n\nfor output_name,output_data in self.run(\nself.input_schema(**input_data),**kwargs\n):\nif output_name==\"error\":\nraise RuntimeError(output_data)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_blocks",
            "range": [
                2210,
                2241
            ],
            "children": [
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        2239,
                        2241
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "AVAILABLE_BLOCKS",
                            "range": [
                                2240,
                                2241
                            ],
                            "children": [],
                            "content": "(f"
                        }
                    ],
                    "content": "ValueError(f"
                }
            ],
            "content": "self.block_type==BlockType.STANDARD and(\nerror:=self.output_schema.validate_field(output_name,output_data)\n):\nraise ValueError(f"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                2227,
                2237
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "AVAILABLE_BLOCKS",
                    "range": [
                        2232,
                        2237
                    ],
                    "children": [],
                    "content": "output_data)\n):\n"
                }
            ],
            "content": ".validate_field(output_name,output_data)\n):\n"
        },
        {
            "type": "FunctionDecl",
            "name": "initialize_blocks",
            "range": [
                2244,
                2507
            ],
            "children": [
                {
                    "type": "ForStatement",
                    "name": "",
                    "range": [
                        2254,
                        2380
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "cls",
                            "range": [
                                2255,
                                2257
                            ],
                            "children": [],
                            "content": "==="
                        },
                        {
                            "type": "CallExpression",
                            "name": "get_blocks",
                            "range": [
                                2257,
                                2263
                            ],
                            "children": [],
                            "content": "======="
                        },
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                2264,
                                2380
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclaration",
                                    "name": "block",
                                    "range": [
                                        2266,
                                        2271
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "cls",
                                            "range": [
                                                2268,
                                                2271
                                            ],
                                            "children": [],
                                            "content": "===="
                                        }
                                    ],
                                    "content": "======"
                                },
                                {
                                    "type": "VariableDeclaration",
                                    "name": "existing_block",
                                    "range": [
                                        2272,
                                        2309
                                    ],
                                    "children": [
                                        {
                                            "type": "AwaitExpression",
                                            "name": "",
                                            "range": [
                                                2274,
                                                2309
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "find_first",
                                                    "range": [
                                                        2281,
                                                        2308
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ObjectExpression",
                                                            "name": "",
                                                            "range": [
                                                                2286,
                                                                2306
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Property",
                                                                    "name": "OR",
                                                                    "range": [
                                                                        2287,
                                                                        2305
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "ArrayExpression",
                                                                            "name": "",
                                                                            "range": [
                                                                                2289,
                                                                                2305
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ObjectExpression",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        2290,
                                                                                        2296
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "id",
                                                                                            "range": [
                                                                                                2291,
                                                                                                2296
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "block.id",
                                                                                                    "range": [
                                                                                                        2293,
                                                                                                        2296
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": "===="
                                                                                                }
                                                                                            ],
                                                                                            "content": "======"
                                                                                        }
                                                                                    ],
                                                                                    "content": "======="
                                                                                },
                                                                                {
                                                                                    "type": "ObjectExpression",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        2298,
                                                                                        2304
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Property",
                                                                                            "name": "name",
                                                                                            "range": [
                                                                                                2299,
                                                                                                2304
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "block.name",
                                                                                                    "range": [
                                                                                                        2301,
                                                                                                        2304
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": "=#\n\n"
                                                                                                }
                                                                                            ],
                                                                                            "content": "===#\n\n"
                                                                                        }
                                                                                    ],
                                                                                    "content": "====#\n\n"
                                                                                }
                                                                            ],
                                                                            "content": "=============#\n\n\n"
                                                                        }
                                                                    ],
                                                                    "content": "===============#\n\n\n"
                                                                }
                                                            ],
                                                            "content": "================#\n\n\ndef"
                                                        }
                                                    ],
                                                    "content": "=====================#\n\n\ndef get_blocks("
                                                }
                                            ],
                                            "content": "==Block Helper Functions=======================#\n\n\ndef get_blocks()"
                                        }
                                    ],
                                    "content": "====Block Helper Functions=======================#\n\n\ndef get_blocks()"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        2310,
                                        2378
                                    ],
                                    "children": [
                                        {
                                            "type": "UnaryExpression",
                                            "name": "not",
                                            "range": [
                                                2311,
                                                2312
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "existing_block",
                                                    "range": [
                                                        2312,
                                                        2313
                                                    ],
                                                    "children": [],
                                                    "content": "dict["
                                                }
                                            ],
                                            "content": ">dict"
                                        },
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                2314,
                                                2378
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        2315,
                                                        2378
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AwaitExpression",
                                                            "name": "",
                                                            "range": [
                                                                2315,
                                                                2378
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "create",
                                                                    "range": [
                                                                        2322,
                                                                        2377
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "ObjectExpression",
                                                                            "name": "",
                                                                            "range": [
                                                                                2327,
                                                                                2375
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "id",
                                                                                    "range": [
                                                                                        2329,
                                                                                        2334
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "block.id",
                                                                                            "range": [
                                                                                                2331,
                                                                                                2334
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": ":E402\n\n"
                                                                                        }
                                                                                    ],
                                                                                    "content": "#noqa:E402\n\n"
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "name",
                                                                                    "range": [
                                                                                        2336,
                                                                                        2341
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "block.name",
                                                                                            "range": [
                                                                                                2338,
                                                                                                2341
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "\n\nasync def"
                                                                                        }
                                                                                    ],
                                                                                    "content": "AVAILABLE_BLOCKS\n\n\nasync def"
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "inputSchema",
                                                                                    "range": [
                                                                                        2343,
                                                                                        2357
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "CallExpression",
                                                                                            "name": "dumps",
                                                                                            "range": [
                                                                                                2347,
                                                                                                2356
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "CallExpression",
                                                                                                    "name": "jsonschema",
                                                                                                    "range": [
                                                                                                        2353,
                                                                                                        2356
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": "get_blocks()."
                                                                                                }
                                                                                            ],
                                                                                            "content": "None:\nfor cls in get_blocks()."
                                                                                        }
                                                                                    ],
                                                                                    "content": "()->None:\nfor cls in get_blocks().values"
                                                                                },
                                                                                {
                                                                                    "type": "Property",
                                                                                    "name": "outputSchema",
                                                                                    "range": [
                                                                                        2359,
                                                                                        2373
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "CallExpression",
                                                                                            "name": "dumps",
                                                                                            "range": [
                                                                                                2363,
                                                                                                2372
                                                                                            ],
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "CallExpression",
                                                                                                    "name": "jsonschema",
                                                                                                    "range": [
                                                                                                        2369,
                                                                                                        2372
                                                                                                    ],
                                                                                                    "children": [],
                                                                                                    "content": "=await AgentBlock."
                                                                                                }
                                                                                            ],
                                                                                            "content": "=cls()\nexisting_block=await AgentBlock."
                                                                                        }
                                                                                    ],
                                                                                    "content": "):\nblock=cls()\nexisting_block=await AgentBlock.prisma"
                                                                                }
                                                                            ],
                                                                            "content": "import AVAILABLE_BLOCKS#noqa:E402\n\nreturn AVAILABLE_BLOCKS\n\n\nasync def initialize_blocks()->None:\nfor cls in get_blocks().values():\nblock=cls()\nexisting_block=await AgentBlock.prisma()"
                                                                        }
                                                                    ],
                                                                    "content": "\nfrom backend.blocks import AVAILABLE_BLOCKS#noqa:E402\n\nreturn AVAILABLE_BLOCKS\n\n\nasync def initialize_blocks()->None:\nfor cls in get_blocks().values():\nblock=cls()\nexisting_block=await AgentBlock.prisma().find_first"
                                                                }
                                                            ],
                                                            "content": ",Type[Block]]:\nfrom backend.blocks import AVAILABLE_BLOCKS#noqa:E402\n\nreturn AVAILABLE_BLOCKS\n\n\nasync def initialize_blocks()->None:\nfor cls in get_blocks().values():\nblock=cls()\nexisting_block=await AgentBlock.prisma().find_first("
                                                        }
                                                    ],
                                                    "content": ",Type[Block]]:\nfrom backend.blocks import AVAILABLE_BLOCKS#noqa:E402\n\nreturn AVAILABLE_BLOCKS\n\n\nasync def initialize_blocks()->None:\nfor cls in get_blocks().values():\nblock=cls()\nexisting_block=await AgentBlock.prisma().find_first("
                                                }
                                            ],
                                            "content": "str,Type[Block]]:\nfrom backend.blocks import AVAILABLE_BLOCKS#noqa:E402\n\nreturn AVAILABLE_BLOCKS\n\n\nasync def initialize_blocks()->None:\nfor cls in get_blocks().values():\nblock=cls()\nexisting_block=await AgentBlock.prisma().find_first("
                                        }
                                    ],
                                    "content": "->dict[str,Type[Block]]:\nfrom backend.blocks import AVAILABLE_BLOCKS#noqa:E402\n\nreturn AVAILABLE_BLOCKS\n\n\nasync def initialize_blocks()->None:\nfor cls in get_blocks().values():\nblock=cls()\nexisting_block=await AgentBlock.prisma().find_first("
                                }
                            ],
                            "content": "============Block Helper Functions=======================#\n\n\ndef get_blocks()->dict[str,Type[Block]]:\nfrom backend.blocks import AVAILABLE_BLOCKS#noqa:E402\n\nreturn AVAILABLE_BLOCKS\n\n\nasync def initialize_blocks()->None:\nfor cls in get_blocks().values():\nblock=cls()\nexisting_block=await AgentBlock.prisma().find_first(\nwhere"
                        }
                    ],
                    "content": "======================Block Helper Functions=======================#\n\n\ndef get_blocks()->dict[str,Type[Block]]:\nfrom backend.blocks import AVAILABLE_BLOCKS#noqa:E402\n\nreturn AVAILABLE_BLOCKS\n\n\nasync def initialize_blocks()->None:\nfor cls in get_blocks().values():\nblock=cls()\nexisting_block=await AgentBlock.prisma().find_first(\nwhere"
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        2412,
                        2506
                    ],
                    "children": [
                        {
                            "type": "LogicalExpression",
                            "name": "or",
                            "range": [
                                2413,
                                2450
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "!=",
                                    "range": [
                                        2418,
                                        2423
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "block.id",
                                            "range": [
                                                2416,
                                                2423
                                            ],
                                            "children": [],
                                            "content": ").create(\ndata={"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "existing_block.id",
                                            "range": [
                                                2420,
                                                2423
                                            ],
                                            "children": [],
                                            "content": "\ndata={"
                                        }
                                    ],
                                    "content": "create(\ndata={"
                                },
                                {
                                    "type": "BinaryExpression",
                                    "name": "!=",
                                    "range": [
                                        2428,
                                        2433
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "block.name",
                                            "range": [
                                                2426,
                                                2433
                                            ],
                                            "children": [],
                                            "content": ":block.id,\n\"name\":"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "existing_block.name",
                                            "range": [
                                                2430,
                                                2433
                                            ],
                                            "children": [],
                                            "content": ",\n\"name\":"
                                        }
                                    ],
                                    "content": ".id,\n\"name\":"
                                },
                                {
                                    "type": "BinaryExpression",
                                    "name": "!=",
                                    "range": [
                                        2438,
                                        2441
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "input_schema",
                                            "range": [
                                                2435,
                                                2441
                                            ],
                                            "children": [],
                                            "content": ".name,\n\"inputSchema\":json"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "existing_block.inputSchema",
                                            "range": [
                                                2438,
                                                2441
                                            ],
                                            "children": [],
                                            "content": "\n\"inputSchema\":json"
                                        }
                                    ],
                                    "content": "\n\"inputSchema\":json"
                                },
                                {
                                    "type": "BinaryExpression",
                                    "name": "!=",
                                    "range": [
                                        2446,
                                        2449
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "output_schema",
                                            "range": [
                                                2443,
                                                2449
                                            ],
                                            "children": [],
                                            "content": "dumps(block.input_schema.jsonschema"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "existing_block.outputSchema",
                                            "range": [
                                                2446,
                                                2449
                                            ],
                                            "children": [],
                                            "content": ".input_schema.jsonschema"
                                        }
                                    ],
                                    "content": ".input_schema.jsonschema"
                                }
                            ],
                            "content": ".prisma().create(\ndata={\n\"id\":block.id,\n\"name\":block.name,\n\"inputSchema\":json.dumps(block.input_schema.jsonschema("
                        },
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                2452,
                                2506
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "",
                                    "range": [
                                        2453,
                                        2506
                                    ],
                                    "children": [
                                        {
                                            "type": "AwaitExpression",
                                            "name": "",
                                            "range": [
                                                2453,
                                                2506
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "update",
                                                    "range": [
                                                        2460,
                                                        2505
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ObjectExpression",
                                                            "name": "",
                                                            "range": [
                                                                2465,
                                                                2471
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Property",
                                                                    "name": "id",
                                                                    "range": [
                                                                        2466,
                                                                        2471
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "existing_block.id",
                                                                            "range": [
                                                                                2468,
                                                                                2471
                                                                            ],
                                                                            "children": [],
                                                                            "content": "),\n}"
                                                                        }
                                                                    ],
                                                                    "content": "()),\n}"
                                                                }
                                                            ],
                                                            "content": "jsonschema()),\n}"
                                                        },
                                                        {
                                                            "type": "ObjectExpression",
                                                            "name": "",
                                                            "range": [
                                                                2476,
                                                                2502
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Property",
                                                                    "name": "id",
                                                                    "range": [
                                                                        2478,
                                                                        2483
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "block.id",
                                                                            "range": [
                                                                                2480,
                                                                                2483
                                                                            ],
                                                                            "children": [],
                                                                            "content": "json.dumps("
                                                                        }
                                                                    ],
                                                                    "content": "input_schema=json.dumps("
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "name",
                                                                    "range": [
                                                                        2485,
                                                                        2490
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "block.name",
                                                                            "range": [
                                                                                2487,
                                                                                2490
                                                                            ],
                                                                            "children": [],
                                                                            "content": ".jsonschema()"
                                                                        }
                                                                    ],
                                                                    "content": ".input_schema.jsonschema()"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "inputSchema",
                                                                    "range": [
                                                                        2492,
                                                                        2495
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "input_schema",
                                                                            "range": [
                                                                                2494,
                                                                                2495
                                                                            ],
                                                                            "children": [],
                                                                            "content": "=json"
                                                                        }
                                                                    ],
                                                                    "content": "\noutput_schema=json"
                                                                },
                                                                {
                                                                    "type": "Property",
                                                                    "name": "outputSchema",
                                                                    "range": [
                                                                        2497,
                                                                        2500
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "output_schema",
                                                                            "range": [
                                                                                2499,
                                                                                2500
                                                                            ],
                                                                            "children": [],
                                                                            "content": "block."
                                                                        }
                                                                    ],
                                                                    "content": "dumps(block."
                                                                }
                                                            ],
                                                            "content": "\n\ninput_schema=json.dumps(block.input_schema.jsonschema())\noutput_schema=json.dumps(block.output_schema."
                                                        }
                                                    ],
                                                    "content": "(block.output_schema.jsonschema()),\n}\n)\ncontinue\n\ninput_schema=json.dumps(block.input_schema.jsonschema())\noutput_schema=json.dumps(block.output_schema.jsonschema()"
                                                }
                                            ],
                                            "content": ",\n\"outputSchema\":json.dumps(block.output_schema.jsonschema()),\n}\n)\ncontinue\n\ninput_schema=json.dumps(block.input_schema.jsonschema())\noutput_schema=json.dumps(block.output_schema.jsonschema())"
                                        }
                                    ],
                                    "content": ",\n\"outputSchema\":json.dumps(block.output_schema.jsonschema()),\n}\n)\ncontinue\n\ninput_schema=json.dumps(block.input_schema.jsonschema())\noutput_schema=json.dumps(block.output_schema.jsonschema())"
                                }
                            ],
                            "content": "),\n\"outputSchema\":json.dumps(block.output_schema.jsonschema()),\n}\n)\ncontinue\n\ninput_schema=json.dumps(block.input_schema.jsonschema())\noutput_schema=json.dumps(block.output_schema.jsonschema())"
                        }
                    ],
                    "content": "AgentBlock.prisma().create(\ndata={\n\"id\":block.id,\n\"name\":block.name,\n\"inputSchema\":json.dumps(block.input_schema.jsonschema()),\n\"outputSchema\":json.dumps(block.output_schema.jsonschema()),\n}\n)\ncontinue\n\ninput_schema=json.dumps(block.input_schema.jsonschema())\noutput_schema=json.dumps(block.output_schema.jsonschema())"
                }
            ],
            "content": "\nyield output_name,output_data\n\n\n#=======================Block Helper Functions=======================#\n\n\ndef get_blocks()->dict[str,Type[Block]]:\nfrom backend.blocks import AVAILABLE_BLOCKS#noqa:E402\n\nreturn AVAILABLE_BLOCKS\n\n\nasync def initialize_blocks()->None:\nfor cls in get_blocks().values():\nblock=cls()\nexisting_block=await AgentBlock.prisma().find_first(\nwhere={\"OR\":[{\"id\":block.id},{\"name\":block.name}]}\n)\nif not existing_block:\nawait AgentBlock.prisma().create(\ndata={\n\"id\":block.id,\n\"name\":block.name,\n\"inputSchema\":json.dumps(block.input_schema.jsonschema()),\n\"outputSchema\":json.dumps(block.output_schema.jsonschema()),\n}\n)\ncontinue\n\ninput_schema=json.dumps(block.input_schema.jsonschema())\noutput_schema=json.dumps(block.output_schema.jsonschema())\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_block",
            "range": [
                2509,
                2543
            ],
            "children": [
                {
                    "type": "VariableDeclaration",
                    "name": "cls",
                    "range": [
                        2523,
                        2533
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "get",
                            "range": [
                                2529,
                                2533
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "block_id",
                                    "range": [
                                        2531,
                                        2533
                                    ],
                                    "children": [],
                                    "content": "input_schema!="
                                }
                            ],
                            "content": "\nor input_schema!="
                        }
                    ],
                    "content": "name!=existing_block.name\nor input_schema!="
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        2534,
                        2542
                    ],
                    "children": [
                        {
                            "type": "ConditionalExpression",
                            "name": "",
                            "range": [
                                2535,
                                2542
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "cls",
                                    "range": [
                                        2535,
                                        2539
                                    ],
                                    "children": [],
                                    "content": ".inputSchema\nor output_schema"
                                },
                                {
                                    "type": "NewExpression",
                                    "name": "cls",
                                    "range": [
                                        2536,
                                        2539
                                    ],
                                    "children": [],
                                    "content": "inputSchema\nor output_schema"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "None",
                                    "range": [
                                        2541,
                                        2542
                                    ],
                                    "children": [],
                                    "content": "=existing_block"
                                }
                            ],
                            "content": ".inputSchema\nor output_schema!=existing_block"
                        }
                    ],
                    "content": "existing_block.inputSchema\nor output_schema!=existing_block"
                }
            ],
            "content": "(\nblock.id!=existing_block.id\nor block.name!=existing_block.name\nor input_schema!=existing_block.inputSchema\nor output_schema!=existing_block."
        }
    ],
    "content": "=dict[str,list[Any]]#Completed stream,collected as a dict.\n\n\nclass BlockType(Enum):\nSTANDARD=\"Standard\"\nINPUT=\"Input\"\nOUTPUT=\"Output\"\nNOTE=\"Note\"\nWEBHOOK=\"Webhook\"\nWEBHOOK_MANUAL=\"Webhook (manual)\"\nAGENT=\"Agent\"\n\n\nclass BlockCategory(Enum):\nAI=\"Block that leverages AI to perform a task.\"\nSOCIAL=\"Block that interacts with social media platforms.\"\nTEXT=\"Block that processes text data.\"\nSEARCH=\"Block that searches or extracts information from the internet.\"\nBASIC=\"Block that performs basic operations.\"\nINPUT=\"Block that interacts with input of the graph.\"\nOUTPUT=\"Block that interacts with output of the graph.\"\nLOGIC=\"Programming logic to control the flow of your agent\"\nCOMMUNICATION=\"Block that interacts with communication platforms.\"\nDEVELOPER_TOOLS=\"Developer tools such as GitHub blocks.\"\nDATA=\"Block that interacts with structured data.\"\nHARDWARE=\"Block that interacts with hardware.\"\nAGENT=\"Block that interacts with other agents.\"\nCRM=\"Block that interacts with CRM services.\"\n\ndef dict(self)->dict[str,str]:\nreturn{\"category\":self.name,\"description\":self.value}\n\n\nclass BlockSchema(BaseModel):\ncached_jsonschema:ClassVar[dict[str,Any]]\n\n@classmethod\ndef jsonschema(cls)->dict[str,Any]:\nif cls.cached_jsonschema:\nreturn cls.cached_jsonschema\n\nmodel=jsonref.replace_refs(cls.model_json_schema(),merge_props=True)\n\ndef ref_to_dict(obj):\nif isinstance(obj,dict):\n#OpenAPI<3.1does not support sibling fields that has a$ref key\n#So sometimes,the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with1item.\nkeys={\"allOf\",\"anyOf\",\"oneOf\"}\none_key=next((k for k in keys if k in obj and len(obj[k])==1),None)\nif one_key:\nobj.update(obj[one_key][0])\n\nreturn{\nkey:ref_to_dict(value)\nfor key,value in obj.items()\nif not key.startswith(\"$\")and key!=one_key\n}\nelif isinstance(obj,list):\nreturn[ref_to_dict(item)for item in obj]\n\nreturn obj\n\ncls.cached_jsonschema=cast(dict[str,Any],ref_to_dict(model))\n\n#Set default properties values\nfor field in cls.cached_jsonschema.get(\"properties\",{}).values():\nif isinstance(field,dict)and \"advanced\" not in field:\nfield[\"advanced\"]=True\n\nreturn cls.cached_jsonschema\n\n@classmethod\ndef validate_data(cls,data:BlockInput)->str|None:\nreturn json.validate_with_jsonschema(schema=cls.jsonschema(),data=data)\n\n@classmethod\ndef validate_field(cls,field_name:str,data:BlockInput)->str|None:\n\"\"\" \\n         Validate the data against a specific property (one of the input/output name). \\n         Returns the validation error message if the data does not match the schema. \\n         \"\"\"\nmodel_schema=cls.jsonschema().get(\"properties\",{})\nif not model_schema:\nreturn f \"Invalid model schema {cls}\"\n\nproperty_schema=model_schema.get(field_name)\nif not property_schema:\nreturn f \"Invalid property name {field_name}\"\n\ntry:\njsonschema.validate(json.to_dict(data),property_schema)\nreturn None\nexcept jsonschema.ValidationError as e:\nreturn str(e)\n\n@classmethod\ndef get_fields(cls)->set[str]:\nreturn set(cls.model_fields.keys())\n\n@classmethod\ndef get_required_fields(cls)->set[str]:\nreturn{\nfield\nfor field,field_info in cls.model_fields.items()\nif field_info.is_required()\n}\n\n@classmethod\ndef __pydantic_init_subclass__(cls,**kwargs):\n\"\"\"Validates the schema definition. Rules: \\n         - Only one `CredentialsMetaInput` field may be present. \\n           - This field MUST be called `credentials`. \\n         - A field that is called `credentials` MUST be a `CredentialsMetaInput`. \\n         \"\"\"\nsuper().__pydantic_init_subclass__(**kwargs)\n\n#Reset cached JSON schema to prevent inheriting it from parent class\ncls.cached_jsonschema={}\n\ncredentials_fields=[\nfield_name\nfor field_name,info in cls.model_fields.items()\nif(\ninspect.isclass(info.annotation)\nand issubclass(\nget_origin(info.annotation)or info.annotation,\nCredentialsMetaInput,\n)\n)\n]\nif len(credentials_fields)>1:\nraise ValueError(\nf \"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n)\nelif(\nlen(credentials_fields)==1\nand credentials_fields[0]!=CREDENTIALS_FIELD_NAME\n):\nraise ValueError(\nf \"CredentialsMetaInput field on {cls.__qualname__} \"\n\"must be named 'credentials'\"\n)\nelif(\nlen(credentials_fields)==0\nand CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n):\nraise TypeError(\nf \"Field 'credentials' on {cls.__qualname__} \"\nf \"must be of type {CredentialsMetaInput.__name__}\"\n)\nif credentials_field:=cls.model_fields.get(CREDENTIALS_FIELD_NAME):\ncredentials_input_type=cast(\nCredentialsMetaInput,credentials_field.annotation\n)\ncredentials_input_type.validate_credentials_field_schema(cls)\n\n\nBlockSchemaInputType=TypeVar(\"BlockSchemaInputType\",bound=BlockSchema)\nBlockSchemaOutputType=TypeVar(\"BlockSchemaOutputType\",bound=BlockSchema)\n\n\nclass EmptySchema(BlockSchema):\npass\n\n\n#--8<--[start:BlockWebhookConfig]\nclass BlockManualWebhookConfig(BaseModel):\n\"\"\" \\n     Configuration model for webhook-triggered blocks on which \\n     the user has to manually set up the webhook at the provider. \\n     \"\"\"\n\nprovider:str\n\"\"\"The service provider that the webhook connects to\"\"\"\n\nwebhook_type:str\n\"\"\" \\n     Identifier for the webhook type. E.g. GitHub has repo and organization level hooks. \\n  \\n     Only for use in the corresponding `WebhooksManager`. \\n     \"\"\"\n\nevent_filter_input:str=\"\"\n\"\"\" \\n     Name of the block's event filter input. \\n     Leave empty if the corresponding webhook doesn't have distinct event/payload types. \\n     \"\"\"\n\nevent_format:str=\"{event}\"\n\"\"\" \\n     Template string for the event(s) that a block instance subscribes to. \\n     Applied individually to each event selected in the event filter input. \\n  \\n     Example: `\" pull_request.{event}\"` -> `\"pull_request.opened \"` \\n     \"\"\"\n\n\nclass BlockWebhookConfig(BlockManualWebhookConfig):\n\"\"\" \\n     Configuration model for webhook-triggered blocks for which \\n     the webhook can be automatically set up through the provider's API. \\n     \"\"\"\n\nresource_format:str\n\"\"\" \\n     Template string for the resource that a block instance subscribes to. \\n     Fields will be filled from the block's inputs (except `payload`). \\n  \\n     Example: `f\"{repo}/pull_requests \"` (note: not how it's actually implemented) \\n  \\n     Only for use in the corresponding `WebhooksManager`. \\n     \"\"\"\n#--8<--[end:BlockWebhookConfig]\n\n\nclass Block(ABC,Generic[BlockSchemaInputType,BlockSchemaOutputType]):\ndef __init__(\nself,\nid:str=\"\",\ndescription:str=\"\",\ncontributors:list[ContributorDetails]=[],\ncategories:set[BlockCategory]|None=None,\ninput_schema:Type[BlockSchemaInputType]=EmptySchema,\noutput_schema:Type[BlockSchemaOutputType]=EmptySchema,\ntest_input:BlockInput|list[BlockInput]|None=None,\ntest_output:BlockData|list[BlockData]|None=None,\ntest_mock:dict[str,Any]|None=None,\ntest_credentials:Optional[Credentials]=None,\ndisabled:bool=False,\nstatic_output:bool=False,\nblock_type:BlockType=BlockType.STANDARD,\nwebhook_config:Optional[BlockWebhookConfig|BlockManualWebhookConfig]=None,\n):\n\"\"\" \\n         Initialize the block with the given schema. \\n  \\n         Args: \\n             id: The unique identifier for the block, this value will be persisted in the \\n                 DB. So it should be a unique and constant across the application run. \\n                 Use the UUID format for the ID. \\n             description: The description of the block, explaining what the block does. \\n             contributors: The list of contributors who contributed to the block. \\n             input_schema: The schema, defined as a Pydantic model, for the input data. \\n             output_schema: The schema, defined as a Pydantic model, for the output data. \\n             test_input: The list or single sample input data for the block, for testing. \\n             test_output: The list or single expected output if the test_input is run. \\n             test_mock: function names on the block implementation to mock on test run. \\n             disabled: If the block is disabled, it will not be available for execution. \\n             static_output: Whether the output links of the block are static by default. \\n         \"\"\"\nself.id=id\nself.input_schema=input_schema\nself.output_schema=output_schema\nself.test_input=test_input\nself.test_output=test_output\nself.test_mock=test_mock\nself.test_credentials=test_credentials\nself.description=description\nself.categories=categories or set()\nself.contributors=contributors or set()\nself.disabled=disabled\nself.static_output=static_output\nself.block_type=block_type\nself.webhook_config=webhook_config\nself.execution_stats={}\n\nif self.webhook_config:\nif isinstance(self.webhook_config,BlockWebhookConfig):\n#Enforce presence of credentials field on auto-setup webhook blocks\nif CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\nraise TypeError(\n\"credentials field is required on auto-setup webhook blocks\"\n)\nself.block_type=BlockType.WEBHOOK\nelse:\nself.block_type=BlockType.WEBHOOK_MANUAL\n\n#Enforce shape of webhook event filter,if present\nif self.webhook_config.event_filter_input:\nevent_filter_field=self.input_schema.model_fields[\nself.webhook_config.event_filter_input\n]\nif not(\nisinstance(event_filter_field.annotation,type)\nand issubclass(event_filter_field.annotation,BaseModel)\nand all(\nfield.annotation is bool\nfor field in event_filter_field.annotation.model_fields.values()\n)\n):\nraise NotImplementedError(\nf \"{self.name} has an invalid webhook event selector: \"\n\"field must be a BaseModel and all its fields must be boolean\"\n)\n\n#Enforce presence of 'payload' input\nif \"payload\" not in self.input_schema.model_fields:\nraise TypeError(\nf \"{self.name} is webhook-triggered but has no 'payload' input\"\n)\n\n#Disable webhook-triggered block if webhook functionality not available\nif not app_config.platform_base_url:\nself.disabled=True\n\n@classmethod\ndef create(cls:Type[\"Block\"])->\"Block\":\nreturn cls()\n\n@abstractmethod\ndef run(self,input_data:BlockSchemaInputType,**kwargs)->BlockOutput:\n\"\"\" \\n         Run the block with the given input data. \\n         Args: \\n             input_data: The input data with the structure of input_schema. \\n         Returns: \\n             A Generator that yields (output_name, output_data). \\n             output_name: One of the output name defined in Block's output_schema. \\n             output_data: The data for the output_name, matching the defined schema. \\n         \"\"\"\npass\n\ndef run_once(self,input_data:BlockSchemaInputType,output:str,**kwargs)->Any:\nfor name,data in self.run(input_data,**kwargs):\nif name==output:\nreturn data\nraise ValueError(f \"{self.name} did not produce any output for {output}\")\n\ndef merge_stats(self,stats:dict[str,Any])->dict[str,Any]:\nfor key,value in stats.items():\nif isinstance(value,dict):\nself.execution_stats.setdefault(key,{}).update(value)\nelif isinstance(value,(int,float)):\nself.execution_stats.setdefault(key,0)\nself.execution_stats[key]+=value\nelif isinstance(value,list):\nself.execution_stats.setdefault(key,[])\nself.execution_stats[key].extend(value)\nelse:\nself.execution_stats[key]=value\nreturn self.execution_stats\n\n@property\ndef name(self):\nreturn self.__class__.__name__\n\ndef to_dict(self):\nreturn{\n\"id\":self.id,\n\"name\":self.name,\n\"inputSchema\":self.input_schema.jsonschema(),\n\"outputSchema\":self.output_schema.jsonschema(),\n\"description\":self.description,\n\"categories\":[category.dict()for category in self.categories],\n\"contributors\":[\ncontributor.model_dump()for contributor in self.contributors\n],\n\"staticOutput\":self.static_output,\n\"uiType\":self.block_type.value,\n}\n\ndef execute(self,input_data:BlockInput,**kwargs)->BlockOutput:\nif error:=self.input_schema.validate_data(input_data):\nraise ValueError(\nf \"Unable to execute block with invalid input data: {error}\"\n)\n\nfor output_name,output_data in self.run(\nself.input_schema(**input_data),**kwargs\n):\nif output_name==\"error\":\nraise RuntimeError(output_data)\nif self.block_type==BlockType.STANDARD and(\nerror:=self.output_schema.validate_field(output_name,output_data)\n):\nraise ValueError(f \"Block produced an invalid output data: {error}\")\nyield output_name,output_data\n\n\n#=======================Block Helper Functions=======================#\n\n\ndef get_blocks()->dict[str,Type[Block]]:\nfrom backend.blocks import AVAILABLE_BLOCKS#noqa:E402\n\nreturn AVAILABLE_BLOCKS\n\n\nasync def initialize_blocks()->None:\nfor cls in get_blocks().values():\nblock=cls()\nexisting_block=await AgentBlock.prisma().find_first(\nwhere={\"OR\":[{\"id\":block.id},{\"name\":block.name}]}\n)\nif not existing_block:\nawait AgentBlock.prisma().create(\ndata={\n\"id\":block.id,\n\"name\":block.name,\n\"inputSchema\":json.dumps(block.input_schema.jsonschema()),\n\"outputSchema\":json.dumps(block.output_schema.jsonschema()),\n}\n)\ncontinue\n\ninput_schema=json.dumps(block.input_schema.jsonschema())\noutput_schema=json.dumps(block.output_schema.jsonschema())\nif(\nblock.id!=existing_block.id\nor block.name!=existing_block.name\nor input_schema!=existing_block.inputSchema\nor output_schema!=existing_block."
}