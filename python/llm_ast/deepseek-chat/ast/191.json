{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        504
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                0,
                20
            ],
            "children": [
                {
                    "type": "Text",
                    "name": "Knight Tour Intro",
                    "range": [
                        1,
                        3
                    ],
                    "children": [],
                    "content": "Knight Tour Intro"
                },
                {
                    "type": "URL",
                    "name": "https://www.youtube.com/watch?v=ab_dY3dZFHM",
                    "range": [
                        5,
                        19
                    ],
                    "children": [],
                    "content": "https://www.youtube.com/watch?v=ab_dY3dZFHM"
                }
            ],
            "content": "#Knight Tour Intro:https://www.youtube.com/watch?v=ab_dY3dZFHM\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "annotations",
            "range": [
                22,
                26
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "__future__",
                    "range": [
                        22,
                        23
                    ],
                    "children": [],
                    "content": "from __future__"
                }
            ],
            "content": "from __future__ import annotations\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_valid_pos",
            "range": [
                28,
                206
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        30,
                        43
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "position",
                            "range": [
                                31,
                                38
                            ],
                            "children": [],
                            "content": "(position:tuple[int,int"
                        },
                        {
                            "type": "Parameter",
                            "name": "n",
                            "range": [
                                40,
                                42
                            ],
                            "children": [],
                            "content": ",n:"
                        }
                    ],
                    "content": "get_valid_pos(position:tuple[int,int],n:int"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        44,
                        54
                    ],
                    "children": [],
                    "content": ")->list[tuple[int,int]"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        57,
                        59
                    ],
                    "children": [],
                    "content": "\n\"\"\" \\n     Find all the valid positions a knight can move to from the current position. \\n  \\n     >>> get_valid_pos((1, 3), 4) \\n     [(2, 1), (0, 1), (3, 2)] \\n     \""
                },
                {
                    "type": "VariableDecl",
                    "name": "y, x",
                    "range": [
                        62,
                        66
                    ],
                    "children": [],
                    "content": "\ny,x="
                },
                {
                    "type": "VariableDecl",
                    "name": "positions",
                    "range": [
                        68,
                        160
                    ],
                    "children": [
                        {
                            "type": "List",
                            "name": "positions_list",
                            "range": [
                                70,
                                160
                            ],
                            "children": [
                                {
                                    "type": "Tuple",
                                    "name": "tuple",
                                    "range": [
                                        72,
                                        80
                                    ],
                                    "children": [],
                                    "content": "\n(y+1,x+2"
                                },
                                {
                                    "type": "Tuple",
                                    "name": "tuple",
                                    "range": [
                                        83,
                                        91
                                    ],
                                    "children": [],
                                    "content": "\n(y-1,x+2"
                                },
                                {
                                    "type": "Tuple",
                                    "name": "tuple",
                                    "range": [
                                        94,
                                        102
                                    ],
                                    "children": [],
                                    "content": "\n(y+1,x-2"
                                },
                                {
                                    "type": "Tuple",
                                    "name": "tuple",
                                    "range": [
                                        105,
                                        113
                                    ],
                                    "children": [],
                                    "content": "\n(y-1,x-2"
                                },
                                {
                                    "type": "Tuple",
                                    "name": "tuple",
                                    "range": [
                                        116,
                                        124
                                    ],
                                    "children": [],
                                    "content": "\n(y+2,x+1"
                                },
                                {
                                    "type": "Tuple",
                                    "name": "tuple",
                                    "range": [
                                        127,
                                        135
                                    ],
                                    "children": [],
                                    "content": "\n(y+2,x-1"
                                },
                                {
                                    "type": "Tuple",
                                    "name": "tuple",
                                    "range": [
                                        138,
                                        146
                                    ],
                                    "children": [],
                                    "content": "\n(y-2,x+1"
                                },
                                {
                                    "type": "Tuple",
                                    "name": "tuple",
                                    "range": [
                                        149,
                                        157
                                    ],
                                    "children": [],
                                    "content": "\n(y-2,x-1"
                                }
                            ],
                            "content": "=[\n(y+1,x+2),\n(y-1,x+2),\n(y+1,x-2),\n(y-1,x-2),\n(y+2,x+1),\n(y+2,x-1),\n(y-2,x+1),\n(y-2,x-1),\n"
                        }
                    ],
                    "content": "\npositions=[\n(y+1,x+2),\n(y-1,x+2),\n(y+1,x-2),\n(y-1,x-2),\n(y+2,x+1),\n(y+2,x-1),\n(y-2,x+1),\n(y-2,x-1),\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "permissible_positions",
                    "range": [
                        162,
                        165
                    ],
                    "children": [],
                    "content": "\npermissible_positions=["
                },
                {
                    "type": "ForStatement",
                    "name": "for_loop",
                    "range": [
                        168,
                        202
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "inner_position",
                            "range": [
                                169,
                                171
                            ],
                            "children": [],
                            "content": "for inner_position in"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "y_test, x_test",
                            "range": [
                                174,
                                178
                            ],
                            "children": [],
                            "content": "\ny_test,x_test="
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                180,
                                194
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        181,
                                        193
                                    ],
                                    "children": [],
                                    "content": "if0<=y_test<n and0<=x_test<"
                                },
                                {
                                    "type": "Block",
                                    "name": "block",
                                    "range": [
                                        195,
                                        202
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "expression_statement",
                                            "range": [
                                                196,
                                                201
                                            ],
                                            "children": [],
                                            "content": "\npermissible_positions.append(inner_position"
                                        }
                                    ],
                                    "content": ":\npermissible_positions.append(inner_position)"
                                }
                            ],
                            "content": "\nif0<=y_test<n and0<=x_test<n"
                        }
                    ],
                    "content": "\nfor inner_position in positions:\ny_test,x_test=inner_position\nif0<=y_test<n and0<=x_test<n:\npermissible_positions.append(inner_position)"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return_statement",
                    "range": [
                        204,
                        205
                    ],
                    "children": [],
                    "content": "\nreturn"
                }
            ],
            "content": "\ndef get_valid_pos(position:tuple[int,int],n:int)->list[tuple[int,int]]:\n\"\"\" \\n     Find all the valid positions a knight can move to from the current position. \\n  \\n     >>> get_valid_pos((1, 3), 4) \\n     [(2, 1), (0, 1), (3, 2)] \\n     \"\"\"\n\ny,x=position\npositions=[\n(y+1,x+2),\n(y-1,x+2),\n(y+1,x-2),\n(y-1,x-2),\n(y+2,x+1),\n(y+2,x-1),\n(y-2,x+1),\n(y-2,x-1),\n]\npermissible_positions=[]\n\nfor inner_position in positions:\ny_test,x_test=inner_position\nif0<=y_test<n and0<=x_test<n:\npermissible_positions.append(inner_position)\n\nreturn permissible_positions"
        },
        {
            "type": "FunctionDecl",
            "name": "is_complete",
            "range": [
                207,
                247
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "board",
                    "range": [
                        209,
                        219
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "board",
                            "range": [
                                210,
                                218
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "list[list[int]]",
                                    "range": [
                                        212,
                                        218
                                    ],
                                    "children": [],
                                    "content": "(board:list[list["
                                }
                            ],
                            "content": "def is_complete(board:list[list["
                        }
                    ],
                    "content": "\ndef is_complete(board:list[list[int"
                },
                {
                    "type": "ReturnType",
                    "name": "bool",
                    "range": [
                        220,
                        222
                    ],
                    "children": [],
                    "content": "]])"
                },
                {
                    "type": "Docstring",
                    "name": "\"\"\"\n     Check if the board (matrix) has been completely filled with non-zero values.\n  \n     >>> is_complete([[1]])\n     True\n  \n     >>> is_complete([[1, 2], [3, 0]])\n     False\n     \"\"\"",
                    "range": [
                        225,
                        227
                    ],
                    "children": [],
                    "content": "bool:\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        230,
                        246
                    ],
                    "children": [
                        {
                            "type": "UnaryExpression",
                            "name": "not",
                            "range": [
                                231,
                                246
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "any",
                                    "range": [
                                        232,
                                        246
                                    ],
                                    "children": [
                                        {
                                            "type": "GeneratorExpression",
                                            "name": "elem == 0 for row in board for elem in row",
                                            "range": [
                                                233,
                                                246
                                            ],
                                            "children": [
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "elem == 0",
                                                    "range": [
                                                        234,
                                                        237
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "elem",
                                                            "range": [
                                                                234,
                                                                234
                                                            ],
                                                            "children": [],
                                                            "content": "not"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "==",
                                                            "range": [
                                                                235,
                                                                236
                                                            ],
                                                            "children": [],
                                                            "content": "any("
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "0",
                                                            "range": [
                                                                237,
                                                                237
                                                            ],
                                                            "children": [],
                                                            "content": "elem"
                                                        }
                                                    ],
                                                    "content": "not any(elem"
                                                },
                                                {
                                                    "type": "ForStatement",
                                                    "name": "for row in board",
                                                    "range": [
                                                        238,
                                                        241
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "row",
                                                            "range": [
                                                                239,
                                                                239
                                                            ],
                                                            "children": [],
                                                            "content": "="
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "board",
                                                            "range": [
                                                                241,
                                                                241
                                                            ],
                                                            "children": [],
                                                            "content": "for"
                                                        }
                                                    ],
                                                    "content": "==0for"
                                                },
                                                {
                                                    "type": "ForStatement",
                                                    "name": "for elem in row",
                                                    "range": [
                                                        242,
                                                        245
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "elem",
                                                            "range": [
                                                                243,
                                                                243
                                                            ],
                                                            "children": [],
                                                            "content": "in"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "row",
                                                            "range": [
                                                                245,
                                                                245
                                                            ],
                                                            "children": [],
                                                            "content": "for"
                                                        }
                                                    ],
                                                    "content": "row in board for"
                                                }
                                            ],
                                            "content": "return not any(elem==0for row in board for elem"
                                        }
                                    ],
                                    "content": "\nreturn not any(elem==0for row in board for elem"
                                }
                            ],
                            "content": "\n\nreturn not any(elem==0for row in board for elem"
                        }
                    ],
                    "content": "\"\"\n\nreturn not any(elem==0for row in board for elem"
                }
            ],
            "content": "\n\n\ndef is_complete(board:list[list[int]])->bool:\n\"\"\" \\n     Check if the board (matrix) has been completely filled with non-zero values. \\n  \\n     >>> is_complete([[1]]) \\n     True \\n  \\n     >>> is_complete([[1, 2], [3, 0]]) \\n     False \\n     \"\"\"\n\nreturn not any(elem==0for row in board for elem in"
        },
        {
            "type": "FunctionDecl",
            "name": "open_knight_tour_helper",
            "range": [
                248,
                372
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        250,
                        274
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "board",
                            "range": [
                                252,
                                260
                            ],
                            "children": [],
                            "content": "\ndef open_knight_tour_helper(\nboard:list["
                        },
                        {
                            "type": "Parameter",
                            "name": "pos",
                            "range": [
                                262,
                                269
                            ],
                            "children": [],
                            "content": "[int]],pos:tuple"
                        },
                        {
                            "type": "Parameter",
                            "name": "curr",
                            "range": [
                                271,
                                273
                            ],
                            "children": [],
                            "content": "int,int"
                        }
                    ],
                    "content": "\n\n\ndef open_knight_tour_helper(\nboard:list[list[int]],pos:tuple[int,int]"
                },
                {
                    "type": "ReturnType",
                    "name": "bool",
                    "range": [
                        276,
                        278
                    ],
                    "children": [],
                    "content": "curr:int"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        280,
                        372
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                281,
                                283
                            ],
                            "children": [],
                            "content": "->bool"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                286,
                                295
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "is_complete",
                                    "range": [
                                        287,
                                        290
                                    ],
                                    "children": [],
                                    "content": "\" \\n     Helper function to solve knight tour problem. \\n     \"\"\"\n\n"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        293,
                                        294
                                    ],
                                    "children": [],
                                    "content": "(board"
                                }
                            ],
                            "content": "\"\"\" \\n     Helper function to solve knight tour problem. \\n     \"\"\"\n\nif is_complete(board)"
                        },
                        {
                            "type": "ForStatement",
                            "name": "for_loop",
                            "range": [
                                297,
                                368
                            ],
                            "children": [
                                {
                                    "type": "Iteration",
                                    "name": "position",
                                    "range": [
                                        298,
                                        308
                                    ],
                                    "children": [],
                                    "content": "return True\n\nfor position in get_valid_pos(pos,"
                                },
                                {
                                    "type": "AssignmentExpression",
                                    "name": "assignment",
                                    "range": [
                                        311,
                                        315
                                    ],
                                    "children": [],
                                    "content": "board)):\n"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "if_statement",
                                    "range": [
                                        318,
                                        368
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "board[y][x] == 0",
                                            "range": [
                                                319,
                                                328
                                            ],
                                            "children": [],
                                            "content": "=position\n\nif board[y]["
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "assignment",
                                            "range": [
                                                331,
                                                341
                                            ],
                                            "children": [],
                                            "content": "==0:\nboard[y][x"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_statement",
                                            "range": [
                                                343,
                                                358
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "open_knight_tour_helper",
                                                    "range": [
                                                        344,
                                                        353
                                                    ],
                                                    "children": [],
                                                    "content": "curr+1\nif open_knight_tour_helper(board,position"
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "name": "return",
                                                    "range": [
                                                        356,
                                                        357
                                                    ],
                                                    "children": [],
                                                    "content": "+1"
                                                }
                                            ],
                                            "content": "=curr+1\nif open_knight_tour_helper(board,position,curr+1)"
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "assignment",
                                            "range": [
                                                359,
                                                367
                                            ],
                                            "children": [],
                                            "content": ":\nreturn True\nboard[y]"
                                        }
                                    ],
                                    "content": "x=position\n\nif board[y][x]==0:\nboard[y][x]=curr+1\nif open_knight_tour_helper(board,position,curr+1):\nreturn True\nboard[y]["
                                }
                            ],
                            "content": "\nreturn True\n\nfor position in get_valid_pos(pos,len(board)):\ny,x=position\n\nif board[y][x]==0:\nboard[y][x]=curr+1\nif open_knight_tour_helper(board,position,curr+1):\nreturn True\nboard[y]["
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                370,
                                371
                            ],
                            "children": [],
                            "content": "]="
                        }
                    ],
                    "content": ")->bool:\n\"\"\" \\n     Helper function to solve knight tour problem. \\n     \"\"\"\n\nif is_complete(board):\nreturn True\n\nfor position in get_valid_pos(pos,len(board)):\ny,x=position\n\nif board[y][x]==0:\nboard[y][x]=curr+1\nif open_knight_tour_helper(board,position,curr+1):\nreturn True\nboard[y][x]=0"
                }
            ],
            "content": "row)\n\n\ndef open_knight_tour_helper(\nboard:list[list[int]],pos:tuple[int,int],curr:int\n)->bool:\n\"\"\" \\n     Helper function to solve knight tour problem. \\n     \"\"\"\n\nif is_complete(board):\nreturn True\n\nfor position in get_valid_pos(pos,len(board)):\ny,x=position\n\nif board[y][x]==0:\nboard[y][x]=curr+1\nif open_knight_tour_helper(board,position,curr+1):\nreturn True\nboard[y][x]=0"
        },
        {
            "type": "FunctionDecl",
            "name": "open_knight_tour",
            "range": [
                373,
                486
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "n",
                    "range": [
                        376,
                        378
                    ],
                    "children": [],
                    "content": "False\n\n"
                },
                {
                    "type": "ReturnType",
                    "name": "list[list[int]]",
                    "range": [
                        382,
                        388
                    ],
                    "children": [],
                    "content": "(n:int)->"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        391,
                        393
                    ],
                    "children": [],
                    "content": "list[int"
                },
                {
                    "type": "VariableDecl",
                    "name": "board",
                    "range": [
                        396,
                        416
                    ],
                    "children": [
                        {
                            "type": "ListComprehension",
                            "name": "board",
                            "range": [
                                398,
                                416
                            ],
                            "children": [
                                {
                                    "type": "ListComprehension",
                                    "name": "inner_list",
                                    "range": [
                                        399,
                                        408
                                    ],
                                    "children": [
                                        {
                                            "type": "ForStatement",
                                            "name": "i",
                                            "range": [
                                                401,
                                                407
                                            ],
                                            "children": [],
                                            "content": "\n\nboard=[[0"
                                        }
                                    ],
                                    "content": "\" \\n     Find the solution for the knight tour problem for a board of size n. Raises \\n     ValueError if the tour cannot be performed for the given size. \\n  \\n     >>> open_knight_tour(1) \\n     [[1]] \\n  \\n     >>> open_knight_tour(2) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Open Knight Tour cannot be performed on a board of size 2 \\n     \"\"\"\n\nboard=[[0for"
                                },
                                {
                                    "type": "ForStatement",
                                    "name": "j",
                                    "range": [
                                        409,
                                        415
                                    ],
                                    "children": [],
                                    "content": "i in range(n)]"
                                }
                            ],
                            "content": "\"\"\" \\n     Find the solution for the knight tour problem for a board of size n. Raises \\n     ValueError if the tour cannot be performed for the given size. \\n  \\n     >>> open_knight_tour(1) \\n     [[1]] \\n  \\n     >>> open_knight_tour(2) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Open Knight Tour cannot be performed on a board of size 2 \\n     \"\"\"\n\nboard=[[0for i in range(n)]for"
                        }
                    ],
                    "content": ":\n\"\"\" \\n     Find the solution for the knight tour problem for a board of size n. Raises \\n     ValueError if the tour cannot be performed for the given size. \\n  \\n     >>> open_knight_tour(1) \\n     [[1]] \\n  \\n     >>> open_knight_tour(2) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Open Knight Tour cannot be performed on a board of size 2 \\n     \"\"\"\n\nboard=[[0for i in range(n)]for"
                },
                {
                    "type": "ForStatement",
                    "name": "i",
                    "range": [
                        419,
                        426
                    ],
                    "children": [
                        {
                            "type": "ForStatement",
                            "name": "j",
                            "range": [
                                428,
                                435
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "board[i][j]",
                                    "range": [
                                        437,
                                        444
                                    ],
                                    "children": [],
                                    "content": "in range(n):\nboard"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "if",
                                    "range": [
                                        447,
                                        460
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "open_knight_tour_helper",
                                            "range": [
                                                448,
                                                459
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "board",
                                                    "range": [
                                                        450,
                                                        450
                                                    ],
                                                    "children": [],
                                                    "content": "]"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "(i, j)",
                                                    "range": [
                                                        452,
                                                        456
                                                    ],
                                                    "children": [],
                                                    "content": "1\nif open_knight_tour_helper("
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "1",
                                                    "range": [
                                                        458,
                                                        458
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                }
                                            ],
                                            "content": "[j]=1\nif open_knight_tour_helper(board,("
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                462,
                                                463
                                            ],
                                            "children": [],
                                            "content": "j)"
                                        }
                                    ],
                                    "content": "][j]=1\nif open_knight_tour_helper(board,(i"
                                },
                                {
                                    "type": "AssignmentExpression",
                                    "name": "board[i][j]",
                                    "range": [
                                        465,
                                        472
                                    ],
                                    "children": [],
                                    "content": "1):\nreturn board\nboard"
                                }
                            ],
                            "content": "in range(n):\nfor"
                        }
                    ],
                    "content": "range(n)]\n\nfor"
                },
                {
                    "type": "VariableDecl",
                    "name": "msg",
                    "range": [
                        476,
                        479
                    ],
                    "children": [],
                    "content": "[j]="
                },
                {
                    "type": "RaiseStatement",
                    "name": "raise",
                    "range": [
                        481,
                        485
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "ValueError",
                            "range": [
                                482,
                                485
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "msg",
                                    "range": [
                                        484,
                                        484
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": "\nmsg=f"
                        }
                    ],
                    "content": "\n\nmsg=f"
                }
            ],
            "content": "\n\nreturn False\n\n\ndef open_knight_tour(n:int)->list[list[int]]:\n\"\"\" \\n     Find the solution for the knight tour problem for a board of size n. Raises \\n     ValueError if the tour cannot be performed for the given size. \\n  \\n     >>> open_knight_tour(1) \\n     [[1]] \\n  \\n     >>> open_knight_tour(2) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Open Knight Tour cannot be performed on a board of size 2 \\n     \"\"\"\n\nboard=[[0for i in range(n)]for j in range(n)]\n\nfor i in range(n):\nfor j in range(n):\nboard[i][j]=1\nif open_knight_tour_helper(board,(i,j),1):\nreturn board\nboard[i][j]=0\n\nmsg=f \"Open Knight Tour cannot be performed on a board of size {n}\""
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                487,
                493
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "",
                    "range": [
                        487,
                        492
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "",
                            "range": [
                                488,
                                491
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "__name__",
                                    "range": [
                                        488,
                                        488
                                    ],
                                    "children": [],
                                    "content": "raise"
                                },
                                {
                                    "type": "Operator",
                                    "name": "==",
                                    "range": [
                                        489,
                                        490
                                    ],
                                    "children": [],
                                    "content": "ValueError("
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "\"__main__\"",
                                    "range": [
                                        491,
                                        491
                                    ],
                                    "children": [],
                                    "content": "msg"
                                }
                            ],
                            "content": "raise ValueError(msg"
                        }
                    ],
                    "content": "\nraise ValueError(msg)"
                }
            ],
            "content": "\nraise ValueError(msg)\n"
        },
        {
            "type": "ImportStatement",
            "name": "doctest",
            "range": [
                494,
                496
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "doctest",
                    "range": [
                        495,
                        495
                    ],
                    "children": [],
                    "content": "\n"
                }
            ],
            "content": "\n\nif"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                498,
                503
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "testmod",
                    "range": [
                        498,
                        502
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "",
                            "range": [
                                498,
                                500
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "doctest",
                                    "range": [
                                        498,
                                        498
                                    ],
                                    "children": [],
                                    "content": "="
                                },
                                {
                                    "type": "Identifier",
                                    "name": "testmod",
                                    "range": [
                                        500,
                                        500
                                    ],
                                    "children": [],
                                    "content": "\"__main__\""
                                }
                            ],
                            "content": "==\"__main__\""
                        }
                    ],
                    "content": "==\"__main__\":\n"
                }
            ],
            "content": "==\"__main__\":\nimport"
        }
    ],
    "content": "#Knight Tour Intro:https://www.youtube.com/watch?v=ab_dY3dZFHM\n\nfrom __future__ import annotations\n\n\ndef get_valid_pos(position:tuple[int,int],n:int)->list[tuple[int,int]]:\n\"\"\" \\n     Find all the valid positions a knight can move to from the current position. \\n  \\n     >>> get_valid_pos((1, 3), 4) \\n     [(2, 1), (0, 1), (3, 2)] \\n     \"\"\"\n\ny,x=position\npositions=[\n(y+1,x+2),\n(y-1,x+2),\n(y+1,x-2),\n(y-1,x-2),\n(y+2,x+1),\n(y+2,x-1),\n(y-2,x+1),\n(y-2,x-1),\n]\npermissible_positions=[]\n\nfor inner_position in positions:\ny_test,x_test=inner_position\nif0<=y_test<n and0<=x_test<n:\npermissible_positions.append(inner_position)\n\nreturn permissible_positions\n\n\ndef is_complete(board:list[list[int]])->bool:\n\"\"\" \\n     Check if the board (matrix) has been completely filled with non-zero values. \\n  \\n     >>> is_complete([[1]]) \\n     True \\n  \\n     >>> is_complete([[1, 2], [3, 0]]) \\n     False \\n     \"\"\"\n\nreturn not any(elem==0for row in board for elem in row)\n\n\ndef open_knight_tour_helper(\nboard:list[list[int]],pos:tuple[int,int],curr:int\n)->bool:\n\"\"\" \\n     Helper function to solve knight tour problem. \\n     \"\"\"\n\nif is_complete(board):\nreturn True\n\nfor position in get_valid_pos(pos,len(board)):\ny,x=position\n\nif board[y][x]==0:\nboard[y][x]=curr+1\nif open_knight_tour_helper(board,position,curr+1):\nreturn True\nboard[y][x]=0\n\nreturn False\n\n\ndef open_knight_tour(n:int)->list[list[int]]:\n\"\"\" \\n     Find the solution for the knight tour problem for a board of size n. Raises \\n     ValueError if the tour cannot be performed for the given size. \\n  \\n     >>> open_knight_tour(1) \\n     [[1]] \\n  \\n     >>> open_knight_tour(2) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Open Knight Tour cannot be performed on a board of size 2 \\n     \"\"\"\n\nboard=[[0for i in range(n)]for j in range(n)]\n\nfor i in range(n):\nfor j in range(n):\nboard[i][j]=1\nif open_knight_tour_helper(board,(i,j),1):\nreturn board\nboard[i][j]=0\n\nmsg=f \"Open Knight Tour cannot be performed on a board of size {n}\"\nraise ValueError(msg)\n\n\nif __name__==\"__main__\":\nimport doctest"
}