{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        157
    ],
    "children": [
        {
            "type": "Literal",
            "name": "URL",
            "range": [
                1,
                15
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "https",
                    "range": [
                        1,
                        1
                    ],
                    "content": "https"
                },
                {
                    "type": "Literal",
                    "name": "www.tutorialspoint.com",
                    "range": [
                        5,
                        9
                    ],
                    "content": "www.tutorialspoint.com"
                },
                {
                    "type": "Literal",
                    "name": "/python3/bitwise_operators_example.htm",
                    "range": [
                        10,
                        15
                    ],
                    "content": "/python3/bitwise_operators_example.htm"
                }
            ],
            "content": "https://www.tutorialspoint.com/python3/bitwise_operators_example.htm"
        },
        {
            "type": "FunctionDecl",
            "name": "binary_xor",
            "range": [
                19,
                157
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        21,
                        29
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "a",
                            "range": [
                                22,
                                24
                            ],
                            "children": [],
                            "content": "a:int"
                        },
                        {
                            "type": "Parameter",
                            "name": "b",
                            "range": [
                                26,
                                28
                            ],
                            "children": [],
                            "content": "b:int"
                        }
                    ],
                    "content": "(a:int,b:int)"
                },
                {
                    "type": "ReturnType",
                    "name": "str",
                    "range": [
                        30,
                        32
                    ],
                    "children": [],
                    "content": "->str"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        34,
                        157
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                35,
                                41
                            ],
                            "children": [],
                            "content": "\"\"\" \\n     Take in 2 integers, convert them to binary, \\n     return a binary number that is the \\n     result of a binary xor operation on the integers provided. \\n  \\n     >>> binary_xor(25, 32) \\n     '0b111001' \\n     >>> binary_xor(37, 50) \\n     '0b010111' \\n     >>> binary_xor(21, 30) \\n     '0b01011' \\n     >>> binary_xor(58, 73) \\n     '0b1110011' \\n     >>> binary_xor(0, 255) \\n     '0b11111111' \\n     >>> binary_xor(256, 256) \\n     '0b000000000' \\n     >>> binary_xor(0, -1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of both inputs must be positive \\n     >>> binary_xor(0, 1.1) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: 'float' object cannot be interpreted as an integer \\n     >>> binary_xor(\"0\", \"1\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                43,
                                58
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        44,
                                        50
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "<",
                                            "range": [
                                                45,
                                                46
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "a",
                                                    "range": [
                                                        44,
                                                        44
                                                    ],
                                                    "children": [],
                                                    "content": "a"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "0",
                                                    "range": [
                                                        46,
                                                        46
                                                    ],
                                                    "children": [],
                                                    "content": "0"
                                                }
                                            ],
                                            "content": "<0"
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "<",
                                            "range": [
                                                49,
                                                50
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "b",
                                                    "range": [
                                                        48,
                                                        48
                                                    ],
                                                    "children": [],
                                                    "content": "b"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "0",
                                                    "range": [
                                                        50,
                                                        50
                                                    ],
                                                    "children": [],
                                                    "content": "0"
                                                }
                                            ],
                                            "content": "<0"
                                        }
                                    ],
                                    "content": "a<0or b<0"
                                },
                                {
                                    "type": "Block",
                                    "name": "block",
                                    "range": [
                                        52,
                                        58
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                53,
                                                57
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "ValueError",
                                                    "range": [
                                                        54,
                                                        57
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"the value of both inputs must be positive\"",
                                                            "range": [
                                                                56,
                                                                56
                                                            ],
                                                            "children": [],
                                                            "content": "\"the value of both inputs must be positive\""
                                                        }
                                                    ],
                                                    "content": "ValueError(\"the value of both inputs must be positive\")"
                                                }
                                            ],
                                            "content": "raise ValueError(\"the value of both inputs must be positive\")"
                                        }
                                    ],
                                    "content": "\nraise ValueError(\"the value of both inputs must be positive\")\n"
                                }
                            ],
                            "content": "if a<0or b<0:\nraise ValueError(\"the value of both inputs must be positive\")\n"
                        },
                        {
                            "type": "Assignment",
                            "name": "a_binary",
                            "range": [
                                60,
                                78
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "str",
                                    "range": [
                                        62,
                                        68
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "bin",
                                            "range": [
                                                64,
                                                67
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "a",
                                                    "range": [
                                                        66,
                                                        66
                                                    ],
                                                    "children": [],
                                                    "content": "a"
                                                }
                                            ],
                                            "content": "bin(a)"
                                        }
                                    ],
                                    "content": "str(bin(a))"
                                },
                                {
                                    "type": "SliceExpression",
                                    "name": "slice",
                                    "range": [
                                        69,
                                        72
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "2",
                                            "range": [
                                                70,
                                                70
                                            ],
                                            "children": [],
                                            "content": "2"
                                        }
                                    ],
                                    "content": "[2:]"
                                }
                            ],
                            "content": "a_binary=str(bin(a))[2:]#remove the leading \"0b\"\n"
                        },
                        {
                            "type": "Assignment",
                            "name": "b_binary",
                            "range": [
                                79,
                                97
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "str",
                                    "range": [
                                        81,
                                        87
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "bin",
                                            "range": [
                                                83,
                                                86
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "b",
                                                    "range": [
                                                        85,
                                                        85
                                                    ],
                                                    "children": [],
                                                    "content": "b"
                                                }
                                            ],
                                            "content": "bin(b)"
                                        }
                                    ],
                                    "content": "str(bin(b))"
                                },
                                {
                                    "type": "SliceExpression",
                                    "name": "slice",
                                    "range": [
                                        88,
                                        91
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "2",
                                            "range": [
                                                89,
                                                89
                                            ],
                                            "children": [],
                                            "content": "2"
                                        }
                                    ],
                                    "content": "[2:]"
                                }
                            ],
                            "content": "b_binary=str(bin(b))[2:]#remove the leading \"0b\"\n"
                        },
                        {
                            "type": "Assignment",
                            "name": "max_len",
                            "range": [
                                99,
                                113
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "max",
                                    "range": [
                                        101,
                                        112
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "len",
                                            "range": [
                                                103,
                                                106
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "a_binary",
                                                    "range": [
                                                        105,
                                                        105
                                                    ],
                                                    "children": [],
                                                    "content": "a_binary"
                                                }
                                            ],
                                            "content": "len(a_binary)"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "len",
                                            "range": [
                                                108,
                                                111
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "b_binary",
                                                    "range": [
                                                        110,
                                                        110
                                                    ],
                                                    "children": [],
                                                    "content": "b_binary"
                                                }
                                            ],
                                            "content": "len(b_binary)"
                                        }
                                    ],
                                    "content": "max(len(a_binary),len(b_binary))"
                                }
                            ],
                            "content": "max_len=max(len(a_binary),len(b_binary))\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                115,
                                157
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "+",
                                    "range": [
                                        117,
                                        118
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"0b\"",
                                            "range": [
                                                116,
                                                116
                                            ],
                                            "children": [],
                                            "content": "\"0b\""
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "join",
                                            "range": [
                                                120,
                                                156
                                            ],
                                            "children": [
                                                {
                                                    "type": "GeneratorExpression",
                                                    "name": "generator",
                                                    "range": [
                                                        122,
                                                        155
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "str",
                                                            "range": [
                                                                123,
                                                                132
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "int",
                                                                    "range": [
                                                                        125,
                                                                        131
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "BinaryExpression",
                                                                            "name": "!=",
                                                                            "range": [
                                                                                128,
                                                                                129
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "char_a",
                                                                                    "range": [
                                                                                        127,
                                                                                        127
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "char_a"
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "char_b",
                                                                                    "range": [
                                                                                        130,
                                                                                        130
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "char_b"
                                                                                }
                                                                            ],
                                                                            "content": "!="
                                                                        }
                                                                    ],
                                                                    "content": "int(char_a!=char_b)"
                                                                }
                                                            ],
                                                            "content": "str(int(char_a!=char_b))"
                                                        },
                                                        {
                                                            "type": "ForStatement",
                                                            "name": "for",
                                                            "range": [
                                                                134,
                                                                154
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "VariableDeclaration",
                                                                    "name": "char_a",
                                                                    "range": [
                                                                        135,
                                                                        135
                                                                    ],
                                                                    "children": [],
                                                                    "content": "char_a"
                                                                },
                                                                {
                                                                    "type": "VariableDeclaration",
                                                                    "name": "char_b",
                                                                    "range": [
                                                                        137,
                                                                        137
                                                                    ],
                                                                    "children": [],
                                                                    "content": "char_b"
                                                                },
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "zip",
                                                                    "range": [
                                                                        139,
                                                                        153
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "zfill",
                                                                            "range": [
                                                                                143,
                                                                                146
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "a_binary",
                                                                                    "range": [
                                                                                        141,
                                                                                        141
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "a_binary"
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "max_len",
                                                                                    "range": [
                                                                                        145,
                                                                                        145
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "max_len"
                                                                                }
                                                                            ],
                                                                            "content": "zfill(max_len)"
                                                                        },
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "zfill",
                                                                            "range": [
                                                                                150,
                                                                                153
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "b_binary",
                                                                                    "range": [
                                                                                        148,
                                                                                        148
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "b_binary"
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "max_len",
                                                                                    "range": [
                                                                                        152,
                                                                                        152
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "max_len"
                                                                                }
                                                                            ],
                                                                            "content": "zfill(max_len)"
                                                                        }
                                                                    ],
                                                                    "content": "zip(a_binary.zfill(max_len),b_binary.zfill(max_len)"
                                                                }
                                                            ],
                                                            "content": "for char_a,char_b in zip(a_binary.zfill(max_len),b_binary.zfill(max_len))"
                                                        }
                                                    ],
                                                    "content": "\nstr(int(char_a!=char_b))\nfor char_a,char_b in zip(a_binary.zfill(max_len),b_binary.zfill(max_len))\n"
                                                }
                                            ],
                                            "content": "join(\nstr(int(char_a!=char_b))\nfor char_a,char_b in zip(a_binary.zfill(max_len),b_binary.zfill(max_len))\n)"
                                        }
                                    ],
                                    "content": "+\"\""
                                }
                            ],
                            "content": "return \"0b\"+\"\".join(\nstr(int(char_a!=char_b))\nfor char_a,char_b in zip(a_binary.zfill(max_len),b_binary.zfill(max_len))\n)\n"
                        }
                    ],
                    "content": "\n\"\"\" \\n     Take in 2 integers, convert them to binary, \\n     return a binary number that is the \\n     result of a binary xor operation on the integers provided. \\n  \\n     >>> binary_xor(25, 32) \\n     '0b111001' \\n     >>> binary_xor(37, 50) \\n     '0b010111' \\n     >>> binary_xor(21, 30) \\n     '0b01011' \\n     >>> binary_xor(58, 73) \\n     '0b1110011' \\n     >>> binary_xor(0, 255) \\n     '0b11111111' \\n     >>> binary_xor(256, 256) \\n     '0b000000000' \\n     >>> binary_xor(0, -1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of both inputs must be positive \\n     >>> binary_xor(0, 1.1) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: 'float' object cannot be interpreted as an integer \\n     >>> binary_xor(\"0\", \"1\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\"\nif a<0or b<0:\nraise ValueError(\"the value of both inputs must be positive\")\n\na_binary=str(bin(a))[2:]#remove the leading \"0b\"\nb_binary=str(bin(b))[2:]#remove the leading \"0b\"\n\nmax_len=max(len(a_binary),len(b_binary))\n\nreturn \"0b\"+\"\".join(\nstr(int(char_a!=char_b))\nfor char_a,char_b in zip(a_binary.zfill(max_len),b_binary.zfill(max_len))\n)\n"
                }
            ],
            "content": "def binary_xor(a:int,b:int)->str:\n\"\"\" \\n     Take in 2 integers, convert them to binary, \\n     return a binary number that is the \\n     result of a binary xor operation on the integers provided. \\n  \\n     >>> binary_xor(25, 32) \\n     '0b111001' \\n     >>> binary_xor(37, 50) \\n     '0b010111' \\n     >>> binary_xor(21, 30) \\n     '0b01011' \\n     >>> binary_xor(58, 73) \\n     '0b1110011' \\n     >>> binary_xor(0, 255) \\n     '0b11111111' \\n     >>> binary_xor(256, 256) \\n     '0b000000000' \\n     >>> binary_xor(0, -1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of both inputs must be positive \\n     >>> binary_xor(0, 1.1) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: 'float' object cannot be interpreted as an integer \\n     >>> binary_xor(\"0\", \"1\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\"\nif a<0or b<0:\nraise ValueError(\"the value of both inputs must be positive\")\n\na_binary=str(bin(a))[2:]#remove the leading \"0b\"\nb_binary=str(bin(b))[2:]#remove the leading \"0b\"\n\nmax_len=max(len(a_binary),len(b_binary))\n\nreturn \"0b\"+\"\".join(\nstr(int(char_a!=char_b))\nfor char_a,char_b in zip(a_binary.zfill(max_len),b_binary.zfill(max_len))\n)\n"
        }
    ],
    "content": "#https://www.tutorialspoint.com/python3/bitwise_operators_example.htm\n\n\ndef binary_xor(a:int,b:int)->str:\n\"\"\" \\n     Take in 2 integers, convert them to binary, \\n     return a binary number that is the \\n     result of a binary xor operation on the integers provided. \\n  \\n     >>> binary_xor(25, 32) \\n     '0b111001' \\n     >>> binary_xor(37, 50) \\n     '0b010111' \\n     >>> binary_xor(21, 30) \\n     '0b01011' \\n     >>> binary_xor(58, 73) \\n     '0b1110011' \\n     >>> binary_xor(0, 255) \\n     '0b11111111' \\n     >>> binary_xor(256, 256) \\n     '0b000000000' \\n     >>> binary_xor(0, -1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: the value of both inputs must be positive \\n     >>> binary_xor(0, 1.1) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: 'float' object cannot be interpreted as an integer \\n     >>> binary_xor(\"0\", \"1\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\"\nif a<0or b<0:\nraise ValueError(\"the value of both inputs must be positive\")\n\na_binary=str(bin(a))[2:]#remove the leading \"0b\"\nb_binary=str(bin(b))[2:]#remove the leading \"0b\"\n\nmax_len=max(len(a_binary),len(b_binary))\n\nreturn \"0b\"+\"\".join(\nstr(int(char_a!=char_b))\nfor char_a,char_b in zip(a_binary.zfill(max_len),b_binary.zfill(max_len))\n)\n"
}