{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        468
    ],
    "children": [
        {
            "type": "ImportFromStatement",
            "name": "annotations",
            "range": [
                0,
                3
            ],
            "children": [
                {
                    "type": "Module",
                    "name": "__future__",
                    "range": [
                        1,
                        1
                    ],
                    "children": [],
                    "content": "__future__"
                }
            ],
            "content": "from __future__ import annotations"
        },
        {
            "type": "ClassDecl",
            "name": "IIRFilter",
            "range": [
                7,
                15
            ],
            "children": [
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        11,
                        14
                    ],
                    "children": [
                        {
                            "type": "Text",
                            "name": "",
                            "range": [
                                12,
                                13
                            ],
                            "children": [],
                            "content": "\"\"\" \\n     N-Order IIR filter \\n     Assumes working with float samples normalized on [-1, 1] \\n  \\n     --- \\n  \\n     Implementation details: \\n     Based on the 2nd-order function from \\n     https://en.wikipedia.org/wiki/Digital_biquad_filter, \\n     this generalized N-order function was made. \\n  \\n     Using the following transfer function \\n         .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}} \\n                   {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}} \\n  \\n     we can rewrite this to \\n         .. math:: y[n]={\\frac{1}{a_{0}}} \\n                   \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)- \\n                   \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right) \\n     \""
                        }
                    ],
                    "content": "r\"\"\" \\n     N-Order IIR filter \\n     Assumes working with float samples normalized on [-1, 1] \\n  \\n     --- \\n  \\n     Implementation details: \\n     Based on the 2nd-order function from \\n     https://en.wikipedia.org/wiki/Digital_biquad_filter, \\n     this generalized N-order function was made. \\n  \\n     Using the following transfer function \\n         .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}} \\n                   {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}} \\n  \\n     we can rewrite this to \\n         .. math:: y[n]={\\frac{1}{a_{0}}} \\n                   \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)- \\n                   \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right) \\n     \"\"\""
                }
            ],
            "content": "class IIRFilter:\nr\"\"\" \\n     N-Order IIR filter \\n     Assumes working with float samples normalized on [-1, 1] \\n  \\n     --- \\n  \\n     Implementation details: \\n     Based on the 2nd-order function from \\n     https://en.wikipedia.org/wiki/Digital_biquad_filter, \\n     this generalized N-order function was made. \\n  \\n     Using the following transfer function \\n         .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}} \\n                   {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}} \\n  \\n     we can rewrite this to \\n         .. math:: y[n]={\\frac{1}{a_{0}}} \\n                   \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)- \\n                   \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right) \\n     \"\"\"\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                16,
                161
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        18,
                        24
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                19,
                                19
                            ],
                            "children": [],
                            "content": "("
                        },
                        {
                            "type": "Parameter",
                            "name": "order",
                            "range": [
                                21,
                                23
                            ],
                            "children": [],
                            "content": ",order:"
                        }
                    ],
                    "content": "__init__(self,order:int"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        25,
                        27
                    ],
                    "children": [],
                    "content": ")->"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        28,
                        161
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "self.order",
                            "range": [
                                30,
                                34
                            ],
                            "children": [],
                            "content": "\nself.order="
                        },
                        {
                            "type": "Comment",
                            "name": "# a_ {0} ... a_ {k}",
                            "range": [
                                37,
                                49
                            ],
                            "children": [],
                            "content": "\n#a_{0}...a_{k}"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.a_coeffs",
                            "range": [
                                50,
                                66
                            ],
                            "children": [],
                            "content": "\nself.a_coeffs=[1.0]+[0.0]*"
                        },
                        {
                            "type": "Comment",
                            "name": "# b_ {0} ... b_ {k}",
                            "range": [
                                68,
                                80
                            ],
                            "children": [],
                            "content": "\n#b_{0}...b_{k}"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.b_coeffs",
                            "range": [
                                81,
                                97
                            ],
                            "children": [],
                            "content": "\nself.b_coeffs=[1.0]+[0.0]*"
                        },
                        {
                            "type": "Comment",
                            "name": "# x [n - 1] ... x [n - k]",
                            "range": [
                                100,
                                116
                            ],
                            "children": [],
                            "content": "\n#x[n-1]...x[n-k]"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.input_history",
                            "range": [
                                117,
                                130
                            ],
                            "children": [],
                            "content": "\nself.input_history=[0.0]*self.order"
                        },
                        {
                            "type": "Comment",
                            "name": "# y [n - 1] ... y [n - k]",
                            "range": [
                                131,
                                147
                            ],
                            "children": [],
                            "content": "\n#y[n-1]...y[n-k]"
                        },
                        {
                            "type": "Assignment",
                            "name": "self.output_history",
                            "range": [
                                148,
                                161
                            ],
                            "children": [],
                            "content": "\nself.output_history=[0.0]*self.order"
                        }
                    ],
                    "content": "None:\nself.order=order\n\n#a_{0}...a_{k}\nself.a_coeffs=[1.0]+[0.0]*order\n#b_{0}...b_{k}\nself.b_coeffs=[1.0]+[0.0]*order\n\n#x[n-1]...x[n-k]\nself.input_history=[0.0]*self.order\n#y[n-1]...y[n-k]\nself.output_history=[0.0]*self.order"
                }
            ],
            "content": "\ndef __init__(self,order:int)->None:\nself.order=order\n\n#a_{0}...a_{k}\nself.a_coeffs=[1.0]+[0.0]*order\n#b_{0}...b_{k}\nself.b_coeffs=[1.0]+[0.0]*order\n\n#x[n-1]...x[n-k]\nself.input_history=[0.0]*self.order\n#y[n-1]...y[n-k]\nself.output_history=[0.0]*self.order"
        },
        {
            "type": "FunctionDecl",
            "name": "set_coefficients",
            "range": [
                163,
                185
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        165,
                        181
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                166,
                                166
                            ],
                            "children": [],
                            "content": "("
                        },
                        {
                            "type": "Parameter",
                            "name": "a_coeffs",
                            "range": [
                                168,
                                173
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "list[float]",
                                    "range": [
                                        169,
                                        173
                                    ],
                                    "children": [],
                                    "content": "a_coeffs:list[float"
                                }
                            ],
                            "content": ",a_coeffs:list[float"
                        },
                        {
                            "type": "Parameter",
                            "name": "b_coeffs",
                            "range": [
                                175,
                                180
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "list[float]",
                                    "range": [
                                        176,
                                        180
                                    ],
                                    "children": [],
                                    "content": "b_coeffs:list[float"
                                }
                            ],
                            "content": ",b_coeffs:list[float"
                        }
                    ],
                    "content": "set_coefficients(self,a_coeffs:list[float],b_coeffs:list[float]"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        182,
                        184
                    ],
                    "children": [],
                    "content": ")->"
                }
            ],
            "content": "\ndef set_coefficients(self,a_coeffs:list[float],b_coeffs:list[float])->None"
        },
        {
            "type": "Docstring",
            "name": "",
            "range": [
                187,
                189
            ],
            "children": [],
            "content": "\n\"\"\" \\n         Set the coefficients for the IIR filter. \\n         These should both be of size `order` + 1. \\n         :math:`a_0` may be left out, and it will use 1.0 as default value. \\n  \\n         This method works well with scipy's filter design functions \\n  \\n         >>> # Make a 2nd-order 1000Hz butterworth lowpass filter \\n         >>> import scipy.signal \\n         >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000, \\n         ...                                          btype='lowpass', \\n         ...                                          fs=48000) \\n         >>> filt = IIRFilter(2) \\n         >>> filt.set_coefficients(a_coeffs, b_coeffs) \\n         \""
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                191,
                212
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "",
                    "range": [
                        192,
                        200
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "len",
                            "range": [
                                192,
                                195
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "a_coeffs",
                                    "range": [
                                        194,
                                        194
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "if len(a_coeffs"
                        },
                        {
                            "type": "BinaryExpression",
                            "name": "<",
                            "range": [
                                196,
                                196
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "self.order",
                                    "range": [
                                        197,
                                        199
                                    ],
                                    "children": [],
                                    "content": "<self."
                                }
                            ],
                            "content": ")"
                        }
                    ],
                    "content": "if len(a_coeffs)<self.order"
                },
                {
                    "type": "Body",
                    "name": "",
                    "range": [
                        202,
                        211
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "a_coeffs",
                            "range": [
                                202,
                                211
                            ],
                            "children": [
                                {
                                    "type": "List",
                                    "name": "",
                                    "range": [
                                        204,
                                        211
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "1.0",
                                            "range": [
                                                205,
                                                207
                                            ],
                                            "children": [],
                                            "content": "[1."
                                        },
                                        {
                                            "type": "Unpack",
                                            "name": "*a_coeffs",
                                            "range": [
                                                209,
                                                210
                                            ],
                                            "children": [],
                                            "content": ",*"
                                        }
                                    ],
                                    "content": "=[1.0,*a_coeffs"
                                }
                            ],
                            "content": "\na_coeffs=[1.0,*a_coeffs"
                        }
                    ],
                    "content": "\na_coeffs=[1.0,*a_coeffs"
                }
            ],
            "content": "\nif len(a_coeffs)<self.order:\na_coeffs=[1.0,*a_coeffs]"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                214,
                245
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "",
                    "range": [
                        215,
                        226
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "len",
                            "range": [
                                215,
                                218
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "a_coeffs",
                                    "range": [
                                        217,
                                        217
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "if len(a_coeffs"
                        },
                        {
                            "type": "BinaryExpression",
                            "name": "!=",
                            "range": [
                                219,
                                220
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "+",
                                    "range": [
                                        221,
                                        225
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "self.order",
                                            "range": [
                                                221,
                                                223
                                            ],
                                            "children": [],
                                            "content": "=self."
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "1",
                                            "range": [
                                                225,
                                                225
                                            ],
                                            "children": [],
                                            "content": "+"
                                        }
                                    ],
                                    "content": "=self.order+"
                                }
                            ],
                            "content": ")!"
                        }
                    ],
                    "content": "if len(a_coeffs)!=self.order+1"
                },
                {
                    "type": "Body",
                    "name": "",
                    "range": [
                        228,
                        244
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "msg",
                            "range": [
                                228,
                                238
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        230,
                                        237
                                    ],
                                    "children": [],
                                    "content": "=(\nf \"Expected a_coeffs to have {self.order + 1} elements \"\nf \"for {self.order}-order filter, got {len(a_coeffs)}\""
                                }
                            ],
                            "content": "\nmsg=(\nf \"Expected a_coeffs to have {self.order + 1} elements \"\nf \"for {self.order}-order filter, got {len(a_coeffs)}\"\n"
                        },
                        {
                            "type": "Raise",
                            "name": "ValueError",
                            "range": [
                                240,
                                244
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "msg",
                                    "range": [
                                        243,
                                        243
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "\nraise ValueError(msg"
                        }
                    ],
                    "content": "\nmsg=(\nf \"Expected a_coeffs to have {self.order + 1} elements \"\nf \"for {self.order}-order filter, got {len(a_coeffs)}\"\n)\nraise ValueError(msg"
                }
            ],
            "content": "\nif len(a_coeffs)!=self.order+1:\nmsg=(\nf \"Expected a_coeffs to have {self.order + 1} elements \"\nf \"for {self.order}-order filter, got {len(a_coeffs)}\"\n)\nraise ValueError(msg)"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                247,
                278
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "",
                    "range": [
                        248,
                        259
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "len",
                            "range": [
                                248,
                                251
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "b_coeffs",
                                    "range": [
                                        250,
                                        250
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "if len(b_coeffs"
                        },
                        {
                            "type": "BinaryExpression",
                            "name": "!=",
                            "range": [
                                252,
                                253
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "+",
                                    "range": [
                                        254,
                                        258
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "self.order",
                                            "range": [
                                                254,
                                                256
                                            ],
                                            "children": [],
                                            "content": "=self."
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "1",
                                            "range": [
                                                258,
                                                258
                                            ],
                                            "children": [],
                                            "content": "+"
                                        }
                                    ],
                                    "content": "=self.order+"
                                }
                            ],
                            "content": ")!"
                        }
                    ],
                    "content": "if len(b_coeffs)!=self.order+1"
                },
                {
                    "type": "Body",
                    "name": "",
                    "range": [
                        261,
                        277
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "msg",
                            "range": [
                                261,
                                271
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        263,
                                        270
                                    ],
                                    "children": [],
                                    "content": "=(\nf \"Expected b_coeffs to have {self.order + 1} elements \"\nf \"for {self.order}-order filter, got {len(a_coeffs)}\""
                                }
                            ],
                            "content": "\nmsg=(\nf \"Expected b_coeffs to have {self.order + 1} elements \"\nf \"for {self.order}-order filter, got {len(a_coeffs)}\"\n"
                        },
                        {
                            "type": "Raise",
                            "name": "ValueError",
                            "range": [
                                273,
                                277
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "msg",
                                    "range": [
                                        276,
                                        276
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "\nraise ValueError(msg"
                        }
                    ],
                    "content": "\nmsg=(\nf \"Expected b_coeffs to have {self.order + 1} elements \"\nf \"for {self.order}-order filter, got {len(a_coeffs)}\"\n)\nraise ValueError(msg"
                }
            ],
            "content": "\nif len(b_coeffs)!=self.order+1:\nmsg=(\nf \"Expected b_coeffs to have {self.order + 1} elements \"\nf \"for {self.order}-order filter, got {len(a_coeffs)}\"\n)\nraise ValueError(msg)"
        },
        {
            "type": "Assignment",
            "name": "self.a_coeffs",
            "range": [
                280,
                285
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "a_coeffs",
                    "range": [
                        284,
                        284
                    ],
                    "children": [],
                    "content": "="
                }
            ],
            "content": "\nself.a_coeffs=a_coeffs"
        },
        {
            "type": "Assignment",
            "name": "self.b_coeffs",
            "range": [
                286,
                291
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "b_coeffs",
                    "range": [
                        290,
                        290
                    ],
                    "children": [],
                    "content": "="
                }
            ],
            "content": "\nself.b_coeffs=b_coeffs"
        },
        {
            "type": "FunctionDecl",
            "name": "process",
            "range": [
                293,
                467
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "process",
                    "range": [
                        293,
                        305
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                293,
                                293
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "process",
                            "range": [
                                294,
                                294
                            ],
                            "children": [],
                            "content": "def"
                        },
                        {
                            "type": "ParameterList",
                            "name": "parameters",
                            "range": [
                                295,
                                301
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "self",
                                    "range": [
                                        296,
                                        296
                                    ],
                                    "children": [],
                                    "content": "("
                                },
                                {
                                    "type": "Parameter",
                                    "name": "sample",
                                    "range": [
                                        298,
                                        298
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "float",
                                            "range": [
                                                300,
                                                300
                                            ],
                                            "children": [],
                                            "content": ":"
                                        }
                                    ],
                                    "content": ","
                                }
                            ],
                            "content": "process(self,sample:float"
                        },
                        {
                            "type": "ReturnType",
                            "name": "float",
                            "range": [
                                304,
                                304
                            ],
                            "children": [],
                            "content": ">"
                        }
                    ],
                    "content": "\ndef process(self,sample:float)->float"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        306,
                        467
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                307,
                                309
                            ],
                            "children": [],
                            "content": "\n\"\"\" \\n         Calculate :math:`y[n]` \\n  \\n         >>> filt = IIRFilter(2) \\n         >>> filt.process(0) \\n         0.0 \\n         \""
                        },
                        {
                            "type": "VariableDecl",
                            "name": "result",
                            "range": [
                                311,
                                316
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        312,
                                        312
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "0.0",
                                            "range": [
                                                313,
                                                315
                                            ],
                                            "children": [],
                                            "content": "=0."
                                        }
                                    ],
                                    "content": "result"
                                }
                            ],
                            "content": "\nresult=0.0"
                        },
                        {
                            "type": "Comment",
                            "name": "comment",
                            "range": [
                                318,
                                331
                            ],
                            "children": [],
                            "content": "\n#Start at index1and do index0at the end."
                        },
                        {
                            "type": "ForStatement",
                            "name": "for",
                            "range": [
                                332,
                                386
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "i",
                                    "range": [
                                        333,
                                        333
                                    ],
                                    "children": [],
                                    "content": "for"
                                },
                                {
                                    "type": "RangeExpression",
                                    "name": "range",
                                    "range": [
                                        335,
                                        344
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "1",
                                            "range": [
                                                337,
                                                337
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "self.order",
                                            "range": [
                                                339,
                                                341
                                            ],
                                            "children": [],
                                            "content": ",self."
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "+",
                                            "range": [
                                                342,
                                                342
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "1",
                                                    "range": [
                                                        343,
                                                        343
                                                    ],
                                                    "children": [],
                                                    "content": "+"
                                                }
                                            ],
                                            "content": "order"
                                        }
                                    ],
                                    "content": "in range(1,self.order+1"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "block",
                                    "range": [
                                        345,
                                        386
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "+=",
                                            "range": [
                                                348,
                                                349
                                            ],
                                            "children": [
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "*",
                                                    "range": [
                                                        358,
                                                        358
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "self.b_coeffs[i]",
                                                            "range": [
                                                                352,
                                                                357
                                                            ],
                                                            "children": [],
                                                            "content": "\nself.b_coeffs[i"
                                                        },
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "self.input_history[i - 1]",
                                                            "range": [
                                                                359,
                                                                366
                                                            ],
                                                            "children": [],
                                                            "content": "*self.input_history[i-1"
                                                        }
                                                    ],
                                                    "content": "]"
                                                },
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "*",
                                                    "range": [
                                                        375,
                                                        375
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "self.a_coeffs[i]",
                                                            "range": [
                                                                371,
                                                                374
                                                            ],
                                                            "children": [],
                                                            "content": ".a_coeffs[i"
                                                        },
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "self.output_history[i - 1]",
                                                            "range": [
                                                                376,
                                                                383
                                                            ],
                                                            "children": [],
                                                            "content": "*self.output_history[i-1"
                                                        }
                                                    ],
                                                    "content": "]"
                                                }
                                            ],
                                            "content": "result+"
                                        }
                                    ],
                                    "content": "):\nresult+=(\nself.b_coeffs[i]*self.input_history[i-1]\n-self.a_coeffs[i]*self.output_history[i-1]\n)"
                                }
                            ],
                            "content": "\nfor i in range(1,self.order+1):\nresult+=(\nself.b_coeffs[i]*self.input_history[i-1]\n-self.a_coeffs[i]*self.output_history[i-1]\n)"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                389,
                                389
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "+",
                                    "range": [
                                        392,
                                        392
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "result",
                                            "range": [
                                                391,
                                                391
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "*",
                                            "range": [
                                                399,
                                                399
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "self.b_coeffs[0]",
                                                    "range": [
                                                        395,
                                                        398
                                                    ],
                                                    "children": [],
                                                    "content": ".b_coeffs[0"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "sample",
                                                    "range": [
                                                        400,
                                                        400
                                                    ],
                                                    "children": [],
                                                    "content": "*"
                                                }
                                            ],
                                            "content": "]"
                                        }
                                    ],
                                    "content": "result"
                                },
                                {
                                    "type": "BinaryExpression",
                                    "name": "/",
                                    "range": [
                                        402,
                                        402
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "self.a_coeffs[0]",
                                            "range": [
                                                405,
                                                408
                                            ],
                                            "children": [],
                                            "content": ".a_coeffs[0"
                                        }
                                    ],
                                    "content": ")"
                                }
                            ],
                            "content": "result"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                418,
                                418
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "self.input_history[1:]",
                                    "range": [
                                        413,
                                        417
                                    ],
                                    "children": [],
                                    "content": ".input_history[1:"
                                },
                                {
                                    "type": "MemberExpression",
                                    "name": "self.input_history[:-1]",
                                    "range": [
                                        419,
                                        426
                                    ],
                                    "children": [],
                                    "content": "=self.input_history[:-1"
                                }
                            ],
                            "content": "]"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                435,
                                435
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "self.output_history[1:]",
                                    "range": [
                                        430,
                                        434
                                    ],
                                    "children": [],
                                    "content": ".output_history[1:"
                                },
                                {
                                    "type": "MemberExpression",
                                    "name": "self.output_history[:-1]",
                                    "range": [
                                        436,
                                        443
                                    ],
                                    "children": [],
                                    "content": "=self.output_history[:-1"
                                }
                            ],
                            "content": "]"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                452,
                                452
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "self.input_history[0]",
                                    "range": [
                                        448,
                                        451
                                    ],
                                    "children": [],
                                    "content": ".input_history[0"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "sample",
                                    "range": [
                                        453,
                                        453
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": "]"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                461,
                                461
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "self.output_history[0]",
                                    "range": [
                                        457,
                                        460
                                    ],
                                    "children": [],
                                    "content": ".output_history[0"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "result",
                                    "range": [
                                        462,
                                        462
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": "]"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                465,
                                466
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "result",
                                    "range": [
                                        466,
                                        466
                                    ],
                                    "children": [],
                                    "content": "return"
                                }
                            ],
                            "content": "\nreturn"
                        }
                    ],
                    "content": ":\n\"\"\" \\n         Calculate :math:`y[n]` \\n  \\n         >>> filt = IIRFilter(2) \\n         >>> filt.process(0) \\n         0.0 \\n         \"\"\"\nresult=0.0\n\n#Start at index1and do index0at the end.\nfor i in range(1,self.order+1):\nresult+=(\nself.b_coeffs[i]*self.input_history[i-1]\n-self.a_coeffs[i]*self.output_history[i-1]\n)\n\nresult=(result+self.b_coeffs[0]*sample)/self.a_coeffs[0]\n\nself.input_history[1:]=self.input_history[:-1]\nself.output_history[1:]=self.output_history[:-1]\n\nself.input_history[0]=sample\nself.output_history[0]=result\n\nreturn result"
                }
            ],
            "content": "\ndef process(self,sample:float)->float:\n\"\"\" \\n         Calculate :math:`y[n]` \\n  \\n         >>> filt = IIRFilter(2) \\n         >>> filt.process(0) \\n         0.0 \\n         \"\"\"\nresult=0.0\n\n#Start at index1and do index0at the end.\nfor i in range(1,self.order+1):\nresult+=(\nself.b_coeffs[i]*self.input_history[i-1]\n-self.a_coeffs[i]*self.output_history[i-1]\n)\n\nresult=(result+self.b_coeffs[0]*sample)/self.a_coeffs[0]\n\nself.input_history[1:]=self.input_history[:-1]\nself.output_history[1:]=self.output_history[:-1]\n\nself.input_history[0]=sample\nself.output_history[0]=result\n\nreturn result"
        }
    ],
    "content": "from __future__ import annotations\n\n\nclass IIRFilter:\nr\"\"\" \\n     N-Order IIR filter \\n     Assumes working with float samples normalized on [-1, 1] \\n  \\n     --- \\n  \\n     Implementation details: \\n     Based on the 2nd-order function from \\n     https://en.wikipedia.org/wiki/Digital_biquad_filter, \\n     this generalized N-order function was made. \\n  \\n     Using the following transfer function \\n         .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}} \\n                   {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}} \\n  \\n     we can rewrite this to \\n         .. math:: y[n]={\\frac{1}{a_{0}}} \\n                   \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)- \\n                   \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right) \\n     \"\"\"\n\ndef __init__(self,order:int)->None:\nself.order=order\n\n#a_{0}...a_{k}\nself.a_coeffs=[1.0]+[0.0]*order\n#b_{0}...b_{k}\nself.b_coeffs=[1.0]+[0.0]*order\n\n#x[n-1]...x[n-k]\nself.input_history=[0.0]*self.order\n#y[n-1]...y[n-k]\nself.output_history=[0.0]*self.order\n\ndef set_coefficients(self,a_coeffs:list[float],b_coeffs:list[float])->None:\n\"\"\" \\n         Set the coefficients for the IIR filter. \\n         These should both be of size `order` + 1. \\n         :math:`a_0` may be left out, and it will use 1.0 as default value. \\n  \\n         This method works well with scipy's filter design functions \\n  \\n         >>> # Make a 2nd-order 1000Hz butterworth lowpass filter \\n         >>> import scipy.signal \\n         >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000, \\n         ...                                          btype='lowpass', \\n         ...                                          fs=48000) \\n         >>> filt = IIRFilter(2) \\n         >>> filt.set_coefficients(a_coeffs, b_coeffs) \\n         \"\"\"\nif len(a_coeffs)<self.order:\na_coeffs=[1.0,*a_coeffs]\n\nif len(a_coeffs)!=self.order+1:\nmsg=(\nf \"Expected a_coeffs to have {self.order + 1} elements \"\nf \"for {self.order}-order filter, got {len(a_coeffs)}\"\n)\nraise ValueError(msg)\n\nif len(b_coeffs)!=self.order+1:\nmsg=(\nf \"Expected b_coeffs to have {self.order + 1} elements \"\nf \"for {self.order}-order filter, got {len(a_coeffs)}\"\n)\nraise ValueError(msg)\n\nself.a_coeffs=a_coeffs\nself.b_coeffs=b_coeffs\n\ndef process(self,sample:float)->float:\n\"\"\" \\n         Calculate :math:`y[n]` \\n  \\n         >>> filt = IIRFilter(2) \\n         >>> filt.process(0) \\n         0.0 \\n         \"\"\"\nresult=0.0\n\n#Start at index1and do index0at the end.\nfor i in range(1,self.order+1):\nresult+=(\nself.b_coeffs[i]*self.input_history[i-1]\n-self.a_coeffs[i]*self.output_history[i-1]\n)\n\nresult=(result+self.b_coeffs[0]*sample)/self.a_coeffs[0]\n\nself.input_history[1:]=self.input_history[:-1]\nself.output_history[1:]=self.output_history[:-1]\n\nself.input_history[0]=sample\nself.output_history[0]=result\n\nreturn result\n"
}