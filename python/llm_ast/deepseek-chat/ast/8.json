{
    "type": "Program",
    "name": "Global",
    "range": [
        76,
        538
    ],
    "children": [
        {
            "type": "Decorator",
            "name": "@thread_cached",
            "range": [
                76,
                77
            ],
            "children": [],
            "content": "@thread_cached"
        },
        {
            "type": "FunctionDecl",
            "name": "get_executor_manager_client",
            "range": [
                79,
                107
            ],
            "children": [
                {
                    "type": "ImportFrom",
                    "name": "from backend.executor import ExecutionManager",
                    "range": [
                        85,
                        90
                    ],
                    "children": [],
                    "content": "from backend.executor import ExecutionManager"
                },
                {
                    "type": "ImportFrom",
                    "name": "from backend.util.service import get_service_client",
                    "range": [
                        92,
                        99
                    ],
                    "children": [],
                    "content": "from backend.util.service import get_service_client"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return get_service_client(ExecutionManager)",
                    "range": [
                        102,
                        106
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "get_service_client",
                            "range": [
                                103,
                                106
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "ExecutionManager",
                                    "range": [
                                        105,
                                        105
                                    ],
                                    "children": [],
                                    "content": "ExecutionManager"
                                }
                            ],
                            "content": "get_service_client(ExecutionManager)"
                        }
                    ],
                    "content": "return get_service_client(ExecutionManager)"
                }
            ],
            "content": "def get_executor_manager_client():\nfrom backend.executor import ExecutionManager\nfrom backend.util.service import get_service_client\n\nreturn get_service_client(ExecutionManager)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_event_bus",
            "range": [
                112,
                133
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "get_event_bus",
                    "range": [
                        112,
                        116
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                112,
                                115
                            ],
                            "children": [],
                            "content": "\ndef get_event_bus("
                        },
                        {
                            "type": "Identifier",
                            "name": "get_event_bus",
                            "range": [
                                113,
                                115
                            ],
                            "children": [],
                            "content": "def get_event_bus("
                        }
                    ],
                    "content": "\ndef get_event_bus()"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        117,
                        133
                    ],
                    "children": [
                        {
                            "type": "ImportStatement",
                            "name": "",
                            "range": [
                                118,
                                126
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "from",
                                    "range": [
                                        118,
                                        122
                                    ],
                                    "children": [],
                                    "content": "\nfrom backend.data"
                                },
                                {
                                    "type": "Literal",
                                    "name": "backend.data.execution",
                                    "range": [
                                        119,
                                        123
                                    ],
                                    "children": [],
                                    "content": "from backend.data."
                                },
                                {
                                    "type": "Keyword",
                                    "name": "import",
                                    "range": [
                                        124,
                                        130
                                    ],
                                    "children": [],
                                    "content": "execution import RedisExecutionEventBus\n\nreturn RedisExecutionEventBus"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "RedisExecutionEventBus",
                                    "range": [
                                        125,
                                        130
                                    ],
                                    "children": [],
                                    "content": "import RedisExecutionEventBus\n\nreturn RedisExecutionEventBus"
                                }
                            ],
                            "content": "\nfrom backend.data.execution import RedisExecutionEventBus"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                128,
                                132
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "return",
                                    "range": [
                                        128,
                                        134
                                    ],
                                    "children": [],
                                    "content": "\nreturn RedisExecutionEventBus()\n\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "RedisExecutionEventBus",
                                    "range": [
                                        129,
                                        132
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "RedisExecutionEventBus",
                                            "range": [
                                                129,
                                                132
                                            ],
                                            "children": [],
                                            "content": "return RedisExecutionEventBus()"
                                        }
                                    ],
                                    "content": "return RedisExecutionEventBus()"
                                }
                            ],
                            "content": "\nreturn RedisExecutionEventBus()"
                        }
                    ],
                    "content": ":\nfrom backend.data.execution import RedisExecutionEventBus\n\nreturn RedisExecutionEventBus()\n"
                }
            ],
            "content": "\ndef get_event_bus():\nfrom backend.data.execution import RedisExecutionEventBus\n\nreturn RedisExecutionEventBus()\n"
        },
        {
            "type": "ClassDecl",
            "name": "AgentExecutorBlock",
            "range": [
                134,
                140
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "Block",
                    "range": [
                        136,
                        138
                    ],
                    "children": [],
                    "content": "class AgentExecutorBlock("
                }
            ],
            "content": "\n\nclass AgentExecutorBlock(Block)"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                141,
                214
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BlockSchema",
                    "range": [
                        143,
                        145
                    ],
                    "children": [],
                    "content": "class Input("
                },
                {
                    "type": "FieldDecl",
                    "name": "user_id",
                    "range": [
                        148,
                        157
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                149,
                                150
                            ],
                            "children": [],
                            "content": "\nuser_id"
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                151,
                                152
                            ],
                            "children": [
                                {
                                    "type": "SchemaField",
                                    "name": "SchemaField",
                                    "range": [
                                        152,
                                        157
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                154,
                                                156
                                            ],
                                            "children": [],
                                            "content": "SchemaField(description"
                                        }
                                    ],
                                    "content": "str=SchemaField(description="
                                }
                            ],
                            "content": ":str"
                        }
                    ],
                    "content": ":\nuser_id:str=SchemaField(description="
                },
                {
                    "type": "FieldDecl",
                    "name": "graph_id",
                    "range": [
                        159,
                        168
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                160,
                                161
                            ],
                            "children": [],
                            "content": "\ngraph_id"
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                162,
                                163
                            ],
                            "children": [
                                {
                                    "type": "SchemaField",
                                    "name": "SchemaField",
                                    "range": [
                                        163,
                                        168
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                165,
                                                167
                                            ],
                                            "children": [],
                                            "content": "SchemaField(description"
                                        }
                                    ],
                                    "content": "str=SchemaField(description="
                                }
                            ],
                            "content": ":str"
                        }
                    ],
                    "content": ")\ngraph_id:str=SchemaField(description="
                },
                {
                    "type": "FieldDecl",
                    "name": "graph_version",
                    "range": [
                        170,
                        179
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                171,
                                172
                            ],
                            "children": [],
                            "content": "\ngraph_version"
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                173,
                                174
                            ],
                            "children": [
                                {
                                    "type": "SchemaField",
                                    "name": "SchemaField",
                                    "range": [
                                        174,
                                        179
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                176,
                                                178
                                            ],
                                            "children": [],
                                            "content": "SchemaField(description"
                                        }
                                    ],
                                    "content": "int=SchemaField(description="
                                }
                            ],
                            "content": ":int"
                        }
                    ],
                    "content": ")\ngraph_version:int=SchemaField(description="
                },
                {
                    "type": "FieldDecl",
                    "name": "data",
                    "range": [
                        182,
                        191
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "BlockInput",
                            "range": [
                                183,
                                184
                            ],
                            "children": [],
                            "content": "\ndata"
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                185,
                                186
                            ],
                            "children": [
                                {
                                    "type": "SchemaField",
                                    "name": "SchemaField",
                                    "range": [
                                        186,
                                        191
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                188,
                                                190
                                            ],
                                            "children": [],
                                            "content": "SchemaField(description"
                                        }
                                    ],
                                    "content": "BlockInput=SchemaField(description="
                                }
                            ],
                            "content": ":BlockInput"
                        }
                    ],
                    "content": "\n\ndata:BlockInput=SchemaField(description="
                },
                {
                    "type": "FieldDecl",
                    "name": "input_schema",
                    "range": [
                        193,
                        202
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "dict",
                            "range": [
                                194,
                                195
                            ],
                            "children": [],
                            "content": "\ninput_schema"
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                196,
                                197
                            ],
                            "children": [
                                {
                                    "type": "SchemaField",
                                    "name": "SchemaField",
                                    "range": [
                                        197,
                                        202
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                199,
                                                201
                                            ],
                                            "children": [],
                                            "content": "SchemaField(description"
                                        }
                                    ],
                                    "content": "dict=SchemaField(description="
                                }
                            ],
                            "content": ":dict"
                        }
                    ],
                    "content": ")\ninput_schema:dict=SchemaField(description="
                },
                {
                    "type": "FieldDecl",
                    "name": "output_schema",
                    "range": [
                        204,
                        213
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "dict",
                            "range": [
                                205,
                                206
                            ],
                            "children": [],
                            "content": "\noutput_schema"
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                207,
                                208
                            ],
                            "children": [
                                {
                                    "type": "SchemaField",
                                    "name": "SchemaField",
                                    "range": [
                                        208,
                                        213
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                210,
                                                212
                                            ],
                                            "children": [],
                                            "content": "SchemaField(description"
                                        }
                                    ],
                                    "content": "dict=SchemaField(description="
                                }
                            ],
                            "content": ":dict"
                        }
                    ],
                    "content": ")\noutput_schema:dict=SchemaField(description="
                }
            ],
            "content": ":\nclass Input(BlockSchema):\nuser_id:str=SchemaField(description=\"User ID\")\ngraph_id:str=SchemaField(description=\"Graph ID\")\ngraph_version:int=SchemaField(description=\"Graph Version\")\n\ndata:BlockInput=SchemaField(description=\"Input data for the graph\")\ninput_schema:dict=SchemaField(description=\"Input schema for the graph\")\noutput_schema:dict=SchemaField(description=\"Output schema for the graph\""
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                216,
                224
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BlockSchema",
                    "range": [
                        218,
                        220
                    ],
                    "children": [],
                    "content": "class Output("
                }
            ],
            "content": "\n\nclass Output(BlockSchema):\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                226,
                281
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        229,
                        230
                    ],
                    "children": [],
                    "content": "__init__("
                },
                {
                    "type": "SuperCall",
                    "name": "super",
                    "range": [
                        233,
                        280
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "id",
                            "range": [
                                240,
                                242
                            ],
                            "children": [],
                            "content": "(\nid"
                        },
                        {
                            "type": "Argument",
                            "name": "description",
                            "range": [
                                245,
                                247
                            ],
                            "children": [],
                            "content": ",\ndescription"
                        },
                        {
                            "type": "Argument",
                            "name": "input_schema",
                            "range": [
                                250,
                                255
                            ],
                            "children": [],
                            "content": ",\ninput_schema=AgentExecutorBlock."
                        },
                        {
                            "type": "Argument",
                            "name": "output_schema",
                            "range": [
                                257,
                                262
                            ],
                            "children": [],
                            "content": ",\noutput_schema=AgentExecutorBlock."
                        },
                        {
                            "type": "Argument",
                            "name": "block_type",
                            "range": [
                                264,
                                269
                            ],
                            "children": [],
                            "content": ",\nblock_type=BlockType."
                        },
                        {
                            "type": "Argument",
                            "name": "categories",
                            "range": [
                                271,
                                278
                            ],
                            "children": [],
                            "content": ",\ncategories={BlockCategory.AGENT"
                        }
                    ],
                    "content": ":\nsuper().__init__(\nid=\"e189baac-8c20-45a1-94a7-55177ea42565\",\ndescription=\"Executes an existing agent inside your agent\",\ninput_schema=AgentExecutorBlock.Input,\noutput_schema=AgentExecutorBlock.Output,\nblock_type=BlockType.AGENT,\ncategories={BlockCategory.AGENT},"
                }
            ],
            "content": "\n\ndef __init__(self):\nsuper().__init__(\nid=\"e189baac-8c20-45a1-94a7-55177ea42565\",\ndescription=\"Executes an existing agent inside your agent\",\ninput_schema=AgentExecutorBlock.Input,\noutput_schema=AgentExecutorBlock.Output,\nblock_type=BlockType.AGENT,\ncategories={BlockCategory.AGENT},\n"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                283,
                538
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        286,
                        287
                    ],
                    "children": [],
                    "content": "run("
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        288,
                        291
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Input",
                            "range": [
                                289,
                                290
                            ],
                            "children": [],
                            "content": ",input_data"
                        }
                    ],
                    "content": "self,input_data:"
                },
                {
                    "type": "Parameter",
                    "name": "kwargs",
                    "range": [
                        292,
                        295
                    ],
                    "children": [],
                    "content": "Input,**"
                },
                {
                    "type": "ReturnType",
                    "name": "BlockOutput",
                    "range": [
                        297,
                        298
                    ],
                    "children": [],
                    "content": ")-"
                },
                {
                    "type": "VariableDecl",
                    "name": "executor_manager",
                    "range": [
                        301,
                        306
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                302,
                                303
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "get_executor_manager_client",
                                    "range": [
                                        303,
                                        306
                                    ],
                                    "children": [],
                                    "content": "executor_manager=get_executor_manager_client("
                                }
                            ],
                            "content": "\nexecutor_manager"
                        }
                    ],
                    "content": ":\nexecutor_manager=get_executor_manager_client("
                },
                {
                    "type": "VariableDecl",
                    "name": "event_bus",
                    "range": [
                        307,
                        312
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                308,
                                309
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "get_event_bus",
                                    "range": [
                                        309,
                                        312
                                    ],
                                    "children": [],
                                    "content": "event_bus=get_event_bus("
                                }
                            ],
                            "content": "\nevent_bus"
                        }
                    ],
                    "content": ")\nevent_bus=get_event_bus("
                },
                {
                    "type": "VariableDecl",
                    "name": "graph_exec",
                    "range": [
                        314,
                        350
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                315,
                                316
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "add_execution",
                                    "range": [
                                        318,
                                        350
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "graph_id",
                                            "range": [
                                                321,
                                                326
                                            ],
                                            "children": [],
                                            "content": "(\ngraph_id=input_data."
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "graph_version",
                                            "range": [
                                                328,
                                                333
                                            ],
                                            "children": [],
                                            "content": ",\ngraph_version=input_data."
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "user_id",
                                            "range": [
                                                335,
                                                340
                                            ],
                                            "children": [],
                                            "content": ",\nuser_id=input_data."
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "data",
                                            "range": [
                                                342,
                                                347
                                            ],
                                            "children": [],
                                            "content": ",\ndata=input_data."
                                        }
                                    ],
                                    "content": "executor_manager.add_execution(\ngraph_id=input_data.graph_id,\ngraph_version=input_data.graph_version,\nuser_id=input_data.user_id,\ndata=input_data.data,\n"
                                }
                            ],
                            "content": "\ngraph_exec"
                        }
                    ],
                    "content": "\n\ngraph_exec=executor_manager.add_execution(\ngraph_id=input_data.graph_id,\ngraph_version=input_data.graph_version,\nuser_id=input_data.user_id,\ndata=input_data.data,\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "log_id",
                    "range": [
                        351,
                        355
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                352,
                                353
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "f",
                                    "range": [
                                        353,
                                        355
                                    ],
                                    "children": [],
                                    "content": "log_id=f"
                                }
                            ],
                            "content": "\nlog_id"
                        }
                    ],
                    "content": ")\nlog_id=f"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "logger.info",
                    "range": [
                        356,
                        363
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "info",
                            "range": [
                                358,
                                363
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "f",
                                    "range": [
                                        360,
                                        362
                                    ],
                                    "children": [],
                                    "content": "info(f"
                                }
                            ],
                            "content": "logger.info(f \"Starting execution of {log_id}\""
                        }
                    ],
                    "content": "\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\nlogger.info(f \"Starting execution of {log_id}\""
                },
                {
                    "type": "ForStatement",
                    "name": "for",
                    "range": [
                        365,
                        437
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "event",
                            "range": [
                                366,
                                367
                            ],
                            "children": [],
                            "content": "\nfor"
                        },
                        {
                            "type": "CallExpression",
                            "name": "listen",
                            "range": [
                                370,
                                385
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "graph_id",
                                    "range": [
                                        373,
                                        378
                                    ],
                                    "children": [],
                                    "content": "(\ngraph_id=graph_exec."
                                },
                                {
                                    "type": "Argument",
                                    "name": "graph_exec_id",
                                    "range": [
                                        379,
                                        384
                                    ],
                                    "children": [],
                                    "content": "graph_id,graph_exec_id=graph_exec."
                                }
                            ],
                            "content": "event_bus.listen(\ngraph_id=graph_exec.graph_id,graph_exec_id=graph_exec.graph_exec_id"
                        },
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                387,
                                437
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "logger.info",
                                    "range": [
                                        388,
                                        397
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "info",
                                            "range": [
                                                390,
                                                397
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "f",
                                                    "range": [
                                                        393,
                                                        395
                                                    ],
                                                    "children": [],
                                                    "content": "(\nf"
                                                }
                                            ],
                                            "content": "logger.info(\nf \"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n"
                                        }
                                    ],
                                    "content": ":\nlogger.info(\nf \"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "if",
                                    "range": [
                                        399,
                                        436
                                    ],
                                    "children": [
                                        {
                                            "type": "UnaryExpression",
                                            "name": "not",
                                            "range": [
                                                400,
                                                401
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "node_id",
                                                    "range": [
                                                        402,
                                                        404
                                                    ],
                                                    "children": [],
                                                    "content": "not event."
                                                }
                                            ],
                                            "content": "\nif"
                                        },
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                405,
                                                436
                                            ],
                                            "children": [
                                                {
                                                    "type": "IfStatement",
                                                    "name": "if",
                                                    "range": [
                                                        406,
                                                        431
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "BinaryExpression",
                                                            "name": "in",
                                                            "range": [
                                                                410,
                                                                411
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "status",
                                                                    "range": [
                                                                        408,
                                                                        410
                                                                    ],
                                                                    "children": [],
                                                                    "content": "if event."
                                                                },
                                                                {
                                                                    "type": "ArrayExpression",
                                                                    "name": "",
                                                                    "range": [
                                                                        411,
                                                                        419
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "name": "COMPLETED",
                                                                            "range": [
                                                                                412,
                                                                                414
                                                                            ],
                                                                            "children": [],
                                                                            "content": "in[ExecutionStatus"
                                                                        },
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "name": "FAILED",
                                                                            "range": [
                                                                                416,
                                                                                418
                                                                            ],
                                                                            "children": [],
                                                                            "content": "COMPLETED,ExecutionStatus"
                                                                        }
                                                                    ],
                                                                    "content": "status in[ExecutionStatus.COMPLETED,ExecutionStatus."
                                                                }
                                                            ],
                                                            "content": ".status"
                                                        },
                                                        {
                                                            "type": "BlockStatement",
                                                            "name": "",
                                                            "range": [
                                                                420,
                                                                431
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "name": "logger.info",
                                                                    "range": [
                                                                        422,
                                                                        429
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "info",
                                                                            "range": [
                                                                                424,
                                                                                429
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Argument",
                                                                                    "name": "f",
                                                                                    "range": [
                                                                                        426,
                                                                                        428
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "info(f"
                                                                                }
                                                                            ],
                                                                            "content": "logger.info(f \"Execution {log_id} ended with status {event.status}\""
                                                                        }
                                                                    ],
                                                                    "content": ":\nlogger.info(f \"Execution {log_id} ended with status {event.status}\""
                                                                },
                                                                {
                                                                    "type": "BreakStatement",
                                                                    "name": "break",
                                                                    "range": [
                                                                        430,
                                                                        431
                                                                    ],
                                                                    "children": [],
                                                                    "content": ")\n"
                                                                }
                                                            ],
                                                            "content": "FAILED]:\nlogger.info(f \"Execution {log_id} ended with status {event.status}\")\n"
                                                        }
                                                    ],
                                                    "content": ":\nif event.status in[ExecutionStatus.COMPLETED,ExecutionStatus.FAILED]:\nlogger.info(f \"Execution {log_id} ended with status {event.status}\")\n"
                                                },
                                                {
                                                    "type": "ContinueStatement",
                                                    "name": "continue",
                                                    "range": [
                                                        435,
                                                        436
                                                    ],
                                                    "children": [],
                                                    "content": ":\n"
                                                }
                                            ],
                                            "content": "node_id:\nif event.status in[ExecutionStatus.COMPLETED,ExecutionStatus.FAILED]:\nlogger.info(f \"Execution {log_id} ended with status {event.status}\")\nbreak\nelse:\n"
                                        }
                                    ],
                                    "content": "\n\nif not event.node_id:\nif event.status in[ExecutionStatus.COMPLETED,ExecutionStatus.FAILED]:\nlogger.info(f \"Execution {log_id} ended with status {event.status}\")\nbreak\nelse:\n"
                                }
                            ],
                            "content": "):\nlogger.info(\nf \"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n)\n\nif not event.node_id:\nif event.status in[ExecutionStatus.COMPLETED,ExecutionStatus.FAILED]:\nlogger.info(f \"Execution {log_id} ended with status {event.status}\")\nbreak\nelse:\ncontinue"
                        }
                    ],
                    "content": "\n\nfor event in event_bus.listen(\ngraph_id=graph_exec.graph_id,graph_exec_id=graph_exec.graph_exec_id\n):\nlogger.info(\nf \"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n)\n\nif not event.node_id:\nif event.status in[ExecutionStatus.COMPLETED,ExecutionStatus.FAILED]:\nlogger.info(f \"Execution {log_id} ended with status {event.status}\")\nbreak\nelse:\ncontinue"
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        438,
                        454
                    ],
                    "children": [
                        {
                            "type": "UnaryExpression",
                            "name": "not",
                            "range": [
                                439,
                                440
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "block_id",
                                    "range": [
                                        441,
                                        443
                                    ],
                                    "children": [],
                                    "content": "not event."
                                }
                            ],
                            "content": "\nif"
                        },
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                444,
                                454
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "logger.warning",
                                    "range": [
                                        445,
                                        452
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "warning",
                                            "range": [
                                                447,
                                                452
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "f",
                                                    "range": [
                                                        449,
                                                        451
                                                    ],
                                                    "children": [],
                                                    "content": "warning(f"
                                                }
                                            ],
                                            "content": "logger.warning(f \"{log_id} received event without block_id {event}\""
                                        }
                                    ],
                                    "content": ":\nlogger.warning(f \"{log_id} received event without block_id {event}\""
                                },
                                {
                                    "type": "ContinueStatement",
                                    "name": "continue",
                                    "range": [
                                        453,
                                        454
                                    ],
                                    "children": [],
                                    "content": ")\n"
                                }
                            ],
                            "content": "block_id:\nlogger.warning(f \"{log_id} received event without block_id {event}\")\n"
                        }
                    ],
                    "content": "\n\nif not event.block_id:\nlogger.warning(f \"{log_id} received event without block_id {event}\")\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "block",
                    "range": [
                        456,
                        464
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                457,
                                458
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "get_block",
                                    "range": [
                                        458,
                                        464
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "event.block_id",
                                            "range": [
                                                460,
                                                463
                                            ],
                                            "children": [],
                                            "content": "get_block(event."
                                        }
                                    ],
                                    "content": "block=get_block(event.block_id"
                                }
                            ],
                            "content": "\nblock"
                        }
                    ],
                    "content": "\n\nblock=get_block(event.block_id"
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        465,
                        480
                    ],
                    "children": [
                        {
                            "type": "LogicalExpression",
                            "name": "or",
                            "range": [
                                466,
                                467
                            ],
                            "children": [
                                {
                                    "type": "UnaryExpression",
                                    "name": "not",
                                    "range": [
                                        466,
                                        467
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "block",
                                            "range": [
                                                466,
                                                467
                                            ],
                                            "children": [],
                                            "content": "\nif"
                                        }
                                    ],
                                    "content": "\nif"
                                },
                                {
                                    "type": "BinaryExpression",
                                    "name": "!=",
                                    "range": [
                                        472,
                                        473
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "block_type",
                                            "range": [
                                                470,
                                                472
                                            ],
                                            "children": [],
                                            "content": "or block."
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "OUTPUT",
                                            "range": [
                                                474,
                                                476
                                            ],
                                            "children": [],
                                            "content": "!=BlockType"
                                        }
                                    ],
                                    "content": ".block_type"
                                }
                            ],
                            "content": "\nif"
                        },
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                477,
                                480
                            ],
                            "children": [
                                {
                                    "type": "ContinueStatement",
                                    "name": "continue",
                                    "range": [
                                        479,
                                        480
                                    ],
                                    "children": [],
                                    "content": ":\n"
                                }
                            ],
                            "content": ".OUTPUT:\n"
                        }
                    ],
                    "content": ")\nif not block or block.block_type!=BlockType.OUTPUT:\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "output_name",
                    "range": [
                        482,
                        492
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                483,
                                484
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "get",
                                    "range": [
                                        488,
                                        492
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "\"name\"",
                                            "range": [
                                                490,
                                                491
                                            ],
                                            "children": [],
                                            "content": "get("
                                        }
                                    ],
                                    "content": "input_data.get(\"name\""
                                }
                            ],
                            "content": "\noutput_name"
                        }
                    ],
                    "content": "\n\noutput_name=event.input_data.get(\"name\""
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        493,
                        507
                    ],
                    "children": [
                        {
                            "type": "UnaryExpression",
                            "name": "not",
                            "range": [
                                494,
                                495
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "output_name",
                                    "range": [
                                        494,
                                        495
                                    ],
                                    "children": [],
                                    "content": "\nif"
                                }
                            ],
                            "content": "\nif"
                        },
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                496,
                                507
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "logger.warning",
                                    "range": [
                                        498,
                                        505
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "warning",
                                            "range": [
                                                500,
                                                505
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "f",
                                                    "range": [
                                                        502,
                                                        504
                                                    ],
                                                    "children": [],
                                                    "content": "warning(f"
                                                }
                                            ],
                                            "content": "logger.warning(f \"{log_id} produced an output with no name {event}\""
                                        }
                                    ],
                                    "content": ":\nlogger.warning(f \"{log_id} produced an output with no name {event}\""
                                },
                                {
                                    "type": "ContinueStatement",
                                    "name": "continue",
                                    "range": [
                                        506,
                                        507
                                    ],
                                    "children": [],
                                    "content": ")\n"
                                }
                            ],
                            "content": "not output_name:\nlogger.warning(f \"{log_id} produced an output with no name {event}\")\n"
                        }
                    ],
                    "content": ")\nif not output_name:\nlogger.warning(f \"{log_id} produced an output with no name {event}\")\n"
                },
                {
                    "type": "ForStatement",
                    "name": "for",
                    "range": [
                        509,
                        538
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "output_data",
                            "range": [
                                510,
                                511
                            ],
                            "children": [],
                            "content": "\nfor"
                        },
                        {
                            "type": "CallExpression",
                            "name": "get",
                            "range": [
                                516,
                                523
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "\"output\"",
                                    "range": [
                                        518,
                                        520
                                    ],
                                    "children": [],
                                    "content": "get(\"output\""
                                },
                                {
                                    "type": "ArrayExpression",
                                    "name": "",
                                    "range": [
                                        520,
                                        522
                                    ],
                                    "children": [],
                                    "content": "\"output\",["
                                }
                            ],
                            "content": "output_data.get(\"output\",[]"
                        },
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                524,
                                538
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "logger.info",
                                    "range": [
                                        525,
                                        532
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "info",
                                            "range": [
                                                527,
                                                532
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "f",
                                                    "range": [
                                                        529,
                                                        531
                                                    ],
                                                    "children": [],
                                                    "content": "info(f"
                                                }
                                            ],
                                            "content": "logger.info(f \"Execution {log_id} produced {output_name}: {output_data}\""
                                        }
                                    ],
                                    "content": ":\nlogger.info(f \"Execution {log_id} produced {output_name}: {output_data}\""
                                },
                                {
                                    "type": "YieldStatement",
                                    "name": "yield",
                                    "range": [
                                        533,
                                        537
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "output_name",
                                            "range": [
                                                534,
                                                535
                                            ],
                                            "children": [],
                                            "content": "\nyield"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "output_data",
                                            "range": [
                                                536,
                                                537
                                            ],
                                            "children": [],
                                            "content": "output_name,"
                                        }
                                    ],
                                    "content": ")\nyield output_name,"
                                }
                            ],
                            "content": "):\nlogger.info(f \"Execution {log_id} produced {output_name}: {output_data}\")\nyield output_name,output_data"
                        }
                    ],
                    "content": "\n\nfor output_data in event.output_data.get(\"output\",[]):\nlogger.info(f \"Execution {log_id} produced {output_name}: {output_data}\")\nyield output_name,output_data"
                }
            ],
            "content": "\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nexecutor_manager=get_executor_manager_client()\nevent_bus=get_event_bus()\n\ngraph_exec=executor_manager.add_execution(\ngraph_id=input_data.graph_id,\ngraph_version=input_data.graph_version,\nuser_id=input_data.user_id,\ndata=input_data.data,\n)\nlog_id=f \"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\nlogger.info(f \"Starting execution of {log_id}\")\n\nfor event in event_bus.listen(\ngraph_id=graph_exec.graph_id,graph_exec_id=graph_exec.graph_exec_id\n):\nlogger.info(\nf \"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n)\n\nif not event.node_id:\nif event.status in[ExecutionStatus.COMPLETED,ExecutionStatus.FAILED]:\nlogger.info(f \"Execution {log_id} ended with status {event.status}\")\nbreak\nelse:\ncontinue\n\nif not event.block_id:\nlogger.warning(f \"{log_id} received event without block_id {event}\")\ncontinue\n\nblock=get_block(event.block_id)\nif not block or block.block_type!=BlockType.OUTPUT:\ncontinue\n\noutput_name=event.input_data.get(\"name\")\nif not output_name:\nlogger.warning(f \"{log_id} produced an output with no name {event}\")\ncontinue\n\nfor output_data in event.output_data.get(\"output\",[]):\nlogger.info(f \"Execution {log_id} produced {output_name}: {output_data}\")\nyield output_name,output_data"
        }
    ],
    "content": "@thread_cached\ndef get_executor_manager_client():\nfrom backend.executor import ExecutionManager\nfrom backend.util.service import get_service_client\n\nreturn get_service_client(ExecutionManager)\n\n\n@thread_cached\ndef get_event_bus():\nfrom backend.data.execution import RedisExecutionEventBus\n\nreturn RedisExecutionEventBus()\n\n\nclass AgentExecutorBlock(Block):\nclass Input(BlockSchema):\nuser_id:str=SchemaField(description=\"User ID\")\ngraph_id:str=SchemaField(description=\"Graph ID\")\ngraph_version:int=SchemaField(description=\"Graph Version\")\n\ndata:BlockInput=SchemaField(description=\"Input data for the graph\")\ninput_schema:dict=SchemaField(description=\"Input schema for the graph\")\noutput_schema:dict=SchemaField(description=\"Output schema for the graph\")\n\nclass Output(BlockSchema):\npass\n\ndef __init__(self):\nsuper().__init__(\nid=\"e189baac-8c20-45a1-94a7-55177ea42565\",\ndescription=\"Executes an existing agent inside your agent\",\ninput_schema=AgentExecutorBlock.Input,\noutput_schema=AgentExecutorBlock.Output,\nblock_type=BlockType.AGENT,\ncategories={BlockCategory.AGENT},\n)\n\ndef run(self,input_data:Input,**kwargs)->BlockOutput:\nexecutor_manager=get_executor_manager_client()\nevent_bus=get_event_bus()\n\ngraph_exec=executor_manager.add_execution(\ngraph_id=input_data.graph_id,\ngraph_version=input_data.graph_version,\nuser_id=input_data.user_id,\ndata=input_data.data,\n)\nlog_id=f \"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\nlogger.info(f \"Starting execution of {log_id}\")\n\nfor event in event_bus.listen(\ngraph_id=graph_exec.graph_id,graph_exec_id=graph_exec.graph_exec_id\n):\nlogger.info(\nf \"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n)\n\nif not event.node_id:\nif event.status in[ExecutionStatus.COMPLETED,ExecutionStatus.FAILED]:\nlogger.info(f \"Execution {log_id} ended with status {event.status}\")\nbreak\nelse:\ncontinue\n\nif not event.block_id:\nlogger.warning(f \"{log_id} received event without block_id {event}\")\ncontinue\n\nblock=get_block(event.block_id)\nif not block or block.block_type!=BlockType.OUTPUT:\ncontinue\n\noutput_name=event.input_data.get(\"name\")\nif not output_name:\nlogger.warning(f \"{log_id} produced an output with no name {event}\")\ncontinue\n\nfor output_data in event.output_data.get(\"output\",[]):\nlogger.info(f \"Execution {log_id} produced {output_name}: {output_data}\")\nyield output_name,output_data"
}