{
    "type": "Program",
    "name": "Global",
    "range": [
        24,
        248
    ],
    "children": [
        {
            "type": "ClassDecl",
            "name": "ServiceTest",
            "range": [
                24,
                45
            ],
            "children": [
                {
                    "type": "FunctionDecl",
                    "name": "__init__",
                    "range": [
                        31,
                        45
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "SuperCall",
                            "range": [
                                38,
                                44
                            ],
                            "children": [],
                            "content": "super().__init__()"
                        }
                    ],
                    "content": "def __init__(self):\nsuper().__init__()\n"
                }
            ],
            "content": "class ServiceTest(AppService):\ndef __init__(self):\nsuper().__init__()\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_port",
            "range": [
                50,
                62
            ],
            "children": [
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        60,
                        61
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "TEST_SERVICE_PORT",
                            "range": [
                                61,
                                61
                            ],
                            "children": [],
                            "content": "TEST_SERVICE_PORT"
                        }
                    ],
                    "content": "return TEST_SERVICE_PORT"
                }
            ],
            "content": "def get_port(cls)->int:\nreturn TEST_SERVICE_PORT\n"
        },
        {
            "type": "FunctionDecl",
            "name": "add",
            "range": [
                67,
                89
            ],
            "children": [
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        85,
                        88
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "+",
                            "range": [
                                86,
                                88
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "a",
                                    "range": [
                                        86,
                                        86
                                    ],
                                    "children": [],
                                    "content": "a"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "b",
                                    "range": [
                                        88,
                                        88
                                    ],
                                    "children": [],
                                    "content": "b"
                                }
                            ],
                            "content": "a+b"
                        }
                    ],
                    "content": "return a+b"
                }
            ],
            "content": "def add(self,a:int,b:int)->int:\nreturn a+b\n"
        },
        {
            "type": "FunctionDecl",
            "name": "subtract",
            "range": [
                94,
                116
            ],
            "children": [
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        112,
                        115
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "-",
                            "range": [
                                113,
                                115
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "a",
                                    "range": [
                                        113,
                                        113
                                    ],
                                    "children": [],
                                    "content": "a"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "b",
                                    "range": [
                                        115,
                                        115
                                    ],
                                    "children": [],
                                    "content": "b"
                                }
                            ],
                            "content": "a-b"
                        }
                    ],
                    "content": "return a-b"
                }
            ],
            "content": "def subtract(self,a:int,b:int)->int:\nreturn a-b\n"
        },
        {
            "type": "FunctionDecl",
            "name": "fun_with_async",
            "range": [
                121,
                174
            ],
            "children": [
                {
                    "type": "FunctionDecl",
                    "name": "add_async",
                    "range": [
                        140,
                        160
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                156,
                                159
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "+",
                                    "range": [
                                        157,
                                        159
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "a",
                                            "range": [
                                                157,
                                                157
                                            ],
                                            "children": [],
                                            "content": "a"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "b",
                                            "range": [
                                                159,
                                                159
                                            ],
                                            "children": [],
                                            "content": "b"
                                        }
                                    ],
                                    "content": "a+b"
                                }
                            ],
                            "content": "return a+b"
                        }
                    ],
                    "content": "def add_async(a:int,b:int)->int:\nreturn a+b\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        162,
                        173
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "run_and_wait",
                            "range": [
                                164,
                                173
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "add_async",
                                    "range": [
                                        167,
                                        172
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "a",
                                            "range": [
                                                169,
                                                169
                                            ],
                                            "children": [],
                                            "content": "a"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "b",
                                            "range": [
                                                171,
                                                171
                                            ],
                                            "children": [],
                                            "content": "b"
                                        }
                                    ],
                                    "content": "add_async(a,b)"
                                }
                            ],
                            "content": ".run_and_wait(add_async(a,b))"
                        }
                    ],
                    "content": "return self.run_and_wait(add_async(a,b))"
                }
            ],
            "content": "def fun_with_async(self,a:int,b:int)->int:\nasync def add_async(a:int,b:int)->int:\nreturn a+b\n\nreturn self.run_and_wait(add_async(a,b))\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_service_creation",
            "range": [
                188,
                247
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@pytest.mark.asyncio",
                    "range": [
                        176,
                        186
                    ],
                    "children": [],
                    "content": "\n@pytest.mark.asyncio(scope=\"session\""
                },
                {
                    "type": "FunctionSignature",
                    "name": "test_service_creation",
                    "range": [
                        188,
                        194
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "server",
                            "range": [
                                192,
                                193
                            ],
                            "children": [],
                            "content": "(server"
                        }
                    ],
                    "content": "\nasync def test_service_creation(server)"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        195,
                        247
                    ],
                    "children": [
                        {
                            "type": "WithStatement",
                            "name": "",
                            "range": [
                                196,
                                201
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "ServiceTest",
                                    "range": [
                                        197,
                                        199
                                    ],
                                    "children": [],
                                    "content": "with ServiceTest("
                                }
                            ],
                            "content": "\nwith ServiceTest():"
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "client",
                            "range": [
                                202,
                                208
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "get_service_client",
                                    "range": [
                                        204,
                                        207
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "ServiceTest",
                                            "range": [
                                                206,
                                                207
                                            ],
                                            "children": [],
                                            "content": "(ServiceTest"
                                        }
                                    ],
                                    "content": "=get_service_client(ServiceTest"
                                }
                            ],
                            "content": "\nclient=get_service_client(ServiceTest)"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "",
                            "range": [
                                209,
                                221
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "client.add",
                                    "range": [
                                        210,
                                        217
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "5",
                                            "range": [
                                                214,
                                                214
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "3",
                                            "range": [
                                                216,
                                                216
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": "assert client.add(5,3"
                                },
                                {
                                    "type": "Literal",
                                    "name": "8",
                                    "range": [
                                        220,
                                        220
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": "\nassert client.add(5,3)==8"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "",
                            "range": [
                                222,
                                234
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "client.subtract",
                                    "range": [
                                        223,
                                        230
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "10",
                                            "range": [
                                                227,
                                                227
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "4",
                                            "range": [
                                                229,
                                                229
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": "assert client.subtract(10,4"
                                },
                                {
                                    "type": "Literal",
                                    "name": "6",
                                    "range": [
                                        233,
                                        233
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": "\nassert client.subtract(10,4)==6"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "",
                            "range": [
                                235,
                                247
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "client.fun_with_async",
                                    "range": [
                                        236,
                                        243
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "5",
                                            "range": [
                                                240,
                                                240
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "3",
                                            "range": [
                                                242,
                                                242
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": "assert client.fun_with_async(5,3"
                                },
                                {
                                    "type": "Literal",
                                    "name": "8",
                                    "range": [
                                        246,
                                        246
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": "\nassert client.fun_with_async(5,3)==8"
                        }
                    ],
                    "content": ":\nwith ServiceTest():\nclient=get_service_client(ServiceTest)\nassert client.add(5,3)==8\nassert client.subtract(10,4)==6\nassert client.fun_with_async(5,3)==8"
                }
            ],
            "content": "\nasync def test_service_creation(server):\nwith ServiceTest():\nclient=get_service_client(ServiceTest)\nassert client.add(5,3)==8\nassert client.subtract(10,4)==6\nassert client.fun_with_async(5,3)==8"
        }
    ],
    "content": "class ServiceTest(AppService):\ndef __init__(self):\nsuper().__init__()\n\n@classmethod\ndef get_port(cls)->int:\nreturn TEST_SERVICE_PORT\n\n@expose\ndef add(self,a:int,b:int)->int:\nreturn a+b\n\n@expose\ndef subtract(self,a:int,b:int)->int:\nreturn a-b\n\n@expose\ndef fun_with_async(self,a:int,b:int)->int:\nasync def add_async(a:int,b:int)->int:\nreturn a+b\n\nreturn self.run_and_wait(add_async(a,b))\n\n\n@pytest.mark.asyncio(scope=\"session\")\nasync def test_service_creation(server):\nwith ServiceTest():\nclient=get_service_client(ServiceTest)\nassert client.add(5,3)==8\nassert client.subtract(10,4)==6\nassert client.fun_with_async(5,3)==8\n"
}