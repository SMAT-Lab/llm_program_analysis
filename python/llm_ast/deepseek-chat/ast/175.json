{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        999
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                1
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "logging",
                    "range": [
                        1,
                        1
                    ],
                    "children": [],
                    "content": "logging"
                }
            ],
            "content": "import logging"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                3,
                4
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "os",
                    "range": [
                        4,
                        4
                    ],
                    "children": [],
                    "content": "os"
                }
            ],
            "content": "import os"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                6,
                17
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "parse_qs",
                    "range": [
                        11,
                        11
                    ],
                    "children": [],
                    "content": "parse_qs"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "urlencode",
                    "range": [
                        13,
                        13
                    ],
                    "children": [],
                    "content": "urlencode"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "urlparse",
                    "range": [
                        15,
                        15
                    ],
                    "children": [],
                    "content": "urlparse"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "urlunparse",
                    "range": [
                        17,
                        17
                    ],
                    "children": [],
                    "content": "urlunparse"
                }
            ],
            "content": "from urllib.parse import parse_qs,urlencode,urlparse,urlunparse"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                20,
                27
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "EVENT_JOB_ERROR",
                    "range": [
                        25,
                        25
                    ],
                    "children": [],
                    "content": "EVENT_JOB_ERROR"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "EVENT_JOB_EXECUTED",
                    "range": [
                        27,
                        27
                    ],
                    "children": [],
                    "content": "EVENT_JOB_EXECUTED"
                }
            ],
            "content": "from apscheduler.events import EVENT_JOB_ERROR,EVENT_JOB_EXECUTED"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                29,
                36
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "Job",
                    "range": [
                        34,
                        34
                    ],
                    "children": [],
                    "content": "Job"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "JobObj",
                    "range": [
                        36,
                        36
                    ],
                    "children": [],
                    "content": "JobObj"
                }
            ],
            "content": "from apscheduler.job import Job as JobObj"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                38,
                45
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "SQLAlchemyJobStore",
                    "range": [
                        45,
                        45
                    ],
                    "children": [],
                    "content": "SQLAlchemyJobStore"
                }
            ],
            "content": "from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                47,
                54
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "BlockingScheduler",
                    "range": [
                        54,
                        54
                    ],
                    "children": [],
                    "content": "BlockingScheduler"
                }
            ],
            "content": "from apscheduler.schedulers.blocking import BlockingScheduler"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                56,
                63
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "CronTrigger",
                    "range": [
                        63,
                        63
                    ],
                    "children": [],
                    "content": "CronTrigger"
                }
            ],
            "content": "from apscheduler.triggers.cron import CronTrigger"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                65,
                72
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "thread_cached",
                    "range": [
                        72,
                        72
                    ],
                    "children": [],
                    "content": "thread_cached"
                }
            ],
            "content": "from autogpt_libs.utils.cache import thread_cached"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                74,
                77
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "load_dotenv",
                    "range": [
                        77,
                        77
                    ],
                    "children": [],
                    "content": "load_dotenv"
                }
            ],
            "content": "from dotenv import load_dotenv"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                79,
                82
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "BaseModel",
                    "range": [
                        82,
                        82
                    ],
                    "children": [],
                    "content": "BaseModel"
                }
            ],
            "content": "from pydantic import BaseModel"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                84,
                89
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "MetaData",
                    "range": [
                        87,
                        87
                    ],
                    "children": [],
                    "content": "MetaData"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "create_engine",
                    "range": [
                        89,
                        89
                    ],
                    "children": [],
                    "content": "create_engine"
                }
            ],
            "content": "from sqlalchemy import MetaData,create_engine"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                92,
                99
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "BlockInput",
                    "range": [
                        99,
                        99
                    ],
                    "children": [],
                    "content": "BlockInput"
                }
            ],
            "content": "from backend.data.block import BlockInput"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                101,
                108
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "ExecutionManager",
                    "range": [
                        108,
                        108
                    ],
                    "children": [],
                    "content": "ExecutionManager"
                }
            ],
            "content": "from backend.executor.manager import ExecutionManager"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                110,
                121
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "AppService",
                    "range": [
                        117,
                        117
                    ],
                    "children": [],
                    "content": "AppService"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "expose",
                    "range": [
                        119,
                        119
                    ],
                    "children": [],
                    "content": "expose"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "get_service_client",
                    "range": [
                        121,
                        121
                    ],
                    "children": [],
                    "content": "get_service_client"
                }
            ],
            "content": "from backend.util.service import AppService,expose,get_service_client"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                123,
                130
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "Config",
                    "range": [
                        130,
                        130
                    ],
                    "children": [],
                    "content": "Config"
                }
            ],
            "content": "from backend.util.settings import Config"
        },
        {
            "type": "FunctionDecl",
            "name": "_extract_schema_from_url",
            "range": [
                133,
                245
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "database_url",
                    "range": [
                        135,
                        137
                    ],
                    "children": [],
                    "content": "_extract_schema_from_url(database_url"
                },
                {
                    "type": "ReturnType",
                    "name": "tuple[str, str]",
                    "range": [
                        140,
                        145
                    ],
                    "children": [],
                    "content": ">tuple[str,str"
                },
                {
                    "type": "Docstring",
                    "name": "Extracts the schema from the DATABASE_URL and returns the schema and cleaned URL.",
                    "range": [
                        148,
                        150
                    ],
                    "children": [],
                    "content": "\n\"\"\" \\n     Extracts the schema from the DATABASE_URL and returns the schema and cleaned URL. \\n     \""
                },
                {
                    "type": "Assignment",
                    "name": "parsed_url",
                    "range": [
                        152,
                        157
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "urlparse",
                            "range": [
                                154,
                                157
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "database_url",
                                    "range": [
                                        156,
                                        157
                                    ],
                                    "children": [],
                                    "content": "(database_url"
                                }
                            ],
                            "content": "=urlparse(database_url"
                        }
                    ],
                    "content": "\nparsed_url=urlparse(database_url"
                },
                {
                    "type": "Assignment",
                    "name": "query_params",
                    "range": [
                        159,
                        166
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "parse_qs",
                            "range": [
                                161,
                                166
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "parsed_url.query",
                                    "range": [
                                        163,
                                        166
                                    ],
                                    "children": [],
                                    "content": "(parsed_url.query"
                                }
                            ],
                            "content": "=parse_qs(parsed_url.query"
                        }
                    ],
                    "content": "\nquery_params=parse_qs(parsed_url.query"
                },
                {
                    "type": "Assignment",
                    "name": "schema_list",
                    "range": [
                        175,
                        184
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "query_params.pop",
                            "range": [
                                177,
                                184
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "\"schema\"",
                                    "range": [
                                        181,
                                        182
                                    ],
                                    "children": [],
                                    "content": "(\"schema\""
                                },
                                {
                                    "type": "Argument",
                                    "name": "None",
                                    "range": [
                                        183,
                                        184
                                    ],
                                    "children": [],
                                    "content": ",None"
                                }
                            ],
                            "content": "=query_params.pop(\"schema\",None"
                        }
                    ],
                    "content": "\nschema_list=query_params.pop(\"schema\",None"
                },
                {
                    "type": "Assignment",
                    "name": "schema",
                    "range": [
                        186,
                        195
                    ],
                    "children": [
                        {
                            "type": "ConditionalExpression",
                            "name": "schema_list[0] if schema_list else \"public\"",
                            "range": [
                                188,
                                195
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "schema_list",
                                    "range": [
                                        193,
                                        194
                                    ],
                                    "children": [],
                                    "content": "if schema_list"
                                },
                                {
                                    "type": "TrueBranch",
                                    "name": "schema_list[0]",
                                    "range": [
                                        188,
                                        191
                                    ],
                                    "children": [],
                                    "content": "=schema_list[0"
                                },
                                {
                                    "type": "FalseBranch",
                                    "name": "\"public\"",
                                    "range": [
                                        195,
                                        195
                                    ],
                                    "children": [],
                                    "content": "else"
                                }
                            ],
                            "content": "=schema_list[0]if schema_list else"
                        }
                    ],
                    "content": "\nschema=schema_list[0]if schema_list else"
                },
                {
                    "type": "Assignment",
                    "name": "new_query",
                    "range": [
                        208,
                        217
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "urlencode",
                            "range": [
                                210,
                                217
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "query_params",
                                    "range": [
                                        212,
                                        213
                                    ],
                                    "children": [],
                                    "content": "(query_params"
                                },
                                {
                                    "type": "Argument",
                                    "name": "doseq=True",
                                    "range": [
                                        214,
                                        216
                                    ],
                                    "children": [],
                                    "content": ",doseq="
                                }
                            ],
                            "content": "=urlencode(query_params,doseq=True"
                        }
                    ],
                    "content": "\nnew_query=urlencode(query_params,doseq=True"
                },
                {
                    "type": "Assignment",
                    "name": "new_parsed_url",
                    "range": [
                        219,
                        228
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "parsed_url._replace",
                            "range": [
                                221,
                                228
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "query=new_query",
                                    "range": [
                                        225,
                                        227
                                    ],
                                    "children": [],
                                    "content": "(query="
                                }
                            ],
                            "content": "=parsed_url._replace(query=new_query"
                        }
                    ],
                    "content": "\nnew_parsed_url=parsed_url._replace(query=new_query"
                },
                {
                    "type": "Assignment",
                    "name": "database_url_clean",
                    "range": [
                        230,
                        238
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "str",
                            "range": [
                                232,
                                238
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "urlunparse",
                                    "range": [
                                        234,
                                        238
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "new_parsed_url",
                                            "range": [
                                                236,
                                                237
                                            ],
                                            "children": [],
                                            "content": "(new_parsed_url"
                                        }
                                    ],
                                    "content": "(urlunparse(new_parsed_url)"
                                }
                            ],
                            "content": "=str(urlunparse(new_parsed_url)"
                        }
                    ],
                    "content": "\ndatabase_url_clean=str(urlunparse(new_parsed_url)"
                },
                {
                    "type": "Return",
                    "name": "return schema, database_url_clean",
                    "range": [
                        241,
                        244
                    ],
                    "children": [
                        {
                            "type": "Tuple",
                            "name": "schema, database_url_clean",
                            "range": [
                                242,
                                244
                            ],
                            "children": [
                                {
                                    "type": "Element",
                                    "name": "schema",
                                    "range": [
                                        242,
                                        242
                                    ],
                                    "children": [],
                                    "content": "return"
                                },
                                {
                                    "type": "Element",
                                    "name": "database_url_clean",
                                    "range": [
                                        244,
                                        244
                                    ],
                                    "children": [],
                                    "content": ","
                                }
                            ],
                            "content": "return schema,"
                        }
                    ],
                    "content": "\nreturn schema,"
                }
            ],
            "content": "\ndef _extract_schema_from_url(database_url)->tuple[str,str]:\n\"\"\" \\n     Extracts the schema from the DATABASE_URL and returns the schema and cleaned URL. \\n     \"\"\"\nparsed_url=urlparse(database_url)\nquery_params=parse_qs(parsed_url.query)\n\n#Extract the 'schema' parameter\nschema_list=query_params.pop(\"schema\",None)\nschema=schema_list[0]if schema_list else \"public\"\n\n#Reconstruct the query string without the 'schema' parameter\nnew_query=urlencode(query_params,doseq=True)\nnew_parsed_url=parsed_url._replace(query=new_query)\ndatabase_url_clean=str(urlunparse(new_parsed_url))\n\nreturn schema,database_url_clean"
        },
        {
            "type": "VariableDeclaration",
            "name": "logger",
            "range": [
                246,
                254
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        246,
                        253
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "logger",
                            "range": [
                                246,
                                246
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "CallExpression",
                            "name": "",
                            "range": [
                                248,
                                253
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "",
                                    "range": [
                                        248,
                                        250
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "logging",
                                            "range": [
                                                248,
                                                248
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "getLogger",
                                            "range": [
                                                250,
                                                250
                                            ],
                                            "children": [],
                                            "content": "="
                                        }
                                    ],
                                    "content": "\nlogger="
                                },
                                {
                                    "type": "Identifier",
                                    "name": "__name__",
                                    "range": [
                                        252,
                                        252
                                    ],
                                    "children": [],
                                    "content": "."
                                }
                            ],
                            "content": "\nlogger=logging.getLogger"
                        }
                    ],
                    "content": "\n\n\nlogger=logging.getLogger"
                }
            ],
            "content": "\n\n\nlogger=logging.getLogger("
        },
        {
            "type": "VariableDeclaration",
            "name": "config",
            "range": [
                255,
                260
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        255,
                        259
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "config",
                            "range": [
                                255,
                                255
                            ],
                            "children": [],
                            "content": "__name__"
                        },
                        {
                            "type": "NewExpression",
                            "name": "",
                            "range": [
                                257,
                                259
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "Config",
                                    "range": [
                                        257,
                                        257
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "\nconfig="
                        }
                    ],
                    "content": "__name__)\nconfig="
                }
            ],
            "content": "__name__)\nconfig=Config"
        },
        {
            "type": "FunctionDecl",
            "name": "log",
            "range": [
                262,
                286
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "log",
                    "range": [
                        262,
                        271
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                262,
                                262
                            ],
                            "children": [],
                            "content": ")"
                        },
                        {
                            "type": "Identifier",
                            "name": "log",
                            "range": [
                                263,
                                263
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "ParameterList",
                            "name": "parameters",
                            "range": [
                                264,
                                270
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "msg",
                                    "range": [
                                        265,
                                        265
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Keyword",
                                    "name": "**",
                                    "range": [
                                        267,
                                        268
                                    ],
                                    "children": [],
                                    "content": "log("
                                },
                                {
                                    "type": "Identifier",
                                    "name": "kwargs",
                                    "range": [
                                        269,
                                        269
                                    ],
                                    "children": [],
                                    "content": "msg"
                                }
                            ],
                            "content": "\n\ndef log(msg,"
                        }
                    ],
                    "content": ")\n\n\ndef log(msg,*"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        272,
                        286
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.info",
                            "range": [
                                273,
                                284
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "logger.info",
                                    "range": [
                                        273,
                                        275
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "logger",
                                            "range": [
                                                273,
                                                273
                                            ],
                                            "children": [],
                                            "content": "kwargs"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "info",
                                            "range": [
                                                275,
                                                275
                                            ],
                                            "children": [],
                                            "content": ":"
                                        }
                                    ],
                                    "content": "kwargs):"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "call",
                                    "range": [
                                        276,
                                        284
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"[ExecutionScheduler] \"",
                                            "range": [
                                                277,
                                                277
                                            ],
                                            "children": [],
                                            "content": "logger"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "msg",
                                            "range": [
                                                279,
                                                279
                                            ],
                                            "children": [],
                                            "content": "info"
                                        },
                                        {
                                            "type": "Keyword",
                                            "name": "**",
                                            "range": [
                                                281,
                                                282
                                            ],
                                            "children": [],
                                            "content": "\"[ExecutionScheduler] \"+"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "kwargs",
                                            "range": [
                                                283,
                                                283
                                            ],
                                            "children": [],
                                            "content": "msg"
                                        }
                                    ],
                                    "content": "\nlogger.info(\"[ExecutionScheduler] \"+msg,"
                                }
                            ],
                            "content": "kwargs):\nlogger.info(\"[ExecutionScheduler] \"+msg,"
                        }
                    ],
                    "content": "*kwargs):\nlogger.info(\"[ExecutionScheduler] \"+msg,**"
                }
            ],
            "content": ")\n\n\ndef log(msg,**kwargs):\nlogger.info(\"[ExecutionScheduler] \"+msg,**"
        },
        {
            "type": "FunctionDecl",
            "name": "job_listener",
            "range": [
                287,
                319
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "event",
                    "range": [
                        290,
                        290
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        293,
                        319
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "",
                            "range": [
                                294,
                                296
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Logs job execution outcomes for better monitoring.\"",
                                    "range": [
                                        295,
                                        295
                                    ],
                                    "children": [],
                                    "content": "event"
                                }
                            ],
                            "content": "(event)"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                298,
                                318
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        299,
                                        302
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "event.exception",
                                            "range": [
                                                299,
                                                301
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "event",
                                                    "range": [
                                                        299,
                                                        299
                                                    ],
                                                    "children": [],
                                                    "content": "\"\""
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "exception",
                                                    "range": [
                                                        301,
                                                        301
                                                    ],
                                                    "children": [],
                                                    "content": "\"\""
                                                }
                                            ],
                                            "content": "\"\"\"Logs job execution outcomes for better monitoring.\"\"\""
                                        }
                                    ],
                                    "content": "\"\"\"Logs job execution outcomes for better monitoring.\"\"\"\n"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        303,
                                        309
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                304,
                                                308
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "log",
                                                    "range": [
                                                        304,
                                                        308
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "",
                                                            "range": [
                                                                305,
                                                                307
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"Job {event.job_id} failed.\"",
                                                                    "range": [
                                                                        307,
                                                                        307
                                                                    ],
                                                                    "children": [],
                                                                    "content": ":"
                                                                }
                                                            ],
                                                            "content": ".exception:"
                                                        }
                                                    ],
                                                    "content": "event.exception:\n"
                                                }
                                            ],
                                            "content": "event.exception:\n"
                                        }
                                    ],
                                    "content": "if event.exception:\nlog"
                                },
                                {
                                    "type": "ElseStatement",
                                    "name": "",
                                    "range": [
                                        310,
                                        318
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "",
                                            "range": [
                                                312,
                                                318
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        313,
                                                        317
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "log",
                                                            "range": [
                                                                313,
                                                                317
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "",
                                                                    "range": [
                                                                        314,
                                                                        316
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "\"Job {event.job_id} completed successfully.\"",
                                                                            "range": [
                                                                                316,
                                                                                316
                                                                            ],
                                                                            "children": [],
                                                                            "content": ":"
                                                                        }
                                                                    ],
                                                                    "content": "\nelse:"
                                                                }
                                                            ],
                                                            "content": ")\nelse:\n"
                                                        }
                                                    ],
                                                    "content": ")\nelse:\n"
                                                }
                                            ],
                                            "content": "\"Job {event.job_id} failed.\")\nelse:\nlog"
                                        }
                                    ],
                                    "content": "(f \"Job {event.job_id} failed.\")\nelse:\nlog"
                                }
                            ],
                            "content": "\n\"\"\"Logs job execution outcomes for better monitoring.\"\"\"\nif event.exception:\nlog(f \"Job {event.job_id} failed.\")\nelse:\nlog"
                        }
                    ],
                    "content": "job_listener(event):\n\"\"\"Logs job execution outcomes for better monitoring.\"\"\"\nif event.exception:\nlog(f \"Job {event.job_id} failed.\")\nelse:\nlog("
                }
            ],
            "content": "kwargs)\n\n\ndef job_listener(event):\n\"\"\"Logs job execution outcomes for better monitoring.\"\"\"\nif event.exception:\nlog(f \"Job {event.job_id} failed.\")\nelse:\nlog("
        },
        {
            "type": "FunctionDecl",
            "name": "get_execution_client",
            "range": [
                323,
                337
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "get_execution_client",
                    "range": [
                        323,
                        330
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                323,
                                326
                            ],
                            "children": [],
                            "content": "\n\n\n@"
                        },
                        {
                            "type": "Identifier",
                            "name": "get_execution_client",
                            "range": [
                                324,
                                338
                            ],
                            "children": [],
                            "content": "\n\n@thread_cached\ndef get_execution_client()->ExecutionManager:\nreturn"
                        },
                        {
                            "type": "ReturnType",
                            "name": "ExecutionManager",
                            "range": [
                                327,
                                330
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "->",
                                    "range": [
                                        327,
                                        329
                                    ],
                                    "children": [],
                                    "content": "thread_cached\ndef"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "ExecutionManager",
                                    "range": [
                                        329,
                                        330
                                    ],
                                    "children": [],
                                    "content": "def get_execution_client"
                                }
                            ],
                            "content": "thread_cached\ndef get_execution_client"
                        }
                    ],
                    "content": "\n\n\n@thread_cached\ndef get_execution_client"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        331,
                        337
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                332,
                                337
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "return",
                                    "range": [
                                        332,
                                        338
                                    ],
                                    "children": [],
                                    "content": ")->ExecutionManager:\nreturn"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "get_service_client",
                                    "range": [
                                        333,
                                        336
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "get_service_client",
                                            "range": [
                                                333,
                                                336
                                            ],
                                            "children": [],
                                            "content": "->ExecutionManager:"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "ExecutionManager",
                                            "range": [
                                                335,
                                                336
                                            ],
                                            "children": [],
                                            "content": "ExecutionManager:"
                                        }
                                    ],
                                    "content": "->ExecutionManager:"
                                }
                            ],
                            "content": ")->ExecutionManager:\n"
                        }
                    ],
                    "content": "()->ExecutionManager:\n"
                }
            ],
            "content": "\n\n\n@thread_cached\ndef get_execution_client()->ExecutionManager:\n"
        },
        {
            "type": "FunctionDecl",
            "name": "execute_graph",
            "range": [
                339,
                401
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        341,
                        345
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "kwargs",
                            "range": [
                                342,
                                344
                            ],
                            "children": [],
                            "content": ")\n\n"
                        }
                    ],
                    "content": "ExecutionManager)\n\n\n"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        346,
                        401
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "args",
                            "range": [
                                348,
                                355
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        349,
                                        355
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "JobArgs",
                                            "range": [
                                                350,
                                                355
                                            ],
                                            "children": [
                                                {
                                                    "type": "ArgumentList",
                                                    "name": "arguments",
                                                    "range": [
                                                        351,
                                                        355
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "SpreadElement",
                                                            "name": "kwargs",
                                                            "range": [
                                                                352,
                                                                354
                                                            ],
                                                            "children": [],
                                                            "content": "):\n"
                                                        }
                                                    ],
                                                    "content": "kwargs):\nargs"
                                                }
                                            ],
                                            "content": "*kwargs):\nargs"
                                        }
                                    ],
                                    "content": "**kwargs):\nargs"
                                }
                            ],
                            "content": "(**kwargs):\nargs"
                        },
                        {
                            "type": "TryStatement",
                            "name": "try",
                            "range": [
                                357,
                                401
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "block",
                                    "range": [
                                        358,
                                        386
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "log",
                                            "range": [
                                                360,
                                                365
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "log",
                                                    "range": [
                                                        360,
                                                        365
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "arguments",
                                                            "range": [
                                                                361,
                                                                365
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "TemplateLiteral",
                                                                    "name": "f",
                                                                    "range": [
                                                                        362,
                                                                        364
                                                                    ],
                                                                    "children": [],
                                                                    "content": ")\ntry"
                                                                }
                                                            ],
                                                            "content": "kwargs)\ntry:"
                                                        }
                                                    ],
                                                    "content": "*kwargs)\ntry:"
                                                }
                                            ],
                                            "content": "*kwargs)\ntry:"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "get_execution_client",
                                            "range": [
                                                366,
                                                386
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "add_execution",
                                                    "range": [
                                                        366,
                                                        386
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "get_execution_client",
                                                            "range": [
                                                                366,
                                                                370
                                                            ],
                                                            "children": [],
                                                            "content": "\nlog(f \"Executing recurring job for graph #{args.graph_id}\""
                                                        },
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "arguments",
                                                            "range": [
                                                                371,
                                                                385
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "args.graph_id",
                                                                    "range": [
                                                                        373,
                                                                        376
                                                                    ],
                                                                    "children": [],
                                                                    "content": "get_execution_client()."
                                                                },
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "args.input_data",
                                                                    "range": [
                                                                        377,
                                                                        380
                                                                    ],
                                                                    "children": [],
                                                                    "content": "add_execution(\nargs"
                                                                },
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "args.user_id",
                                                                    "range": [
                                                                        381,
                                                                        384
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".graph_id,args"
                                                                }
                                                            ],
                                                            "content": ")\nget_execution_client().add_execution(\nargs.graph_id,args."
                                                        }
                                                    ],
                                                    "content": "\nlog(f \"Executing recurring job for graph #{args.graph_id}\")\nget_execution_client().add_execution(\nargs.graph_id,args.input_data"
                                                }
                                            ],
                                            "content": "\nlog(f \"Executing recurring job for graph #{args.graph_id}\")\nget_execution_client().add_execution(\nargs.graph_id,args.input_data"
                                        }
                                    ],
                                    "content": "(**kwargs)\ntry:\nlog(f \"Executing recurring job for graph #{args.graph_id}\")\nget_execution_client().add_execution(\nargs.graph_id,args.input_data"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "catch",
                                    "range": [
                                        387,
                                        401
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "body",
                                            "range": [
                                                391,
                                                401
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "logger.exception",
                                                    "range": [
                                                        393,
                                                        400
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "exception",
                                                            "range": [
                                                                393,
                                                                400
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "logger",
                                                                    "range": [
                                                                        393,
                                                                        395
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nexcept Exception"
                                                                },
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "arguments",
                                                                    "range": [
                                                                        396,
                                                                        400
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "TemplateLiteral",
                                                                            "name": "f",
                                                                            "range": [
                                                                                397,
                                                                                399
                                                                            ],
                                                                            "children": [],
                                                                            "content": "e:\n"
                                                                        }
                                                                    ],
                                                                    "content": "as e:\nlogger"
                                                                }
                                                            ],
                                                            "content": "\nexcept Exception as e:\nlogger"
                                                        }
                                                    ],
                                                    "content": "\nexcept Exception as e:\nlogger"
                                                }
                                            ],
                                            "content": "\n)\nexcept Exception as e:\nlogger."
                                        }
                                    ],
                                    "content": ",args.user_id\n)\nexcept Exception as e:\nlogger."
                                }
                            ],
                            "content": "JobArgs(**kwargs)\ntry:\nlog(f \"Executing recurring job for graph #{args.graph_id}\")\nget_execution_client().add_execution(\nargs.graph_id,args.input_data,args.user_id\n)\nexcept Exception as e:\nlogger."
                        }
                    ],
                    "content": "def execute_graph(**kwargs):\nargs=JobArgs(**kwargs)\ntry:\nlog(f \"Executing recurring job for graph #{args.graph_id}\")\nget_execution_client().add_execution(\nargs.graph_id,args.input_data,args.user_id\n)\nexcept Exception as e:\nlogger."
                }
            ],
            "content": "get_service_client(ExecutionManager)\n\n\ndef execute_graph(**kwargs):\nargs=JobArgs(**kwargs)\ntry:\nlog(f \"Executing recurring job for graph #{args.graph_id}\")\nget_execution_client().add_execution(\nargs.graph_id,args.input_data,args.user_id\n)\nexcept Exception as e:\nlogger."
        },
        {
            "type": "ClassDecl",
            "name": "JobArgs",
            "range": [
                402,
                429
            ],
            "children": [
                {
                    "type": "PropertyDecl",
                    "name": "graph_id",
                    "range": [
                        409,
                        411
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                411,
                                411
                            ],
                            "children": [],
                            "content": "JobArgs"
                        }
                    ],
                    "content": "\nclass JobArgs"
                },
                {
                    "type": "PropertyDecl",
                    "name": "input_data",
                    "range": [
                        413,
                        415
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "BlockInput",
                            "range": [
                                415,
                                415
                            ],
                            "children": [],
                            "content": ":"
                        }
                    ],
                    "content": "BaseModel):"
                },
                {
                    "type": "PropertyDecl",
                    "name": "user_id",
                    "range": [
                        417,
                        419
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                419,
                                419
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "graph_id:str"
                },
                {
                    "type": "PropertyDecl",
                    "name": "graph_version",
                    "range": [
                        421,
                        423
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                423,
                                423
                            ],
                            "children": [],
                            "content": "BlockInput"
                        }
                    ],
                    "content": "input_data:BlockInput"
                },
                {
                    "type": "PropertyDecl",
                    "name": "cron",
                    "range": [
                        425,
                        427
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                427,
                                427
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "user_id:str"
                }
            ],
            "content": "exception(f \"Error executing graph {args.graph_id}: {e}\")\n\n\nclass JobArgs(BaseModel):\ngraph_id:str\ninput_data:BlockInput\nuser_id:str\ngraph_version"
        },
        {
            "type": "ClassDecl",
            "name": "JobInfo",
            "range": [
                430,
                448
            ],
            "children": [
                {
                    "type": "Property",
                    "name": "id",
                    "range": [
                        437,
                        439
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                439,
                                439
                            ],
                            "children": [],
                            "content": "class"
                        }
                    ],
                    "content": "\n\nclass"
                },
                {
                    "type": "Property",
                    "name": "name",
                    "range": [
                        441,
                        443
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                443,
                                443
                            ],
                            "children": [],
                            "content": ")"
                        }
                    ],
                    "content": "(JobArgs)"
                },
                {
                    "type": "Property",
                    "name": "next_run_time",
                    "range": [
                        445,
                        447
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                447,
                                447
                            ],
                            "children": [],
                            "content": ":"
                        }
                    ],
                    "content": "\nid:"
                }
            ],
            "content": ":int\ncron:str\n\n\nclass JobInfo(JobArgs):\nid:str"
        },
        {
            "type": "FunctionDecl",
            "name": "from_db",
            "range": [
                450,
                508
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "job_args",
                    "range": [
                        456,
                        458
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "JobArgs",
                            "range": [
                                458,
                                458
                            ],
                            "children": [],
                            "content": "\n"
                        }
                    ],
                    "content": "str\n\n"
                },
                {
                    "type": "Parameter",
                    "name": "job_obj",
                    "range": [
                        460,
                        462
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "JobObj",
                            "range": [
                                462,
                                462
                            ],
                            "children": [],
                            "content": "def"
                        }
                    ],
                    "content": "staticmethod\ndef"
                },
                {
                    "type": "ReturnType",
                    "name": "JobInfo",
                    "range": [
                        466,
                        466
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        469,
                        507
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "JobInfo",
                            "range": [
                                470,
                                507
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "id",
                                    "range": [
                                        473,
                                        477
                                    ],
                                    "children": [],
                                    "content": "->\"JobInfo\":\n"
                                },
                                {
                                    "type": "Argument",
                                    "name": "name",
                                    "range": [
                                        480,
                                        484
                                    ],
                                    "children": [],
                                    "content": "(\nid=job_obj"
                                },
                                {
                                    "type": "Argument",
                                    "name": "next_run_time",
                                    "range": [
                                        487,
                                        493
                                    ],
                                    "children": [],
                                    "content": ",\nname=job_obj.name"
                                },
                                {
                                    "type": "Argument",
                                    "name": "job_args",
                                    "range": [
                                        498,
                                        504
                                    ],
                                    "children": [],
                                    "content": "job_obj.next_run_time.isoformat()"
                                }
                            ],
                            "content": ":JobObj)->\"JobInfo\":\nreturn JobInfo(\nid=job_obj.id,\nname=job_obj.name,\nnext_run_time=job_obj.next_run_time.isoformat(),\n*"
                        }
                    ],
                    "content": "job_obj:JobObj)->\"JobInfo\":\nreturn JobInfo(\nid=job_obj.id,\nname=job_obj.name,\nnext_run_time=job_obj.next_run_time.isoformat(),\n*"
                }
            ],
            "content": "name:str\nnext_run_time:str\n\n@staticmethod\ndef from_db(job_args:JobArgs,job_obj:JobObj)->\"JobInfo\":\nreturn JobInfo(\nid=job_obj.id,\nname=job_obj.name,\nnext_run_time=job_obj.next_run_time.isoformat(),\n**"
        },
        {
            "type": "ClassDecl",
            "name": "ExecutionScheduler",
            "range": [
                510,
                520
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "AppService",
                    "range": [
                        512,
                        514
                    ],
                    "children": [],
                    "content": "(),"
                }
            ],
            "content": ".model_dump(),\n)\n\n\nclass"
        },
        {
            "type": "FunctionDecl",
            "name": "get_port",
            "range": [
                525,
                539
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@classmethod",
                    "range": [
                        522,
                        524
                    ],
                    "children": [],
                    "content": "(AppService)"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        530,
                        532
                    ],
                    "children": [],
                    "content": "\n\n@"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        535,
                        539
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "config.execution_scheduler_port",
                            "range": [
                                536,
                                538
                            ],
                            "children": [],
                            "content": "get_port(cls"
                        }
                    ],
                    "content": "def get_port(cls)"
                }
            ],
            "content": ":\nscheduler:BlockingScheduler\n\n@classmethod\ndef get_port(cls)"
        },
        {
            "type": "FunctionDecl",
            "name": "execution_client",
            "range": [
                547,
                562
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@property",
                    "range": [
                        541,
                        543
                    ],
                    "children": [],
                    "content": ">int:"
                },
                {
                    "type": "Decorator",
                    "name": "@thread_cached",
                    "range": [
                        544,
                        546
                    ],
                    "children": [],
                    "content": "\nreturn config"
                },
                {
                    "type": "ReturnType",
                    "name": "ExecutionManager",
                    "range": [
                        552,
                        554
                    ],
                    "children": [],
                    "content": "property\n@"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        557,
                        562
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "get_service_client(ExecutionManager)",
                            "range": [
                                558,
                                561
                            ],
                            "children": [],
                            "content": "execution_client(self)"
                        }
                    ],
                    "content": "def execution_client(self)-"
                }
            ],
            "content": ".execution_scheduler_port\n\n@property\n@thread_cached\ndef execution_client(self)-"
        },
        {
            "type": "FunctionDecl",
            "name": "run_service",
            "range": [
                564,
                649
            ],
            "children": [
                {
                    "type": "ExpressionStatement",
                    "name": "load_dotenv()",
                    "range": [
                        571,
                        573
                    ],
                    "children": [],
                    "content": ")\n\n"
                },
                {
                    "type": "Assignment",
                    "name": "db_schema, db_url = _extract_schema_from_url(os.getenv(\"DATABASE_URL\"))",
                    "range": [
                        575,
                        587
                    ],
                    "children": [],
                    "content": "run_service(self):\nload_dotenv()\ndb_schema,db_url"
                },
                {
                    "type": "Assignment",
                    "name": "self.scheduler = BlockingScheduler(jobstores={\"default\": SQLAlchemyJobStore(engine=create_engine(db_url), metadata=MetaData(schema=db_schema))})",
                    "range": [
                        589,
                        627
                    ],
                    "children": [],
                    "content": "_extract_schema_from_url(os.getenv(\"DATABASE_URL\"))\nself.scheduler=BlockingScheduler(\njobstores={\n\"default\":SQLAlchemyJobStore(\nengine=create_engine(db_url),\nmetadata=MetaData(schema"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "self.scheduler.add_listener(job_listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)",
                    "range": [
                        629,
                        640
                    ],
                    "children": [],
                    "content": "db_schema),\n)\n}\n)\nself."
                },
                {
                    "type": "ExpressionStatement",
                    "name": "self.scheduler.start()",
                    "range": [
                        642,
                        648
                    ],
                    "children": [],
                    "content": ".add_listener(job_listener,EVENT_JOB_EXECUTED|"
                }
            ],
            "content": "ExecutionManager:\nreturn get_service_client(ExecutionManager)\n\ndef run_service(self):\nload_dotenv()\ndb_schema,db_url=_extract_schema_from_url(os.getenv(\"DATABASE_URL\"))\nself.scheduler=BlockingScheduler(\njobstores={\n\"default\":SQLAlchemyJobStore(\nengine=create_engine(db_url),\nmetadata=MetaData(schema=db_schema),\n)\n}\n)\nself.scheduler.add_listener(job_listener,EVENT_JOB_EXECUTED|EVENT_JOB_ERROR"
        },
        {
            "type": "FunctionDecl",
            "name": "add_execution_schedule",
            "range": [
                654,
                775
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@expose",
                    "range": [
                        651,
                        653
                    ],
                    "children": [],
                    "content": "\nself."
                },
                {
                    "type": "ReturnType",
                    "name": "JobInfo",
                    "range": [
                        687,
                        689
                    ],
                    "children": [],
                    "content": ":BlockInput,"
                },
                {
                    "type": "Assignment",
                    "name": "job_args = JobArgs(graph_id=graph_id, input_data=input_data, user_id=user_id, graph_version=graph_version, cron=cron)",
                    "range": [
                        692,
                        722
                    ],
                    "children": [],
                    "content": ":str,\n)->JobInfo:\njob_args=JobArgs(\ngraph_id=graph_id,\ninput_data=input_data,\nuser_id=user_id,\ngraph_version"
                },
                {
                    "type": "Assignment",
                    "name": "job = self.scheduler.add_job(execute_graph, CronTrigger.from_crontab(cron), kwargs=job_args.model_dump(), replace_existing=True)",
                    "range": [
                        724,
                        758
                    ],
                    "children": [],
                    "content": "graph_version,\ncron=cron,\n)\njob=self.scheduler.add_job(\nexecute_graph,\nCronTrigger.from_crontab(cron),\nkwargs=job_args.model_dump"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "log(f\"Added job {job.id} with cron schedule '{cron}' input data: {input_data}\")",
                    "range": [
                        760,
                        764
                    ],
                    "children": [],
                    "content": "),\nreplace_existing="
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        766,
                        775
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "JobInfo.from_db(job_args, job)",
                            "range": [
                                767,
                                774
                            ],
                            "children": [],
                            "content": "\n)\nlog(f \"Added job {job.id} with cron schedule '{cron}' input data: {input_data}\")"
                        }
                    ],
                    "content": ",\n)\nlog(f \"Added job {job.id} with cron schedule '{cron}' input data: {input_data}\")\n"
                }
            ],
            "content": "scheduler.start()\n\n@expose\ndef add_execution_schedule(\nself,\ngraph_id:str,\ngraph_version:int,\ncron:str,\ninput_data:BlockInput,\nuser_id:str,\n)->JobInfo:\njob_args=JobArgs(\ngraph_id=graph_id,\ninput_data=input_data,\nuser_id=user_id,\ngraph_version=graph_version,\ncron=cron,\n)\njob=self.scheduler.add_job(\nexecute_graph,\nCronTrigger.from_crontab(cron),\nkwargs=job_args.model_dump(),\nreplace_existing=True,\n)\nlog(f \"Added job {job.id} with cron schedule '{cron}' input data: {input_data}\")\n"
        },
        {
            "type": "FunctionDecl",
            "name": "delete_schedule",
            "range": [
                781,
                877
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@expose",
                    "range": [
                        777,
                        779
                    ],
                    "children": [],
                    "content": "JobInfo.from_db"
                },
                {
                    "type": "ReturnType",
                    "name": "JobInfo",
                    "range": [
                        793,
                        795
                    ],
                    "children": [],
                    "content": "self,schedule_id"
                },
                {
                    "type": "Assignment",
                    "name": "job = self.scheduler.get_job(schedule_id)",
                    "range": [
                        798,
                        807
                    ],
                    "children": [],
                    "content": ",user_id:str)->JobInfo:\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if not job:",
                    "range": [
                        809,
                        826
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "log(f\"Job {schedule_id} not found.\")",
                            "range": [
                                814,
                                818
                            ],
                            "children": [],
                            "content": "get_job(schedule_id)\n"
                        },
                        {
                            "type": "ThrowStatement",
                            "name": "raise ValueError(f\"Job #{schedule_id} not found.\")",
                            "range": [
                                820,
                                825
                            ],
                            "children": [],
                            "content": "not job:\nlog("
                        }
                    ],
                    "content": "=self.scheduler.get_job(schedule_id)\nif not job:\nlog(f"
                },
                {
                    "type": "Assignment",
                    "name": "job_args = JobArgs(**job.kwargs)",
                    "range": [
                        828,
                        837
                    ],
                    "children": [],
                    "content": ")\nraise ValueError(f \"Job #{schedule_id} not found.\")\n\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if job_args.user_id != user_id:",
                    "range": [
                        839,
                        853
                    ],
                    "children": [
                        {
                            "type": "ThrowStatement",
                            "name": "raise ValueError(\"User ID does not match the job's user ID.\")",
                            "range": [
                                848,
                                852
                            ],
                            "children": [],
                            "content": "\nif job_args.user_id"
                        }
                    ],
                    "content": "=JobArgs(**job.kwargs)\nif job_args.user_id!"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "log(f\"Deleting job {schedule_id}\")",
                    "range": [
                        855,
                        859
                    ],
                    "children": [],
                    "content": "user_id:\nraise ValueError"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "job.remove()",
                    "range": [
                        861,
                        865
                    ],
                    "children": [],
                    "content": "\"User ID does not match the job's user ID.\")\n\nlog"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        868,
                        877
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "JobInfo.from_db(job_args, job)",
                            "range": [
                                869,
                                876
                            ],
                            "children": [],
                            "content": ")\njob.remove()\n"
                        }
                    ],
                    "content": "\"Deleting job {schedule_id}\")\njob.remove()\n\n"
                }
            ],
            "content": "job_args,job)\n\n@expose\ndef delete_schedule(self,schedule_id:str,user_id:str)->JobInfo:\njob=self.scheduler.get_job(schedule_id)\nif not job:\nlog(f \"Job {schedule_id} not found.\")\nraise ValueError(f \"Job #{schedule_id} not found.\")\n\njob_args=JobArgs(**job.kwargs)\nif job_args.user_id!=user_id:\nraise ValueError(\"User ID does not match the job's user ID.\")\n\nlog(f \"Deleting job {schedule_id}\")\njob.remove()\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_execution_schedules",
            "range": [
                883,
                998
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@expose",
                    "range": [
                        879,
                        881
                    ],
                    "children": [],
                    "content": "JobInfo.from_db"
                },
                {
                    "type": "ReturnType",
                    "name": "list[JobInfo]",
                    "range": [
                        905,
                        910
                    ],
                    "children": [],
                    "content": ",user_id:str|None"
                },
                {
                    "type": "Assignment",
                    "name": "schedules = []",
                    "range": [
                        913,
                        916
                    ],
                    "children": [],
                    "content": "\n)->"
                },
                {
                    "type": "ForStatement",
                    "name": "for job in self.scheduler.get_jobs():",
                    "range": [
                        918,
                        928
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "job_args = JobArgs(**job.kwargs)",
                            "range": [
                                930,
                                939
                            ],
                            "children": [],
                            "content": "in self.scheduler.get_jobs():\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if (job.next_run_time is not None and (graph_id is None or job_args.graph_id == graph_id) and (user_id is None or job_args.user_id == user_id)):",
                            "range": [
                                941,
                                980
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "schedules.append(JobInfo.from_db(job_args, job))",
                                    "range": [
                                        982,
                                        994
                                    ],
                                    "children": [],
                                    "content": ".user_id==user_id)\n):\nschedules.append"
                                }
                            ],
                            "content": "=JobArgs(**job.kwargs)\nif(\njob.next_run_time is not None\nand(graph_id is None or job_args.graph_id==graph_id)\nand(user_id is None or"
                        }
                    ],
                    "content": "[JobInfo]:\nschedules=[]\nfor"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        996,
                        998
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "schedules",
                            "range": [
                                997,
                                997
                            ],
                            "children": [],
                            "content": "."
                        }
                    ],
                    "content": "JobInfo.from_db"
                }
            ],
            "content": "job_args,job)\n\n@expose\ndef get_execution_schedules(\nself,graph_id:str|None=None,user_id:str|None=None\n)->list[JobInfo]:\nschedules=[]\nfor job in self.scheduler.get_jobs():\njob_args=JobArgs(**job.kwargs)\nif(\njob.next_run_time is not None\nand(graph_id is None or job_args.graph_id==graph_id)\nand(user_id is None or job_args.user_id==user_id)\n):\nschedules.append(JobInfo.from_db"
        }
    ],
    "content": "import logging\nimport os\nfrom urllib.parse import parse_qs,urlencode,urlparse,urlunparse\n\nfrom apscheduler.events import EVENT_JOB_ERROR,EVENT_JOB_EXECUTED\nfrom apscheduler.job import Job as JobObj\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom apscheduler.schedulers.blocking import BlockingScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom autogpt_libs.utils.cache import thread_cached\nfrom dotenv import load_dotenv\nfrom pydantic import BaseModel\nfrom sqlalchemy import MetaData,create_engine\n\nfrom backend.data.block import BlockInput\nfrom backend.executor.manager import ExecutionManager\nfrom backend.util.service import AppService,expose,get_service_client\nfrom backend.util.settings import Config\n\n\ndef _extract_schema_from_url(database_url)->tuple[str,str]:\n\"\"\" \\n     Extracts the schema from the DATABASE_URL and returns the schema and cleaned URL. \\n     \"\"\"\nparsed_url=urlparse(database_url)\nquery_params=parse_qs(parsed_url.query)\n\n#Extract the 'schema' parameter\nschema_list=query_params.pop(\"schema\",None)\nschema=schema_list[0]if schema_list else \"public\"\n\n#Reconstruct the query string without the 'schema' parameter\nnew_query=urlencode(query_params,doseq=True)\nnew_parsed_url=parsed_url._replace(query=new_query)\ndatabase_url_clean=str(urlunparse(new_parsed_url))\n\nreturn schema,database_url_clean\n\n\nlogger=logging.getLogger(__name__)\nconfig=Config()\n\n\ndef log(msg,**kwargs):\nlogger.info(\"[ExecutionScheduler] \"+msg,**kwargs)\n\n\ndef job_listener(event):\n\"\"\"Logs job execution outcomes for better monitoring.\"\"\"\nif event.exception:\nlog(f \"Job {event.job_id} failed.\")\nelse:\nlog(f \"Job {event.job_id} completed successfully.\")\n\n\n@thread_cached\ndef get_execution_client()->ExecutionManager:\nreturn get_service_client(ExecutionManager)\n\n\ndef execute_graph(**kwargs):\nargs=JobArgs(**kwargs)\ntry:\nlog(f \"Executing recurring job for graph #{args.graph_id}\")\nget_execution_client().add_execution(\nargs.graph_id,args.input_data,args.user_id\n)\nexcept Exception as e:\nlogger.exception(f \"Error executing graph {args.graph_id}: {e}\")\n\n\nclass JobArgs(BaseModel):\ngraph_id:str\ninput_data:BlockInput\nuser_id:str\ngraph_version:int\ncron:str\n\n\nclass JobInfo(JobArgs):\nid:str\nname:str\nnext_run_time:str\n\n@staticmethod\ndef from_db(job_args:JobArgs,job_obj:JobObj)->\"JobInfo\":\nreturn JobInfo(\nid=job_obj.id,\nname=job_obj.name,\nnext_run_time=job_obj.next_run_time.isoformat(),\n**job_args.model_dump(),\n)\n\n\nclass ExecutionScheduler(AppService):\nscheduler:BlockingScheduler\n\n@classmethod\ndef get_port(cls)->int:\nreturn config.execution_scheduler_port\n\n@property\n@thread_cached\ndef execution_client(self)->ExecutionManager:\nreturn get_service_client(ExecutionManager)\n\ndef run_service(self):\nload_dotenv()\ndb_schema,db_url=_extract_schema_from_url(os.getenv(\"DATABASE_URL\"))\nself.scheduler=BlockingScheduler(\njobstores={\n\"default\":SQLAlchemyJobStore(\nengine=create_engine(db_url),\nmetadata=MetaData(schema=db_schema),\n)\n}\n)\nself.scheduler.add_listener(job_listener,EVENT_JOB_EXECUTED|EVENT_JOB_ERROR)\nself.scheduler.start()\n\n@expose\ndef add_execution_schedule(\nself,\ngraph_id:str,\ngraph_version:int,\ncron:str,\ninput_data:BlockInput,\nuser_id:str,\n)->JobInfo:\njob_args=JobArgs(\ngraph_id=graph_id,\ninput_data=input_data,\nuser_id=user_id,\ngraph_version=graph_version,\ncron=cron,\n)\njob=self.scheduler.add_job(\nexecute_graph,\nCronTrigger.from_crontab(cron),\nkwargs=job_args.model_dump(),\nreplace_existing=True,\n)\nlog(f \"Added job {job.id} with cron schedule '{cron}' input data: {input_data}\")\nreturn JobInfo.from_db(job_args,job)\n\n@expose\ndef delete_schedule(self,schedule_id:str,user_id:str)->JobInfo:\njob=self.scheduler.get_job(schedule_id)\nif not job:\nlog(f \"Job {schedule_id} not found.\")\nraise ValueError(f \"Job #{schedule_id} not found.\")\n\njob_args=JobArgs(**job.kwargs)\nif job_args.user_id!=user_id:\nraise ValueError(\"User ID does not match the job's user ID.\")\n\nlog(f \"Deleting job {schedule_id}\")\njob.remove()\n\nreturn JobInfo.from_db(job_args,job)\n\n@expose\ndef get_execution_schedules(\nself,graph_id:str|None=None,user_id:str|None=None\n)->list[JobInfo]:\nschedules=[]\nfor job in self.scheduler.get_jobs():\njob_args=JobArgs(**job.kwargs)\nif(\njob.next_run_time is not None\nand(graph_id is None or job_args.graph_id==graph_id)\nand(user_id is None or job_args.user_id==user_id)\n):\nschedules.append(JobInfo.from_db("
}