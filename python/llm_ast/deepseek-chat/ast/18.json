{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        278
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                1,
                5
            ],
            "children": [
                {
                    "type": "Text",
                    "name": "",
                    "range": [
                        1,
                        1
                    ],
                    "children": [],
                    "content": "\" \\n Graph Coloring also called \""
                },
                {
                    "type": "Text",
                    "name": "",
                    "range": [
                        2,
                        2
                    ],
                    "children": [],
                    "content": "m"
                },
                {
                    "type": "Text",
                    "name": "",
                    "range": [
                        3,
                        3
                    ],
                    "children": [],
                    "content": "coloring"
                },
                {
                    "type": "Text",
                    "name": "",
                    "range": [
                        4,
                        4
                    ],
                    "children": [],
                    "content": "problem"
                },
                {
                    "type": "Text",
                    "name": "",
                    "range": [
                        5,
                        5
                    ],
                    "children": [],
                    "content": "\" \\n consists of coloring a given graph with at most m colors \\n such that no adjacent vertices are assigned the same color \\n  \\n Wikipedia: https://en.wikipedia.org/wiki/Graph_coloring \\n \""
                }
            ],
            "content": "\" \\n Graph Coloring also called \" m coloring problem \" \\n consists of coloring a given graph with at most m colors \\n such that no adjacent vertices are assigned the same color \\n  \\n Wikipedia: https://en.wikipedia.org/wiki/Graph_coloring \\n \""
        },
        {
            "type": "NewLine",
            "name": "",
            "range": [
                7,
                7
            ],
            "children": [],
            "content": "\n"
        },
        {
            "type": "NewLine",
            "name": "",
            "range": [
                8,
                8
            ],
            "children": [],
            "content": "\n"
        },
        {
            "type": "NewLine",
            "name": "",
            "range": [
                9,
                9
            ],
            "children": [],
            "content": "\n"
        },
        {
            "type": "FunctionDecl",
            "name": "valid_coloring",
            "range": [
                10,
                81
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        12,
                        31
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "neighbours",
                            "range": [
                                14,
                                19
                            ],
                            "children": [],
                            "content": "neighbours:list[int]"
                        },
                        {
                            "type": "Parameter",
                            "name": "colored_vertices",
                            "range": [
                                21,
                                26
                            ],
                            "children": [],
                            "content": "colored_vertices:list[int]"
                        },
                        {
                            "type": "Parameter",
                            "name": "color",
                            "range": [
                                28,
                                30
                            ],
                            "children": [],
                            "content": "color:int"
                        }
                    ],
                    "content": "(\nneighbours:list[int],colored_vertices:list[int],color:int\n"
                },
                {
                    "type": "ReturnType",
                    "name": "bool",
                    "range": [
                        35,
                        35
                    ],
                    "children": [],
                    "content": "bool"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        37,
                        81
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                38,
                                40
                            ],
                            "children": [],
                            "content": "\"\"\" \\n     For each neighbour check if the coloring constraint is satisfied \\n     If any of the neighbours fail the constraint return False \\n     If all neighbours validate the constraint return True \\n  \\n     >>> neighbours = [0,1,0,1,0] \\n     >>> colored_vertices = [0, 2, 1, 2, 0] \\n  \\n     >>> color = 1 \\n     >>> valid_coloring(neighbours, colored_vertices, color) \\n     True \\n  \\n     >>> color = 2 \\n     >>> valid_coloring(neighbours, colored_vertices, color) \\n     False \\n     \"\"\""
                        },
                        {
                            "type": "Comment",
                            "name": "comment",
                            "range": [
                                42,
                                50
                            ],
                            "children": [],
                            "content": "#Does any neighbour not satisfy the constraints\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                51,
                                80
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "not any",
                                    "range": [
                                        52,
                                        79
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "neighbour == 1 and colored_vertices[i] == color",
                                            "range": [
                                                56,
                                                67
                                            ],
                                            "children": [],
                                            "content": "neighbour==1and colored_vertices[i]==color"
                                        },
                                        {
                                            "type": "ForStatement",
                                            "name": "for i, neighbour in enumerate(neighbours)",
                                            "range": [
                                                69,
                                                77
                                            ],
                                            "children": [],
                                            "content": "for i,neighbour in enumerate(neighbours)"
                                        }
                                    ],
                                    "content": "not any(\nneighbour==1and colored_vertices[i]==color\nfor i,neighbour in enumerate(neighbours)\n)"
                                }
                            ],
                            "content": "return not any(\nneighbour==1and colored_vertices[i]==color\nfor i,neighbour in enumerate(neighbours)\n)\n"
                        }
                    ],
                    "content": "\n\"\"\" \\n     For each neighbour check if the coloring constraint is satisfied \\n     If any of the neighbours fail the constraint return False \\n     If all neighbours validate the constraint return True \\n  \\n     >>> neighbours = [0,1,0,1,0] \\n     >>> colored_vertices = [0, 2, 1, 2, 0] \\n  \\n     >>> color = 1 \\n     >>> valid_coloring(neighbours, colored_vertices, color) \\n     True \\n  \\n     >>> color = 2 \\n     >>> valid_coloring(neighbours, colored_vertices, color) \\n     False \\n     \"\"\"\n#Does any neighbour not satisfy the constraints\nreturn not any(\nneighbour==1and colored_vertices[i]==color\nfor i,neighbour in enumerate(neighbours)\n)\n\n"
                }
            ],
            "content": "def valid_coloring(\nneighbours:list[int],colored_vertices:list[int],color:int\n)->bool:\n\"\"\" \\n     For each neighbour check if the coloring constraint is satisfied \\n     If any of the neighbours fail the constraint return False \\n     If all neighbours validate the constraint return True \\n  \\n     >>> neighbours = [0,1,0,1,0] \\n     >>> colored_vertices = [0, 2, 1, 2, 0] \\n  \\n     >>> color = 1 \\n     >>> valid_coloring(neighbours, colored_vertices, color) \\n     True \\n  \\n     >>> color = 2 \\n     >>> valid_coloring(neighbours, colored_vertices, color) \\n     False \\n     \"\"\"\n#Does any neighbour not satisfy the constraints\nreturn not any(\nneighbour==1and colored_vertices[i]==color\nfor i,neighbour in enumerate(neighbours)\n)\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "util_color",
            "range": [
                82,
                215
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        84,
                        110
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "graph",
                            "range": [
                                86,
                                94
                            ],
                            "children": [],
                            "content": "\ngraph:list[list[int]"
                        },
                        {
                            "type": "Parameter",
                            "name": "max_colors",
                            "range": [
                                96,
                                98
                            ],
                            "children": [],
                            "content": ",max_colors:"
                        },
                        {
                            "type": "Parameter",
                            "name": "colored_vertices",
                            "range": [
                                100,
                                105
                            ],
                            "children": [],
                            "content": ",colored_vertices:list[int"
                        },
                        {
                            "type": "Parameter",
                            "name": "index",
                            "range": [
                                107,
                                109
                            ],
                            "children": [],
                            "content": ",index:"
                        }
                    ],
                    "content": "util_color(\ngraph:list[list[int]],max_colors:int,colored_vertices:list[int],index:int"
                },
                {
                    "type": "ReturnType",
                    "name": "bool",
                    "range": [
                        114,
                        114
                    ],
                    "children": [],
                    "content": ">"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        116,
                        215
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                117,
                                119
                            ],
                            "children": [],
                            "content": "\n\"\"\" \\n     Pseudo-Code \\n  \\n     Base Case: \\n     1. Check if coloring is complete \\n         1.1 If complete return True (meaning that we successfully colored the graph) \\n  \\n     Recursive Step: \\n     2. Iterates over each color: \\n         Check if the current coloring is valid: \\n             2.1. Color given vertex \\n             2.2. Do recursive call, check if this coloring leads to a solution \\n             2.4. if current coloring leads to a solution return \\n             2.5. Uncolor given vertex \\n  \\n     >>> graph = [[0, 1, 0, 0, 0], \\n     ...          [1, 0, 1, 0, 1], \\n     ...          [0, 1, 0, 1, 0], \\n     ...          [0, 1, 1, 0, 0], \\n     ...          [0, 1, 0, 0, 0]] \\n     >>> max_colors = 3 \\n     >>> colored_vertices = [0, 1, 0, 0, 0] \\n     >>> index = 3 \\n  \\n     >>> util_color(graph, max_colors, colored_vertices, index) \\n     True \\n  \\n     >>> max_colors = 2 \\n     >>> util_color(graph, max_colors, colored_vertices, index) \\n     False \\n     \""
                        },
                        {
                            "type": "Comment",
                            "name": "Base Case",
                            "range": [
                                122,
                                124
                            ],
                            "children": [],
                            "content": "\n#Base"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                126,
                                138
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        127,
                                        133
                                    ],
                                    "children": [],
                                    "content": "if index==len(graph"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return",
                                    "range": [
                                        136,
                                        137
                                    ],
                                    "children": [],
                                    "content": "\nreturn"
                                }
                            ],
                            "content": "\nif index==len(graph):\nreturn True"
                        },
                        {
                            "type": "Comment",
                            "name": "Recursive Step",
                            "range": [
                                140,
                                142
                            ],
                            "children": [],
                            "content": "\n#Recursive"
                        },
                        {
                            "type": "ForStatement",
                            "name": "for",
                            "range": [
                                144,
                                211
                            ],
                            "children": [
                                {
                                    "type": "Range",
                                    "name": "range",
                                    "range": [
                                        147,
                                        150
                                    ],
                                    "children": [],
                                    "content": "in range(max_colors"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "if",
                                    "range": [
                                        153,
                                        196
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "condition",
                                            "range": [
                                                154,
                                                164
                                            ],
                                            "children": [],
                                            "content": "if valid_coloring(graph[index],colored_vertices,i"
                                        },
                                        {
                                            "type": "Assignment",
                                            "name": "assignment",
                                            "range": [
                                                172,
                                                177
                                            ],
                                            "children": [],
                                            "content": "\ncolored_vertices[index]="
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if",
                                            "range": [
                                                183,
                                                200
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "condition",
                                                    "range": [
                                                        184,
                                                        195
                                                    ],
                                                    "children": [],
                                                    "content": "if util_color(graph,max_colors,colored_vertices,index+1"
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "name": "return",
                                                    "range": [
                                                        198,
                                                        199
                                                    ],
                                                    "children": [],
                                                    "content": "\nreturn"
                                                }
                                            ],
                                            "content": "\nif util_color(graph,max_colors,colored_vertices,index+1):\nreturn True"
                                        },
                                        {
                                            "type": "Assignment",
                                            "name": "assignment",
                                            "range": [
                                                204,
                                                210
                                            ],
                                            "children": [],
                                            "content": "\ncolored_vertices[index]=-"
                                        }
                                    ],
                                    "content": "\nif valid_coloring(graph[index],colored_vertices,i):\n#Color current vertex\ncolored_vertices[index]=i\n#Validate coloring\nif util_color(graph,max_colors,colored_vertices,index+1)"
                                }
                            ],
                            "content": "\nfor i in range(max_colors):\nif valid_coloring(graph[index],colored_vertices,i):\n#Color current vertex\ncolored_vertices[index]=i\n#Validate coloring\nif util_color(graph,max_colors,colored_vertices,index+1):\nreturn True\n#Backtrack\ncolored_vertices[index]=-1"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                212,
                                213
                            ],
                            "children": [],
                            "content": "\nreturn"
                        }
                    ],
                    "content": ":\n\"\"\" \\n     Pseudo-Code \\n  \\n     Base Case: \\n     1. Check if coloring is complete \\n         1.1 If complete return True (meaning that we successfully colored the graph) \\n  \\n     Recursive Step: \\n     2. Iterates over each color: \\n         Check if the current coloring is valid: \\n             2.1. Color given vertex \\n             2.2. Do recursive call, check if this coloring leads to a solution \\n             2.4. if current coloring leads to a solution return \\n             2.5. Uncolor given vertex \\n  \\n     >>> graph = [[0, 1, 0, 0, 0], \\n     ...          [1, 0, 1, 0, 1], \\n     ...          [0, 1, 0, 1, 0], \\n     ...          [0, 1, 1, 0, 0], \\n     ...          [0, 1, 0, 0, 0]] \\n     >>> max_colors = 3 \\n     >>> colored_vertices = [0, 1, 0, 0, 0] \\n     >>> index = 3 \\n  \\n     >>> util_color(graph, max_colors, colored_vertices, index) \\n     True \\n  \\n     >>> max_colors = 2 \\n     >>> util_color(graph, max_colors, colored_vertices, index) \\n     False \\n     \"\"\"\n\n#Base Case\nif index==len(graph):\nreturn True\n\n#Recursive Step\nfor i in range(max_colors):\nif valid_coloring(graph[index],colored_vertices,i):\n#Color current vertex\ncolored_vertices[index]=i\n#Validate coloring\nif util_color(graph,max_colors,colored_vertices,index+1):\nreturn True\n#Backtrack\ncolored_vertices[index]=-1\nreturn False\n"
                }
            ],
            "content": "\ndef util_color(\ngraph:list[list[int]],max_colors:int,colored_vertices:list[int],index:int\n)->bool:\n\"\"\" \\n     Pseudo-Code \\n  \\n     Base Case: \\n     1. Check if coloring is complete \\n         1.1 If complete return True (meaning that we successfully colored the graph) \\n  \\n     Recursive Step: \\n     2. Iterates over each color: \\n         Check if the current coloring is valid: \\n             2.1. Color given vertex \\n             2.2. Do recursive call, check if this coloring leads to a solution \\n             2.4. if current coloring leads to a solution return \\n             2.5. Uncolor given vertex \\n  \\n     >>> graph = [[0, 1, 0, 0, 0], \\n     ...          [1, 0, 1, 0, 1], \\n     ...          [0, 1, 0, 1, 0], \\n     ...          [0, 1, 1, 0, 0], \\n     ...          [0, 1, 0, 0, 0]] \\n     >>> max_colors = 3 \\n     >>> colored_vertices = [0, 1, 0, 0, 0] \\n     >>> index = 3 \\n  \\n     >>> util_color(graph, max_colors, colored_vertices, index) \\n     True \\n  \\n     >>> max_colors = 2 \\n     >>> util_color(graph, max_colors, colored_vertices, index) \\n     False \\n     \"\"\"\n\n#Base Case\nif index==len(graph):\nreturn True\n\n#Recursive Step\nfor i in range(max_colors):\nif valid_coloring(graph[index],colored_vertices,i):\n#Color current vertex\ncolored_vertices[index]=i\n#Validate coloring\nif util_color(graph,max_colors,colored_vertices,index+1):\nreturn True\n#Backtrack\ncolored_vertices[index]=-1\nreturn False\n"
        },
        {
            "type": "FunctionDecl",
            "name": "color",
            "range": [
                216,
                278
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        218,
                        232
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "graph",
                            "range": [
                                219,
                                227
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "list[list[int]]",
                                    "range": [
                                        221,
                                        227
                                    ],
                                    "children": [],
                                    "content": "graph:list[list[int"
                                }
                            ],
                            "content": "color(graph:list[list[int"
                        },
                        {
                            "type": "Parameter",
                            "name": "max_colors",
                            "range": [
                                229,
                                231
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        231,
                                        231
                                    ],
                                    "children": [],
                                    "content": "max_colors"
                                }
                            ],
                            "content": "],max_colors"
                        }
                    ],
                    "content": "def color(graph:list[list[int]],max_colors:"
                },
                {
                    "type": "ReturnType",
                    "name": "list[int]",
                    "range": [
                        235,
                        238
                    ],
                    "children": [],
                    "content": "->list["
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        240,
                        278
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "colored_vertices",
                            "range": [
                                245,
                                256
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        246,
                                        246
                                    ],
                                    "children": [
                                        {
                                            "type": "ArrayLiteral",
                                            "name": "[-1] * len(graph)",
                                            "range": [
                                                247,
                                                255
                                            ],
                                            "children": [
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "*",
                                                    "range": [
                                                        251,
                                                        251
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArrayLiteral",
                                                            "name": "[-1]",
                                                            "range": [
                                                                247,
                                                                250
                                                            ],
                                                            "children": [],
                                                            "content": "colored_vertices=[-"
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "len(graph)",
                                                            "range": [
                                                                252,
                                                                255
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "graph",
                                                                    "range": [
                                                                        254,
                                                                        254
                                                                    ],
                                                                    "children": [],
                                                                    "content": "len"
                                                                }
                                                            ],
                                                            "content": "]*len("
                                                        }
                                                    ],
                                                    "content": "1"
                                                }
                                            ],
                                            "content": "colored_vertices=[-1]*len("
                                        }
                                    ],
                                    "content": "\n"
                                }
                            ],
                            "content": "\"\"\ncolored_vertices=[-1]*len(graph"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                258,
                                273
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "util_color(graph, max_colors, colored_vertices, 0)",
                                    "range": [
                                        259,
                                        268
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "util_color",
                                            "range": [
                                                259,
                                                268
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "graph",
                                                    "range": [
                                                        261,
                                                        261
                                                    ],
                                                    "children": [],
                                                    "content": "util_color"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "max_colors",
                                                    "range": [
                                                        263,
                                                        263
                                                    ],
                                                    "children": [],
                                                    "content": "graph"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "colored_vertices",
                                                    "range": [
                                                        265,
                                                        265
                                                    ],
                                                    "children": [],
                                                    "content": "max_colors"
                                                },
                                                {
                                                    "type": "NumericLiteral",
                                                    "name": "0",
                                                    "range": [
                                                        267,
                                                        267
                                                    ],
                                                    "children": [],
                                                    "content": "colored_vertices"
                                                }
                                            ],
                                            "content": "\nif util_color(graph,max_colors,colored_vertices,"
                                        }
                                    ],
                                    "content": "\nif util_color(graph,max_colors,colored_vertices,"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "then",
                                    "range": [
                                        270,
                                        273
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return colored_vertices",
                                            "range": [
                                                271,
                                                272
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "colored_vertices",
                                                    "range": [
                                                        272,
                                                        272
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": ":\n"
                                        }
                                    ],
                                    "content": "):\nreturn"
                                }
                            ],
                            "content": "\n\nif util_color(graph,max_colors,colored_vertices,0):\nreturn"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return []",
                            "range": [
                                275,
                                278
                            ],
                            "children": [
                                {
                                    "type": "ArrayLiteral",
                                    "name": "[]",
                                    "range": [
                                        276,
                                        277
                                    ],
                                    "children": [],
                                    "content": "\nreturn"
                                }
                            ],
                            "content": "\n\nreturn["
                        }
                    ],
                    "content": "]:\n\"\"\" \\n     Wrapper function to call subroutine called util_color \\n     which will either return True or False. \\n     If True is returned colored_vertices list is filled with correct colorings \\n  \\n     >>> graph = [[0, 1, 0, 0, 0], \\n     ...          [1, 0, 1, 0, 1], \\n     ...          [0, 1, 0, 1, 0], \\n     ...          [0, 1, 1, 0, 0], \\n     ...          [0, 1, 0, 0, 0]] \\n  \\n     >>> max_colors = 3 \\n     >>> color(graph, max_colors) \\n     [0, 1, 0, 2, 0] \\n  \\n     >>> max_colors = 2 \\n     >>> color(graph, max_colors) \\n     [] \\n     \"\"\"\ncolored_vertices=[-1]*len(graph)\n\nif util_color(graph,max_colors,colored_vertices,0):\nreturn colored_vertices\n\nreturn["
                }
            ],
            "content": "\n\ndef color(graph:list[list[int]],max_colors:int)->list[int]:\n\"\"\" \\n     Wrapper function to call subroutine called util_color \\n     which will either return True or False. \\n     If True is returned colored_vertices list is filled with correct colorings \\n  \\n     >>> graph = [[0, 1, 0, 0, 0], \\n     ...          [1, 0, 1, 0, 1], \\n     ...          [0, 1, 0, 1, 0], \\n     ...          [0, 1, 1, 0, 0], \\n     ...          [0, 1, 0, 0, 0]] \\n  \\n     >>> max_colors = 3 \\n     >>> color(graph, max_colors) \\n     [0, 1, 0, 2, 0] \\n  \\n     >>> max_colors = 2 \\n     >>> color(graph, max_colors) \\n     [] \\n     \"\"\"\ncolored_vertices=[-1]*len(graph)\n\nif util_color(graph,max_colors,colored_vertices,0):\nreturn colored_vertices\n\nreturn["
        }
    ],
    "content": "\"\"\" \\n Graph Coloring also called \" m coloring problem \" \\n consists of coloring a given graph with at most m colors \\n such that no adjacent vertices are assigned the same color \\n  \\n Wikipedia: https://en.wikipedia.org/wiki/Graph_coloring \\n \"\"\"\n\n\ndef valid_coloring(\nneighbours:list[int],colored_vertices:list[int],color:int\n)->bool:\n\"\"\" \\n     For each neighbour check if the coloring constraint is satisfied \\n     If any of the neighbours fail the constraint return False \\n     If all neighbours validate the constraint return True \\n  \\n     >>> neighbours = [0,1,0,1,0] \\n     >>> colored_vertices = [0, 2, 1, 2, 0] \\n  \\n     >>> color = 1 \\n     >>> valid_coloring(neighbours, colored_vertices, color) \\n     True \\n  \\n     >>> color = 2 \\n     >>> valid_coloring(neighbours, colored_vertices, color) \\n     False \\n     \"\"\"\n#Does any neighbour not satisfy the constraints\nreturn not any(\nneighbour==1and colored_vertices[i]==color\nfor i,neighbour in enumerate(neighbours)\n)\n\n\ndef util_color(\ngraph:list[list[int]],max_colors:int,colored_vertices:list[int],index:int\n)->bool:\n\"\"\" \\n     Pseudo-Code \\n  \\n     Base Case: \\n     1. Check if coloring is complete \\n         1.1 If complete return True (meaning that we successfully colored the graph) \\n  \\n     Recursive Step: \\n     2. Iterates over each color: \\n         Check if the current coloring is valid: \\n             2.1. Color given vertex \\n             2.2. Do recursive call, check if this coloring leads to a solution \\n             2.4. if current coloring leads to a solution return \\n             2.5. Uncolor given vertex \\n  \\n     >>> graph = [[0, 1, 0, 0, 0], \\n     ...          [1, 0, 1, 0, 1], \\n     ...          [0, 1, 0, 1, 0], \\n     ...          [0, 1, 1, 0, 0], \\n     ...          [0, 1, 0, 0, 0]] \\n     >>> max_colors = 3 \\n     >>> colored_vertices = [0, 1, 0, 0, 0] \\n     >>> index = 3 \\n  \\n     >>> util_color(graph, max_colors, colored_vertices, index) \\n     True \\n  \\n     >>> max_colors = 2 \\n     >>> util_color(graph, max_colors, colored_vertices, index) \\n     False \\n     \"\"\"\n\n#Base Case\nif index==len(graph):\nreturn True\n\n#Recursive Step\nfor i in range(max_colors):\nif valid_coloring(graph[index],colored_vertices,i):\n#Color current vertex\ncolored_vertices[index]=i\n#Validate coloring\nif util_color(graph,max_colors,colored_vertices,index+1):\nreturn True\n#Backtrack\ncolored_vertices[index]=-1\nreturn False\n\n\ndef color(graph:list[list[int]],max_colors:int)->list[int]:\n\"\"\" \\n     Wrapper function to call subroutine called util_color \\n     which will either return True or False. \\n     If True is returned colored_vertices list is filled with correct colorings \\n  \\n     >>> graph = [[0, 1, 0, 0, 0], \\n     ...          [1, 0, 1, 0, 1], \\n     ...          [0, 1, 0, 1, 0], \\n     ...          [0, 1, 1, 0, 0], \\n     ...          [0, 1, 0, 0, 0]] \\n  \\n     >>> max_colors = 3 \\n     >>> color(graph, max_colors) \\n     [0, 1, 0, 2, 0] \\n  \\n     >>> max_colors = 2 \\n     >>> color(graph, max_colors) \\n     [] \\n     \"\"\"\ncolored_vertices=[-1]*len(graph)\n\nif util_color(graph,max_colors,colored_vertices,0):\nreturn colored_vertices\n\nreturn["
}