{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        1818
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                11
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "datetime",
                    "range": [
                        6,
                        10
                    ],
                    "children": [],
                    "content": "datetime,timedelta,timezone"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "timedelta",
                    "range": [
                        12,
                        20
                    ],
                    "children": [],
                    "content": "from typing import TYPE_CHECKING\n\nfrom pydantic import"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "timezone",
                    "range": [
                        22,
                        29
                    ],
                    "children": [],
                    "content": "\n\nif TYPE_CHECKING:\nfrom backend"
                }
            ],
            "content": "import secrets\nfrom datetime import datetime,timedelta,timezone\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                12,
                16
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "TYPE_CHECKING",
                    "range": [
                        14,
                        27
                    ],
                    "children": [],
                    "content": "import TYPE_CHECKING\n\nfrom pydantic import SecretStr\n\nif TYPE_CHECKING:\n"
                }
            ],
            "content": "from typing import TYPE_CHECKING\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                18,
                22
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "SecretStr",
                    "range": [
                        20,
                        29
                    ],
                    "children": [],
                    "content": "import SecretStr\n\nif TYPE_CHECKING:\nfrom backend"
                }
            ],
            "content": "from pydantic import SecretStr\n"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                24,
                27
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "TYPE_CHECKING",
                    "range": [
                        25,
                        25
                    ],
                    "children": [],
                    "content": "TYPE_CHECKING"
                }
            ],
            "content": "if TYPE_CHECKING:\n"
        },
        {
            "type": "ImportStatement",
            "name": "",
            "range": [
                28,
                36
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "",
                    "range": [
                        28,
                        34
                    ],
                    "children": [
                        {
                            "type": "ModulePath",
                            "name": "",
                            "range": [
                                29,
                                33
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "backend",
                                    "range": [
                                        29,
                                        29
                                    ],
                                    "children": [],
                                    "content": "backend"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "executor",
                                    "range": [
                                        31,
                                        31
                                    ],
                                    "children": [],
                                    "content": "executor"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "database",
                                    "range": [
                                        33,
                                        33
                                    ],
                                    "children": [],
                                    "content": "database"
                                }
                            ],
                            "content": "backend.executor.database"
                        }
                    ],
                    "content": "from backend.executor.database import"
                },
                {
                    "type": "ImportedItem",
                    "name": "DatabaseManager",
                    "range": [
                        35,
                        35
                    ],
                    "children": [],
                    "content": "DatabaseManager"
                }
            ],
            "content": "from backend.executor.database import DatabaseManager\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                57,
                82
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "APIKeyCredentials",
                    "range": [
                        66,
                        66
                    ],
                    "children": [],
                    "content": "APIKeyCredentials"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Credentials",
                    "range": [
                        69,
                        69
                    ],
                    "children": [],
                    "content": "Credentials"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "OAuth2Credentials",
                    "range": [
                        72,
                        72
                    ],
                    "children": [],
                    "content": "OAuth2Credentials"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "OAuthState",
                    "range": [
                        75,
                        75
                    ],
                    "children": [],
                    "content": "OAuthState"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "UserIntegrations",
                    "range": [
                        78,
                        78
                    ],
                    "children": [],
                    "content": "UserIntegrations"
                }
            ],
            "content": "from backend.data.model import(\nAPIKeyCredentials,\nCredentials,\nOAuth2Credentials,\nOAuthState,\nUserIntegrations,\n)\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                83,
                90
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "Settings",
                    "range": [
                        90,
                        90
                    ],
                    "children": [],
                    "content": "Settings"
                },
                {
                    "type": "FromClause",
                    "name": "",
                    "range": [
                        83,
                        88
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "backend.util.settings",
                            "range": [
                                83,
                                88
                            ],
                            "children": [],
                            "content": "from backend.util.settings"
                        }
                    ],
                    "content": "from backend.util.settings"
                }
            ],
            "content": "from backend.util.settings import Settings"
        },
        {
            "type": "VariableDeclaration",
            "name": "settings",
            "range": [
                93,
                97
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        94,
                        97
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "Settings",
                            "range": [
                                95,
                                95
                            ],
                            "children": [],
                            "content": "Settings"
                        }
                    ],
                    "content": "=Settings()"
                }
            ],
            "content": "settings=Settings()"
        },
        {
            "type": "VariableDeclaration",
            "name": "revid_credentials",
            "range": [
                100,
                138
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        101,
                        137
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "APIKeyCredentials",
                            "range": [
                                102,
                                137
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        103,
                                        137
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "id",
                                            "range": [
                                                105,
                                                107
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"fdb7f412-f519-48d1-9b5f-d2f73d0e01fe\"",
                                                    "range": [
                                                        107,
                                                        107
                                                    ],
                                                    "children": [],
                                                    "content": "\"fdb7f412-f519-48d1-9b5f-d2f73d0e01fe\""
                                                }
                                            ],
                                            "content": "id=\"fdb7f412-f519-48d1-9b5f-d2f73d0e01fe\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "provider",
                                            "range": [
                                                110,
                                                112
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"revid\"",
                                                    "range": [
                                                        112,
                                                        112
                                                    ],
                                                    "children": [],
                                                    "content": "\"revid\""
                                                }
                                            ],
                                            "content": "provider=\"revid\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "api_key",
                                            "range": [
                                                115,
                                                124
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "SecretStr",
                                                    "range": [
                                                        117,
                                                        124
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "",
                                                            "range": [
                                                                119,
                                                                123
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "settings",
                                                                    "range": [
                                                                        119,
                                                                        119
                                                                    ],
                                                                    "children": [],
                                                                    "content": "settings"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "secrets",
                                                                    "range": [
                                                                        121,
                                                                        121
                                                                    ],
                                                                    "children": [],
                                                                    "content": "secrets"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "revid_api_key",
                                                                    "range": [
                                                                        123,
                                                                        123
                                                                    ],
                                                                    "children": [],
                                                                    "content": "revid_api_key"
                                                                }
                                                            ],
                                                            "content": "settings.secrets.revid_api_key"
                                                        }
                                                    ],
                                                    "content": "SecretStr(settings.secrets.revid_api_key)"
                                                }
                                            ],
                                            "content": "api_key=SecretStr(settings.secrets.revid_api_key)"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "title",
                                            "range": [
                                                127,
                                                129
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"Use Credits for Revid\"",
                                                    "range": [
                                                        129,
                                                        129
                                                    ],
                                                    "children": [],
                                                    "content": "\"Use Credits for Revid\""
                                                }
                                            ],
                                            "content": "title=\"Use Credits for Revid\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "expires_at",
                                            "range": [
                                                132,
                                                134
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "None",
                                                    "range": [
                                                        134,
                                                        134
                                                    ],
                                                    "children": [],
                                                    "content": "None"
                                                }
                                            ],
                                            "content": "expires_at=None"
                                        }
                                    ],
                                    "content": "(\nid=\"fdb7f412-f519-48d1-9b5f-d2f73d0e01fe\",\nprovider=\"revid\",\napi_key=SecretStr(settings.secrets.revid_api_key),\ntitle=\"Use Credits for Revid\",\nexpires_at=None,\n)"
                                }
                            ],
                            "content": "APIKeyCredentials(\nid=\"fdb7f412-f519-48d1-9b5f-d2f73d0e01fe\",\nprovider=\"revid\",\napi_key=SecretStr(settings.secrets.revid_api_key),\ntitle=\"Use Credits for Revid\",\nexpires_at=None,\n)"
                        }
                    ],
                    "content": "=APIKeyCredentials(\nid=\"fdb7f412-f519-48d1-9b5f-d2f73d0e01fe\",\nprovider=\"revid\",\napi_key=SecretStr(settings.secrets.revid_api_key),\ntitle=\"Use Credits for Revid\",\nexpires_at=None,\n)"
                }
            ],
            "content": "revid_credentials=APIKeyCredentials(\nid=\"fdb7f412-f519-48d1-9b5f-d2f73d0e01fe\",\nprovider=\"revid\",\napi_key=SecretStr(settings.secrets.revid_api_key),\ntitle=\"Use Credits for Revid\",\nexpires_at=None,\n)\n"
        },
        {
            "type": "AssignmentExpression",
            "name": "=",
            "range": [
                140,
                176
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "ideogram_credentials",
                    "range": [
                        139,
                        139
                    ],
                    "children": [],
                    "content": "ideogram_credentials"
                },
                {
                    "type": "CallExpression",
                    "name": "APIKeyCredentials",
                    "range": [
                        141,
                        176
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "id",
                            "range": [
                                144,
                                146
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"760f84fc-b270-42de-91f6-08efe1b512d0\"",
                                    "range": [
                                        146,
                                        146
                                    ],
                                    "children": [],
                                    "content": "\"760f84fc-b270-42de-91f6-08efe1b512d0\""
                                }
                            ],
                            "content": "id=\"760f84fc-b270-42de-91f6-08efe1b512d0\""
                        },
                        {
                            "type": "Argument",
                            "name": "provider",
                            "range": [
                                149,
                                151
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"ideogram\"",
                                    "range": [
                                        151,
                                        151
                                    ],
                                    "children": [],
                                    "content": "\"ideogram\""
                                }
                            ],
                            "content": "provider=\"ideogram\""
                        },
                        {
                            "type": "Argument",
                            "name": "api_key",
                            "range": [
                                154,
                                163
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SecretStr",
                                    "range": [
                                        156,
                                        163
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "settings.secrets.ideogram_api_key",
                                            "range": [
                                                158,
                                                162
                                            ],
                                            "children": [],
                                            "content": "settings.secrets.ideogram_api_key"
                                        }
                                    ],
                                    "content": "SecretStr(settings.secrets.ideogram_api_key)"
                                }
                            ],
                            "content": "api_key=SecretStr(settings.secrets.ideogram_api_key)"
                        },
                        {
                            "type": "Argument",
                            "name": "title",
                            "range": [
                                166,
                                168
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Use Credits for Ideogram\"",
                                    "range": [
                                        168,
                                        168
                                    ],
                                    "children": [],
                                    "content": "\"Use Credits for Ideogram\""
                                }
                            ],
                            "content": "title=\"Use Credits for Ideogram\""
                        },
                        {
                            "type": "Argument",
                            "name": "expires_at",
                            "range": [
                                171,
                                173
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "None",
                                    "range": [
                                        173,
                                        173
                                    ],
                                    "children": [],
                                    "content": "None"
                                }
                            ],
                            "content": "expires_at=None"
                        }
                    ],
                    "content": "APIKeyCredentials(\nid=\"760f84fc-b270-42de-91f6-08efe1b512d0\",\nprovider=\"ideogram\",\napi_key=SecretStr(settings.secrets.ideogram_api_key),\ntitle=\"Use Credits for Ideogram\",\nexpires_at=None,\n)"
                }
            ],
            "content": "=APIKeyCredentials(\nid=\"760f84fc-b270-42de-91f6-08efe1b512d0\",\nprovider=\"ideogram\",\napi_key=SecretStr(settings.secrets.ideogram_api_key),\ntitle=\"Use Credits for Ideogram\",\nexpires_at=None,\n)"
        },
        {
            "type": "AssignmentExpression",
            "name": "=",
            "range": [
                178,
                216
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "replicate_credentials",
                    "range": [
                        178,
                        178
                    ],
                    "children": [],
                    "content": "replicate_credentials"
                },
                {
                    "type": "CallExpression",
                    "name": "APIKeyCredentials",
                    "range": [
                        180,
                        215
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "id",
                            "range": [
                                183,
                                185
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"6b9fc200-4726-4973-86c9-cd526f5ce5db\"",
                                    "range": [
                                        185,
                                        185
                                    ],
                                    "children": [],
                                    "content": "\"6b9fc200-4726-4973-86c9-cd526f5ce5db\""
                                }
                            ],
                            "content": "id=\"6b9fc200-4726-4973-86c9-cd526f5ce5db\""
                        },
                        {
                            "type": "Argument",
                            "name": "provider",
                            "range": [
                                188,
                                190
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"replicate\"",
                                    "range": [
                                        190,
                                        190
                                    ],
                                    "children": [],
                                    "content": "\"replicate\""
                                }
                            ],
                            "content": "provider=\"replicate\""
                        },
                        {
                            "type": "Argument",
                            "name": "api_key",
                            "range": [
                                193,
                                202
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SecretStr",
                                    "range": [
                                        195,
                                        202
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "settings.secrets.replicate_api_key",
                                            "range": [
                                                197,
                                                201
                                            ],
                                            "children": [],
                                            "content": "settings.secrets.replicate_api_key"
                                        }
                                    ],
                                    "content": "SecretStr(settings.secrets.replicate_api_key)"
                                }
                            ],
                            "content": "api_key=SecretStr(settings.secrets.replicate_api_key)"
                        },
                        {
                            "type": "Argument",
                            "name": "title",
                            "range": [
                                205,
                                207
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Use Credits for Replicate\"",
                                    "range": [
                                        207,
                                        207
                                    ],
                                    "children": [],
                                    "content": "\"Use Credits for Replicate\""
                                }
                            ],
                            "content": "title=\"Use Credits for Replicate\""
                        },
                        {
                            "type": "Argument",
                            "name": "expires_at",
                            "range": [
                                210,
                                212
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "None",
                                    "range": [
                                        212,
                                        212
                                    ],
                                    "children": [],
                                    "content": "None"
                                }
                            ],
                            "content": "expires_at=None"
                        }
                    ],
                    "content": "APIKeyCredentials(\nid=\"6b9fc200-4726-4973-86c9-cd526f5ce5db\",\nprovider=\"replicate\",\napi_key=SecretStr(settings.secrets.replicate_api_key),\ntitle=\"Use Credits for Replicate\",\nexpires_at=None,\n)"
                }
            ],
            "content": "replicate_credentials=APIKeyCredentials(\nid=\"6b9fc200-4726-4973-86c9-cd526f5ce5db\",\nprovider=\"replicate\",\napi_key=SecretStr(settings.secrets.replicate_api_key),\ntitle=\"Use Credits for Replicate\",\nexpires_at=None,\n)\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "openai_credentials",
            "range": [
                217,
                255
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        218,
                        254
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "APIKeyCredentials",
                            "range": [
                                219,
                                254
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        220,
                                        254
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "id",
                                            "range": [
                                                222,
                                                224
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"53c25cb8-e3ee-465c-a4d1-e75a4c899c2a\"",
                                                    "range": [
                                                        224,
                                                        224
                                                    ],
                                                    "children": [],
                                                    "content": "\"53c25cb8-e3ee-465c-a4d1-e75a4c899c2a\""
                                                }
                                            ],
                                            "content": "id=\"53c25cb8-e3ee-465c-a4d1-e75a4c899c2a\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "provider",
                                            "range": [
                                                227,
                                                229
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"openai\"",
                                                    "range": [
                                                        229,
                                                        229
                                                    ],
                                                    "children": [],
                                                    "content": "\"openai\""
                                                }
                                            ],
                                            "content": "provider=\"openai\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "api_key",
                                            "range": [
                                                232,
                                                241
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "SecretStr",
                                                    "range": [
                                                        234,
                                                        241
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "",
                                                            "range": [
                                                                236,
                                                                240
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "settings",
                                                                    "range": [
                                                                        236,
                                                                        236
                                                                    ],
                                                                    "children": [],
                                                                    "content": "settings"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "secrets",
                                                                    "range": [
                                                                        238,
                                                                        238
                                                                    ],
                                                                    "children": [],
                                                                    "content": "secrets"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "openai_api_key",
                                                                    "range": [
                                                                        240,
                                                                        240
                                                                    ],
                                                                    "children": [],
                                                                    "content": "openai_api_key"
                                                                }
                                                            ],
                                                            "content": "settings.secrets.openai_api_key"
                                                        }
                                                    ],
                                                    "content": "SecretStr(settings.secrets.openai_api_key)"
                                                }
                                            ],
                                            "content": "api_key=SecretStr(settings.secrets.openai_api_key)"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "title",
                                            "range": [
                                                244,
                                                246
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"Use Credits for OpenAI\"",
                                                    "range": [
                                                        246,
                                                        246
                                                    ],
                                                    "children": [],
                                                    "content": "\"Use Credits for OpenAI\""
                                                }
                                            ],
                                            "content": "title=\"Use Credits for OpenAI\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "expires_at",
                                            "range": [
                                                249,
                                                251
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "None",
                                                    "range": [
                                                        251,
                                                        251
                                                    ],
                                                    "children": [],
                                                    "content": "None"
                                                }
                                            ],
                                            "content": "expires_at=None"
                                        }
                                    ],
                                    "content": "(\nid=\"53c25cb8-e3ee-465c-a4d1-e75a4c899c2a\",\nprovider=\"openai\",\napi_key=SecretStr(settings.secrets.openai_api_key),\ntitle=\"Use Credits for OpenAI\",\nexpires_at=None,\n)"
                                }
                            ],
                            "content": "APIKeyCredentials(\nid=\"53c25cb8-e3ee-465c-a4d1-e75a4c899c2a\",\nprovider=\"openai\",\napi_key=SecretStr(settings.secrets.openai_api_key),\ntitle=\"Use Credits for OpenAI\",\nexpires_at=None,\n)"
                        }
                    ],
                    "content": "=APIKeyCredentials(\nid=\"53c25cb8-e3ee-465c-a4d1-e75a4c899c2a\",\nprovider=\"openai\",\napi_key=SecretStr(settings.secrets.openai_api_key),\ntitle=\"Use Credits for OpenAI\",\nexpires_at=None,\n)"
                }
            ],
            "content": "openai_credentials=APIKeyCredentials(\nid=\"53c25cb8-e3ee-465c-a4d1-e75a4c899c2a\",\nprovider=\"openai\",\napi_key=SecretStr(settings.secrets.openai_api_key),\ntitle=\"Use Credits for OpenAI\",\nexpires_at=None,\n)\n"
        },
        {
            "type": "AssignmentExpression",
            "name": "=",
            "range": [
                256,
                294
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "anthropic_credentials",
                    "range": [
                        256,
                        256
                    ],
                    "children": [],
                    "content": "anthropic_credentials"
                },
                {
                    "type": "CallExpression",
                    "name": "APIKeyCredentials",
                    "range": [
                        258,
                        293
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "id",
                            "range": [
                                261,
                                263
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"24e5d942-d9e3-4798-8151-90143ee55629\"",
                                    "range": [
                                        263,
                                        263
                                    ],
                                    "children": [],
                                    "content": "\"24e5d942-d9e3-4798-8151-90143ee55629\""
                                }
                            ],
                            "content": "id=\"24e5d942-d9e3-4798-8151-90143ee55629\""
                        },
                        {
                            "type": "Argument",
                            "name": "provider",
                            "range": [
                                266,
                                268
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"anthropic\"",
                                    "range": [
                                        268,
                                        268
                                    ],
                                    "children": [],
                                    "content": "\"anthropic\""
                                }
                            ],
                            "content": "provider=\"anthropic\""
                        },
                        {
                            "type": "Argument",
                            "name": "api_key",
                            "range": [
                                271,
                                280
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SecretStr",
                                    "range": [
                                        273,
                                        280
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "settings.secrets.anthropic_api_key",
                                            "range": [
                                                275,
                                                279
                                            ],
                                            "children": [],
                                            "content": "settings.secrets.anthropic_api_key"
                                        }
                                    ],
                                    "content": "SecretStr(settings.secrets.anthropic_api_key)"
                                }
                            ],
                            "content": "api_key=SecretStr(settings.secrets.anthropic_api_key)"
                        },
                        {
                            "type": "Argument",
                            "name": "title",
                            "range": [
                                283,
                                285
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Use Credits for Anthropic\"",
                                    "range": [
                                        285,
                                        285
                                    ],
                                    "children": [],
                                    "content": "\"Use Credits for Anthropic\""
                                }
                            ],
                            "content": "title=\"Use Credits for Anthropic\""
                        },
                        {
                            "type": "Argument",
                            "name": "expires_at",
                            "range": [
                                288,
                                290
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "None",
                                    "range": [
                                        290,
                                        290
                                    ],
                                    "children": [],
                                    "content": "None"
                                }
                            ],
                            "content": "expires_at=None"
                        }
                    ],
                    "content": "APIKeyCredentials(\nid=\"24e5d942-d9e3-4798-8151-90143ee55629\",\nprovider=\"anthropic\",\napi_key=SecretStr(settings.secrets.anthropic_api_key),\ntitle=\"Use Credits for Anthropic\",\nexpires_at=None,\n)"
                }
            ],
            "content": "anthropic_credentials=APIKeyCredentials(\nid=\"24e5d942-d9e3-4798-8151-90143ee55629\",\nprovider=\"anthropic\",\napi_key=SecretStr(settings.secrets.anthropic_api_key),\ntitle=\"Use Credits for Anthropic\",\nexpires_at=None,\n)\n"
        },
        {
            "type": "VariableDecl",
            "name": "groq_credentials",
            "range": [
                295,
                333
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        296,
                        332
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "APIKeyCredentials",
                            "range": [
                                297,
                                332
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        298,
                                        332
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "id",
                                            "range": [
                                                300,
                                                302
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"4ec22295-8f97-4dd1-b42b-2c6957a02545\"",
                                                    "range": [
                                                        302,
                                                        302
                                                    ],
                                                    "children": [],
                                                    "content": "\"4ec22295-8f97-4dd1-b42b-2c6957a02545\""
                                                }
                                            ],
                                            "content": "id=\"4ec22295-8f97-4dd1-b42b-2c6957a02545\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "provider",
                                            "range": [
                                                305,
                                                307
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"groq\"",
                                                    "range": [
                                                        307,
                                                        307
                                                    ],
                                                    "children": [],
                                                    "content": "\"groq\""
                                                }
                                            ],
                                            "content": "provider=\"groq\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "api_key",
                                            "range": [
                                                310,
                                                319
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "SecretStr",
                                                    "range": [
                                                        312,
                                                        319
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "",
                                                            "range": [
                                                                314,
                                                                318
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "settings",
                                                                    "range": [
                                                                        314,
                                                                        314
                                                                    ],
                                                                    "children": [],
                                                                    "content": "settings"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "secrets",
                                                                    "range": [
                                                                        316,
                                                                        316
                                                                    ],
                                                                    "children": [],
                                                                    "content": "secrets"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "groq_api_key",
                                                                    "range": [
                                                                        318,
                                                                        318
                                                                    ],
                                                                    "children": [],
                                                                    "content": "groq_api_key"
                                                                }
                                                            ],
                                                            "content": "settings.secrets.groq_api_key"
                                                        }
                                                    ],
                                                    "content": "SecretStr(settings.secrets.groq_api_key)"
                                                }
                                            ],
                                            "content": "api_key=SecretStr(settings.secrets.groq_api_key)"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "title",
                                            "range": [
                                                322,
                                                324
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"Use Credits for Groq\"",
                                                    "range": [
                                                        324,
                                                        324
                                                    ],
                                                    "children": [],
                                                    "content": "\"Use Credits for Groq\""
                                                }
                                            ],
                                            "content": "title=\"Use Credits for Groq\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "expires_at",
                                            "range": [
                                                327,
                                                329
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "None",
                                                    "range": [
                                                        329,
                                                        329
                                                    ],
                                                    "children": [],
                                                    "content": "None"
                                                }
                                            ],
                                            "content": "expires_at=None"
                                        }
                                    ],
                                    "content": "(\nid=\"4ec22295-8f97-4dd1-b42b-2c6957a02545\",\nprovider=\"groq\",\napi_key=SecretStr(settings.secrets.groq_api_key),\ntitle=\"Use Credits for Groq\",\nexpires_at=None,\n)"
                                }
                            ],
                            "content": "APIKeyCredentials(\nid=\"4ec22295-8f97-4dd1-b42b-2c6957a02545\",\nprovider=\"groq\",\napi_key=SecretStr(settings.secrets.groq_api_key),\ntitle=\"Use Credits for Groq\",\nexpires_at=None,\n)"
                        }
                    ],
                    "content": "=APIKeyCredentials(\nid=\"4ec22295-8f97-4dd1-b42b-2c6957a02545\",\nprovider=\"groq\",\napi_key=SecretStr(settings.secrets.groq_api_key),\ntitle=\"Use Credits for Groq\",\nexpires_at=None,\n)"
                }
            ],
            "content": "groq_credentials=APIKeyCredentials(\nid=\"4ec22295-8f97-4dd1-b42b-2c6957a02545\",\nprovider=\"groq\",\napi_key=SecretStr(settings.secrets.groq_api_key),\ntitle=\"Use Credits for Groq\",\nexpires_at=None,\n)\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "did_credentials",
            "range": [
                334,
                372
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        335,
                        371
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "APIKeyCredentials",
                            "range": [
                                336,
                                371
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        337,
                                        371
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "id",
                                            "range": [
                                                339,
                                                341
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"7f7b0654-c36b-4565-8fa7-9a52575dfae2\"",
                                                    "range": [
                                                        341,
                                                        341
                                                    ],
                                                    "children": [],
                                                    "content": "\"7f7b0654-c36b-4565-8fa7-9a52575dfae2\""
                                                }
                                            ],
                                            "content": "id=\"7f7b0654-c36b-4565-8fa7-9a52575dfae2\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "provider",
                                            "range": [
                                                344,
                                                346
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"d_id\"",
                                                    "range": [
                                                        346,
                                                        346
                                                    ],
                                                    "children": [],
                                                    "content": "\"d_id\""
                                                }
                                            ],
                                            "content": "provider=\"d_id\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "api_key",
                                            "range": [
                                                349,
                                                358
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "SecretStr",
                                                    "range": [
                                                        351,
                                                        358
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "",
                                                            "range": [
                                                                353,
                                                                357
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "settings",
                                                                    "range": [
                                                                        353,
                                                                        353
                                                                    ],
                                                                    "children": [],
                                                                    "content": "settings"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "secrets",
                                                                    "range": [
                                                                        355,
                                                                        355
                                                                    ],
                                                                    "children": [],
                                                                    "content": "secrets"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "did_api_key",
                                                                    "range": [
                                                                        357,
                                                                        357
                                                                    ],
                                                                    "children": [],
                                                                    "content": "did_api_key"
                                                                }
                                                            ],
                                                            "content": "settings.secrets.did_api_key"
                                                        }
                                                    ],
                                                    "content": "SecretStr(settings.secrets.did_api_key)"
                                                }
                                            ],
                                            "content": "api_key=SecretStr(settings.secrets.did_api_key)"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "title",
                                            "range": [
                                                361,
                                                363
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"Use Credits for D-ID\"",
                                                    "range": [
                                                        363,
                                                        363
                                                    ],
                                                    "children": [],
                                                    "content": "\"Use Credits for D-ID\""
                                                }
                                            ],
                                            "content": "title=\"Use Credits for D-ID\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "expires_at",
                                            "range": [
                                                366,
                                                368
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "None",
                                                    "range": [
                                                        368,
                                                        368
                                                    ],
                                                    "children": [],
                                                    "content": "None"
                                                }
                                            ],
                                            "content": "expires_at=None"
                                        }
                                    ],
                                    "content": "(\nid=\"7f7b0654-c36b-4565-8fa7-9a52575dfae2\",\nprovider=\"d_id\",\napi_key=SecretStr(settings.secrets.did_api_key),\ntitle=\"Use Credits for D-ID\",\nexpires_at=None,\n)"
                                }
                            ],
                            "content": "APIKeyCredentials(\nid=\"7f7b0654-c36b-4565-8fa7-9a52575dfae2\",\nprovider=\"d_id\",\napi_key=SecretStr(settings.secrets.did_api_key),\ntitle=\"Use Credits for D-ID\",\nexpires_at=None,\n)"
                        }
                    ],
                    "content": "=APIKeyCredentials(\nid=\"7f7b0654-c36b-4565-8fa7-9a52575dfae2\",\nprovider=\"d_id\",\napi_key=SecretStr(settings.secrets.did_api_key),\ntitle=\"Use Credits for D-ID\",\nexpires_at=None,\n)"
                }
            ],
            "content": "did_credentials=APIKeyCredentials(\nid=\"7f7b0654-c36b-4565-8fa7-9a52575dfae2\",\nprovider=\"d_id\",\napi_key=SecretStr(settings.secrets.did_api_key),\ntitle=\"Use Credits for D-ID\",\nexpires_at=None,\n)\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "jina_credentials",
            "range": [
                373,
                411
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        374,
                        410
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "APIKeyCredentials",
                            "range": [
                                375,
                                410
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        376,
                                        410
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "id",
                                            "range": [
                                                378,
                                                380
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"7f26de70-ba0d-494e-ba76-238e65e7b45f\"",
                                                    "range": [
                                                        380,
                                                        380
                                                    ],
                                                    "children": [],
                                                    "content": "\"7f26de70-ba0d-494e-ba76-238e65e7b45f\""
                                                }
                                            ],
                                            "content": "id=\"7f26de70-ba0d-494e-ba76-238e65e7b45f\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "provider",
                                            "range": [
                                                383,
                                                385
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"jina\"",
                                                    "range": [
                                                        385,
                                                        385
                                                    ],
                                                    "children": [],
                                                    "content": "\"jina\""
                                                }
                                            ],
                                            "content": "provider=\"jina\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "api_key",
                                            "range": [
                                                388,
                                                397
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "SecretStr",
                                                    "range": [
                                                        390,
                                                        397
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "",
                                                            "range": [
                                                                392,
                                                                396
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "settings",
                                                                    "range": [
                                                                        392,
                                                                        392
                                                                    ],
                                                                    "children": [],
                                                                    "content": "settings"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "secrets",
                                                                    "range": [
                                                                        394,
                                                                        394
                                                                    ],
                                                                    "children": [],
                                                                    "content": "secrets"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "jina_api_key",
                                                                    "range": [
                                                                        396,
                                                                        396
                                                                    ],
                                                                    "children": [],
                                                                    "content": "jina_api_key"
                                                                }
                                                            ],
                                                            "content": "settings.secrets.jina_api_key"
                                                        }
                                                    ],
                                                    "content": "SecretStr(settings.secrets.jina_api_key)"
                                                }
                                            ],
                                            "content": "api_key=SecretStr(settings.secrets.jina_api_key)"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "title",
                                            "range": [
                                                400,
                                                402
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"Use Credits for Jina\"",
                                                    "range": [
                                                        402,
                                                        402
                                                    ],
                                                    "children": [],
                                                    "content": "\"Use Credits for Jina\""
                                                }
                                            ],
                                            "content": "title=\"Use Credits for Jina\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "expires_at",
                                            "range": [
                                                405,
                                                407
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "None",
                                                    "range": [
                                                        407,
                                                        407
                                                    ],
                                                    "children": [],
                                                    "content": "None"
                                                }
                                            ],
                                            "content": "expires_at=None"
                                        }
                                    ],
                                    "content": "(\nid=\"7f26de70-ba0d-494e-ba76-238e65e7b45f\",\nprovider=\"jina\",\napi_key=SecretStr(settings.secrets.jina_api_key),\ntitle=\"Use Credits for Jina\",\nexpires_at=None,\n)"
                                }
                            ],
                            "content": "APIKeyCredentials(\nid=\"7f26de70-ba0d-494e-ba76-238e65e7b45f\",\nprovider=\"jina\",\napi_key=SecretStr(settings.secrets.jina_api_key),\ntitle=\"Use Credits for Jina\",\nexpires_at=None,\n)"
                        }
                    ],
                    "content": "=APIKeyCredentials(\nid=\"7f26de70-ba0d-494e-ba76-238e65e7b45f\",\nprovider=\"jina\",\napi_key=SecretStr(settings.secrets.jina_api_key),\ntitle=\"Use Credits for Jina\",\nexpires_at=None,\n)"
                }
            ],
            "content": "jina_credentials=APIKeyCredentials(\nid=\"7f26de70-ba0d-494e-ba76-238e65e7b45f\",\nprovider=\"jina\",\napi_key=SecretStr(settings.secrets.jina_api_key),\ntitle=\"Use Credits for Jina\",\nexpires_at=None,\n)\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "unreal_credentials",
            "range": [
                412,
                450
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        413,
                        449
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "APIKeyCredentials",
                            "range": [
                                414,
                                449
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        415,
                                        449
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "id",
                                            "range": [
                                                417,
                                                419
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "",
                                                    "range": [
                                                        419,
                                                        419
                                                    ],
                                                    "children": [],
                                                    "content": "\"66f20754-1b81-48e4-91d0-f4f0dd82145f\""
                                                }
                                            ],
                                            "content": "id=\"66f20754-1b81-48e4-91d0-f4f0dd82145f\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "provider",
                                            "range": [
                                                422,
                                                424
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "",
                                                    "range": [
                                                        424,
                                                        424
                                                    ],
                                                    "children": [],
                                                    "content": "\"unreal\""
                                                }
                                            ],
                                            "content": "provider=\"unreal\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "api_key",
                                            "range": [
                                                427,
                                                436
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "SecretStr",
                                                    "range": [
                                                        429,
                                                        436
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "",
                                                            "range": [
                                                                431,
                                                                435
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "settings",
                                                                    "range": [
                                                                        431,
                                                                        431
                                                                    ],
                                                                    "children": [],
                                                                    "content": "settings"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "secrets",
                                                                    "range": [
                                                                        433,
                                                                        433
                                                                    ],
                                                                    "children": [],
                                                                    "content": "secrets"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "unreal_speech_api_key",
                                                                    "range": [
                                                                        435,
                                                                        435
                                                                    ],
                                                                    "children": [],
                                                                    "content": "unreal_speech_api_key"
                                                                }
                                                            ],
                                                            "content": "settings.secrets.unreal_speech_api_key"
                                                        }
                                                    ],
                                                    "content": "SecretStr(settings.secrets.unreal_speech_api_key)"
                                                }
                                            ],
                                            "content": "api_key=SecretStr(settings.secrets.unreal_speech_api_key)"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "title",
                                            "range": [
                                                439,
                                                441
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "",
                                                    "range": [
                                                        441,
                                                        441
                                                    ],
                                                    "children": [],
                                                    "content": "\"Use Credits for Unreal\""
                                                }
                                            ],
                                            "content": "title=\"Use Credits for Unreal\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "expires_at",
                                            "range": [
                                                444,
                                                446
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "None",
                                                    "range": [
                                                        446,
                                                        446
                                                    ],
                                                    "children": [],
                                                    "content": "None"
                                                }
                                            ],
                                            "content": "expires_at=None"
                                        }
                                    ],
                                    "content": "(\nid=\"66f20754-1b81-48e4-91d0-f4f0dd82145f\",\nprovider=\"unreal\",\napi_key=SecretStr(settings.secrets.unreal_speech_api_key),\ntitle=\"Use Credits for Unreal\",\nexpires_at=None,\n)"
                                }
                            ],
                            "content": "APIKeyCredentials(\nid=\"66f20754-1b81-48e4-91d0-f4f0dd82145f\",\nprovider=\"unreal\",\napi_key=SecretStr(settings.secrets.unreal_speech_api_key),\ntitle=\"Use Credits for Unreal\",\nexpires_at=None,\n)"
                        }
                    ],
                    "content": "=APIKeyCredentials(\nid=\"66f20754-1b81-48e4-91d0-f4f0dd82145f\",\nprovider=\"unreal\",\napi_key=SecretStr(settings.secrets.unreal_speech_api_key),\ntitle=\"Use Credits for Unreal\",\nexpires_at=None,\n)"
                }
            ],
            "content": "unreal_credentials=APIKeyCredentials(\nid=\"66f20754-1b81-48e4-91d0-f4f0dd82145f\",\nprovider=\"unreal\",\napi_key=SecretStr(settings.secrets.unreal_speech_api_key),\ntitle=\"Use Credits for Unreal\",\nexpires_at=None,\n)\n"
        },
        {
            "type": "AssignmentExpression",
            "name": "=",
            "range": [
                451,
                489
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "open_router_credentials",
                    "range": [
                        451,
                        451
                    ],
                    "children": [],
                    "content": "open_router_credentials"
                },
                {
                    "type": "CallExpression",
                    "name": "APIKeyCredentials",
                    "range": [
                        453,
                        488
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "id",
                            "range": [
                                456,
                                458
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"b5a0e27d-0c98-4df3-a4b9-10193e1f3c40\"",
                                    "range": [
                                        458,
                                        458
                                    ],
                                    "children": [],
                                    "content": "\"b5a0e27d-0c98-4df3-a4b9-10193e1f3c40\""
                                }
                            ],
                            "content": "id=\"b5a0e27d-0c98-4df3-a4b9-10193e1f3c40\""
                        },
                        {
                            "type": "Argument",
                            "name": "provider",
                            "range": [
                                461,
                                463
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"open_router\"",
                                    "range": [
                                        463,
                                        463
                                    ],
                                    "children": [],
                                    "content": "\"open_router\""
                                }
                            ],
                            "content": "provider=\"open_router\""
                        },
                        {
                            "type": "Argument",
                            "name": "api_key",
                            "range": [
                                466,
                                475
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SecretStr",
                                    "range": [
                                        468,
                                        475
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": ".",
                                            "range": [
                                                470,
                                                474
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "settings",
                                                    "range": [
                                                        470,
                                                        470
                                                    ],
                                                    "children": [],
                                                    "content": "settings"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "secrets",
                                                    "range": [
                                                        472,
                                                        472
                                                    ],
                                                    "children": [],
                                                    "content": "secrets"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "open_router_api_key",
                                                    "range": [
                                                        474,
                                                        474
                                                    ],
                                                    "children": [],
                                                    "content": "open_router_api_key"
                                                }
                                            ],
                                            "content": "settings.secrets.open_router_api_key"
                                        }
                                    ],
                                    "content": "SecretStr(settings.secrets.open_router_api_key)"
                                }
                            ],
                            "content": "api_key=SecretStr(settings.secrets.open_router_api_key)"
                        },
                        {
                            "type": "Argument",
                            "name": "title",
                            "range": [
                                478,
                                480
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Use Credits for Open Router\"",
                                    "range": [
                                        480,
                                        480
                                    ],
                                    "children": [],
                                    "content": "\"Use Credits for Open Router\""
                                }
                            ],
                            "content": "title=\"Use Credits for Open Router\""
                        },
                        {
                            "type": "Argument",
                            "name": "expires_at",
                            "range": [
                                483,
                                485
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "None",
                                    "range": [
                                        485,
                                        485
                                    ],
                                    "children": [],
                                    "content": "None"
                                }
                            ],
                            "content": "expires_at=None"
                        }
                    ],
                    "content": "APIKeyCredentials(\nid=\"b5a0e27d-0c98-4df3-a4b9-10193e1f3c40\",\nprovider=\"open_router\",\napi_key=SecretStr(settings.secrets.open_router_api_key),\ntitle=\"Use Credits for Open Router\",\nexpires_at=None,\n)"
                }
            ],
            "content": "open_router_credentials=APIKeyCredentials(\nid=\"b5a0e27d-0c98-4df3-a4b9-10193e1f3c40\",\nprovider=\"open_router\",\napi_key=SecretStr(settings.secrets.open_router_api_key),\ntitle=\"Use Credits for Open Router\",\nexpires_at=None,\n)\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "DEFAULT_CREDENTIALS",
            "range": [
                492,
                526
            ],
            "children": [
                {
                    "type": "ArrayExpression",
                    "name": "",
                    "range": [
                        494,
                        526
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "revid_credentials",
                            "range": [
                                496,
                                496
                            ],
                            "children": [],
                            "content": "revid_credentials"
                        },
                        {
                            "type": "Identifier",
                            "name": "ideogram_credentials",
                            "range": [
                                499,
                                499
                            ],
                            "children": [],
                            "content": "ideogram_credentials"
                        },
                        {
                            "type": "Identifier",
                            "name": "replicate_credentials",
                            "range": [
                                502,
                                502
                            ],
                            "children": [],
                            "content": "replicate_credentials"
                        },
                        {
                            "type": "Identifier",
                            "name": "openai_credentials",
                            "range": [
                                505,
                                505
                            ],
                            "children": [],
                            "content": "openai_credentials"
                        },
                        {
                            "type": "Identifier",
                            "name": "anthropic_credentials",
                            "range": [
                                508,
                                508
                            ],
                            "children": [],
                            "content": "anthropic_credentials"
                        },
                        {
                            "type": "Identifier",
                            "name": "groq_credentials",
                            "range": [
                                511,
                                511
                            ],
                            "children": [],
                            "content": "groq_credentials"
                        },
                        {
                            "type": "Identifier",
                            "name": "did_credentials",
                            "range": [
                                514,
                                514
                            ],
                            "children": [],
                            "content": "did_credentials"
                        },
                        {
                            "type": "Identifier",
                            "name": "jina_credentials",
                            "range": [
                                517,
                                517
                            ],
                            "children": [],
                            "content": "jina_credentials"
                        },
                        {
                            "type": "Identifier",
                            "name": "unreal_credentials",
                            "range": [
                                520,
                                520
                            ],
                            "children": [],
                            "content": "unreal_credentials"
                        },
                        {
                            "type": "Identifier",
                            "name": "open_router_credentials",
                            "range": [
                                523,
                                523
                            ],
                            "children": [],
                            "content": "open_router_credentials"
                        }
                    ],
                    "content": "[\nrevid_credentials,\nideogram_credentials,\nreplicate_credentials,\nopenai_credentials,\nanthropic_credentials,\ngroq_credentials,\ndid_credentials,\njina_credentials,\nunreal_credentials,\nopen_router_credentials,\n]"
                }
            ],
            "content": "DEFAULT_CREDENTIALS=[\nrevid_credentials,\nideogram_credentials,\nreplicate_credentials,\nopenai_credentials,\nanthropic_credentials,\ngroq_credentials,\ndid_credentials,\njina_credentials,\nunreal_credentials,\nopen_router_credentials,\n]"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                534,
                561
            ],
            "children": [
                {
                    "type": "ImportStatement",
                    "name": "from backend.data.redis import get_redis",
                    "range": [
                        541,
                        549
                    ],
                    "children": [],
                    "content": "from backend.data.redis import get_redis\n"
                },
                {
                    "type": "AssignmentStatement",
                    "name": "self.locks = RedisKeyedMutex(get_redis())",
                    "range": [
                        551,
                        561
                    ],
                    "children": [],
                    "content": "self.locks=RedisKeyedMutex(get_redis())\n"
                }
            ],
            "content": "def __init__(self):\nfrom backend.data.redis import get_redis\n\nself.locks=RedisKeyedMutex(get_redis())\n"
        },
        {
            "type": "FunctionDecl",
            "name": "db_manager",
            "range": [
                569,
                603
            ],
            "children": [
                {
                    "type": "ImportStatement",
                    "name": "from backend.executor.database import DatabaseManager",
                    "range": [
                        579,
                        587
                    ],
                    "children": [],
                    "content": "from backend.executor.database import DatabaseManager\n"
                },
                {
                    "type": "ImportStatement",
                    "name": "from backend.util.service import get_service_client",
                    "range": [
                        588,
                        596
                    ],
                    "children": [],
                    "content": "from backend.util.service import get_service_client\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return get_service_client(DatabaseManager)",
                    "range": [
                        598,
                        603
                    ],
                    "children": [],
                    "content": "return get_service_client(DatabaseManager)\n"
                }
            ],
            "content": "def db_manager(self)->\"DatabaseManager\":\nfrom backend.executor.database import DatabaseManager\nfrom backend.util.service import get_service_client\n\nreturn get_service_client(DatabaseManager)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "add_creds",
            "range": [
                605,
                677
            ],
            "children": [
                {
                    "type": "WithStatement",
                    "name": "with self.locked_user_integrations(user_id)",
                    "range": [
                        623,
                        631
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if self.get_creds_by_id(user_id credentials.id)",
                            "range": [
                                632,
                                644
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise ValueError(f\"Can not re-create existing credentials #{credentials.id} \" f\"for user #{user_id}\")",
                                    "range": [
                                        645,
                                        656
                                    ],
                                    "children": [],
                                    "content": "raise ValueError(\nf \"Can not re-create existing credentials #{credentials.id} \"\nf \"for user #{user_id}\"\n)\n"
                                }
                            ],
                            "content": "if self.get_creds_by_id(user_id,credentials.id):\n"
                        },
                        {
                            "type": "AssignmentStatement",
                            "name": "self._set_user_integration_creds(user_id [*self.get_all_creds(user_id) credentials])",
                            "range": [
                                657,
                                677
                            ],
                            "children": [],
                            "content": "self._set_user_integration_creds(\nuser_id,[*self.get_all_creds(user_id),credentials]\n)\n"
                        }
                    ],
                    "content": "with self.locked_user_integrations(user_id):\n"
                }
            ],
            "content": "def add_creds(self,user_id:str,credentials:Credentials)->None:\nwith self.locked_user_integrations(user_id):\nif self.get_creds_by_id(user_id,credentials.id):\nraise ValueError(\nf \"Can not re-create existing credentials #{credentials.id} \"\nf \"for user #{user_id}\"\n)\nself._set_user_integration_creds(\nuser_id,[*self.get_all_creds(user_id),credentials]\n)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_all_creds",
            "range": [
                679,
                863
            ],
            "children": [
                {
                    "type": "AssignmentStatement",
                    "name": "users_credentials = self._get_user_integrations(user_id).credentials",
                    "range": [
                        696,
                        706
                    ],
                    "children": [],
                    "content": "users_credentials=self._get_user_integrations(user_id).credentials\n"
                },
                {
                    "type": "AssignmentStatement",
                    "name": "all_credentials = users_credentials",
                    "range": [
                        707,
                        710
                    ],
                    "children": [],
                    "content": "all_credentials=users_credentials\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if settings.secrets.revid_api_key",
                    "range": [
                        711,
                        718
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "all_credentials.append(revid_credentials)",
                            "range": [
                                719,
                                725
                            ],
                            "children": [],
                            "content": "all_credentials.append(revid_credentials)\n"
                        }
                    ],
                    "content": "if settings.secrets.revid_api_key:\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if settings.secrets.ideogram_api_key",
                    "range": [
                        726,
                        733
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "all_credentials.append(ideogram_credentials)",
                            "range": [
                                734,
                                740
                            ],
                            "children": [],
                            "content": "all_credentials.append(ideogram_credentials)\n"
                        }
                    ],
                    "content": "if settings.secrets.ideogram_api_key:\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if settings.secrets.groq_api_key",
                    "range": [
                        741,
                        748
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "all_credentials.append(groq_credentials)",
                            "range": [
                                749,
                                755
                            ],
                            "children": [],
                            "content": "all_credentials.append(groq_credentials)\n"
                        }
                    ],
                    "content": "if settings.secrets.groq_api_key:\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if settings.secrets.replicate_api_key",
                    "range": [
                        756,
                        763
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "all_credentials.append(replicate_credentials)",
                            "range": [
                                764,
                                770
                            ],
                            "children": [],
                            "content": "all_credentials.append(replicate_credentials)\n"
                        }
                    ],
                    "content": "if settings.secrets.replicate_api_key:\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if settings.secrets.openai_api_key",
                    "range": [
                        771,
                        778
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "all_credentials.append(openai_credentials)",
                            "range": [
                                779,
                                785
                            ],
                            "children": [],
                            "content": "all_credentials.append(openai_credentials)\n"
                        }
                    ],
                    "content": "if settings.secrets.openai_api_key:\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if settings.secrets.anthropic_api_key",
                    "range": [
                        786,
                        793
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "all_credentials.append(anthropic_credentials)",
                            "range": [
                                794,
                                800
                            ],
                            "children": [],
                            "content": "all_credentials.append(anthropic_credentials)\n"
                        }
                    ],
                    "content": "if settings.secrets.anthropic_api_key:\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if settings.secrets.did_api_key",
                    "range": [
                        801,
                        808
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "all_credentials.append(did_credentials)",
                            "range": [
                                809,
                                815
                            ],
                            "children": [],
                            "content": "all_credentials.append(did_credentials)\n"
                        }
                    ],
                    "content": "if settings.secrets.did_api_key:\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if settings.secrets.jina_api_key",
                    "range": [
                        816,
                        823
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "all_credentials.append(jina_credentials)",
                            "range": [
                                824,
                                830
                            ],
                            "children": [],
                            "content": "all_credentials.append(jina_credentials)\n"
                        }
                    ],
                    "content": "if settings.secrets.jina_api_key:\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if settings.secrets.unreal_speech_api_key",
                    "range": [
                        831,
                        838
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "all_credentials.append(unreal_credentials)",
                            "range": [
                                839,
                                845
                            ],
                            "children": [],
                            "content": "all_credentials.append(unreal_credentials)\n"
                        }
                    ],
                    "content": "if settings.secrets.unreal_speech_api_key:\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if settings.secrets.open_router_api_key",
                    "range": [
                        846,
                        853
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "all_credentials.append(open_router_credentials)",
                            "range": [
                                854,
                                860
                            ],
                            "children": [],
                            "content": "all_credentials.append(open_router_credentials)\n"
                        }
                    ],
                    "content": "if settings.secrets.open_router_api_key:\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return all_credentials",
                    "range": [
                        861,
                        863
                    ],
                    "children": [],
                    "content": "return all_credentials\n"
                }
            ],
            "content": "def get_all_creds(self,user_id:str)->list[Credentials]:\nusers_credentials=self._get_user_integrations(user_id).credentials\nall_credentials=users_credentials\nif settings.secrets.revid_api_key:\nall_credentials.append(revid_credentials)\nif settings.secrets.ideogram_api_key:\nall_credentials.append(ideogram_credentials)\nif settings.secrets.groq_api_key:\nall_credentials.append(groq_credentials)\nif settings.secrets.replicate_api_key:\nall_credentials.append(replicate_credentials)\nif settings.secrets.openai_api_key:\nall_credentials.append(openai_credentials)\nif settings.secrets.anthropic_api_key:\nall_credentials.append(anthropic_credentials)\nif settings.secrets.did_api_key:\nall_credentials.append(did_credentials)\nif settings.secrets.jina_api_key:\nall_credentials.append(jina_credentials)\nif settings.secrets.unreal_speech_api_key:\nall_credentials.append(unreal_credentials)\nif settings.secrets.open_router_api_key:\nall_credentials.append(open_router_credentials)\nreturn all_credentials\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_creds_by_id",
            "range": [
                865,
                914
            ],
            "children": [
                {
                    "type": "AssignmentStatement",
                    "name": "all_credentials = self.get_all_creds(user_id)",
                    "range": [
                        885,
                        893
                    ],
                    "children": [],
                    "content": "all_credentials=self.get_all_creds(user_id)\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return next((c for c in all_credentials if c.id == credentials_id) None)",
                    "range": [
                        894,
                        914
                    ],
                    "children": [],
                    "content": "return next((c for c in all_credentials if c.id==credentials_id),None)\n"
                }
            ],
            "content": "def get_creds_by_id(self,user_id:str,credentials_id:str)->Credentials|None:\nall_credentials=self.get_all_creds(user_id)\nreturn next((c for c in all_credentials if c.id==credentials_id),None)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_creds_by_provider",
            "range": [
                916,
                961
            ],
            "children": [
                {
                    "type": "AssignmentStatement",
                    "name": "credentials = self.get_all_creds(user_id)",
                    "range": [
                        937,
                        945
                    ],
                    "children": [],
                    "content": "credentials=self.get_all_creds(user_id)\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return [c for c in credentials if c.provider == provider]",
                    "range": [
                        946,
                        961
                    ],
                    "children": [],
                    "content": "return[c for c in credentials if c.provider==provider]\n"
                }
            ],
            "content": "def get_creds_by_provider(self,user_id:str,provider:str)->list[Credentials]:\ncredentials=self.get_all_creds(user_id)\nreturn[c for c in credentials if c.provider==provider]\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_authorized_providers",
            "range": [
                963,
                1003
            ],
            "children": [
                {
                    "type": "AssignmentStatement",
                    "name": "credentials = self.get_all_creds(user_id)",
                    "range": [
                        980,
                        988
                    ],
                    "children": [],
                    "content": "credentials=self.get_all_creds(user_id)\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return list(set(c.provider for c in credentials))",
                    "range": [
                        989,
                        1003
                    ],
                    "children": [],
                    "content": "return list(set(c.provider for c in credentials))\n"
                }
            ],
            "content": "def get_authorized_providers(self,user_id:str)->list[str]:\ncredentials=self.get_all_creds(user_id)\nreturn list(set(c.provider for c in credentials))\n"
        },
        {
            "type": "FunctionDecl",
            "name": "update_creds",
            "range": [
                1005,
                1196
            ],
            "children": [
                {
                    "type": "WithStatement",
                    "name": "with self.locked_user_integrations(user_id)",
                    "range": [
                        1023,
                        1031
                    ],
                    "children": [
                        {
                            "type": "AssignmentStatement",
                            "name": "current = self.get_creds_by_id(user_id updated.id)",
                            "range": [
                                1032,
                                1044
                            ],
                            "children": [],
                            "content": "current=self.get_creds_by_id(user_id,updated.id)\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if not current",
                            "range": [
                                1045,
                                1048
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise ValueError(f\"Credentials with ID {updated.id} \" f\"for user with ID {user_id} not found\")",
                                    "range": [
                                        1049,
                                        1061
                                    ],
                                    "children": [],
                                    "content": "\nraise ValueError(\nf \"Credentials with ID {updated.id} \"\nf \"for user with ID {user_id} not found\"\n)\n"
                                }
                            ],
                            "content": "if not current:"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if type(current) is not type(updated)",
                            "range": [
                                1062,
                                1074
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise TypeError(f\"Can not update credentials with ID {updated.id} \" f\"from type {type(current)} \" f\"to type {type(updated)}\")",
                                    "range": [
                                        1075,
                                        1089
                                    ],
                                    "children": [],
                                    "content": "raise TypeError(\nf \"Can not update credentials with ID {updated.id} \"\nf \"from type {type(current)} \"\nf \"to type {type(updated)}\"\n)\n"
                                }
                            ],
                            "content": "if type(current)is not type(updated):\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if (isinstance(updated OAuth2Credentials) and isinstance(current OAuth2Credentials) and not set(updated.scopes).issuperset(current.scopes))",
                            "range": [
                                1101,
                                1137
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise ValueError(f\"Can not update credentials with ID {updated.id} \" f\"and scopes {current.scopes} \" f\"to more restrictive set of scopes {updated.scopes}\")",
                                    "range": [
                                        1138,
                                        1152
                                    ],
                                    "children": [],
                                    "content": "raise ValueError(\nf \"Can not update credentials with ID {updated.id} \"\nf \"and scopes {current.scopes} \"\nf \"to more restrictive set of scopes {updated.scopes}\"\n)\n"
                                }
                            ],
                            "content": "if(\nisinstance(updated,OAuth2Credentials)\nand isinstance(current,OAuth2Credentials)\nand not set(updated.scopes).issuperset(current.scopes)\n):\n"
                        },
                        {
                            "type": "AssignmentStatement",
                            "name": "updated_credentials_list = [updated if c.id == updated.id else c for c in self.get_all_creds(user_id)]",
                            "range": [
                                1159,
                                1187
                            ],
                            "children": [],
                            "content": "updated_credentials_list=[\nupdated if c.id==updated.id else c\nfor c in self.get_all_creds(user_id)\n]\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "self._set_user_integration_creds(user_id updated_credentials_list)",
                            "range": [
                                1188,
                                1196
                            ],
                            "children": [],
                            "content": "self._set_user_integration_creds(user_id,updated_credentials_list)\n"
                        }
                    ],
                    "content": "with self.locked_user_integrations(user_id):\n"
                }
            ],
            "content": "def update_creds(self,user_id:str,updated:Credentials)->None:\nwith self.locked_user_integrations(user_id):\ncurrent=self.get_creds_by_id(user_id,updated.id)\nif not current:\nraise ValueError(\nf \"Credentials with ID {updated.id} \"\nf \"for user with ID {user_id} not found\"\n)\nif type(current)is not type(updated):\nraise TypeError(\nf \"Can not update credentials with ID {updated.id} \"\nf \"from type {type(current)} \"\nf \"to type {type(updated)}\"\n)\n\n#Ensure no scopes are removed when updating credentials\nif(\nisinstance(updated,OAuth2Credentials)\nand isinstance(current,OAuth2Credentials)\nand not set(updated.scopes).issuperset(current.scopes)\n):\nraise ValueError(\nf \"Can not update credentials with ID {updated.id} \"\nf \"and scopes {current.scopes} \"\nf \"to more restrictive set of scopes {updated.scopes}\"\n)\n\n#Update the credentials\nupdated_credentials_list=[\nupdated if c.id==updated.id else c\nfor c in self.get_all_creds(user_id)\n]\nself._set_user_integration_creds(user_id,updated_credentials_list)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "delete_creds_by_id",
            "range": [
                1198,
                1257
            ],
            "children": [
                {
                    "type": "WithStatement",
                    "name": "with self.locked_user_integrations(user_id)",
                    "range": [
                        1216,
                        1224
                    ],
                    "children": [
                        {
                            "type": "AssignmentStatement",
                            "name": "filtered_credentials = [c for c in self.get_all_creds(user_id) if c.id != credentials_id]",
                            "range": [
                                1225,
                                1248
                            ],
                            "children": [],
                            "content": "filtered_credentials=[\nc for c in self.get_all_creds(user_id)if c.id!=credentials_id\n]\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "self._set_user_integration_creds(user_id filtered_credentials)",
                            "range": [
                                1249,
                                1257
                            ],
                            "children": [],
                            "content": "self._set_user_integration_creds(user_id,filtered_credentials)\n"
                        }
                    ],
                    "content": "with self.locked_user_integrations(user_id):\n"
                }
            ],
            "content": "def delete_creds_by_id(self,user_id:str,credentials_id:str)->None:\nwith self.locked_user_integrations(user_id):\nfiltered_credentials=[\nc for c in self.get_all_creds(user_id)if c.id!=credentials_id\n]\nself._set_user_integration_creds(user_id,filtered_credentials)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "store_state_token",
            "range": [
                1259,
                1405
            ],
            "children": [
                {
                    "type": "AssignmentStatement",
                    "name": "token = secrets.token_urlsafe(32)",
                    "range": [
                        1284,
                        1292
                    ],
                    "children": [],
                    "content": "token=secrets.token_urlsafe(32)\n"
                },
                {
                    "type": "AssignmentStatement",
                    "name": "expires_at = datetime.now(timezone.utc) + timedelta(minutes=10)",
                    "range": [
                        1293,
                        1310
                    ],
                    "children": [],
                    "content": "expires_at=datetime.now(timezone.utc)+timedelta(minutes=10)\n"
                },
                {
                    "type": "AssignmentStatement",
                    "name": "state = OAuthState(token=token provider=provider expires_at=int(expires_at.timestamp()) scopes=scopes)",
                    "range": [
                        1312,
                        1345
                    ],
                    "children": [],
                    "content": "state=OAuthState(\ntoken=token,\nprovider=provider,\nexpires_at=int(expires_at.timestamp()),\nscopes=scopes,\n)\n"
                },
                {
                    "type": "WithStatement",
                    "name": "with self.locked_user_integrations(user_id)",
                    "range": [
                        1347,
                        1355
                    ],
                    "children": [
                        {
                            "type": "AssignmentStatement",
                            "name": "user_integrations = self._get_user_integrations(user_id)",
                            "range": [
                                1356,
                                1364
                            ],
                            "children": [],
                            "content": "user_integrations=self._get_user_integrations(user_id)\n"
                        },
                        {
                            "type": "AssignmentStatement",
                            "name": "oauth_states = user_integrations.oauth_states",
                            "range": [
                                1365,
                                1370
                            ],
                            "children": [],
                            "content": "oauth_states=user_integrations.oauth_states\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "oauth_states.append(state)",
                            "range": [
                                1371,
                                1377
                            ],
                            "children": [],
                            "content": "oauth_states.append(state)\n"
                        },
                        {
                            "type": "AssignmentStatement",
                            "name": "user_integrations.oauth_states = oauth_states",
                            "range": [
                                1378,
                                1383
                            ],
                            "children": [],
                            "content": "user_integrations.oauth_states=oauth_states\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "self.db_manager.update_user_integrations(user_id=user_id data=user_integrations)",
                            "range": [
                                1385,
                                1401
                            ],
                            "children": [],
                            "content": "self.db_manager.update_user_integrations(\nuser_id=user_id,data=user_integrations\n)\n"
                        }
                    ],
                    "content": "with self.locked_user_integrations(user_id):\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return token",
                    "range": [
                        1403,
                        1405
                    ],
                    "children": [],
                    "content": "return token\n"
                }
            ],
            "content": "def store_state_token(self,user_id:str,provider:str,scopes:list[str])->str:\ntoken=secrets.token_urlsafe(32)\nexpires_at=datetime.now(timezone.utc)+timedelta(minutes=10)\n\nstate=OAuthState(\ntoken=token,\nprovider=provider,\nexpires_at=int(expires_at.timestamp()),\nscopes=scopes,\n)\n\nwith self.locked_user_integrations(user_id):\nuser_integrations=self._get_user_integrations(user_id)\noauth_states=user_integrations.oauth_states\noauth_states.append(state)\nuser_integrations.oauth_states=oauth_states\n\nself.db_manager.update_user_integrations(\nuser_id=user_id,data=user_integrations\n)\n\nreturn token\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_any_valid_scopes_from_state_token",
            "range": [
                1407,
                1528
            ],
            "children": [
                {
                    "type": "AssignmentStatement",
                    "name": "user_integrations = self._get_user_integrations(user_id)",
                    "range": [
                        1438,
                        1446
                    ],
                    "children": [],
                    "content": "user_integrations=self._get_user_integrations(user_id)\n"
                },
                {
                    "type": "AssignmentStatement",
                    "name": "oauth_states = user_integrations.oauth_states",
                    "range": [
                        1447,
                        1452
                    ],
                    "children": [],
                    "content": "oauth_states=user_integrations.oauth_states\n"
                },
                {
                    "type": "AssignmentStatement",
                    "name": "now = datetime.now(timezone.utc)",
                    "range": [
                        1454,
                        1464
                    ],
                    "children": [],
                    "content": "now=datetime.now(timezone.utc)\n"
                },
                {
                    "type": "AssignmentStatement",
                    "name": "valid_state = next((state for state in oauth_states if state.token == token and state.provider == provider and state.expires_at > now.timestamp()) None)",
                    "range": [
                        1465,
                        1514
                    ],
                    "children": [],
                    "content": "valid_state=next(\n(\nstate\nfor state in oauth_states\nif state.token==token\nand state.provider==provider\nand state.expires_at>now.timestamp()\n),\nNone,\n)\n\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if valid_state",
                    "range": [
                        1515,
                        1517
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return valid_state.scopes",
                            "range": [
                                1519,
                                1523
                            ],
                            "children": [],
                            "content": "return valid_state.scopes\n"
                        }
                    ],
                    "content": "if valid_state:"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return []",
                    "range": [
                        1525,
                        1528
                    ],
                    "children": [],
                    "content": "return[]\n"
                }
            ],
            "content": "def get_any_valid_scopes_from_state_token(\nself,user_id:str,token:str,provider:str\n)->list[str]:\n\"\"\" \\n         Get the valid scopes from the OAuth state token. This will return any valid scopes \\n         from any OAuth state token for the given provider. If no valid scopes are found, \\n         an empty list is returned. DO NOT RELY ON THIS TOKEN TO AUTHENTICATE A USER, AS IT \\n         IS TO CHECK IF THE USER HAS GIVEN PERMISSIONS TO THE APPLICATION BEFORE EXCHANGING \\n         THE CODE FOR TOKENS. \\n         \"\"\"\nuser_integrations=self._get_user_integrations(user_id)\noauth_states=user_integrations.oauth_states\n\nnow=datetime.now(timezone.utc)\nvalid_state=next(\n(\nstate\nfor state in oauth_states\nif state.token==token\nand state.provider==provider\nand state.expires_at>now.timestamp()\n),\nNone,\n)\n\nif valid_state:\nreturn valid_state.scopes\n\nreturn[]\n"
        },
        {
            "type": "FunctionDecl",
            "name": "verify_state_token",
            "range": [
                1530,
                1678
            ],
            "children": [
                {
                    "type": "WithStatement",
                    "name": "with self.locked_user_integrations(user_id)",
                    "range": [
                        1552,
                        1560
                    ],
                    "children": [
                        {
                            "type": "AssignmentStatement",
                            "name": "user_integrations = self._get_user_integrations(user_id)",
                            "range": [
                                1561,
                                1569
                            ],
                            "children": [],
                            "content": "user_integrations=self._get_user_integrations(user_id)\n"
                        },
                        {
                            "type": "AssignmentStatement",
                            "name": "oauth_states = user_integrations.oauth_states",
                            "range": [
                                1570,
                                1575
                            ],
                            "children": [],
                            "content": "oauth_states=user_integrations.oauth_states\n"
                        },
                        {
                            "type": "AssignmentStatement",
                            "name": "now = datetime.now(timezone.utc)",
                            "range": [
                                1577,
                                1587
                            ],
                            "children": [],
                            "content": "now=datetime.now(timezone.utc)\n"
                        },
                        {
                            "type": "AssignmentStatement",
                            "name": "valid_state = next((state for state in oauth_states if state.token == token and state.provider == provider and state.expires_at > now.timestamp()) None)",
                            "range": [
                                1588,
                                1637
                            ],
                            "children": [],
                            "content": "valid_state=next(\n(\nstate\nfor state in oauth_states\nif state.token==token\nand state.provider==provider\nand state.expires_at>now.timestamp()\n),\nNone,\n)\n\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if valid_state",
                            "range": [
                                1638,
                                1640
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "oauth_states.remove(valid_state)",
                                    "range": [
                                        1648,
                                        1654
                                    ],
                                    "children": [],
                                    "content": "oauth_states.remove(valid_state)\n"
                                },
                                {
                                    "type": "AssignmentStatement",
                                    "name": "user_integrations.oauth_states = oauth_states",
                                    "range": [
                                        1655,
                                        1660
                                    ],
                                    "children": [],
                                    "content": "user_integrations.oauth_states=oauth_states\n"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "self.db_manager.update_user_integrations(user_id user_integrations)",
                                    "range": [
                                        1661,
                                        1671
                                    ],
                                    "children": [],
                                    "content": "self.db_manager.update_user_integrations(user_id,user_integrations)\n"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return True",
                                    "range": [
                                        1672,
                                        1674
                                    ],
                                    "children": [],
                                    "content": "return True\n"
                                }
                            ],
                            "content": "if valid_state:"
                        }
                    ],
                    "content": "with self.locked_user_integrations(user_id):\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return False",
                    "range": [
                        1676,
                        1678
                    ],
                    "children": [],
                    "content": "return False\n"
                }
            ],
            "content": "def verify_state_token(self,user_id:str,token:str,provider:str)->bool:\nwith self.locked_user_integrations(user_id):\nuser_integrations=self._get_user_integrations(user_id)\noauth_states=user_integrations.oauth_states\n\nnow=datetime.now(timezone.utc)\nvalid_state=next(\n(\nstate\nfor state in oauth_states\nif state.token==token\nand state.provider==provider\nand state.expires_at>now.timestamp()\n),\nNone,\n)\n\nif valid_state:\n#Remove the used state\noauth_states.remove(valid_state)\nuser_integrations.oauth_states=oauth_states\nself.db_manager.update_user_integrations(user_id,user_integrations)\nreturn True\n\nreturn False\n"
        },
        {
            "type": "FunctionDecl",
            "name": "_set_user_integration_creds",
            "range": [
                1680,
                1751
            ],
            "children": [
                {
                    "type": "AssignmentStatement",
                    "name": "integrations = self._get_user_integrations(user_id)",
                    "range": [
                        1703,
                        1711
                    ],
                    "children": [],
                    "content": "integrations=self._get_user_integrations(user_id)\n"
                },
                {
                    "type": "AssignmentStatement",
                    "name": "credentials = [c for c in credentials if c not in DEFAULT_CREDENTIALS]",
                    "range": [
                        1720,
                        1734
                    ],
                    "children": [],
                    "content": "credentials=[c for c in credentials if c not in DEFAULT_CREDENTIALS]\n"
                },
                {
                    "type": "AssignmentStatement",
                    "name": "integrations.credentials = credentials",
                    "range": [
                        1735,
                        1740
                    ],
                    "children": [],
                    "content": "integrations.credentials=credentials\n"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "self.db_manager.update_user_integrations(user_id integrations)",
                    "range": [
                        1741,
                        1751
                    ],
                    "children": [],
                    "content": "self.db_manager.update_user_integrations(user_id,integrations)\n"
                }
            ],
            "content": "def _set_user_integration_creds(\nself,user_id:str,credentials:list[Credentials]\n)->None:\nintegrations=self._get_user_integrations(user_id)\n#Remove default credentials from the list\ncredentials=[c for c in credentials if c not in DEFAULT_CREDENTIALS]\nintegrations.credentials=credentials\nself.db_manager.update_user_integrations(user_id,integrations)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "_get_user_integrations",
            "range": [
                1753,
                1786
            ],
            "children": [
                {
                    "type": "AssignmentStatement",
                    "name": "integrations: UserIntegrations = self.db_manager.get_user_integrations(user_id=user_id)",
                    "range": [
                        1767,
                        1782
                    ],
                    "children": [],
                    "content": "integrations:UserIntegrations=self.db_manager.get_user_integrations(\nuser_id=user_id\n)"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return integrations",
                    "range": [
                        1784,
                        1786
                    ],
                    "children": [],
                    "content": "return integrations\n"
                }
            ],
            "content": "def _get_user_integrations(self,user_id:str)->UserIntegrations:\nintegrations:UserIntegrations=self.db_manager.get_user_integrations(\nuser_id=user_id\n)\nreturn integrations\n"
        },
        {
            "type": "FunctionDecl",
            "name": "locked_user_integrations",
            "range": [
                1788,
                1817
            ],
            "children": [
                {
                    "type": "AssignmentStatement",
                    "name": "key = (f\"user:{user_id}\" \"integrations\")",
                    "range": [
                        1799,
                        1807
                    ],
                    "children": [],
                    "content": "key=(f \"user:{user_id}\",\"integrations\")\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return self.locks.locked(key)",
                    "range": [
                        1808,
                        1817
                    ],
                    "children": [],
                    "content": "return self.locks.locked(key)\n"
                }
            ],
            "content": "def locked_user_integrations(self,user_id:str):\nkey=(f \"user:{user_id}\",\"integrations\")\nreturn self.locks.locked(key)\n"
        }
    ],
    "content": "import secrets\nfrom datetime import datetime,timedelta,timezone\nfrom typing import TYPE_CHECKING\n\nfrom pydantic import SecretStr\n\nif TYPE_CHECKING:\nfrom backend.executor.database import DatabaseManager\n\nfrom autogpt_libs.utils.cache import thread_cached\nfrom autogpt_libs.utils.synchronize import RedisKeyedMutex\n\nfrom backend.data.model import(\nAPIKeyCredentials,\nCredentials,\nOAuth2Credentials,\nOAuthState,\nUserIntegrations,\n)\nfrom backend.util.settings import Settings\n\nsettings=Settings()\n\nrevid_credentials=APIKeyCredentials(\nid=\"fdb7f412-f519-48d1-9b5f-d2f73d0e01fe\",\nprovider=\"revid\",\napi_key=SecretStr(settings.secrets.revid_api_key),\ntitle=\"Use Credits for Revid\",\nexpires_at=None,\n)\nideogram_credentials=APIKeyCredentials(\nid=\"760f84fc-b270-42de-91f6-08efe1b512d0\",\nprovider=\"ideogram\",\napi_key=SecretStr(settings.secrets.ideogram_api_key),\ntitle=\"Use Credits for Ideogram\",\nexpires_at=None,\n)\nreplicate_credentials=APIKeyCredentials(\nid=\"6b9fc200-4726-4973-86c9-cd526f5ce5db\",\nprovider=\"replicate\",\napi_key=SecretStr(settings.secrets.replicate_api_key),\ntitle=\"Use Credits for Replicate\",\nexpires_at=None,\n)\nopenai_credentials=APIKeyCredentials(\nid=\"53c25cb8-e3ee-465c-a4d1-e75a4c899c2a\",\nprovider=\"openai\",\napi_key=SecretStr(settings.secrets.openai_api_key),\ntitle=\"Use Credits for OpenAI\",\nexpires_at=None,\n)\nanthropic_credentials=APIKeyCredentials(\nid=\"24e5d942-d9e3-4798-8151-90143ee55629\",\nprovider=\"anthropic\",\napi_key=SecretStr(settings.secrets.anthropic_api_key),\ntitle=\"Use Credits for Anthropic\",\nexpires_at=None,\n)\ngroq_credentials=APIKeyCredentials(\nid=\"4ec22295-8f97-4dd1-b42b-2c6957a02545\",\nprovider=\"groq\",\napi_key=SecretStr(settings.secrets.groq_api_key),\ntitle=\"Use Credits for Groq\",\nexpires_at=None,\n)\ndid_credentials=APIKeyCredentials(\nid=\"7f7b0654-c36b-4565-8fa7-9a52575dfae2\",\nprovider=\"d_id\",\napi_key=SecretStr(settings.secrets.did_api_key),\ntitle=\"Use Credits for D-ID\",\nexpires_at=None,\n)\njina_credentials=APIKeyCredentials(\nid=\"7f26de70-ba0d-494e-ba76-238e65e7b45f\",\nprovider=\"jina\",\napi_key=SecretStr(settings.secrets.jina_api_key),\ntitle=\"Use Credits for Jina\",\nexpires_at=None,\n)\nunreal_credentials=APIKeyCredentials(\nid=\"66f20754-1b81-48e4-91d0-f4f0dd82145f\",\nprovider=\"unreal\",\napi_key=SecretStr(settings.secrets.unreal_speech_api_key),\ntitle=\"Use Credits for Unreal\",\nexpires_at=None,\n)\nopen_router_credentials=APIKeyCredentials(\nid=\"b5a0e27d-0c98-4df3-a4b9-10193e1f3c40\",\nprovider=\"open_router\",\napi_key=SecretStr(settings.secrets.open_router_api_key),\ntitle=\"Use Credits for Open Router\",\nexpires_at=None,\n)\n\n\nDEFAULT_CREDENTIALS=[\nrevid_credentials,\nideogram_credentials,\nreplicate_credentials,\nopenai_credentials,\nanthropic_credentials,\ngroq_credentials,\ndid_credentials,\njina_credentials,\nunreal_credentials,\nopen_router_credentials,\n]\n\n\nclass IntegrationCredentialsStore:\ndef __init__(self):\nfrom backend.data.redis import get_redis\n\nself.locks=RedisKeyedMutex(get_redis())\n\n@property\n@thread_cached\ndef db_manager(self)->\"DatabaseManager\":\nfrom backend.executor.database import DatabaseManager\nfrom backend.util.service import get_service_client\n\nreturn get_service_client(DatabaseManager)\n\ndef add_creds(self,user_id:str,credentials:Credentials)->None:\nwith self.locked_user_integrations(user_id):\nif self.get_creds_by_id(user_id,credentials.id):\nraise ValueError(\nf \"Can not re-create existing credentials #{credentials.id} \"\nf \"for user #{user_id}\"\n)\nself._set_user_integration_creds(\nuser_id,[*self.get_all_creds(user_id),credentials]\n)\n\ndef get_all_creds(self,user_id:str)->list[Credentials]:\nusers_credentials=self._get_user_integrations(user_id).credentials\nall_credentials=users_credentials\nif settings.secrets.revid_api_key:\nall_credentials.append(revid_credentials)\nif settings.secrets.ideogram_api_key:\nall_credentials.append(ideogram_credentials)\nif settings.secrets.groq_api_key:\nall_credentials.append(groq_credentials)\nif settings.secrets.replicate_api_key:\nall_credentials.append(replicate_credentials)\nif settings.secrets.openai_api_key:\nall_credentials.append(openai_credentials)\nif settings.secrets.anthropic_api_key:\nall_credentials.append(anthropic_credentials)\nif settings.secrets.did_api_key:\nall_credentials.append(did_credentials)\nif settings.secrets.jina_api_key:\nall_credentials.append(jina_credentials)\nif settings.secrets.unreal_speech_api_key:\nall_credentials.append(unreal_credentials)\nif settings.secrets.open_router_api_key:\nall_credentials.append(open_router_credentials)\nreturn all_credentials\n\ndef get_creds_by_id(self,user_id:str,credentials_id:str)->Credentials|None:\nall_credentials=self.get_all_creds(user_id)\nreturn next((c for c in all_credentials if c.id==credentials_id),None)\n\ndef get_creds_by_provider(self,user_id:str,provider:str)->list[Credentials]:\ncredentials=self.get_all_creds(user_id)\nreturn[c for c in credentials if c.provider==provider]\n\ndef get_authorized_providers(self,user_id:str)->list[str]:\ncredentials=self.get_all_creds(user_id)\nreturn list(set(c.provider for c in credentials))\n\ndef update_creds(self,user_id:str,updated:Credentials)->None:\nwith self.locked_user_integrations(user_id):\ncurrent=self.get_creds_by_id(user_id,updated.id)\nif not current:\nraise ValueError(\nf \"Credentials with ID {updated.id} \"\nf \"for user with ID {user_id} not found\"\n)\nif type(current)is not type(updated):\nraise TypeError(\nf \"Can not update credentials with ID {updated.id} \"\nf \"from type {type(current)} \"\nf \"to type {type(updated)}\"\n)\n\n#Ensure no scopes are removed when updating credentials\nif(\nisinstance(updated,OAuth2Credentials)\nand isinstance(current,OAuth2Credentials)\nand not set(updated.scopes).issuperset(current.scopes)\n):\nraise ValueError(\nf \"Can not update credentials with ID {updated.id} \"\nf \"and scopes {current.scopes} \"\nf \"to more restrictive set of scopes {updated.scopes}\"\n)\n\n#Update the credentials\nupdated_credentials_list=[\nupdated if c.id==updated.id else c\nfor c in self.get_all_creds(user_id)\n]\nself._set_user_integration_creds(user_id,updated_credentials_list)\n\ndef delete_creds_by_id(self,user_id:str,credentials_id:str)->None:\nwith self.locked_user_integrations(user_id):\nfiltered_credentials=[\nc for c in self.get_all_creds(user_id)if c.id!=credentials_id\n]\nself._set_user_integration_creds(user_id,filtered_credentials)\n\ndef store_state_token(self,user_id:str,provider:str,scopes:list[str])->str:\ntoken=secrets.token_urlsafe(32)\nexpires_at=datetime.now(timezone.utc)+timedelta(minutes=10)\n\nstate=OAuthState(\ntoken=token,\nprovider=provider,\nexpires_at=int(expires_at.timestamp()),\nscopes=scopes,\n)\n\nwith self.locked_user_integrations(user_id):\nuser_integrations=self._get_user_integrations(user_id)\noauth_states=user_integrations.oauth_states\noauth_states.append(state)\nuser_integrations.oauth_states=oauth_states\n\nself.db_manager.update_user_integrations(\nuser_id=user_id,data=user_integrations\n)\n\nreturn token\n\ndef get_any_valid_scopes_from_state_token(\nself,user_id:str,token:str,provider:str\n)->list[str]:\n\"\"\" \\n         Get the valid scopes from the OAuth state token. This will return any valid scopes \\n         from any OAuth state token for the given provider. If no valid scopes are found, \\n         an empty list is returned. DO NOT RELY ON THIS TOKEN TO AUTHENTICATE A USER, AS IT \\n         IS TO CHECK IF THE USER HAS GIVEN PERMISSIONS TO THE APPLICATION BEFORE EXCHANGING \\n         THE CODE FOR TOKENS. \\n         \"\"\"\nuser_integrations=self._get_user_integrations(user_id)\noauth_states=user_integrations.oauth_states\n\nnow=datetime.now(timezone.utc)\nvalid_state=next(\n(\nstate\nfor state in oauth_states\nif state.token==token\nand state.provider==provider\nand state.expires_at>now.timestamp()\n),\nNone,\n)\n\nif valid_state:\nreturn valid_state.scopes\n\nreturn[]\n\ndef verify_state_token(self,user_id:str,token:str,provider:str)->bool:\nwith self.locked_user_integrations(user_id):\nuser_integrations=self._get_user_integrations(user_id)\noauth_states=user_integrations.oauth_states\n\nnow=datetime.now(timezone.utc)\nvalid_state=next(\n(\nstate\nfor state in oauth_states\nif state.token==token\nand state.provider==provider\nand state.expires_at>now.timestamp()\n),\nNone,\n)\n\nif valid_state:\n#Remove the used state\noauth_states.remove(valid_state)\nuser_integrations.oauth_states=oauth_states\nself.db_manager.update_user_integrations(user_id,user_integrations)\nreturn True\n\nreturn False\n\ndef _set_user_integration_creds(\nself,user_id:str,credentials:list[Credentials]\n)->None:\nintegrations=self._get_user_integrations(user_id)\n#Remove default credentials from the list\ncredentials=[c for c in credentials if c not in DEFAULT_CREDENTIALS]\nintegrations.credentials=credentials\nself.db_manager.update_user_integrations(user_id,integrations)\n\ndef _get_user_integrations(self,user_id:str)->UserIntegrations:\nintegrations:UserIntegrations=self.db_manager.get_user_integrations(\nuser_id=user_id\n)\nreturn integrations\n\ndef locked_user_integrations(self,user_id:str):\nkey=(f \"user:{user_id}\",\"integrations\")\nreturn self.locks.locked(key)\n"
}