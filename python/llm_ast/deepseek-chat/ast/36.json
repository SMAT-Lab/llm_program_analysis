{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        72
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                3
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "math",
                    "range": [
                        0,
                        1
                    ],
                    "children": [],
                    "content": "from math"
                },
                {
                    "type": "Identifier",
                    "name": "log2",
                    "range": [
                        2,
                        3
                    ],
                    "children": [],
                    "content": "import log2"
                }
            ],
            "content": "from math import log2"
        },
        {
            "type": "FunctionDecl",
            "name": "binary_count_trailing_zeros",
            "range": [
                7,
                72
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "a",
                    "range": [
                        10,
                        12
                    ],
                    "children": [],
                    "content": "a:int"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        16,
                        16
                    ],
                    "children": [],
                    "content": "int"
                },
                {
                    "type": "Docstring",
                    "name": "\"\"\" \\n     Take in 1 integer, return a number that is \\n     the number of trailing zeros in binary representation of that number. \\n  \\n     >>> binary_count_trailing_zeros(25) \\n     0 \\n     >>> binary_count_trailing_zeros(36) \\n     2 \\n     >>> binary_count_trailing_zeros(16) \\n     4 \\n     >>> binary_count_trailing_zeros(58) \\n     1 \\n     >>> binary_count_trailing_zeros(4294967296) \\n     32 \\n     >>> binary_count_trailing_zeros(0) \\n     0 \\n     >>> binary_count_trailing_zeros(-10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input value must be a positive integer \\n     >>> binary_count_trailing_zeros(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be a 'int' type \\n     >>> binary_count_trailing_zeros(\"0\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\"",
                    "range": [
                        19,
                        23
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Take in 1 integer, return a number that is \\n     the number of trailing zeros in binary representation of that number. \\n  \\n     >>> binary_count_trailing_zeros(25) \\n     0 \\n     >>> binary_count_trailing_zeros(36) \\n     2 \\n     >>> binary_count_trailing_zeros(16) \\n     4 \\n     >>> binary_count_trailing_zeros(58) \\n     1 \\n     >>> binary_count_trailing_zeros(4294967296) \\n     32 \\n     >>> binary_count_trailing_zeros(0) \\n     0 \\n     >>> binary_count_trailing_zeros(-10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input value must be a positive integer \\n     >>> binary_count_trailing_zeros(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be a 'int' type \\n     >>> binary_count_trailing_zeros(\"0\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\""
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        25,
                        36
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "a < 0",
                            "range": [
                                26,
                                28
                            ],
                            "children": [],
                            "content": "a<0"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "raise ValueError",
                            "range": [
                                31,
                                35
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Input value must be a positive integer\"",
                                    "range": [
                                        34,
                                        34
                                    ],
                                    "children": [],
                                    "content": "\"Input value must be a positive integer\""
                                }
                            ],
                            "content": "raise ValueError(\"Input value must be a positive integer\")"
                        }
                    ],
                    "content": "if a<0:\nraise ValueError(\"Input value must be a positive integer\")\n"
                },
                {
                    "type": "ElifStatement",
                    "name": "elif",
                    "range": [
                        37,
                        51
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "isinstance(a, float)",
                            "range": [
                                38,
                                43
                            ],
                            "children": [],
                            "content": "isinstance(a,float)"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "raise TypeError",
                            "range": [
                                46,
                                50
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Input value must be a 'int' type\"",
                                    "range": [
                                        49,
                                        49
                                    ],
                                    "children": [],
                                    "content": "\"Input value must be a 'int' type\""
                                }
                            ],
                            "content": "raise TypeError(\"Input value must be a 'int' type\")"
                        }
                    ],
                    "content": "elif isinstance(a,float):\nraise TypeError(\"Input value must be a 'int' type\")\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        52,
                        72
                    ],
                    "children": [
                        {
                            "type": "ConditionalExpression",
                            "name": "0 if (a == 0) else int(log2(a & -a))",
                            "range": [
                                53,
                                71
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "a == 0",
                                    "range": [
                                        56,
                                        59
                                    ],
                                    "children": [],
                                    "content": "a==0"
                                },
                                {
                                    "type": "Literal",
                                    "name": "0",
                                    "range": [
                                        53,
                                        53
                                    ],
                                    "children": [],
                                    "content": "0"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "int(log2(a & -a))",
                                    "range": [
                                        62,
                                        71
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "log2",
                                            "range": [
                                                64,
                                                70
                                            ],
                                            "children": [
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "a & -a",
                                                    "range": [
                                                        66,
                                                        69
                                                    ],
                                                    "children": [],
                                                    "content": "a&-a"
                                                }
                                            ],
                                            "content": "log2(a&-a)"
                                        }
                                    ],
                                    "content": "int(log2(a&-a))"
                                }
                            ],
                            "content": "0if(a==0)else int(log2(a&-a))"
                        }
                    ],
                    "content": "return0if(a==0)else int(log2(a&-a))\n"
                }
            ],
            "content": "def binary_count_trailing_zeros(a:int)->int:\n\"\"\" \\n     Take in 1 integer, return a number that is \\n     the number of trailing zeros in binary representation of that number. \\n  \\n     >>> binary_count_trailing_zeros(25) \\n     0 \\n     >>> binary_count_trailing_zeros(36) \\n     2 \\n     >>> binary_count_trailing_zeros(16) \\n     4 \\n     >>> binary_count_trailing_zeros(58) \\n     1 \\n     >>> binary_count_trailing_zeros(4294967296) \\n     32 \\n     >>> binary_count_trailing_zeros(0) \\n     0 \\n     >>> binary_count_trailing_zeros(-10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input value must be a positive integer \\n     >>> binary_count_trailing_zeros(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be a 'int' type \\n     >>> binary_count_trailing_zeros(\"0\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\"\nif a<0:\nraise ValueError(\"Input value must be a positive integer\")\nelif isinstance(a,float):\nraise TypeError(\"Input value must be a 'int' type\")\nreturn0if(a==0)else int(log2(a&-a))\n"
        },
        {
            "type": "Error",
            "name": "InsufficientTokenData",
            "range": [
                0,
                0
            ],
            "children": [],
            "content": "from"
        }
    ],
    "content": "from math import log2\n\n\ndef binary_count_trailing_zeros(a:int)->int:\n\"\"\" \\n     Take in 1 integer, return a number that is \\n     the number of trailing zeros in binary representation of that number. \\n  \\n     >>> binary_count_trailing_zeros(25) \\n     0 \\n     >>> binary_count_trailing_zeros(36) \\n     2 \\n     >>> binary_count_trailing_zeros(16) \\n     4 \\n     >>> binary_count_trailing_zeros(58) \\n     1 \\n     >>> binary_count_trailing_zeros(4294967296) \\n     32 \\n     >>> binary_count_trailing_zeros(0) \\n     0 \\n     >>> binary_count_trailing_zeros(-10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input value must be a positive integer \\n     >>> binary_count_trailing_zeros(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be a 'int' type \\n     >>> binary_count_trailing_zeros(\"0\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\"\nif a<0:\nraise ValueError(\"Input value must be a positive integer\")\nelif isinstance(a,float):\nraise TypeError(\"Input value must be a 'int' type\")\nreturn0if(a==0)else int(log2(a&-a))\n"
}