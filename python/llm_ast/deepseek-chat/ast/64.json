{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        186
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                1,
                1
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\\n In this problem, we want to determine all possible subsequences \\n of the given sequence. We use backtracking to solve this problem. \\n  \\n Time complexity: O(2^n), \\n where n denotes the length of the given sequence. \\n",
                    "range": [
                        1,
                        1
                    ],
                    "children": [],
                    "content": "\" \\n In this problem, we want to determine all possible subsequences \\n of the given sequence. We use backtracking to solve this problem. \\n  \\n Time complexity: O(2^n), \\n where n denotes the length of the given sequence. \\n \""
                }
            ],
            "content": "\" \\n In this problem, we want to determine all possible subsequences \\n of the given sequence. We use backtracking to solve this problem. \\n  \\n Time complexity: O(2^n), \\n where n denotes the length of the given sequence. \\n \""
        },
        {
            "type": "ImportFromStatement",
            "name": "__future__",
            "range": [
                4,
                8
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "annotations",
                    "range": [
                        6,
                        7
                    ],
                    "children": [],
                    "content": "__future__ import"
                }
            ],
            "content": "\nfrom __future__ import annotations"
        },
        {
            "type": "ImportFromStatement",
            "name": "typing",
            "range": [
                10,
                14
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "Any",
                    "range": [
                        12,
                        13
                    ],
                    "children": [],
                    "content": "typing import"
                }
            ],
            "content": "\nfrom typing import Any"
        },
        {
            "type": "FunctionDecl",
            "name": "generate_all_subsequences",
            "range": [
                15,
                28
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "sequence",
                    "range": [
                        18,
                        23
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "list[Any]",
                            "range": [
                                20,
                                23
                            ],
                            "children": [],
                            "content": "(sequence:list"
                        }
                    ],
                    "content": "def generate_all_subsequences(sequence:list"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        25,
                        27
                    ],
                    "children": [],
                    "content": "Any])"
                }
            ],
            "content": "\n\n\ndef generate_all_subsequences(sequence:list[Any])-"
        },
        {
            "type": "CallExpression",
            "name": "create_state_space_tree",
            "range": [
                30,
                38
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "sequence",
                    "range": [
                        32,
                        32
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Argument",
                    "name": "[]",
                    "range": [
                        34,
                        35
                    ],
                    "children": [],
                    "content": "(sequence"
                },
                {
                    "type": "Argument",
                    "name": "0",
                    "range": [
                        37,
                        37
                    ],
                    "children": [],
                    "content": "["
                }
            ],
            "content": "None:\ncreate_state_space_tree(sequence,[]"
        },
        {
            "type": "FunctionDecl",
            "name": "create_state_space_tree",
            "range": [
                41,
                134
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        43,
                        63
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "sequence",
                            "range": [
                                45,
                                50
                            ],
                            "children": [],
                            "content": "def create_state_space_tree(\nsequence:"
                        },
                        {
                            "type": "Parameter",
                            "name": "current_subsequence",
                            "range": [
                                52,
                                57
                            ],
                            "children": [],
                            "content": "[Any],current_subsequence:"
                        },
                        {
                            "type": "Parameter",
                            "name": "index",
                            "range": [
                                59,
                                61
                            ],
                            "children": [],
                            "content": "[Any]"
                        }
                    ],
                    "content": "\n\ndef create_state_space_tree(\nsequence:list[Any],current_subsequence:list[Any],index"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        64,
                        66
                    ],
                    "children": [],
                    "content": ":int\n"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        68,
                        134
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                69,
                                75
                            ],
                            "children": [],
                            "content": ">None:\n\"\"\" \\n     Creates a state space tree to iterate through each branch using DFS. \\n     We know that each state has exactly two children. \\n     It terminates when it reaches the end of the given sequence. \\n  \\n     :param sequence: The input sequence for which subsequences are generated. \\n     :param current_subsequence: The current subsequence being built. \\n     :param index: The current index in the sequence. \\n  \\n     Example: \\n     >>> sequence = [3, 2, 1] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n     [1] \\n     [2] \\n     [2, 1] \\n     [3] \\n     [3, 1] \\n     [3, 2] \\n     [3, 2, 1] \\n  \\n     >>> sequence = [\" A"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                78,
                                94
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        79,
                                        85
                                    ],
                                    "children": [],
                                    "content": "\"\"\n\nif index=="
                                },
                                {
                                    "type": "Body",
                                    "name": "body",
                                    "range": [
                                        87,
                                        94
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "print_statement",
                                            "range": [
                                                88,
                                                91
                                            ],
                                            "children": [],
                                            "content": "sequence):\n"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return_statement",
                                            "range": [
                                                93,
                                                94
                                            ],
                                            "children": [],
                                            "content": "(current_subsequence"
                                        }
                                    ],
                                    "content": "(sequence):\nprint(current_subsequence"
                                }
                            ],
                            "content": "\"] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n     ['B'] \\n     ['A'] \\n     ['A', 'B'] \\n  \\n     >>> sequence = [] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n  \\n     >>> sequence = [1, 2, 3, 4] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n     [4] \\n     [3] \\n     [3, 4] \\n     [2] \\n     [2, 4] \\n     [2, 3] \\n     [2, 3, 4] \\n     [1] \\n     [1, 4] \\n     [1, 3] \\n     [1, 3, 4] \\n     [1, 2] \\n     [1, 2, 4] \\n     [1, 2, 3] \\n     [1, 2, 3, 4] \\n     \"\"\"\n\nif index==len(sequence):\nprint(current_subsequence"
                        },
                        {
                            "type": "CallExpression",
                            "name": "create_state_space_tree",
                            "range": [
                                96,
                                105
                            ],
                            "children": [
                                {
                                    "type": "Arguments",
                                    "name": "arguments",
                                    "range": [
                                        98,
                                        104
                                    ],
                                    "children": [],
                                    "content": "\n\ncreate_state_space_tree(sequence,current_subsequence"
                                }
                            ],
                            "content": "\nreturn\n\ncreate_state_space_tree(sequence,current_subsequence,"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "expression_statement",
                            "range": [
                                107,
                                116
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "append",
                                    "range": [
                                        109,
                                        115
                                    ],
                                    "children": [],
                                    "content": ")\ncurrent_subsequence.append(sequence"
                                }
                            ],
                            "content": "+1)\ncurrent_subsequence.append(sequence["
                        },
                        {
                            "type": "CallExpression",
                            "name": "create_state_space_tree",
                            "range": [
                                117,
                                126
                            ],
                            "children": [
                                {
                                    "type": "Arguments",
                                    "name": "arguments",
                                    "range": [
                                        119,
                                        125
                                    ],
                                    "children": [],
                                    "content": ")\ncreate_state_space_tree(sequence,current_subsequence"
                                }
                            ],
                            "content": "index])\ncreate_state_space_tree(sequence,current_subsequence,"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "expression_statement",
                            "range": [
                                128,
                                133
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "pop",
                                    "range": [
                                        130,
                                        132
                                    ],
                                    "children": [],
                                    "content": ")\ncurrent_subsequence"
                                }
                            ],
                            "content": "+1)\ncurrent_subsequence."
                        }
                    ],
                    "content": "->None:\n\"\"\" \\n     Creates a state space tree to iterate through each branch using DFS. \\n     We know that each state has exactly two children. \\n     It terminates when it reaches the end of the given sequence. \\n  \\n     :param sequence: The input sequence for which subsequences are generated. \\n     :param current_subsequence: The current subsequence being built. \\n     :param index: The current index in the sequence. \\n  \\n     Example: \\n     >>> sequence = [3, 2, 1] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n     [1] \\n     [2] \\n     [2, 1] \\n     [3] \\n     [3, 1] \\n     [3, 2] \\n     [3, 2, 1] \\n  \\n     >>> sequence = [\" A\", \"B \"] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n     ['B'] \\n     ['A'] \\n     ['A', 'B'] \\n  \\n     >>> sequence = [] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n  \\n     >>> sequence = [1, 2, 3, 4] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n     [4] \\n     [3] \\n     [3, 4] \\n     [2] \\n     [2, 4] \\n     [2, 3] \\n     [2, 3, 4] \\n     [1] \\n     [1, 4] \\n     [1, 3] \\n     [1, 3, 4] \\n     [1, 2] \\n     [1, 2, 4] \\n     [1, 2, 3] \\n     [1, 2, 3, 4] \\n     \"\"\"\n\nif index==len(sequence):\nprint(current_subsequence)\nreturn\n\ncreate_state_space_tree(sequence,current_subsequence,index+1)\ncurrent_subsequence.append(sequence[index])\ncreate_state_space_tree(sequence,current_subsequence,index+1)\ncurrent_subsequence.pop"
                }
            ],
            "content": ")\n\n\ndef create_state_space_tree(\nsequence:list[Any],current_subsequence:list[Any],index:int\n)->None:\n\"\"\" \\n     Creates a state space tree to iterate through each branch using DFS. \\n     We know that each state has exactly two children. \\n     It terminates when it reaches the end of the given sequence. \\n  \\n     :param sequence: The input sequence for which subsequences are generated. \\n     :param current_subsequence: The current subsequence being built. \\n     :param index: The current index in the sequence. \\n  \\n     Example: \\n     >>> sequence = [3, 2, 1] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n     [1] \\n     [2] \\n     [2, 1] \\n     [3] \\n     [3, 1] \\n     [3, 2] \\n     [3, 2, 1] \\n  \\n     >>> sequence = [\" A\", \"B \"] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n     ['B'] \\n     ['A'] \\n     ['A', 'B'] \\n  \\n     >>> sequence = [] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n  \\n     >>> sequence = [1, 2, 3, 4] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n     [4] \\n     [3] \\n     [3, 4] \\n     [2] \\n     [2, 4] \\n     [2, 3] \\n     [2, 3, 4] \\n     [1] \\n     [1, 4] \\n     [1, 3] \\n     [1, 3, 4] \\n     [1, 2] \\n     [1, 2, 4] \\n     [1, 2, 3] \\n     [1, 2, 3, 4] \\n     \"\"\"\n\nif index==len(sequence):\nprint(current_subsequence)\nreturn\n\ncreate_state_space_tree(sequence,current_subsequence,index+1)\ncurrent_subsequence.append(sequence[index])\ncreate_state_space_tree(sequence,current_subsequence,index+1)\ncurrent_subsequence.pop"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                135,
                141
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "",
                    "range": [
                        135,
                        140
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "",
                            "range": [
                                135,
                                139
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "__name__",
                                    "range": [
                                        136,
                                        136
                                    ],
                                    "children": [],
                                    "content": ")"
                                },
                                {
                                    "type": "Operator",
                                    "name": "==",
                                    "range": [
                                        137,
                                        138
                                    ],
                                    "children": [],
                                    "content": "\n\n"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "__main__",
                                    "range": [
                                        139,
                                        139
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "()\n\n\n"
                        }
                    ],
                    "content": "()\n\n\nif"
                }
            ],
            "content": "()\n\n\nif __name__"
        },
        {
            "type": "VariableDeclaration",
            "name": "seq",
            "range": [
                142,
                156
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "",
                    "range": [
                        143,
                        147
                    ],
                    "children": [
                        {
                            "type": "ListType",
                            "name": "",
                            "range": [
                                144,
                                147
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "Any",
                                    "range": [
                                        146,
                                        146
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "\"__main__\":\nseq"
                        }
                    ],
                    "content": "=\"__main__\":\nseq"
                },
                {
                    "type": "Assignment",
                    "name": "",
                    "range": [
                        148,
                        155
                    ],
                    "children": [
                        {
                            "type": "ArrayLiteral",
                            "name": "",
                            "range": [
                                149,
                                155
                            ],
                            "children": [
                                {
                                    "type": "NumberLiteral",
                                    "name": "1",
                                    "range": [
                                        150,
                                        150
                                    ],
                                    "children": [],
                                    "content": "["
                                },
                                {
                                    "type": "NumberLiteral",
                                    "name": "2",
                                    "range": [
                                        152,
                                        152
                                    ],
                                    "children": [],
                                    "content": "]"
                                },
                                {
                                    "type": "NumberLiteral",
                                    "name": "3",
                                    "range": [
                                        154,
                                        154
                                    ],
                                    "children": [],
                                    "content": "["
                                }
                            ],
                            "content": "list[Any]=[1"
                        }
                    ],
                    "content": ":list[Any]=[1"
                }
            ],
            "content": "==\"__main__\":\nseq:list[Any]=[1,"
        },
        {
            "type": "FunctionDecl",
            "name": "generate_all_subsequences",
            "range": [
                157,
                161
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "seq",
                    "range": [
                        159,
                        159
                    ],
                    "children": [],
                    "content": "3"
                }
            ],
            "content": "2,3]\n"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                163,
                168
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "",
                    "range": [
                        163,
                        167
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "",
                            "range": [
                                163,
                                165
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "seq",
                                    "range": [
                                        163,
                                        163
                                    ],
                                    "children": [],
                                    "content": "("
                                },
                                {
                                    "type": "Property",
                                    "name": "clear",
                                    "range": [
                                        165,
                                        165
                                    ],
                                    "children": [],
                                    "content": ")"
                                }
                            ],
                            "content": "(seq)"
                        }
                    ],
                    "content": "(seq)\n\n"
                }
            ],
            "content": "(seq)\n\nseq"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                169,
                181
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "",
                    "range": [
                        169,
                        180
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "",
                            "range": [
                                169,
                                171
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "seq",
                                    "range": [
                                        169,
                                        169
                                    ],
                                    "children": [],
                                    "content": "."
                                },
                                {
                                    "type": "Property",
                                    "name": "extend",
                                    "range": [
                                        171,
                                        171
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": ".clear("
                        },
                        {
                            "type": "ArrayLiteral",
                            "name": "",
                            "range": [
                                173,
                                179
                            ],
                            "children": [
                                {
                                    "type": "StringLiteral",
                                    "name": "A",
                                    "range": [
                                        174,
                                        174
                                    ],
                                    "children": [],
                                    "content": "seq"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "B",
                                    "range": [
                                        176,
                                        176
                                    ],
                                    "children": [],
                                    "content": "extend"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "C",
                                    "range": [
                                        178,
                                        178
                                    ],
                                    "children": [],
                                    "content": "["
                                }
                            ],
                            "content": "\nseq.extend([\"A\""
                        }
                    ],
                    "content": ".clear()\nseq.extend([\"A\","
                }
            ],
            "content": ".clear()\nseq.extend([\"A\",\"B\""
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                182,
                186
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "",
                    "range": [
                        182,
                        185
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "generate_all_subsequences",
                            "range": [
                                182,
                                182
                            ],
                            "children": [],
                            "content": ","
                        },
                        {
                            "type": "Identifier",
                            "name": "seq",
                            "range": [
                                184,
                                184
                            ],
                            "children": [],
                            "content": "]"
                        }
                    ],
                    "content": ",\"C\"])"
                }
            ],
            "content": ",\"C\"])\n"
        }
    ],
    "content": "\"\"\" \\n In this problem, we want to determine all possible subsequences \\n of the given sequence. We use backtracking to solve this problem. \\n  \\n Time complexity: O(2^n), \\n where n denotes the length of the given sequence. \\n \"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any\n\n\ndef generate_all_subsequences(sequence:list[Any])->None:\ncreate_state_space_tree(sequence,[],0)\n\n\ndef create_state_space_tree(\nsequence:list[Any],current_subsequence:list[Any],index:int\n)->None:\n\"\"\" \\n     Creates a state space tree to iterate through each branch using DFS. \\n     We know that each state has exactly two children. \\n     It terminates when it reaches the end of the given sequence. \\n  \\n     :param sequence: The input sequence for which subsequences are generated. \\n     :param current_subsequence: The current subsequence being built. \\n     :param index: The current index in the sequence. \\n  \\n     Example: \\n     >>> sequence = [3, 2, 1] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n     [1] \\n     [2] \\n     [2, 1] \\n     [3] \\n     [3, 1] \\n     [3, 2] \\n     [3, 2, 1] \\n  \\n     >>> sequence = [\" A\", \"B \"] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n     ['B'] \\n     ['A'] \\n     ['A', 'B'] \\n  \\n     >>> sequence = [] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n  \\n     >>> sequence = [1, 2, 3, 4] \\n     >>> current_subsequence = [] \\n     >>> create_state_space_tree(sequence, current_subsequence, 0) \\n     [] \\n     [4] \\n     [3] \\n     [3, 4] \\n     [2] \\n     [2, 4] \\n     [2, 3] \\n     [2, 3, 4] \\n     [1] \\n     [1, 4] \\n     [1, 3] \\n     [1, 3, 4] \\n     [1, 2] \\n     [1, 2, 4] \\n     [1, 2, 3] \\n     [1, 2, 3, 4] \\n     \"\"\"\n\nif index==len(sequence):\nprint(current_subsequence)\nreturn\n\ncreate_state_space_tree(sequence,current_subsequence,index+1)\ncurrent_subsequence.append(sequence[index])\ncreate_state_space_tree(sequence,current_subsequence,index+1)\ncurrent_subsequence.pop()\n\n\nif __name__==\"__main__\":\nseq:list[Any]=[1,2,3]\ngenerate_all_subsequences(seq)\n\nseq.clear()\nseq.extend([\"A\",\"B\",\"C\"])\n"
}