{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        110
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "get_1s_count",
            "range": [
                0,
                110
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "number",
                    "range": [
                        3,
                        5
                    ],
                    "children": [],
                    "content": "number:int"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        9,
                        9
                    ],
                    "children": [],
                    "content": "int"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        12,
                        16
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Count the number of set bits in a 32 bit integer using Brian Kernighan's way. \\n     Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan \\n     >>> get_1s_count(25) \\n     3 \\n     >>> get_1s_count(37) \\n     3 \\n     >>> get_1s_count(21) \\n     3 \\n     >>> get_1s_count(58) \\n     4 \\n     >>> get_1s_count(0) \\n     0 \\n     >>> get_1s_count(256) \\n     1 \\n     >>> get_1s_count(-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> get_1s_count(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> get_1s_count(\"25\") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     \"\"\""
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        18,
                        37
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                19,
                                30
                            ],
                            "children": [
                                {
                                    "type": "LogicalExpression",
                                    "name": "or",
                                    "range": [
                                        26,
                                        30
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "isinstance",
                                            "range": [
                                                20,
                                                25
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "number",
                                                    "range": [
                                                        22,
                                                        22
                                                    ],
                                                    "children": [],
                                                    "content": "number"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "int",
                                                    "range": [
                                                        24,
                                                        24
                                                    ],
                                                    "children": [],
                                                    "content": "int"
                                                }
                                            ],
                                            "content": "isinstance(number,int)"
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "<",
                                            "range": [
                                                27,
                                                29
                                            ],
                                            "children": [
                                                {
                                                    "type": "Left",
                                                    "name": "number",
                                                    "range": [
                                                        27,
                                                        27
                                                    ],
                                                    "children": [],
                                                    "content": "number"
                                                },
                                                {
                                                    "type": "Right",
                                                    "name": "0",
                                                    "range": [
                                                        29,
                                                        29
                                                    ],
                                                    "children": [],
                                                    "content": "0"
                                                }
                                            ],
                                            "content": "number<0"
                                        }
                                    ],
                                    "content": "or number<0:"
                                }
                            ],
                            "content": "not isinstance(number,int)or number<0:"
                        },
                        {
                            "type": "Consequent",
                            "name": "",
                            "range": [
                                32,
                                36
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "",
                                    "range": [
                                        32,
                                        36
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "ValueError",
                                            "range": [
                                                33,
                                                36
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "\"Input must be a non-negative integer\"",
                                                    "range": [
                                                        35,
                                                        35
                                                    ],
                                                    "children": [],
                                                    "content": "\"Input must be a non-negative integer\""
                                                }
                                            ],
                                            "content": "ValueError(\"Input must be a non-negative integer\")"
                                        }
                                    ],
                                    "content": "raise ValueError(\"Input must be a non-negative integer\")"
                                }
                            ],
                            "content": "raise ValueError(\"Input must be a non-negative integer\")"
                        }
                    ],
                    "content": "if not isinstance(number,int)or number<0:\nraise ValueError(\"Input must be a non-negative integer\")\n"
                },
                {
                    "type": "VariableDeclaration",
                    "name": "count",
                    "range": [
                        39,
                        42
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                40,
                                41
                            ],
                            "children": [
                                {
                                    "type": "Right",
                                    "name": "0",
                                    "range": [
                                        41,
                                        41
                                    ],
                                    "children": [],
                                    "content": "0"
                                }
                            ],
                            "content": "=0"
                        }
                    ],
                    "content": "count=0\n"
                },
                {
                    "type": "WhileStatement",
                    "name": "",
                    "range": [
                        43,
                        107
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "number",
                            "range": [
                                44,
                                44
                            ],
                            "children": [],
                            "content": "number"
                        },
                        {
                            "type": "Body",
                            "name": "",
                            "range": [
                                46,
                                107
                            ],
                            "children": [
                                {
                                    "type": "Comment",
                                    "name": "",
                                    "range": [
                                        47,
                                        95
                                    ],
                                    "children": [],
                                    "content": "#This way we arrive at next set bit(next1)instead of looping\n#through each bit and checking for1s hence the\n#loop won't run32times it will only run the number of`1`times\n"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "",
                                    "range": [
                                        96,
                                        102
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "&=",
                                            "range": [
                                                97,
                                                101
                                            ],
                                            "children": [
                                                {
                                                    "type": "Left",
                                                    "name": "number",
                                                    "range": [
                                                        96,
                                                        96
                                                    ],
                                                    "children": [],
                                                    "content": "number"
                                                },
                                                {
                                                    "type": "Right",
                                                    "name": "number - 1",
                                                    "range": [
                                                        99,
                                                        101
                                                    ],
                                                    "children": [],
                                                    "content": "number-1"
                                                }
                                            ],
                                            "content": "&=number-1"
                                        }
                                    ],
                                    "content": "number&=number-1\n"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "",
                                    "range": [
                                        103,
                                        106
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "+=",
                                            "range": [
                                                104,
                                                105
                                            ],
                                            "children": [
                                                {
                                                    "type": "Left",
                                                    "name": "count",
                                                    "range": [
                                                        103,
                                                        103
                                                    ],
                                                    "children": [],
                                                    "content": "count"
                                                },
                                                {
                                                    "type": "Right",
                                                    "name": "1",
                                                    "range": [
                                                        106,
                                                        106
                                                    ],
                                                    "children": [],
                                                    "content": "1"
                                                }
                                            ],
                                            "content": "+="
                                        }
                                    ],
                                    "content": "count+=1"
                                }
                            ],
                            "content": "\n#This way we arrive at next set bit(next1)instead of looping\n#through each bit and checking for1s hence the\n#loop won't run32times it will only run the number of`1`times\nnumber&=number-1\ncount+=1\n"
                        }
                    ],
                    "content": "while number:\n#This way we arrive at next set bit(next1)instead of looping\n#through each bit and checking for1s hence the\n#loop won't run32times it will only run the number of`1`times\nnumber&=number-1\ncount+=1\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        108,
                        110
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "count",
                            "range": [
                                109,
                                109
                            ],
                            "children": [],
                            "content": "count"
                        }
                    ],
                    "content": "return count\n"
                }
            ],
            "content": "def get_1s_count(number:int)->int:\n\"\"\" \\n     Count the number of set bits in a 32 bit integer using Brian Kernighan's way. \\n     Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan \\n     >>> get_1s_count(25) \\n     3 \\n     >>> get_1s_count(37) \\n     3 \\n     >>> get_1s_count(21) \\n     3 \\n     >>> get_1s_count(58) \\n     4 \\n     >>> get_1s_count(0) \\n     0 \\n     >>> get_1s_count(256) \\n     1 \\n     >>> get_1s_count(-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> get_1s_count(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> get_1s_count(\"25\") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     \"\"\"\nif not isinstance(number,int)or number<0:\nraise ValueError(\"Input must be a non-negative integer\")\n\ncount=0\nwhile number:\n#This way we arrive at next set bit(next1)instead of looping\n#through each bit and checking for1s hence the\n#loop won't run32times it will only run the number of`1`times\nnumber&=number-1\ncount+=1\nreturn count\n"
        }
    ],
    "content": "def get_1s_count(number:int)->int:\n\"\"\" \\n     Count the number of set bits in a 32 bit integer using Brian Kernighan's way. \\n     Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan \\n     >>> get_1s_count(25) \\n     3 \\n     >>> get_1s_count(37) \\n     3 \\n     >>> get_1s_count(21) \\n     3 \\n     >>> get_1s_count(58) \\n     4 \\n     >>> get_1s_count(0) \\n     0 \\n     >>> get_1s_count(256) \\n     1 \\n     >>> get_1s_count(-1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> get_1s_count(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> get_1s_count(\"25\") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     \"\"\"\nif not isinstance(number,int)or number<0:\nraise ValueError(\"Input must be a non-negative integer\")\n\ncount=0\nwhile number:\n#This way we arrive at next set bit(next1)instead of looping\n#through each bit and checking for1s hence the\n#loop won't run32times it will only run the number of`1`times\nnumber&=number-1\ncount+=1\nreturn count\n"
}