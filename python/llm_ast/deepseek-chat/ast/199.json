{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        98
    ],
    "children": [
        {
            "type": "ReferenceStatement",
            "name": "https://www.geeksforgeeks.org/position-of-rightmost-set-bit/",
            "range": [
                0,
                22
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "https://www.geeksforgeeks.org/position-of-rightmost-set-bit/",
                    "range": [
                        3,
                        22
                    ],
                    "children": [],
                    "content": "https://www.geeksforgeeks.org/position-of-rightmost-set-bit/"
                }
            ],
            "content": "#Reference:https://www.geeksforgeeks.org/position-of-rightmost-set-bit/"
        },
        {
            "type": "FunctionDecl",
            "name": "get_index_of_rightmost_set_bit",
            "range": [
                26,
                98
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "number",
                    "range": [
                        29,
                        31
                    ],
                    "children": [],
                    "content": "number:int"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        35,
                        35
                    ],
                    "children": [],
                    "content": "int"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        38,
                        40
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Take in a positive integer 'number'. \\n     Returns the zero-based index of first set bit in that 'number' from right. \\n     Returns -1, If no set bit found. \\n  \\n     >>> get_index_of_rightmost_set_bit(0) \\n     -1 \\n     >>> get_index_of_rightmost_set_bit(5) \\n     0 \\n     >>> get_index_of_rightmost_set_bit(36) \\n     2 \\n     >>> get_index_of_rightmost_set_bit(8) \\n     3 \\n     >>> get_index_of_rightmost_set_bit(-18) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> get_index_of_rightmost_set_bit('test') \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> get_index_of_rightmost_set_bit(1.25) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     \"\"\""
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        43,
                        62
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                44,
                                55
                            ],
                            "children": [
                                {
                                    "type": "LogicalExpression",
                                    "name": "or",
                                    "range": [
                                        51,
                                        51
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "isinstance",
                                            "range": [
                                                45,
                                                50
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "number",
                                                    "range": [
                                                        47,
                                                        47
                                                    ],
                                                    "children": [],
                                                    "content": "number"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "int",
                                                    "range": [
                                                        49,
                                                        49
                                                    ],
                                                    "children": [],
                                                    "content": "int"
                                                }
                                            ],
                                            "content": "isinstance(number,int)"
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "<",
                                            "range": [
                                                53,
                                                53
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "number",
                                                    "range": [
                                                        52,
                                                        52
                                                    ],
                                                    "children": [],
                                                    "content": "number"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "0",
                                                    "range": [
                                                        54,
                                                        54
                                                    ],
                                                    "children": [],
                                                    "content": "0"
                                                }
                                            ],
                                            "content": "<"
                                        }
                                    ],
                                    "content": "or"
                                }
                            ],
                            "content": "not isinstance(number,int)or number<0:"
                        },
                        {
                            "type": "Block",
                            "name": "",
                            "range": [
                                56,
                                62
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "",
                                    "range": [
                                        57,
                                        61
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "ValueError",
                                            "range": [
                                                58,
                                                61
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "\"Input must be a non-negative integer\"",
                                                    "range": [
                                                        60,
                                                        60
                                                    ],
                                                    "children": [],
                                                    "content": "\"Input must be a non-negative integer\""
                                                }
                                            ],
                                            "content": "ValueError(\"Input must be a non-negative integer\")"
                                        }
                                    ],
                                    "content": "raise ValueError(\"Input must be a non-negative integer\")"
                                }
                            ],
                            "content": "\nraise ValueError(\"Input must be a non-negative integer\")\n"
                        }
                    ],
                    "content": "if not isinstance(number,int)or number<0:\nraise ValueError(\"Input must be a non-negative integer\")\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "intermediate",
                    "range": [
                        64,
                        74
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "&",
                            "range": [
                                67,
                                67
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "number",
                                    "range": [
                                        66,
                                        66
                                    ],
                                    "children": [],
                                    "content": "number"
                                },
                                {
                                    "type": "UnaryExpression",
                                    "name": "~",
                                    "range": [
                                        68,
                                        68
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "-",
                                            "range": [
                                                71,
                                                71
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "number",
                                                    "range": [
                                                        70,
                                                        70
                                                    ],
                                                    "children": [],
                                                    "content": "number"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "1",
                                                    "range": [
                                                        72,
                                                        72
                                                    ],
                                                    "children": [],
                                                    "content": "1"
                                                }
                                            ],
                                            "content": "-"
                                        }
                                    ],
                                    "content": "~"
                                }
                            ],
                            "content": "&"
                        }
                    ],
                    "content": "intermediate=number&~(number-1)\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "index",
                    "range": [
                        75,
                        78
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "0",
                            "range": [
                                77,
                                77
                            ],
                            "children": [],
                            "content": "0"
                        }
                    ],
                    "content": "index=0\n"
                },
                {
                    "type": "WhileStatement",
                    "name": "",
                    "range": [
                        79,
                        93
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "intermediate",
                            "range": [
                                80,
                                80
                            ],
                            "children": [],
                            "content": "intermediate"
                        },
                        {
                            "type": "Block",
                            "name": "",
                            "range": [
                                82,
                                93
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "intermediate",
                                    "range": [
                                        83,
                                        88
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": ">>=",
                                            "range": [
                                                85,
                                                86
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "intermediate",
                                                    "range": [
                                                        83,
                                                        83
                                                    ],
                                                    "children": [],
                                                    "content": "intermediate"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "1",
                                                    "range": [
                                                        87,
                                                        87
                                                    ],
                                                    "children": [],
                                                    "content": "1"
                                                }
                                            ],
                                            "content": ">="
                                        }
                                    ],
                                    "content": "intermediate>>=1\n"
                                },
                                {
                                    "type": "AssignmentExpression",
                                    "name": "index",
                                    "range": [
                                        89,
                                        93
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "+=",
                                            "range": [
                                                91,
                                                92
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "index",
                                                    "range": [
                                                        89,
                                                        89
                                                    ],
                                                    "children": [],
                                                    "content": "index"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "1",
                                                    "range": [
                                                        92,
                                                        92
                                                    ],
                                                    "children": [],
                                                    "content": "1"
                                                }
                                            ],
                                            "content": "=1"
                                        }
                                    ],
                                    "content": "index+=1\n"
                                }
                            ],
                            "content": "\nintermediate>>=1\nindex+=1\n"
                        }
                    ],
                    "content": "while intermediate:\nintermediate>>=1\nindex+=1\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        94,
                        98
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "-",
                            "range": [
                                96,
                                96
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "index",
                                    "range": [
                                        95,
                                        95
                                    ],
                                    "children": [],
                                    "content": "index"
                                },
                                {
                                    "type": "Literal",
                                    "name": "1",
                                    "range": [
                                        97,
                                        97
                                    ],
                                    "children": [],
                                    "content": "1"
                                }
                            ],
                            "content": "-"
                        }
                    ],
                    "content": "return index-1\n"
                }
            ],
            "content": "def get_index_of_rightmost_set_bit(number:int)->int:\n\"\"\" \\n     Take in a positive integer 'number'. \\n     Returns the zero-based index of first set bit in that 'number' from right. \\n     Returns -1, If no set bit found. \\n  \\n     >>> get_index_of_rightmost_set_bit(0) \\n     -1 \\n     >>> get_index_of_rightmost_set_bit(5) \\n     0 \\n     >>> get_index_of_rightmost_set_bit(36) \\n     2 \\n     >>> get_index_of_rightmost_set_bit(8) \\n     3 \\n     >>> get_index_of_rightmost_set_bit(-18) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> get_index_of_rightmost_set_bit('test') \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> get_index_of_rightmost_set_bit(1.25) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     \"\"\"\n\nif not isinstance(number,int)or number<0:\nraise ValueError(\"Input must be a non-negative integer\")\n\nintermediate=number&~(number-1)\nindex=0\nwhile intermediate:\nintermediate>>=1\nindex+=1\nreturn index-1\n"
        }
    ],
    "content": "#Reference:https://www.geeksforgeeks.org/position-of-rightmost-set-bit/\n\n\ndef get_index_of_rightmost_set_bit(number:int)->int:\n\"\"\" \\n     Take in a positive integer 'number'. \\n     Returns the zero-based index of first set bit in that 'number' from right. \\n     Returns -1, If no set bit found. \\n  \\n     >>> get_index_of_rightmost_set_bit(0) \\n     -1 \\n     >>> get_index_of_rightmost_set_bit(5) \\n     0 \\n     >>> get_index_of_rightmost_set_bit(36) \\n     2 \\n     >>> get_index_of_rightmost_set_bit(8) \\n     3 \\n     >>> get_index_of_rightmost_set_bit(-18) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> get_index_of_rightmost_set_bit('test') \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> get_index_of_rightmost_set_bit(1.25) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     \"\"\"\n\nif not isinstance(number,int)or number<0:\nraise ValueError(\"Input must be a non-negative integer\")\n\nintermediate=number&~(number-1)\nindex=0\nwhile intermediate:\nintermediate>>=1\nindex+=1\nreturn index-1\n"
}