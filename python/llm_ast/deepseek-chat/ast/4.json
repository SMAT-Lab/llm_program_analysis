{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        5528
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                2
            ],
            "children": [
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        0,
                        0
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedModule",
                    "name": "atexit",
                    "range": [
                        1,
                        1
                    ],
                    "children": [],
                    "content": "atexit"
                }
            ],
            "content": "import atexit\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                3,
                5
            ],
            "children": [
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        3,
                        3
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedModule",
                    "name": "logging",
                    "range": [
                        4,
                        4
                    ],
                    "children": [],
                    "content": "logging"
                }
            ],
            "content": "import logging\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                6,
                8
            ],
            "children": [
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        6,
                        6
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedModule",
                    "name": "multiprocessing",
                    "range": [
                        7,
                        7
                    ],
                    "children": [],
                    "content": "multiprocessing"
                }
            ],
            "content": "import multiprocessing\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                9,
                11
            ],
            "children": [
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        9,
                        9
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedModule",
                    "name": "os",
                    "range": [
                        10,
                        10
                    ],
                    "children": [],
                    "content": "os"
                }
            ],
            "content": "import os\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                12,
                14
            ],
            "children": [
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        12,
                        12
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedModule",
                    "name": "signal",
                    "range": [
                        13,
                        13
                    ],
                    "children": [],
                    "content": "signal"
                }
            ],
            "content": "import signal\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                15,
                17
            ],
            "children": [
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        15,
                        15
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedModule",
                    "name": "sys",
                    "range": [
                        16,
                        16
                    ],
                    "children": [],
                    "content": "sys"
                }
            ],
            "content": "import sys\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                18,
                20
            ],
            "children": [
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        18,
                        18
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedModule",
                    "name": "threading",
                    "range": [
                        19,
                        19
                    ],
                    "children": [],
                    "content": "threading"
                }
            ],
            "content": "import threading\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                21,
                29
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        21,
                        21
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "concurrent.futures",
                    "range": [
                        22,
                        24
                    ],
                    "children": [],
                    "content": "concurrent.futures"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        25,
                        25
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        26,
                        28
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "Future",
                            "range": [
                                26,
                                26
                            ],
                            "children": [],
                            "content": "Future"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "ProcessPoolExecutor",
                            "range": [
                                28,
                                28
                            ],
                            "children": [],
                            "content": "ProcessPoolExecutor"
                        }
                    ],
                    "content": "Future,ProcessPoolExecutor"
                }
            ],
            "content": "from concurrent.futures import Future,ProcessPoolExecutor\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                30,
                34
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        30,
                        30
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "contextlib",
                    "range": [
                        31,
                        31
                    ],
                    "children": [],
                    "content": "contextlib"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        32,
                        32
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        33,
                        33
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "contextmanager",
                            "range": [
                                33,
                                33
                            ],
                            "children": [],
                            "content": "contextmanager"
                        }
                    ],
                    "content": "contextmanager"
                }
            ],
            "content": "from contextlib import contextmanager\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                35,
                43
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        35,
                        35
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "multiprocessing.pool",
                    "range": [
                        36,
                        38
                    ],
                    "children": [],
                    "content": "multiprocessing.pool"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        39,
                        39
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        40,
                        42
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "AsyncResult",
                            "range": [
                                40,
                                40
                            ],
                            "children": [],
                            "content": "AsyncResult"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "Pool",
                            "range": [
                                42,
                                42
                            ],
                            "children": [],
                            "content": "Pool"
                        }
                    ],
                    "content": "AsyncResult,Pool"
                }
            ],
            "content": "from multiprocessing.pool import AsyncResult,Pool\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                44,
                56
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        44,
                        44
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "typing",
                    "range": [
                        45,
                        45
                    ],
                    "children": [],
                    "content": "typing"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        46,
                        46
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        47,
                        55
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "TYPE_CHECKING",
                            "range": [
                                47,
                                47
                            ],
                            "children": [],
                            "content": "TYPE_CHECKING"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "Any",
                            "range": [
                                49,
                                49
                            ],
                            "children": [],
                            "content": "Any"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "Generator",
                            "range": [
                                51,
                                51
                            ],
                            "children": [],
                            "content": "Generator"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "TypeVar",
                            "range": [
                                53,
                                53
                            ],
                            "children": [],
                            "content": "TypeVar"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "cast",
                            "range": [
                                55,
                                55
                            ],
                            "children": [],
                            "content": "cast"
                        }
                    ],
                    "content": "TYPE_CHECKING,Any,Generator,TypeVar,cast"
                }
            ],
            "content": "from typing import TYPE_CHECKING,Any,Generator,TypeVar,cast\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                58,
                62
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        58,
                        58
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "pydantic",
                    "range": [
                        59,
                        59
                    ],
                    "children": [],
                    "content": "pydantic"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        60,
                        60
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        61,
                        61
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "BaseModel",
                            "range": [
                                61,
                                61
                            ],
                            "children": [],
                            "content": "BaseModel"
                        }
                    ],
                    "content": "BaseModel"
                }
            ],
            "content": "from pydantic import BaseModel\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                63,
                71
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        63,
                        63
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "redis.lock",
                    "range": [
                        64,
                        66
                    ],
                    "children": [],
                    "content": "redis.lock"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        67,
                        67
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        68,
                        70
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "Lock",
                            "range": [
                                68,
                                68
                            ],
                            "children": [],
                            "content": "Lock"
                        },
                        {
                            "type": "Alias",
                            "name": "as",
                            "range": [
                                69,
                                69
                            ],
                            "children": [],
                            "content": "as"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "RedisLock",
                            "range": [
                                70,
                                70
                            ],
                            "children": [],
                            "content": "RedisLock"
                        }
                    ],
                    "content": "Lock as RedisLock"
                }
            ],
            "content": "from redis.lock import Lock as RedisLock\n"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                73,
                83
            ],
            "children": [
                {
                    "type": "IfKeyword",
                    "name": "if",
                    "range": [
                        73,
                        73
                    ],
                    "children": [],
                    "content": "if"
                },
                {
                    "type": "Condition",
                    "name": "TYPE_CHECKING",
                    "range": [
                        74,
                        74
                    ],
                    "children": [],
                    "content": "TYPE_CHECKING"
                },
                {
                    "type": "Colon",
                    "name": ":",
                    "range": [
                        75,
                        75
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        77,
                        77
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.executor",
                    "range": [
                        78,
                        80
                    ],
                    "children": [],
                    "content": "backend.executor"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        81,
                        81
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        82,
                        82
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "DatabaseManager",
                            "range": [
                                82,
                                82
                            ],
                            "children": [],
                            "content": "DatabaseManager"
                        }
                    ],
                    "content": "DatabaseManager"
                }
            ],
            "content": "if TYPE_CHECKING:\nfrom backend.executor import DatabaseManager\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                85,
                93
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        85,
                        85
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "autogpt_libs.utils.cache",
                    "range": [
                        86,
                        90
                    ],
                    "children": [],
                    "content": "autogpt_libs.utils.cache"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        91,
                        91
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        92,
                        92
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "thread_cached",
                            "range": [
                                92,
                                92
                            ],
                            "children": [],
                            "content": "thread_cached"
                        }
                    ],
                    "content": "thread_cached"
                }
            ],
            "content": "from autogpt_libs.utils.cache import thread_cached\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                95,
                103
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        95,
                        95
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.blocks.agent",
                    "range": [
                        96,
                        100
                    ],
                    "children": [],
                    "content": "backend.blocks.agent"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        101,
                        101
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        102,
                        102
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "AgentExecutorBlock",
                            "range": [
                                102,
                                102
                            ],
                            "children": [],
                            "content": "AgentExecutorBlock"
                        }
                    ],
                    "content": "AgentExecutorBlock"
                }
            ],
            "content": "from backend.blocks.agent import AgentExecutorBlock\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                104,
                110
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        104,
                        104
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.data",
                    "range": [
                        105,
                        107
                    ],
                    "children": [],
                    "content": "backend.data"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        108,
                        108
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        109,
                        109
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "redis",
                            "range": [
                                109,
                                109
                            ],
                            "children": [],
                            "content": "redis"
                        }
                    ],
                    "content": "redis"
                }
            ],
            "content": "from backend.data import redis\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                111,
                127
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        111,
                        111
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.data.block",
                    "range": [
                        112,
                        116
                    ],
                    "children": [],
                    "content": "backend.data.block"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        117,
                        117
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        118,
                        126
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "Block",
                            "range": [
                                118,
                                118
                            ],
                            "children": [],
                            "content": "Block"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "BlockData",
                            "range": [
                                120,
                                120
                            ],
                            "children": [],
                            "content": "BlockData"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "BlockInput",
                            "range": [
                                122,
                                122
                            ],
                            "children": [],
                            "content": "BlockInput"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "BlockType",
                            "range": [
                                124,
                                124
                            ],
                            "children": [],
                            "content": "BlockType"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "get_block",
                            "range": [
                                126,
                                126
                            ],
                            "children": [],
                            "content": "get_block"
                        }
                    ],
                    "content": "Block,BlockData,BlockInput,BlockType,get_block"
                }
            ],
            "content": "from backend.data.block import Block,BlockData,BlockInput,BlockType,get_block\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                128,
                159
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        128,
                        128
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.data.execution",
                    "range": [
                        129,
                        133
                    ],
                    "children": [],
                    "content": "backend.data.execution"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        134,
                        134
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        135,
                        158
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "ExecutionQueue",
                            "range": [
                                137,
                                137
                            ],
                            "children": [],
                            "content": "ExecutionQueue"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "ExecutionResult",
                            "range": [
                                140,
                                140
                            ],
                            "children": [],
                            "content": "ExecutionResult"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "ExecutionStatus",
                            "range": [
                                143,
                                143
                            ],
                            "children": [],
                            "content": "ExecutionStatus"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "GraphExecutionEntry",
                            "range": [
                                146,
                                146
                            ],
                            "children": [],
                            "content": "GraphExecutionEntry"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "NodeExecutionEntry",
                            "range": [
                                149,
                                149
                            ],
                            "children": [],
                            "content": "NodeExecutionEntry"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "merge_execution_input",
                            "range": [
                                152,
                                152
                            ],
                            "children": [],
                            "content": "merge_execution_input"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "parse_execution_output",
                            "range": [
                                155,
                                155
                            ],
                            "children": [],
                            "content": "parse_execution_output"
                        }
                    ],
                    "content": "(\nExecutionQueue,\nExecutionResult,\nExecutionStatus,\nGraphExecutionEntry,\nNodeExecutionEntry,\nmerge_execution_input,\nparse_execution_output,\n)"
                }
            ],
            "content": "from backend.data.execution import(\nExecutionQueue,\nExecutionResult,\nExecutionStatus,\nGraphExecutionEntry,\nNodeExecutionEntry,\nmerge_execution_input,\nparse_execution_output,\n)\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                160,
                172
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        160,
                        160
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.data.graph",
                    "range": [
                        161,
                        165
                    ],
                    "children": [],
                    "content": "backend.data.graph"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        166,
                        166
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        167,
                        171
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "GraphModel",
                            "range": [
                                167,
                                167
                            ],
                            "children": [],
                            "content": "GraphModel"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "Link",
                            "range": [
                                169,
                                169
                            ],
                            "children": [],
                            "content": "Link"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "Node",
                            "range": [
                                171,
                                171
                            ],
                            "children": [],
                            "content": "Node"
                        }
                    ],
                    "content": "GraphModel,Link,Node"
                }
            ],
            "content": "from backend.data.graph import GraphModel,Link,Node\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                173,
                183
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        173,
                        173
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.data.model",
                    "range": [
                        174,
                        178
                    ],
                    "children": [],
                    "content": "backend.data.model"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        179,
                        179
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        180,
                        182
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "CREDENTIALS_FIELD_NAME",
                            "range": [
                                180,
                                180
                            ],
                            "children": [],
                            "content": "CREDENTIALS_FIELD_NAME"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "CredentialsMetaInput",
                            "range": [
                                182,
                                182
                            ],
                            "children": [],
                            "content": "CredentialsMetaInput"
                        }
                    ],
                    "content": "CREDENTIALS_FIELD_NAME,CredentialsMetaInput"
                }
            ],
            "content": "from backend.data.model import CREDENTIALS_FIELD_NAME,CredentialsMetaInput\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                184,
                192
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        184,
                        184
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.integrations.creds_manager",
                    "range": [
                        185,
                        189
                    ],
                    "children": [],
                    "content": "backend.integrations.creds_manager"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        190,
                        190
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        191,
                        191
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "IntegrationCredentialsManager",
                            "range": [
                                191,
                                191
                            ],
                            "children": [],
                            "content": "IntegrationCredentialsManager"
                        }
                    ],
                    "content": "IntegrationCredentialsManager"
                }
            ],
            "content": "from backend.integrations.creds_manager import IntegrationCredentialsManager\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                193,
                199
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        193,
                        193
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.util",
                    "range": [
                        194,
                        196
                    ],
                    "children": [],
                    "content": "backend.util"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        197,
                        197
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        198,
                        198
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "json",
                            "range": [
                                198,
                                198
                            ],
                            "children": [],
                            "content": "json"
                        }
                    ],
                    "content": "json"
                }
            ],
            "content": "from backend.util import json\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                200,
                210
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        200,
                        200
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.util.decorator",
                    "range": [
                        201,
                        205
                    ],
                    "children": [],
                    "content": "backend.util.decorator"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        206,
                        206
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        207,
                        209
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "error_logged",
                            "range": [
                                207,
                                207
                            ],
                            "children": [],
                            "content": "error_logged"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "time_measured",
                            "range": [
                                209,
                                209
                            ],
                            "children": [],
                            "content": "time_measured"
                        }
                    ],
                    "content": "error_logged,time_measured"
                }
            ],
            "content": "from backend.util.decorator import error_logged,time_measured\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                211,
                219
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        211,
                        211
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.util.logging",
                    "range": [
                        212,
                        216
                    ],
                    "children": [],
                    "content": "backend.util.logging"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        217,
                        217
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        218,
                        218
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "configure_logging",
                            "range": [
                                218,
                                218
                            ],
                            "children": [],
                            "content": "configure_logging"
                        }
                    ],
                    "content": "configure_logging"
                }
            ],
            "content": "from backend.util.logging import configure_logging\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                220,
                228
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        220,
                        220
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.util.process",
                    "range": [
                        221,
                        225
                    ],
                    "children": [],
                    "content": "backend.util.process"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        226,
                        226
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        227,
                        227
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "set_service_name",
                            "range": [
                                227,
                                227
                            ],
                            "children": [],
                            "content": "set_service_name"
                        }
                    ],
                    "content": "set_service_name"
                }
            ],
            "content": "from backend.util.process import set_service_name\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                229,
                251
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        229,
                        229
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.util.service",
                    "range": [
                        230,
                        234
                    ],
                    "children": [],
                    "content": "backend.util.service"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        235,
                        235
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        236,
                        250
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "AppService",
                            "range": [
                                238,
                                238
                            ],
                            "children": [],
                            "content": "AppService"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "close_service_client",
                            "range": [
                                241,
                                241
                            ],
                            "children": [],
                            "content": "close_service_client"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "expose",
                            "range": [
                                244,
                                244
                            ],
                            "children": [],
                            "content": "expose"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "get_service_client",
                            "range": [
                                247,
                                247
                            ],
                            "children": [],
                            "content": "get_service_client"
                        }
                    ],
                    "content": "(\nAppService,\nclose_service_client,\nexpose,\nget_service_client,\n)"
                }
            ],
            "content": "from backend.util.service import(\nAppService,\nclose_service_client,\nexpose,\nget_service_client,\n)\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                252,
                260
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        252,
                        252
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.util.settings",
                    "range": [
                        253,
                        257
                    ],
                    "children": [],
                    "content": "backend.util.settings"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        258,
                        258
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        259,
                        259
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "Settings",
                            "range": [
                                259,
                                259
                            ],
                            "children": [],
                            "content": "Settings"
                        }
                    ],
                    "content": "Settings"
                }
            ],
            "content": "from backend.util.settings import Settings\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                261,
                269
            ],
            "children": [
                {
                    "type": "FromKeyword",
                    "name": "from",
                    "range": [
                        261,
                        261
                    ],
                    "children": [],
                    "content": "from"
                },
                {
                    "type": "ModulePath",
                    "name": "backend.util.type",
                    "range": [
                        262,
                        266
                    ],
                    "children": [],
                    "content": "backend.util.type"
                },
                {
                    "type": "ImportKeyword",
                    "name": "import",
                    "range": [
                        267,
                        267
                    ],
                    "children": [],
                    "content": "import"
                },
                {
                    "type": "ImportedEntities",
                    "name": "",
                    "range": [
                        268,
                        268
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "convert",
                            "range": [
                                268,
                                268
                            ],
                            "children": [],
                            "content": "convert"
                        }
                    ],
                    "content": "convert"
                }
            ],
            "content": "from backend.util.type import convert\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                275,
                364
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        277,
                        312
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                279,
                                279
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                282,
                                284
                            ],
                            "children": [],
                            "content": "Settings()"
                        },
                        {
                            "type": "Parameter",
                            "name": "graph_eid",
                            "range": [
                                287,
                                289
                            ],
                            "children": [],
                            "content": "\nclass LogMetadata"
                        },
                        {
                            "type": "Parameter",
                            "name": "graph_id",
                            "range": [
                                292,
                                294
                            ],
                            "children": [],
                            "content": "def __init__("
                        },
                        {
                            "type": "Parameter",
                            "name": "node_eid",
                            "range": [
                                297,
                                299
                            ],
                            "children": [],
                            "content": ",\nuser_id"
                        },
                        {
                            "type": "Parameter",
                            "name": "node_id",
                            "range": [
                                302,
                                304
                            ],
                            "children": [],
                            "content": ",\ngraph_eid"
                        },
                        {
                            "type": "Parameter",
                            "name": "block_name",
                            "range": [
                                307,
                                309
                            ],
                            "children": [],
                            "content": ",\ngraph_id"
                        }
                    ],
                    "content": "__name__)\nsettings=Settings()\n\n\nclass LogMetadata:\ndef __init__(\nself,\nuser_id:str,\ngraph_eid:str,\ngraph_id:str,"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        314,
                        364
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "",
                            "range": [
                                315,
                                319
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "self.metadata",
                                    "range": [
                                        315,
                                        317
                                    ],
                                    "children": [],
                                    "content": ":str,"
                                },
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        319,
                                        356
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "",
                                            "range": [
                                                321,
                                                323
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "component",
                                                    "range": [
                                                        321,
                                                        321
                                                    ],
                                                    "children": [],
                                                    "content": "str"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "ExecutionManager",
                                                    "range": [
                                                        323,
                                                        323
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": "str,\n"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "",
                                            "range": [
                                                326,
                                                328
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "user_id",
                                                    "range": [
                                                        326,
                                                        326
                                                    ],
                                                    "children": [],
                                                    "content": "str"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "user_id",
                                                    "range": [
                                                        328,
                                                        328
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": "str,\n"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "",
                                            "range": [
                                                331,
                                                333
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "graph_eid",
                                                    "range": [
                                                        331,
                                                        331
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "graph_eid",
                                                    "range": [
                                                        333,
                                                        333
                                                    ],
                                                    "children": [],
                                                    "content": "."
                                                }
                                            ],
                                            "content": "\nself."
                                        },
                                        {
                                            "type": "Property",
                                            "name": "",
                                            "range": [
                                                336,
                                                338
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "graph_id",
                                                    "range": [
                                                        336,
                                                        336
                                                    ],
                                                    "children": [],
                                                    "content": "{"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "graph_id",
                                                    "range": [
                                                        338,
                                                        338
                                                    ],
                                                    "children": [],
                                                    "content": "\"component\""
                                                }
                                            ],
                                            "content": "{\n\"component\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "",
                                            "range": [
                                                341,
                                                343
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "node_eid",
                                                    "range": [
                                                        341,
                                                        341
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "node_eid",
                                                    "range": [
                                                        343,
                                                        343
                                                    ],
                                                    "children": [],
                                                    "content": "\"user_id\""
                                                }
                                            ],
                                            "content": ",\n\"user_id\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "",
                                            "range": [
                                                346,
                                                348
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "node_id",
                                                    "range": [
                                                        346,
                                                        346
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "node_id",
                                                    "range": [
                                                        348,
                                                        348
                                                    ],
                                                    "children": [],
                                                    "content": "\"graph_eid\""
                                                }
                                            ],
                                            "content": ",\n\"graph_eid\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "",
                                            "range": [
                                                351,
                                                353
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "block_name",
                                                    "range": [
                                                        351,
                                                        351
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "block_name",
                                                    "range": [
                                                        353,
                                                        353
                                                    ],
                                                    "children": [],
                                                    "content": "\"graph_id\""
                                                }
                                            ],
                                            "content": ",\n\"graph_id\""
                                        }
                                    ],
                                    "content": "node_id:str,\nblock_name:str,\n):\nself.metadata={\n\"component\":\"ExecutionManager\",\n\"user_id\":user_id,\n\"graph_eid\":graph_eid,\n\"graph_id\":graph_id,"
                                }
                            ],
                            "content": ":str,\nnode_id"
                        },
                        {
                            "type": "Assignment",
                            "name": "",
                            "range": [
                                358,
                                363
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "self.prefix",
                                    "range": [
                                        358,
                                        360
                                    ],
                                    "children": [],
                                    "content": "\"node_eid\":node_eid"
                                },
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        362,
                                        363
                                    ],
                                    "children": [],
                                    "content": "\n\"node_id\""
                                }
                            ],
                            "content": "\"node_eid\":node_eid,\n\"node_id\""
                        }
                    ],
                    "content": "node_eid:str,\nnode_id:str,\nblock_name:str,\n):\nself.metadata={\n\"component\":\"ExecutionManager\",\n\"user_id\":user_id,\n\"graph_eid\":graph_eid,\n\"graph_id\":graph_id,\n\"node_eid\":node_eid,\n\"node_id\":"
                }
            ],
            "content": "getLogger(__name__)\nsettings=Settings()\n\n\nclass LogMetadata:\ndef __init__(\nself,\nuser_id:str,\ngraph_eid:str,\ngraph_id:str,\nnode_eid:str,\nnode_id:str,\nblock_name:str,\n):\nself.metadata={\n\"component\":\"ExecutionManager\",\n\"user_id\":user_id,\n\"graph_eid\":graph_eid,\n\"graph_id\":graph_id,\n\"node_eid\":node_eid,\n\"node_id\":"
        },
        {
            "type": "FunctionDecl",
            "name": "info",
            "range": [
                366,
                418
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        368,
                        378
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                369,
                                369
                            ],
                            "children": [],
                            "content": ":"
                        },
                        {
                            "type": "Parameter",
                            "name": "msg",
                            "range": [
                                371,
                                373
                            ],
                            "children": [],
                            "content": ",\n}"
                        },
                        {
                            "type": "Parameter",
                            "name": "extra",
                            "range": [
                                375,
                                377
                            ],
                            "children": [],
                            "content": "self.prefix"
                        }
                    ],
                    "content": "\"block_name\":block_name,\n}\nself.prefix="
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        380,
                        418
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "",
                            "range": [
                                381,
                                392
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "msg",
                                    "range": [
                                        381,
                                        381
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "self._wrap",
                                    "range": [
                                        383,
                                        392
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                386,
                                                391
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "msg",
                                                    "range": [
                                                        387,
                                                        387
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "extra",
                                                    "range": [
                                                        389,
                                                        391
                                                    ],
                                                    "children": [],
                                                    "content": ":str,"
                                                }
                                            ],
                                            "content": "self,msg:str,"
                                        }
                                    ],
                                    "content": "def info(self,msg:str,*"
                                }
                            ],
                            "content": "\n\ndef info(self,msg:str,*"
                        },
                        {
                            "type": "CallExpression",
                            "name": "logger.info",
                            "range": [
                                394,
                                417
                            ],
                            "children": [
                                {
                                    "type": "ArgumentList",
                                    "name": "",
                                    "range": [
                                        397,
                                        416
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "msg",
                                            "range": [
                                                398,
                                                398
                                            ],
                                            "children": [],
                                            "content": "msg"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "extra",
                                            "range": [
                                                400,
                                                416
                                            ],
                                            "children": [
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "",
                                                    "range": [
                                                        402,
                                                        416
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "",
                                                            "range": [
                                                                403,
                                                                415
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "json_fields",
                                                                    "range": [
                                                                        403,
                                                                        403
                                                                    ],
                                                                    "children": [],
                                                                    "content": "("
                                                                },
                                                                {
                                                                    "type": "ObjectExpression",
                                                                    "name": "",
                                                                    "range": [
                                                                        405,
                                                                        415
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "",
                                                                            "range": [
                                                                                406,
                                                                                414
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        406,
                                                                                        407
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "**"
                                                                                },
                                                                                {
                                                                                    "type": "Literal",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        408,
                                                                                        414
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "extra)\nlogger.info("
                                                                                }
                                                                            ],
                                                                            "content": "**extra)\nlogger.info("
                                                                        }
                                                                    ],
                                                                    "content": ",**extra)\nlogger.info(msg"
                                                                }
                                                            ],
                                                            "content": "(msg,**extra)\nlogger.info(msg"
                                                        }
                                                    ],
                                                    "content": "_wrap(msg,**extra)\nlogger.info(msg,"
                                                }
                                            ],
                                            "content": "self._wrap(msg,**extra)\nlogger.info(msg,"
                                        }
                                    ],
                                    "content": "\nmsg=self._wrap(msg,**extra)\nlogger.info(msg,"
                                }
                            ],
                            "content": "extra):\nmsg=self._wrap(msg,**extra)\nlogger.info(msg,extra"
                        }
                    ],
                    "content": "\"[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]\"\n\ndef info(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.info(msg,extra="
                }
            ],
            "content": ",\n\"block_name\":block_name,\n}\nself.prefix=f \"[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]\"\n\ndef info(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.info(msg,extra="
        },
        {
            "type": "FunctionDecl",
            "name": "warning",
            "range": [
                420,
                472
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        422,
                        432
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                423,
                                423
                            ],
                            "children": [],
                            "content": "*"
                        },
                        {
                            "type": "Parameter",
                            "name": "msg",
                            "range": [
                                425,
                                427
                            ],
                            "children": [],
                            "content": "self.metadata"
                        },
                        {
                            "type": "Parameter",
                            "name": "extra",
                            "range": [
                                429,
                                431
                            ],
                            "children": [],
                            "content": "**extra"
                        }
                    ],
                    "content": "{**self.metadata,**extra}"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        434,
                        472
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "",
                            "range": [
                                435,
                                446
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "msg",
                                    "range": [
                                        435,
                                        435
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "self._wrap",
                                    "range": [
                                        437,
                                        446
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                440,
                                                445
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "msg",
                                                    "range": [
                                                        441,
                                                        441
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "extra",
                                                    "range": [
                                                        443,
                                                        445
                                                    ],
                                                    "children": [],
                                                    "content": ":str,"
                                                }
                                            ],
                                            "content": "self,msg:str,"
                                        }
                                    ],
                                    "content": "def warning(self,msg:str,*"
                                }
                            ],
                            "content": "\n\ndef warning(self,msg:str,*"
                        },
                        {
                            "type": "CallExpression",
                            "name": "logger.warning",
                            "range": [
                                448,
                                471
                            ],
                            "children": [
                                {
                                    "type": "ArgumentList",
                                    "name": "",
                                    "range": [
                                        451,
                                        470
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "msg",
                                            "range": [
                                                452,
                                                452
                                            ],
                                            "children": [],
                                            "content": "msg"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "extra",
                                            "range": [
                                                454,
                                                470
                                            ],
                                            "children": [
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "",
                                                    "range": [
                                                        456,
                                                        470
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "",
                                                            "range": [
                                                                457,
                                                                469
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "json_fields",
                                                                    "range": [
                                                                        457,
                                                                        457
                                                                    ],
                                                                    "children": [],
                                                                    "content": "("
                                                                },
                                                                {
                                                                    "type": "ObjectExpression",
                                                                    "name": "",
                                                                    "range": [
                                                                        459,
                                                                        469
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "",
                                                                            "range": [
                                                                                460,
                                                                                468
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        460,
                                                                                        461
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "**"
                                                                                },
                                                                                {
                                                                                    "type": "Literal",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        462,
                                                                                        468
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "extra)\nlogger.warning("
                                                                                }
                                                                            ],
                                                                            "content": "**extra)\nlogger.warning("
                                                                        }
                                                                    ],
                                                                    "content": ",**extra)\nlogger.warning(msg"
                                                                }
                                                            ],
                                                            "content": "(msg,**extra)\nlogger.warning(msg"
                                                        }
                                                    ],
                                                    "content": "_wrap(msg,**extra)\nlogger.warning(msg,"
                                                }
                                            ],
                                            "content": "self._wrap(msg,**extra)\nlogger.warning(msg,"
                                        }
                                    ],
                                    "content": "\nmsg=self._wrap(msg,**extra)\nlogger.warning(msg,"
                                }
                            ],
                            "content": "extra):\nmsg=self._wrap(msg,**extra)\nlogger.warning(msg,extra"
                        }
                    ],
                    "content": ")\n\ndef warning(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.warning(msg,extra="
                }
            ],
            "content": "\"json_fields\":{**self.metadata,**extra}})\n\ndef warning(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.warning(msg,extra="
        },
        {
            "type": "FunctionDecl",
            "name": "error",
            "range": [
                474,
                526
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        476,
                        486
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                477,
                                477
                            ],
                            "children": [],
                            "content": "*"
                        },
                        {
                            "type": "Parameter",
                            "name": "msg",
                            "range": [
                                479,
                                481
                            ],
                            "children": [],
                            "content": "self.metadata"
                        },
                        {
                            "type": "Parameter",
                            "name": "extra",
                            "range": [
                                483,
                                485
                            ],
                            "children": [],
                            "content": "**extra"
                        }
                    ],
                    "content": "{**self.metadata,**extra}"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        488,
                        526
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "",
                            "range": [
                                489,
                                500
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "msg",
                                    "range": [
                                        489,
                                        489
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "self._wrap",
                                    "range": [
                                        491,
                                        500
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                494,
                                                499
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "msg",
                                                    "range": [
                                                        495,
                                                        495
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "extra",
                                                    "range": [
                                                        497,
                                                        499
                                                    ],
                                                    "children": [],
                                                    "content": ":str,"
                                                }
                                            ],
                                            "content": "self,msg:str,"
                                        }
                                    ],
                                    "content": "def error(self,msg:str,*"
                                }
                            ],
                            "content": "\n\ndef error(self,msg:str,*"
                        },
                        {
                            "type": "CallExpression",
                            "name": "logger.error",
                            "range": [
                                502,
                                525
                            ],
                            "children": [
                                {
                                    "type": "ArgumentList",
                                    "name": "",
                                    "range": [
                                        505,
                                        524
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "msg",
                                            "range": [
                                                506,
                                                506
                                            ],
                                            "children": [],
                                            "content": "msg"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "extra",
                                            "range": [
                                                508,
                                                524
                                            ],
                                            "children": [
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "",
                                                    "range": [
                                                        510,
                                                        524
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "",
                                                            "range": [
                                                                511,
                                                                523
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "json_fields",
                                                                    "range": [
                                                                        511,
                                                                        511
                                                                    ],
                                                                    "children": [],
                                                                    "content": "("
                                                                },
                                                                {
                                                                    "type": "ObjectExpression",
                                                                    "name": "",
                                                                    "range": [
                                                                        513,
                                                                        523
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "",
                                                                            "range": [
                                                                                514,
                                                                                522
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        514,
                                                                                        515
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "**"
                                                                                },
                                                                                {
                                                                                    "type": "Literal",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        516,
                                                                                        522
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "extra)\nlogger.error("
                                                                                }
                                                                            ],
                                                                            "content": "**extra)\nlogger.error("
                                                                        }
                                                                    ],
                                                                    "content": ",**extra)\nlogger.error(msg"
                                                                }
                                                            ],
                                                            "content": "(msg,**extra)\nlogger.error(msg"
                                                        }
                                                    ],
                                                    "content": "_wrap(msg,**extra)\nlogger.error(msg,"
                                                }
                                            ],
                                            "content": "self._wrap(msg,**extra)\nlogger.error(msg,"
                                        }
                                    ],
                                    "content": "\nmsg=self._wrap(msg,**extra)\nlogger.error(msg,"
                                }
                            ],
                            "content": "extra):\nmsg=self._wrap(msg,**extra)\nlogger.error(msg,extra"
                        }
                    ],
                    "content": ")\n\ndef error(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.error(msg,extra="
                }
            ],
            "content": "\"json_fields\":{**self.metadata,**extra}})\n\ndef error(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.error(msg,extra="
        },
        {
            "type": "FunctionDecl",
            "name": "debug",
            "range": [
                528,
                580
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        530,
                        540
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                531,
                                531
                            ],
                            "children": [],
                            "content": "*"
                        },
                        {
                            "type": "Parameter",
                            "name": "msg",
                            "range": [
                                533,
                                535
                            ],
                            "children": [],
                            "content": "self.metadata"
                        },
                        {
                            "type": "Parameter",
                            "name": "extra",
                            "range": [
                                537,
                                539
                            ],
                            "children": [],
                            "content": "**extra"
                        }
                    ],
                    "content": "{**self.metadata,**extra}"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        542,
                        580
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "",
                            "range": [
                                543,
                                554
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "msg",
                                    "range": [
                                        543,
                                        543
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "self._wrap",
                                    "range": [
                                        545,
                                        554
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                548,
                                                553
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "msg",
                                                    "range": [
                                                        549,
                                                        549
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "extra",
                                                    "range": [
                                                        551,
                                                        553
                                                    ],
                                                    "children": [],
                                                    "content": ":str,"
                                                }
                                            ],
                                            "content": "self,msg:str,"
                                        }
                                    ],
                                    "content": "def debug(self,msg:str,*"
                                }
                            ],
                            "content": "\n\ndef debug(self,msg:str,*"
                        },
                        {
                            "type": "CallExpression",
                            "name": "logger.debug",
                            "range": [
                                556,
                                579
                            ],
                            "children": [
                                {
                                    "type": "ArgumentList",
                                    "name": "",
                                    "range": [
                                        559,
                                        578
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "msg",
                                            "range": [
                                                560,
                                                560
                                            ],
                                            "children": [],
                                            "content": "msg"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "extra",
                                            "range": [
                                                562,
                                                578
                                            ],
                                            "children": [
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "",
                                                    "range": [
                                                        564,
                                                        578
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "",
                                                            "range": [
                                                                565,
                                                                577
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "json_fields",
                                                                    "range": [
                                                                        565,
                                                                        565
                                                                    ],
                                                                    "children": [],
                                                                    "content": "("
                                                                },
                                                                {
                                                                    "type": "ObjectExpression",
                                                                    "name": "",
                                                                    "range": [
                                                                        567,
                                                                        577
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "",
                                                                            "range": [
                                                                                568,
                                                                                576
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        568,
                                                                                        569
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "**"
                                                                                },
                                                                                {
                                                                                    "type": "Literal",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        570,
                                                                                        576
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "extra)\nlogger.debug("
                                                                                }
                                                                            ],
                                                                            "content": "**extra)\nlogger.debug("
                                                                        }
                                                                    ],
                                                                    "content": ",**extra)\nlogger.debug(msg"
                                                                }
                                                            ],
                                                            "content": "(msg,**extra)\nlogger.debug(msg"
                                                        }
                                                    ],
                                                    "content": "_wrap(msg,**extra)\nlogger.debug(msg,"
                                                }
                                            ],
                                            "content": "self._wrap(msg,**extra)\nlogger.debug(msg,"
                                        }
                                    ],
                                    "content": "\nmsg=self._wrap(msg,**extra)\nlogger.debug(msg,"
                                }
                            ],
                            "content": "extra):\nmsg=self._wrap(msg,**extra)\nlogger.debug(msg,extra"
                        }
                    ],
                    "content": ")\n\ndef debug(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.debug(msg,extra="
                }
            ],
            "content": "\"json_fields\":{**self.metadata,**extra}})\n\ndef debug(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.debug(msg,extra="
        },
        {
            "type": "FunctionDecl",
            "name": "exception",
            "range": [
                582,
                634
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        584,
                        594
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                585,
                                585
                            ],
                            "children": [],
                            "content": "*"
                        },
                        {
                            "type": "Parameter",
                            "name": "msg",
                            "range": [
                                587,
                                589
                            ],
                            "children": [],
                            "content": "self.metadata"
                        },
                        {
                            "type": "Parameter",
                            "name": "extra",
                            "range": [
                                591,
                                593
                            ],
                            "children": [],
                            "content": "**extra"
                        }
                    ],
                    "content": "{**self.metadata,**extra}"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        596,
                        634
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "",
                            "range": [
                                597,
                                608
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "msg",
                                    "range": [
                                        597,
                                        597
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "self._wrap",
                                    "range": [
                                        599,
                                        608
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "",
                                            "range": [
                                                602,
                                                607
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "msg",
                                                    "range": [
                                                        603,
                                                        603
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "extra",
                                                    "range": [
                                                        605,
                                                        607
                                                    ],
                                                    "children": [],
                                                    "content": ":str,"
                                                }
                                            ],
                                            "content": "self,msg:str,"
                                        }
                                    ],
                                    "content": "def exception(self,msg:str,*"
                                }
                            ],
                            "content": "\n\ndef exception(self,msg:str,*"
                        },
                        {
                            "type": "CallExpression",
                            "name": "logger.exception",
                            "range": [
                                610,
                                633
                            ],
                            "children": [
                                {
                                    "type": "ArgumentList",
                                    "name": "",
                                    "range": [
                                        613,
                                        632
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "msg",
                                            "range": [
                                                614,
                                                614
                                            ],
                                            "children": [],
                                            "content": "msg"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "extra",
                                            "range": [
                                                616,
                                                632
                                            ],
                                            "children": [
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "",
                                                    "range": [
                                                        618,
                                                        632
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Property",
                                                            "name": "",
                                                            "range": [
                                                                619,
                                                                631
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "json_fields",
                                                                    "range": [
                                                                        619,
                                                                        619
                                                                    ],
                                                                    "children": [],
                                                                    "content": "("
                                                                },
                                                                {
                                                                    "type": "ObjectExpression",
                                                                    "name": "",
                                                                    "range": [
                                                                        621,
                                                                        631
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Property",
                                                                            "name": "",
                                                                            "range": [
                                                                                622,
                                                                                630
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        622,
                                                                                        623
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "**"
                                                                                },
                                                                                {
                                                                                    "type": "Literal",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        624,
                                                                                        630
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "extra)\nlogger.exception("
                                                                                }
                                                                            ],
                                                                            "content": "**extra)\nlogger.exception("
                                                                        }
                                                                    ],
                                                                    "content": ",**extra)\nlogger.exception(msg"
                                                                }
                                                            ],
                                                            "content": "(msg,**extra)\nlogger.exception(msg"
                                                        }
                                                    ],
                                                    "content": "_wrap(msg,**extra)\nlogger.exception(msg,"
                                                }
                                            ],
                                            "content": "self._wrap(msg,**extra)\nlogger.exception(msg,"
                                        }
                                    ],
                                    "content": "\nmsg=self._wrap(msg,**extra)\nlogger.exception(msg,"
                                }
                            ],
                            "content": "extra):\nmsg=self._wrap(msg,**extra)\nlogger.exception(msg,extra"
                        }
                    ],
                    "content": ")\n\ndef exception(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.exception(msg,extra="
                }
            ],
            "content": "\"json_fields\":{**self.metadata,**extra}})\n\ndef exception(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.exception(msg,extra="
        },
        {
            "type": "FunctionDecl",
            "name": "_wrap",
            "range": [
                636,
                654
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        638,
                        648
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                639,
                                639
                            ],
                            "children": [],
                            "content": "*"
                        },
                        {
                            "type": "Parameter",
                            "name": "msg",
                            "range": [
                                641,
                                643
                            ],
                            "children": [],
                            "content": "self.metadata"
                        },
                        {
                            "type": "Parameter",
                            "name": "extra",
                            "range": [
                                645,
                                647
                            ],
                            "children": [],
                            "content": "**extra"
                        }
                    ],
                    "content": "{**self.metadata,**extra}"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        650,
                        654
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                651,
                                653
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        652,
                                        653
                                    ],
                                    "children": [],
                                    "content": "\ndef"
                                }
                            ],
                            "content": "\n\ndef"
                        }
                    ],
                    "content": ")\n\ndef _wrap"
                }
            ],
            "content": "\"json_fields\":{**self.metadata,**extra}})\n\ndef _wrap"
        },
        {
            "type": "FunctionDecl",
            "name": "update_execution",
            "range": [
                749,
                781
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "status",
                    "range": [
                        752,
                        754
                    ],
                    "children": [],
                    "content": ".graph_id\n"
                },
                {
                    "type": "ReturnType",
                    "name": "ExecutionResult",
                    "range": [
                        758,
                        759
                    ],
                    "children": [],
                    "content": ".node_exec_id"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        760,
                        781
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "exec_update",
                            "range": [
                                761,
                                770
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "update_execution_status",
                                    "range": [
                                        763,
                                        770
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "node_exec_id",
                                            "range": [
                                                767,
                                                767
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "status",
                                            "range": [
                                                769,
                                                769
                                            ],
                                            "children": [],
                                            "content": "update_execution"
                                        }
                                    ],
                                    "content": "data.node_id\n\ndef update_execution("
                                }
                            ],
                            "content": "node_id=data.node_id\n\ndef update_execution("
                        },
                        {
                            "type": "CallExpression",
                            "name": "send_execution_update",
                            "range": [
                                772,
                                777
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "exec_update",
                                    "range": [
                                        776,
                                        776
                                    ],
                                    "children": [],
                                    "content": ">"
                                }
                            ],
                            "content": ":ExecutionStatus)->ExecutionResult"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                779,
                                780
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "exec_update",
                                    "range": [
                                        780,
                                        780
                                    ],
                                    "children": [],
                                    "content": "exec_update"
                                }
                            ],
                            "content": "\nexec_update"
                        }
                    ],
                    "content": "\nnode_id=data.node_id\n\ndef update_execution(status:ExecutionStatus)->ExecutionResult:\nexec_update="
                }
            ],
            "content": "graph_id=data.graph_id\nnode_exec_id=data.node_exec_id\nnode_id=data.node_id\n\ndef update_execution(status:ExecutionStatus)->ExecutionResult:\nexec_update="
        },
        {
            "type": "FunctionDecl",
            "name": "_enqueue_next_nodes",
            "range": [
                1521,
                1568
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        1523,
                        1560
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "db_client",
                            "range": [
                                1525,
                                1527
                            ],
                            "children": [],
                            "content": "[\"input_size\"]"
                        },
                        {
                            "type": "Parameter",
                            "name": "node",
                            "range": [
                                1530,
                                1532
                            ],
                            "children": [],
                            "content": "\nexecution_stats["
                        },
                        {
                            "type": "Parameter",
                            "name": "output",
                            "range": [
                                1535,
                                1537
                            ],
                            "children": [],
                            "content": "=output_size\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                1540,
                                1542
                            ],
                            "children": [],
                            "content": "def _enqueue_next_nodes("
                        },
                        {
                            "type": "Parameter",
                            "name": "graph_exec_id",
                            "range": [
                                1545,
                                1547
                            ],
                            "children": [],
                            "content": ":\"DatabaseManager\","
                        },
                        {
                            "type": "Parameter",
                            "name": "graph_id",
                            "range": [
                                1550,
                                1552
                            ],
                            "children": [],
                            "content": ":Node,"
                        },
                        {
                            "type": "Parameter",
                            "name": "log_metadata",
                            "range": [
                                1555,
                                1557
                            ],
                            "children": [],
                            "content": ":BlockData,"
                        }
                    ],
                    "content": "\nexecution_stats[\"input_size\"]=input_size\nexecution_stats[\"output_size\"]=output_size\n\n\ndef _enqueue_next_nodes(\ndb_client:\"DatabaseManager\",\nnode:Node,\noutput:BlockData,\nuser_id:"
                },
                {
                    "type": "ReturnType",
                    "name": "returnType",
                    "range": [
                        1562,
                        1566
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "list",
                            "range": [
                                1563,
                                1566
                            ],
                            "children": [],
                            "content": "\ngraph_exec_id:str"
                        }
                    ],
                    "content": ",\ngraph_exec_id:str"
                }
            ],
            "content": "execution_stats)\nexecution_stats[\"input_size\"]=input_size\nexecution_stats[\"output_size\"]=output_size\n\n\ndef _enqueue_next_nodes(\ndb_client:\"DatabaseManager\",\nnode:Node,\noutput:BlockData,\nuser_id:str,\ngraph_exec_id:str,\n"
        },
        {
            "type": "FunctionDecl",
            "name": "validate_exec",
            "range": [
                2213,
                2635
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        2215,
                        2234
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "node",
                            "range": [
                                2217,
                                2219
                            ],
                            "children": [],
                            "content": "node.output_links"
                        },
                        {
                            "type": "Parameter",
                            "name": "data",
                            "range": [
                                2222,
                                2224
                            ],
                            "children": [],
                            "content": "execution in register_next_executions"
                        },
                        {
                            "type": "Parameter",
                            "name": "resolve_input",
                            "range": [
                                2227,
                                2231
                            ],
                            "children": [],
                            "content": ")\n]\n\n"
                        }
                    ],
                    "content": "link in node.output_links\nfor execution in register_next_executions(link)\n]\n\n\ndef validate_exec"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        2237,
                        2244
                    ],
                    "children": [],
                    "content": "node:Node,\ndata:BlockInput"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        2247,
                        2249
                    ],
                    "children": [],
                    "content": "resolve_input:bool"
                },
                {
                    "type": "VariableDecl",
                    "name": "node_block",
                    "range": [
                        2251,
                        2262
                    ],
                    "children": [],
                    "content": "True,\n)->tuple[BlockInput|None,"
                },
                {
                    "type": "IfStatement",
                    "name": "if_not_node_block",
                    "range": [
                        2264,
                        2274
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                2269,
                                2274
                            ],
                            "children": [],
                            "content": "\"\"\nnode_block:Block|"
                        }
                    ],
                    "content": "]:\n\"\"\" \\n     Validate the input data for a node execution. \\n  \\n     Args: \\n         node: The node to execute. \\n         data: The input data for the node execution. \\n         resolve_input: Whether to resolve dynamic pins into dict/list/object. \\n  \\n     Returns: \\n         A tuple of the validated data and the block name. \\n         If the data is invalid, the first element will be None, and the second element \\n         will be an error message. \\n         If the data is valid, the first element will be the resolved input data, and \\n         the second element will be the block name. \\n     \"\"\"\nnode_block:Block|"
                },
                {
                    "type": "IfStatement",
                    "name": "if_isinstance_node_block_AgentExecutorBlock",
                    "range": [
                        2276,
                        2324
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "name": "try",
                            "range": [
                                2297,
                                2324
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "exec_data",
                                    "range": [
                                        2300,
                                        2311
                                    ],
                                    "children": [],
                                    "content": ",AgentExecutorBlock):\n#Validate the execution metadata for the"
                                },
                                {
                                    "type": "ExceptStatement",
                                    "name": "except",
                                    "range": [
                                        2313,
                                        2324
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                2319,
                                                2324
                                            ],
                                            "children": [],
                                            "content": "\nexec_data=AgentExecutorBlock.Input"
                                        }
                                    ],
                                    "content": "executor block.\ntry:\nexec_data=AgentExecutorBlock.Input"
                                }
                            ],
                            "content": "isinstance(node_block,AgentExecutorBlock):\n#Validate the execution metadata for the agent executor block.\ntry:\nexec_data=AgentExecutorBlock.Input"
                        }
                    ],
                    "content": "=get_block(node.block_id)\nif not node_block:\nreturn None,f \"Block for {node.block_id} not found.\"\n\nif isinstance(node_block,AgentExecutorBlock):\n#Validate the execution metadata for the agent executor block.\ntry:\nexec_data=AgentExecutorBlock.Input"
                },
                {
                    "type": "VariableDecl",
                    "name": "input_schema",
                    "range": [
                        2330,
                        2335
                    ],
                    "children": [],
                    "content": "input_default)\nexcept Exception as"
                },
                {
                    "type": "VariableDecl",
                    "name": "required_fields",
                    "range": [
                        2336,
                        2345
                    ],
                    "children": [],
                    "content": "e:\nreturn None,f \"Input data doesn't match {node_block.name}: {str(e)}\"\n\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "input_default",
                    "range": [
                        2346,
                        2351
                    ],
                    "children": [],
                    "content": "#Validation input\ninput_schema="
                },
                {
                    "type": "ElseStatement",
                    "name": "else",
                    "range": [
                        2352,
                        2420
                    ],
                    "children": [
                        {
                            "type": "ForStatement",
                            "name": "for_name_data_type_in_node_block_input_schema___annotations___items",
                            "range": [
                                2369,
                                2420
                            ],
                            "children": [
                                {
                                    "type": "IfStatement",
                                    "name": "if_value_and_type_value_is_not_data_type",
                                    "range": [
                                        2385,
                                        2420
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "data_name_convert_value_data_type",
                                            "range": [
                                                2409,
                                                2419
                                            ],
                                            "children": [],
                                            "content": "=data.get(name))and(type"
                                        }
                                    ],
                                    "content": "input schema.\nfor name,data_type in node_block.input_schema.__annotations__.items():\nif(value:=data.get(name))and(type("
                                }
                            ],
                            "content": ".data\nelse:\n#Convert non-matching data types to the expected input schema.\nfor name,data_type in node_block.input_schema.__annotations__.items():\nif(value:=data.get(name))and(type("
                        }
                    ],
                    "content": "exec_data.input_schema\nrequired_fields=set(input_schema[\"required\"])\ninput_default=exec_data.data\nelse:\n#Convert non-matching data types to the expected input schema.\nfor name,data_type in node_block.input_schema.__annotations__.items():\nif(value:=data.get(name))and(type("
                },
                {
                    "type": "VariableDecl",
                    "name": "input_schema",
                    "range": [
                        2426,
                        2435
                    ],
                    "children": [],
                    "content": "):\ndata[name]=convert("
                },
                {
                    "type": "VariableDecl",
                    "name": "required_fields",
                    "range": [
                        2436,
                        2445
                    ],
                    "children": [],
                    "content": "value,data_type)\n\n#Validation input\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "input_default",
                    "range": [
                        2446,
                        2451
                    ],
                    "children": [],
                    "content": "input_schema=node_block.input_schema."
                },
                {
                    "type": "IfStatement",
                    "name": "if_not_input_fields_from_nodes_issubset_data",
                    "range": [
                        2487,
                        2502
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                2497,
                                2502
                            ],
                            "children": [],
                            "content": ".sink_name for link in node"
                        }
                    ],
                    "content": "\nerror_prefix=f \"Input data missing or mismatch for `{node_block.name}`:\"\ninput_fields_from_nodes={link.sink_name for link in node"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "data_input_default_data",
                    "range": [
                        2522,
                        2532
                    ],
                    "children": [],
                    "content": "\n\n#Merge input data with default values and resolve"
                },
                {
                    "type": "IfStatement",
                    "name": "if_resolve_input",
                    "range": [
                        2534,
                        2544
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "data_merge_execution_input_data",
                            "range": [
                                2538,
                                2544
                            ],
                            "children": [],
                            "content": "object pins.\ndata={"
                        }
                    ],
                    "content": "dict/list/object pins.\ndata={"
                },
                {
                    "type": "IfStatement",
                    "name": "if_not_required_fields_issubset_data",
                    "range": [
                        2562,
                        2577
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                2572,
                                2577
                            ],
                            "children": [],
                            "content": "should contain all required fields from"
                        }
                    ],
                    "content": "data)\n\n#Input data post-merge should contain all required fields from"
                },
                {
                    "type": "IfStatement",
                    "name": "if_error_json_validate_with_jsonschema_schema_input_schema_data_data",
                    "range": [
                        2592,
                        2626
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "error_message",
                            "range": [
                                2610,
                                2613
                            ],
                            "children": [],
                            "content": ".\nif error"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger_error_error_message",
                            "range": [
                                2615,
                                2620
                            ],
                            "children": [],
                            "content": "=json.validate_with_jsonschema(schema"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                2622,
                                2626
                            ],
                            "children": [],
                            "content": "input_schema,data=data"
                        }
                    ],
                    "content": "return None,f \"{error_prefix} {required_fields - set(data)}\"\n\n#Last validation:Validate the input values against the schema.\nif error:=json.validate_with_jsonschema(schema=input_schema,data=data"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return_data_node_block_name",
                    "range": [
                        2628,
                        2634
                    ],
                    "children": [],
                    "content": ":\nerror_message=f \"{error_prefix} {error}\"\n"
                }
            ],
            "content": "\nfor link in node.output_links\nfor execution in register_next_executions(link)\n]\n\n\ndef validate_exec(\nnode:Node,\ndata:BlockInput,\nresolve_input:bool=True,\n)->tuple[BlockInput|None,str]:\n\"\"\" \\n     Validate the input data for a node execution. \\n  \\n     Args: \\n         node: The node to execute. \\n         data: The input data for the node execution. \\n         resolve_input: Whether to resolve dynamic pins into dict/list/object. \\n  \\n     Returns: \\n         A tuple of the validated data and the block name. \\n         If the data is invalid, the first element will be None, and the second element \\n         will be an error message. \\n         If the data is valid, the first element will be the resolved input data, and \\n         the second element will be the block name. \\n     \"\"\"\nnode_block:Block|None=get_block(node.block_id)\nif not node_block:\nreturn None,f \"Block for {node.block_id} not found.\"\n\nif isinstance(node_block,AgentExecutorBlock):\n#Validate the execution metadata for the agent executor block.\ntry:\nexec_data=AgentExecutorBlock.Input(**node.input_default)\nexcept Exception as e:\nreturn None,f \"Input data doesn't match {node_block.name}: {str(e)}\"\n\n#Validation input\ninput_schema=exec_data.input_schema\nrequired_fields=set(input_schema[\"required\"])\ninput_default=exec_data.data\nelse:\n#Convert non-matching data types to the expected input schema.\nfor name,data_type in node_block.input_schema.__annotations__.items():\nif(value:=data.get(name))and(type(value)is not data_type):\ndata[name]=convert(value,data_type)\n\n#Validation input\ninput_schema=node_block.input_schema.jsonschema()\nrequired_fields=node_block.input_schema.get_required_fields()\ninput_default=node.input_default\n\n#Input data(without default values)should contain all required fields.\nerror_prefix=f \"Input data missing or mismatch for `{node_block.name}`:\"\ninput_fields_from_nodes={link.sink_name for link in node.input_links}\nif not input_fields_from_nodes.issubset(data):\nreturn None,f \"{error_prefix} {input_fields_from_nodes - set(data)}\"\n\n#Merge input data with default values and resolve dynamic dict/list/object pins.\ndata={**input_default,**data}\nif resolve_input:\ndata=merge_execution_input(data)\n\n#Input data post-merge should contain all required fields from the schema.\nif not required_fields.issubset(data):\nreturn None,f \"{error_prefix} {required_fields - set(data)}\"\n\n#Last validation:Validate the input values against the schema.\nif error:=json.validate_with_jsonschema(schema=input_schema,data=data):\nerror_message=f \"{error_prefix} {error}\"\nlogger"
        },
        {
            "type": "FunctionDecl",
            "name": "on_node_executor_start",
            "range": [
                2645,
                2750
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "configure_logging",
                    "range": [
                        2655,
                        2657
                    ],
                    "content": "\n\nclass"
                },
                {
                    "type": "CallExpression",
                    "name": "set_service_name",
                    "range": [
                        2659,
                        2662
                    ],
                    "content": ":\n\"\"\" \\n     This class contains event handlers for the process pool executor events. \\n  \\n     The main events are: \\n         on_node_executor_start: Initialize the process that executes the node. \\n         on_node_execution: Execution logic for a node. \\n  \\n         on_graph_executor_start: Initialize the process that executes the graph. \\n         on_graph_execution: Execution logic for a graph. \\n  \\n     The execution flow: \\n         1. Graph execution request is added to the queue. \\n         2. Graph executor loop picks the request from the queue. \\n         3. Graph executor loop submits the graph execution request to the executor pool. \\n       [on_graph_execution] \\n         4. Graph executor initialize the node execution queue. \\n         5. Graph executor adds the starting nodes to the node execution queue. \\n         6. Graph executor waits for all nodes to be executed. \\n       [on_node_execution] \\n         7. Node executor picks the node execution request from the queue. \\n         8. Node executor executes the node. \\n         9. Node executor enqueues the next executed nodes to the node execution queue. \\n     \""
                },
                {
                    "type": "CallExpression",
                    "name": "redis.connect",
                    "range": [
                        2664,
                        2668
                    ],
                    "content": "\n\n@classmethod\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "cls.pid",
                    "range": [
                        2670,
                        2678
                    ],
                    "content": "on_node_executor_start(cls):\nconfigure_logging()"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "cls.db_client",
                    "range": [
                        2680,
                        2686
                    ],
                    "content": "set_service_name(\"NodeExecutor\")\nredis."
                },
                {
                    "type": "AssignmentExpression",
                    "name": "cls.creds_manager",
                    "range": [
                        2688,
                        2694
                    ],
                    "content": "()\ncls.pid="
                },
                {
                    "type": "AssignmentExpression",
                    "name": "cls.shutdown_lock",
                    "range": [
                        2703,
                        2711
                    ],
                    "content": "db_client=get_db_client()\ncls.creds_manager"
                },
                {
                    "type": "CallExpression",
                    "name": "atexit.register",
                    "range": [
                        2713,
                        2720
                    ],
                    "content": "IntegrationCredentialsManager()\n\n#Set up"
                },
                {
                    "type": "CallExpression",
                    "name": "signal.signal",
                    "range": [
                        2726,
                        2747
                    ],
                    "content": "shutdown_lock=threading.Lock()\natexit.register(cls.on_node_executor_stop)#handle regular shutdown\nsignal"
                }
            ],
            "content": "error_message\n\nreturn data,node_block.name\n\n\nclass Executor:\n\"\"\" \\n     This class contains event handlers for the process pool executor events. \\n  \\n     The main events are: \\n         on_node_executor_start: Initialize the process that executes the node. \\n         on_node_execution: Execution logic for a node. \\n  \\n         on_graph_executor_start: Initialize the process that executes the graph. \\n         on_graph_execution: Execution logic for a graph. \\n  \\n     The execution flow: \\n         1. Graph execution request is added to the queue. \\n         2. Graph executor loop picks the request from the queue. \\n         3. Graph executor loop submits the graph execution request to the executor pool. \\n       [on_graph_execution] \\n         4. Graph executor initialize the node execution queue. \\n         5. Graph executor adds the starting nodes to the node execution queue. \\n         6. Graph executor waits for all nodes to be executed. \\n       [on_node_execution] \\n         7. Node executor picks the node execution request from the queue. \\n         8. Node executor executes the node. \\n         9. Node executor enqueues the next executed nodes to the node execution queue. \\n     \"\"\"\n\n@classmethod\ndef on_node_executor_start(cls):\nconfigure_logging()\nset_service_name(\"NodeExecutor\")\nredis.connect()\ncls.pid=os.getpid()\ncls.db_client=get_db_client()\ncls.creds_manager=IntegrationCredentialsManager()\n\n#Set up shutdown handlers\ncls.shutdown_lock=threading.Lock()\natexit.register(cls.on_node_executor_stop)#handle regular shutdown\nsignal.signal("
        },
        {
            "type": "FunctionDecl",
            "name": "on_node_executor_stop",
            "range": [
                2752,
                2828
            ],
            "children": [
                {
                    "type": "IfStatement",
                    "range": [
                        2762,
                        2774
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "range": [
                                2776,
                                2777
                            ],
                            "content": "def on_node_executor_stop"
                        }
                    ],
                    "content": "__:cls.on_node_executor_sigterm()\n)\n\n@classmethod"
                },
                {
                    "type": "CallExpression",
                    "name": "logger.info",
                    "range": [
                        2783,
                        2788
                    ],
                    "content": "if not cls.shutdown_lock."
                },
                {
                    "type": "CallExpression",
                    "name": "cls.creds_manager.release_all_locks",
                    "range": [
                        2791,
                        2797
                    ],
                    "content": "blocking=False):\nreturn"
                },
                {
                    "type": "CallExpression",
                    "name": "logger.info",
                    "range": [
                        2799,
                        2804
                    ],
                    "content": "already shutting down\n\nlogger"
                },
                {
                    "type": "CallExpression",
                    "name": "redis.disconnect",
                    "range": [
                        2807,
                        2811
                    ],
                    "content": "(f \"[on_node_executor_stop {cls.pid}] ⏳ Releasing locks...\")\n"
                },
                {
                    "type": "CallExpression",
                    "name": "logger.info",
                    "range": [
                        2813,
                        2818
                    ],
                    "content": ".creds_manager.release_all_locks()"
                },
                {
                    "type": "CallExpression",
                    "name": "close_service_client",
                    "range": [
                        2821,
                        2826
                    ],
                    "content": ".info(f \"[on_node_executor_stop {cls.pid}] ⏳ Disconnecting Redis...\")"
                },
                {
                    "type": "CallExpression",
                    "name": "logger.info",
                    "range": [
                        2828,
                        2833
                    ],
                    "content": "redis.disconnect()\n"
                }
            ],
            "content": "handle termination\nsignal.SIGTERM,lambda _,__:cls.on_node_executor_sigterm()\n)\n\n@classmethod\ndef on_node_executor_stop(cls):\nif not cls.shutdown_lock.acquire(blocking=False):\nreturn#already shutting down\n\nlogger.info(f \"[on_node_executor_stop {cls.pid}] ⏳ Releasing locks...\")\ncls.creds_manager.release_all_locks()\nlogger.info(f \"[on_node_executor_stop {cls.pid}] ⏳ Disconnecting Redis...\")\nredis"
        },
        {
            "type": "FunctionDecl",
            "name": "on_node_executor_sigterm",
            "range": [
                2837,
                2905
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "llprint",
                    "range": [
                        2847,
                        2850
                    ],
                    "content": ")\nlogger."
                },
                {
                    "type": "IfStatement",
                    "range": [
                        2853,
                        2865
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "range": [
                                2867,
                                2868
                            ],
                            "content": "\nllprint"
                        }
                    ],
                    "content": "f \"[on_node_executor_stop {cls.pid}] ✅ Finished cleanup\")\n\n@classmethod\ndef on_node_executor_sigterm(cls)"
                },
                {
                    "type": "CallExpression",
                    "name": "llprint",
                    "range": [
                        2874,
                        2877
                    ],
                    "content": "if not cls."
                },
                {
                    "type": "CallExpression",
                    "name": "cls.creds_manager.release_all_locks",
                    "range": [
                        2880,
                        2886
                    ],
                    "content": "acquire(blocking=False):"
                },
                {
                    "type": "CallExpression",
                    "name": "llprint",
                    "range": [
                        2888,
                        2891
                    ],
                    "content": "return#already shutting"
                },
                {
                    "type": "CallExpression",
                    "name": "redis.disconnect",
                    "range": [
                        2894,
                        2898
                    ],
                    "content": "\nllprint(f \"[on_node_executor_stop {cls.pid}] ⏳ Releasing locks...\""
                },
                {
                    "type": "CallExpression",
                    "name": "llprint",
                    "range": [
                        2900,
                        2903
                    ],
                    "content": "\ncls.creds_manager"
                },
                {
                    "type": "CallExpression",
                    "name": "sys.exit",
                    "range": [
                        2906,
                        2911
                    ],
                    "content": "()\nllprint(f"
                }
            ],
            "content": "(f \"[on_node_executor_stop {cls.pid}] ⏳ Disconnecting DB manager...\")\nclose_service_client(cls.db_client)\nlogger.info(f \"[on_node_executor_stop {cls.pid}] ✅ Finished cleanup\")\n\n@classmethod\ndef on_node_executor_sigterm(cls):\nllprint(f \"[on_node_executor_sigterm {cls.pid}] ⚠️ SIGTERM received\")\nif not cls.shutdown_lock.acquire(blocking=False):\nreturn#already shutting down\n\nllprint(f \"[on_node_executor_stop {cls.pid}] ⏳ Releasing locks...\")\ncls.creds_manager.release_all_locks"
        },
        {
            "type": "FunctionDecl",
            "name": "on_node_execution",
            "range": [
                2914,
                3059
            ],
            "children": [
                {
                    "type": "VariableDecl",
                    "name": "log_metadata",
                    "range": [
                        2951,
                        2996
                    ],
                    "content": "[NodeExecutionEntry],\nnode_exec:NodeExecutionEntry,\n)->dict[str,Any]:\nlog_metadata=LogMetadata(\nuser_id=node_exec.user_id,\ngraph_eid=node_exec.graph_exec_id,\ngraph_id=node_exec.graph_id,"
                },
                {
                    "type": "VariableDecl",
                    "name": "execution_stats",
                    "range": [
                        2999,
                        3002
                    ],
                    "content": "=node_exec.node_exec_id"
                },
                {
                    "type": "CallExpression",
                    "name": "cls._on_node_execution",
                    "range": [
                        3008,
                        3021
                    ],
                    "content": ".node_id,\nblock_name=\"-\",\n)\n\nexecution_stats="
                },
                {
                    "type": "AssignmentExpression",
                    "name": "execution_stats[\"walltime\"]",
                    "range": [
                        3023,
                        3030
                    ],
                    "content": "}\ntiming_info,_=cls."
                },
                {
                    "type": "AssignmentExpression",
                    "name": "execution_stats[\"cputime\"]",
                    "range": [
                        3032,
                        3039
                    ],
                    "content": "(\nq,node_exec,log_metadata,"
                },
                {
                    "type": "CallExpression",
                    "name": "cls.db_client.update_node_execution_stats",
                    "range": [
                        3042,
                        3054
                    ],
                    "content": ")\nexecution_stats[\"walltime\"]=timing_info.wall_time\nexecution_stats["
                },
                {
                    "type": "ReturnStatement",
                    "range": [
                        3057,
                        3058
                    ],
                    "content": "=timing_info"
                }
            ],
            "content": "\nredis.disconnect()\nllprint(f \"[on_node_executor_stop {cls.pid}] ✅ Finished cleanup\")\nsys.exit(0)\n\n@classmethod\n@error_logged\ndef on_node_execution(\ncls,\nq:ExecutionQueue[NodeExecutionEntry],\nnode_exec:NodeExecutionEntry,\n)->dict[str,Any]:\nlog_metadata=LogMetadata(\nuser_id=node_exec.user_id,\ngraph_eid=node_exec.graph_exec_id,\ngraph_id=node_exec.graph_id,\nnode_eid=node_exec.node_exec_id,\nnode_id=node_exec.node_id,\nblock_name=\"-\",\n)\n\nexecution_stats={}\ntiming_info,_=cls._on_node_execution(\nq,node_exec,log_metadata,execution_stats\n)\nexecution_stats[\"walltime\"]=timing_info.wall_time\nexecution_stats[\"cputime\"]=timing_info."
        },
        {
            "type": "FunctionDecl",
            "name": "_on_node_execution",
            "range": [
                3061,
                3172
            ],
            "children": [
                {
                    "type": "TryStatement",
                    "range": [
                        3109,
                        3172
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "log_metadata.info",
                            "range": [
                                3112,
                                3117
                            ],
                            "content": "\nstats:dict[str"
                        },
                        {
                            "type": "ForStatement",
                            "range": [
                                3120,
                                3147
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "q.add",
                                    "range": [
                                        3141,
                                        3146
                                    ],
                                    "content": "for execution in execute_node(\n"
                                }
                            ],
                            "content": "]|None=None,\n):\ntry:\nlog_metadata.info(f \"Start node execution {node_exec.node_exec_id}\")\nfor execution in execute_node(\ncls"
                        },
                        {
                            "type": "CallExpression",
                            "name": "log_metadata.info",
                            "range": [
                                3148,
                                3153
                            ],
                            "content": ".db_client,cls.creds_manager"
                        },
                        {
                            "type": "CatchClause",
                            "range": [
                                3156,
                                3171
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "log_metadata.exception",
                                    "range": [
                                        3162,
                                        3168
                                    ],
                                    "content": "q.add(execution)\n"
                                }
                            ],
                            "content": ",stats\n):\nq.add(execution)\nlog_metadata.info"
                        }
                    ],
                    "content": ":LogMetadata,\nstats:dict[str,Any]|None=None,\n):\ntry:\nlog_metadata.info(f \"Start node execution {node_exec.node_exec_id}\")\nfor execution in execute_node(\ncls.db_client,cls.creds_manager,node_exec,stats\n):\nq.add(execution)\nlog_metadata.info("
                }
            ],
            "content": "\n\ncls.db_client.update_node_execution_stats(\nnode_exec.node_exec_id,execution_stats\n)\nreturn execution_stats\n\n@classmethod\n@time_measured\ndef _on_node_execution(\ncls,\nq:ExecutionQueue[NodeExecutionEntry],\nnode_exec:NodeExecutionEntry,\nlog_metadata:LogMetadata,\nstats:dict[str,Any]|None=None,\n):\ntry:\nlog_metadata.info(f \"Start node execution {node_exec.node_exec_id}\")\nfor execution in execute_node(\ncls.db_client,cls.creds_manager,node_exec,stats\n):\nq.add(execution)\nlog_metadata.info("
        },
        {
            "type": "FunctionDecl",
            "name": "on_graph_executor_start",
            "range": [
                3173,
                3227
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "configure_logging",
                    "range": [
                        3183,
                        3185
                    ],
                    "content": "log_metadata.exception"
                },
                {
                    "type": "CallExpression",
                    "name": "set_service_name",
                    "range": [
                        3187,
                        3190
                    ],
                    "content": "\nf \"Failed node execution {node_exec.node_exec_id}: {e}\"\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "cls.db_client",
                    "range": [
                        3193,
                        3199
                    ],
                    "content": "\n@classmethod\ndef on_graph_executor_start("
                },
                {
                    "type": "AssignmentExpression",
                    "name": "cls.pool_size",
                    "range": [
                        3201,
                        3209
                    ],
                    "content": "):\nconfigure_logging()\nset_service_name("
                },
                {
                    "type": "AssignmentExpression",
                    "name": "cls.pid",
                    "range": [
                        3211,
                        3218
                    ],
                    "content": ")\n\ncls.db_client=get_db_client"
                },
                {
                    "type": "CallExpression",
                    "name": "cls._init_node_executor_pool",
                    "range": [
                        3221,
                        3225
                    ],
                    "content": "\ncls.pool_size="
                },
                {
                    "type": "CallExpression",
                    "name": "logger.info",
                    "range": [
                        3227,
                        3233
                    ],
                    "content": ".config.num_node_workers\ncls."
                },
                {
                    "type": "CallExpression",
                    "name": "atexit.register",
                    "range": [
                        3244,
                        3251
                    ],
                    "content": "_init_node_executor_pool()\nlogger.info("
                }
            ],
            "content": "f \"Finished node execution {node_exec.node_exec_id}\")\nexcept Exception as e:\nlog_metadata.exception(\nf \"Failed node execution {node_exec.node_exec_id}: {e}\"\n)\n\n@classmethod\ndef on_graph_executor_start(cls):\nconfigure_logging()\nset_service_name(\"GraphExecutor\")\n\ncls.db_client=get_db_client()\ncls.pool_size=settings."
        },
        {
            "type": "FunctionDecl",
            "name": "on_graph_executor_stop",
            "range": [
                3254,
                3307
            ],
            "children": [
                {
                    "type": "VariableDecl",
                    "name": "prefix",
                    "range": [
                        3264,
                        3267
                    ],
                    "content": "\natexit.register"
                },
                {
                    "type": "CallExpression",
                    "name": "logger.info",
                    "range": [
                        3269,
                        3274
                    ],
                    "content": "cls.on_graph_executor_stop)\n\n"
                },
                {
                    "type": "CallExpression",
                    "name": "cls.executor.terminate",
                    "range": [
                        3277,
                        3282
                    ],
                    "content": "\ndef on_graph_executor_stop(cls)"
                },
                {
                    "type": "CallExpression",
                    "name": "logger.info",
                    "range": [
                        3285,
                        3290
                    ],
                    "content": "prefix=f \"[on_graph_executor_stop {cls.pid}]\"\nlogger"
                },
                {
                    "type": "CallExpression",
                    "name": "close_service_client",
                    "range": [
                        3293,
                        3298
                    ],
                    "content": "(f \"{prefix} ⏳ Terminating node executor pool...\")\ncls"
                },
                {
                    "type": "CallExpression",
                    "name": "logger.info",
                    "range": [
                        3300,
                        3305
                    ],
                    "content": "executor.terminate()\n"
                }
            ],
            "content": "\"Graph executor {cls.pid} started with {cls.pool_size} node workers\"\n)\n\n#Set up shutdown handler\natexit.register(cls.on_graph_executor_stop)\n\n@classmethod\ndef on_graph_executor_stop(cls):\nprefix=f \"[on_graph_executor_stop {cls.pid}]\"\nlogger.info(f \"{prefix} ⏳ Terminating node executor pool...\")\ncls.executor.terminate()\nlogger."
        },
        {
            "type": "FunctionDecl",
            "name": "_init_node_executor_pool",
            "range": [
                3309,
                3341
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "cls.executor",
                    "range": [
                        3319,
                        3339
                    ],
                    "content": ")\nlogger.info(f \"{prefix} ✅ Finished cleanup\")\n\n@classmethod\ndef _init_node_executor_pool(cls):\n"
                }
            ],
            "content": "(f \"{prefix} ⏳ Disconnecting DB manager...\")\nclose_service_client(cls.db_client)\nlogger.info(f \"{prefix} ✅ Finished cleanup\")\n\n@classmethod\ndef _init_node_executor_pool(cls):\ncls."
        },
        {
            "type": "FunctionDecl",
            "name": "on_graph_execution",
            "range": [
                3343,
                3496
            ],
            "children": [
                {
                    "type": "VariableDecl",
                    "name": "log_metadata",
                    "range": [
                        3368,
                        3409
                    ],
                    "content": "error_logged\ndef on_graph_execution(\ncls,graph_exec:GraphExecutionEntry,cancel:threading.Event\n):\nlog_metadata=LogMetadata(\nuser_id=graph_exec.user_id,\ngraph_eid=graph_exec.graph_exec_id,\ngraph_id="
                },
                {
                    "type": "CallExpression",
                    "name": "cls._on_graph_execution",
                    "range": [
                        3419,
                        3429
                    ],
                    "content": "\nnode_eid=\"*\",\nblock_name=\"-\",\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "exec_stats[\"walltime\"]",
                    "range": [
                        3432,
                        3439
                    ],
                    "content": "timing_info,(exec_stats,error)="
                },
                {
                    "type": "AssignmentExpression",
                    "name": "exec_stats[\"cputime\"]",
                    "range": [
                        3441,
                        3448
                    ],
                    "content": "._on_graph_execution(\ngraph_exec,cancel,"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "exec_stats[\"error\"]",
                    "range": [
                        3450,
                        3462
                    ],
                    "content": "\n)\nexec_stats[\"walltime\"]=timing_info.wall_time\nexec_stats"
                },
                {
                    "type": "CallExpression",
                    "name": "cls.db_client.update_graph_execution_stats",
                    "range": [
                        3465,
                        3485
                    ],
                    "content": "]=timing_info.cpu_time\nexec_stats[\"error\"]=str(error)if error else None\nresult"
                },
                {
                    "type": "CallExpression",
                    "name": "cls.db_client.send_execution_update",
                    "range": [
                        3488,
                        3494
                    ],
                    "content": ".db_client.update_graph_execution_stats(\ngraph_exec_id"
                }
            ],
            "content": "=Pool(\nprocesses=cls.pool_size,\ninitializer=cls.on_node_executor_start,\n)\n\n@classmethod\n@error_logged\ndef on_graph_execution(\ncls,graph_exec:GraphExecutionEntry,cancel:threading.Event\n):\nlog_metadata=LogMetadata(\nuser_id=graph_exec.user_id,\ngraph_eid=graph_exec.graph_exec_id,\ngraph_id=graph_exec.graph_id,\nnode_id=\"*\",\nnode_eid=\"*\",\nblock_name=\"-\",\n)\ntiming_info,(exec_stats,error)=cls._on_graph_execution(\ngraph_exec,cancel,log_metadata\n)\nexec_stats[\"walltime\"]=timing_info.wall_time\nexec_stats[\"cputime\"]=timing_info.cpu_time\nexec_stats[\"error\"]=str(error)if error else None\nresult=cls.db_client.update_graph_execution_stats(\ngraph_exec_id=graph_exec"
        },
        {
            "type": "FunctionDecl",
            "name": "_on_graph_execution",
            "range": [
                3497,
                4132
            ],
            "children": [
                {
                    "type": "VariableDecl",
                    "name": "exec_stats",
                    "range": [
                        3557,
                        3576
                    ],
                    "content": "Any],Exception|None]:\n\"\"\" \\n         Returns: \\n             The execution statistics of the graph execution. \\n             The error that occurred during the execution. \\n         \"\"\"\nlog_metadata.info(f \"Start graph execution {graph_exec.graph_exec_id}\")"
                },
                {
                    "type": "VariableDecl",
                    "name": "error",
                    "range": [
                        3578,
                        3580
                    ],
                    "content": "exec_stats={"
                },
                {
                    "type": "VariableDecl",
                    "name": "finished",
                    "range": [
                        3582,
                        3584
                    ],
                    "content": "\"nodes_walltime\":0"
                },
                {
                    "type": "FunctionDecl",
                    "name": "cancel_handler",
                    "range": [
                        3587,
                        3636
                    ],
                    "children": [
                        {
                            "type": "WhileStatement",
                            "range": [
                                3593,
                                3608
                            ],
                            "children": [
                                {
                                    "type": "IfStatement",
                                    "range": [
                                        3610,
                                        3614
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "range": [
                                                3613,
                                                3614
                                            ],
                                            "content": "\nwhile"
                                        }
                                    ],
                                    "content": "():\nwhile"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "cls.executor.terminate",
                                    "range": [
                                        3615,
                                        3621
                                    ],
                                    "content": "not cancel.is_set():"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "log_metadata.info",
                                    "range": [
                                        3623,
                                        3628
                                    ],
                                    "content": "cancel.wait(1)"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "cls._init_node_executor_pool",
                                    "range": [
                                        3631,
                                        3635
                                    ],
                                    "content": "finished:\nreturn\n"
                                }
                            ],
                            "content": ":0,\n}\nerror=None\nfinished=False\n\ndef"
                        }
                    ],
                    "content": "\"nodes_cputime\":0,\n\"node_count\":0,\n}\nerror=None\nfinished=False\n\ndef cancel_handler():\nwhile not cancel.is_set():\ncancel.wait(1)\nif finished:\nreturn\ncls"
                },
                {
                    "type": "VariableDecl",
                    "name": "cancel_thread",
                    "range": [
                        3638,
                        3653
                    ],
                    "content": "executor.terminate()\nlog_metadata.info(f \"Terminated graph execution {graph_exec.graph_exec_id}\")\ncls."
                },
                {
                    "type": "TryStatement",
                    "range": [
                        3656,
                        4132
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "queue",
                            "range": [
                                3659,
                                3666
                            ],
                            "content": "cancel_thread=threading.Thread(target="
                        },
                        {
                            "type": "ForStatement",
                            "range": [
                                3668,
                                3682
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "queue.add",
                                    "range": [
                                        3676,
                                        3681
                                    ],
                                    "content": "\ntry:\nqueue="
                                }
                            ],
                            "content": ")\ncancel_thread.start()\n\ntry:\nqueue=ExecutionQueue"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "running_executions",
                            "range": [
                                3684,
                                3694
                            ],
                            "content": "NodeExecutionEntry]()\nfor node_exec in graph_exec.start_node_execs"
                        },
                        {
                            "type": "FunctionDecl",
                            "name": "make_exec_callback",
                            "range": [
                                3697,
                                3781
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "node_id",
                                    "range": [
                                        3706,
                                        3710
                                    ],
                                    "content": ":dict[str,"
                                },
                                {
                                    "type": "FunctionDecl",
                                    "name": "callback",
                                    "range": [
                                        3713,
                                        3779
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "running_executions.pop",
                                            "range": [
                                                3722,
                                                3727
                                            ],
                                            "content": ":NodeExecutionEntry):\nnode_id"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "range": [
                                                3732,
                                                3778
                                            ],
                                            "children": [
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "exec_stats[\"node_count\"]",
                                                    "range": [
                                                        3741,
                                                        3747
                                                    ],
                                                    "content": ":\nrunning_executions.pop(node_id"
                                                },
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "exec_stats[\"nodes_cputime\"]",
                                                    "range": [
                                                        3749,
                                                        3762
                                                    ],
                                                    "content": "\nnonlocal exec_stats\nif isinstance(result,dict):\nexec_stats"
                                                },
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "exec_stats[\"nodes_walltime\"]",
                                                    "range": [
                                                        3764,
                                                        3777
                                                    ],
                                                    "content": "\"node_count\"]+=1\nexec_stats[\"nodes_cputime\"]+=result."
                                                }
                                            ],
                                            "content": "\n\ndef callback(result:object):\nrunning_executions.pop(node_id)\nnonlocal exec_stats\nif isinstance(result,dict):\nexec_stats[\"node_count\"]+=1\nexec_stats[\"nodes_cputime\"]+=result.get"
                                        }
                                    ],
                                    "content": "={}\n\ndef make_exec_callback(exec_data:NodeExecutionEntry):\nnode_id=exec_data.node_id\n\ndef callback(result:object):\nrunning_executions.pop(node_id)\nnonlocal exec_stats\nif isinstance(result,dict):\nexec_stats[\"node_count\"]+=1\nexec_stats[\"nodes_cputime\"]+=result.get("
                                }
                            ],
                            "content": "queue.add(node_exec)\n\nrunning_executions:dict[str,AsyncResult]={}\n\ndef make_exec_callback(exec_data:NodeExecutionEntry):\nnode_id=exec_data.node_id\n\ndef callback(result:object):\nrunning_executions.pop(node_id)\nnonlocal exec_stats\nif isinstance(result,dict):\nexec_stats[\"node_count\"]+=1\nexec_stats[\"nodes_cputime\"]+=result.get(\"cputime\","
                        },
                        {
                            "type": "WhileStatement",
                            "range": [
                                3784,
                                3812
                            ],
                            "children": [
                                {
                                    "type": "IfStatement",
                                    "range": [
                                        3794,
                                        3807
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "error",
                                            "range": [
                                                3801,
                                                3806
                                            ],
                                            "content": "return callback\n\nwhile not"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "range": [
                                                3808,
                                                3811
                                            ],
                                            "content": ".empty()"
                                        }
                                    ],
                                    "content": "(\"walltime\",0)\n\nreturn callback\n\nwhile not queue"
                                },
                                {
                                    "type": "VariableDecl",
                                    "name": "exec_data",
                                    "range": [
                                        3814,
                                        3821
                                    ],
                                    "content": "if cancel.is_set():\n"
                                },
                                {
                                    "type": "IfStatement",
                                    "range": [
                                        3844,
                                        3853
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "execution.wait",
                                            "range": [
                                                3907,
                                                3911
                                            ],
                                            "content": "for each node.\n"
                                        }
                                    ],
                                    "content": "#Avoid parallel execution of the same node.\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "log_metadata.debug",
                                    "range": [
                                        3914,
                                        3926
                                    ],
                                    "content": "-enqueueing the data back to the queue will disrupt the order."
                                },
                                {
                                    "type": "AssignmentExpression",
                                    "name": "running_executions[exec_data.node_id]",
                                    "range": [
                                        3928,
                                        3962
                                    ],
                                    "content": "execution.wait()\n\nlog_metadata.debug(\nf \"Dispatching node execution {exec_data.node_exec_id} \"\nf \"for node {exec_data.node_id}\",\n)\nrunning_executions[exec_data.node_id]=cls.executor.apply_async(\n"
                                }
                            ],
                            "content": "\nexec_stats[\"nodes_walltime\"]+=result.get(\"walltime\",0)\n\nreturn callback\n\nwhile not queue.empty():"
                        },
                        {
                            "type": "WhileStatement",
                            "range": [
                                3978,
                                4054
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "log_metadata.debug",
                                    "range": [
                                        3988,
                                        3994
                                    ],
                                    "content": "terminating graph execution when some nodes are"
                                },
                                {
                                    "type": "ForStatement",
                                    "range": [
                                        3998,
                                        4032
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "range": [
                                                4014,
                                                4027
                                            ],
                                            "children": [
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "error",
                                                    "range": [
                                                        4021,
                                                        4026
                                                    ],
                                                    "content": ",execution in list(running_executions"
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "range": [
                                                        4028,
                                                        4031
                                                    ],
                                                    "content": "items())"
                                                }
                                            ],
                                            "content": "f \"Queue empty; running nodes: {list(running_executions.keys())}\"\n)\nfor node_id,execution in list(running_executions."
                                        }
                                    ],
                                    "content": "\nwhile queue.empty()and running_executions:\nlog_metadata.debug(\nf \"Queue empty; running nodes: {list(running_executions.keys())}\"\n)\nfor node_id,execution in list(running_executions.items()):"
                                },
                                {
                                    "type": "IfStatement",
                                    "range": [
                                        4034,
                                        4044
                                    ],
                                    "children": [
                                        {
                                            "type": "BreakStatement",
                                            "range": [
                                                4043,
                                                4044
                                            ],
                                            "content": "=RuntimeError"
                                        }
                                    ],
                                    "content": "if cancel.is_set():\nerror=RuntimeError"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "log_metadata.debug",
                                    "range": [
                                        4056,
                                        4061
                                    ],
                                    "content": "not queue.empty()"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "execution.wait",
                                    "range": [
                                        4064,
                                        4069
                                    ],
                                    "content": "break#yield to parent loop"
                                }
                            ],
                            "content": "(exec_data),\n)\n\n#Avoid terminating graph execution when some nodes are still running.\nwhile queue.empty()and running_executions:\nlog_metadata.debug(\nf \"Queue empty; running nodes: {list(running_executions.keys())}\"\n)\nfor node_id,execution in list(running_executions.items()):\nif cancel.is_set():\nerror=RuntimeError(\"Execution is cancelled\")\nreturn exec_stats,error\n\n"
                        },
                        {
                            "type": "CallExpression",
                            "name": "log_metadata.info",
                            "range": [
                                4072,
                                4077
                            ],
                            "content": "new queue items\n\nlog_metadata"
                        },
                        {
                            "type": "CatchClause",
                            "range": [
                                4080,
                                4095
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "log_metadata.exception",
                                    "range": [
                                        4086,
                                        4092
                                    ],
                                    "content": ".wait(3)\n\n"
                                }
                            ],
                            "content": "(f \"Waiting on execution of node {node_id}\")\nexecution.wait(3)\n\nlog_metadata.info"
                        },
                        {
                            "type": "FinallyClause",
                            "range": [
                                4100,
                                4132
                            ],
                            "children": [
                                {
                                    "type": "IfStatement",
                                    "range": [
                                        4103,
                                        4110
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "finished",
                                            "range": [
                                                4112,
                                                4114
                                            ],
                                            "content": "f \"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n"
                                        }
                                    ],
                                    "content": "as e:\nlog_metadata.exception("
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "cancel.set",
                                    "range": [
                                        4116,
                                        4120
                                    ],
                                    "content": "\nerror=e\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "cancel_thread.join",
                                    "range": [
                                        4122,
                                        4126
                                    ],
                                    "content": ":\nif not cancel"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "range": [
                                        4128,
                                        4131
                                    ],
                                    "content": "is_set():"
                                }
                            ],
                            "content": "\nexcept Exception as e:\nlog_metadata.exception(\nf \"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n)\nerror=e\nfinally:\nif not cancel.is_set():\n"
                        }
                    ],
                    "content": ")\n\ncancel_thread=threading.Thread(target=cancel_handler)\ncancel_thread.start()\n\ntry:\nqueue=ExecutionQueue[NodeExecutionEntry]()\nfor node_exec in graph_exec.start_node_execs:\nqueue.add(node_exec)\n\nrunning_executions:dict[str,AsyncResult]={}\n\ndef make_exec_callback(exec_data:NodeExecutionEntry):\nnode_id=exec_data.node_id\n\ndef callback(result:object):\nrunning_executions.pop(node_id)\nnonlocal exec_stats\nif isinstance(result,dict):\nexec_stats[\"node_count\"]+=1\nexec_stats[\"nodes_cputime\"]+=result.get(\"cputime\",0)\nexec_stats[\"nodes_walltime\"]+=result.get(\"walltime\",0)\n\nreturn callback\n\nwhile not queue.empty():\nif cancel.is_set():\nerror=RuntimeError(\"Execution is cancelled\")\nreturn exec_stats,error\n\nexec_data=queue.get()\n\n#Avoid parallel execution of the same node.\nexecution=running_executions.get(exec_data.node_id)\nif execution and not execution.ready():\n#TODO(performance improvement):\n#Wait for the completion of the same node execution is blocking.\n#To improve this we need a separate queue for each node.\n#Re-enqueueing the data back to the queue will disrupt the order.\nexecution.wait()\n\nlog_metadata.debug(\nf \"Dispatching node execution {exec_data.node_exec_id} \"\nf \"for node {exec_data.node_id}\",\n)\nrunning_executions[exec_data.node_id]=cls.executor.apply_async(\ncls.on_node_execution,\n(queue,exec_data),\ncallback=make_exec_callback(exec_data),\n)\n\n#Avoid terminating graph execution when some nodes are still running.\nwhile queue.empty()and running_executions:\nlog_metadata.debug(\nf \"Queue empty; running nodes: {list(running_executions.keys())}\"\n)\nfor node_id,execution in list(running_executions.items()):\nif cancel.is_set():\nerror=RuntimeError(\"Execution is cancelled\")\nreturn exec_stats,error\n\nif not queue.empty():\nbreak#yield to parent loop to execute new queue items\n\nlog_metadata.debug(f \"Waiting on execution of node {node_id}\")\nexecution.wait(3)\n\nlog_metadata.info(f \"Finished graph execution {graph_exec.graph_exec_id}\")\nexcept Exception as e:\nlog_metadata.exception(\nf \"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n)\nerror=e\nfinally:\nif not cancel.is_set():\n"
                }
            ],
            "content": ".graph_exec_id,\nstats=exec_stats,\n)\ncls.db_client.send_execution_update(result)\n\n@classmethod\n@time_measured\ndef _on_graph_execution(\ncls,\ngraph_exec:GraphExecutionEntry,\ncancel:threading.Event,\nlog_metadata:LogMetadata,\n)->tuple[dict[str,Any],Exception|None]:\n\"\"\" \\n         Returns: \\n             The execution statistics of the graph execution. \\n             The error that occurred during the execution. \\n         \"\"\"\nlog_metadata.info(f \"Start graph execution {graph_exec.graph_exec_id}\")\nexec_stats={\n\"nodes_walltime\":0,\n\"nodes_cputime\":0,\n\"node_count\":0,\n}\nerror=None\nfinished=False\n\ndef cancel_handler():\nwhile not cancel.is_set():\ncancel.wait(1)\nif finished:\nreturn\ncls.executor.terminate()\nlog_metadata.info(f \"Terminated graph execution {graph_exec.graph_exec_id}\")\ncls._init_node_executor_pool()\n\ncancel_thread=threading.Thread(target=cancel_handler)\ncancel_thread.start()\n\ntry:\nqueue=ExecutionQueue[NodeExecutionEntry]()\nfor node_exec in graph_exec.start_node_execs:\nqueue.add(node_exec)\n\nrunning_executions:dict[str,AsyncResult]={}\n\ndef make_exec_callback(exec_data:NodeExecutionEntry):\nnode_id=exec_data.node_id\n\ndef callback(result:object):\nrunning_executions.pop(node_id)\nnonlocal exec_stats\nif isinstance(result,dict):\nexec_stats[\"node_count\"]+=1\nexec_stats[\"nodes_cputime\"]+=result.get(\"cputime\",0)\nexec_stats[\"nodes_walltime\"]+=result.get(\"walltime\",0)\n\nreturn callback\n\nwhile not queue.empty():\nif cancel.is_set():\nerror=RuntimeError(\"Execution is cancelled\")\nreturn exec_stats,error\n\nexec_data=queue.get()\n\n#Avoid parallel execution of the same node.\nexecution=running_executions.get(exec_data.node_id)\nif execution and not execution.ready():\n#TODO(performance improvement):\n#Wait for the completion of the same node execution is blocking.\n#To improve this we need a separate queue for each node.\n#Re-enqueueing the data back to the queue will disrupt the order.\nexecution.wait()\n\nlog_metadata.debug(\nf \"Dispatching node execution {exec_data.node_exec_id} \"\nf \"for node {exec_data.node_id}\",\n)\nrunning_executions[exec_data.node_id]=cls.executor.apply_async(\ncls.on_node_execution,\n(queue,exec_data),\ncallback=make_exec_callback(exec_data),\n)\n\n#Avoid terminating graph execution when some nodes are still running.\nwhile queue.empty()and running_executions:\nlog_metadata.debug(\nf \"Queue empty; running nodes: {list(running_executions.keys())}\"\n)\nfor node_id,execution in list(running_executions.items()):\nif cancel.is_set():\nerror=RuntimeError(\"Execution is cancelled\")\nreturn exec_stats,error\n\nif not queue.empty():\nbreak#yield to parent loop to execute new queue items\n\nlog_metadata.debug(f \"Waiting on execution of node {node_id}\")\nexecution.wait(3)\n\nlog_metadata.info(f \"Finished graph execution {graph_exec.graph_exec_id}\")\nexcept Exception as e:\nlog_metadata.exception(\nf \"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n)\nerror=e\nfinally:\nif not cancel.is_set():\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                4141,
                4209
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "super",
                    "range": [
                        4148,
                        4155
                    ],
                    "children": [],
                    "content": "\nreturn exec_stats,error\n\n\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "use_redis",
                    "range": [
                        4156,
                        4161
                    ],
                    "children": [],
                    "content": "class ExecutionManager(AppService):"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "use_supabase",
                    "range": [
                        4162,
                        4167
                    ],
                    "children": [],
                    "content": "\ndef __init__(self)"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "pool_size",
                    "range": [
                        4168,
                        4177
                    ],
                    "children": [],
                    "content": ":\nsuper().__init__()\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "queue",
                    "range": [
                        4178,
                        4188
                    ],
                    "children": [],
                    "content": "self.use_redis=True\nself.use_supabase=True"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "active_graph_runs",
                    "range": [
                        4189,
                        4209
                    ],
                    "children": [],
                    "content": "\nself.pool_size=settings.config.num_graph_workers\nself.queue=ExecutionQueue[GraphExecutionEntry]()"
                }
            ],
            "content": ")\ncancel_thread.join()\nreturn exec_stats,error\n\n\nclass ExecutionManager(AppService):\ndef __init__(self):\nsuper().__init__()\nself.use_redis=True\nself.use_supabase=True\nself.pool_size=settings.config.num_graph_workers\nself.queue=ExecutionQueue[GraphExecutionEntry]()"
        },
        {
            "type": "FunctionDecl",
            "name": "get_port",
            "range": [
                4211,
                4230
            ],
            "children": [
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        4224,
                        4230
                    ],
                    "children": [],
                    "content": ".Event]]={}"
                }
            ],
            "content": "self.active_graph_runs:dict[str,tuple[Future,threading.Event]]={}"
        },
        {
            "type": "FunctionDecl",
            "name": "run_service",
            "range": [
                4232,
                4297
            ],
            "children": [
                {
                    "type": "ImportStatement",
                    "name": "from",
                    "range": [
                        4239,
                        4247
                    ],
                    "children": [],
                    "content": "cls)->int:\nreturn settings"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "credentials_store",
                    "range": [
                        4249,
                        4256
                    ],
                    "children": [],
                    "content": "config.execution_manager_port\n\ndef run_service("
                },
                {
                    "type": "AssignmentExpression",
                    "name": "executor",
                    "range": [
                        4257,
                        4279
                    ],
                    "children": [],
                    "content": "self):\nfrom backend.integrations.credentials_store import IntegrationCredentialsStore\n\nself.credentials_store=IntegrationCredentialsStore()\nself"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "sync_manager",
                    "range": [
                        4280,
                        4287
                    ],
                    "children": [],
                    "content": ".executor=ProcessPoolExecutor(\nmax_workers="
                },
                {
                    "type": "CallExpression",
                    "name": "logger.info",
                    "range": [
                        4288,
                        4297
                    ],
                    "children": [],
                    "content": "self.pool_size,\ninitializer=Executor.on_graph_executor_start"
                }
            ],
            "content": "\n@classmethod\ndef get_port(cls)->int:\nreturn settings.config.execution_manager_port\n\ndef run_service(self):\nfrom backend.integrations.credentials_store import IntegrationCredentialsStore\n\nself.credentials_store=IntegrationCredentialsStore()\nself.executor=ProcessPoolExecutor(\nmax_workers=self.pool_size,\ninitializer=Executor.on_graph_executor_start"
        },
        {
            "type": "FunctionDecl",
            "name": "cleanup",
            "range": [
                4390,
                4424
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "logger.info",
                    "range": [
                        4397,
                        4404
                    ],
                    "children": [],
                    "content": ":self.active_graph_runs.pop(graph_exec_id"
                },
                {
                    "type": "CallExpression",
                    "name": "executor.shutdown",
                    "range": [
                        4405,
                        4415
                    ],
                    "children": [],
                    "content": ",None)\n)\n\ndef cleanup(self"
                },
                {
                    "type": "CallExpression",
                    "name": "super",
                    "range": [
                        4417,
                        4424
                    ],
                    "children": [],
                    "content": ":\nlogger.info(f \"[{__class__.__name__}] ⏳ Shutting down graph executor pool...\""
                }
            ],
            "content": "future.add_done_callback(\nlambda _:self.active_graph_runs.pop(graph_exec_id,None)\n)\n\ndef cleanup(self):\nlogger.info(f \"[{__class__.__name__}] ⏳ Shutting down graph executor pool...\""
        },
        {
            "type": "FunctionDecl",
            "name": "db_client",
            "range": [
                4426,
                4443
            ],
            "children": [
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        4439,
                        4443
                    ],
                    "children": [],
                    "content": "super().cleanup"
                }
            ],
            "content": "\nself.executor.shutdown(cancel_futures=True)\n\nsuper().cleanup"
        },
        {
            "type": "FunctionDecl",
            "name": "add_execution",
            "range": [
                4445,
                4940
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "graph",
                    "range": [
                        4485,
                        4511
                    ],
                    "children": [],
                    "content": ",\nuser_id:str,\ngraph_version:int|None=None,\n)->GraphExecutionEntry:\ngraph:GraphModel|None"
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        4512,
                        4523
                    ],
                    "children": [],
                    "content": "=self.db_client.get_graph(\ngraph_id=graph_id,"
                },
                {
                    "type": "CallExpression",
                    "name": "graph.validate_graph",
                    "range": [
                        4525,
                        4533
                    ],
                    "children": [],
                    "content": "=user_id,version=graph_version\n)\n"
                },
                {
                    "type": "CallExpression",
                    "name": "_validate_node_input_credentials",
                    "range": [
                        4534,
                        4542
                    ],
                    "children": [],
                    "content": "if not graph:\nraise ValueError(f"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "nodes_input",
                    "range": [
                        4544,
                        4548
                    ],
                    "children": [],
                    "content": ")\n\ngraph."
                },
                {
                    "type": "ForStatement",
                    "name": "for",
                    "range": [
                        4549,
                        4768
                    ],
                    "children": [],
                    "content": "validate_graph(for_run=True)\nself._validate_node_input_credentials(graph,user_id)\n\nnodes_input=[]\nfor node in graph.starting_nodes:\ninput_data={}\nblock=get_block(node.block_id)\n\n#Invalid block&Note block should never be executed.\nif not block or block.block_type==BlockType.NOTE:\ncontinue\n\n#Extract request input data,and assign it to the input pin.\nif block.block_type==BlockType.INPUT:\nname=node.input_default.get(\"name\")\nif name and name in data:\ninput_data={\"value\":data[name]}\n\n#Extract webhook payload,and assign it to the input pin\nwebhook_payload_key=f \"webhook_{node.webhook_id}_payload\"\nif(\nblock.block_type in(BlockType.WEBHOOK,BlockType.WEBHOOK_MANUAL)\nand node.webhook_id\n):\nif webhook_payload_key not in data:\nraise ValueError(\nf \"Node {block.name} #{node.id} webhook payload is missing\"\n)\ninput_data={\"payload\":data[webhook_payload_key]}\n\ninput_data,error=validate_exec(node,input_data)\nif input_data is None:\nraise"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "graph_exec_id",
                    "range": [
                        4769,
                        4803
                    ],
                    "children": [],
                    "content": "ValueError(error)\nelse:\nnodes_input.append((node.id,input_data))\n\ngraph_exec_id,node_execs=self.db_client.create_graph_execution(\ngraph_id="
                },
                {
                    "type": "AssignmentExpression",
                    "name": "starting_node_execs",
                    "range": [
                        4805,
                        4868
                    ],
                    "children": [],
                    "content": ",\ngraph_version=graph.version,\nnodes_input=nodes_input,\nuser_id=user_id,\n)\n\nstarting_node_execs=[]\nfor node_exec in node_execs:\nstarting_node_execs.append(\nNodeExecutionEntry(\nuser_id=user_id,\ngraph_exec_id=node_exec.graph_exec_id,\ngraph_id=node_exec.graph_id,\nnode_exec_id=node_exec."
                },
                {
                    "type": "ForStatement",
                    "name": "for",
                    "range": [
                        4810,
                        4868
                    ],
                    "children": [],
                    "content": ".version,\nnodes_input=nodes_input,\nuser_id=user_id,\n)\n\nstarting_node_execs=[]\nfor node_exec in node_execs:\nstarting_node_execs.append(\nNodeExecutionEntry(\nuser_id=user_id,\ngraph_exec_id=node_exec.graph_exec_id,\ngraph_id=node_exec.graph_id,\nnode_exec_id=node_exec."
                },
                {
                    "type": "CallExpression",
                    "name": "db_client.update_execution_status",
                    "range": [
                        4868,
                        4890
                    ],
                    "children": [],
                    "content": ".node_exec_id,\nnode_id=node_exec.node_id,\ndata=node_exec.input_data,\n)\n)\nexec_update"
                },
                {
                    "type": "CallExpression",
                    "name": "db_client.send_execution_update",
                    "range": [
                        4891,
                        4899
                    ],
                    "children": [],
                    "content": "=self.db_client.update_execution_status(\nnode_exec"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "graph_exec",
                    "range": [
                        4901,
                        4927
                    ],
                    "children": [],
                    "content": "node_exec_id,ExecutionStatus.QUEUED,node_exec.input_data\n)\nself.db_client.send_execution_update(exec_update)\n\ngraph_exec=GraphExecutionEntry(\n"
                },
                {
                    "type": "CallExpression",
                    "name": "queue.add",
                    "range": [
                        4928,
                        4936
                    ],
                    "children": [],
                    "content": "user_id=user_id,\ngraph_id=graph_id,"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        4938,
                        4940
                    ],
                    "children": [],
                    "content": "graph_exec_id=graph_exec_id"
                }
            ],
            "content": ")\n\n@property\ndef db_client(self)->\"DatabaseManager\":\nreturn get_db_client()\n\n@expose\ndef add_execution(\nself,\ngraph_id:str,\ndata:BlockInput,\nuser_id:str,\ngraph_version:int|None=None,\n)->GraphExecutionEntry:\ngraph:GraphModel|None=self.db_client.get_graph(\ngraph_id=graph_id,user_id=user_id,version=graph_version\n)\nif not graph:\nraise ValueError(f \"Graph #{graph_id} not found.\")\n\ngraph.validate_graph(for_run=True)\nself._validate_node_input_credentials(graph,user_id)\n\nnodes_input=[]\nfor node in graph.starting_nodes:\ninput_data={}\nblock=get_block(node.block_id)\n\n#Invalid block&Note block should never be executed.\nif not block or block.block_type==BlockType.NOTE:\ncontinue\n\n#Extract request input data,and assign it to the input pin.\nif block.block_type==BlockType.INPUT:\nname=node.input_default.get(\"name\")\nif name and name in data:\ninput_data={\"value\":data[name]}\n\n#Extract webhook payload,and assign it to the input pin\nwebhook_payload_key=f \"webhook_{node.webhook_id}_payload\"\nif(\nblock.block_type in(BlockType.WEBHOOK,BlockType.WEBHOOK_MANUAL)\nand node.webhook_id\n):\nif webhook_payload_key not in data:\nraise ValueError(\nf \"Node {block.name} #{node.id} webhook payload is missing\"\n)\ninput_data={\"payload\":data[webhook_payload_key]}\n\ninput_data,error=validate_exec(node,input_data)\nif input_data is None:\nraise ValueError(error)\nelse:\nnodes_input.append((node.id,input_data))\n\ngraph_exec_id,node_execs=self.db_client.create_graph_execution(\ngraph_id=graph_id,\ngraph_version=graph.version,\nnodes_input=nodes_input,\nuser_id=user_id,\n)\n\nstarting_node_execs=[]\nfor node_exec in node_execs:\nstarting_node_execs.append(\nNodeExecutionEntry(\nuser_id=user_id,\ngraph_exec_id=node_exec.graph_exec_id,\ngraph_id=node_exec.graph_id,\nnode_exec_id=node_exec.node_exec_id,\nnode_id=node_exec.node_id,\ndata=node_exec.input_data,\n)\n)\nexec_update=self.db_client.update_execution_status(\nnode_exec.node_exec_id,ExecutionStatus.QUEUED,node_exec.input_data\n)\nself.db_client.send_execution_update(exec_update)\n\ngraph_exec=GraphExecutionEntry(\nuser_id=user_id,\ngraph_id=graph_id,\ngraph_exec_id=graph_exec_id"
        },
        {
            "type": "FunctionDecl",
            "name": "cancel_execution",
            "range": [
                4942,
                5114
            ],
            "children": [
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        4965,
                        4973
                    ],
                    "children": [],
                    "content": "expose\ndef cancel_execution(self,graph_exec_id:"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "future",
                    "range": [
                        4986,
                        4996
                    ],
                    "children": [],
                    "content": "\nif graph_exec_id not in self.active_graph_runs:\nraise"
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        4997,
                        5003
                    ],
                    "children": [],
                    "content": "Exception(\nf \"Graph execution #{graph_exec_id} not active/running: \"\n\"possibly already completed/cancelled.\""
                },
                {
                    "type": "CallExpression",
                    "name": "cancel_event.set",
                    "range": [
                        5008,
                        5013
                    ],
                    "children": [],
                    "content": "future,cancel_event=self."
                },
                {
                    "type": "CallExpression",
                    "name": "future.result",
                    "range": [
                        5014,
                        5019
                    ],
                    "children": [],
                    "content": "active_graph_runs[graph_exec_id]\nif"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "node_execs",
                    "range": [
                        5031,
                        5041
                    ],
                    "children": [],
                    "content": ".set()\nfuture.result()\n"
                },
                {
                    "type": "ForStatement",
                    "name": "for",
                    "range": [
                        5042,
                        5114
                    ],
                    "children": [],
                    "content": "\n#Update the status of the unfinished node executions\nnode_execs=self.db_client.get_execution_results(graph_exec_id)\nfor node_exec in node_execs:\nif node_exec.status not in(\nExecutionStatus.COMPLETED,\nExecutionStatus.FAILED,\n):\nself.db_client.upsert_execution_output(\nnode_exec.node_exec_id,\"error\",\"TERMINATED\"\n)\nexec_update=self.db_client.update_execution_status"
                }
            ],
            "content": "\nstart_node_execs=starting_node_execs,\n)\nself.queue.add(graph_exec)\n\nreturn graph_exec\n\n@expose\ndef cancel_execution(self,graph_exec_id:str)->None:\n\"\"\" \\n         Mechanism: \\n         1. Set the cancel event \\n         2. Graph executor's cancel handler thread detects the event, terminates workers, \\n            reinitializes worker pool, and returns. \\n         3. Update execution statuses in DB and set `error` outputs to `\" TERMINATED \"`. \\n         \"\"\"\nif graph_exec_id not in self.active_graph_runs:\nraise Exception(\nf \"Graph execution #{graph_exec_id} not active/running: \"\n\"possibly already completed/cancelled.\"\n)\n\nfuture,cancel_event=self.active_graph_runs[graph_exec_id]\nif cancel_event.is_set():\nreturn\n\ncancel_event.set()\nfuture.result()\n\n#Update the status of the unfinished node executions\nnode_execs=self.db_client.get_execution_results(graph_exec_id)\nfor node_exec in node_execs:\nif node_exec.status not in(\nExecutionStatus.COMPLETED,\nExecutionStatus.FAILED,\n):\nself.db_client.upsert_execution_output(\nnode_exec.node_exec_id,\"error\",\"TERMINATED\"\n)\nexec_update=self.db_client.update_execution_status"
        },
        {
            "type": "FunctionDecl",
            "name": "_validate_node_input_credentials",
            "range": [
                5115,
                5362
            ],
            "children": [
                {
                    "type": "ForStatement",
                    "name": "for",
                    "range": [
                        5135,
                        5362
                    ],
                    "children": [],
                    "content": "\n\ndef _validate_node_input_credentials(self,graph:GraphModel,user_id:str):\n\"\"\"Checks all credentials for all nodes of the graph\"\"\"\n\nfor node in graph.nodes:\nblock=get_block(node.block_id)\nif not block:\nraise ValueError(f \"Unknown block {node.block_id} for node #{node.id}\")\n\n#Find any fields of type CredentialsMetaInput\nmodel_fields=cast(type[BaseModel],block.input_schema).model_fields\nif CREDENTIALS_FIELD_NAME not in model_fields:\ncontinue\n\nfield=model_fields[CREDENTIALS_FIELD_NAME]\n\n#The BlockSchema class enforces that a`credentials`field is always a\n#`CredentialsMetaInput`,so we can safely assume this here.\ncredentials_meta_type=cast(CredentialsMetaInput,field.annotation)\ncredentials_meta=credentials_meta_type.model_validate(\nnode.input_default[CREDENTIALS_FIELD_NAME]\n)\n#Fetch the corresponding Credentials and perform sanity checks\ncredentials=self.credentials_store.get_creds_by_id(\nuser_id,credentials_meta.id\n)\nif not credentials:\nraise ValueError(\nf \"Unknown credentials #{credentials_meta.id} \"\nf \"for node #{node.id}\"\n)\nif(\ncredentials.provider!=credentials_meta.provider\nor credentials.type!=credentials_meta.type\n):\nlogger.warning(\nf \"Invalid credentials #{credentials.id} for node #{node.id}: \"\n\"type/provider mismatch: \""
                }
            ],
            "content": "(\nnode_exec.node_exec_id,ExecutionStatus.FAILED\n)\nself.db_client.send_execution_update(exec_update)\n\ndef _validate_node_input_credentials(self,graph:GraphModel,user_id:str):\n\"\"\"Checks all credentials for all nodes of the graph\"\"\"\n\nfor node in graph.nodes:\nblock=get_block(node.block_id)\nif not block:\nraise ValueError(f \"Unknown block {node.block_id} for node #{node.id}\")\n\n#Find any fields of type CredentialsMetaInput\nmodel_fields=cast(type[BaseModel],block.input_schema).model_fields\nif CREDENTIALS_FIELD_NAME not in model_fields:\ncontinue\n\nfield=model_fields[CREDENTIALS_FIELD_NAME]\n\n#The BlockSchema class enforces that a`credentials`field is always a\n#`CredentialsMetaInput`,so we can safely assume this here.\ncredentials_meta_type=cast(CredentialsMetaInput,field.annotation)\ncredentials_meta=credentials_meta_type.model_validate(\nnode.input_default[CREDENTIALS_FIELD_NAME]\n)\n#Fetch the corresponding Credentials and perform sanity checks\ncredentials=self.credentials_store.get_creds_by_id(\nuser_id,credentials_meta.id\n)\nif not credentials:\nraise ValueError(\nf \"Unknown credentials #{credentials_meta.id} \"\nf \"for node #{node.id}\"\n)\nif(\ncredentials.provider!=credentials_meta.provider\nor credentials.type!=credentials_meta.type\n):\nlogger.warning(\nf \"Invalid credentials #{credentials.id} for node #{node.id}: \"\n\"type/provider mismatch: \""
        },
        {
            "type": "FunctionDecl",
            "name": "get_db_client",
            "range": [
                5386,
                5408
            ],
            "children": [
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        5403,
                        5408
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "get_service_client",
                            "range": [
                                5404,
                                5407
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "DatabaseManager",
                                    "range": [
                                        5406,
                                        5407
                                    ],
                                    "children": [],
                                    "content": "thread_cached\n"
                                }
                            ],
                            "content": "\n@thread_cached\n"
                        }
                    ],
                    "content": "\n\n@thread_cached\ndef"
                }
            ],
            "content": "-------UTILITIES-------#\n\n\n@thread_cached\ndef"
        },
        {
            "type": "FunctionDecl",
            "name": "synchronized",
            "range": [
                5414,
                5476
            ],
            "children": [
                {
                    "type": "VariableDecl",
                    "name": "lock",
                    "range": [
                        5429,
                        5447
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "redis.get_redis().lock",
                            "range": [
                                5433,
                                5447
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "f\"lock:{key}\"",
                                    "range": [
                                        5441,
                                        5442
                                    ],
                                    "children": [],
                                    "content": "str,"
                                },
                                {
                                    "type": "AssignmentExpression",
                                    "name": "timeout",
                                    "range": [
                                        5444,
                                        5446
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "timeout",
                                            "range": [
                                                5446,
                                                5446
                                            ],
                                            "children": [],
                                            "content": "="
                                        }
                                    ],
                                    "content": ":int="
                                }
                            ],
                            "content": "@contextmanager\ndef synchronized(key:str,timeout:int=60"
                        }
                    ],
                    "content": ")\n\n\n@contextmanager\ndef synchronized(key:str,timeout:int=60"
                },
                {
                    "type": "TryStatement",
                    "name": "",
                    "range": [
                        5449,
                        5476
                    ],
                    "children": [
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                5451,
                                5459
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "",
                                    "range": [
                                        5452,
                                        5457
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "lock.acquire",
                                            "range": [
                                                5452,
                                                5456
                                            ],
                                            "children": [],
                                            "content": ":RedisLock=redis."
                                        }
                                    ],
                                    "content": ":RedisLock=redis.get_redis"
                                },
                                {
                                    "type": "YieldExpression",
                                    "name": "",
                                    "range": [
                                        5458,
                                        5459
                                    ],
                                    "children": [],
                                    "content": "()"
                                }
                            ],
                            "content": "lock:RedisLock=redis.get_redis()"
                        },
                        {
                            "type": "FinallyStatement",
                            "name": "",
                            "range": [
                                5460,
                                5476
                            ],
                            "children": [
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        5463,
                                        5475
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "lock.locked",
                                            "range": [
                                                5464,
                                                5468
                                            ],
                                            "children": [],
                                            "content": "\"lock:{key}\",timeout=timeout"
                                        },
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                5469,
                                                5475
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        5471,
                                                        5474
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "lock.release",
                                                            "range": [
                                                                5471,
                                                                5474
                                                            ],
                                                            "children": [],
                                                            "content": "try:\nlock"
                                                        }
                                                    ],
                                                    "content": "try:\nlock"
                                                }
                                            ],
                                            "content": ")\ntry:\nlock."
                                        }
                                    ],
                                    "content": "f \"lock:{key}\",timeout=timeout)\ntry:\nlock."
                                }
                            ],
                            "content": ".lock(f \"lock:{key}\",timeout=timeout)\ntry:\nlock.acquire"
                        }
                    ],
                    "content": ":\nlock:RedisLock=redis.get_redis().lock(f \"lock:{key}\",timeout=timeout)\ntry:\nlock.acquire"
                }
            ],
            "content": "\"DatabaseManager\":\nfrom backend.executor import DatabaseManager\n\nreturn get_service_client(DatabaseManager)\n\n\n@contextmanager\ndef synchronized(key:str,timeout:int=60):\nlock:RedisLock=redis.get_redis().lock(f \"lock:{key}\",timeout=timeout)\ntry:\nlock.acquire"
        },
        {
            "type": "FunctionDecl",
            "name": "llprint",
            "range": [
                5479,
                5527
            ],
            "children": [
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        5492,
                        5527
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "==",
                            "range": [
                                5498,
                                5503
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "logger.getEffectiveLevel",
                                    "range": [
                                        5493,
                                        5497
                                    ],
                                    "children": [],
                                    "content": "lock.release()"
                                },
                                {
                                    "type": "MemberExpression",
                                    "name": "logging.DEBUG",
                                    "range": [
                                        5500,
                                        5502
                                    ],
                                    "children": [],
                                    "content": "\ndef llprint"
                                }
                            ],
                            "content": "\n\n\ndef llprint("
                        },
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                5504,
                                5527
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "",
                                    "range": [
                                        5505,
                                        5526
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "os.write",
                                            "range": [
                                                5505,
                                                5526
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "sys.stdout.fileno",
                                                    "range": [
                                                        5509,
                                                        5515
                                                    ],
                                                    "children": [],
                                                    "content": "\n\"\"\" \\n     Low-level print/log helper function for use in signal handlers. \\n     Regular log/print statements are not allowed in signal handlers. \\n     \"\"\"\nif logger"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "(message + \"\\n\").encode",
                                                    "range": [
                                                        5517,
                                                        5525
                                                    ],
                                                    "children": [],
                                                    "content": "getEffectiveLevel()==logging.DEBUG:"
                                                }
                                            ],
                                            "content": ":str):\n\"\"\" \\n     Low-level print/log helper function for use in signal handlers. \\n     Regular log/print statements are not allowed in signal handlers. \\n     \"\"\"\nif logger.getEffectiveLevel()==logging.DEBUG:\n"
                                        }
                                    ],
                                    "content": ":str):\n\"\"\" \\n     Low-level print/log helper function for use in signal handlers. \\n     Regular log/print statements are not allowed in signal handlers. \\n     \"\"\"\nif logger.getEffectiveLevel()==logging.DEBUG:\n"
                                }
                            ],
                            "content": "message:str):\n\"\"\" \\n     Low-level print/log helper function for use in signal handlers. \\n     Regular log/print statements are not allowed in signal handlers. \\n     \"\"\"\nif logger.getEffectiveLevel()==logging.DEBUG:\nos"
                        }
                    ],
                    "content": "\nlock.release()\n\n\ndef llprint(message:str):\n\"\"\" \\n     Low-level print/log helper function for use in signal handlers. \\n     Regular log/print statements are not allowed in signal handlers. \\n     \"\"\"\nif logger.getEffectiveLevel()==logging.DEBUG:\nos"
                }
            ],
            "content": "\nyield\nfinally:\nif lock.locked():\nlock.release()\n\n\ndef llprint(message:str):\n\"\"\" \\n     Low-level print/log helper function for use in signal handlers. \\n     Regular log/print statements are not allowed in signal handlers. \\n     \"\"\"\nif logger.getEffectiveLevel()==logging.DEBUG:\nos"
        }
    ],
    "content": "import atexit\nimport logging\nimport multiprocessing\nimport os\nimport signal\nimport sys\nimport threading\nfrom concurrent.futures import Future,ProcessPoolExecutor\nfrom contextlib import contextmanager\nfrom multiprocessing.pool import AsyncResult,Pool\nfrom typing import TYPE_CHECKING,Any,Generator,TypeVar,cast\n\nfrom pydantic import BaseModel\nfrom redis.lock import Lock as RedisLock\n\nif TYPE_CHECKING:\nfrom backend.executor import DatabaseManager\n\nfrom autogpt_libs.utils.cache import thread_cached\n\nfrom backend.blocks.agent import AgentExecutorBlock\nfrom backend.data import redis\nfrom backend.data.block import Block,BlockData,BlockInput,BlockType,get_block\nfrom backend.data.execution import(\nExecutionQueue,\nExecutionResult,\nExecutionStatus,\nGraphExecutionEntry,\nNodeExecutionEntry,\nmerge_execution_input,\nparse_execution_output,\n)\nfrom backend.data.graph import GraphModel,Link,Node\nfrom backend.data.model import CREDENTIALS_FIELD_NAME,CredentialsMetaInput\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.util import json\nfrom backend.util.decorator import error_logged,time_measured\nfrom backend.util.logging import configure_logging\nfrom backend.util.process import set_service_name\nfrom backend.util.service import(\nAppService,\nclose_service_client,\nexpose,\nget_service_client,\n)\nfrom backend.util.settings import Settings\nfrom backend.util.type import convert\n\nlogger=logging.getLogger(__name__)\nsettings=Settings()\n\n\nclass LogMetadata:\ndef __init__(\nself,\nuser_id:str,\ngraph_eid:str,\ngraph_id:str,\nnode_eid:str,\nnode_id:str,\nblock_name:str,\n):\nself.metadata={\n\"component\":\"ExecutionManager\",\n\"user_id\":user_id,\n\"graph_eid\":graph_eid,\n\"graph_id\":graph_id,\n\"node_eid\":node_eid,\n\"node_id\":node_id,\n\"block_name\":block_name,\n}\nself.prefix=f \"[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]\"\n\ndef info(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.info(msg,extra={\"json_fields\":{**self.metadata,**extra}})\n\ndef warning(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.warning(msg,extra={\"json_fields\":{**self.metadata,**extra}})\n\ndef error(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.error(msg,extra={\"json_fields\":{**self.metadata,**extra}})\n\ndef debug(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.debug(msg,extra={\"json_fields\":{**self.metadata,**extra}})\n\ndef exception(self,msg:str,**extra):\nmsg=self._wrap(msg,**extra)\nlogger.exception(msg,extra={\"json_fields\":{**self.metadata,**extra}})\n\ndef _wrap(self,msg:str,**extra):\nreturn f \"{self.prefix} {msg} {extra}\"\n\n\nT=TypeVar(\"T\")\nExecutionStream=Generator[NodeExecutionEntry,None,None]\n\n\ndef execute_node(\ndb_client:\"DatabaseManager\",\ncreds_manager:IntegrationCredentialsManager,\ndata:NodeExecutionEntry,\nexecution_stats:dict[str,Any]|None=None,\n)->ExecutionStream:\n\"\"\" \\n     Execute a node in the graph. This will trigger a block execution on a node, \\n     persist the execution result, and return the subsequent node to be executed. \\n  \\n     Args: \\n         db_client: The client to send execution updates to the server. \\n         creds_manager: The manager to acquire and release credentials. \\n         data: The execution data for executing the current node. \\n         execution_stats: The execution statistics to be updated. \\n  \\n     Returns: \\n         The subsequent node to be enqueued, or None if there is no subsequent node. \\n     \"\"\"\nuser_id=data.user_id\ngraph_exec_id=data.graph_exec_id\ngraph_id=data.graph_id\nnode_exec_id=data.node_exec_id\nnode_id=data.node_id\n\ndef update_execution(status:ExecutionStatus)->ExecutionResult:\nexec_update=db_client.update_execution_status(node_exec_id,status)\ndb_client.send_execution_update(exec_update)\nreturn exec_update\n\nnode=db_client.get_node(node_id)\n\nnode_block=get_block(node.block_id)\nif not node_block:\nlogger.error(f \"Block {node.block_id} not found.\")\nreturn\n\nlog_metadata=LogMetadata(\nuser_id=user_id,\ngraph_eid=graph_exec_id,\ngraph_id=graph_id,\nnode_eid=node_exec_id,\nnode_id=node_id,\nblock_name=node_block.name,\n)\n\n#Sanity check:validate the execution input.\ninput_data,error=validate_exec(node,data.data,resolve_input=False)\nif input_data is None:\nlog_metadata.error(f \"Skip execution, input validation error: {error}\")\ndb_client.upsert_execution_output(node_exec_id,\"error\",error)\nupdate_execution(ExecutionStatus.FAILED)\nreturn\n\n#Re-shape the input data for agent block.\n#AgentExecutorBlock specially separate the node input_data&its input_default.\nif isinstance(node_block,AgentExecutorBlock):\ninput_data={**node.input_default,\"data\":input_data}\n\n#Execute the node\ninput_data_str=json.dumps(input_data)\ninput_size=len(input_data_str)\nlog_metadata.info(\"Executed node with input\",input=input_data_str)\nupdate_execution(ExecutionStatus.RUNNING)\n\nextra_exec_kwargs={}\n#Last-minute fetch credentials+acquire a system-wide read-write lock to prevent\n#changes during execution.⚠️This means a set of credentials can only be used by\n#one(running)block at a time;simultaneous execution of blocks using same\n#credentials is not supported.\ncreds_lock=None\nif CREDENTIALS_FIELD_NAME in input_data:\ncredentials_meta=CredentialsMetaInput(**input_data[CREDENTIALS_FIELD_NAME])\ncredentials,creds_lock=creds_manager.acquire(user_id,credentials_meta.id)\nextra_exec_kwargs[\"credentials\"]=credentials\n\noutput_size=0\nend_status=ExecutionStatus.COMPLETED\ncredit=db_client.get_or_refill_credit(user_id)\nif credit<0:\nraise ValueError(f \"Insufficient credit: {credit}\")\n\ntry:\nfor output_name,output_data in node_block.execute(\ninput_data,**extra_exec_kwargs\n):\noutput_size+=len(json.dumps(output_data))\nlog_metadata.info(\"Node produced output\",**{output_name:output_data})\ndb_client.upsert_execution_output(node_exec_id,output_name,output_data)\n\nfor execution in _enqueue_next_nodes(\ndb_client=db_client,\nnode=node,\noutput=(output_name,output_data),\nuser_id=user_id,\ngraph_exec_id=graph_exec_id,\ngraph_id=graph_id,\nlog_metadata=log_metadata,\n):\nyield execution\n\nexcept Exception as e:\nend_status=ExecutionStatus.FAILED\nerror_msg=str(e)\nlog_metadata.exception(f \"Node execution failed with error {error_msg}\")\ndb_client.upsert_execution_output(node_exec_id,\"error\",error_msg)\n\nfor execution in _enqueue_next_nodes(\ndb_client=db_client,\nnode=node,\noutput=(\"error\",error_msg),\nuser_id=user_id,\ngraph_exec_id=graph_exec_id,\ngraph_id=graph_id,\nlog_metadata=log_metadata,\n):\nyield execution\n\nraise e\nfinally:\n#Ensure credentials are released even if execution fails\nif creds_lock:\ntry:\ncreds_lock.release()\nexcept Exception as e:\nlog_metadata.error(f \"Failed to release credentials lock: {e}\")\n\n#Update execution status and spend credits\nres=update_execution(end_status)\nif end_status==ExecutionStatus.COMPLETED:\ns=input_size+output_size\nt=(\n(res.end_time-res.start_time).total_seconds()\nif res.end_time and res.start_time\nelse0\n)\ndb_client.spend_credits(user_id,credit,node_block.id,input_data,s,t)\n\n#Update execution stats\nif execution_stats is not None:\nexecution_stats.update(node_block.execution_stats)\nexecution_stats[\"input_size\"]=input_size\nexecution_stats[\"output_size\"]=output_size\n\n\ndef _enqueue_next_nodes(\ndb_client:\"DatabaseManager\",\nnode:Node,\noutput:BlockData,\nuser_id:str,\ngraph_exec_id:str,\ngraph_id:str,\nlog_metadata:LogMetadata,\n)->list[NodeExecutionEntry]:\ndef add_enqueued_execution(\nnode_exec_id:str,node_id:str,data:BlockInput\n)->NodeExecutionEntry:\nexec_update=db_client.update_execution_status(\nnode_exec_id,ExecutionStatus.QUEUED,data\n)\ndb_client.send_execution_update(exec_update)\nreturn NodeExecutionEntry(\nuser_id=user_id,\ngraph_exec_id=graph_exec_id,\ngraph_id=graph_id,\nnode_exec_id=node_exec_id,\nnode_id=node_id,\ndata=data,\n)\n\ndef register_next_executions(node_link:Link)->list[NodeExecutionEntry]:\nenqueued_executions=[]\nnext_output_name=node_link.source_name\nnext_input_name=node_link.sink_name\nnext_node_id=node_link.sink_id\n\nnext_data=parse_execution_output(output,next_output_name)\nif next_data is None:\nreturn enqueued_executions\n\nnext_node=db_client.get_node(next_node_id)\n\n#Multiple node can register the same next node,we need this to be atomic\n#To avoid same execution to be enqueued multiple times,\n#Or the same input to be consumed multiple times.\nwith synchronized(f \"upsert_input-{next_node_id}-{graph_exec_id}\"):\n#Add output data to the earliest incomplete execution,or create a new one.\nnext_node_exec_id,next_node_input=db_client.upsert_execution_input(\nnode_id=next_node_id,\ngraph_exec_id=graph_exec_id,\ninput_name=next_input_name,\ninput_data=next_data,\n)\n\n#Complete missing static input pins data using the last execution input.\nstatic_link_names={\nlink.sink_name\nfor link in next_node.input_links\nif link.is_static and link.sink_name not in next_node_input\n}\nif static_link_names and(\nlatest_execution:=db_client.get_latest_execution(\nnext_node_id,graph_exec_id\n)\n):\nfor name in static_link_names:\nnext_node_input[name]=latest_execution.input_data.get(name)\n\n#Validate the input data for the next node.\nnext_node_input,validation_msg=validate_exec(next_node,next_node_input)\nsuffix=f \"{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}\"\n\n#Incomplete input data,skip queueing the execution.\nif not next_node_input:\nlog_metadata.warning(f \"Skipped queueing {suffix}\")\nreturn enqueued_executions\n\n#Input is complete,enqueue the execution.\nlog_metadata.info(f \"Enqueued {suffix}\")\nenqueued_executions.append(\nadd_enqueued_execution(next_node_exec_id,next_node_id,next_node_input)\n)\n\n#Next execution stops here if the link is not static.\nif not node_link.is_static:\nreturn enqueued_executions\n\n#If link is static,there could be some incomplete executions waiting for it.\n#Load and complete the input missing input data,and try to re-enqueue them.\nfor iexec in db_client.get_incomplete_executions(\nnext_node_id,graph_exec_id\n):\nidata=iexec.input_data\nineid=iexec.node_exec_id\n\nstatic_link_names={\nlink.sink_name\nfor link in next_node.input_links\nif link.is_static and link.sink_name not in idata\n}\nfor input_name in static_link_names:\nidata[input_name]=next_node_input[input_name]\n\nidata,msg=validate_exec(next_node,idata)\nsuffix=f \"{next_output_name}>{next_input_name}~{ineid}:{msg}\"\nif not idata:\nlog_metadata.info(f \"Enqueueing static-link skipped: {suffix}\")\ncontinue\nlog_metadata.info(f \"Enqueueing static-link execution {suffix}\")\nenqueued_executions.append(\nadd_enqueued_execution(iexec.node_exec_id,next_node_id,idata)\n)\nreturn enqueued_executions\n\nreturn[\nexecution\nfor link in node.output_links\nfor execution in register_next_executions(link)\n]\n\n\ndef validate_exec(\nnode:Node,\ndata:BlockInput,\nresolve_input:bool=True,\n)->tuple[BlockInput|None,str]:\n\"\"\" \\n     Validate the input data for a node execution. \\n  \\n     Args: \\n         node: The node to execute. \\n         data: The input data for the node execution. \\n         resolve_input: Whether to resolve dynamic pins into dict/list/object. \\n  \\n     Returns: \\n         A tuple of the validated data and the block name. \\n         If the data is invalid, the first element will be None, and the second element \\n         will be an error message. \\n         If the data is valid, the first element will be the resolved input data, and \\n         the second element will be the block name. \\n     \"\"\"\nnode_block:Block|None=get_block(node.block_id)\nif not node_block:\nreturn None,f \"Block for {node.block_id} not found.\"\n\nif isinstance(node_block,AgentExecutorBlock):\n#Validate the execution metadata for the agent executor block.\ntry:\nexec_data=AgentExecutorBlock.Input(**node.input_default)\nexcept Exception as e:\nreturn None,f \"Input data doesn't match {node_block.name}: {str(e)}\"\n\n#Validation input\ninput_schema=exec_data.input_schema\nrequired_fields=set(input_schema[\"required\"])\ninput_default=exec_data.data\nelse:\n#Convert non-matching data types to the expected input schema.\nfor name,data_type in node_block.input_schema.__annotations__.items():\nif(value:=data.get(name))and(type(value)is not data_type):\ndata[name]=convert(value,data_type)\n\n#Validation input\ninput_schema=node_block.input_schema.jsonschema()\nrequired_fields=node_block.input_schema.get_required_fields()\ninput_default=node.input_default\n\n#Input data(without default values)should contain all required fields.\nerror_prefix=f \"Input data missing or mismatch for `{node_block.name}`:\"\ninput_fields_from_nodes={link.sink_name for link in node.input_links}\nif not input_fields_from_nodes.issubset(data):\nreturn None,f \"{error_prefix} {input_fields_from_nodes - set(data)}\"\n\n#Merge input data with default values and resolve dynamic dict/list/object pins.\ndata={**input_default,**data}\nif resolve_input:\ndata=merge_execution_input(data)\n\n#Input data post-merge should contain all required fields from the schema.\nif not required_fields.issubset(data):\nreturn None,f \"{error_prefix} {required_fields - set(data)}\"\n\n#Last validation:Validate the input values against the schema.\nif error:=json.validate_with_jsonschema(schema=input_schema,data=data):\nerror_message=f \"{error_prefix} {error}\"\nlogger.error(error_message)\nreturn None,error_message\n\nreturn data,node_block.name\n\n\nclass Executor:\n\"\"\" \\n     This class contains event handlers for the process pool executor events. \\n  \\n     The main events are: \\n         on_node_executor_start: Initialize the process that executes the node. \\n         on_node_execution: Execution logic for a node. \\n  \\n         on_graph_executor_start: Initialize the process that executes the graph. \\n         on_graph_execution: Execution logic for a graph. \\n  \\n     The execution flow: \\n         1. Graph execution request is added to the queue. \\n         2. Graph executor loop picks the request from the queue. \\n         3. Graph executor loop submits the graph execution request to the executor pool. \\n       [on_graph_execution] \\n         4. Graph executor initialize the node execution queue. \\n         5. Graph executor adds the starting nodes to the node execution queue. \\n         6. Graph executor waits for all nodes to be executed. \\n       [on_node_execution] \\n         7. Node executor picks the node execution request from the queue. \\n         8. Node executor executes the node. \\n         9. Node executor enqueues the next executed nodes to the node execution queue. \\n     \"\"\"\n\n@classmethod\ndef on_node_executor_start(cls):\nconfigure_logging()\nset_service_name(\"NodeExecutor\")\nredis.connect()\ncls.pid=os.getpid()\ncls.db_client=get_db_client()\ncls.creds_manager=IntegrationCredentialsManager()\n\n#Set up shutdown handlers\ncls.shutdown_lock=threading.Lock()\natexit.register(cls.on_node_executor_stop)#handle regular shutdown\nsignal.signal(#handle termination\nsignal.SIGTERM,lambda _,__:cls.on_node_executor_sigterm()\n)\n\n@classmethod\ndef on_node_executor_stop(cls):\nif not cls.shutdown_lock.acquire(blocking=False):\nreturn#already shutting down\n\nlogger.info(f \"[on_node_executor_stop {cls.pid}] ⏳ Releasing locks...\")\ncls.creds_manager.release_all_locks()\nlogger.info(f \"[on_node_executor_stop {cls.pid}] ⏳ Disconnecting Redis...\")\nredis.disconnect()\nlogger.info(f \"[on_node_executor_stop {cls.pid}] ⏳ Disconnecting DB manager...\")\nclose_service_client(cls.db_client)\nlogger.info(f \"[on_node_executor_stop {cls.pid}] ✅ Finished cleanup\")\n\n@classmethod\ndef on_node_executor_sigterm(cls):\nllprint(f \"[on_node_executor_sigterm {cls.pid}] ⚠️ SIGTERM received\")\nif not cls.shutdown_lock.acquire(blocking=False):\nreturn#already shutting down\n\nllprint(f \"[on_node_executor_stop {cls.pid}] ⏳ Releasing locks...\")\ncls.creds_manager.release_all_locks()\nllprint(f \"[on_node_executor_stop {cls.pid}] ⏳ Disconnecting Redis...\")\nredis.disconnect()\nllprint(f \"[on_node_executor_stop {cls.pid}] ✅ Finished cleanup\")\nsys.exit(0)\n\n@classmethod\n@error_logged\ndef on_node_execution(\ncls,\nq:ExecutionQueue[NodeExecutionEntry],\nnode_exec:NodeExecutionEntry,\n)->dict[str,Any]:\nlog_metadata=LogMetadata(\nuser_id=node_exec.user_id,\ngraph_eid=node_exec.graph_exec_id,\ngraph_id=node_exec.graph_id,\nnode_eid=node_exec.node_exec_id,\nnode_id=node_exec.node_id,\nblock_name=\"-\",\n)\n\nexecution_stats={}\ntiming_info,_=cls._on_node_execution(\nq,node_exec,log_metadata,execution_stats\n)\nexecution_stats[\"walltime\"]=timing_info.wall_time\nexecution_stats[\"cputime\"]=timing_info.cpu_time\n\ncls.db_client.update_node_execution_stats(\nnode_exec.node_exec_id,execution_stats\n)\nreturn execution_stats\n\n@classmethod\n@time_measured\ndef _on_node_execution(\ncls,\nq:ExecutionQueue[NodeExecutionEntry],\nnode_exec:NodeExecutionEntry,\nlog_metadata:LogMetadata,\nstats:dict[str,Any]|None=None,\n):\ntry:\nlog_metadata.info(f \"Start node execution {node_exec.node_exec_id}\")\nfor execution in execute_node(\ncls.db_client,cls.creds_manager,node_exec,stats\n):\nq.add(execution)\nlog_metadata.info(f \"Finished node execution {node_exec.node_exec_id}\")\nexcept Exception as e:\nlog_metadata.exception(\nf \"Failed node execution {node_exec.node_exec_id}: {e}\"\n)\n\n@classmethod\ndef on_graph_executor_start(cls):\nconfigure_logging()\nset_service_name(\"GraphExecutor\")\n\ncls.db_client=get_db_client()\ncls.pool_size=settings.config.num_node_workers\ncls.pid=os.getpid()\ncls._init_node_executor_pool()\nlogger.info(\nf \"Graph executor {cls.pid} started with {cls.pool_size} node workers\"\n)\n\n#Set up shutdown handler\natexit.register(cls.on_graph_executor_stop)\n\n@classmethod\ndef on_graph_executor_stop(cls):\nprefix=f \"[on_graph_executor_stop {cls.pid}]\"\nlogger.info(f \"{prefix} ⏳ Terminating node executor pool...\")\ncls.executor.terminate()\nlogger.info(f \"{prefix} ⏳ Disconnecting DB manager...\")\nclose_service_client(cls.db_client)\nlogger.info(f \"{prefix} ✅ Finished cleanup\")\n\n@classmethod\ndef _init_node_executor_pool(cls):\ncls.executor=Pool(\nprocesses=cls.pool_size,\ninitializer=cls.on_node_executor_start,\n)\n\n@classmethod\n@error_logged\ndef on_graph_execution(\ncls,graph_exec:GraphExecutionEntry,cancel:threading.Event\n):\nlog_metadata=LogMetadata(\nuser_id=graph_exec.user_id,\ngraph_eid=graph_exec.graph_exec_id,\ngraph_id=graph_exec.graph_id,\nnode_id=\"*\",\nnode_eid=\"*\",\nblock_name=\"-\",\n)\ntiming_info,(exec_stats,error)=cls._on_graph_execution(\ngraph_exec,cancel,log_metadata\n)\nexec_stats[\"walltime\"]=timing_info.wall_time\nexec_stats[\"cputime\"]=timing_info.cpu_time\nexec_stats[\"error\"]=str(error)if error else None\nresult=cls.db_client.update_graph_execution_stats(\ngraph_exec_id=graph_exec.graph_exec_id,\nstats=exec_stats,\n)\ncls.db_client.send_execution_update(result)\n\n@classmethod\n@time_measured\ndef _on_graph_execution(\ncls,\ngraph_exec:GraphExecutionEntry,\ncancel:threading.Event,\nlog_metadata:LogMetadata,\n)->tuple[dict[str,Any],Exception|None]:\n\"\"\" \\n         Returns: \\n             The execution statistics of the graph execution. \\n             The error that occurred during the execution. \\n         \"\"\"\nlog_metadata.info(f \"Start graph execution {graph_exec.graph_exec_id}\")\nexec_stats={\n\"nodes_walltime\":0,\n\"nodes_cputime\":0,\n\"node_count\":0,\n}\nerror=None\nfinished=False\n\ndef cancel_handler():\nwhile not cancel.is_set():\ncancel.wait(1)\nif finished:\nreturn\ncls.executor.terminate()\nlog_metadata.info(f \"Terminated graph execution {graph_exec.graph_exec_id}\")\ncls._init_node_executor_pool()\n\ncancel_thread=threading.Thread(target=cancel_handler)\ncancel_thread.start()\n\ntry:\nqueue=ExecutionQueue[NodeExecutionEntry]()\nfor node_exec in graph_exec.start_node_execs:\nqueue.add(node_exec)\n\nrunning_executions:dict[str,AsyncResult]={}\n\ndef make_exec_callback(exec_data:NodeExecutionEntry):\nnode_id=exec_data.node_id\n\ndef callback(result:object):\nrunning_executions.pop(node_id)\nnonlocal exec_stats\nif isinstance(result,dict):\nexec_stats[\"node_count\"]+=1\nexec_stats[\"nodes_cputime\"]+=result.get(\"cputime\",0)\nexec_stats[\"nodes_walltime\"]+=result.get(\"walltime\",0)\n\nreturn callback\n\nwhile not queue.empty():\nif cancel.is_set():\nerror=RuntimeError(\"Execution is cancelled\")\nreturn exec_stats,error\n\nexec_data=queue.get()\n\n#Avoid parallel execution of the same node.\nexecution=running_executions.get(exec_data.node_id)\nif execution and not execution.ready():\n#TODO(performance improvement):\n#Wait for the completion of the same node execution is blocking.\n#To improve this we need a separate queue for each node.\n#Re-enqueueing the data back to the queue will disrupt the order.\nexecution.wait()\n\nlog_metadata.debug(\nf \"Dispatching node execution {exec_data.node_exec_id} \"\nf \"for node {exec_data.node_id}\",\n)\nrunning_executions[exec_data.node_id]=cls.executor.apply_async(\ncls.on_node_execution,\n(queue,exec_data),\ncallback=make_exec_callback(exec_data),\n)\n\n#Avoid terminating graph execution when some nodes are still running.\nwhile queue.empty()and running_executions:\nlog_metadata.debug(\nf \"Queue empty; running nodes: {list(running_executions.keys())}\"\n)\nfor node_id,execution in list(running_executions.items()):\nif cancel.is_set():\nerror=RuntimeError(\"Execution is cancelled\")\nreturn exec_stats,error\n\nif not queue.empty():\nbreak#yield to parent loop to execute new queue items\n\nlog_metadata.debug(f \"Waiting on execution of node {node_id}\")\nexecution.wait(3)\n\nlog_metadata.info(f \"Finished graph execution {graph_exec.graph_exec_id}\")\nexcept Exception as e:\nlog_metadata.exception(\nf \"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n)\nerror=e\nfinally:\nif not cancel.is_set():\nfinished=True\ncancel.set()\ncancel_thread.join()\nreturn exec_stats,error\n\n\nclass ExecutionManager(AppService):\ndef __init__(self):\nsuper().__init__()\nself.use_redis=True\nself.use_supabase=True\nself.pool_size=settings.config.num_graph_workers\nself.queue=ExecutionQueue[GraphExecutionEntry]()\nself.active_graph_runs:dict[str,tuple[Future,threading.Event]]={}\n\n@classmethod\ndef get_port(cls)->int:\nreturn settings.config.execution_manager_port\n\ndef run_service(self):\nfrom backend.integrations.credentials_store import IntegrationCredentialsStore\n\nself.credentials_store=IntegrationCredentialsStore()\nself.executor=ProcessPoolExecutor(\nmax_workers=self.pool_size,\ninitializer=Executor.on_graph_executor_start,\n)\nsync_manager=multiprocessing.Manager()\nlogger.info(\nf \"[{self.service_name}] Started with max-{self.pool_size} graph workers\"\n)\nwhile True:\ngraph_exec_data=self.queue.get()\ngraph_exec_id=graph_exec_data.graph_exec_id\nlogger.debug(\nf \"[ExecutionManager] Dispatching graph execution {graph_exec_id}\"\n)\ncancel_event=sync_manager.Event()\nfuture=self.executor.submit(\nExecutor.on_graph_execution,graph_exec_data,cancel_event\n)\nself.active_graph_runs[graph_exec_id]=(future,cancel_event)\nfuture.add_done_callback(\nlambda _:self.active_graph_runs.pop(graph_exec_id,None)\n)\n\ndef cleanup(self):\nlogger.info(f \"[{__class__.__name__}] ⏳ Shutting down graph executor pool...\")\nself.executor.shutdown(cancel_futures=True)\n\nsuper().cleanup()\n\n@property\ndef db_client(self)->\"DatabaseManager\":\nreturn get_db_client()\n\n@expose\ndef add_execution(\nself,\ngraph_id:str,\ndata:BlockInput,\nuser_id:str,\ngraph_version:int|None=None,\n)->GraphExecutionEntry:\ngraph:GraphModel|None=self.db_client.get_graph(\ngraph_id=graph_id,user_id=user_id,version=graph_version\n)\nif not graph:\nraise ValueError(f \"Graph #{graph_id} not found.\")\n\ngraph.validate_graph(for_run=True)\nself._validate_node_input_credentials(graph,user_id)\n\nnodes_input=[]\nfor node in graph.starting_nodes:\ninput_data={}\nblock=get_block(node.block_id)\n\n#Invalid block&Note block should never be executed.\nif not block or block.block_type==BlockType.NOTE:\ncontinue\n\n#Extract request input data,and assign it to the input pin.\nif block.block_type==BlockType.INPUT:\nname=node.input_default.get(\"name\")\nif name and name in data:\ninput_data={\"value\":data[name]}\n\n#Extract webhook payload,and assign it to the input pin\nwebhook_payload_key=f \"webhook_{node.webhook_id}_payload\"\nif(\nblock.block_type in(BlockType.WEBHOOK,BlockType.WEBHOOK_MANUAL)\nand node.webhook_id\n):\nif webhook_payload_key not in data:\nraise ValueError(\nf \"Node {block.name} #{node.id} webhook payload is missing\"\n)\ninput_data={\"payload\":data[webhook_payload_key]}\n\ninput_data,error=validate_exec(node,input_data)\nif input_data is None:\nraise ValueError(error)\nelse:\nnodes_input.append((node.id,input_data))\n\ngraph_exec_id,node_execs=self.db_client.create_graph_execution(\ngraph_id=graph_id,\ngraph_version=graph.version,\nnodes_input=nodes_input,\nuser_id=user_id,\n)\n\nstarting_node_execs=[]\nfor node_exec in node_execs:\nstarting_node_execs.append(\nNodeExecutionEntry(\nuser_id=user_id,\ngraph_exec_id=node_exec.graph_exec_id,\ngraph_id=node_exec.graph_id,\nnode_exec_id=node_exec.node_exec_id,\nnode_id=node_exec.node_id,\ndata=node_exec.input_data,\n)\n)\nexec_update=self.db_client.update_execution_status(\nnode_exec.node_exec_id,ExecutionStatus.QUEUED,node_exec.input_data\n)\nself.db_client.send_execution_update(exec_update)\n\ngraph_exec=GraphExecutionEntry(\nuser_id=user_id,\ngraph_id=graph_id,\ngraph_exec_id=graph_exec_id,\nstart_node_execs=starting_node_execs,\n)\nself.queue.add(graph_exec)\n\nreturn graph_exec\n\n@expose\ndef cancel_execution(self,graph_exec_id:str)->None:\n\"\"\" \\n         Mechanism: \\n         1. Set the cancel event \\n         2. Graph executor's cancel handler thread detects the event, terminates workers, \\n            reinitializes worker pool, and returns. \\n         3. Update execution statuses in DB and set `error` outputs to `\" TERMINATED \"`. \\n         \"\"\"\nif graph_exec_id not in self.active_graph_runs:\nraise Exception(\nf \"Graph execution #{graph_exec_id} not active/running: \"\n\"possibly already completed/cancelled.\"\n)\n\nfuture,cancel_event=self.active_graph_runs[graph_exec_id]\nif cancel_event.is_set():\nreturn\n\ncancel_event.set()\nfuture.result()\n\n#Update the status of the unfinished node executions\nnode_execs=self.db_client.get_execution_results(graph_exec_id)\nfor node_exec in node_execs:\nif node_exec.status not in(\nExecutionStatus.COMPLETED,\nExecutionStatus.FAILED,\n):\nself.db_client.upsert_execution_output(\nnode_exec.node_exec_id,\"error\",\"TERMINATED\"\n)\nexec_update=self.db_client.update_execution_status(\nnode_exec.node_exec_id,ExecutionStatus.FAILED\n)\nself.db_client.send_execution_update(exec_update)\n\ndef _validate_node_input_credentials(self,graph:GraphModel,user_id:str):\n\"\"\"Checks all credentials for all nodes of the graph\"\"\"\n\nfor node in graph.nodes:\nblock=get_block(node.block_id)\nif not block:\nraise ValueError(f \"Unknown block {node.block_id} for node #{node.id}\")\n\n#Find any fields of type CredentialsMetaInput\nmodel_fields=cast(type[BaseModel],block.input_schema).model_fields\nif CREDENTIALS_FIELD_NAME not in model_fields:\ncontinue\n\nfield=model_fields[CREDENTIALS_FIELD_NAME]\n\n#The BlockSchema class enforces that a`credentials`field is always a\n#`CredentialsMetaInput`,so we can safely assume this here.\ncredentials_meta_type=cast(CredentialsMetaInput,field.annotation)\ncredentials_meta=credentials_meta_type.model_validate(\nnode.input_default[CREDENTIALS_FIELD_NAME]\n)\n#Fetch the corresponding Credentials and perform sanity checks\ncredentials=self.credentials_store.get_creds_by_id(\nuser_id,credentials_meta.id\n)\nif not credentials:\nraise ValueError(\nf \"Unknown credentials #{credentials_meta.id} \"\nf \"for node #{node.id}\"\n)\nif(\ncredentials.provider!=credentials_meta.provider\nor credentials.type!=credentials_meta.type\n):\nlogger.warning(\nf \"Invalid credentials #{credentials.id} for node #{node.id}: \"\n\"type/provider mismatch: \"\nf \"{credentials_meta.type}<>{credentials.type};\"\nf \"{credentials_meta.provider}<>{credentials.provider}\"\n)\nraise ValueError(\nf \"Invalid credentials #{credentials.id} for node #{node.id}: \"\n\"type/provider mismatch\"\n)\n\n\n#-------UTILITIES-------#\n\n\n@thread_cached\ndef get_db_client()->\"DatabaseManager\":\nfrom backend.executor import DatabaseManager\n\nreturn get_service_client(DatabaseManager)\n\n\n@contextmanager\ndef synchronized(key:str,timeout:int=60):\nlock:RedisLock=redis.get_redis().lock(f \"lock:{key}\",timeout=timeout)\ntry:\nlock.acquire()\nyield\nfinally:\nif lock.locked():\nlock.release()\n\n\ndef llprint(message:str):\n\"\"\" \\n     Low-level print/log helper function for use in signal handlers. \\n     Regular log/print statements are not allowed in signal handlers. \\n     \"\"\"\nif logger.getEffectiveLevel()==logging.DEBUG:\nos."
}