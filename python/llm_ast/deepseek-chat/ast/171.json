{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        1594
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "asyncio",
            "range": [
                0,
                2
            ],
            "children": [],
            "content": "import asyncio\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "builtins",
            "range": [
                3,
                5
            ],
            "children": [],
            "content": "import builtins\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "logging",
            "range": [
                6,
                8
            ],
            "children": [],
            "content": "import logging\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "os",
            "range": [
                9,
                11
            ],
            "children": [],
            "content": "import os\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "threading",
            "range": [
                12,
                14
            ],
            "children": [],
            "content": "import threading\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "time",
            "range": [
                15,
                17
            ],
            "children": [],
            "content": "import time\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "typing",
            "range": [
                18,
                20
            ],
            "children": [],
            "content": "import typing\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "ABC, abstractmethod",
            "range": [
                21,
                27
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "ABC",
                    "range": [
                        21,
                        25
                    ],
                    "children": [],
                    "content": "from abc import ABC,"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "abstractmethod",
                    "range": [
                        26,
                        27
                    ],
                    "children": [],
                    "content": "abstractmethod\n"
                }
            ],
            "content": "from abc import ABC,abstractmethod\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "Enum",
            "range": [
                28,
                32
            ],
            "children": [],
            "content": "from enum import Enum\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "NoneType, UnionType",
            "range": [
                33,
                39
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "NoneType",
                    "range": [
                        33,
                        37
                    ],
                    "children": [],
                    "content": "from types import NoneType,"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "UnionType",
                    "range": [
                        38,
                        39
                    ],
                    "children": [],
                    "content": "UnionType\n"
                }
            ],
            "content": "from types import NoneType,UnionType\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "Annotated, Any, Awaitable, Callable, Coroutine, Dict, FrozenSet, Iterator, List, Set, Tuple, Type, TypeVar, Union, cast, get_args, get_origin",
            "range": [
                40,
                97
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "Annotated",
                    "range": [
                        40,
                        45
                    ],
                    "children": [],
                    "content": "from typing import(\nAnnotated"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Any",
                    "range": [
                        46,
                        48
                    ],
                    "children": [],
                    "content": ",\nAny"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Awaitable",
                    "range": [
                        49,
                        51
                    ],
                    "children": [],
                    "content": ",\nAwaitable"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Callable",
                    "range": [
                        52,
                        54
                    ],
                    "children": [],
                    "content": ",\nCallable"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Coroutine",
                    "range": [
                        55,
                        57
                    ],
                    "children": [],
                    "content": ",\nCoroutine"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Dict",
                    "range": [
                        58,
                        60
                    ],
                    "children": [],
                    "content": ",\nDict"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "FrozenSet",
                    "range": [
                        61,
                        63
                    ],
                    "children": [],
                    "content": ",\nFrozenSet"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Iterator",
                    "range": [
                        64,
                        66
                    ],
                    "children": [],
                    "content": ",\nIterator"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "List",
                    "range": [
                        67,
                        69
                    ],
                    "children": [],
                    "content": ",\nList"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Set",
                    "range": [
                        70,
                        72
                    ],
                    "children": [],
                    "content": ",\nSet"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Tuple",
                    "range": [
                        73,
                        75
                    ],
                    "children": [],
                    "content": ",\nTuple"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Type",
                    "range": [
                        76,
                        78
                    ],
                    "children": [],
                    "content": ",\nType"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "TypeVar",
                    "range": [
                        79,
                        81
                    ],
                    "children": [],
                    "content": ",\nTypeVar"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Union",
                    "range": [
                        82,
                        84
                    ],
                    "children": [],
                    "content": ",\nUnion"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "cast",
                    "range": [
                        85,
                        87
                    ],
                    "children": [],
                    "content": ",\ncast"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "get_args",
                    "range": [
                        88,
                        90
                    ],
                    "children": [],
                    "content": ",\nget_args"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "get_origin",
                    "range": [
                        91,
                        93
                    ],
                    "children": [],
                    "content": ",\nget_origin"
                }
            ],
            "content": "from typing import(\nAnnotated,\nAny,\nAwaitable,\nCallable,\nCoroutine,\nDict,\nFrozenSet,\nIterator,\nList,\nSet,\nTuple,\nType,\nTypeVar,\nUnion,\ncast,\nget_args,\nget_origin,\n)\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                99,
                103
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "Pyro5",
                    "range": [
                        100,
                        100
                    ],
                    "children": [],
                    "content": "Pyro5"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "api",
                    "range": [
                        102,
                        102
                    ],
                    "children": [],
                    "content": "api"
                }
            ],
            "content": "import Pyro5.api\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                104,
                108
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "pydantic",
                    "range": [
                        105,
                        105
                    ],
                    "children": [],
                    "content": "pydantic"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "BaseModel",
                    "range": [
                        107,
                        107
                    ],
                    "children": [],
                    "content": "BaseModel"
                }
            ],
            "content": "from pydantic import BaseModel\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                109,
                115
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "Pyro5",
                    "range": [
                        110,
                        110
                    ],
                    "children": [],
                    "content": "Pyro5"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "api",
                    "range": [
                        112,
                        112
                    ],
                    "children": [],
                    "content": "api"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "pyro",
                    "range": [
                        114,
                        114
                    ],
                    "children": [],
                    "content": "pyro"
                }
            ],
            "content": "from Pyro5 import api as pyro\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                116,
                122
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "Pyro5",
                    "range": [
                        117,
                        117
                    ],
                    "children": [],
                    "content": "Pyro5"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "config",
                    "range": [
                        119,
                        119
                    ],
                    "children": [],
                    "content": "config"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "pyro_config",
                    "range": [
                        121,
                        121
                    ],
                    "children": [],
                    "content": "pyro_config"
                }
            ],
            "content": "from Pyro5 import config as pyro_config\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                124,
                132
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend",
                    "range": [
                        125,
                        125
                    ],
                    "children": [],
                    "content": "backend"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "data",
                    "range": [
                        127,
                        127
                    ],
                    "children": [],
                    "content": "data"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "db",
                    "range": [
                        129,
                        129
                    ],
                    "children": [],
                    "content": "db"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "redis",
                    "range": [
                        131,
                        131
                    ],
                    "children": [],
                    "content": "redis"
                }
            ],
            "content": "from backend.data import db,redis\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                133,
                141
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend",
                    "range": [
                        134,
                        134
                    ],
                    "children": [],
                    "content": "backend"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "util",
                    "range": [
                        136,
                        136
                    ],
                    "children": [],
                    "content": "util"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "process",
                    "range": [
                        138,
                        138
                    ],
                    "children": [],
                    "content": "process"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "AppProcess",
                    "range": [
                        140,
                        140
                    ],
                    "children": [],
                    "content": "AppProcess"
                }
            ],
            "content": "from backend.util.process import AppProcess\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                142,
                150
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend",
                    "range": [
                        143,
                        143
                    ],
                    "children": [],
                    "content": "backend"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "util",
                    "range": [
                        145,
                        145
                    ],
                    "children": [],
                    "content": "util"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "retry",
                    "range": [
                        147,
                        147
                    ],
                    "children": [],
                    "content": "retry"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "conn_retry",
                    "range": [
                        149,
                        149
                    ],
                    "children": [],
                    "content": "conn_retry"
                }
            ],
            "content": "from backend.util.retry import conn_retry\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                151,
                161
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend",
                    "range": [
                        152,
                        152
                    ],
                    "children": [],
                    "content": "backend"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "util",
                    "range": [
                        154,
                        154
                    ],
                    "children": [],
                    "content": "util"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "settings",
                    "range": [
                        156,
                        156
                    ],
                    "children": [],
                    "content": "settings"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Config",
                    "range": [
                        158,
                        158
                    ],
                    "children": [],
                    "content": "Config"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Secrets",
                    "range": [
                        160,
                        160
                    ],
                    "children": [],
                    "content": "Secrets"
                }
            ],
            "content": "from backend.util.settings import Config,Secrets\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "logger",
            "range": [
                163,
                170
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        164,
                        170
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "logging.getLogger",
                            "range": [
                                165,
                                167
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "logging",
                                    "range": [
                                        165,
                                        165
                                    ],
                                    "children": [],
                                    "content": "logging"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "getLogger",
                                    "range": [
                                        167,
                                        167
                                    ],
                                    "children": [],
                                    "content": "getLogger"
                                }
                            ],
                            "content": "logging.getLogger"
                        },
                        {
                            "type": "CallExpression",
                            "name": "(",
                            "range": [
                                168,
                                170
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "__name__",
                                    "range": [
                                        169,
                                        169
                                    ],
                                    "children": [],
                                    "content": "__name__"
                                }
                            ],
                            "content": "(__name__)"
                        }
                    ],
                    "content": "=logging.getLogger(__name__)"
                }
            ],
            "content": "logger=logging.getLogger(__name__)"
        },
        {
            "type": "VariableDeclaration",
            "name": "T",
            "range": [
                172,
                177
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        173,
                        177
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "TypeVar",
                            "range": [
                                174,
                                177
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"T\"",
                                    "range": [
                                        176,
                                        176
                                    ],
                                    "children": [],
                                    "content": "\"T\""
                                }
                            ],
                            "content": "TypeVar(\"T\")"
                        }
                    ],
                    "content": "=TypeVar(\"T\")"
                }
            ],
            "content": "T=TypeVar(\"T\")"
        },
        {
            "type": "VariableDeclaration",
            "name": "C",
            "range": [
                179,
                188
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        180,
                        188
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "TypeVar",
                            "range": [
                                181,
                                188
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"C\"",
                                    "range": [
                                        183,
                                        183
                                    ],
                                    "children": [],
                                    "content": "\"C\""
                                },
                                {
                                    "type": "Keyword",
                                    "name": "bound",
                                    "range": [
                                        185,
                                        185
                                    ],
                                    "children": [],
                                    "content": "bound"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "Callable",
                                    "range": [
                                        187,
                                        187
                                    ],
                                    "children": [],
                                    "content": "Callable"
                                }
                            ],
                            "content": "TypeVar(\"C\",bound=Callable)"
                        }
                    ],
                    "content": "=TypeVar(\"C\",bound=Callable)"
                }
            ],
            "content": "C=TypeVar(\"C\",bound=Callable)"
        },
        {
            "type": "FunctionDecl",
            "name": "wrapper",
            "range": [
                247,
                292
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        249,
                        256
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "args",
                            "range": [
                                250,
                                251
                            ],
                            "children": [],
                            "content": "(*"
                        },
                        {
                            "type": "Parameter",
                            "name": "kwargs",
                            "range": [
                                254,
                                255
                            ],
                            "children": [],
                            "content": "**"
                        }
                    ],
                    "content": "wrapper(*args,**kwargs"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        258,
                        292
                    ],
                    "children": [
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                259,
                                292
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        261,
                                        272
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "",
                                            "range": [
                                                262,
                                                271
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "func",
                                                    "range": [
                                                        263,
                                                        270
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "",
                                                            "range": [
                                                                264,
                                                                270
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "args",
                                                                    "range": [
                                                                        265,
                                                                        266
                                                                    ],
                                                                    "children": [],
                                                                    "content": "(*"
                                                                },
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "kwargs",
                                                                    "range": [
                                                                        268,
                                                                        269
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",*"
                                                                }
                                                            ],
                                                            "content": "func(*args,**"
                                                        }
                                                    ],
                                                    "content": "return func(*args,**"
                                                }
                                            ],
                                            "content": "\nreturn func(*args,**kwargs"
                                        }
                                    ],
                                    "content": ":\nreturn func(*args,**kwargs)"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "",
                                    "range": [
                                        273,
                                        292
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                278,
                                                292
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        279,
                                                        283
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "",
                                                            "range": [
                                                                279,
                                                                282
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "msg",
                                                                    "range": [
                                                                        279,
                                                                        280
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nmsg"
                                                                },
                                                                {
                                                                    "type": "TemplateLiteral",
                                                                    "name": "",
                                                                    "range": [
                                                                        281,
                                                                        282
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=f"
                                                                }
                                                            ],
                                                            "content": "\nmsg=f"
                                                        }
                                                    ],
                                                    "content": "\nmsg=f \"Error in {func.__name__}: {e.__str__()}\""
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        284,
                                                        290
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "logger.exception",
                                                            "range": [
                                                                284,
                                                                289
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "",
                                                                    "range": [
                                                                        287,
                                                                        289
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "msg",
                                                                            "range": [
                                                                                288,
                                                                                289
                                                                            ],
                                                                            "children": [],
                                                                            "content": "(msg"
                                                                        }
                                                                    ],
                                                                    "content": "exception(msg"
                                                                }
                                                            ],
                                                            "content": "\nlogger.exception(msg"
                                                        }
                                                    ],
                                                    "content": "\nlogger.exception(msg)"
                                                },
                                                {
                                                    "type": "RaiseStatement",
                                                    "name": "",
                                                    "range": [
                                                        291,
                                                        292
                                                    ],
                                                    "children": [],
                                                    "content": "\nraise"
                                                }
                                            ],
                                            "content": ":\nmsg=f \"Error in {func.__name__}: {e.__str__()}\"\nlogger.exception(msg)\nraise"
                                        }
                                    ],
                                    "content": "\nexcept Exception as e:\nmsg=f \"Error in {func.__name__}: {e.__str__()}\"\nlogger.exception(msg)\nraise"
                                }
                            ],
                            "content": "\ntry:\nreturn func(*args,**kwargs)\nexcept Exception as e:\nmsg=f \"Error in {func.__name__}: {e.__str__()}\"\nlogger.exception(msg)\nraise"
                        }
                    ],
                    "content": ":\ntry:\nreturn func(*args,**kwargs)\nexcept Exception as e:\nmsg=f \"Error in {func.__name__}: {e.__str__()}\"\nlogger.exception(msg)\nraise"
                }
            ],
            "content": "\ndef wrapper(*args,**kwargs):\ntry:\nreturn func(*args,**kwargs)\nexcept Exception as e:\nmsg=f \"Error in {func.__name__}: {e.__str__()}\"\nlogger.exception(msg)\nraise"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                294,
                298
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "register_pydantic_serializers",
                    "range": [
                        294,
                        297
                    ],
                    "children": [
                        {
                            "type": "ArgumentList",
                            "name": "",
                            "range": [
                                295,
                                297
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "func",
                                    "range": [
                                        296,
                                        297
                                    ],
                                    "children": [],
                                    "content": "(func"
                                }
                            ],
                            "content": "register_pydantic_serializers(func"
                        }
                    ],
                    "content": "\nregister_pydantic_serializers(func"
                }
            ],
            "content": "\nregister_pydantic_serializers(func)"
        },
        {
            "type": "ReturnStatement",
            "name": "",
            "range": [
                300,
                311
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "pyro.expose",
                    "range": [
                        300,
                        306
                    ],
                    "children": [
                        {
                            "type": "ArgumentList",
                            "name": "",
                            "range": [
                                304,
                                306
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "wrapper",
                                    "range": [
                                        305,
                                        306
                                    ],
                                    "children": [],
                                    "content": "(wrapper"
                                }
                            ],
                            "content": "expose(wrapper"
                        }
                    ],
                    "content": "\nreturn pyro.expose(wrapper"
                }
            ],
            "content": "\nreturn pyro.expose(wrapper)#type:ignore"
        },
        {
            "type": "FunctionDecl",
            "name": "register_pydantic_serializers",
            "range": [
                313,
                412
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "register_pydantic_serializers",
                    "range": [
                        313,
                        320
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                313,
                                313
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "register_pydantic_serializers",
                            "range": [
                                314,
                                314
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "ParameterList",
                            "name": "",
                            "range": [
                                315,
                                319
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "func",
                                    "range": [
                                        316,
                                        316
                                    ],
                                    "children": [],
                                    "content": "register_pydantic_serializers"
                                },
                                {
                                    "type": "TypeAnnotation",
                                    "name": "",
                                    "range": [
                                        317,
                                        318
                                    ],
                                    "children": [
                                        {
                                            "type": "Keyword",
                                            "name": ":",
                                            "range": [
                                                317,
                                                317
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Type",
                                            "name": "Callable",
                                            "range": [
                                                318,
                                                318
                                            ],
                                            "children": [],
                                            "content": "func"
                                        }
                                    ],
                                    "content": "(func"
                                }
                            ],
                            "content": "def register_pydantic_serializers(func:"
                        }
                    ],
                    "content": "\n\ndef register_pydantic_serializers(func:Callable"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        321,
                        412
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "",
                            "range": [
                                322,
                                324
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Register custom serializers and deserializers for annotated Pydantic models\"",
                                    "range": [
                                        323,
                                        323
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": ":\n\"\""
                        },
                        {
                            "type": "ForStatement",
                            "name": "",
                            "range": [
                                326,
                                382
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "for",
                                    "range": [
                                        326,
                                        326
                                    ],
                                    "children": [],
                                    "content": "\"\""
                                },
                                {
                                    "type": "VariableDeclaration",
                                    "name": "",
                                    "range": [
                                        327,
                                        329
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "name",
                                            "range": [
                                                327,
                                                327
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "annotation",
                                            "range": [
                                                329,
                                                329
                                            ],
                                            "children": [],
                                            "content": "name"
                                        }
                                    ],
                                    "content": "\nfor name"
                                },
                                {
                                    "type": "Keyword",
                                    "name": "in",
                                    "range": [
                                        330,
                                        330
                                    ],
                                    "children": [],
                                    "content": ","
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "",
                                    "range": [
                                        331,
                                        337
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "func",
                                            "range": [
                                                331,
                                                331
                                            ],
                                            "children": [],
                                            "content": "annotation"
                                        },
                                        {
                                            "type": "MemberAccess",
                                            "name": "",
                                            "range": [
                                                332,
                                                335
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "__annotations__",
                                                    "range": [
                                                        333,
                                                        333
                                                    ],
                                                    "children": [],
                                                    "content": "func"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "items",
                                                    "range": [
                                                        335,
                                                        335
                                                    ],
                                                    "children": [],
                                                    "content": "__annotations__"
                                                }
                                            ],
                                            "content": "in func.__annotations__"
                                        }
                                    ],
                                    "content": "annotation in func.__annotations__.items"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        339,
                                        382
                                    ],
                                    "children": [
                                        {
                                            "type": "TryStatement",
                                            "name": "",
                                            "range": [
                                                340,
                                                362
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "",
                                                    "range": [
                                                        342,
                                                        349
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "VariableDeclaration",
                                                            "name": "",
                                                            "range": [
                                                                343,
                                                                345
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "pydantic_types",
                                                                    "range": [
                                                                        343,
                                                                        343
                                                                    ],
                                                                    "children": [],
                                                                    "content": ":"
                                                                },
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "",
                                                                    "range": [
                                                                        345,
                                                                        349
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "_pydantic_models_from_type_annotation",
                                                                            "range": [
                                                                                345,
                                                                                345
                                                                            ],
                                                                            "children": [],
                                                                            "content": "pydantic_types"
                                                                        },
                                                                        {
                                                                            "type": "ArgumentList",
                                                                            "name": "",
                                                                            "range": [
                                                                                346,
                                                                                348
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "annotation",
                                                                                    "range": [
                                                                                        347,
                                                                                        347
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "_pydantic_models_from_type_annotation"
                                                                                }
                                                                            ],
                                                                            "content": "=_pydantic_models_from_type_annotation("
                                                                        }
                                                                    ],
                                                                    "content": "pydantic_types=_pydantic_models_from_type_annotation(annotation"
                                                                }
                                                            ],
                                                            "content": ":\npydantic_types"
                                                        }
                                                    ],
                                                    "content": "try:\npydantic_types=_pydantic_models_from_type_annotation(annotation"
                                                },
                                                {
                                                    "type": "CatchClause",
                                                    "name": "",
                                                    "range": [
                                                        350,
                                                        362
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Block",
                                                            "name": "",
                                                            "range": [
                                                                355,
                                                                362
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ThrowStatement",
                                                                    "name": "",
                                                                    "range": [
                                                                        356,
                                                                        361
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "NewExpression",
                                                                            "name": "",
                                                                            "range": [
                                                                                357,
                                                                                361
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "TypeError",
                                                                                    "range": [
                                                                                        357,
                                                                                        357
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "\n"
                                                                                },
                                                                                {
                                                                                    "type": "ArgumentList",
                                                                                    "name": "",
                                                                                    "range": [
                                                                                        358,
                                                                                        360
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Literal",
                                                                                            "name": "\"Error while exposing {func.__name__}: {e.__str__()}\"",
                                                                                            "range": [
                                                                                                359,
                                                                                                359
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "TypeError"
                                                                                        }
                                                                                    ],
                                                                                    "content": "raise TypeError("
                                                                                }
                                                                            ],
                                                                            "content": "\nraise TypeError(f"
                                                                        }
                                                                    ],
                                                                    "content": ":\nraise TypeError(f"
                                                                }
                                                            ],
                                                            "content": "e:\nraise TypeError(f \"Error while exposing {func.__name__}: {e.__str__()}\""
                                                        }
                                                    ],
                                                    "content": ")\nexcept Exception as e:\nraise TypeError(f \"Error while exposing {func.__name__}: {e.__str__()}\""
                                                }
                                            ],
                                            "content": ":\ntry:\npydantic_types=_pydantic_models_from_type_annotation(annotation)\nexcept Exception as e:\nraise TypeError(f \"Error while exposing {func.__name__}: {e.__str__()}\""
                                        }
                                    ],
                                    "content": "):\ntry:\npydantic_types=_pydantic_models_from_type_annotation(annotation)\nexcept Exception as e:\nraise TypeError(f \"Error while exposing {func.__name__}: {e.__str__()}\")\n\nfor model in pydantic_types:\nlogger.debug(\nf \"Registering Pyro (de)serializers for {func.__name__} annotation \"\nf \"'{name}': {model.__qualname__}\"\n"
                                }
                            ],
                            "content": "\"\"\nfor name,annotation in func.__annotations__.items():\ntry:\npydantic_types=_pydantic_models_from_type_annotation(annotation)\nexcept Exception as e:\nraise TypeError(f \"Error while exposing {func.__name__}: {e.__str__()}\")\n\nfor model in pydantic_types:\nlogger.debug(\nf \"Registering Pyro (de)serializers for {func.__name__} annotation \"\nf \"'{name}': {model.__qualname__}\"\n"
                        },
                        {
                            "type": "ForStatement",
                            "name": "",
                            "range": [
                                364,
                                410
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "for",
                                    "range": [
                                        364,
                                        364
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "VariableDeclaration",
                                    "name": "",
                                    "range": [
                                        365,
                                        365
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "model",
                                            "range": [
                                                365,
                                                365
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "\n"
                                },
                                {
                                    "type": "Keyword",
                                    "name": "in",
                                    "range": [
                                        366,
                                        366
                                    ],
                                    "children": [],
                                    "content": "for"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "pydantic_types",
                                    "range": [
                                        367,
                                        367
                                    ],
                                    "children": [],
                                    "content": "model"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        369,
                                        410
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                370,
                                                381
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "",
                                                    "range": [
                                                        370,
                                                        381
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberAccess",
                                                            "name": "",
                                                            "range": [
                                                                370,
                                                                372
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "logger",
                                                                    "range": [
                                                                        370,
                                                                        370
                                                                    ],
                                                                    "children": [],
                                                                    "content": ":"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "debug",
                                                                    "range": [
                                                                        372,
                                                                        372
                                                                    ],
                                                                    "children": [],
                                                                    "content": "logger"
                                                                }
                                                            ],
                                                            "content": ":\nlogger"
                                                        },
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "",
                                                            "range": [
                                                                373,
                                                                380
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"Registering Pyro (de)serializers for {func.__name__} annotation \"",
                                                                    "range": [
                                                                        376,
                                                                        376
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\n"
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"'{name}': {model.__qualname__}\"",
                                                                    "range": [
                                                                        379,
                                                                        379
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\n"
                                                                }
                                                            ],
                                                            "content": ".debug(\nf \"Registering Pyro (de)serializers for {func.__name__} annotation \"\nf"
                                                        }
                                                    ],
                                                    "content": ":\nlogger.debug(\nf \"Registering Pyro (de)serializers for {func.__name__} annotation \"\nf \"'{name}': {model.__qualname__}\""
                                                }
                                            ],
                                            "content": ":\nlogger.debug(\nf \"Registering Pyro (de)serializers for {func.__name__} annotation \"\nf \"'{name}': {model.__qualname__}\""
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                383,
                                                394
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "",
                                                    "range": [
                                                        383,
                                                        394
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberAccess",
                                                            "name": "",
                                                            "range": [
                                                                383,
                                                                385
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "pyro",
                                                                    "range": [
                                                                        383,
                                                                        383
                                                                    ],
                                                                    "children": [],
                                                                    "content": ")"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "register_class_to_dict",
                                                                    "range": [
                                                                        385,
                                                                        385
                                                                    ],
                                                                    "children": [],
                                                                    "content": "pyro"
                                                                }
                                                            ],
                                                            "content": ")\npyro"
                                                        },
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "",
                                                            "range": [
                                                                386,
                                                                393
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "model",
                                                                    "range": [
                                                                        387,
                                                                        387
                                                                    ],
                                                                    "children": [],
                                                                    "content": "register_class_to_dict"
                                                                },
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "",
                                                                    "range": [
                                                                        389,
                                                                        393
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "_make_custom_serializer",
                                                                            "range": [
                                                                                389,
                                                                                389
                                                                            ],
                                                                            "children": [],
                                                                            "content": "model"
                                                                        },
                                                                        {
                                                                            "type": "ArgumentList",
                                                                            "name": "",
                                                                            "range": [
                                                                                390,
                                                                                392
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "model",
                                                                                    "range": [
                                                                                        391,
                                                                                        391
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "_make_custom_serializer"
                                                                                }
                                                                            ],
                                                                            "content": ",_make_custom_serializer("
                                                                        }
                                                                    ],
                                                                    "content": "model,_make_custom_serializer(model"
                                                                }
                                                            ],
                                                            "content": ".register_class_to_dict(model,_make_custom_serializer(model"
                                                        }
                                                    ],
                                                    "content": ")\npyro.register_class_to_dict(model,_make_custom_serializer(model)"
                                                }
                                            ],
                                            "content": ")\npyro.register_class_to_dict(model,_make_custom_serializer(model)"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                395,
                                                410
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "",
                                                    "range": [
                                                        395,
                                                        410
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberAccess",
                                                            "name": "",
                                                            "range": [
                                                                395,
                                                                397
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "pyro",
                                                                    "range": [
                                                                        395,
                                                                        395
                                                                    ],
                                                                    "children": [],
                                                                    "content": ")"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "register_dict_to_class",
                                                                    "range": [
                                                                        397,
                                                                        397
                                                                    ],
                                                                    "children": [],
                                                                    "content": "pyro"
                                                                }
                                                            ],
                                                            "content": ")\npyro"
                                                        },
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "",
                                                            "range": [
                                                                398,
                                                                409
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberAccess",
                                                                    "name": "",
                                                                    "range": [
                                                                        400,
                                                                        402
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "model",
                                                                            "range": [
                                                                                400,
                                                                                400
                                                                            ],
                                                                            "children": [],
                                                                            "content": "("
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "__qualname__",
                                                                            "range": [
                                                                                402,
                                                                                402
                                                                            ],
                                                                            "children": [],
                                                                            "content": "model"
                                                                        }
                                                                    ],
                                                                    "content": "(\nmodel"
                                                                },
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "",
                                                                    "range": [
                                                                        404,
                                                                        408
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "_make_custom_deserializer",
                                                                            "range": [
                                                                                404,
                                                                                404
                                                                            ],
                                                                            "children": [],
                                                                            "content": "__qualname__"
                                                                        },
                                                                        {
                                                                            "type": "ArgumentList",
                                                                            "name": "",
                                                                            "range": [
                                                                                405,
                                                                                407
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "model",
                                                                                    "range": [
                                                                                        406,
                                                                                        406
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "_make_custom_deserializer"
                                                                                }
                                                                            ],
                                                                            "content": ",_make_custom_deserializer("
                                                                        }
                                                                    ],
                                                                    "content": "__qualname__,_make_custom_deserializer(model"
                                                                }
                                                            ],
                                                            "content": ".register_dict_to_class(\nmodel.__qualname__,_make_custom_deserializer(model)"
                                                        }
                                                    ],
                                                    "content": ")\npyro.register_dict_to_class(\nmodel.__qualname__,_make_custom_deserializer(model)\n"
                                                }
                                            ],
                                            "content": ")\npyro.register_dict_to_class(\nmodel.__qualname__,_make_custom_deserializer(model)\n"
                                        }
                                    ],
                                    "content": "pydantic_types:\nlogger.debug(\nf \"Registering Pyro (de)serializers for {func.__name__} annotation \"\nf \"'{name}': {model.__qualname__}\"\n)\npyro.register_class_to_dict(model,_make_custom_serializer(model))\npyro.register_dict_to_class(\nmodel.__qualname__,_make_custom_deserializer(model)\n"
                                }
                            ],
                            "content": "\n\nfor model in pydantic_types:\nlogger.debug(\nf \"Registering Pyro (de)serializers for {func.__name__} annotation \"\nf \"'{name}': {model.__qualname__}\"\n)\npyro.register_class_to_dict(model,_make_custom_serializer(model))\npyro.register_dict_to_class(\nmodel.__qualname__,_make_custom_deserializer(model)\n"
                        }
                    ],
                    "content": "):\n\"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"\nfor name,annotation in func.__annotations__.items():\ntry:\npydantic_types=_pydantic_models_from_type_annotation(annotation)\nexcept Exception as e:\nraise TypeError(f \"Error while exposing {func.__name__}: {e.__str__()}\")\n\nfor model in pydantic_types:\nlogger.debug(\nf \"Registering Pyro (de)serializers for {func.__name__} annotation \"\nf \"'{name}': {model.__qualname__}\"\n)\npyro.register_class_to_dict(model,_make_custom_serializer(model))\npyro.register_dict_to_class(\nmodel.__qualname__,_make_custom_deserializer(model)\n)\n"
                }
            ],
            "content": "\n\ndef register_pydantic_serializers(func:Callable):\n\"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"\nfor name,annotation in func.__annotations__.items():\ntry:\npydantic_types=_pydantic_models_from_type_annotation(annotation)\nexcept Exception as e:\nraise TypeError(f \"Error while exposing {func.__name__}: {e.__str__()}\")\n\nfor model in pydantic_types:\nlogger.debug(\nf \"Registering Pyro (de)serializers for {func.__name__} annotation \"\nf \"'{name}': {model.__qualname__}\"\n)\npyro.register_class_to_dict(model,_make_custom_serializer(model))\npyro.register_dict_to_class(\nmodel.__qualname__,_make_custom_deserializer(model)\n)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "_make_custom_serializer",
            "range": [
                413,
                470
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "model",
                    "range": [
                        416,
                        421
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "",
                            "range": [
                                417,
                                421
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "Type",
                                    "range": [
                                        418,
                                        421
                                    ],
                                    "children": [
                                        {
                                            "type": "GenericType",
                                            "name": "BaseModel",
                                            "range": [
                                                419,
                                                421
                                            ],
                                            "children": [],
                                            "content": ":Type["
                                        }
                                    ],
                                    "content": "model:Type["
                                }
                            ],
                            "content": "(model:Type["
                        }
                    ],
                    "content": "_make_custom_serializer(model:Type["
                },
                {
                    "type": "FunctionDecl",
                    "name": "custom_class_to_dict",
                    "range": [
                        425,
                        465
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "obj",
                            "range": [
                                428,
                                429
                            ],
                            "children": [],
                            "content": "custom_class_to_dict("
                        },
                        {
                            "type": "VariableDecl",
                            "name": "data",
                            "range": [
                                432,
                                454
                            ],
                            "children": [
                                {
                                    "type": "ObjectLiteral",
                                    "name": "",
                                    "range": [
                                        434,
                                        454
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "__class__",
                                            "range": [
                                                436,
                                                443
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "",
                                                    "range": [
                                                        438,
                                                        442
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "obj",
                                                            "range": [
                                                                438,
                                                                438
                                                            ],
                                                            "children": [],
                                                            "content": "\"__class__\""
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "__class__",
                                                            "range": [
                                                                440,
                                                                440
                                                            ],
                                                            "children": [],
                                                            "content": "obj"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "__qualname__",
                                                            "range": [
                                                                442,
                                                                442
                                                            ],
                                                            "children": [],
                                                            "content": "__class__"
                                                        }
                                                    ],
                                                    "content": "\"__class__\":obj.__class__"
                                                }
                                            ],
                                            "content": "{\n\"__class__\":obj.__class__."
                                        },
                                        {
                                            "type": "SpreadElement",
                                            "name": "",
                                            "range": [
                                                445,
                                                452
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "",
                                                    "range": [
                                                        447,
                                                        452
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "",
                                                            "range": [
                                                                447,
                                                                449
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "obj",
                                                                    "range": [
                                                                        447,
                                                                        447
                                                                    ],
                                                                    "children": [],
                                                                    "content": "*"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "model_dump",
                                                                    "range": [
                                                                        449,
                                                                        449
                                                                    ],
                                                                    "children": [],
                                                                    "content": "obj"
                                                                }
                                                            ],
                                                            "content": "**obj"
                                                        }
                                                    ],
                                                    "content": "**obj.model_dump("
                                                }
                                            ],
                                            "content": ",\n**obj.model_dump("
                                        }
                                    ],
                                    "content": "data={\n\"__class__\":obj.__class__.__qualname__,\n**obj.model_dump(),"
                                }
                            ],
                            "content": ":\ndata={\n\"__class__\":obj.__class__.__qualname__,\n**obj.model_dump(),"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                456,
                                462
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "",
                                    "range": [
                                        457,
                                        462
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "",
                                            "range": [
                                                457,
                                                458
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "logger",
                                                    "range": [
                                                        456,
                                                        456
                                                    ],
                                                    "children": [],
                                                    "content": "}"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "debug",
                                                    "range": [
                                                        458,
                                                        458
                                                    ],
                                                    "children": [],
                                                    "content": "logger"
                                                }
                                            ],
                                            "content": "\nlogger"
                                        },
                                        {
                                            "type": "TemplateLiteral",
                                            "name": "",
                                            "range": [
                                                459,
                                                462
                                            ],
                                            "children": [
                                                {
                                                    "type": "TemplateElement",
                                                    "name": "",
                                                    "range": [
                                                        460,
                                                        462
                                                    ],
                                                    "children": [],
                                                    "content": "debug(f"
                                                }
                                            ],
                                            "content": ".debug(f"
                                        }
                                    ],
                                    "content": "\nlogger.debug(f"
                                }
                            ],
                            "content": "}\nlogger.debug(f"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                464,
                                465
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "data",
                                    "range": [
                                        465,
                                        465
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": ")\n"
                        }
                    ],
                    "content": ":\ndef custom_class_to_dict(obj):\ndata={\n\"__class__\":obj.__class__.__qualname__,\n**obj.model_dump(),\n}\nlogger.debug(f \"Serializing {obj.__class__.__qualname__} with data: {data}\")\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        468,
                        469
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "custom_class_to_dict",
                            "range": [
                                469,
                                469
                            ],
                            "children": [],
                            "content": "\n"
                        }
                    ],
                    "content": "\n\n"
                }
            ],
            "content": "\n\ndef _make_custom_serializer(model:Type[BaseModel]):\ndef custom_class_to_dict(obj):\ndata={\n\"__class__\":obj.__class__.__qualname__,\n**obj.model_dump(),\n}\nlogger.debug(f \"Serializing {obj.__class__.__qualname__} with data: {data}\")\nreturn data\n\nreturn"
        },
        {
            "type": "FunctionDecl",
            "name": "_make_custom_deserializer",
            "range": [
                472,
                514
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "model",
                    "range": [
                        475,
                        480
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "",
                            "range": [
                                476,
                                480
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "Type",
                                    "range": [
                                        477,
                                        477
                                    ],
                                    "children": [],
                                    "content": "("
                                },
                                {
                                    "type": "GenericType",
                                    "name": "BaseModel",
                                    "range": [
                                        479,
                                        479
                                    ],
                                    "children": [],
                                    "content": ":"
                                }
                            ],
                            "content": "_make_custom_deserializer(model:Type"
                        }
                    ],
                    "content": "def _make_custom_deserializer(model:Type"
                },
                {
                    "type": "FunctionDecl",
                    "name": "custom_dict_to_class",
                    "range": [
                        484,
                        513
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "qualname",
                            "range": [
                                487,
                                487
                            ],
                            "children": [],
                            "content": "def"
                        },
                        {
                            "type": "Parameter",
                            "name": "data",
                            "range": [
                                489,
                                491
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "",
                                    "range": [
                                        490,
                                        491
                                    ],
                                    "children": [
                                        {
                                            "type": "Type",
                                            "name": "dict",
                                            "range": [
                                                491,
                                                491
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": "qualname,"
                                }
                            ],
                            "content": "(qualname,"
                        },
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                494,
                                510
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "",
                                    "range": [
                                        495,
                                        501
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "logger.debug",
                                            "range": [
                                                495,
                                                501
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "",
                                                    "range": [
                                                        499,
                                                        500
                                                    ],
                                                    "children": [],
                                                    "content": ".debug"
                                                }
                                            ],
                                            "content": "):\nlogger.debug("
                                        }
                                    ],
                                    "content": "):\nlogger.debug("
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "",
                                    "range": [
                                        503,
                                        509
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "model",
                                            "range": [
                                                504,
                                                509
                                            ],
                                            "children": [
                                                {
                                                    "type": "SpreadElement",
                                                    "name": "",
                                                    "range": [
                                                        506,
                                                        508
                                                    ],
                                                    "children": [],
                                                    "content": "return model("
                                                }
                                            ],
                                            "content": ")\nreturn model(*"
                                        }
                                    ],
                                    "content": "\"Deserializing {model.__qualname__} from data: {data}\")\nreturn model(*"
                                }
                            ],
                            "content": "dict):\nlogger.debug(f \"Deserializing {model.__qualname__} from data: {data}\")\nreturn model(**"
                        }
                    ],
                    "content": "):\ndef custom_dict_to_class(qualname,data:dict):\nlogger.debug(f \"Deserializing {model.__qualname__} from data: {data}\")\nreturn model(**data)\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        512,
                        513
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "custom_dict_to_class",
                            "range": [
                                513,
                                513
                            ],
                            "children": [],
                            "content": "\n"
                        }
                    ],
                    "content": ")\n"
                }
            ],
            "content": "\n\n\ndef _make_custom_deserializer(model:Type[BaseModel]):\ndef custom_dict_to_class(qualname,data:dict):\nlogger.debug(f \"Deserializing {model.__qualname__} from data: {data}\")\nreturn model(**data)\n\n"
        },
        {
            "type": "ClassDecl",
            "name": "AppService",
            "range": [
                516,
                522
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "AppProcess ABC",
                    "range": [
                        518,
                        522
                    ],
                    "children": [],
                    "content": "\n\nclass AppService("
                }
            ],
            "content": "custom_dict_to_class\n\n\nclass AppService("
        },
        {
            "type": "VariableDecl",
            "name": "shared_event_loop",
            "range": [
                525,
                529
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "asyncio AbstractEventLoop",
                    "range": [
                        527,
                        529
                    ],
                    "children": [],
                    "content": ":\nshared_event_loop"
                }
            ],
            "content": "ABC):\nshared_event_loop"
        },
        {
            "type": "VariableDecl",
            "name": "use_db",
            "range": [
                531,
                535
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "bool",
                    "range": [
                        533,
                        535
                    ],
                    "children": [],
                    "content": "AbstractEventLoop\nuse_db"
                },
                {
                    "type": "Assignment",
                    "name": "False",
                    "range": [
                        535,
                        535
                    ],
                    "children": [],
                    "content": "use_db"
                }
            ],
            "content": "asyncio.AbstractEventLoop\nuse_db"
        },
        {
            "type": "VariableDecl",
            "name": "use_redis",
            "range": [
                537,
                541
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "bool",
                    "range": [
                        539,
                        541
                    ],
                    "children": [],
                    "content": "False\nuse_redis"
                },
                {
                    "type": "Assignment",
                    "name": "False",
                    "range": [
                        541,
                        541
                    ],
                    "children": [],
                    "content": "use_redis"
                }
            ],
            "content": "bool=False\nuse_redis"
        },
        {
            "type": "VariableDecl",
            "name": "use_supabase",
            "range": [
                543,
                547
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "bool",
                    "range": [
                        545,
                        547
                    ],
                    "children": [],
                    "content": "False\nuse_supabase"
                },
                {
                    "type": "Assignment",
                    "name": "False",
                    "range": [
                        547,
                        547
                    ],
                    "children": [],
                    "content": "use_supabase"
                }
            ],
            "content": "bool=False\nuse_supabase"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                550,
                562
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        553,
                        553
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Assignment",
                    "name": "self uri None",
                    "range": [
                        557,
                        561
                    ],
                    "children": [],
                    "content": "self):\nself"
                }
            ],
            "content": "=False\n\ndef __init__(self):\nself."
        },
        {
            "type": "FunctionDecl",
            "name": "get_port",
            "range": [
                570,
                580
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "cls",
                    "range": [
                        573,
                        573
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        577,
                        577
                    ],
                    "children": [],
                    "content": "cls"
                },
                {
                    "type": "Block",
                    "name": "pass",
                    "range": [
                        580,
                        580
                    ],
                    "children": [],
                    "content": ">"
                }
            ],
            "content": "\n@abstractmethod\ndef get_port(cls)->"
        },
        {
            "type": "FunctionDecl",
            "name": "get_host",
            "range": [
                586,
                610
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "cls",
                    "range": [
                        589,
                        589
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "ReturnType",
                    "name": "str",
                    "range": [
                        593,
                        593
                    ],
                    "children": [],
                    "content": "cls"
                },
                {
                    "type": "Block",
                    "name": "return os environ get f cls service_name upper HOST config pyro_host",
                    "range": [
                        596,
                        610
                    ],
                    "children": [],
                    "content": ">str:\nreturn os.environ.get(f \"{cls.service_name.upper()}_HOST\",config"
                }
            ],
            "content": "\n@classmethod\ndef get_host(cls)->str:\nreturn os.environ.get(f \"{cls.service_name.upper()}_HOST\",config"
        },
        {
            "type": "FunctionDecl",
            "name": "run_service",
            "range": [
                612,
                632
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        615,
                        615
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        619,
                        619
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "Block",
                    "name": "while True time sleep 10",
                    "range": [
                        622,
                        632
                    ],
                    "children": [],
                    "content": ">None:\nwhile True:\ntime.sleep"
                }
            ],
            "content": "pyro_host)\n\ndef run_service(self)->None:\nwhile True:\ntime.sleep"
        },
        {
            "type": "FunctionDecl",
            "name": "__run_async",
            "range": [
                634,
                663
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        637,
                        637
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Parameter",
                    "name": "coro",
                    "range": [
                        639,
                        639
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Coroutine Any Any T",
                            "range": [
                                641,
                                648
                            ],
                            "children": [],
                            "content": "self,coro:Coroutine[Any,"
                        }
                    ],
                    "content": "__run_async"
                },
                {
                    "type": "Block",
                    "name": "return asyncio run_coroutine_threadsafe coro self shared_event_loop",
                    "range": [
                        652,
                        663
                    ],
                    "children": [],
                    "content": "]):\nreturn asyncio.run_coroutine_threadsafe(coro,self"
                }
            ],
            "content": "10)\n\ndef __run_async(self,coro:Coroutine[Any,Any,T]):\nreturn asyncio.run_coroutine_threadsafe(coro,self"
        },
        {
            "type": "FunctionDecl",
            "name": "run_and_wait",
            "range": [
                665,
                701
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        668,
                        668
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Parameter",
                    "name": "coro",
                    "range": [
                        670,
                        670
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Coroutine Any Any T",
                            "range": [
                                672,
                                679
                            ],
                            "children": [],
                            "content": "self,coro:Coroutine[Any,"
                        }
                    ],
                    "content": "run_and_wait"
                },
                {
                    "type": "ReturnType",
                    "name": "T",
                    "range": [
                        683,
                        683
                    ],
                    "children": [],
                    "content": "]"
                },
                {
                    "type": "Block",
                    "name": "future self __run_async coro return future result",
                    "range": [
                        686,
                        701
                    ],
                    "children": [],
                    "content": ">T:\nfuture=self.__run_async(coro)\nreturn future."
                }
            ],
            "content": "shared_event_loop)\n\ndef run_and_wait(self,coro:Coroutine[Any,Any,T])->T:\nfuture=self.__run_async(coro)\nreturn future."
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                703,
                786
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        706,
                        706
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Block",
                    "name": "self shared_event_loop asyncio get_event_loop if self use_db self shared_event_loop run_until_complete db connect if self use_redis redis connect if self use_supabase from supabase import create_client secrets Secrets self supabase create_client secrets supabase_url secrets supabase_service_role_key async_thread threading Thread target self __start_async_loop async_thread daemon True async_thread start daemon_thread threading Thread target self __start_pyro daemon_thread daemon True daemon_thread start self run_service",
                    "range": [
                        710,
                        786
                    ],
                    "children": [],
                    "content": "self):\nself.shared_event_loop=asyncio.get_event_loop()\nif self.use_db:\nself.shared_event_loop.run_until_complete(db.connect())\nif self.use_redis:\nredis.connect()\nif self.use_supabase:\nfrom supabase import create_client\n\nsecrets=Secrets()\nself.supabase=create_client(\nsecrets.supabase_url,secrets.supabase_service_role_key"
                }
            ],
            "content": "()\n\ndef run(self):\nself.shared_event_loop=asyncio.get_event_loop()\nif self.use_db:\nself.shared_event_loop.run_until_complete(db.connect())\nif self.use_redis:\nredis.connect()\nif self.use_supabase:\nfrom supabase import create_client\n\nsecrets=Secrets()\nself.supabase=create_client(\nsecrets.supabase_url,secrets.supabase_service_role_key"
        },
        {
            "type": "FunctionDecl",
            "name": "cleanup",
            "range": [
                876,
                928
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        879,
                        879
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Block",
                    "name": "if self use_db logger info f self __class__ __name__ ⏳ Disconnecting DB self run_and_wait db disconnect if self use_redis logger info f self __class__ __name__ ⏳ Disconnecting Redis redis disconnect",
                    "range": [
                        883,
                        928
                    ],
                    "children": [],
                    "content": "self):\nif self.use_db:\nlogger.info(f \"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")\nself.run_and_wait(db.disconnect())\nif self.use_redis:\nlogger.info(f \"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")\nredis.disconnect"
                }
            ],
            "content": "()\n\ndef cleanup(self):\nif self.use_db:\nlogger.info(f \"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")\nself.run_and_wait(db.disconnect())\nif self.use_redis:\nlogger.info(f \"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")\nredis.disconnect"
        },
        {
            "type": "FunctionDecl",
            "name": "__start_pyro",
            "range": [
                937,
                1034
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        940,
                        940
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Block",
                    "name": "maximum_connection_thread_count max Pyro5 config THREADPOOL_SIZE config num_node_workers config num_graph_workers Pyro5 config THREADPOOL_SIZE maximum_connection_thread_count daemon Pyro5 api Daemon host config pyro_host port self get_port self uri daemon register self objectId self service_name logger info f self service_name Connected to Pyro URI self uri daemon requestLoop",
                    "range": [
                        944,
                        1034
                    ],
                    "children": [],
                    "content": "self):\nmaximum_connection_thread_count=max(\nPyro5.config.THREADPOOL_SIZE,\nconfig.num_node_workers*config.num_graph_workers,\n)\n\nPyro5.config.THREADPOOL_SIZE=maximum_connection_thread_count#type:ignore\ndaemon=Pyro5.api.Daemon(host=config.pyro_host,port=self.get_port())\nself.uri=daemon.register(self,objectId=self.service_name)\nlogger.info(f \"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\ndaemon.requestLoop"
                }
            ],
            "content": ",\"Starting Pyro Service\")\ndef __start_pyro(self):\nmaximum_connection_thread_count=max(\nPyro5.config.THREADPOOL_SIZE,\nconfig.num_node_workers*config.num_graph_workers,\n)\n\nPyro5.config.THREADPOOL_SIZE=maximum_connection_thread_count#type:ignore\ndaemon=Pyro5.api.Daemon(host=config.pyro_host,port=self.get_port())\nself.uri=daemon.register(self,objectId=self.service_name)\nlogger.info(f \"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\ndaemon.requestLoop"
        },
        {
            "type": "FunctionDecl",
            "name": "__start_async_loop",
            "range": [
                1035,
                1050
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1038,
                        1038
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Block",
                    "name": "self shared_event_loop run_forever",
                    "range": [
                        1042,
                        1050
                    ],
                    "children": [],
                    "content": "self):\nself.shared_event_loop.run_forever"
                }
            ],
            "content": "()\n\ndef __start_async_loop(self):\nself.shared_event_loop.run_forever"
        },
        {
            "type": "TypeAliasDeclaration",
            "name": "AS",
            "range": [
                1076,
                1085
            ],
            "children": [
                {
                    "type": "TypeParameter",
                    "name": "TypeVar",
                    "range": [
                        1078,
                        1085
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"AS\"",
                            "range": [
                                1080,
                                1080
                            ],
                            "children": [],
                            "content": "AS"
                        },
                        {
                            "type": "Keyword",
                            "name": "bound",
                            "range": [
                                1082,
                                1082
                            ],
                            "children": [],
                            "content": "TypeVar"
                        },
                        {
                            "type": "Identifier",
                            "name": "AppService",
                            "range": [
                                1084,
                                1084
                            ],
                            "children": [],
                            "content": "\"AS\""
                        }
                    ],
                    "content": "\n\nAS=TypeVar(\"AS\","
                }
            ],
            "content": "#\n\n\nAS=TypeVar(\"AS\","
        },
        {
            "type": "ClassDecl",
            "name": "PyroClient",
            "range": [
                1089,
                1091
            ],
            "children": [],
            "content": ")\n\n"
        },
        {
            "type": "VariableDecl",
            "name": "proxy",
            "range": [
                1093,
                1099
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "Pyro5.api.Proxy",
                    "range": [
                        1095,
                        1099
                    ],
                    "children": [],
                    "content": ":\nproxy:Pyro5"
                }
            ],
            "content": "class PyroClient:\nproxy:Pyro5"
        },
        {
            "type": "FunctionDecl",
            "name": "close_service_client",
            "range": [
                1103,
                1142
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        1105,
                        1109
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "client",
                            "range": [
                                1106,
                                1108
                            ],
                            "children": [],
                            "content": "\ndef close_service_client"
                        }
                    ],
                    "content": "\n\ndef close_service_client("
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        1110,
                        1112
                    ],
                    "children": [],
                    "content": "client:AppService"
                },
                {
                    "type": "Block",
                    "name": "block",
                    "range": [
                        1114,
                        1142
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                1115,
                                1131
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        1116,
                                        1121
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "isinstance",
                                            "range": [
                                                1116,
                                                1121
                                            ],
                                            "children": [
                                                {
                                                    "type": "Arguments",
                                                    "name": "arguments",
                                                    "range": [
                                                        1117,
                                                        1121
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "client",
                                                            "range": [
                                                                1118,
                                                                1118
                                                            ],
                                                            "children": [],
                                                            "content": "\n"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "PyroClient",
                                                            "range": [
                                                                1120,
                                                                1120
                                                            ],
                                                            "children": [],
                                                            "content": "isinstance"
                                                        }
                                                    ],
                                                    "content": ":\nif isinstance("
                                                }
                                            ],
                                            "content": "None:\nif isinstance("
                                        }
                                    ],
                                    "content": "None:\nif isinstance("
                                },
                                {
                                    "type": "Block",
                                    "name": "block",
                                    "range": [
                                        1123,
                                        1131
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "expression_statement",
                                            "range": [
                                                1124,
                                                1130
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "_pyroRelease",
                                                    "range": [
                                                        1128,
                                                        1130
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "proxy",
                                                            "range": [
                                                                1125,
                                                                1127
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "client",
                                                                    "range": [
                                                                        1124,
                                                                        1124
                                                                    ],
                                                                    "children": [],
                                                                    "content": "PyroClient"
                                                                }
                                                            ],
                                                            "content": "):\n"
                                                        }
                                                    ],
                                                    "content": "client.proxy"
                                                }
                                            ],
                                            "content": "PyroClient):\nclient.proxy"
                                        }
                                    ],
                                    "content": ",PyroClient):\nclient.proxy."
                                }
                            ],
                            "content": ">None:\nif isinstance(client,PyroClient):\nclient.proxy."
                        },
                        {
                            "type": "ElseStatement",
                            "name": "else_statement",
                            "range": [
                                1132,
                                1141
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "block",
                                    "range": [
                                        1134,
                                        1141
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise_statement",
                                            "range": [
                                                1135,
                                                1140
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "RuntimeError",
                                                    "range": [
                                                        1136,
                                                        1140
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Arguments",
                                                            "name": "arguments",
                                                            "range": [
                                                                1137,
                                                                1140
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "error_message",
                                                                    "range": [
                                                                        1139,
                                                                        1139
                                                                    ],
                                                                    "children": [],
                                                                    "content": "raise"
                                                                }
                                                            ],
                                                            "content": ":\nraise RuntimeError"
                                                        }
                                                    ],
                                                    "content": "else:\nraise RuntimeError"
                                                }
                                            ],
                                            "content": "\nelse:\nraise RuntimeError"
                                        }
                                    ],
                                    "content": ")\nelse:\nraise RuntimeError("
                                }
                            ],
                            "content": "_pyroRelease()\nelse:\nraise RuntimeError("
                        }
                    ],
                    "content": "->None:\nif isinstance(client,PyroClient):\nclient.proxy._pyroRelease()\nelse:\nraise RuntimeError(f"
                }
            ],
            "content": "Proxy\n\n\ndef close_service_client(client:AppService)->None:\nif isinstance(client,PyroClient):\nclient.proxy._pyroRelease()\nelse:\nraise RuntimeError(f"
        },
        {
            "type": "FunctionDecl",
            "name": "get_service_client",
            "range": [
                1143,
                1301
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "service_type",
                    "range": [
                        1146,
                        1151
                    ],
                    "children": [],
                    "content": "\n\ndef get_service_client(service_type"
                },
                {
                    "type": "ReturnType",
                    "name": "AS",
                    "range": [
                        1153,
                        1155
                    ],
                    "children": [],
                    "content": "Type[AS"
                },
                {
                    "type": "Assignment",
                    "name": "service_name",
                    "range": [
                        1158,
                        1162
                    ],
                    "children": [],
                    "content": "->AS:\n"
                },
                {
                    "type": "ClassDecl",
                    "name": "DynamicClient",
                    "range": [
                        1165,
                        1290
                    ],
                    "children": [
                        {
                            "type": "Inheritance",
                            "name": "PyroClient",
                            "range": [
                                1167,
                                1169
                            ],
                            "children": [],
                            "content": "service_name\n\n"
                        },
                        {
                            "type": "Decorator",
                            "name": "conn_retry",
                            "range": [
                                1172,
                                1179
                            ],
                            "children": [],
                            "content": "(PyroClient):\n@conn_retry("
                        },
                        {
                            "type": "MethodDecl",
                            "name": "__init__",
                            "range": [
                                1181,
                                1254
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "self",
                                    "range": [
                                        1184,
                                        1185
                                    ],
                                    "children": [],
                                    "content": ")\n"
                                },
                                {
                                    "type": "Assignment",
                                    "name": "host",
                                    "range": [
                                        1188,
                                        1200
                                    ],
                                    "children": [],
                                    "content": "(self):\nhost=os.environ.get("
                                },
                                {
                                    "type": "Assignment",
                                    "name": "uri",
                                    "range": [
                                        1202,
                                        1205
                                    ],
                                    "children": [],
                                    "content": "\"{service_name.upper()}_HOST\",pyro_host)"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "",
                                    "range": [
                                        1207,
                                        1213
                                    ],
                                    "children": [],
                                    "content": "uri=f \"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\nlogger."
                                },
                                {
                                    "type": "Assignment",
                                    "name": "self.proxy",
                                    "range": [
                                        1215,
                                        1226
                                    ],
                                    "children": [],
                                    "content": "(f \"Connecting to service [{service_name}]. URI = {uri}\")\nself.proxy=Pyro5.api"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "",
                                    "range": [
                                        1239,
                                        1246
                                    ],
                                    "children": [],
                                    "content": "the connection is established\nself.proxy"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "",
                                    "range": [
                                        1247,
                                        1253
                                    ],
                                    "children": [],
                                    "content": "._pyroBind()\nlogger."
                                }
                            ],
                            "content": ",f \"Connecting to [{service_name}]\")\ndef __init__(self):\nhost=os.environ.get(f \"{service_name.upper()}_HOST\",pyro_host)\nuri=f \"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\nlogger.debug(f \"Connecting to service [{service_name}]. URI = {uri}\")\nself.proxy=Pyro5.api.Proxy(uri)\n#Attempt to bind to ensure the connection is established\nself.proxy._pyroBind()\nlogger.debug"
                        },
                        {
                            "type": "MethodDecl",
                            "name": "__getattr__",
                            "range": [
                                1256,
                                1290
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "self",
                                    "range": [
                                        1259,
                                        1260
                                    ],
                                    "children": [],
                                    "content": "\n\n"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "name",
                                    "range": [
                                        1261,
                                        1264
                                    ],
                                    "children": [],
                                    "content": "def __getattr__(self"
                                },
                                {
                                    "type": "ReturnType",
                                    "name": "Callable",
                                    "range": [
                                        1265,
                                        1274
                                    ],
                                    "children": [],
                                    "content": ",name:str)->Callable[."
                                },
                                {
                                    "type": "Assignment",
                                    "name": "res",
                                    "range": [
                                        1277,
                                        1286
                                    ],
                                    "children": [],
                                    "content": ",Any]:\nres=getattr(self"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "",
                                    "range": [
                                        1288,
                                        1289
                                    ],
                                    "children": [],
                                    "content": "proxy,"
                                }
                            ],
                            "content": "f \"Successfully connected to service [{service_name}]\")\n\ndef __getattr__(self,name:str)->Callable[...,Any]:\nres=getattr(self.proxy,name"
                        }
                    ],
                    "content": "service_type.service_name\n\nclass DynamicClient(PyroClient):\n@conn_retry(\"Pyro\",f \"Connecting to [{service_name}]\")\ndef __init__(self):\nhost=os.environ.get(f \"{service_name.upper()}_HOST\",pyro_host)\nuri=f \"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\nlogger.debug(f \"Connecting to service [{service_name}]. URI = {uri}\")\nself.proxy=Pyro5.api.Proxy(uri)\n#Attempt to bind to ensure the connection is established\nself.proxy._pyroBind()\nlogger.debug(f \"Successfully connected to service [{service_name}]\")\n\ndef __getattr__(self,name:str)->Callable[...,Any]:\nres=getattr(self.proxy,name"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        1292,
                        1300
                    ],
                    "children": [],
                    "content": "\nreturn res\n\nreturn cast(AS"
                }
            ],
            "content": "\"Client {client.__class__} is not a Pyro client.\")\n\n\ndef get_service_client(service_type:Type[AS])->AS:\nservice_name=service_type.service_name\n\nclass DynamicClient(PyroClient):\n@conn_retry(\"Pyro\",f \"Connecting to [{service_name}]\")\ndef __init__(self):\nhost=os.environ.get(f \"{service_name.upper()}_HOST\",pyro_host)\nuri=f \"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\nlogger.debug(f \"Connecting to service [{service_name}]. URI = {uri}\")\nself.proxy=Pyro5.api.Proxy(uri)\n#Attempt to bind to ensure the connection is established\nself.proxy._pyroBind()\nlogger.debug(f \"Successfully connected to service [{service_name}]\")\n\ndef __getattr__(self,name:str)->Callable[...,Any]:\nres=getattr(self.proxy,name)\nreturn res\n\nreturn cast(AS,"
        },
        {
            "type": "VariableDeclaration",
            "name": "builtin_types",
            "range": [
                1304,
                1320
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        1305,
                        1320
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "",
                            "range": [
                                1306,
                                1320
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "",
                                    "range": [
                                        1307,
                                        1315
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "vars",
                                            "range": [
                                                1308,
                                                1308
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "",
                                            "range": [
                                                1309,
                                                1315
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "builtins",
                                                    "range": [
                                                        1310,
                                                        1310
                                                    ],
                                                    "children": [],
                                                    "content": "="
                                                }
                                            ],
                                            "content": "builtin_types=[*vars(builtins"
                                        }
                                    ],
                                    "content": "\n\nbuiltin_types=[*vars(builtins"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "NoneType",
                                    "range": [
                                        1317,
                                        1317
                                    ],
                                    "children": [],
                                    "content": "."
                                },
                                {
                                    "type": "Identifier",
                                    "name": "Enum",
                                    "range": [
                                        1319,
                                        1319
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "\n\n\nbuiltin_types=[*vars(builtins).values()"
                        }
                    ],
                    "content": ")\n\n\nbuiltin_types=[*vars(builtins).values()"
                }
            ],
            "content": "))\n\n\nbuiltin_types=[*vars(builtins).values()"
        },
        {
            "type": "FunctionDecl",
            "name": "_pydantic_models_from_type_annotation",
            "range": [
                1324,
                1594
            ],
            "children": [
                {
                    "type": "Arguments",
                    "name": "",
                    "range": [
                        1326,
                        1328
                    ],
                    "children": [
                        {
                            "type": "Arg",
                            "name": "annotation",
                            "range": [
                                1327,
                                1327
                            ],
                            "children": [],
                            "content": "\n"
                        }
                    ],
                    "content": "\n\n\n"
                },
                {
                    "type": "ReturnType",
                    "name": "",
                    "range": [
                        1329,
                        1337
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "Iterator",
                            "range": [
                                1331,
                                1331
                            ],
                            "children": [],
                            "content": "("
                        },
                        {
                            "type": "Type",
                            "name": "type",
                            "range": [
                                1333,
                                1333
                            ],
                            "children": [],
                            "content": ")"
                        },
                        {
                            "type": "Type",
                            "name": "BaseModel",
                            "range": [
                                1335,
                                1335
                            ],
                            "children": [],
                            "content": ">"
                        }
                    ],
                    "content": "def _pydantic_models_from_type_annotation(annotation)->Iterator["
                },
                {
                    "type": "Comment",
                    "name": "",
                    "range": [
                        1340,
                        1344
                    ],
                    "children": [],
                    "content": "BaseModel]]:\n"
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        1345,
                        1360
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                1346,
                                1354
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "origin",
                                    "range": [
                                        1347,
                                        1353
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_origin",
                                            "range": [
                                                1350,
                                                1353
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "annotation",
                                                    "range": [
                                                        1352,
                                                        1352
                                                    ],
                                                    "children": [],
                                                    "content": "origin"
                                                }
                                            ],
                                            "content": "if(origin:"
                                        }
                                    ],
                                    "content": "Annotated parameters\nif(origin:"
                                },
                                {
                                    "type": "BinaryExpression",
                                    "name": "",
                                    "range": [
                                        1355,
                                        1358
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "origin",
                                            "range": [
                                                1356,
                                                1356
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Type",
                                            "name": "Annotated",
                                            "range": [
                                                1358,
                                                1358
                                            ],
                                            "children": [],
                                            "content": ")"
                                        }
                                    ],
                                    "content": "get_origin(annotation)"
                                }
                            ],
                            "content": "Peel Annotated parameters\nif(origin:="
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "annotation",
                            "range": [
                                1361,
                                1369
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "get_args",
                                    "range": [
                                        1363,
                                        1366
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "annotation",
                                            "range": [
                                                1365,
                                                1365
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "Annotated:\nannotation"
                                },
                                {
                                    "type": "Index",
                                    "name": "",
                                    "range": [
                                        1367,
                                        1369
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "0",
                                            "range": [
                                                1368,
                                                1368
                                            ],
                                            "children": [],
                                            "content": "get_args"
                                        }
                                    ],
                                    "content": "=get_args("
                                }
                            ],
                            "content": "origin is Annotated:\nannotation=get_args("
                        }
                    ],
                    "content": "#Peel Annotated parameters\nif(origin:=get_origin(annotation))and"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "origin",
                    "range": [
                        1372,
                        1378
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "get_origin",
                            "range": [
                                1374,
                                1377
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "annotation",
                                    "range": [
                                        1376,
                                        1376
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "]\n\norigin"
                        }
                    ],
                    "content": "[0]\n\norigin="
                },
                {
                    "type": "AssignmentExpression",
                    "name": "args",
                    "range": [
                        1379,
                        1385
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "get_args",
                            "range": [
                                1381,
                                1384
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "annotation",
                                    "range": [
                                        1383,
                                        1383
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "annotation)\nargs"
                        }
                    ],
                    "content": "get_origin(annotation)\nargs="
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        1387,
                        1424
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                1388,
                                1422
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "origin",
                                    "range": [
                                        1388,
                                        1388
                                    ],
                                    "children": [],
                                    "content": "annotation"
                                },
                                {
                                    "type": "In",
                                    "name": "",
                                    "range": [
                                        1389,
                                        1422
                                    ],
                                    "children": [
                                        {
                                            "type": "Tuple",
                                            "name": "",
                                            "range": [
                                                1390,
                                                1422
                                            ],
                                            "children": [
                                                {
                                                    "type": "Type",
                                                    "name": "Union",
                                                    "range": [
                                                        1392,
                                                        1392
                                                    ],
                                                    "children": [],
                                                    "content": "if"
                                                },
                                                {
                                                    "type": "Type",
                                                    "name": "UnionType",
                                                    "range": [
                                                        1395,
                                                        1395
                                                    ],
                                                    "children": [],
                                                    "content": "("
                                                },
                                                {
                                                    "type": "Type",
                                                    "name": "list",
                                                    "range": [
                                                        1398,
                                                        1398
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Type",
                                                    "name": "List",
                                                    "range": [
                                                        1401,
                                                        1401
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Type",
                                                    "name": "tuple",
                                                    "range": [
                                                        1404,
                                                        1404
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Type",
                                                    "name": "Tuple",
                                                    "range": [
                                                        1407,
                                                        1407
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Type",
                                                    "name": "set",
                                                    "range": [
                                                        1410,
                                                        1410
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Type",
                                                    "name": "Set",
                                                    "range": [
                                                        1413,
                                                        1413
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Type",
                                                    "name": "frozenset",
                                                    "range": [
                                                        1416,
                                                        1416
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Type",
                                                    "name": "FrozenSet",
                                                    "range": [
                                                        1419,
                                                        1419
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                }
                                            ],
                                            "content": "\n\nif origin in(\nUnion,\nUnionType,\nlist,\nList,\ntuple,\nTuple,\nset,\nSet,\nfrozenset,"
                                        }
                                    ],
                                    "content": ")\n\nif origin in(\nUnion,\nUnionType,\nlist,\nList,\ntuple,\nTuple,\nset,\nSet,\nfrozenset,"
                                }
                            ],
                            "content": "annotation)\n\nif origin in(\nUnion,\nUnionType,\nlist,\nList,\ntuple,\nTuple,\nset,\nSet,\nfrozenset,"
                        },
                        {
                            "type": "ForStatement",
                            "name": "",
                            "range": [
                                1425,
                                1437
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "arg",
                                    "range": [
                                        1426,
                                        1426
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "In",
                                    "name": "",
                                    "range": [
                                        1427,
                                        1428
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "args",
                                            "range": [
                                                1428,
                                                1428
                                            ],
                                            "children": [],
                                            "content": ":"
                                        }
                                    ],
                                    "content": "):"
                                },
                                {
                                    "type": "YieldFrom",
                                    "name": "",
                                    "range": [
                                        1431,
                                        1437
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "_pydantic_models_from_type_annotation",
                                            "range": [
                                                1433,
                                                1436
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "arg",
                                                    "range": [
                                                        1435,
                                                        1435
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": "args:\nyield"
                                        }
                                    ],
                                    "content": "arg in args:\nyield from"
                                }
                            ],
                            "content": ",\n):\nfor arg in args:\nyield from"
                        }
                    ],
                    "content": "(annotation)\n\nif origin in(\nUnion,\nUnionType,\nlist,\nList,\ntuple,\nTuple,\nset,\nSet,\nfrozenset,\nFrozenSet"
                },
                {
                    "type": "ElifStatement",
                    "name": "",
                    "range": [
                        1438,
                        1467
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                1439,
                                1445
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "origin",
                                    "range": [
                                        1439,
                                        1439
                                    ],
                                    "children": [],
                                    "content": "("
                                },
                                {
                                    "type": "In",
                                    "name": "",
                                    "range": [
                                        1440,
                                        1445
                                    ],
                                    "children": [
                                        {
                                            "type": "Tuple",
                                            "name": "",
                                            "range": [
                                                1441,
                                                1445
                                            ],
                                            "children": [
                                                {
                                                    "type": "Type",
                                                    "name": "dict",
                                                    "range": [
                                                        1442,
                                                        1442
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "Type",
                                                    "name": "Dict",
                                                    "range": [
                                                        1444,
                                                        1444
                                                    ],
                                                    "children": [],
                                                    "content": "origin"
                                                }
                                            ],
                                            "content": ")\nelif origin in"
                                        }
                                    ],
                                    "content": "arg)\nelif origin in"
                                }
                            ],
                            "content": "(arg)\nelif origin in"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "",
                            "range": [
                                1448,
                                1453
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "key_type",
                                    "range": [
                                        1448,
                                        1448
                                    ],
                                    "children": [],
                                    "content": ","
                                },
                                {
                                    "type": "Identifier",
                                    "name": "value_type",
                                    "range": [
                                        1450,
                                        1450
                                    ],
                                    "children": [],
                                    "content": ")"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "args",
                                    "range": [
                                        1452,
                                        1452
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": ",Dict):\nkey_type"
                        },
                        {
                            "type": "YieldFrom",
                            "name": "",
                            "range": [
                                1454,
                                1460
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "_pydantic_models_from_type_annotation",
                                    "range": [
                                        1456,
                                        1459
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "key_type",
                                            "range": [
                                                1458,
                                                1458
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "=args\nyield"
                                }
                            ],
                            "content": ",value_type=args\nyield from"
                        },
                        {
                            "type": "YieldFrom",
                            "name": "",
                            "range": [
                                1461,
                                1467
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "_pydantic_models_from_type_annotation",
                                    "range": [
                                        1463,
                                        1466
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "value_type",
                                            "range": [
                                                1465,
                                                1465
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "key_type)\nyield"
                                }
                            ],
                            "content": "_pydantic_models_from_type_annotation(key_type)\nyield from"
                        }
                    ],
                    "content": "_pydantic_models_from_type_annotation(arg)\nelif origin in(dict,Dict):\nkey_type,value_type=args\nyield from _pydantic_models_from_type_annotation(key_type)\nyield from"
                },
                {
                    "type": "ElifStatement",
                    "name": "",
                    "range": [
                        1468,
                        1503
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                1469,
                                1475
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "origin",
                                    "range": [
                                        1469,
                                        1469
                                    ],
                                    "children": [],
                                    "content": "("
                                },
                                {
                                    "type": "In",
                                    "name": "",
                                    "range": [
                                        1470,
                                        1475
                                    ],
                                    "children": [
                                        {
                                            "type": "Tuple",
                                            "name": "",
                                            "range": [
                                                1471,
                                                1475
                                            ],
                                            "children": [
                                                {
                                                    "type": "Type",
                                                    "name": "Awaitable",
                                                    "range": [
                                                        1472,
                                                        1472
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "Type",
                                                    "name": "Coroutine",
                                                    "range": [
                                                        1474,
                                                        1474
                                                    ],
                                                    "children": [],
                                                    "content": "origin"
                                                }
                                            ],
                                            "content": ")\nelif origin in"
                                        }
                                    ],
                                    "content": "value_type)\nelif origin in"
                                }
                            ],
                            "content": "(value_type)\nelif origin in"
                        },
                        {
                            "type": "Comment",
                            "name": "",
                            "range": [
                                1478,
                                1488
                            ],
                            "children": [],
                            "content": ",Coroutine):\n#For coroutines and awaitables,"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "return_type",
                            "range": [
                                1489,
                                1495
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "args",
                                    "range": [
                                        1491,
                                        1491
                                    ],
                                    "children": [],
                                    "content": "return"
                                },
                                {
                                    "type": "Index",
                                    "name": "",
                                    "range": [
                                        1492,
                                        1495
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "-1",
                                            "range": [
                                                1493,
                                                1494
                                            ],
                                            "children": [],
                                            "content": "\nreturn_type"
                                        }
                                    ],
                                    "content": "type\nreturn_type="
                                }
                            ],
                            "content": "check the return type\nreturn_type="
                        },
                        {
                            "type": "YieldFrom",
                            "name": "",
                            "range": [
                                1497,
                                1503
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "_pydantic_models_from_type_annotation",
                                    "range": [
                                        1499,
                                        1502
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "return_type",
                                            "range": [
                                                1501,
                                                1501
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "1]\nyield"
                                }
                            ],
                            "content": "[-1]\nyield from"
                        }
                    ],
                    "content": "_pydantic_models_from_type_annotation(value_type)\nelif origin in(Awaitable,Coroutine):\n#For coroutines and awaitables,check the return type\nreturn_type=args[-1]\nyield from"
                },
                {
                    "type": "ElseStatement",
                    "name": "",
                    "range": [
                        1504,
                        1594
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "annotype",
                            "range": [
                                1507,
                                1516
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "annotation",
                                    "range": [
                                        1509,
                                        1509
                                    ],
                                    "children": [],
                                    "content": "else"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        1510,
                                        1515
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "",
                                            "range": [
                                                1511,
                                                1513
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "origin",
                                                    "range": [
                                                        1511,
                                                        1511
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "",
                                                    "range": [
                                                        1512,
                                                        1513
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Type",
                                                            "name": "None",
                                                            "range": [
                                                                1513,
                                                                1513
                                                            ],
                                                            "children": [],
                                                            "content": "="
                                                        }
                                                    ],
                                                    "content": "annotype="
                                                }
                                            ],
                                            "content": "\nannotype="
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "origin",
                                            "range": [
                                                1515,
                                                1515
                                            ],
                                            "children": [],
                                            "content": "if"
                                        }
                                    ],
                                    "content": ":\nannotype=annotation if"
                                }
                            ],
                            "content": ")\nelse:\nannotype=annotation if origin"
                        },
                        {
                            "type": "Comment",
                            "name": "",
                            "range": [
                                1518,
                                1524
                            ],
                            "children": [],
                            "content": "None else origin\n\n#Exclude"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                1525,
                                1558
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        1526,
                                        1557
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "annotype",
                                            "range": [
                                                1528,
                                                1528
                                            ],
                                            "children": [],
                                            "content": "aliases"
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "",
                                            "range": [
                                                1529,
                                                1531
                                            ],
                                            "children": [
                                                {
                                                    "type": "Type",
                                                    "name": "None",
                                                    "range": [
                                                        1531,
                                                        1531
                                                    ],
                                                    "children": [],
                                                    "content": "("
                                                }
                                            ],
                                            "content": "\nif("
                                        },
                                        {
                                            "type": "LogicalExpression",
                                            "name": "And",
                                            "range": [
                                                1533,
                                                1556
                                            ],
                                            "children": [
                                                {
                                                    "type": "UnaryExpression",
                                                    "name": "Not",
                                                    "range": [
                                                        1534,
                                                        1535
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "hasattr",
                                                            "range": [
                                                                1535,
                                                                1547
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "typing",
                                                                    "range": [
                                                                        1537,
                                                                        1537
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\n"
                                                                },
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "getattr",
                                                                    "range": [
                                                                        1539,
                                                                        1546
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "annotype",
                                                                            "range": [
                                                                                1541,
                                                                                1541
                                                                            ],
                                                                            "children": [],
                                                                            "content": "("
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "__name__",
                                                                            "range": [
                                                                                1543,
                                                                                1543
                                                                            ],
                                                                            "children": [],
                                                                            "content": ","
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "",
                                                                            "range": [
                                                                                1545,
                                                                                1545
                                                                            ],
                                                                            "children": [],
                                                                            "content": "("
                                                                        }
                                                                    ],
                                                                    "content": "not hasattr(typing,getattr(annotype"
                                                                }
                                                            ],
                                                            "content": "not None\nand not hasattr(typing,getattr(annotype,"
                                                        }
                                                    ],
                                                    "content": "is not"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "isinstance",
                                                    "range": [
                                                        1550,
                                                        1555
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "annotype",
                                                            "range": [
                                                                1552,
                                                                1552
                                                            ],
                                                            "children": [],
                                                            "content": ")"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "type",
                                                            "range": [
                                                                1554,
                                                                1554
                                                            ],
                                                            "children": [],
                                                            "content": "and"
                                                        }
                                                    ],
                                                    "content": "\"\"))\nand isinstance"
                                                }
                                            ],
                                            "content": "annotype is not None\nand not hasattr(typing,getattr(annotype,\"__name__\",\"\"))\nand isinstance("
                                        }
                                    ],
                                    "content": "types and aliases\nif(\nannotype is not None\nand not hasattr(typing,getattr(annotype,\"__name__\",\"\"))\nand isinstance(annotype"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        1560,
                                        1571
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "",
                                            "range": [
                                                1561,
                                                1566
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "issubclass",
                                                    "range": [
                                                        1561,
                                                        1566
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "annotype",
                                                            "range": [
                                                                1563,
                                                                1563
                                                            ],
                                                            "children": [],
                                                            "content": ":"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "BaseModel",
                                                            "range": [
                                                                1565,
                                                                1565
                                                            ],
                                                            "children": [],
                                                            "content": "if"
                                                        }
                                                    ],
                                                    "content": "\n):\nif issubclass"
                                                }
                                            ],
                                            "content": "\n):\nif issubclass"
                                        },
                                        {
                                            "type": "Yield",
                                            "name": "",
                                            "range": [
                                                1569,
                                                1571
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "annotype",
                                                    "range": [
                                                        1570,
                                                        1570
                                                    ],
                                                    "children": [],
                                                    "content": "BaseModel"
                                                }
                                            ],
                                            "content": ",BaseModel)"
                                        }
                                    ],
                                    "content": ")\n):\nif issubclass(annotype,BaseModel)"
                                },
                                {
                                    "type": "ElifStatement",
                                    "name": "",
                                    "range": [
                                        1572,
                                        1593
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "",
                                            "range": [
                                                1573,
                                                1584
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "annotype",
                                                    "range": [
                                                        1573,
                                                        1573
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "NotIn",
                                                    "range": [
                                                        1574,
                                                        1576
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "builtin_types",
                                                            "range": [
                                                                1576,
                                                                1576
                                                            ],
                                                            "children": [],
                                                            "content": "\n"
                                                        }
                                                    ],
                                                    "content": "yield annotype\n"
                                                },
                                                {
                                                    "type": "LogicalExpression",
                                                    "name": "And",
                                                    "range": [
                                                        1577,
                                                        1584
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "UnaryExpression",
                                                            "name": "Not",
                                                            "range": [
                                                                1578,
                                                                1579
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "issubclass",
                                                                    "range": [
                                                                        1579,
                                                                        1584
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "annotype",
                                                                            "range": [
                                                                                1581,
                                                                                1581
                                                                            ],
                                                                            "children": [],
                                                                            "content": "builtin_types"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "Enum",
                                                                            "range": [
                                                                                1583,
                                                                                1583
                                                                            ],
                                                                            "children": [],
                                                                            "content": "not"
                                                                        }
                                                                    ],
                                                                    "content": "not in builtin_types and not issubclass"
                                                                }
                                                            ],
                                                            "content": "annotype not"
                                                        }
                                                    ],
                                                    "content": "elif annotype not in builtin_types and not issubclass"
                                                }
                                            ],
                                            "content": "\nyield annotype\nelif annotype not in builtin_types and not issubclass"
                                        },
                                        {
                                            "type": "Raise",
                                            "name": "",
                                            "range": [
                                                1587,
                                                1593
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "TypeError",
                                                    "range": [
                                                        1588,
                                                        1592
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "f",
                                                            "range": [
                                                                1590,
                                                                1590
                                                            ],
                                                            "children": [],
                                                            "content": ":"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "Unsupported type encountered: {annotype}",
                                                            "range": [
                                                                1591,
                                                                1591
                                                            ],
                                                            "children": [],
                                                            "content": "\n"
                                                        }
                                                    ],
                                                    "content": "Enum):\nraise"
                                                }
                                            ],
                                            "content": ",Enum):\nraise TypeError"
                                        }
                                    ],
                                    "content": ":\nyield annotype\nelif annotype not in builtin_types and not issubclass(annotype,Enum):\nraise TypeError"
                                }
                            ],
                            "content": "generic types and aliases\nif(\nannotype is not None\nand not hasattr(typing,getattr(annotype,\"__name__\",\"\"))\nand isinstance(annotype,"
                        }
                    ],
                    "content": "_pydantic_models_from_type_annotation(return_type)\nelse:\nannotype=annotation if origin is None else origin\n\n#Exclude generic types and aliases\nif(\nannotype is not None\nand not hasattr(typing,getattr(annotype,\"__name__\",\"\"))\nand isinstance(annotype,type)\n):\nif issubclass(annotype,BaseModel):\nyield annotype\nelif annotype not in builtin_types and not issubclass(annotype,Enum):\nraise TypeError("
                }
            ],
            "content": "Enum]\n\n\ndef _pydantic_models_from_type_annotation(annotation)->Iterator[type[BaseModel]]:\n#Peel Annotated parameters\nif(origin:=get_origin(annotation))and origin is Annotated:\nannotation=get_args(annotation)[0]\n\norigin=get_origin(annotation)\nargs=get_args(annotation)\n\nif origin in(\nUnion,\nUnionType,\nlist,\nList,\ntuple,\nTuple,\nset,\nSet,\nfrozenset,\nFrozenSet,\n):\nfor arg in args:\nyield from _pydantic_models_from_type_annotation(arg)\nelif origin in(dict,Dict):\nkey_type,value_type=args\nyield from _pydantic_models_from_type_annotation(key_type)\nyield from _pydantic_models_from_type_annotation(value_type)\nelif origin in(Awaitable,Coroutine):\n#For coroutines and awaitables,check the return type\nreturn_type=args[-1]\nyield from _pydantic_models_from_type_annotation(return_type)\nelse:\nannotype=annotation if origin is None else origin\n\n#Exclude generic types and aliases\nif(\nannotype is not None\nand not hasattr(typing,getattr(annotype,\"__name__\",\"\"))\nand isinstance(annotype,type)\n):\nif issubclass(annotype,BaseModel):\nyield annotype\nelif annotype not in builtin_types and not issubclass(annotype,Enum):\nraise TypeError("
        }
    ],
    "content": "import asyncio\nimport builtins\nimport logging\nimport os\nimport threading\nimport time\nimport typing\nfrom abc import ABC,abstractmethod\nfrom enum import Enum\nfrom types import NoneType,UnionType\nfrom typing import(\nAnnotated,\nAny,\nAwaitable,\nCallable,\nCoroutine,\nDict,\nFrozenSet,\nIterator,\nList,\nSet,\nTuple,\nType,\nTypeVar,\nUnion,\ncast,\nget_args,\nget_origin,\n)\n\nimport Pyro5.api\nfrom pydantic import BaseModel\nfrom Pyro5 import api as pyro\nfrom Pyro5 import config as pyro_config\n\nfrom backend.data import db,redis\nfrom backend.util.process import AppProcess\nfrom backend.util.retry import conn_retry\nfrom backend.util.settings import Config,Secrets\n\nlogger=logging.getLogger(__name__)\nT=TypeVar(\"T\")\nC=TypeVar(\"C\",bound=Callable)\n\nconfig=Config()\npyro_host=config.pyro_host\npyro_config.MAX_RETRIES=config.pyro_client_comm_retry#type:ignore\npyro_config.COMMTIMEOUT=config.pyro_client_comm_timeout#type:ignore\n\n\ndef expose(func:C)->C:\n\"\"\" \\n     Decorator to mark a method or class to be exposed for remote calls. \\n  \\n     ## ⚠️ Gotcha \\n     Aside from \" simple \" types, only Pydantic models are passed unscathed *if annotated*. \\n     Any other passed or returned class objects are converted to dictionaries by Pyro. \\n     \"\"\"\n\ndef wrapper(*args,**kwargs):\ntry:\nreturn func(*args,**kwargs)\nexcept Exception as e:\nmsg=f \"Error in {func.__name__}: {e.__str__()}\"\nlogger.exception(msg)\nraise\n\nregister_pydantic_serializers(func)\n\nreturn pyro.expose(wrapper)#type:ignore\n\n\ndef register_pydantic_serializers(func:Callable):\n\"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"\nfor name,annotation in func.__annotations__.items():\ntry:\npydantic_types=_pydantic_models_from_type_annotation(annotation)\nexcept Exception as e:\nraise TypeError(f \"Error while exposing {func.__name__}: {e.__str__()}\")\n\nfor model in pydantic_types:\nlogger.debug(\nf \"Registering Pyro (de)serializers for {func.__name__} annotation \"\nf \"'{name}': {model.__qualname__}\"\n)\npyro.register_class_to_dict(model,_make_custom_serializer(model))\npyro.register_dict_to_class(\nmodel.__qualname__,_make_custom_deserializer(model)\n)\n\n\ndef _make_custom_serializer(model:Type[BaseModel]):\ndef custom_class_to_dict(obj):\ndata={\n\"__class__\":obj.__class__.__qualname__,\n**obj.model_dump(),\n}\nlogger.debug(f \"Serializing {obj.__class__.__qualname__} with data: {data}\")\nreturn data\n\nreturn custom_class_to_dict\n\n\ndef _make_custom_deserializer(model:Type[BaseModel]):\ndef custom_dict_to_class(qualname,data:dict):\nlogger.debug(f \"Deserializing {model.__qualname__} from data: {data}\")\nreturn model(**data)\n\nreturn custom_dict_to_class\n\n\nclass AppService(AppProcess,ABC):\nshared_event_loop:asyncio.AbstractEventLoop\nuse_db:bool=False\nuse_redis:bool=False\nuse_supabase:bool=False\n\ndef __init__(self):\nself.uri=None\n\n@classmethod\n@abstractmethod\ndef get_port(cls)->int:\npass\n\n@classmethod\ndef get_host(cls)->str:\nreturn os.environ.get(f \"{cls.service_name.upper()}_HOST\",config.pyro_host)\n\ndef run_service(self)->None:\nwhile True:\ntime.sleep(10)\n\ndef __run_async(self,coro:Coroutine[Any,Any,T]):\nreturn asyncio.run_coroutine_threadsafe(coro,self.shared_event_loop)\n\ndef run_and_wait(self,coro:Coroutine[Any,Any,T])->T:\nfuture=self.__run_async(coro)\nreturn future.result()\n\ndef run(self):\nself.shared_event_loop=asyncio.get_event_loop()\nif self.use_db:\nself.shared_event_loop.run_until_complete(db.connect())\nif self.use_redis:\nredis.connect()\nif self.use_supabase:\nfrom supabase import create_client\n\nsecrets=Secrets()\nself.supabase=create_client(\nsecrets.supabase_url,secrets.supabase_service_role_key\n)\n\n#Initialize the async loop.\nasync_thread=threading.Thread(target=self.__start_async_loop)\nasync_thread.daemon=True\nasync_thread.start()\n\n#Initialize pyro service\ndaemon_thread=threading.Thread(target=self.__start_pyro)\ndaemon_thread.daemon=True\ndaemon_thread.start()\n\n#Run the main service(if it's not implemented,just sleep).\nself.run_service()\n\ndef cleanup(self):\nif self.use_db:\nlogger.info(f \"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")\nself.run_and_wait(db.disconnect())\nif self.use_redis:\nlogger.info(f \"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")\nredis.disconnect()\n\n@conn_retry(\"Pyro\",\"Starting Pyro Service\")\ndef __start_pyro(self):\nmaximum_connection_thread_count=max(\nPyro5.config.THREADPOOL_SIZE,\nconfig.num_node_workers*config.num_graph_workers,\n)\n\nPyro5.config.THREADPOOL_SIZE=maximum_connection_thread_count#type:ignore\ndaemon=Pyro5.api.Daemon(host=config.pyro_host,port=self.get_port())\nself.uri=daemon.register(self,objectId=self.service_name)\nlogger.info(f \"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\ndaemon.requestLoop()\n\ndef __start_async_loop(self):\nself.shared_event_loop.run_forever()\n\n\n#---------UTILITIES---------#\n\n\nAS=TypeVar(\"AS\",bound=AppService)\n\n\nclass PyroClient:\nproxy:Pyro5.api.Proxy\n\n\ndef close_service_client(client:AppService)->None:\nif isinstance(client,PyroClient):\nclient.proxy._pyroRelease()\nelse:\nraise RuntimeError(f \"Client {client.__class__} is not a Pyro client.\")\n\n\ndef get_service_client(service_type:Type[AS])->AS:\nservice_name=service_type.service_name\n\nclass DynamicClient(PyroClient):\n@conn_retry(\"Pyro\",f \"Connecting to [{service_name}]\")\ndef __init__(self):\nhost=os.environ.get(f \"{service_name.upper()}_HOST\",pyro_host)\nuri=f \"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\nlogger.debug(f \"Connecting to service [{service_name}]. URI = {uri}\")\nself.proxy=Pyro5.api.Proxy(uri)\n#Attempt to bind to ensure the connection is established\nself.proxy._pyroBind()\nlogger.debug(f \"Successfully connected to service [{service_name}]\")\n\ndef __getattr__(self,name:str)->Callable[...,Any]:\nres=getattr(self.proxy,name)\nreturn res\n\nreturn cast(AS,DynamicClient())\n\n\nbuiltin_types=[*vars(builtins).values(),NoneType,Enum]\n\n\ndef _pydantic_models_from_type_annotation(annotation)->Iterator[type[BaseModel]]:\n#Peel Annotated parameters\nif(origin:=get_origin(annotation))and origin is Annotated:\nannotation=get_args(annotation)[0]\n\norigin=get_origin(annotation)\nargs=get_args(annotation)\n\nif origin in(\nUnion,\nUnionType,\nlist,\nList,\ntuple,\nTuple,\nset,\nSet,\nfrozenset,\nFrozenSet,\n):\nfor arg in args:\nyield from _pydantic_models_from_type_annotation(arg)\nelif origin in(dict,Dict):\nkey_type,value_type=args\nyield from _pydantic_models_from_type_annotation(key_type)\nyield from _pydantic_models_from_type_annotation(value_type)\nelif origin in(Awaitable,Coroutine):\n#For coroutines and awaitables,check the return type\nreturn_type=args[-1]\nyield from _pydantic_models_from_type_annotation(return_type)\nelse:\nannotype=annotation if origin is None else origin\n\n#Exclude generic types and aliases\nif(\nannotype is not None\nand not hasattr(typing,getattr(annotype,\"__name__\",\"\"))\nand isinstance(annotype,type)\n):\nif issubclass(annotype,BaseModel):\nyield annotype\nelif annotype not in builtin_types and not issubclass(annotype,Enum):\nraise TypeError("
}