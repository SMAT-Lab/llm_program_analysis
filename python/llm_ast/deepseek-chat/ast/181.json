{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        595
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                2
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "logging",
                    "range": [
                        1,
                        1
                    ],
                    "children": [],
                    "content": "logging"
                }
            ],
            "content": "import logging\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                3,
                5
            ],
            "children": [
                {
                    "type": "ImportClause",
                    "name": "secrets",
                    "range": [
                        4,
                        4
                    ],
                    "children": [],
                    "content": "secrets"
                }
            ],
            "content": "import secrets\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                6,
                12
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "abc",
                    "range": [
                        7,
                        7
                    ],
                    "children": [],
                    "content": "abc"
                },
                {
                    "type": "ImportClause",
                    "name": "ABC",
                    "range": [
                        9,
                        9
                    ],
                    "children": [],
                    "content": "ABC"
                },
                {
                    "type": "ImportClause",
                    "name": "abstractmethod",
                    "range": [
                        11,
                        11
                    ],
                    "children": [],
                    "content": "abstractmethod"
                }
            ],
            "content": "from abc import ABC,abstractmethod\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                13,
                23
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "typing",
                    "range": [
                        14,
                        14
                    ],
                    "children": [],
                    "content": "typing"
                },
                {
                    "type": "ImportClause",
                    "name": "ClassVar",
                    "range": [
                        16,
                        16
                    ],
                    "children": [],
                    "content": "ClassVar"
                },
                {
                    "type": "ImportClause",
                    "name": "Generic",
                    "range": [
                        18,
                        18
                    ],
                    "children": [],
                    "content": "Generic"
                },
                {
                    "type": "ImportClause",
                    "name": "Optional",
                    "range": [
                        20,
                        20
                    ],
                    "children": [],
                    "content": "Optional"
                },
                {
                    "type": "ImportClause",
                    "name": "TypeVar",
                    "range": [
                        22,
                        22
                    ],
                    "children": [],
                    "content": "TypeVar"
                }
            ],
            "content": "from typing import ClassVar,Generic,Optional,TypeVar\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                24,
                28
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "uuid",
                    "range": [
                        25,
                        25
                    ],
                    "children": [],
                    "content": "uuid"
                },
                {
                    "type": "ImportClause",
                    "name": "uuid4",
                    "range": [
                        27,
                        27
                    ],
                    "children": [],
                    "content": "uuid4"
                }
            ],
            "content": "from uuid import uuid4\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                30,
                34
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "fastapi",
                    "range": [
                        31,
                        31
                    ],
                    "children": [],
                    "content": "fastapi"
                },
                {
                    "type": "ImportClause",
                    "name": "Request",
                    "range": [
                        33,
                        33
                    ],
                    "children": [],
                    "content": "Request"
                }
            ],
            "content": "from fastapi import Request\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                35,
                39
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "strenum",
                    "range": [
                        36,
                        36
                    ],
                    "children": [],
                    "content": "strenum"
                },
                {
                    "type": "ImportClause",
                    "name": "StrEnum",
                    "range": [
                        38,
                        38
                    ],
                    "children": [],
                    "content": "StrEnum"
                }
            ],
            "content": "from strenum import StrEnum\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                41,
                47
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "backend.data",
                    "range": [
                        42,
                        44
                    ],
                    "children": [],
                    "content": "backend.data"
                },
                {
                    "type": "ImportClause",
                    "name": "integrations",
                    "range": [
                        46,
                        46
                    ],
                    "children": [],
                    "content": "integrations"
                }
            ],
            "content": "from backend.data import integrations\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                48,
                56
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "backend.data.model",
                    "range": [
                        49,
                        53
                    ],
                    "children": [],
                    "content": "backend.data.model"
                },
                {
                    "type": "ImportClause",
                    "name": "Credentials",
                    "range": [
                        55,
                        55
                    ],
                    "children": [],
                    "content": "Credentials"
                }
            ],
            "content": "from backend.data.model import Credentials\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                57,
                65
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "backend.integrations.providers",
                    "range": [
                        58,
                        62
                    ],
                    "children": [],
                    "content": "backend.integrations.providers"
                },
                {
                    "type": "ImportClause",
                    "name": "ProviderName",
                    "range": [
                        64,
                        64
                    ],
                    "children": [],
                    "content": "ProviderName"
                }
            ],
            "content": "from backend.integrations.providers import ProviderName\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                66,
                76
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "backend.integrations.webhooks.utils",
                    "range": [
                        67,
                        73
                    ],
                    "children": [],
                    "content": "backend.integrations.webhooks.utils"
                },
                {
                    "type": "ImportClause",
                    "name": "webhook_ingress_url",
                    "range": [
                        75,
                        75
                    ],
                    "children": [],
                    "content": "webhook_ingress_url"
                }
            ],
            "content": "from backend.integrations.webhooks.utils import webhook_ingress_url\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                77,
                85
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "backend.util.exceptions",
                    "range": [
                        78,
                        82
                    ],
                    "children": [],
                    "content": "backend.util.exceptions"
                },
                {
                    "type": "ImportClause",
                    "name": "MissingConfigError",
                    "range": [
                        84,
                        84
                    ],
                    "children": [],
                    "content": "MissingConfigError"
                }
            ],
            "content": "from backend.util.exceptions import MissingConfigError\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                86,
                94
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "backend.util.settings",
                    "range": [
                        87,
                        91
                    ],
                    "children": [],
                    "content": "backend.util.settings"
                },
                {
                    "type": "ImportClause",
                    "name": "Config",
                    "range": [
                        93,
                        93
                    ],
                    "children": [],
                    "content": "Config"
                }
            ],
            "content": "from backend.util.settings import Config\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "logger",
            "range": [
                96,
                104
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        97,
                        103
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "logging.getLogger",
                            "range": [
                                98,
                                103
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "__name__",
                                    "range": [
                                        102,
                                        102
                                    ],
                                    "children": [],
                                    "content": "__name__"
                                }
                            ],
                            "content": "logging.getLogger(__name__)"
                        }
                    ],
                    "content": "=logging.getLogger(__name__)"
                }
            ],
            "content": "logger=logging.getLogger(__name__)\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "app_config",
            "range": [
                105,
                110
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        106,
                        109
                    ],
                    "children": [
                        {
                            "type": "NewExpression",
                            "name": "Config",
                            "range": [
                                107,
                                109
                            ],
                            "children": [],
                            "content": "Config()"
                        }
                    ],
                    "content": "=Config()"
                }
            ],
            "content": "app_config=Config()\n"
        },
        {
            "type": "TypeAliasDeclaration",
            "name": "WT",
            "range": [
                112,
                122
            ],
            "children": [
                {
                    "type": "TypeParameter",
                    "name": "WT",
                    "range": [
                        114,
                        121
                    ],
                    "children": [
                        {
                            "type": "TypeReference",
                            "name": "StrEnum",
                            "range": [
                                120,
                                120
                            ],
                            "children": [],
                            "content": "StrEnum"
                        }
                    ],
                    "content": "TypeVar(\"WT\",bound=StrEnum)"
                }
            ],
            "content": "WT=TypeVar(\"WT\",bound=StrEnum)\n"
        },
        {
            "type": "ClassDecl",
            "name": "BaseWebhooksManager",
            "range": [
                125,
                168
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "ABC, Generic[WT]",
                    "range": [
                        127,
                        134
                    ],
                    "children": [],
                    "content": "(ABC,Generic[WT])"
                }
            ],
            "content": "class BaseWebhooksManager(ABC,Generic[WT]):\n#--8<--[start:BaseWebhooksManager1]\nPROVIDER_NAME:ClassVar[ProviderName]\n#--8<--[end:BaseWebhooksManager1]"
        },
        {
            "type": "VariableDecl",
            "name": "PROVIDER_NAME",
            "range": [
                150,
                155
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "ClassVar[ProviderName]",
                    "range": [
                        151,
                        155
                    ],
                    "children": [],
                    "content": ":ClassVar[ProviderName]"
                }
            ],
            "content": "PROVIDER_NAME:ClassVar[ProviderName]"
        },
        {
            "type": "VariableDecl",
            "name": "WebhookType",
            "range": [
                171,
                173
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "WT",
                    "range": [
                        172,
                        173
                    ],
                    "children": [],
                    "content": ":WT"
                }
            ],
            "content": "WebhookType:WT"
        },
        {
            "type": "FunctionDecl",
            "name": "get_suitable_auto_webhook",
            "range": [
                176,
                280
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        181,
                        181
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        184,
                        186
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                185,
                                186
                            ],
                            "children": [],
                            "content": ":str"
                        }
                    ],
                    "content": "user_id:str"
                },
                {
                    "type": "Parameter",
                    "name": "credentials",
                    "range": [
                        189,
                        191
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Credentials",
                            "range": [
                                190,
                                191
                            ],
                            "children": [],
                            "content": ":Credentials"
                        }
                    ],
                    "content": "credentials:Credentials"
                },
                {
                    "type": "Parameter",
                    "name": "webhook_type",
                    "range": [
                        194,
                        196
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "WT",
                            "range": [
                                195,
                                196
                            ],
                            "children": [],
                            "content": ":WT"
                        }
                    ],
                    "content": "webhook_type:WT"
                },
                {
                    "type": "Parameter",
                    "name": "resource",
                    "range": [
                        199,
                        201
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                200,
                                201
                            ],
                            "children": [],
                            "content": ":str"
                        }
                    ],
                    "content": "resource:str"
                },
                {
                    "type": "Parameter",
                    "name": "events",
                    "range": [
                        204,
                        209
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "list[str]",
                            "range": [
                                205,
                                209
                            ],
                            "children": [],
                            "content": ":list[str]"
                        }
                    ],
                    "content": "events:list[str]"
                },
                {
                    "type": "ReturnType",
                    "name": "integrations.Webhook",
                    "range": [
                        213,
                        217
                    ],
                    "children": [],
                    "content": "->integrations.Webhook"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        219,
                        280
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                220,
                                233
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "not app_config.platform_base_url",
                                    "range": [
                                        221,
                                        224
                                    ],
                                    "children": [],
                                    "content": "not app_config.platform_base_url"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        226,
                                        233
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "MissingConfigError",
                                            "range": [
                                                227,
                                                233
                                            ],
                                            "children": [],
                                            "content": "raise MissingConfigError(\n\"PLATFORM_BASE_URL must be set to use Webhook functionality\"\n)"
                                        }
                                    ],
                                    "content": "\nraise MissingConfigError(\n\"PLATFORM_BASE_URL must be set to use Webhook functionality\"\n)"
                                }
                            ],
                            "content": "if not app_config.platform_base_url:\nraise MissingConfigError(\n\"PLATFORM_BASE_URL must be set to use Webhook functionality\"\n)"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                236,
                                261
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "webhook",
                                    "range": [
                                        237,
                                        237
                                    ],
                                    "children": [],
                                    "content": "webhook"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        239,
                                        261
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "webhook",
                                            "range": [
                                                259,
                                                261
                                            ],
                                            "children": [],
                                            "content": "return webhook\n"
                                        }
                                    ],
                                    "content": "=await integrations.find_webhook_by_credentials_and_props(\ncredentials.id,webhook_type,resource,events\n):\nreturn webhook\n"
                                }
                            ],
                            "content": "if webhook:=await integrations.find_webhook_by_credentials_and_props(\ncredentials.id,webhook_type,resource,events\n):\nreturn webhook\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "await self._create_webhook",
                            "range": [
                                262,
                                280
                            ],
                            "children": [],
                            "content": "return await self._create_webhook(\nuser_id,webhook_type,events,resource,credentials\n)\n"
                        }
                    ],
                    "content": "\nif not app_config.platform_base_url:\nraise MissingConfigError(\n\"PLATFORM_BASE_URL must be set to use Webhook functionality\"\n)\n\nif webhook:=await integrations.find_webhook_by_credentials_and_props(\ncredentials.id,webhook_type,resource,events\n):\nreturn webhook\nreturn await self._create_webhook(\nuser_id,webhook_type,events,resource,credentials\n)\n"
                }
            ],
            "content": "async def get_suitable_auto_webhook(\nself,\nuser_id:str,\ncredentials:Credentials,\nwebhook_type:WT,\nresource:str,\nevents:list[str],\n)->integrations.Webhook:\nif not app_config.platform_base_url:\nraise MissingConfigError(\n\"PLATFORM_BASE_URL must be set to use Webhook functionality\"\n)\n\nif webhook:=await integrations.find_webhook_by_credentials_and_props(\ncredentials.id,webhook_type,resource,events\n):\nreturn webhook\nreturn await self._create_webhook(\nuser_id,webhook_type,events,resource,credentials\n)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_manual_webhook",
            "range": [
                282,
                364
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        287,
                        287
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        290,
                        292
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                291,
                                292
                            ],
                            "children": [],
                            "content": ":str"
                        }
                    ],
                    "content": "user_id:str"
                },
                {
                    "type": "Parameter",
                    "name": "graph_id",
                    "range": [
                        295,
                        297
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                296,
                                297
                            ],
                            "children": [],
                            "content": ":str"
                        }
                    ],
                    "content": "graph_id:str"
                },
                {
                    "type": "Parameter",
                    "name": "webhook_type",
                    "range": [
                        300,
                        302
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "WT",
                            "range": [
                                301,
                                302
                            ],
                            "children": [],
                            "content": ":WT"
                        }
                    ],
                    "content": "webhook_type:WT"
                },
                {
                    "type": "Parameter",
                    "name": "events",
                    "range": [
                        305,
                        310
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "list[str]",
                            "range": [
                                306,
                                310
                            ],
                            "children": [],
                            "content": ":list[str]"
                        }
                    ],
                    "content": "events:list[str]"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        315,
                        364
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                316,
                                341
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "current_webhook",
                                    "range": [
                                        317,
                                        317
                                    ],
                                    "children": [],
                                    "content": "current_webhook"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        319,
                                        341
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "current_webhook",
                                            "range": [
                                                339,
                                                341
                                            ],
                                            "children": [],
                                            "content": "return current_webhook\n"
                                        }
                                    ],
                                    "content": "=await integrations.find_webhook_by_graph_and_props(\ngraph_id,self.PROVIDER_NAME,webhook_type,events\n):\nreturn current_webhook\n"
                                }
                            ],
                            "content": "if current_webhook:=await integrations.find_webhook_by_graph_and_props(\ngraph_id,self.PROVIDER_NAME,webhook_type,events\n):\nreturn current_webhook\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "await self._create_webhook",
                            "range": [
                                342,
                                364
                            ],
                            "children": [],
                            "content": "return await self._create_webhook(\nuser_id,\nwebhook_type,\nevents,\nregister=False,\n)\n"
                        }
                    ],
                    "content": "\nif current_webhook:=await integrations.find_webhook_by_graph_and_props(\ngraph_id,self.PROVIDER_NAME,webhook_type,events\n):\nreturn current_webhook\nreturn await self._create_webhook(\nuser_id,\nwebhook_type,\nevents,\nregister=False,\n)\n"
                }
            ],
            "content": "async def get_manual_webhook(\nself,\nuser_id:str,\ngraph_id:str,\nwebhook_type:WT,\nevents:list[str],\n):\nif current_webhook:=await integrations.find_webhook_by_graph_and_props(\ngraph_id,self.PROVIDER_NAME,webhook_type,events\n):\nreturn current_webhook\nreturn await self._create_webhook(\nuser_id,\nwebhook_type,\nevents,\nregister=False,\n)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "prune_webhook_if_dangling",
            "range": [
                366,
                595
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        371,
                        371
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "Parameter",
                    "name": "webhook_id",
                    "range": [
                        373,
                        375
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                374,
                                375
                            ],
                            "children": [],
                            "content": ":str"
                        }
                    ],
                    "content": "webhook_id:str"
                },
                {
                    "type": "Parameter",
                    "name": "credentials",
                    "range": [
                        377,
                        382
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Optional[Credentials]",
                            "range": [
                                378,
                                382
                            ],
                            "children": [],
                            "content": ":Optional[Credentials]"
                        }
                    ],
                    "content": "credentials:Optional[Credentials]"
                },
                {
                    "type": "ReturnType",
                    "name": "bool",
                    "range": [
                        385,
                        387
                    ],
                    "children": [],
                    "content": "->bool"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        389,
                        595
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "webhook",
                            "range": [
                                390,
                                398
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "await integrations.get_webhook(webhook_id)",
                                    "range": [
                                        392,
                                        398
                                    ],
                                    "children": [],
                                    "content": "await integrations.get_webhook(webhook_id)"
                                }
                            ],
                            "content": "webhook=await integrations.get_webhook(webhook_id)"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                400,
                                413
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "webhook.attached_nodes is None",
                                    "range": [
                                        401,
                                        405
                                    ],
                                    "children": [],
                                    "content": "webhook.attached_nodes is None"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        407,
                                        413
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "ValueError",
                                            "range": [
                                                408,
                                                413
                                            ],
                                            "children": [],
                                            "content": "raise ValueError(\"Error retrieving webhook including attached nodes\")\n"
                                        }
                                    ],
                                    "content": "\nraise ValueError(\"Error retrieving webhook including attached nodes\")\n"
                                }
                            ],
                            "content": "if webhook.attached_nodes is None:\nraise ValueError(\"Error retrieving webhook including attached nodes\")\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                414,
                                426
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "webhook.attached_nodes",
                                    "range": [
                                        415,
                                        418
                                    ],
                                    "children": [],
                                    "content": "webhook.attached_nodes:"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        420,
                                        426
                                    ],
                                    "children": [
                                        {
                                            "type": "Comment",
                                            "name": "Don't prune webhook if in use",
                                            "range": [
                                                421,
                                                425
                                            ],
                                            "children": [],
                                            "content": "Don 't prune webhook if in use \\n             return False \\n  \\n         if credentials: \\n             await self._deregister_webhook(webhook, credentials) \\n         await integrations.delete_webhook(webhook.id) \\n         return True \\n  \\n     # --8<-- [start:BaseWebhooksManager3] \\n     @classmethod \\n     @abstractmethod \\n     async def validate_payload( \\n         cls, webhook: integrations.Webhook, request: Request \\n     ) -> tuple[dict, str]: \\n         \"\"\" \\n         Validates an incoming webhook request and returns its payload and type. \\n  \\n         Params: \\n             webhook: Object representing the configured webhook and its properties in our system. \\n             request: Incoming FastAPI `Request` \\n  \\n         Returns: \\n             dict: The validated payload \\n             str: The event type associated with the payload \\n         \"\"\" \\n  \\n     # --8<-- [end:BaseWebhooksManager3] \\n  \\n     # --8<-- [start:BaseWebhooksManager5] \\n     async def trigger_ping( \\n         self, webhook: integrations.Webhook, credentials: Credentials | None \\n     ) -> None: \\n         \"\"\" \\n         Triggers a ping to the given webhook. \\n  \\n         Raises: \\n             NotImplementedError: if the provider doesn' t support pinging"
                                        }
                                    ],
                                    "content": "#Don 't prune webhook if in use \\n             return False \\n  \\n         if credentials: \\n             await self._deregister_webhook(webhook, credentials) \\n         await integrations.delete_webhook(webhook.id) \\n         return True \\n  \\n     # --8<-- [start:BaseWebhooksManager3] \\n     @classmethod \\n     @abstractmethod \\n     async def validate_payload( \\n         cls, webhook: integrations.Webhook, request: Request \\n     ) -> tuple[dict, str]: \\n         \"\"\" \\n         Validates an incoming webhook request and returns its payload and type. \\n  \\n         Params: \\n             webhook: Object representing the configured webhook and its properties in our system. \\n             request: Incoming FastAPI `Request` \\n  \\n         Returns: \\n             dict: The validated payload \\n             str: The event type associated with the payload \\n         \"\"\" \\n  \\n     # --8<-- [end:BaseWebhooksManager3] \\n  \\n     # --8<-- [start:BaseWebhooksManager5] \\n     async def trigger_ping( \\n         self, webhook: integrations.Webhook, credentials: Credentials | None \\n     ) -> None: \\n         \"\"\" \\n         Triggers a ping to the given webhook. \\n  \\n         Raises: \\n             NotImplementedError: if the provider doesn' t support pinging\n"
                                }
                            ],
                            "content": "if webhook.attached_nodes:\n#Don 't prune webhook if in use \\n             return False \\n  \\n         if credentials: \\n             await self._deregister_webhook(webhook, credentials) \\n         await integrations.delete_webhook(webhook.id) \\n         return True \\n  \\n     # --8<-- [start:BaseWebhooksManager3] \\n     @classmethod \\n     @abstractmethod \\n     async def validate_payload( \\n         cls, webhook: integrations.Webhook, request: Request \\n     ) -> tuple[dict, str]: \\n         \"\"\" \\n         Validates an incoming webhook request and returns its payload and type. \\n  \\n         Params: \\n             webhook: Object representing the configured webhook and its properties in our system. \\n             request: Incoming FastAPI `Request` \\n  \\n         Returns: \\n             dict: The validated payload \\n             str: The event type associated with the payload \\n         \"\"\" \\n  \\n     # --8<-- [end:BaseWebhooksManager3] \\n  \\n     # --8<-- [start:BaseWebhooksManager5] \\n     async def trigger_ping( \\n         self, webhook: integrations.Webhook, credentials: Credentials | None \\n     ) -> None: \\n         \"\"\" \\n         Triggers a ping to the given webhook. \\n  \\n         Raises: \\n             NotImplementedError: if the provider doesn' t support pinging\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                427,
                                441
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "credentials",
                                    "range": [
                                        428,
                                        428
                                    ],
                                    "children": [],
                                    "content": "\" \\n         # --8<-- [end:BaseWebhooksManager5] \\n         raise NotImplementedError(f\""
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        430,
                                        441
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "await self._deregister_webhook(webhook, credentials)",
                                            "range": [
                                                431,
                                                441
                                            ],
                                            "children": [],
                                            "content": ".__class__.__name__}doesn't support pinging \") \\n  \\n     # --8<-- [start:BaseWebhooksManager2] \\n     @abstractmethod \\n     async def _register_webhook( \\n         self, \\n         credentials: Credentials, \\n         webhook_type: WT, \\n         resource: str, \\n         events: list[str], \\n         ingress_url: str, \\n         secret: str, \\n     ) -> tuple[str, dict]: \\n         \""
                                        }
                                    ],
                                    "content": "self.__class__.__name__}doesn't support pinging \") \\n  \\n     # --8<-- [start:BaseWebhooksManager2] \\n     @abstractmethod \\n     async def _register_webhook( \\n         self, \\n         credentials: Credentials, \\n         webhook_type: WT, \\n         resource: str, \\n         events: list[str], \\n         ingress_url: str, \\n         secret: str, \\n     ) -> tuple[str, dict]: \\n         \""
                                }
                            ],
                            "content": "\"\"\" \\n         # --8<-- [end:BaseWebhooksManager5] \\n         raise NotImplementedError(f\"{self.__class__.__name__}doesn't support pinging \") \\n  \\n     # --8<-- [start:BaseWebhooksManager2] \\n     @abstractmethod \\n     async def _register_webhook( \\n         self, \\n         credentials: Credentials, \\n         webhook_type: WT, \\n         resource: str, \\n         events: list[str], \\n         ingress_url: str, \\n         secret: str, \\n     ) -> tuple[str, dict]: \\n         \""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "await integrations.delete_webhook(webhook.id)",
                            "range": [
                                442,
                                452
                            ],
                            "children": [],
                            "content": "\"\"\nRegisters a new webhook with the provider.\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "True",
                            "range": [
                                453,
                                455
                            ],
                            "children": [],
                            "content": "\nParams:"
                        }
                    ],
                    "content": "\nwebhook=await integrations.get_webhook(webhook_id)\nif webhook.attached_nodes is None:\nraise ValueError(\"Error retrieving webhook including attached nodes\")\nif webhook.attached_nodes:\n#Don 't prune webhook if in use \\n             return False \\n  \\n         if credentials: \\n             await self._deregister_webhook(webhook, credentials) \\n         await integrations.delete_webhook(webhook.id) \\n         return True \\n  \\n     # --8<-- [start:BaseWebhooksManager3] \\n     @classmethod \\n     @abstractmethod \\n     async def validate_payload( \\n         cls, webhook: integrations.Webhook, request: Request \\n     ) -> tuple[dict, str]: \\n         \"\"\" \\n         Validates an incoming webhook request and returns its payload and type. \\n  \\n         Params: \\n             webhook: Object representing the configured webhook and its properties in our system. \\n             request: Incoming FastAPI `Request` \\n  \\n         Returns: \\n             dict: The validated payload \\n             str: The event type associated with the payload \\n         \"\"\" \\n  \\n     # --8<-- [end:BaseWebhooksManager3] \\n  \\n     # --8<-- [start:BaseWebhooksManager5] \\n     async def trigger_ping( \\n         self, webhook: integrations.Webhook, credentials: Credentials | None \\n     ) -> None: \\n         \"\"\" \\n         Triggers a ping to the given webhook. \\n  \\n         Raises: \\n             NotImplementedError: if the provider doesn' t support pinging\n\"\"\" \\n         # --8<-- [end:BaseWebhooksManager5] \\n         raise NotImplementedError(f\"{self.__class__.__name__}doesn't support pinging \") \\n  \\n     # --8<-- [start:BaseWebhooksManager2] \\n     @abstractmethod \\n     async def _register_webhook( \\n         self, \\n         credentials: Credentials, \\n         webhook_type: WT, \\n         resource: str, \\n         events: list[str], \\n         ingress_url: str, \\n         secret: str, \\n     ) -> tuple[str, dict]: \\n         \"\"\"\nRegisters a new webhook with the provider.\n\nParams:\ncredentials:The credentials with which to create the webhook\nwebhook_type:The provider-specific webhook type to create\nresource:The resource to receive events for\nevents:The events to subscribe to\ningress_url:The ingress URL for webhook payloads\nsecret:Secret used to verify webhook payloads\n\nReturns:\nstr:Webhook ID assigned by the provider\nconfig:Provider-specific configuration for the webhook\n\"\"\" \\n         ... \\n  \\n     # --8<-- [end:BaseWebhooksManager2] \\n  \\n     # --8<-- [start:BaseWebhooksManager4] \\n     @abstractmethod \\n     async def _deregister_webhook( \\n         self, webhook: integrations.Webhook, credentials: Credentials \\n     ) -> None: ... \\n  \\n     # --8<-- [end:BaseWebhooksManager4] \\n  \\n     async def _create_webhook( \\n         self, \\n         user_id: str, \\n         webhook_type: WT, \\n         events: list[str], \\n         resource: str = \" \", \\n         credentials: Optional[Credentials] = None, \\n         register: bool = True, \\n     ) -> integrations.Webhook: \\n         if not app_config.platform_base_url: \\n             raise MissingConfigError( \\n                 \" PLATFORM_BASE_URL must be set to use Webhook functionality \" \\n             ) \\n  \\n         id = str(uuid4()) \\n         secret = secrets.token_hex(32) \\n         provider_name = self.PROVIDER_NAME \\n         ingress_url = webhook_ingress_url(provider_name=provider_name, webhook_id=id) \\n         if register: \\n             if not credentials: \\n                 raise TypeError(\" credentials are required if register=True \") \\n             provider_webhook_id, config = await self._register_webhook( \\n                 credentials, webhook_type, resource, events, ingress_url, secret \\n             ) \\n         else: \\n             provider_webhook_id, config = \" \", {} \\n  \\n         return await integrations.create_webhook( \\n             integrations.Webhook( \\n                 id=id, \\n                 user_id=user_id, \\n                 provider=provider_name, \\n                 credentials_id=credentials.id if credentials else \"\",\nwebhook_type=webhook_type,\nresource=resource,\nevents=events,\nprovider_webhook_id=provider_webhook_id,\nconfig=config,\nsecret=secret,\n)\n)\n"
                }
            ],
            "content": "async def prune_webhook_if_dangling(\nself,webhook_id:str,credentials:Optional[Credentials]\n)->bool:\nwebhook=await integrations.get_webhook(webhook_id)\nif webhook.attached_nodes is None:\nraise ValueError(\"Error retrieving webhook including attached nodes\")\nif webhook.attached_nodes:\n#Don 't prune webhook if in use \\n             return False \\n  \\n         if credentials: \\n             await self._deregister_webhook(webhook, credentials) \\n         await integrations.delete_webhook(webhook.id) \\n         return True \\n  \\n     # --8<-- [start:BaseWebhooksManager3] \\n     @classmethod \\n     @abstractmethod \\n     async def validate_payload( \\n         cls, webhook: integrations.Webhook, request: Request \\n     ) -> tuple[dict, str]: \\n         \"\"\" \\n         Validates an incoming webhook request and returns its payload and type. \\n  \\n         Params: \\n             webhook: Object representing the configured webhook and its properties in our system. \\n             request: Incoming FastAPI `Request` \\n  \\n         Returns: \\n             dict: The validated payload \\n             str: The event type associated with the payload \\n         \"\"\" \\n  \\n     # --8<-- [end:BaseWebhooksManager3] \\n  \\n     # --8<-- [start:BaseWebhooksManager5] \\n     async def trigger_ping( \\n         self, webhook: integrations.Webhook, credentials: Credentials | None \\n     ) -> None: \\n         \"\"\" \\n         Triggers a ping to the given webhook. \\n  \\n         Raises: \\n             NotImplementedError: if the provider doesn' t support pinging\n\"\"\" \\n         # --8<-- [end:BaseWebhooksManager5] \\n         raise NotImplementedError(f\"{self.__class__.__name__}doesn't support pinging \") \\n  \\n     # --8<-- [start:BaseWebhooksManager2] \\n     @abstractmethod \\n     async def _register_webhook( \\n         self, \\n         credentials: Credentials, \\n         webhook_type: WT, \\n         resource: str, \\n         events: list[str], \\n         ingress_url: str, \\n         secret: str, \\n     ) -> tuple[str, dict]: \\n         \"\"\"\nRegisters a new webhook with the provider.\n\nParams:\ncredentials:The credentials with which to create the webhook\nwebhook_type:The provider-specific webhook type to create\nresource:The resource to receive events for\nevents:The events to subscribe to\ningress_url:The ingress URL for webhook payloads\nsecret:Secret used to verify webhook payloads\n\nReturns:\nstr:Webhook ID assigned by the provider\nconfig:Provider-specific configuration for the webhook\n\"\"\" \\n         ... \\n  \\n     # --8<-- [end:BaseWebhooksManager2] \\n  \\n     # --8<-- [start:BaseWebhooksManager4] \\n     @abstractmethod \\n     async def _deregister_webhook( \\n         self, webhook: integrations.Webhook, credentials: Credentials \\n     ) -> None: ... \\n  \\n     # --8<-- [end:BaseWebhooksManager4] \\n  \\n     async def _create_webhook( \\n         self, \\n         user_id: str, \\n         webhook_type: WT, \\n         events: list[str], \\n         resource: str = \" \", \\n         credentials: Optional[Credentials] = None, \\n         register: bool = True, \\n     ) -> integrations.Webhook: \\n         if not app_config.platform_base_url: \\n             raise MissingConfigError( \\n                 \" PLATFORM_BASE_URL must be set to use Webhook functionality \" \\n             ) \\n  \\n         id = str(uuid4()) \\n         secret = secrets.token_hex(32) \\n         provider_name = self.PROVIDER_NAME \\n         ingress_url = webhook_ingress_url(provider_name=provider_name, webhook_id=id) \\n         if register: \\n             if not credentials: \\n                 raise TypeError(\" credentials are required if register=True \") \\n             provider_webhook_id, config = await self._register_webhook( \\n                 credentials, webhook_type, resource, events, ingress_url, secret \\n             ) \\n         else: \\n             provider_webhook_id, config = \" \", {} \\n  \\n         return await integrations.create_webhook( \\n             integrations.Webhook( \\n                 id=id, \\n                 user_id=user_id, \\n                 provider=provider_name, \\n                 credentials_id=credentials.id if credentials else \"\",\nwebhook_type=webhook_type,\nresource=resource,\nevents=events,\nprovider_webhook_id=provider_webhook_id,\nconfig=config,\nsecret=secret,\n)\n)\n"
        }
    ],
    "content": "import logging\nimport secrets\nfrom abc import ABC,abstractmethod\nfrom typing import ClassVar,Generic,Optional,TypeVar\nfrom uuid import uuid4\n\nfrom fastapi import Request\nfrom strenum import StrEnum\n\nfrom backend.data import integrations\nfrom backend.data.model import Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks.utils import webhook_ingress_url\nfrom backend.util.exceptions import MissingConfigError\nfrom backend.util.settings import Config\n\nlogger=logging.getLogger(__name__)\napp_config=Config()\n\nWT=TypeVar(\"WT\",bound=StrEnum)\n\n\nclass BaseWebhooksManager(ABC,Generic[WT]):\n#--8<--[start:BaseWebhooksManager1]\nPROVIDER_NAME:ClassVar[ProviderName]\n#--8<--[end:BaseWebhooksManager1]\n\nWebhookType:WT\n\nasync def get_suitable_auto_webhook(\nself,\nuser_id:str,\ncredentials:Credentials,\nwebhook_type:WT,\nresource:str,\nevents:list[str],\n)->integrations.Webhook:\nif not app_config.platform_base_url:\nraise MissingConfigError(\n\"PLATFORM_BASE_URL must be set to use Webhook functionality\"\n)\n\nif webhook:=await integrations.find_webhook_by_credentials_and_props(\ncredentials.id,webhook_type,resource,events\n):\nreturn webhook\nreturn await self._create_webhook(\nuser_id,webhook_type,events,resource,credentials\n)\n\nasync def get_manual_webhook(\nself,\nuser_id:str,\ngraph_id:str,\nwebhook_type:WT,\nevents:list[str],\n):\nif current_webhook:=await integrations.find_webhook_by_graph_and_props(\ngraph_id,self.PROVIDER_NAME,webhook_type,events\n):\nreturn current_webhook\nreturn await self._create_webhook(\nuser_id,\nwebhook_type,\nevents,\nregister=False,\n)\n\nasync def prune_webhook_if_dangling(\nself,webhook_id:str,credentials:Optional[Credentials]\n)->bool:\nwebhook=await integrations.get_webhook(webhook_id)\nif webhook.attached_nodes is None:\nraise ValueError(\"Error retrieving webhook including attached nodes\")\nif webhook.attached_nodes:\n#Don 't prune webhook if in use \\n             return False \\n  \\n         if credentials: \\n             await self._deregister_webhook(webhook, credentials) \\n         await integrations.delete_webhook(webhook.id) \\n         return True \\n  \\n     # --8<-- [start:BaseWebhooksManager3] \\n     @classmethod \\n     @abstractmethod \\n     async def validate_payload( \\n         cls, webhook: integrations.Webhook, request: Request \\n     ) -> tuple[dict, str]: \\n         \"\"\" \\n         Validates an incoming webhook request and returns its payload and type. \\n  \\n         Params: \\n             webhook: Object representing the configured webhook and its properties in our system. \\n             request: Incoming FastAPI `Request` \\n  \\n         Returns: \\n             dict: The validated payload \\n             str: The event type associated with the payload \\n         \"\"\" \\n  \\n     # --8<-- [end:BaseWebhooksManager3] \\n  \\n     # --8<-- [start:BaseWebhooksManager5] \\n     async def trigger_ping( \\n         self, webhook: integrations.Webhook, credentials: Credentials | None \\n     ) -> None: \\n         \"\"\" \\n         Triggers a ping to the given webhook. \\n  \\n         Raises: \\n             NotImplementedError: if the provider doesn' t support pinging\n\"\"\" \\n         # --8<-- [end:BaseWebhooksManager5] \\n         raise NotImplementedError(f\"{self.__class__.__name__}doesn't support pinging \") \\n  \\n     # --8<-- [start:BaseWebhooksManager2] \\n     @abstractmethod \\n     async def _register_webhook( \\n         self, \\n         credentials: Credentials, \\n         webhook_type: WT, \\n         resource: str, \\n         events: list[str], \\n         ingress_url: str, \\n         secret: str, \\n     ) -> tuple[str, dict]: \\n         \"\"\"\nRegisters a new webhook with the provider.\n\nParams:\ncredentials:The credentials with which to create the webhook\nwebhook_type:The provider-specific webhook type to create\nresource:The resource to receive events for\nevents:The events to subscribe to\ningress_url:The ingress URL for webhook payloads\nsecret:Secret used to verify webhook payloads\n\nReturns:\nstr:Webhook ID assigned by the provider\nconfig:Provider-specific configuration for the webhook\n\"\"\" \\n         ... \\n  \\n     # --8<-- [end:BaseWebhooksManager2] \\n  \\n     # --8<-- [start:BaseWebhooksManager4] \\n     @abstractmethod \\n     async def _deregister_webhook( \\n         self, webhook: integrations.Webhook, credentials: Credentials \\n     ) -> None: ... \\n  \\n     # --8<-- [end:BaseWebhooksManager4] \\n  \\n     async def _create_webhook( \\n         self, \\n         user_id: str, \\n         webhook_type: WT, \\n         events: list[str], \\n         resource: str = \" \", \\n         credentials: Optional[Credentials] = None, \\n         register: bool = True, \\n     ) -> integrations.Webhook: \\n         if not app_config.platform_base_url: \\n             raise MissingConfigError( \\n                 \" PLATFORM_BASE_URL must be set to use Webhook functionality \" \\n             ) \\n  \\n         id = str(uuid4()) \\n         secret = secrets.token_hex(32) \\n         provider_name = self.PROVIDER_NAME \\n         ingress_url = webhook_ingress_url(provider_name=provider_name, webhook_id=id) \\n         if register: \\n             if not credentials: \\n                 raise TypeError(\" credentials are required if register=True \") \\n             provider_webhook_id, config = await self._register_webhook( \\n                 credentials, webhook_type, resource, events, ingress_url, secret \\n             ) \\n         else: \\n             provider_webhook_id, config = \" \", {} \\n  \\n         return await integrations.create_webhook( \\n             integrations.Webhook( \\n                 id=id, \\n                 user_id=user_id, \\n                 provider=provider_name, \\n                 credentials_id=credentials.id if credentials else \"\",\nwebhook_type=webhook_type,\nresource=resource,\nevents=events,\nprovider_webhook_id=provider_webhook_id,\nconfig=config,\nsecret=secret,\n)\n)\n"
}