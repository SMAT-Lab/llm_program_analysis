{
    "type": "Program",
    "name": "Global",
    "range": [
        42,
        1196
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "find_links_in_text",
            "range": [
                42,
                123
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "find_links_in_text",
                    "range": [
                        42,
                        55
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                42,
                                45
                            ],
                            "children": [],
                            "content": "\ndef find_links_in_text("
                        },
                        {
                            "type": "FunctionName",
                            "name": "find_links_in_text",
                            "range": [
                                43,
                                58
                            ],
                            "children": [],
                            "content": "def find_links_in_text(text:str)->List[str]:\n\"\""
                        },
                        {
                            "type": "ParameterList",
                            "name": "text",
                            "range": [
                                44,
                                48
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "text",
                                    "range": [
                                        45,
                                        48
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "str",
                                            "range": [
                                                46,
                                                48
                                            ],
                                            "children": [],
                                            "content": "text:str"
                                        }
                                    ],
                                    "content": "(text:str"
                                }
                            ],
                            "content": "find_links_in_text(text:str"
                        },
                        {
                            "type": "ReturnType",
                            "name": "List[str]",
                            "range": [
                                49,
                                55
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "List",
                                    "range": [
                                        51,
                                        55
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeArgument",
                                            "name": "str",
                                            "range": [
                                                53,
                                                55
                                            ],
                                            "children": [],
                                            "content": "[str]"
                                        }
                                    ],
                                    "content": ">List[str]"
                                }
                            ],
                            "content": ")->List[str]"
                        }
                    ],
                    "content": "\ndef find_links_in_text(text:str)->List[str]"
                },
                {
                    "type": "FunctionBody",
                    "name": "find_links_in_text",
                    "range": [
                        56,
                        123
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "Find links in a text and return a list of URLs.",
                            "range": [
                                57,
                                59
                            ],
                            "children": [],
                            "content": "\n\"\"\"Find links in a text and return a list of URLs.\""
                        },
                        {
                            "type": "VariableDecl",
                            "name": "link_pattern",
                            "range": [
                                62,
                                87
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        63,
                                        87
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "re.compile",
                                            "range": [
                                                64,
                                                87
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))'",
                                                    "range": [
                                                        68,
                                                        86
                                                    ],
                                                    "children": [],
                                                    "content": "(r '((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))') \\n  \\n     raw_links = re.findall(link_pattern, text) \\n  \\n     links = [ \\n         str(raw_link[0]) for raw_link in raw_links \\n     ] \\n  \\n     return links \\n  \\n  \\n def find_links_in_file(filename: str) -> List[str]: \\n     \"\"\"Find links in a file and return a list of URLs from text"
                                                }
                                            ],
                                            "content": "=re.compile(r '((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))') \\n  \\n     raw_links = re.findall(link_pattern, text) \\n  \\n     links = [ \\n         str(raw_link[0]) for raw_link in raw_links \\n     ] \\n  \\n     return links \\n  \\n  \\n def find_links_in_file(filename: str) -> List[str]: \\n     \"\"\"Find links in a file and return a list of URLs from text file"
                                        }
                                    ],
                                    "content": "link_pattern=re.compile(r '((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))') \\n  \\n     raw_links = re.findall(link_pattern, text) \\n  \\n     links = [ \\n         str(raw_link[0]) for raw_link in raw_links \\n     ] \\n  \\n     return links \\n  \\n  \\n def find_links_in_file(filename: str) -> List[str]: \\n     \"\"\"Find links in a file and return a list of URLs from text file"
                                }
                            ],
                            "content": "\nlink_pattern=re.compile(r '((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))') \\n  \\n     raw_links = re.findall(link_pattern, text) \\n  \\n     links = [ \\n         str(raw_link[0]) for raw_link in raw_links \\n     ] \\n  \\n     return links \\n  \\n  \\n def find_links_in_file(filename: str) -> List[str]: \\n     \"\"\"Find links in a file and return a list of URLs from text file"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "raw_links",
                            "range": [
                                90,
                                99
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        91,
                                        99
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "re.findall",
                                            "range": [
                                                92,
                                                99
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "link_pattern",
                                                    "range": [
                                                        96,
                                                        97
                                                    ],
                                                    "children": [],
                                                    "content": ".\n"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "text",
                                                    "range": [
                                                        98,
                                                        99
                                                    ],
                                                    "children": [],
                                                    "content": "\nReturns"
                                                }
                                            ],
                                            "content": "Check for duplicated links.\n\nReturns"
                                        }
                                    ],
                                    "content": "\"\"Check for duplicated links.\n\nReturns"
                                }
                            ],
                            "content": "\" \\n  \\n     with open(filename, mode='r', encoding='utf-8') as file: \\n         readme = file.read() \\n         index_section = readme.find('## Index') \\n         if index_section == -1: \\n             index_section = 0 \\n         content = readme[index_section:] \\n  \\n     links = find_links_in_text(content) \\n  \\n     return links \\n  \\n  \\n def check_duplicate_links(links: List[str]) -> Tuple[bool, List]: \\n     \"\"\"Check for duplicated links.\n\nReturns"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "links",
                            "range": [
                                102,
                                118
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        103,
                                        118
                                    ],
                                    "children": [
                                        {
                                            "type": "ListComprehension",
                                            "name": "[str(raw_link[0]) for raw_link in raw_links]",
                                            "range": [
                                                104,
                                                118
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "str",
                                                    "range": [
                                                        106,
                                                        112
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "raw_link[0]",
                                                            "range": [
                                                                108,
                                                                112
                                                            ],
                                                            "children": [],
                                                            "content": "list.\n\"\"\" \\n  \\n     seen = {} \\n     duplicates = [] \\n     has_duplicate = False \\n  \\n     for link in links: \\n         link = link.rstrip('/') \\n         if link not in seen: \\n             seen[link] = 1 \\n         else: \\n             if seen[link] == 1: \\n                 duplicates.append(link) \\n  \\n     if duplicates: \\n         has_duplicate = True \\n  \\n     return (has_duplicate, duplicates) \\n  \\n  \\n def fake_user_agent() -> str: \\n     \""
                                                        }
                                                    ],
                                                    "content": "and duplicate list.\n\"\"\" \\n  \\n     seen = {} \\n     duplicates = [] \\n     has_duplicate = False \\n  \\n     for link in links: \\n         link = link.rstrip('/') \\n         if link not in seen: \\n             seen[link] = 1 \\n         else: \\n             if seen[link] == 1: \\n                 duplicates.append(link) \\n  \\n     if duplicates: \\n         has_duplicate = True \\n  \\n     return (has_duplicate, duplicates) \\n  \\n  \\n def fake_user_agent() -> str: \\n     \""
                                                },
                                                {
                                                    "type": "Iteration",
                                                    "name": "raw_link in raw_links",
                                                    "range": [
                                                        114,
                                                        118
                                                    ],
                                                    "children": [],
                                                    "content": "Faking user agent as some"
                                                }
                                            ],
                                            "content": "or False and duplicate list.\n\"\"\" \\n  \\n     seen = {} \\n     duplicates = [] \\n     has_duplicate = False \\n  \\n     for link in links: \\n         link = link.rstrip('/') \\n         if link not in seen: \\n             seen[link] = 1 \\n         else: \\n             if seen[link] == 1: \\n                 duplicates.append(link) \\n  \\n     if duplicates: \\n         has_duplicate = True \\n  \\n     return (has_duplicate, duplicates) \\n  \\n  \\n def fake_user_agent() -> str: \\n     \"\"\"Faking user agent as some"
                                        }
                                    ],
                                    "content": "True or False and duplicate list.\n\"\"\" \\n  \\n     seen = {} \\n     duplicates = [] \\n     has_duplicate = False \\n  \\n     for link in links: \\n         link = link.rstrip('/') \\n         if link not in seen: \\n             seen[link] = 1 \\n         else: \\n             if seen[link] == 1: \\n                 duplicates.append(link) \\n  \\n     if duplicates: \\n         has_duplicate = True \\n  \\n     return (has_duplicate, duplicates) \\n  \\n  \\n def fake_user_agent() -> str: \\n     \"\"\"Faking user agent as some"
                                }
                            ],
                            "content": "with True or False and duplicate list.\n\"\"\" \\n  \\n     seen = {} \\n     duplicates = [] \\n     has_duplicate = False \\n  \\n     for link in links: \\n         link = link.rstrip('/') \\n         if link not in seen: \\n             seen[link] = 1 \\n         else: \\n             if seen[link] == 1: \\n                 duplicates.append(link) \\n  \\n     if duplicates: \\n         has_duplicate = True \\n  \\n     return (has_duplicate, duplicates) \\n  \\n  \\n def fake_user_agent() -> str: \\n     \"\"\"Faking user agent as some"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                121,
                                123
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "links",
                                    "range": [
                                        122,
                                        123
                                    ],
                                    "children": [],
                                    "content": "not-"
                                }
                            ],
                            "content": "block not-"
                        }
                    ],
                    "content": ":\n\"\"\"Find links in a text and return a list of URLs.\"\"\"\n\nlink_pattern=re.compile(r '((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))') \\n  \\n     raw_links = re.findall(link_pattern, text) \\n  \\n     links = [ \\n         str(raw_link[0]) for raw_link in raw_links \\n     ] \\n  \\n     return links \\n  \\n  \\n def find_links_in_file(filename: str) -> List[str]: \\n     \"\"\"Find links in a file and return a list of URLs from text file.\"\"\" \\n  \\n     with open(filename, mode='r', encoding='utf-8') as file: \\n         readme = file.read() \\n         index_section = readme.find('## Index') \\n         if index_section == -1: \\n             index_section = 0 \\n         content = readme[index_section:] \\n  \\n     links = find_links_in_text(content) \\n  \\n     return links \\n  \\n  \\n def check_duplicate_links(links: List[str]) -> Tuple[bool, List]: \\n     \"\"\"Check for duplicated links.\n\nReturns a tuple with True or False and duplicate list.\n\"\"\" \\n  \\n     seen = {} \\n     duplicates = [] \\n     has_duplicate = False \\n  \\n     for link in links: \\n         link = link.rstrip('/') \\n         if link not in seen: \\n             seen[link] = 1 \\n         else: \\n             if seen[link] == 1: \\n                 duplicates.append(link) \\n  \\n     if duplicates: \\n         has_duplicate = True \\n  \\n     return (has_duplicate, duplicates) \\n  \\n  \\n def fake_user_agent() -> str: \\n     \"\"\"Faking user agent as some hosting services block not-"
                }
            ],
            "content": "\ndef find_links_in_text(text:str)->List[str]:\n\"\"\"Find links in a text and return a list of URLs.\"\"\"\n\nlink_pattern=re.compile(r '((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))') \\n  \\n     raw_links = re.findall(link_pattern, text) \\n  \\n     links = [ \\n         str(raw_link[0]) for raw_link in raw_links \\n     ] \\n  \\n     return links \\n  \\n  \\n def find_links_in_file(filename: str) -> List[str]: \\n     \"\"\"Find links in a file and return a list of URLs from text file.\"\"\" \\n  \\n     with open(filename, mode='r', encoding='utf-8') as file: \\n         readme = file.read() \\n         index_section = readme.find('## Index') \\n         if index_section == -1: \\n             index_section = 0 \\n         content = readme[index_section:] \\n  \\n     links = find_links_in_text(content) \\n  \\n     return links \\n  \\n  \\n def check_duplicate_links(links: List[str]) -> Tuple[bool, List]: \\n     \"\"\"Check for duplicated links.\n\nReturns a tuple with True or False and duplicate list.\n\"\"\" \\n  \\n     seen = {} \\n     duplicates = [] \\n     has_duplicate = False \\n  \\n     for link in links: \\n         link = link.rstrip('/') \\n         if link not in seen: \\n             seen[link] = 1 \\n         else: \\n             if seen[link] == 1: \\n                 duplicates.append(link) \\n  \\n     if duplicates: \\n         has_duplicate = True \\n  \\n     return (has_duplicate, duplicates) \\n  \\n  \\n def fake_user_agent() -> str: \\n     \"\"\"Faking user agent as some hosting services block not-"
        },
        {
            "type": "FunctionDecl",
            "name": "find_links_in_file",
            "range": [
                125,
                210
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "find_links_in_file",
                    "range": [
                        125,
                        138
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                125,
                                128
                            ],
                            "children": [],
                            "content": "UA.\"\"\" \\n  \\n     user_agents = [ \\n         'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36', \\n         'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36', \\n     ] \\n  \\n     return random.choice(user_agents) \\n  \\n  \\n def get_host_from_link(link: str) -> str: \\n  \\n     host = link.split('://', 1)[1] if '://' in link else link \\n  \\n     # Remove routes, arguments and anchors \\n     if '/' in host: \\n         host = host.split('/', 1)[0] \\n  \\n     elif '?' in host: \\n         host = host.split('?', 1)[0] \\n  \\n     elif '#' in host: \\n         host = host.split('#', 1)[0] \\n  \\n     return host \\n  \\n  \\n def has_cloudflare_protection(resp: Response) -> bool: \\n     \""
                        },
                        {
                            "type": "Identifier",
                            "name": "find_links_in_file",
                            "range": [
                                126,
                                142
                            ],
                            "children": [],
                            "content": ".\"\"\" \\n  \\n     user_agents = [ \\n         'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36', \\n         'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36', \\n     ] \\n  \\n     return random.choice(user_agents) \\n  \\n  \\n def get_host_from_link(link: str) -> str: \\n  \\n     host = link.split('://', 1)[1] if '://' in link else link \\n  \\n     # Remove routes, arguments and anchors \\n     if '/' in host: \\n         host = host.split('/', 1)[0] \\n  \\n     elif '?' in host: \\n         host = host.split('?', 1)[0] \\n  \\n     elif '#' in host: \\n         host = host.split('#', 1)[0] \\n  \\n     return host \\n  \\n  \\n def has_cloudflare_protection(resp: Response) -> bool: \\n     \"\"\"Checks if there is any cloudflare protection in the response.\n\n"
                        },
                        {
                            "type": "ParameterList",
                            "name": "filename",
                            "range": [
                                127,
                                131
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "filename",
                                    "range": [
                                        128,
                                        131
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "str",
                                            "range": [
                                                129,
                                                131
                                            ],
                                            "children": [],
                                            "content": "\"\"Checks if"
                                        }
                                    ],
                                    "content": "\" \\n  \\n     user_agents = [ \\n         'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36', \\n         'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36', \\n     ] \\n  \\n     return random.choice(user_agents) \\n  \\n  \\n def get_host_from_link(link: str) -> str: \\n  \\n     host = link.split('://', 1)[1] if '://' in link else link \\n  \\n     # Remove routes, arguments and anchors \\n     if '/' in host: \\n         host = host.split('/', 1)[0] \\n  \\n     elif '?' in host: \\n         host = host.split('?', 1)[0] \\n  \\n     elif '#' in host: \\n         host = host.split('#', 1)[0] \\n  \\n     return host \\n  \\n  \\n def has_cloudflare_protection(resp: Response) -> bool: \\n     \"\"\"Checks if"
                                }
                            ],
                            "content": "\"\"\" \\n  \\n     user_agents = [ \\n         'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36', \\n         'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36', \\n     ] \\n  \\n     return random.choice(user_agents) \\n  \\n  \\n def get_host_from_link(link: str) -> str: \\n  \\n     host = link.split('://', 1)[1] if '://' in link else link \\n  \\n     # Remove routes, arguments and anchors \\n     if '/' in host: \\n         host = host.split('/', 1)[0] \\n  \\n     elif '?' in host: \\n         host = host.split('?', 1)[0] \\n  \\n     elif '#' in host: \\n         host = host.split('#', 1)[0] \\n  \\n     return host \\n  \\n  \\n def has_cloudflare_protection(resp: Response) -> bool: \\n     \"\"\"Checks if"
                        },
                        {
                            "type": "ReturnType",
                            "name": "List[str]",
                            "range": [
                                132,
                                138
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "->",
                                    "range": [
                                        132,
                                        134
                                    ],
                                    "children": [],
                                    "content": "there is any"
                                },
                                {
                                    "type": "Type",
                                    "name": "List[str]",
                                    "range": [
                                        134,
                                        138
                                    ],
                                    "children": [],
                                    "content": "any cloudflare protection in the"
                                }
                            ],
                            "content": "there is any cloudflare protection in the"
                        }
                    ],
                    "content": "UA.\"\"\" \\n  \\n     user_agents = [ \\n         'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36', \\n         'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36', \\n     ] \\n  \\n     return random.choice(user_agents) \\n  \\n  \\n def get_host_from_link(link: str) -> str: \\n  \\n     host = link.split('://', 1)[1] if '://' in link else link \\n  \\n     # Remove routes, arguments and anchors \\n     if '/' in host: \\n         host = host.split('/', 1)[0] \\n  \\n     elif '?' in host: \\n         host = host.split('?', 1)[0] \\n  \\n     elif '#' in host: \\n         host = host.split('#', 1)[0] \\n  \\n     return host \\n  \\n  \\n def has_cloudflare_protection(resp: Response) -> bool: \\n     \"\"\"Checks if there is any cloudflare protection in the"
                },
                {
                    "type": "FunctionBody",
                    "name": "find_links_in_file",
                    "range": [
                        139,
                        210
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "Find links in a file and return a list of URLs from text file.",
                            "range": [
                                140,
                                142
                            ],
                            "children": [],
                            "content": ".\n\n"
                        },
                        {
                            "type": "WithStatement",
                            "name": "with open(filename, mode='r', encoding='utf-8') as file:",
                            "range": [
                                145,
                                160
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "with",
                                    "range": [
                                        145,
                                        149
                                    ],
                                    "children": [],
                                    "content": "multiple network protections on a"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "open",
                                    "range": [
                                        146,
                                        157
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "open",
                                            "range": [
                                                146,
                                                150
                                            ],
                                            "children": [],
                                            "content": "network protections on a given"
                                        },
                                        {
                                            "type": "ArgumentList",
                                            "name": "filename, mode='r', encoding='utf-8'",
                                            "range": [
                                                147,
                                                157
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "filename",
                                                    "range": [
                                                        148,
                                                        149
                                                    ],
                                                    "children": [],
                                                    "content": "on a"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "mode='r'",
                                                    "range": [
                                                        150,
                                                        153
                                                    ],
                                                    "children": [],
                                                    "content": "given link,\n"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "encoding='utf-8'",
                                                    "range": [
                                                        154,
                                                        157
                                                    ],
                                                    "children": [],
                                                    "content": "this script tries to"
                                                }
                                            ],
                                            "content": "protections on a given link,\nthis script tries to"
                                        }
                                    ],
                                    "content": "network protections on a given link,\nthis script tries to"
                                },
                                {
                                    "type": "Keyword",
                                    "name": "as",
                                    "range": [
                                        158,
                                        160
                                    ],
                                    "children": [],
                                    "content": "detect if any"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "file",
                                    "range": [
                                        159,
                                        160
                                    ],
                                    "children": [],
                                    "content": "if any"
                                }
                            ],
                            "content": "multiple network protections on a given link,\nthis script tries to detect if any"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "readme = file.read()",
                            "range": [
                                162,
                                169
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "readme",
                                    "range": [
                                        162,
                                        168
                                    ],
                                    "children": [],
                                    "content": "them exist in the response from request"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "file.read",
                                    "range": [
                                        164,
                                        168
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "read",
                                            "range": [
                                                166,
                                                168
                                            ],
                                            "children": [],
                                            "content": "response from request"
                                        }
                                    ],
                                    "content": "in the response from request"
                                }
                            ],
                            "content": "them exist in the response from request."
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "index_section = readme.find('## Index')",
                            "range": [
                                170,
                                178
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "index_section",
                                    "range": [
                                        170,
                                        183
                                    ],
                                    "children": [],
                                    "content": "\n\nCommon protections have the following HTTP code as a response:\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "readme.find",
                                    "range": [
                                        172,
                                        177
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "find",
                                            "range": [
                                                174,
                                                177
                                            ],
                                            "children": [],
                                            "content": "have the following HTTP"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "'## Index'",
                                            "range": [
                                                176,
                                                177
                                            ],
                                            "children": [],
                                            "content": "following HTTP"
                                        }
                                    ],
                                    "content": "Common protections have the following HTTP"
                                }
                            ],
                            "content": "\n\nCommon protections have the following HTTP code"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if index_section == -1:",
                            "range": [
                                179,
                                185
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "if",
                                    "range": [
                                        179,
                                        181
                                    ],
                                    "children": [],
                                    "content": "as a response"
                                },
                                {
                                    "type": "BinaryExpression",
                                    "name": "index_section == -1",
                                    "range": [
                                        180,
                                        184
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "index_section",
                                            "range": [
                                                180,
                                                183
                                            ],
                                            "children": [],
                                            "content": "a response:\n"
                                        },
                                        {
                                            "type": "Operator",
                                            "name": "==",
                                            "range": [
                                                181,
                                                183
                                            ],
                                            "children": [],
                                            "content": "response:\n"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "-1",
                                            "range": [
                                                183,
                                                184
                                            ],
                                            "children": [],
                                            "content": "\n-"
                                        }
                                    ],
                                    "content": "a response:\n-"
                                }
                            ],
                            "content": "as a response:\n-403"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "index_section = 0",
                            "range": [
                                187,
                                190
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "index_section",
                                    "range": [
                                        187,
                                        190
                                    ],
                                    "children": [],
                                    "content": "When host header is"
                                },
                                {
                                    "type": "Literal",
                                    "name": "0",
                                    "range": [
                                        189,
                                        190
                                    ],
                                    "children": [],
                                    "content": "header is"
                                }
                            ],
                            "content": "When host header is"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "content = readme[index_section:]",
                            "range": [
                                191,
                                198
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "content",
                                    "range": [
                                        191,
                                        198
                                    ],
                                    "children": [],
                                    "content": "missing or incorrect(and more)\n"
                                },
                                {
                                    "type": "SliceExpression",
                                    "name": "readme[index_section:]",
                                    "range": [
                                        193,
                                        197
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "readme",
                                            "range": [
                                                193,
                                                194
                                            ],
                                            "children": [],
                                            "content": "incorrect("
                                        },
                                        {
                                            "type": "Slice",
                                            "name": "index_section:",
                                            "range": [
                                                195,
                                                197
                                            ],
                                            "children": [],
                                            "content": "and more)"
                                        }
                                    ],
                                    "content": "incorrect(and more)"
                                }
                            ],
                            "content": "missing or incorrect(and more)\n"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "links = find_links_in_text(content)",
                            "range": [
                                200,
                                206
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "links",
                                    "range": [
                                        200,
                                        206
                                    ],
                                    "children": [],
                                    "content": "503:When DDOS protection exists\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "find_links_in_text",
                                    "range": [
                                        202,
                                        205
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "find_links_in_text",
                                            "range": [
                                                202,
                                                205
                                            ],
                                            "children": [],
                                            "content": "When DDOS protection exists"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "content",
                                            "range": [
                                                204,
                                                205
                                            ],
                                            "children": [],
                                            "content": "protection exists"
                                        }
                                    ],
                                    "content": "When DDOS protection exists"
                                }
                            ],
                            "content": "503:When DDOS protection exists\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return links",
                            "range": [
                                208,
                                210
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "return",
                                    "range": [
                                        208,
                                        210
                                    ],
                                    "children": [],
                                    "content": "See more about"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "links",
                                    "range": [
                                        209,
                                        210
                                    ],
                                    "children": [],
                                    "content": "more about"
                                }
                            ],
                            "content": "See more about"
                        }
                    ],
                    "content": "response.\n\nCloudflare implements multiple network protections on a given link,\nthis script tries to detect if any of them exist in the response from request.\n\nCommon protections have the following HTTP code as a response:\n-403:When host header is missing or incorrect(and more)\n-503:When DDOS protection exists\n\nSee more about"
                }
            ],
            "content": "UA.\"\"\" \\n  \\n     user_agents = [ \\n         'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36', \\n         'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36', \\n     ] \\n  \\n     return random.choice(user_agents) \\n  \\n  \\n def get_host_from_link(link: str) -> str: \\n  \\n     host = link.split('://', 1)[1] if '://' in link else link \\n  \\n     # Remove routes, arguments and anchors \\n     if '/' in host: \\n         host = host.split('/', 1)[0] \\n  \\n     elif '?' in host: \\n         host = host.split('?', 1)[0] \\n  \\n     elif '#' in host: \\n         host = host.split('#', 1)[0] \\n  \\n     return host \\n  \\n  \\n def has_cloudflare_protection(resp: Response) -> bool: \\n     \"\"\"Checks if there is any cloudflare protection in the response.\n\nCloudflare implements multiple network protections on a given link,\nthis script tries to detect if any of them exist in the response from request.\n\nCommon protections have the following HTTP code as a response:\n-403:When host header is missing or incorrect(and more)\n-503:When DDOS protection exists\n\nSee more about"
        },
        {
            "type": "FunctionDecl",
            "name": "check_duplicate_links",
            "range": [
                212,
                318
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "links",
                    "range": [
                        215,
                        220
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "List[str]",
                            "range": [
                                217,
                                220
                            ],
                            "children": [],
                            "content": "://support"
                        }
                    ],
                    "content": "-https://support"
                },
                {
                    "type": "ReturnType",
                    "name": "Tuple[bool, List]",
                    "range": [
                        224,
                        229
                    ],
                    "children": [],
                    "content": "com/hc/en-"
                },
                {
                    "type": "Docstring",
                    "name": "\"Check for duplicated links. \\n  \\n     Returns a tuple with True or False and duplicate list. \\n     \"",
                    "range": [
                        232,
                        234
                    ],
                    "children": [],
                    "content": "articles/115003014512"
                },
                {
                    "type": "VariableDecl",
                    "name": "seen",
                    "range": [
                        237,
                        240
                    ],
                    "children": [],
                    "content": "xx-Client-"
                },
                {
                    "type": "VariableDecl",
                    "name": "duplicates",
                    "range": [
                        242,
                        245
                    ],
                    "children": [],
                    "content": "\n-https:"
                },
                {
                    "type": "VariableDecl",
                    "name": "has_duplicate",
                    "range": [
                        247,
                        249
                    ],
                    "children": [],
                    "content": "/support."
                },
                {
                    "type": "ForStatement",
                    "name": "for link in links",
                    "range": [
                        252,
                        301
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "link = link.rstrip('/')",
                            "range": [
                                258,
                                266
                            ],
                            "children": [],
                            "content": "us/articles/115003011431-Troubleshooting-Cloudflare"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if link not in seen",
                            "range": [
                                267,
                                280
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "seen[link] = 1",
                                    "range": [
                                        274,
                                        279
                                    ],
                                    "children": [],
                                    "content": "https://www."
                                }
                            ],
                            "content": "-5XX-errors\n-https://www.cloudflare"
                        },
                        {
                            "type": "ElseStatement",
                            "name": "else",
                            "range": [
                                281,
                                301
                            ],
                            "children": [
                                {
                                    "type": "IfStatement",
                                    "name": "if seen[link] == 1",
                                    "range": [
                                        284,
                                        300
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "duplicates.append(link)",
                                            "range": [
                                                294,
                                                299
                                            ],
                                            "children": [],
                                            "content": "com/a/888526\n"
                                        }
                                    ],
                                    "content": "ddos/\n-https://superuser.com/a/888526\n\n"
                                }
                            ],
                            "content": ".com/ddos/\n-https://superuser.com/a/888526\n\nDiscussions"
                        }
                    ],
                    "content": "com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\n-https://www.cloudflare.com/ddos/\n-https://superuser.com/a/888526\n\nDiscussions"
                },
                {
                    "type": "IfStatement",
                    "name": "if duplicates",
                    "range": [
                        302,
                        309
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "has_duplicate = True",
                            "range": [
                                306,
                                308
                            ],
                            "children": [],
                            "content": "requests:\n"
                        }
                    ],
                    "content": "in issues and pull requests:\n-"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return (has_duplicate, duplicates)",
                    "range": [
                        311,
                        316
                    ],
                    "children": [],
                    "content": "://github.com"
                }
            ],
            "content": "at:\n-https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error\n-https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\n-https://www.cloudflare.com/ddos/\n-https://superuser.com/a/888526\n\nDiscussions in issues and pull requests:\n-https://github.com/public"
        },
        {
            "type": "FunctionDecl",
            "name": "fake_user_agent",
            "range": [
                319,
                359
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        321,
                        322
                    ],
                    "children": [],
                    "content": "/public"
                },
                {
                    "type": "ReturnType",
                    "name": "str",
                    "range": [
                        323,
                        325
                    ],
                    "children": [],
                    "content": "-apis/"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        326,
                        359
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "",
                            "range": [
                                328,
                                330
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        329,
                                        329
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "2409\n-"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "user_agents",
                            "range": [
                                333,
                                349
                            ],
                            "children": [
                                {
                                    "type": "ArrayLiteral",
                                    "name": "",
                                    "range": [
                                        335,
                                        349
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "",
                                            "range": [
                                                337,
                                                337
                                            ],
                                            "children": [],
                                            "content": "com"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "",
                                            "range": [
                                                340,
                                                340
                                            ],
                                            "children": [],
                                            "content": "-"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "",
                                            "range": [
                                                343,
                                                343
                                            ],
                                            "children": [],
                                            "content": "public"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "",
                                            "range": [
                                                346,
                                                346
                                            ],
                                            "children": [],
                                            "content": "/"
                                        }
                                    ],
                                    "content": "github.com/public-apis/public-apis/issues/2960"
                                }
                            ],
                            "content": "//github.com/public-apis/public-apis/issues/2960"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                352,
                                358
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "random.choice",
                                    "range": [
                                        353,
                                        358
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "random.choice",
                                            "range": [
                                                353,
                                                355
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "random",
                                                    "range": [
                                                        353,
                                                        353
                                                    ],
                                                    "children": [],
                                                    "content": "\"\""
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "choice",
                                                    "range": [
                                                        355,
                                                        355
                                                    ],
                                                    "children": [],
                                                    "content": "if"
                                                }
                                            ],
                                            "content": "\"\"Checks if"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "user_agents",
                                            "range": [
                                                357,
                                                357
                                            ],
                                            "children": [],
                                            "content": "link"
                                        }
                                    ],
                                    "content": "\"\"Checks if a link is"
                                }
                            ],
                            "content": "\" \\n  \\n     code = resp.status_code \\n     server = resp.headers.get('Server') or resp.headers.get('server') \\n     cloudflare_flags = [ \\n         '403 Forbidden', \\n         'cloudflare', \\n         'Cloudflare', \\n         'Security check', \\n         'Please Wait... | Cloudflare', \\n         'We are checking your browser...', \\n         'Please stand by, while we are checking your browser...', \\n         'Checking your browser before accessing', \\n         'This process is automatic.', \\n         'Your browser will redirect to your requested content shortly.', \\n         'Please allow up to 5 seconds', \\n         'DDoS protection by', \\n         'Ray ID:', \\n         'Cloudflare Ray ID:', \\n         '_cf_chl', \\n         '_cf_chl_opt', \\n         '__cf_chl_rt_tk', \\n         'cf-spinner-please-wait', \\n         'cf-spinner-redirecting' \\n     ] \\n  \\n     if code in [403, 503] and server == 'cloudflare': \\n         html = resp.text \\n  \\n         flags_found = [flag in html for flag in cloudflare_flags] \\n         any_flag_found = any(flags_found) \\n  \\n         if any_flag_found: \\n             return True \\n  \\n     return False \\n  \\n  \\n def check_if_link_is_working(link: str) -> Tuple[bool, str]: \\n     \"\"\"Checks if a link is"
                        }
                    ],
                    "content": "pull/2409\n-https://github.com/public-apis/public-apis/issues/2960\n\"\"\" \\n  \\n     code = resp.status_code \\n     server = resp.headers.get('Server') or resp.headers.get('server') \\n     cloudflare_flags = [ \\n         '403 Forbidden', \\n         'cloudflare', \\n         'Cloudflare', \\n         'Security check', \\n         'Please Wait... | Cloudflare', \\n         'We are checking your browser...', \\n         'Please stand by, while we are checking your browser...', \\n         'Checking your browser before accessing', \\n         'This process is automatic.', \\n         'Your browser will redirect to your requested content shortly.', \\n         'Please allow up to 5 seconds', \\n         'DDoS protection by', \\n         'Ray ID:', \\n         'Cloudflare Ray ID:', \\n         '_cf_chl', \\n         '_cf_chl_opt', \\n         '__cf_chl_rt_tk', \\n         'cf-spinner-please-wait', \\n         'cf-spinner-redirecting' \\n     ] \\n  \\n     if code in [403, 503] and server == 'cloudflare': \\n         html = resp.text \\n  \\n         flags_found = [flag in html for flag in cloudflare_flags] \\n         any_flag_found = any(flags_found) \\n  \\n         if any_flag_found: \\n             return True \\n  \\n     return False \\n  \\n  \\n def check_if_link_is_working(link: str) -> Tuple[bool, str]: \\n     \"\"\"Checks if a link is working"
                }
            ],
            "content": "-apis/public-apis/pull/2409\n-https://github.com/public-apis/public-apis/issues/2960\n\"\"\" \\n  \\n     code = resp.status_code \\n     server = resp.headers.get('Server') or resp.headers.get('server') \\n     cloudflare_flags = [ \\n         '403 Forbidden', \\n         'cloudflare', \\n         'Cloudflare', \\n         'Security check', \\n         'Please Wait... | Cloudflare', \\n         'We are checking your browser...', \\n         'Please stand by, while we are checking your browser...', \\n         'Checking your browser before accessing', \\n         'This process is automatic.', \\n         'Your browser will redirect to your requested content shortly.', \\n         'Please allow up to 5 seconds', \\n         'DDoS protection by', \\n         'Ray ID:', \\n         'Cloudflare Ray ID:', \\n         '_cf_chl', \\n         '_cf_chl_opt', \\n         '__cf_chl_rt_tk', \\n         'cf-spinner-please-wait', \\n         'cf-spinner-redirecting' \\n     ] \\n  \\n     if code in [403, 503] and server == 'cloudflare': \\n         html = resp.text \\n  \\n         flags_found = [flag in html for flag in cloudflare_flags] \\n         any_flag_found = any(flags_found) \\n  \\n         if any_flag_found: \\n             return True \\n  \\n     return False \\n  \\n  \\n def check_if_link_is_working(link: str) -> Tuple[bool, str]: \\n     \"\"\"Checks if a link is working"
        },
        {
            "type": "FunctionDecl",
            "name": "get_host_from_link",
            "range": [
                362,
                471
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "link",
                    "range": [
                        365,
                        367
                    ],
                    "children": [],
                    "content": "error is identified"
                },
                {
                    "type": "ReturnType",
                    "name": "str",
                    "range": [
                        371,
                        371
                    ],
                    "children": [],
                    "content": "for"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        373,
                        471
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "host",
                            "range": [
                                375,
                                387
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "split",
                                    "range": [
                                        377,
                                        384
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "'://'",
                                            "range": [
                                                381,
                                                381
                                            ],
                                            "children": [],
                                            "content": "a"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "1",
                                            "range": [
                                                383,
                                                383
                                            ],
                                            "children": [],
                                            "content": "with"
                                        }
                                    ],
                                    "content": "the return will be a tuple with the"
                                },
                                {
                                    "type": "IndexAccess",
                                    "name": "",
                                    "range": [
                                        385,
                                        387
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "1",
                                            "range": [
                                                386,
                                                386
                                            ],
                                            "children": [],
                                            "content": "value"
                                        }
                                    ],
                                    "content": "first value True"
                                }
                            ],
                            "content": ",\nthe return will be a tuple with the first value True"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                388,
                                394
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        389,
                                        391
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "InExpression",
                                            "range": [
                                                389,
                                                391
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "'://'",
                                                    "range": [
                                                        389,
                                                        389
                                                    ],
                                                    "children": [],
                                                    "content": "the"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "link",
                                                    "range": [
                                                        391,
                                                        391
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": "the second\n"
                                        }
                                    ],
                                    "content": "the second\n"
                                },
                                {
                                    "type": "ElseStatement",
                                    "name": "",
                                    "range": [
                                        392,
                                        394
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "host",
                                            "range": [
                                                393,
                                                393
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "link",
                                                    "range": [
                                                        393,
                                                        393
                                                    ],
                                                    "children": [],
                                                    "content": "a"
                                                }
                                            ],
                                            "content": "a"
                                        }
                                    ],
                                    "content": "value a string"
                                }
                            ],
                            "content": "and the second\nvalue a string"
                        },
                        {
                            "type": "Comment",
                            "name": "# Remove routes, arguments and anchors",
                            "range": [
                                396,
                                403
                            ],
                            "children": [],
                            "content": "the error message.\n\nIf no"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                404,
                                423
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        405,
                                        407
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "InExpression",
                                            "range": [
                                                405,
                                                407
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "'/'",
                                                    "range": [
                                                        405,
                                                        405
                                                    ],
                                                    "children": [],
                                                    "content": "are"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "host",
                                                    "range": [
                                                        407,
                                                        407
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                }
                                            ],
                                            "content": "are identified,"
                                        }
                                    ],
                                    "content": "are identified,"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        409,
                                        423
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "host",
                                            "range": [
                                                410,
                                                422
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "split",
                                                    "range": [
                                                        412,
                                                        419
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "'/'",
                                                            "range": [
                                                                416,
                                                                416
                                                            ],
                                                            "children": [],
                                                            "content": "\n"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "1",
                                                            "range": [
                                                                418,
                                                                418
                                                            ],
                                                            "children": [],
                                                            "content": "value"
                                                        }
                                                    ],
                                                    "content": "a tuple with the\nfirst value False"
                                                },
                                                {
                                                    "type": "IndexAccess",
                                                    "name": "",
                                                    "range": [
                                                        420,
                                                        422
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "0",
                                                            "range": [
                                                                421,
                                                                421
                                                            ],
                                                            "children": [],
                                                            "content": "the"
                                                        }
                                                    ],
                                                    "content": "and the second"
                                                }
                                            ],
                                            "content": "will be a tuple with the\nfirst value False and the second"
                                        }
                                    ],
                                    "content": "return will be a tuple with the\nfirst value False and the second an"
                                }
                            ],
                            "content": "errors are identified,the return will be a tuple with the\nfirst value False and the second an"
                        },
                        {
                            "type": "ElifStatement",
                            "name": "",
                            "range": [
                                425,
                                444
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        426,
                                        428
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "InExpression",
                                            "range": [
                                                426,
                                                428
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "'?'",
                                                    "range": [
                                                        426,
                                                        426
                                                    ],
                                                    "children": [],
                                                    "content": "."
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "host",
                                                    "range": [
                                                        428,
                                                        428
                                                    ],
                                                    "children": [],
                                                    "content": "\"\""
                                                }
                                            ],
                                            "content": ".\n\"\""
                                        }
                                    ],
                                    "content": ".\n\"\""
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        430,
                                        444
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "host",
                                            "range": [
                                                431,
                                                443
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "split",
                                                    "range": [
                                                        433,
                                                        440
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "'?'",
                                                            "range": [
                                                                437,
                                                                437
                                                            ],
                                                            "children": [],
                                                            "content": "="
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "1",
                                                            "range": [
                                                                439,
                                                                439
                                                            ],
                                                            "children": [],
                                                            "content": "\n"
                                                        }
                                                    ],
                                                    "content": "=False\nerror_message=''\n\n"
                                                },
                                                {
                                                    "type": "IndexAccess",
                                                    "name": "",
                                                    "range": [
                                                        441,
                                                        443
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "0",
                                                            "range": [
                                                                442,
                                                                442
                                                            ],
                                                            "children": [],
                                                            "content": ":"
                                                        }
                                                    ],
                                                    "content": "try:\n"
                                                }
                                            ],
                                            "content": "\nhas_error=False\nerror_message=''\n\ntry:\n"
                                        }
                                    ],
                                    "content": "\n\nhas_error=False\nerror_message=''\n\ntry:\nresp"
                                }
                            ],
                            "content": "string.\n\"\"\"\n\nhas_error=False\nerror_message=''\n\ntry:\nresp"
                        },
                        {
                            "type": "ElifStatement",
                            "name": "",
                            "range": [
                                446,
                                465
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        447,
                                        449
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "InExpression",
                                            "range": [
                                                447,
                                                449
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "'#'",
                                                    "range": [
                                                        447,
                                                        447
                                                    ],
                                                    "children": [],
                                                    "content": "."
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "host",
                                                    "range": [
                                                        449,
                                                        449
                                                    ],
                                                    "children": [],
                                                    "content": "("
                                                }
                                            ],
                                            "content": ".get("
                                        }
                                    ],
                                    "content": ".get("
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        451,
                                        465
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "host",
                                            "range": [
                                                452,
                                                464
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "split",
                                                    "range": [
                                                        454,
                                                        461
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "'#'",
                                                            "range": [
                                                                458,
                                                                458
                                                            ],
                                                            "children": [],
                                                            "content": "{"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "1",
                                                            "range": [
                                                                460,
                                                                460
                                                            ],
                                                            "children": [],
                                                            "content": "'User-Agent'"
                                                        }
                                                    ],
                                                    "content": "25,headers={\n'User-Agent':"
                                                },
                                                {
                                                    "type": "IndexAccess",
                                                    "name": "",
                                                    "range": [
                                                        462,
                                                        464
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "0",
                                                            "range": [
                                                                463,
                                                                463
                                                            ],
                                                            "children": [],
                                                            "content": "("
                                                        }
                                                    ],
                                                    "content": "fake_user_agent()"
                                                }
                                            ],
                                            "content": "timeout=25,headers={\n'User-Agent':fake_user_agent()"
                                        }
                                    ],
                                    "content": ",timeout=25,headers={\n'User-Agent':fake_user_agent(),"
                                }
                            ],
                            "content": "requests.get(link,timeout=25,headers={\n'User-Agent':fake_user_agent(),"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                467,
                                469
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "host",
                                    "range": [
                                        468,
                                        468
                                    ],
                                    "children": [],
                                    "content": ":"
                                }
                            ],
                            "content": "'host':get_host_from_link"
                        }
                    ],
                    "content": "link occurs,\nthe return will be a tuple with the first value True and the second\nvalue a string containing the error message.\n\nIf no errors are identified,the return will be a tuple with the\nfirst value False and the second an empty string.\n\"\"\"\n\nhas_error=False\nerror_message=''\n\ntry:\nresp=requests.get(link,timeout=25,headers={\n'User-Agent':fake_user_agent(),\n'host':get_host_from_link(link"
                }
            ],
            "content": "\nIf an error is identified when the request for the link occurs,\nthe return will be a tuple with the first value True and the second\nvalue a string containing the error message.\n\nIf no errors are identified,the return will be a tuple with the\nfirst value False and the second an empty string.\n\"\"\"\n\nhas_error=False\nerror_message=''\n\ntry:\nresp=requests.get(link,timeout=25,headers={\n'User-Agent':fake_user_agent(),\n'host':get_host_from_link(link"
        },
        {
            "type": "FunctionDecl",
            "name": "has_cloudflare_protection",
            "range": [
                472,
                630
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "resp",
                    "range": [
                        475,
                        477
                    ],
                    "children": [],
                    "content": ")\n\n"
                },
                {
                    "type": "ReturnType",
                    "name": "bool",
                    "range": [
                        481,
                        481
                    ],
                    "children": [],
                    "content": "."
                },
                {
                    "type": "Docstring",
                    "name": "Docstring",
                    "range": [
                        484,
                        486
                    ],
                    "children": [],
                    "content": "\nif code"
                },
                {
                    "type": "Assignment",
                    "name": "code",
                    "range": [
                        489,
                        494
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "resp",
                            "range": [
                                491,
                                491
                            ],
                            "children": [],
                            "content": "not"
                        },
                        {
                            "type": "PropertyAccess",
                            "name": "status_code",
                            "range": [
                                492,
                                493
                            ],
                            "children": [],
                            "content": "has_cloudflare_protection("
                        }
                    ],
                    "content": "400and not has_cloudflare_protection(resp"
                },
                {
                    "type": "Assignment",
                    "name": "server",
                    "range": [
                        495,
                        514
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "resp",
                            "range": [
                                497,
                                497
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "PropertyAccess",
                            "name": "headers",
                            "range": [
                                498,
                                499
                            ],
                            "children": [],
                            "content": "has_error="
                        },
                        {
                            "type": "CallExpression",
                            "name": "get",
                            "range": [
                                500,
                                504
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "'Server'",
                                    "range": [
                                        503,
                                        503
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": "True\nerror_message=f"
                        },
                        {
                            "type": "LogicalExpression",
                            "name": "or",
                            "range": [
                                505,
                                505
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "resp",
                                    "range": [
                                        506,
                                        506
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "PropertyAccess",
                                    "name": "headers",
                                    "range": [
                                        507,
                                        508
                                    ],
                                    "children": [],
                                    "content": "\nexcept"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "get",
                                    "range": [
                                        509,
                                        513
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "'server'",
                                            "range": [
                                                512,
                                                512
                                            ],
                                            "children": [],
                                            "content": "."
                                        }
                                    ],
                                    "content": "requests.exceptions.SSLError"
                                }
                            ],
                            "content": "'ERR:CLT: {code} : {link}'"
                        }
                    ],
                    "content": "):\nhas_error=True\nerror_message=f 'ERR:CLT: {code} : {link}'\n\nexcept requests.exceptions.SSLError as"
                },
                {
                    "type": "Assignment",
                    "name": "cloudflare_flags",
                    "range": [
                        515,
                        575
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "ArrayExpression",
                            "range": [
                                517,
                                575
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "'403 Forbidden'",
                                    "range": [
                                        519,
                                        519
                                    ],
                                    "children": [],
                                    "content": "="
                                },
                                {
                                    "type": "Literal",
                                    "name": "'cloudflare'",
                                    "range": [
                                        522,
                                        522
                                    ],
                                    "children": [],
                                    "content": "error_message"
                                },
                                {
                                    "type": "Literal",
                                    "name": "'Cloudflare'",
                                    "range": [
                                        525,
                                        525
                                    ],
                                    "children": [],
                                    "content": "'ERR:SSL: {error} : {link}'"
                                },
                                {
                                    "type": "Literal",
                                    "name": "'Security check'",
                                    "range": [
                                        528,
                                        528
                                    ],
                                    "children": [],
                                    "content": "except"
                                },
                                {
                                    "type": "Literal",
                                    "name": "'Please Wait... | Cloudflare'",
                                    "range": [
                                        531,
                                        531
                                    ],
                                    "children": [],
                                    "content": "exceptions"
                                },
                                {
                                    "type": "Literal",
                                    "name": "'We are checking your browser...'",
                                    "range": [
                                        534,
                                        534
                                    ],
                                    "children": [],
                                    "content": "as"
                                },
                                {
                                    "type": "Literal",
                                    "name": "'Please stand by, while we are checking your browser...'",
                                    "range": [
                                        537,
                                        537
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Literal",
                                    "name": "'Checking your browser before accessing'",
                                    "range": [
                                        540,
                                        540
                                    ],
                                    "children": [],
                                    "content": "True"
                                },
                                {
                                    "type": "Literal",
                                    "name": "'This process is automatic.'",
                                    "range": [
                                        543,
                                        543
                                    ],
                                    "children": [],
                                    "content": "="
                                },
                                {
                                    "type": "Literal",
                                    "name": "'Your browser will redirect to your requested content shortly.'",
                                    "range": [
                                        546,
                                        546
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Literal",
                                    "name": "'Please allow up to 5 seconds'",
                                    "range": [
                                        549,
                                        549
                                    ],
                                    "children": [],
                                    "content": "("
                                },
                                {
                                    "type": "Literal",
                                    "name": "'DDoS protection by'",
                                    "range": [
                                        552,
                                        552
                                    ],
                                    "children": [],
                                    "content": "requests"
                                },
                                {
                                    "type": "Literal",
                                    "name": "'Ray ID:'",
                                    "range": [
                                        555,
                                        555
                                    ],
                                    "children": [],
                                    "content": "."
                                },
                                {
                                    "type": "Literal",
                                    "name": "'Cloudflare Ray ID:'",
                                    "range": [
                                        558,
                                        558
                                    ],
                                    "children": [],
                                    "content": ":"
                                },
                                {
                                    "type": "Literal",
                                    "name": "'_cf_chl'",
                                    "range": [
                                        561,
                                        561
                                    ],
                                    "children": [],
                                    "content": "="
                                },
                                {
                                    "type": "Literal",
                                    "name": "'_cf_chl_opt'",
                                    "range": [
                                        564,
                                        564
                                    ],
                                    "children": [],
                                    "content": "error_message"
                                },
                                {
                                    "type": "Literal",
                                    "name": "'__cf_chl_rt_tk'",
                                    "range": [
                                        567,
                                        567
                                    ],
                                    "children": [],
                                    "content": "'ERR:TMO: {link}'"
                                },
                                {
                                    "type": "Literal",
                                    "name": "'cf-spinner-please-wait'",
                                    "range": [
                                        570,
                                        570
                                    ],
                                    "children": [],
                                    "content": "except"
                                },
                                {
                                    "type": "Literal",
                                    "name": "'cf-spinner-redirecting'",
                                    "range": [
                                        573,
                                        573
                                    ],
                                    "children": [],
                                    "content": "exceptions"
                                }
                            ],
                            "content": "\nhas_error=True\nerror_message=f 'ERR:SSL: {error} : {link}'\n\nexcept requests.exceptions.ConnectionError as error:\nhas_error=True\nerror_message=f 'ERR:CNT: {error} : {link}'\n\nexcept(TimeoutError,requests.exceptions.ConnectTimeout):\nhas_error=True\nerror_message=f 'ERR:TMO: {link}'\n\nexcept requests.exceptions.TooManyRedirects"
                        }
                    ],
                    "content": "error:\nhas_error=True\nerror_message=f 'ERR:SSL: {error} : {link}'\n\nexcept requests.exceptions.ConnectionError as error:\nhas_error=True\nerror_message=f 'ERR:CNT: {error} : {link}'\n\nexcept(TimeoutError,requests.exceptions.ConnectTimeout):\nhas_error=True\nerror_message=f 'ERR:TMO: {link}'\n\nexcept requests.exceptions.TooManyRedirects"
                },
                {
                    "type": "IfStatement",
                    "name": "IfStatement",
                    "range": [
                        578,
                        626
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "Condition",
                            "range": [
                                579,
                                591
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "in",
                                    "range": [
                                        580,
                                        585
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "code",
                                            "range": [
                                                579,
                                                579
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "ArrayExpression",
                                            "name": "ArrayExpression",
                                            "range": [
                                                581,
                                                585
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "403",
                                                    "range": [
                                                        582,
                                                        582
                                                    ],
                                                    "children": [],
                                                    "content": "True"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "503",
                                                    "range": [
                                                        584,
                                                        584
                                                    ],
                                                    "children": [],
                                                    "content": "error_message"
                                                }
                                            ],
                                            "content": "=True\nerror_message="
                                        }
                                    ],
                                    "content": "has_error=True\nerror_message="
                                },
                                {
                                    "type": "LogicalExpression",
                                    "name": "and",
                                    "range": [
                                        586,
                                        586
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "==",
                                            "range": [
                                                587,
                                                590
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "server",
                                                    "range": [
                                                        587,
                                                        587
                                                    ],
                                                    "children": [],
                                                    "content": "'ERR:TMR: {error} : {link}'"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "'cloudflare'",
                                                    "range": [
                                                        590,
                                                        590
                                                    ],
                                                    "children": [],
                                                    "content": "except"
                                                }
                                            ],
                                            "content": "'ERR:TMR: {error} : {link}'\n\nexcept"
                                        }
                                    ],
                                    "content": "f"
                                }
                            ],
                            "content": "\nhas_error=True\nerror_message=f 'ERR:TMR: {error} : {link}'\n\nexcept("
                        },
                        {
                            "type": "Block",
                            "name": "Block",
                            "range": [
                                592,
                                626
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "html",
                                    "range": [
                                        593,
                                        598
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "resp",
                                            "range": [
                                                595,
                                                595
                                            ],
                                            "children": [],
                                            "content": "."
                                        },
                                        {
                                            "type": "PropertyAccess",
                                            "name": "text",
                                            "range": [
                                                596,
                                                597
                                            ],
                                            "children": [],
                                            "content": "exceptions."
                                        }
                                    ],
                                    "content": ",requests.exceptions.RequestException"
                                },
                                {
                                    "type": "Assignment",
                                    "name": "flags_found",
                                    "range": [
                                        600,
                                        610
                                    ],
                                    "children": [
                                        {
                                            "type": "ListComprehension",
                                            "name": "ListComprehension",
                                            "range": [
                                                602,
                                                610
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "flag",
                                                    "range": [
                                                        603,
                                                        603
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "InKeyword",
                                                    "name": "in",
                                                    "range": [
                                                        604,
                                                        604
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "html",
                                                            "range": [
                                                                605,
                                                                605
                                                            ],
                                                            "children": [],
                                                            "content": "="
                                                        }
                                                    ],
                                                    "content": "has_error"
                                                },
                                                {
                                                    "type": "ForKeyword",
                                                    "name": "for",
                                                    "range": [
                                                        606,
                                                        606
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "flag",
                                                            "range": [
                                                                607,
                                                                607
                                                            ],
                                                            "children": [],
                                                            "content": "\n"
                                                        },
                                                        {
                                                            "type": "InKeyword",
                                                            "name": "in",
                                                            "range": [
                                                                608,
                                                                608
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "cloudflare_flags",
                                                                    "range": [
                                                                        609,
                                                                        609
                                                                    ],
                                                                    "children": [],
                                                                    "content": "="
                                                                }
                                                            ],
                                                            "content": "error_message"
                                                        }
                                                    ],
                                                    "content": "True"
                                                }
                                            ],
                                            "content": ":\nhas_error=True\nerror_message=f"
                                        }
                                    ],
                                    "content": "as error:\nhas_error=True\nerror_message=f"
                                },
                                {
                                    "type": "Assignment",
                                    "name": "any_flag_found",
                                    "range": [
                                        612,
                                        618
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "any",
                                            "range": [
                                                614,
                                                617
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "flags_found",
                                                    "range": [
                                                        616,
                                                        616
                                                    ],
                                                    "children": [],
                                                    "content": "has_error"
                                                }
                                            ],
                                            "content": "return(has_error,"
                                        }
                                    ],
                                    "content": "\n\nreturn(has_error,error_message"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "IfStatement",
                                    "range": [
                                        620,
                                        626
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "Condition",
                                            "range": [
                                                621,
                                                621
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "any_flag_found",
                                                    "range": [
                                                        621,
                                                        621
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "Block",
                                            "name": "Block",
                                            "range": [
                                                622,
                                                626
                                            ],
                                            "children": [
                                                {
                                                    "type": "ReturnStatement",
                                                    "name": "ReturnStatement",
                                                    "range": [
                                                        624,
                                                        625
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "True",
                                                            "range": [
                                                                625,
                                                                625
                                                            ],
                                                            "children": [],
                                                            "content": "("
                                                        }
                                                    ],
                                                    "content": "check_if_list_of_links_are_working("
                                                }
                                            ],
                                            "content": "\ndef check_if_list_of_links_are_working(list_of_links"
                                        }
                                    ],
                                    "content": "\n\n\ndef check_if_list_of_links_are_working(list_of_links"
                                }
                            ],
                            "content": "Exception,requests.exceptions.RequestException)as error:\nhas_error=True\nerror_message=f 'ERR:UKN: {error} : {link}'\n\nreturn(has_error,error_message)\n\n\ndef check_if_list_of_links_are_working(list_of_links"
                        }
                    ],
                    "content": ":\nhas_error=True\nerror_message=f 'ERR:TMR: {error} : {link}'\n\nexcept(Exception,requests.exceptions.RequestException)as error:\nhas_error=True\nerror_message=f 'ERR:UKN: {error} : {link}'\n\nreturn(has_error,error_message)\n\n\ndef check_if_list_of_links_are_working(list_of_links"
                },
                {
                    "type": "ReturnStatement",
                    "name": "ReturnStatement",
                    "range": [
                        628,
                        629
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "False",
                            "range": [
                                629,
                                629
                            ],
                            "children": [],
                            "content": "["
                        }
                    ],
                    "content": "List["
                }
            ],
            "content": ")\n})\n\ncode=resp.status_code\n\nif code>=400and not has_cloudflare_protection(resp):\nhas_error=True\nerror_message=f 'ERR:CLT: {code} : {link}'\n\nexcept requests.exceptions.SSLError as error:\nhas_error=True\nerror_message=f 'ERR:SSL: {error} : {link}'\n\nexcept requests.exceptions.ConnectionError as error:\nhas_error=True\nerror_message=f 'ERR:CNT: {error} : {link}'\n\nexcept(TimeoutError,requests.exceptions.ConnectTimeout):\nhas_error=True\nerror_message=f 'ERR:TMO: {link}'\n\nexcept requests.exceptions.TooManyRedirects as error:\nhas_error=True\nerror_message=f 'ERR:TMR: {error} : {link}'\n\nexcept(Exception,requests.exceptions.RequestException)as error:\nhas_error=True\nerror_message=f 'ERR:UKN: {error} : {link}'\n\nreturn(has_error,error_message)\n\n\ndef check_if_list_of_links_are_working(list_of_links:List[str"
        },
        {
            "type": "FunctionDecl",
            "name": "check_if_link_is_working",
            "range": [
                633,
                844
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "link",
                    "range": [
                        636,
                        638
                    ],
                    "children": [],
                    "content": "[str]"
                },
                {
                    "type": "ReturnType",
                    "name": "Tuple[bool, str]",
                    "range": [
                        642,
                        647
                    ],
                    "children": [],
                    "content": "=[]\nfor link"
                },
                {
                    "type": "Docstring",
                    "name": "Docstring",
                    "range": [
                        650,
                        652
                    ],
                    "children": [],
                    "content": ":\nhas_error"
                },
                {
                    "type": "VariableDecl",
                    "name": "has_error",
                    "range": [
                        655,
                        657
                    ],
                    "children": [],
                    "content": "=check_if_link_is_working("
                },
                {
                    "type": "VariableDecl",
                    "name": "error_message",
                    "range": [
                        659,
                        661
                    ],
                    "children": [],
                    "content": ")\n\n"
                },
                {
                    "type": "TryBlock",
                    "name": "TryBlock",
                    "range": [
                        664,
                        835
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "requests.get",
                            "range": [
                                669,
                                698
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "link",
                                    "range": [
                                        673,
                                        673
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "KeywordArgument",
                                    "name": "timeout",
                                    "range": [
                                        675,
                                        677
                                    ],
                                    "children": [],
                                    "content": "error_messages\n\n"
                                },
                                {
                                    "type": "KeywordArgument",
                                    "name": "headers",
                                    "range": [
                                        679,
                                        697
                                    ],
                                    "children": [
                                        {
                                            "type": "Dictionary",
                                            "name": "headers",
                                            "range": [
                                                681,
                                                697
                                            ],
                                            "children": [
                                                {
                                                    "type": "KeyValuePair",
                                                    "name": "'User-Agent'",
                                                    "range": [
                                                        683,
                                                        687
                                                    ],
                                                    "children": [],
                                                    "content": ":List[str]"
                                                },
                                                {
                                                    "type": "KeyValuePair",
                                                    "name": "'host'",
                                                    "range": [
                                                        690,
                                                        696
                                                    ],
                                                    "children": [],
                                                    "content": ">None:\n\nprint("
                                                }
                                            ],
                                            "content": "(links:List[str])->None:\n\nprint('Checking for duplicate links...'"
                                        }
                                    ],
                                    "content": "def start_duplicate_links_checker(links:List[str])->None:\n\nprint('Checking for duplicate links...'"
                                }
                            ],
                            "content": "(error_message)\n\nreturn error_messages\n\n\ndef start_duplicate_links_checker(links:List[str])->None:\n\nprint('Checking for duplicate links...')"
                        },
                        {
                            "type": "VariableAssignment",
                            "name": "code",
                            "range": [
                                701,
                                706
                            ],
                            "children": [],
                            "content": "has_duplicate_link,duplicates_links=check_duplicate_links("
                        },
                        {
                            "type": "IfStatement",
                            "name": "IfStatement",
                            "range": [
                                708,
                                729
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "Condition",
                                    "range": [
                                        709,
                                        719
                                    ],
                                    "children": [],
                                    "content": "\n\nif has_duplicate_link:\nprint(f 'Found duplicate links:')"
                                },
                                {
                                    "type": "VariableAssignment",
                                    "name": "has_error",
                                    "range": [
                                        721,
                                        723
                                    ],
                                    "children": [],
                                    "content": "\nfor duplicate_link"
                                },
                                {
                                    "type": "VariableAssignment",
                                    "name": "error_message",
                                    "range": [
                                        725,
                                        729
                                    ],
                                    "children": [],
                                    "content": "duplicates_links:\nprint("
                                }
                            ],
                            "content": ")\n\nif has_duplicate_link:\nprint(f 'Found duplicate links:')\n\nfor duplicate_link in duplicates_links:\nprint("
                        },
                        {
                            "type": "ExceptBlock",
                            "name": "ExceptBlock",
                            "range": [
                                731,
                                749
                            ],
                            "children": [
                                {
                                    "type": "Exception",
                                    "name": "SSLError",
                                    "range": [
                                        736,
                                        736
                                    ],
                                    "children": [],
                                    "content": "exit"
                                },
                                {
                                    "type": "VariableAssignment",
                                    "name": "has_error",
                                    "range": [
                                        741,
                                        743
                                    ],
                                    "children": [],
                                    "content": "else:\n"
                                },
                                {
                                    "type": "VariableAssignment",
                                    "name": "error_message",
                                    "range": [
                                        745,
                                        749
                                    ],
                                    "children": [],
                                    "content": "('No duplicate links.')\n\n"
                                }
                            ],
                            "content": ")\n\nsys.exit(1)\nelse:\nprint('No duplicate links.')\n\n"
                        },
                        {
                            "type": "ExceptBlock",
                            "name": "ExceptBlock",
                            "range": [
                                751,
                                769
                            ],
                            "children": [
                                {
                                    "type": "Exception",
                                    "name": "ConnectionError",
                                    "range": [
                                        756,
                                        756
                                    ],
                                    "children": [],
                                    "content": "List"
                                },
                                {
                                    "type": "VariableAssignment",
                                    "name": "has_error",
                                    "range": [
                                        761,
                                        763
                                    ],
                                    "children": [],
                                    "content": "->None"
                                },
                                {
                                    "type": "VariableAssignment",
                                    "name": "error_message",
                                    "range": [
                                        765,
                                        769
                                    ],
                                    "children": [],
                                    "content": "\n\nprint(f"
                                }
                            ],
                            "content": "def start_links_working_checker(links:List[str])->None:\n\nprint(f"
                        },
                        {
                            "type": "ExceptBlock",
                            "name": "ExceptBlock",
                            "range": [
                                771,
                                791
                            ],
                            "children": [
                                {
                                    "type": "Exception",
                                    "name": "TimeoutError",
                                    "range": [
                                        773,
                                        773
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Exception",
                                    "name": "ConnectTimeout",
                                    "range": [
                                        779,
                                        779
                                    ],
                                    "children": [],
                                    "content": ")"
                                },
                                {
                                    "type": "VariableAssignment",
                                    "name": "has_error",
                                    "range": [
                                        783,
                                        785
                                    ],
                                    "children": [],
                                    "content": ":\n\n"
                                },
                                {
                                    "type": "VariableAssignment",
                                    "name": "error_message",
                                    "range": [
                                        787,
                                        791
                                    ],
                                    "children": [],
                                    "content": "=len(errors)"
                                }
                            ],
                            "content": ")\n\nerrors=check_if_list_of_links_are_working(links)\nif errors:\n\nnum_errors=len(errors)"
                        },
                        {
                            "type": "ExceptBlock",
                            "name": "ExceptBlock",
                            "range": [
                                793,
                                811
                            ],
                            "children": [
                                {
                                    "type": "Exception",
                                    "name": "TooManyRedirects",
                                    "range": [
                                        798,
                                        798
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "VariableAssignment",
                                    "name": "has_error",
                                    "range": [
                                        803,
                                        805
                                    ],
                                    "children": [],
                                    "content": "errors:\n"
                                },
                                {
                                    "type": "VariableAssignment",
                                    "name": "error_message",
                                    "range": [
                                        807,
                                        811
                                    ],
                                    "children": [],
                                    "content": "(error_message)\n\n"
                                }
                            ],
                            "content": "print(f 'Apparently {num_errors} links are not working properly. See in:')\n\nfor error_message in errors:\nprint(error_message)\n\n"
                        },
                        {
                            "type": "ExceptBlock",
                            "name": "ExceptBlock",
                            "range": [
                                813,
                                835
                            ],
                            "children": [
                                {
                                    "type": "Exception",
                                    "name": "Exception",
                                    "range": [
                                        815,
                                        815
                                    ],
                                    "children": [],
                                    "content": "("
                                },
                                {
                                    "type": "Exception",
                                    "name": "RequestException",
                                    "range": [
                                        821,
                                        821
                                    ],
                                    "children": [],
                                    "content": "def"
                                },
                                {
                                    "type": "VariableAssignment",
                                    "name": "has_error",
                                    "range": [
                                        827,
                                        829
                                    ],
                                    "children": [],
                                    "content": ",only_duplicate_links_checker:"
                                },
                                {
                                    "type": "VariableAssignment",
                                    "name": "error_message",
                                    "range": [
                                        831,
                                        835
                                    ],
                                    "children": [],
                                    "content": ")->None:"
                                }
                            ],
                            "content": ".exit(1)\n\n\ndef main(filename:str,only_duplicate_links_checker:bool)->None:"
                        }
                    ],
                    "content": ":\nerror_messages.append(error_message)\n\nreturn error_messages\n\n\ndef start_duplicate_links_checker(links:List[str])->None:\n\nprint('Checking for duplicate links...')\n\nhas_duplicate_link,duplicates_links=check_duplicate_links(links)\n\nif has_duplicate_link:\nprint(f 'Found duplicate links:')\n\nfor duplicate_link in duplicates_links:\nprint(duplicate_link)\n\nsys.exit(1)\nelse:\nprint('No duplicate links.')\n\n\ndef start_links_working_checker(links:List[str])->None:\n\nprint(f 'Checking if {len(links)} links are working...')\n\nerrors=check_if_list_of_links_are_working(links)\nif errors:\n\nnum_errors=len(errors)\nprint(f 'Apparently {num_errors} links are not working properly. See in:')\n\nfor error_message in errors:\nprint(error_message)\n\nsys.exit(1)\n\n\ndef main(filename:str,only_duplicate_links_checker:bool)->None:"
                },
                {
                    "type": "ReturnStatement",
                    "name": "ReturnStatement",
                    "range": [
                        837,
                        843
                    ],
                    "children": [
                        {
                            "type": "Tuple",
                            "name": "Tuple",
                            "range": [
                                838,
                                842
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "has_error",
                                    "range": [
                                        839,
                                        839
                                    ],
                                    "children": [],
                                    "content": "="
                                },
                                {
                                    "type": "Identifier",
                                    "name": "error_message",
                                    "range": [
                                        841,
                                        841
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "links=find_links_in_file(filename"
                        }
                    ],
                    "content": "\nlinks=find_links_in_file(filename)"
                }
            ],
            "content": "->List[str]:\nerror_messages=[]\nfor link in list_of_links:\nhas_error,error_message=check_if_link_is_working(link)\n\nif has_error:\nerror_messages.append(error_message)\n\nreturn error_messages\n\n\ndef start_duplicate_links_checker(links:List[str])->None:\n\nprint('Checking for duplicate links...')\n\nhas_duplicate_link,duplicates_links=check_duplicate_links(links)\n\nif has_duplicate_link:\nprint(f 'Found duplicate links:')\n\nfor duplicate_link in duplicates_links:\nprint(duplicate_link)\n\nsys.exit(1)\nelse:\nprint('No duplicate links.')\n\n\ndef start_links_working_checker(links:List[str])->None:\n\nprint(f 'Checking if {len(links)} links are working...')\n\nerrors=check_if_list_of_links_are_working(links)\nif errors:\n\nnum_errors=len(errors)\nprint(f 'Apparently {num_errors} links are not working properly. See in:')\n\nfor error_message in errors:\nprint(error_message)\n\nsys.exit(1)\n\n\ndef main(filename:str,only_duplicate_links_checker:bool)->None:\n\nlinks=find_links_in_file(filename)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "check_if_list_of_links_are_working",
            "range": [
                846,
                899
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "list_of_links",
                    "range": [
                        849,
                        854
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "List[str]",
                            "range": [
                                851,
                                854
                            ],
                            "content": "\nif not only_duplicate_links_checker"
                        }
                    ],
                    "content": ")\n\nif not only_duplicate_links_checker"
                },
                {
                    "type": "ReturnType",
                    "name": "List[str]",
                    "range": [
                        858,
                        861
                    ],
                    "content": "(links)\n"
                },
                {
                    "type": "BlockStatement",
                    "range": [
                        863,
                        899
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "error_messages",
                            "range": [
                                864,
                                867
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        865,
                                        867
                                    ],
                                    "children": [
                                        {
                                            "type": "ArrayLiteral",
                                            "name": "[]",
                                            "range": [
                                                866,
                                                867
                                            ],
                                            "content": "=="
                                        }
                                    ],
                                    "content": "__name__=="
                                }
                            ],
                            "content": "if __name__=="
                        },
                        {
                            "type": "ForStatement",
                            "range": [
                                869,
                                895
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "link",
                                    "range": [
                                        870,
                                        870
                                    ],
                                    "content": "\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "list_of_links",
                                    "range": [
                                        872,
                                        872
                                    ],
                                    "content": "="
                                },
                                {
                                    "type": "BlockStatement",
                                    "range": [
                                        874,
                                        895
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "name": "has_error, error_message",
                                            "range": [
                                                875,
                                                882
                                            ],
                                            "children": [
                                                {
                                                    "type": "Assignment",
                                                    "name": "=",
                                                    "range": [
                                                        878,
                                                        882
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "check_if_link_is_working",
                                                            "range": [
                                                                879,
                                                                882
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "link",
                                                                    "range": [
                                                                        881,
                                                                        881
                                                                    ],
                                                                    "content": "="
                                                                }
                                                            ],
                                                            "content": "\nonly_duplicate_links_checker=False"
                                                        }
                                                    ],
                                                    "content": ")\nonly_duplicate_links_checker=False"
                                                }
                                            ],
                                            "content": "sys.argv)\nonly_duplicate_links_checker=False"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "range": [
                                                885,
                                                895
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "has_error",
                                                    "range": [
                                                        886,
                                                        886
                                                    ],
                                                    "content": "num_args"
                                                },
                                                {
                                                    "type": "BlockStatement",
                                                    "range": [
                                                        888,
                                                        895
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "error_messages.append(error_message)",
                                                            "range": [
                                                                889,
                                                                894
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "append",
                                                                    "range": [
                                                                        891,
                                                                        894
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "error_message",
                                                                            "range": [
                                                                                893,
                                                                                893
                                                                            ],
                                                                            "content": "'No .md file passed'"
                                                                        }
                                                                    ],
                                                                    "content": "print('No .md file passed')"
                                                                }
                                                            ],
                                                            "content": ":\nprint('No .md file passed')"
                                                        }
                                                    ],
                                                    "content": "2:\nprint('No .md file passed')\n"
                                                }
                                            ],
                                            "content": "if num_args<2:\nprint('No .md file passed')\n"
                                        }
                                    ],
                                    "content": "(sys.argv)\nonly_duplicate_links_checker=False\n\nif num_args<2:\nprint('No .md file passed')\n"
                                }
                            ],
                            "content": ":\nnum_args=len(sys.argv)\nonly_duplicate_links_checker=False\n\nif num_args<2:\nprint('No .md file passed')\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return error_messages",
                            "range": [
                                897,
                                898
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "error_messages",
                                    "range": [
                                        898,
                                        898
                                    ],
                                    "content": "exit"
                                }
                            ],
                            "content": ".exit"
                        }
                    ],
                    "content": "\nif __name__=='__main__':\nnum_args=len(sys.argv)\nonly_duplicate_links_checker=False\n\nif num_args<2:\nprint('No .md file passed')\nsys.exit("
                }
            ],
            "content": "start_duplicate_links_checker(links)\n\nif not only_duplicate_links_checker:\nstart_links_working_checker(links)\n\n\nif __name__=='__main__':\nnum_args=len(sys.argv)\nonly_duplicate_links_checker=False\n\nif num_args<2:\nprint('No .md file passed')\nsys.exit("
        },
        {
            "type": "FunctionDecl",
            "name": "start_duplicate_links_checker",
            "range": [
                902,
                973
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "links",
                    "range": [
                        905,
                        910
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "List[str]",
                            "range": [
                                906,
                                910
                            ],
                            "children": [],
                            "content": "=3:\nthird_arg"
                        }
                    ],
                    "content": "==3:\nthird_arg"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        912,
                        914
                    ],
                    "children": [],
                    "content": "sys.argv"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        916,
                        973
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                918,
                                922
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "print",
                                    "range": [
                                        918,
                                        921
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "'Checking for duplicate links...'",
                                            "range": [
                                                920,
                                                920
                                            ],
                                            "children": [],
                                            "content": "("
                                        }
                                    ],
                                    "content": ".lower()"
                                }
                            ],
                            "content": ".lower()\n"
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "",
                            "range": [
                                924,
                                932
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclarator",
                                    "name": "has_duplicate_link",
                                    "range": [
                                        924,
                                        924
                                    ],
                                    "children": [],
                                    "content": "if"
                                },
                                {
                                    "type": "VariableDeclarator",
                                    "name": "duplicates_links",
                                    "range": [
                                        926,
                                        926
                                    ],
                                    "children": [],
                                    "content": "="
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "check_duplicate_links",
                                    "range": [
                                        928,
                                        931
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "links",
                                            "range": [
                                                930,
                                                930
                                            ],
                                            "children": [],
                                            "content": "third_arg"
                                        }
                                    ],
                                    "content": "'-odlc' or third_arg="
                                }
                            ],
                            "content": "if third_arg=='-odlc' or third_arg=="
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                934,
                                971
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "",
                                    "range": [
                                        938,
                                        943
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "print",
                                            "range": [
                                                938,
                                                942
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "'Found duplicate links:'",
                                                    "range": [
                                                        941,
                                                        941
                                                    ],
                                                    "children": [],
                                                    "content": ":"
                                                }
                                            ],
                                            "content": "True\nelse:\n"
                                        }
                                    ],
                                    "content": "True\nelse:\nprint"
                                },
                                {
                                    "type": "ForStatement",
                                    "name": "",
                                    "range": [
                                        945,
                                        955
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDeclaration",
                                            "name": "duplicate_link",
                                            "range": [
                                                946,
                                                946
                                            ],
                                            "children": [],
                                            "content": "'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]'"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "duplicates_links",
                                            "range": [
                                                948,
                                                948
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                950,
                                                955
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        951,
                                                        954
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "print",
                                                            "range": [
                                                                951,
                                                                953
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "duplicate_link",
                                                                    "range": [
                                                                        953,
                                                                        953
                                                                    ],
                                                                    "children": [],
                                                                    "content": "1"
                                                                }
                                                            ],
                                                            "content": "exit(1"
                                                        }
                                                    ],
                                                    "content": "exit(1)"
                                                }
                                            ],
                                            "content": ".exit(1)\n"
                                        }
                                    ],
                                    "content": "f 'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\nsys.exit(1)\n"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "",
                                    "range": [
                                        957,
                                        963
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "sys.exit",
                                            "range": [
                                                957,
                                                962
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "1",
                                                    "range": [
                                                        961,
                                                        961
                                                    ],
                                                    "children": [],
                                                    "content": "argv"
                                                }
                                            ],
                                            "content": "filename=sys.argv["
                                        }
                                    ],
                                    "content": "filename=sys.argv[1"
                                },
                                {
                                    "type": "ElseStatement",
                                    "name": "",
                                    "range": [
                                        964,
                                        971
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                967,
                                                970
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "print",
                                                    "range": [
                                                        967,
                                                        969
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "'No duplicate links.'",
                                                            "range": [
                                                                969,
                                                                969
                                                            ],
                                                            "children": [],
                                                            "content": "filename"
                                                        }
                                                    ],
                                                    "content": "main(filename"
                                                }
                                            ],
                                            "content": "main(filename,"
                                        }
                                    ],
                                    "content": "]\n\nmain(filename,only_duplicate_links_checker"
                                }
                            ],
                            "content": ":\nonly_duplicate_links_checker=True\nelse:\nprint(f 'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\nsys.exit(1)\n\nfilename=sys.argv[1]\n\nmain(filename,only_duplicate_links_checker"
                        }
                    ],
                    "content": "2].lower()\n\nif third_arg=='-odlc' or third_arg=='--only_duplicate_links_checker':\nonly_duplicate_links_checker=True\nelse:\nprint(f 'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\nsys.exit(1)\n\nfilename=sys.argv[1]\n\nmain(filename,only_duplicate_links_checker)\n"
                }
            ],
            "content": "\nelif num_args==3:\nthird_arg=sys.argv[2].lower()\n\nif third_arg=='-odlc' or third_arg=='--only_duplicate_links_checker':\nonly_duplicate_links_checker=True\nelse:\nprint(f 'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\nsys.exit(1)\n\nfilename=sys.argv[1]\n\nmain(filename,only_duplicate_links_checker)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "start_links_working_checker",
            "range": [
                974,
                987
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "links",
                    "range": [
                        977,
                        982
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        984,
                        986
                    ],
                    "children": [],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "ExpressionStatement",
            "name": "print",
            "range": [
                990,
                994
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "'Checking if {len(links)} links are working...'",
                    "range": [
                        993,
                        993
                    ],
                    "children": [],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "AssignmentExpression",
            "name": "errors",
            "range": [
                997,
                1002
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "check_if_list_of_links_are_working",
                    "range": [
                        999,
                        1002
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "links",
                            "range": [
                                1001,
                                1001
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "IfStatement",
            "name": "if",
            "range": [
                1004,
                1022
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "errors",
                    "range": [
                        1005,
                        1005
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "AssignmentExpression",
                    "name": "num_errors",
                    "range": [
                        1009,
                        1014
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "len",
                            "range": [
                                1011,
                                1014
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "errors",
                                    "range": [
                                        1013,
                                        1013
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "ExpressionStatement",
                    "name": "print",
                    "range": [
                        1016,
                        1020
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "'Apparently {num_errors} links are not working properly. See in:'",
                            "range": [
                                1019,
                                1019
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "ForStatement",
                    "name": "for",
                    "range": [
                        1023,
                        1033
                    ],
                    "children": [
                        {
                            "type": "VariableDeclarator",
                            "name": "error_message",
                            "range": [
                                1024,
                                1024
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Identifier",
                            "name": "errors",
                            "range": [
                                1026,
                                1026
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "print",
                            "range": [
                                1029,
                                1032
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "error_message",
                                    "range": [
                                        1031,
                                        1031
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "ExpressionStatement",
                    "name": "sys.exit",
                    "range": [
                        1035,
                        1040
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "1",
                            "range": [
                                1039,
                                1039
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "FunctionDecl",
            "name": "main",
            "range": [
                1044,
                1086
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "filename",
                    "range": [
                        1047,
                        1049
                    ],
                    "content": ""
                },
                {
                    "type": "Parameter",
                    "name": "only_duplicate_links_checker",
                    "range": [
                        1051,
                        1053
                    ],
                    "content": ""
                },
                {
                    "type": "BlockStatement",
                    "range": [
                        1058,
                        1086
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "links",
                            "range": [
                                1061,
                                1066
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "range": [
                                        1062,
                                        1066
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "find_links_in_file",
                                            "range": [
                                                1063,
                                                1066
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "filename",
                                                    "range": [
                                                        1065,
                                                        1065
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ExpressionStatement",
                            "range": [
                                1069,
                                1072
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "start_duplicate_links_checker",
                                    "range": [
                                        1069,
                                        1072
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "links",
                                            "range": [
                                                1071,
                                                1071
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "range": [
                                1075,
                                1084
                            ],
                            "children": [
                                {
                                    "type": "UnaryExpression",
                                    "operator": "not",
                                    "range": [
                                        1076,
                                        1077
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "only_duplicate_links_checker",
                                            "range": [
                                                1077,
                                                1077
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                },
                                {
                                    "type": "BlockStatement",
                                    "range": [
                                        1078,
                                        1084
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "range": [
                                                1080,
                                                1083
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "start_links_working_checker",
                                                    "range": [
                                                        1080,
                                                        1083
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "links",
                                                            "range": [
                                                                1082,
                                                                1082
                                                            ],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "VariableDeclaration",
            "name": "num_args",
            "range": [
                1094,
                1102
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        1095,
                        1101
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "len",
                            "range": [
                                1096,
                                1101
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "sys.argv",
                                    "range": [
                                        1098,
                                        1100
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "VariableDeclaration",
            "name": "only_duplicate_links_checker",
            "range": [
                1103,
                1106
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        1104,
                        1105
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "False",
                            "range": [
                                1105,
                                1105
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                1108,
                1125
            ],
            "children": [
                {
                    "type": "BinaryExpression",
                    "name": "<",
                    "range": [
                        1110,
                        1111
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "num_args",
                            "range": [
                                1109,
                                1109
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Literal",
                            "name": "2",
                            "range": [
                                1111,
                                1111
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1112,
                        1125
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "print",
                            "range": [
                                1114,
                                1117
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "'No .md file passed'",
                                    "range": [
                                        1116,
                                        1116
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "CallExpression",
                            "name": "sys.exit",
                            "range": [
                                1119,
                                1124
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "1",
                                    "range": [
                                        1123,
                                        1123
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                1126,
                1178
            ],
            "children": [
                {
                    "type": "BinaryExpression",
                    "name": "==",
                    "range": [
                        1128,
                        1129
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "num_args",
                            "range": [
                                1127,
                                1127
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Literal",
                            "name": "3",
                            "range": [
                                1130,
                                1130
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1131,
                        1178
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "third_arg",
                            "range": [
                                1133,
                                1145
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1134,
                                        1144
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "lower",
                                            "range": [
                                                1142,
                                                1144
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "sys.argv[2]",
                                                    "range": [
                                                        1135,
                                                        1140
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                1147,
                                1177
                            ],
                            "children": [
                                {
                                    "type": "LogicalExpression",
                                    "name": "or",
                                    "range": [
                                        1152,
                                        1155
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "==",
                                            "range": [
                                                1149,
                                                1150
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "third_arg",
                                                    "range": [
                                                        1148,
                                                        1148
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "'-odlc'",
                                                    "range": [
                                                        1151,
                                                        1151
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "==",
                                            "range": [
                                                1154,
                                                1155
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "third_arg",
                                                    "range": [
                                                        1153,
                                                        1153
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "'--only_duplicate_links_checker'",
                                                    "range": [
                                                        1156,
                                                        1156
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        1157,
                                        1177
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "=",
                                            "range": [
                                                1160,
                                                1161
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "only_duplicate_links_checker",
                                                    "range": [
                                                        1159,
                                                        1159
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "True",
                                                    "range": [
                                                        1161,
                                                        1161
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                },
                                {
                                    "type": "ElseStatement",
                                    "name": "",
                                    "range": [
                                        1163,
                                        1177
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                1165,
                                                1177
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "print",
                                                    "range": [
                                                        1166,
                                                        1170
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]'",
                                                            "range": [
                                                                1168,
                                                                1169
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "sys.exit",
                                                    "range": [
                                                        1172,
                                                        1176
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "1",
                                                            "range": [
                                                                1175,
                                                                1175
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "VariableDeclaration",
            "name": "filename",
            "range": [
                1180,
                1188
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        1181,
                        1187
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "sys.argv[1]",
                            "range": [
                                1182,
                                1186
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "CallExpression",
            "name": "main",
            "range": [
                1190,
                1196
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "filename",
                    "range": [
                        1192,
                        1192
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "Identifier",
                    "name": "only_duplicate_links_checker",
                    "range": [
                        1194,
                        1194
                    ],
                    "children": [],
                    "content": ""
                }
            ],
            "content": ""
        }
    ],
    "content": "\ndef find_links_in_text(text:str)->List[str]:\n\"\"\"Find links in a text and return a list of URLs.\"\"\"\n\nlink_pattern=re.compile(r '((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?«»“”‘’]))') \\n  \\n     raw_links = re.findall(link_pattern, text) \\n  \\n     links = [ \\n         str(raw_link[0]) for raw_link in raw_links \\n     ] \\n  \\n     return links \\n  \\n  \\n def find_links_in_file(filename: str) -> List[str]: \\n     \"\"\"Find links in a file and return a list of URLs from text file.\"\"\" \\n  \\n     with open(filename, mode='r', encoding='utf-8') as file: \\n         readme = file.read() \\n         index_section = readme.find('## Index') \\n         if index_section == -1: \\n             index_section = 0 \\n         content = readme[index_section:] \\n  \\n     links = find_links_in_text(content) \\n  \\n     return links \\n  \\n  \\n def check_duplicate_links(links: List[str]) -> Tuple[bool, List]: \\n     \"\"\"Check for duplicated links.\n\nReturns a tuple with True or False and duplicate list.\n\"\"\" \\n  \\n     seen = {} \\n     duplicates = [] \\n     has_duplicate = False \\n  \\n     for link in links: \\n         link = link.rstrip('/') \\n         if link not in seen: \\n             seen[link] = 1 \\n         else: \\n             if seen[link] == 1: \\n                 duplicates.append(link) \\n  \\n     if duplicates: \\n         has_duplicate = True \\n  \\n     return (has_duplicate, duplicates) \\n  \\n  \\n def fake_user_agent() -> str: \\n     \"\"\"Faking user agent as some hosting services block not-whitelisted UA.\"\"\" \\n  \\n     user_agents = [ \\n         'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36', \\n         'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', \\n         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36', \\n     ] \\n  \\n     return random.choice(user_agents) \\n  \\n  \\n def get_host_from_link(link: str) -> str: \\n  \\n     host = link.split('://', 1)[1] if '://' in link else link \\n  \\n     # Remove routes, arguments and anchors \\n     if '/' in host: \\n         host = host.split('/', 1)[0] \\n  \\n     elif '?' in host: \\n         host = host.split('?', 1)[0] \\n  \\n     elif '#' in host: \\n         host = host.split('#', 1)[0] \\n  \\n     return host \\n  \\n  \\n def has_cloudflare_protection(resp: Response) -> bool: \\n     \"\"\"Checks if there is any cloudflare protection in the response.\n\nCloudflare implements multiple network protections on a given link,\nthis script tries to detect if any of them exist in the response from request.\n\nCommon protections have the following HTTP code as a response:\n-403:When host header is missing or incorrect(and more)\n-503:When DDOS protection exists\n\nSee more about it at:\n-https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error\n-https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\n-https://www.cloudflare.com/ddos/\n-https://superuser.com/a/888526\n\nDiscussions in issues and pull requests:\n-https://github.com/public-apis/public-apis/pull/2409\n-https://github.com/public-apis/public-apis/issues/2960\n\"\"\" \\n  \\n     code = resp.status_code \\n     server = resp.headers.get('Server') or resp.headers.get('server') \\n     cloudflare_flags = [ \\n         '403 Forbidden', \\n         'cloudflare', \\n         'Cloudflare', \\n         'Security check', \\n         'Please Wait... | Cloudflare', \\n         'We are checking your browser...', \\n         'Please stand by, while we are checking your browser...', \\n         'Checking your browser before accessing', \\n         'This process is automatic.', \\n         'Your browser will redirect to your requested content shortly.', \\n         'Please allow up to 5 seconds', \\n         'DDoS protection by', \\n         'Ray ID:', \\n         'Cloudflare Ray ID:', \\n         '_cf_chl', \\n         '_cf_chl_opt', \\n         '__cf_chl_rt_tk', \\n         'cf-spinner-please-wait', \\n         'cf-spinner-redirecting' \\n     ] \\n  \\n     if code in [403, 503] and server == 'cloudflare': \\n         html = resp.text \\n  \\n         flags_found = [flag in html for flag in cloudflare_flags] \\n         any_flag_found = any(flags_found) \\n  \\n         if any_flag_found: \\n             return True \\n  \\n     return False \\n  \\n  \\n def check_if_link_is_working(link: str) -> Tuple[bool, str]: \\n     \"\"\"Checks if a link is working.\n\nIf an error is identified when the request for the link occurs,\nthe return will be a tuple with the first value True and the second\nvalue a string containing the error message.\n\nIf no errors are identified,the return will be a tuple with the\nfirst value False and the second an empty string.\n\"\"\"\n\nhas_error=False\nerror_message=''\n\ntry:\nresp=requests.get(link,timeout=25,headers={\n'User-Agent':fake_user_agent(),\n'host':get_host_from_link(link)\n})\n\ncode=resp.status_code\n\nif code>=400and not has_cloudflare_protection(resp):\nhas_error=True\nerror_message=f 'ERR:CLT: {code} : {link}'\n\nexcept requests.exceptions.SSLError as error:\nhas_error=True\nerror_message=f 'ERR:SSL: {error} : {link}'\n\nexcept requests.exceptions.ConnectionError as error:\nhas_error=True\nerror_message=f 'ERR:CNT: {error} : {link}'\n\nexcept(TimeoutError,requests.exceptions.ConnectTimeout):\nhas_error=True\nerror_message=f 'ERR:TMO: {link}'\n\nexcept requests.exceptions.TooManyRedirects as error:\nhas_error=True\nerror_message=f 'ERR:TMR: {error} : {link}'\n\nexcept(Exception,requests.exceptions.RequestException)as error:\nhas_error=True\nerror_message=f 'ERR:UKN: {error} : {link}'\n\nreturn(has_error,error_message)\n\n\ndef check_if_list_of_links_are_working(list_of_links:List[str])->List[str]:\nerror_messages=[]\nfor link in list_of_links:\nhas_error,error_message=check_if_link_is_working(link)\n\nif has_error:\nerror_messages.append(error_message)\n\nreturn error_messages\n\n\ndef start_duplicate_links_checker(links:List[str])->None:\n\nprint('Checking for duplicate links...')\n\nhas_duplicate_link,duplicates_links=check_duplicate_links(links)\n\nif has_duplicate_link:\nprint(f 'Found duplicate links:')\n\nfor duplicate_link in duplicates_links:\nprint(duplicate_link)\n\nsys.exit(1)\nelse:\nprint('No duplicate links.')\n\n\ndef start_links_working_checker(links:List[str])->None:\n\nprint(f 'Checking if {len(links)} links are working...')\n\nerrors=check_if_list_of_links_are_working(links)\nif errors:\n\nnum_errors=len(errors)\nprint(f 'Apparently {num_errors} links are not working properly. See in:')\n\nfor error_message in errors:\nprint(error_message)\n\nsys.exit(1)\n\n\ndef main(filename:str,only_duplicate_links_checker:bool)->None:\n\nlinks=find_links_in_file(filename)\n\nstart_duplicate_links_checker(links)\n\nif not only_duplicate_links_checker:\nstart_links_working_checker(links)\n\n\nif __name__=='__main__':\nnum_args=len(sys.argv)\nonly_duplicate_links_checker=False\n\nif num_args<2:\nprint('No .md file passed')\nsys.exit(1)\nelif num_args==3:\nthird_arg=sys.argv[2].lower()\n\nif third_arg=='-odlc' or third_arg=='--only_duplicate_links_checker':\nonly_duplicate_links_checker=True\nelse:\nprint(f 'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\nsys.exit(1)\n\nfilename=sys.argv[1]\n\nmain(filename,only_duplicate_links_checker)\n"
}