{
    "type": "Program",
    "name": "Global",
    "range": [
        34,
        328
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                38,
                74
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "active_connections",
                    "range": [
                        45,
                        56
                    ],
                    "children": [],
                    "content": "self.active_connections:Set[WebSocket]=set()"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "subscriptions",
                    "range": [
                        58,
                        73
                    ],
                    "children": [],
                    "content": "self.subscriptions:Dict[str,Set[WebSocket]]={}"
                }
            ],
            "content": "def __init__(self):\nself.active_connections:Set[WebSocket]=set()\nself.subscriptions:Dict[str,Set[WebSocket]]={}\n"
        },
        {
            "type": "FunctionDecl",
            "name": "connect",
            "range": [
                76,
                104
            ],
            "children": [
                {
                    "type": "AwaitExpression",
                    "name": "websocket.accept",
                    "range": [
                        88,
                        93
                    ],
                    "children": [],
                    "content": "await websocket.accept()"
                },
                {
                    "type": "CallExpression",
                    "name": "active_connections.add",
                    "range": [
                        95,
                        102
                    ],
                    "children": [],
                    "content": "self.active_connections.add(websocket)"
                }
            ],
            "content": "async def connect(self,websocket:WebSocket):\nawait websocket.accept()\nself.active_connections.add(websocket)\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "disconnect",
            "range": [
                105,
                144
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "active_connections.remove",
                    "range": [
                        116,
                        123
                    ],
                    "children": [],
                    "content": "self.active_connections.remove(websocket)"
                },
                {
                    "type": "ForStatement",
                    "name": "subscribers in self.subscriptions.values",
                    "range": [
                        125,
                        142
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "subscribers.discard",
                            "range": [
                                137,
                                141
                            ],
                            "children": [],
                            "content": "subscribers.discard(websocket"
                        }
                    ],
                    "content": "for subscribers in self.subscriptions.values():\nsubscribers.discard(websocket)"
                }
            ],
            "content": "def disconnect(self,websocket:WebSocket):\nself.active_connections.remove(websocket)\nfor subscribers in self.subscriptions.values():\nsubscribers.discard(websocket)\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "subscribe",
            "range": [
                145,
                193
            ],
            "children": [
                {
                    "type": "IfStatement",
                    "name": "graph_id not in self.subscriptions",
                    "range": [
                        161,
                        179
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "subscriptions[graph_id]",
                            "range": [
                                170,
                                177
                            ],
                            "children": [],
                            "content": "self.subscriptions[graph_id]=set"
                        }
                    ],
                    "content": "if graph_id not in self.subscriptions:\nself.subscriptions[graph_id]=set()"
                },
                {
                    "type": "CallExpression",
                    "name": "subscriptions[graph_id].add",
                    "range": [
                        181,
                        191
                    ],
                    "children": [],
                    "content": "self.subscriptions[graph_id].add(websocket)"
                }
            ],
            "content": "async def subscribe(self,graph_id:str,websocket:WebSocket):\nif graph_id not in self.subscriptions:\nself.subscriptions[graph_id]=set()\nself.subscriptions[graph_id].add(websocket)\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "unsubscribe",
            "range": [
                194,
                248
            ],
            "children": [
                {
                    "type": "IfStatement",
                    "name": "graph_id in self.subscriptions",
                    "range": [
                        210,
                        228
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "subscriptions[graph_id].discard",
                            "range": [
                                218,
                                227
                            ],
                            "children": [],
                            "content": "self.subscriptions[graph_id].discard(websocket"
                        }
                    ],
                    "content": "if graph_id in self.subscriptions:\nself.subscriptions[graph_id].discard(websocket)"
                },
                {
                    "type": "IfStatement",
                    "name": "not self.subscriptions[graph_id]",
                    "range": [
                        230,
                        246
                    ],
                    "children": [
                        {
                            "type": "DeleteStatement",
                            "name": "del subscriptions[graph_id]",
                            "range": [
                                240,
                                245
                            ],
                            "children": [],
                            "content": "del self.subscriptions[graph_id"
                        }
                    ],
                    "content": "if not self.subscriptions[graph_id]:\ndel self.subscriptions[graph_id]"
                }
            ],
            "content": "async def unsubscribe(self,graph_id:str,websocket:WebSocket):\nif graph_id in self.subscriptions:\nself.subscriptions[graph_id].discard(websocket)\nif not self.subscriptions[graph_id]:\ndel self.subscriptions[graph_id]\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "send_execution_result",
            "range": [
                249,
                328
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "graph_id",
                    "range": [
                        263,
                        268
                    ],
                    "children": [],
                    "content": "graph_id=result.graph_id\n"
                },
                {
                    "type": "IfStatement",
                    "name": "graph_id in self.subscriptions",
                    "range": [
                        269,
                        327
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "message",
                            "range": [
                                277,
                                307
                            ],
                            "children": [],
                            "content": "message=WsMessage(\nmethod=Methods.EXECUTION_EVENT,\nchannel=graph_id,\ndata=result.model_dump(),\n).model_dump_json()"
                        },
                        {
                            "type": "ForStatement",
                            "name": "connection in self.subscriptions[graph_id]",
                            "range": [
                                309,
                                326
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "connection.send_text",
                                    "range": [
                                        320,
                                        325
                                    ],
                                    "children": [],
                                    "content": "await connection.send_text(message"
                                }
                            ],
                            "content": "for connection in self.subscriptions[graph_id]:\nawait connection.send_text(message)"
                        }
                    ],
                    "content": "if graph_id in self.subscriptions:\nmessage=WsMessage(\nmethod=Methods.EXECUTION_EVENT,\nchannel=graph_id,\ndata=result.model_dump(),\n).model_dump_json()\nfor connection in self.subscriptions[graph_id]:\nawait connection.send_text(message)\n"
                }
            ],
            "content": "async def send_execution_result(self,result:execution.ExecutionResult):\ngraph_id=result.graph_id\nif graph_id in self.subscriptions:\nmessage=WsMessage(\nmethod=Methods.EXECUTION_EVENT,\nchannel=graph_id,\ndata=result.model_dump(),\n).model_dump_json()\nfor connection in self.subscriptions[graph_id]:\nawait connection.send_text(message)\n"
        }
    ],
    "content": "class ConnectionManager:\ndef __init__(self):\nself.active_connections:Set[WebSocket]=set()\nself.subscriptions:Dict[str,Set[WebSocket]]={}\n\nasync def connect(self,websocket:WebSocket):\nawait websocket.accept()\nself.active_connections.add(websocket)\n\ndef disconnect(self,websocket:WebSocket):\nself.active_connections.remove(websocket)\nfor subscribers in self.subscriptions.values():\nsubscribers.discard(websocket)\n\nasync def subscribe(self,graph_id:str,websocket:WebSocket):\nif graph_id not in self.subscriptions:\nself.subscriptions[graph_id]=set()\nself.subscriptions[graph_id].add(websocket)\n\nasync def unsubscribe(self,graph_id:str,websocket:WebSocket):\nif graph_id in self.subscriptions:\nself.subscriptions[graph_id].discard(websocket)\nif not self.subscriptions[graph_id]:\ndel self.subscriptions[graph_id]\n\nasync def send_execution_result(self,result:execution.ExecutionResult):\ngraph_id=result.graph_id\nif graph_id in self.subscriptions:\nmessage=WsMessage(\nmethod=Methods.EXECUTION_EVENT,\nchannel=graph_id,\ndata=result.model_dump(),\n).model_dump_json()\nfor connection in self.subscriptions[graph_id]:\nawait connection.send_text(message)\n"
}