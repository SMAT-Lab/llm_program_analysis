{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        154
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "example_function",
            "range": [
                19,
                54
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        21,
                        33
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "a",
                            "range": [
                                22,
                                24
                            ],
                            "children": [],
                            "content": "(a:"
                        },
                        {
                            "type": "Parameter",
                            "name": "b",
                            "range": [
                                26,
                                28
                            ],
                            "children": [],
                            "content": ",b:"
                        },
                        {
                            "type": "Parameter",
                            "name": "c",
                            "range": [
                                30,
                                32
                            ],
                            "children": [],
                            "content": ",c:"
                        }
                    ],
                    "content": "example_function(a:int,b:int,c:int"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        34,
                        36
                    ],
                    "children": [],
                    "content": ")->"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        38,
                        54
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "time.sleep",
                            "range": [
                                39,
                                46
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "time.sleep",
                                    "range": [
                                        39,
                                        46
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "0.5",
                                            "range": [
                                                43,
                                                45
                                            ],
                                            "children": [],
                                            "content": "(0."
                                        }
                                    ],
                                    "content": "\ntime.sleep(0.5"
                                }
                            ],
                            "content": "\ntime.sleep(0.5"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                48,
                                53
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "+",
                                    "range": [
                                        50,
                                        53
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "a",
                                            "range": [
                                                49,
                                                49
                                            ],
                                            "children": [],
                                            "content": "return"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "b",
                                            "range": [
                                                51,
                                                51
                                            ],
                                            "children": [],
                                            "content": "+"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "c",
                                            "range": [
                                                53,
                                                53
                                            ],
                                            "children": [],
                                            "content": "+"
                                        }
                                    ],
                                    "content": "a+b+"
                                }
                            ],
                            "content": "\nreturn a+b+"
                        }
                    ],
                    "content": ":\ntime.sleep(0.5)\nreturn a+b+c"
                }
            ],
            "content": "\ndef example_function(a:int,b:int,c:int)->int:\ntime.sleep(0.5)\nreturn a+b+c"
        },
        {
            "type": "FunctionDecl",
            "name": "example_function_with_error",
            "range": [
                60,
                85
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "example_function_with_error",
                    "range": [
                        60,
                        77
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                60,
                                63
                            ],
                            "children": [],
                            "content": "\ndef example_function_with_error("
                        },
                        {
                            "type": "Identifier",
                            "name": "example_function_with_error",
                            "range": [
                                61,
                                61
                            ],
                            "children": [],
                            "content": "def"
                        },
                        {
                            "type": "ParameterList",
                            "name": "parameters",
                            "range": [
                                62,
                                74
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "a",
                                    "range": [
                                        63,
                                        65
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "int",
                                            "range": [
                                                65,
                                                65
                                            ],
                                            "children": [],
                                            "content": ":"
                                        }
                                    ],
                                    "content": "(a:"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "b",
                                    "range": [
                                        67,
                                        69
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "int",
                                            "range": [
                                                69,
                                                69
                                            ],
                                            "children": [],
                                            "content": ":"
                                        }
                                    ],
                                    "content": ",b:"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "c",
                                    "range": [
                                        71,
                                        73
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "int",
                                            "range": [
                                                73,
                                                73
                                            ],
                                            "children": [],
                                            "content": ":"
                                        }
                                    ],
                                    "content": ",c:"
                                }
                            ],
                            "content": "example_function_with_error(a:int,b:int,c:int"
                        },
                        {
                            "type": "ReturnType",
                            "name": "int",
                            "range": [
                                77,
                                77
                            ],
                            "children": [],
                            "content": ">"
                        }
                    ],
                    "content": "\ndef example_function_with_error(a:int,b:int,c:int)->"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        78,
                        85
                    ],
                    "children": [
                        {
                            "type": "RaiseStatement",
                            "name": "raise",
                            "range": [
                                80,
                                84
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "ValueError",
                                    "range": [
                                        81,
                                        81
                                    ],
                                    "children": [],
                                    "content": "raise"
                                },
                                {
                                    "type": "Literal",
                                    "name": "\"This is a test error\"",
                                    "range": [
                                        83,
                                        83
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": "\nraise ValueError(\"This is a test error\""
                        }
                    ],
                    "content": "int:\nraise ValueError(\"This is a test error\")"
                }
            ],
            "content": "\ndef example_function_with_error(a:int,b:int,c:int)->int:\nraise ValueError(\"This is a test error\")"
        },
        {
            "type": "FunctionDecl",
            "name": "test_timer_decorator",
            "range": [
                88,
                130
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "test_timer_decorator",
                    "range": [
                        88,
                        92
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                88,
                                88
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "test_timer_decorator",
                            "range": [
                                89,
                                89
                            ],
                            "children": [],
                            "content": "def"
                        }
                    ],
                    "content": "\ndef test_timer_decorator()"
                },
                {
                    "type": "FunctionBody",
                    "name": "test_timer_decorator",
                    "range": [
                        93,
                        130
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "info, res = example_function(1, 2, 3)",
                            "range": [
                                94,
                                105
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "info",
                                    "range": [
                                        94,
                                        94
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "res",
                                    "range": [
                                        96,
                                        96
                                    ],
                                    "children": [],
                                    "content": ","
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "example_function(1, 2, 3)",
                                    "range": [
                                        98,
                                        105
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "example_function",
                                            "range": [
                                                98,
                                                98
                                            ],
                                            "children": [],
                                            "content": "="
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "1",
                                            "range": [
                                                100,
                                                100
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "2",
                                            "range": [
                                                102,
                                                102
                                            ],
                                            "children": [],
                                            "content": ","
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "3",
                                            "range": [
                                                104,
                                                104
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": "=example_function(1,2,3"
                                }
                            ],
                            "content": "\ninfo,res=example_function(1,2,3"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert info.cpu_time >= 0",
                            "range": [
                                107,
                                113
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "assert",
                                    "range": [
                                        107,
                                        107
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "MemberExpression",
                                    "name": "info.cpu_time",
                                    "range": [
                                        108,
                                        110
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "info",
                                            "range": [
                                                108,
                                                108
                                            ],
                                            "children": [],
                                            "content": "assert"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "cpu_time",
                                            "range": [
                                                110,
                                                110
                                            ],
                                            "children": [],
                                            "content": "."
                                        }
                                    ],
                                    "content": "assert info."
                                },
                                {
                                    "type": "Literal",
                                    "name": "0",
                                    "range": [
                                        113,
                                        113
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": "\nassert info.cpu_time>="
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert info.wall_time >= 0.4",
                            "range": [
                                115,
                                123
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "assert",
                                    "range": [
                                        115,
                                        115
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "MemberExpression",
                                    "name": "info.wall_time",
                                    "range": [
                                        116,
                                        118
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "info",
                                            "range": [
                                                116,
                                                116
                                            ],
                                            "children": [],
                                            "content": "assert"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "wall_time",
                                            "range": [
                                                118,
                                                118
                                            ],
                                            "children": [],
                                            "content": "."
                                        }
                                    ],
                                    "content": "assert info."
                                },
                                {
                                    "type": "Literal",
                                    "name": "0.4",
                                    "range": [
                                        121,
                                        123
                                    ],
                                    "children": [],
                                    "content": "=0."
                                }
                            ],
                            "content": "\nassert info.wall_time>=0."
                        },
                        {
                            "type": "AssertStatement",
                            "name": "assert res == 6",
                            "range": [
                                125,
                                129
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "assert",
                                    "range": [
                                        125,
                                        125
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "res",
                                    "range": [
                                        126,
                                        126
                                    ],
                                    "children": [],
                                    "content": "assert"
                                },
                                {
                                    "type": "Literal",
                                    "name": "6",
                                    "range": [
                                        129,
                                        129
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": "\nassert res=="
                        }
                    ],
                    "content": ":\ninfo,res=example_function(1,2,3)\nassert info.cpu_time>=0\nassert info.wall_time>=0.4\nassert res==6"
                }
            ],
            "content": "\ndef test_timer_decorator():\ninfo,res=example_function(1,2,3)\nassert info.cpu_time>=0\nassert info.wall_time>=0.4\nassert res==6"
        },
        {
            "type": "FunctionDecl",
            "name": "test_error_decorator",
            "range": [
                133,
                154
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "test_error_decorator",
                    "range": [
                        133,
                        137
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                133,
                                133
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "test_error_decorator",
                            "range": [
                                134,
                                134
                            ],
                            "children": [],
                            "content": "def"
                        }
                    ],
                    "content": "\ndef test_error_decorator()"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        138,
                        154
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "res",
                            "range": [
                                139,
                                148
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "res",
                                    "range": [
                                        139,
                                        139
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "example_function_with_error",
                                    "range": [
                                        141,
                                        148
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "example_function_with_error",
                                            "range": [
                                                141,
                                                141
                                            ],
                                            "children": [],
                                            "content": "="
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "1",
                                            "range": [
                                                143,
                                                143
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "2",
                                            "range": [
                                                145,
                                                145
                                            ],
                                            "children": [],
                                            "content": ","
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "3",
                                            "range": [
                                                147,
                                                147
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": "=example_function_with_error(1,2,3"
                                }
                            ],
                            "content": "\nres=example_function_with_error(1,2,3"
                        },
                        {
                            "type": "AssertStatement",
                            "name": "",
                            "range": [
                                150,
                                153
                            ],
                            "children": [
                                {
                                    "type": "Keyword",
                                    "name": "assert",
                                    "range": [
                                        150,
                                        150
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "res",
                                    "range": [
                                        151,
                                        151
                                    ],
                                    "children": [],
                                    "content": "assert"
                                },
                                {
                                    "type": "Literal",
                                    "name": "None",
                                    "range": [
                                        153,
                                        153
                                    ],
                                    "children": [],
                                    "content": "is"
                                }
                            ],
                            "content": "\nassert res is"
                        }
                    ],
                    "content": ":\nres=example_function_with_error(1,2,3)\nassert res is None"
                }
            ],
            "content": "\ndef test_error_decorator():\nres=example_function_with_error(1,2,3)\nassert res is None"
        }
    ],
    "content": "import time\n\nfrom backend.util.decorator import error_logged,time_measured\n\n\n@time_measured\ndef example_function(a:int,b:int,c:int)->int:\ntime.sleep(0.5)\nreturn a+b+c\n\n\n@error_logged\ndef example_function_with_error(a:int,b:int,c:int)->int:\nraise ValueError(\"This is a test error\")\n\n\ndef test_timer_decorator():\ninfo,res=example_function(1,2,3)\nassert info.cpu_time>=0\nassert info.wall_time>=0.4\nassert res==6\n\n\ndef test_error_decorator():\nres=example_function_with_error(1,2,3)\nassert res is None"
}