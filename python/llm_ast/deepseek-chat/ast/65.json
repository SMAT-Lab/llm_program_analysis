{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        291
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                1,
                1
            ],
            "children": [],
            "content": "\" \\n Problem source: https://www.hackerrank.com/challenges/the-power-sum/problem \\n Find the number of ways that a given integer X, can be expressed as the sum \\n of the Nth powers of unique, natural numbers. For example, if X=13 and N=2. \\n We have to find all combinations of unique squares adding up to 13. \\n The only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10. \\n \""
        },
        {
            "type": "FunctionDecl",
            "name": "backtrack",
            "range": [
                4,
                200
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        6,
                        33
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "needed_sum",
                            "range": [
                                8,
                                10
                            ],
                            "children": [],
                            "content": "(\nneeded_sum"
                        },
                        {
                            "type": "Parameter",
                            "name": "power",
                            "range": [
                                13,
                                15
                            ],
                            "children": [],
                            "content": ",\npower"
                        },
                        {
                            "type": "Parameter",
                            "name": "current_number",
                            "range": [
                                18,
                                20
                            ],
                            "children": [],
                            "content": ",\ncurrent_number"
                        },
                        {
                            "type": "Parameter",
                            "name": "current_sum",
                            "range": [
                                23,
                                25
                            ],
                            "children": [],
                            "content": ",\ncurrent_sum"
                        },
                        {
                            "type": "Parameter",
                            "name": "solutions_count",
                            "range": [
                                28,
                                30
                            ],
                            "children": [],
                            "content": ",\nsolutions_count"
                        }
                    ],
                    "content": "def backtrack(\nneeded_sum:int,\npower:int,\ncurrent_number:int,\ncurrent_sum:int,\nsolutions_count:int,"
                },
                {
                    "type": "ReturnType",
                    "name": "returnType",
                    "range": [
                        34,
                        41
                    ],
                    "children": [],
                    "content": "\n)->tuple[int,"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        44,
                        46
                    ],
                    "children": [],
                    "content": ":\n\"\""
                },
                {
                    "type": "IfStatement",
                    "name": "ifStatement",
                    "range": [
                        48,
                        83
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "condition",
                            "range": [
                                49,
                                52
                            ],
                            "children": [],
                            "content": "\nif current_sum="
                        },
                        {
                            "type": "Block",
                            "name": "consequent",
                            "range": [
                                54,
                                83
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "expressionStatement",
                                    "range": [
                                        74,
                                        78
                                    ],
                                    "children": [],
                                    "content": ".\nsolutions_count+="
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "returnStatement",
                                    "range": [
                                        79,
                                        83
                                    ],
                                    "children": [],
                                    "content": "1\nreturn current_sum,"
                                }
                            ],
                            "content": "needed_sum:\n#If the sum of the powers is equal to needed_sum,then we have a solution.\nsolutions_count+=1\nreturn current_sum,"
                        }
                    ],
                    "content": "\"\"\nif current_sum==needed_sum:\n#If the sum of the powers is equal to needed_sum,then we have a solution.\nsolutions_count+=1\nreturn current_sum,"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "expressionStatement",
                    "range": [
                        85,
                        91
                    ],
                    "children": [],
                    "content": "\n\ni_to_n=current_number**"
                },
                {
                    "type": "IfStatement",
                    "name": "ifStatement",
                    "range": [
                        92,
                        149
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "condition",
                            "range": [
                                93,
                                98
                            ],
                            "children": [],
                            "content": "\nif current_sum+i_to_n<"
                        },
                        {
                            "type": "Block",
                            "name": "consequent",
                            "range": [
                                100,
                                149
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "expressionStatement",
                                    "range": [
                                        119,
                                        123
                                    ],
                                    "children": [],
                                    "content": ".\ncurrent_sum+="
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "expressionStatement",
                                    "range": [
                                        124,
                                        144
                                    ],
                                    "children": [],
                                    "content": "i_to_n\ncurrent_sum,solutions_count=backtrack(\nneeded_sum,power,current_number+1,current_sum,solutions_count\n"
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "name": "expressionStatement",
                                    "range": [
                                        145,
                                        149
                                    ],
                                    "children": [],
                                    "content": ")\ncurrent_sum-="
                                }
                            ],
                            "content": "needed_sum:\n#If the sum of the powers is less than needed_sum,then continue adding powers.\ncurrent_sum+=i_to_n\ncurrent_sum,solutions_count=backtrack(\nneeded_sum,power,current_number+1,current_sum,solutions_count\n)\ncurrent_sum-="
                        }
                    ],
                    "content": "power\nif current_sum+i_to_n<=needed_sum:\n#If the sum of the powers is less than needed_sum,then continue adding powers.\ncurrent_sum+=i_to_n\ncurrent_sum,solutions_count=backtrack(\nneeded_sum,power,current_number+1,current_sum,solutions_count\n)\ncurrent_sum-="
                },
                {
                    "type": "IfStatement",
                    "name": "ifStatement",
                    "range": [
                        150,
                        195
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "condition",
                            "range": [
                                151,
                                153
                            ],
                            "children": [],
                            "content": "\nif i_to_n"
                        },
                        {
                            "type": "Block",
                            "name": "consequent",
                            "range": [
                                155,
                                195
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "expressionStatement",
                                    "range": [
                                        175,
                                        195
                                    ],
                                    "children": [],
                                    "content": ".\ncurrent_sum,solutions_count=backtrack(\nneeded_sum,power,current_number+1,current_sum,solutions_count\n"
                                }
                            ],
                            "content": "needed_sum:\n#If the power of i is less than needed_sum,then try with the next power.\ncurrent_sum,solutions_count=backtrack(\nneeded_sum,power,current_number+1,current_sum,solutions_count\n"
                        }
                    ],
                    "content": "i_to_n\nif i_to_n<needed_sum:\n#If the power of i is less than needed_sum,then try with the next power.\ncurrent_sum,solutions_count=backtrack(\nneeded_sum,power,current_number+1,current_sum,solutions_count\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "returnStatement",
                    "range": [
                        196,
                        200
                    ],
                    "children": [],
                    "content": ")\nreturn current_sum,"
                }
            ],
            "content": "\n\ndef backtrack(\nneeded_sum:int,\npower:int,\ncurrent_number:int,\ncurrent_sum:int,\nsolutions_count:int,\n)->tuple[int,int]:\n\"\"\" \\n     >>> backtrack(13, 2, 1, 0, 0) \\n     (0, 1) \\n     >>> backtrack(10, 2, 1, 0, 0) \\n     (0, 1) \\n     >>> backtrack(10, 3, 1, 0, 0) \\n     (0, 0) \\n     >>> backtrack(20, 2, 1, 0, 0) \\n     (0, 1) \\n     >>> backtrack(15, 10, 1, 0, 0) \\n     (0, 0) \\n     >>> backtrack(16, 2, 1, 0, 0) \\n     (0, 1) \\n     >>> backtrack(20, 1, 1, 0, 0) \\n     (0, 64) \\n     \"\"\"\nif current_sum==needed_sum:\n#If the sum of the powers is equal to needed_sum,then we have a solution.\nsolutions_count+=1\nreturn current_sum,solutions_count\n\ni_to_n=current_number**power\nif current_sum+i_to_n<=needed_sum:\n#If the sum of the powers is less than needed_sum,then continue adding powers.\ncurrent_sum+=i_to_n\ncurrent_sum,solutions_count=backtrack(\nneeded_sum,power,current_number+1,current_sum,solutions_count\n)\ncurrent_sum-=i_to_n\nif i_to_n<needed_sum:\n#If the power of i is less than needed_sum,then try with the next power.\ncurrent_sum,solutions_count=backtrack(\nneeded_sum,power,current_number+1,current_sum,solutions_count\n)\nreturn current_sum,"
        },
        {
            "type": "FunctionDecl",
            "name": "solve",
            "range": [
                201,
                273
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "solve",
                    "range": [
                        201,
                        215
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                201,
                                203
                            ],
                            "children": [],
                            "content": "solutions_count\n\n"
                        },
                        {
                            "type": "FunctionName",
                            "name": "solve",
                            "range": [
                                202,
                                206
                            ],
                            "children": [],
                            "content": "\n\n\ndef solve"
                        },
                        {
                            "type": "ParameterList",
                            "name": "parameters",
                            "range": [
                                203,
                                211
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "needed_sum",
                                    "range": [
                                        204,
                                        206
                                    ],
                                    "children": [],
                                    "content": "\ndef solve"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "power",
                                    "range": [
                                        208,
                                        210
                                    ],
                                    "children": [],
                                    "content": "needed_sum:int"
                                }
                            ],
                            "content": "\n\ndef solve(needed_sum:int,"
                        },
                        {
                            "type": "ReturnType",
                            "name": "int",
                            "range": [
                                214,
                                215
                            ],
                            "children": [],
                            "content": "int)"
                        }
                    ],
                    "content": "solutions_count\n\n\ndef solve(needed_sum:int,power:int)"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        216,
                        273
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                217,
                                219
                            ],
                            "children": [],
                            "content": ">int:"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                221,
                                251
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        223,
                                        239
                                    ],
                                    "children": [
                                        {
                                            "type": "LogicalExpression",
                                            "name": "and",
                                            "range": [
                                                231,
                                                238
                                            ],
                                            "children": [
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "<=",
                                                    "range": [
                                                        225,
                                                        230
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "1",
                                                            "range": [
                                                                224,
                                                                225
                                                            ],
                                                            "children": [],
                                                            "content": "\nif"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "needed_sum",
                                                            "range": [
                                                                227,
                                                                229
                                                            ],
                                                            "children": [],
                                                            "content": "(1<"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "1000",
                                                            "range": [
                                                                229,
                                                                230
                                                            ],
                                                            "children": [],
                                                            "content": "<="
                                                        }
                                                    ],
                                                    "content": "if not(1<="
                                                },
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": "<=",
                                                    "range": [
                                                        233,
                                                        238
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "2",
                                                            "range": [
                                                                232,
                                                                233
                                                            ],
                                                            "children": [],
                                                            "content": "<="
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "power",
                                                            "range": [
                                                                235,
                                                                237
                                                            ],
                                                            "children": [],
                                                            "content": "and2<"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "name": "10",
                                                            "range": [
                                                                237,
                                                                238
                                                            ],
                                                            "children": [],
                                                            "content": "<="
                                                        }
                                                    ],
                                                    "content": "=1000and2<="
                                                }
                                            ],
                                            "content": "needed_sum<=1000and2<="
                                        }
                                    ],
                                    "content": "\"\"\nif not(1<=needed_sum<=1000and2<=power"
                                },
                                {
                                    "type": "Block",
                                    "name": "block",
                                    "range": [
                                        241,
                                        251
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                242,
                                                250
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "ValueError",
                                                    "range": [
                                                        243,
                                                        244
                                                    ],
                                                    "children": [],
                                                    "content": "):"
                                                },
                                                {
                                                    "type": "Arguments",
                                                    "name": "arguments",
                                                    "range": [
                                                        244,
                                                        250
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "StringLiteral",
                                                            "name": "\"Invalid input\\n\"",
                                                            "range": [
                                                                246,
                                                                247
                                                            ],
                                                            "children": [],
                                                            "content": "raise ValueError"
                                                        },
                                                        {
                                                            "type": "StringLiteral",
                                                            "name": "\"needed_sum must be between 1 and 1000, power between 2 and 10.\"",
                                                            "range": [
                                                                248,
                                                                249
                                                            ],
                                                            "children": [],
                                                            "content": "(\n"
                                                        }
                                                    ],
                                                    "content": ":\nraise ValueError(\n\"Invalid input\\n\""
                                                }
                                            ],
                                            "content": "10):\nraise ValueError(\n\"Invalid input\\n\""
                                        }
                                    ],
                                    "content": "=10):\nraise ValueError(\n\"Invalid input\\n\"\n"
                                }
                            ],
                            "content": "\"\"\" \\n     >>> solve(13, 2) \\n     1 \\n     >>> solve(10, 2) \\n     1 \\n     >>> solve(10, 3) \\n     0 \\n     >>> solve(20, 2) \\n     1 \\n     >>> solve(15, 10) \\n     0 \\n     >>> solve(16, 2) \\n     1 \\n     >>> solve(20, 1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Invalid input \\n     needed_sum must be between 1 and 1000, power between 2 and 10. \\n     >>> solve(-10, 5) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Invalid input \\n     needed_sum must be between 1 and 1000, power between 2 and 10. \\n     \"\"\"\nif not(1<=needed_sum<=1000and2<=power<=10):\nraise ValueError(\n\"Invalid input\\n\"\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                253,
                                273
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "backtrack",
                                    "range": [
                                        254,
                                        265
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "needed_sum",
                                            "range": [
                                                256,
                                                257
                                            ],
                                            "children": [],
                                            "content": "\nreturn"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "power",
                                            "range": [
                                                258,
                                                259
                                            ],
                                            "children": [],
                                            "content": "backtrack("
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "1",
                                            "range": [
                                                260,
                                                261
                                            ],
                                            "children": [],
                                            "content": "needed_sum,"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "0",
                                            "range": [
                                                262,
                                                263
                                            ],
                                            "children": [],
                                            "content": "power,"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "0",
                                            "range": [
                                                264,
                                                265
                                            ],
                                            "children": [],
                                            "content": "1,"
                                        }
                                    ],
                                    "content": ")\n\nreturn backtrack(needed_sum,power,1,"
                                },
                                {
                                    "type": "ArrayAccess",
                                    "name": "arrayAccess",
                                    "range": [
                                        266,
                                        268
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "1",
                                            "range": [
                                                267,
                                                268
                                            ],
                                            "children": [],
                                            "content": ",0"
                                        }
                                    ],
                                    "content": "0,0"
                                }
                            ],
                            "content": "\n)\n\nreturn backtrack(needed_sum,power,1,0,0)[1]#"
                        }
                    ],
                    "content": "->int:\n\"\"\" \\n     >>> solve(13, 2) \\n     1 \\n     >>> solve(10, 2) \\n     1 \\n     >>> solve(10, 3) \\n     0 \\n     >>> solve(20, 2) \\n     1 \\n     >>> solve(15, 10) \\n     0 \\n     >>> solve(16, 2) \\n     1 \\n     >>> solve(20, 1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Invalid input \\n     needed_sum must be between 1 and 1000, power between 2 and 10. \\n     >>> solve(-10, 5) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Invalid input \\n     needed_sum must be between 1 and 1000, power between 2 and 10. \\n     \"\"\"\nif not(1<=needed_sum<=1000and2<=power<=10):\nraise ValueError(\n\"Invalid input\\n\"\n\"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n)\n\nreturn backtrack(needed_sum,power,1,0,0)[1]#"
                }
            ],
            "content": "solutions_count\n\n\ndef solve(needed_sum:int,power:int)->int:\n\"\"\" \\n     >>> solve(13, 2) \\n     1 \\n     >>> solve(10, 2) \\n     1 \\n     >>> solve(10, 3) \\n     0 \\n     >>> solve(20, 2) \\n     1 \\n     >>> solve(15, 10) \\n     0 \\n     >>> solve(16, 2) \\n     1 \\n     >>> solve(20, 1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Invalid input \\n     needed_sum must be between 1 and 1000, power between 2 and 10. \\n     >>> solve(-10, 5) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Invalid input \\n     needed_sum must be between 1 and 1000, power between 2 and 10. \\n     \"\"\"\nif not(1<=needed_sum<=1000and2<=power<=10):\nraise ValueError(\n\"Invalid input\\n\"\n\"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n)\n\nreturn backtrack(needed_sum,power,1,0,0)[1]#"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                274,
                280
            ],
            "children": [
                {
                    "type": "BinaryExpression",
                    "name": "",
                    "range": [
                        275,
                        278
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "__name__",
                            "range": [
                                275,
                                275
                            ],
                            "children": [],
                            "content": "the"
                        },
                        {
                            "type": "Operator",
                            "name": "==",
                            "range": [
                                276,
                                277
                            ],
                            "children": [],
                            "content": "solutions_count\n"
                        },
                        {
                            "type": "Literal",
                            "name": "__main__",
                            "range": [
                                278,
                                278
                            ],
                            "children": [],
                            "content": "\n"
                        }
                    ],
                    "content": "the solutions_count\n\n"
                }
            ],
            "content": "Return the solutions_count\n\n\nif"
        },
        {
            "type": "ImportStatement",
            "name": "doctest",
            "range": [
                281,
                283
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "doctest",
                    "range": [
                        282,
                        282
                    ],
                    "children": [],
                    "content": "="
                }
            ],
            "content": "__name__=="
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                285,
                290
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "testmod",
                    "range": [
                        285,
                        289
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "",
                            "range": [
                                285,
                                287
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "doctest",
                                    "range": [
                                        285,
                                        285
                                    ],
                                    "children": [],
                                    "content": ":"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "testmod",
                                    "range": [
                                        287,
                                        287
                                    ],
                                    "children": [],
                                    "content": "import"
                                }
                            ],
                            "content": ":\nimport"
                        }
                    ],
                    "content": ":\nimport doctest\n"
                }
            ],
            "content": ":\nimport doctest\n\n"
        }
    ],
    "content": "\"\"\" \\n Problem source: https://www.hackerrank.com/challenges/the-power-sum/problem \\n Find the number of ways that a given integer X, can be expressed as the sum \\n of the Nth powers of unique, natural numbers. For example, if X=13 and N=2. \\n We have to find all combinations of unique squares adding up to 13. \\n The only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10. \\n \"\"\"\n\n\ndef backtrack(\nneeded_sum:int,\npower:int,\ncurrent_number:int,\ncurrent_sum:int,\nsolutions_count:int,\n)->tuple[int,int]:\n\"\"\" \\n     >>> backtrack(13, 2, 1, 0, 0) \\n     (0, 1) \\n     >>> backtrack(10, 2, 1, 0, 0) \\n     (0, 1) \\n     >>> backtrack(10, 3, 1, 0, 0) \\n     (0, 0) \\n     >>> backtrack(20, 2, 1, 0, 0) \\n     (0, 1) \\n     >>> backtrack(15, 10, 1, 0, 0) \\n     (0, 0) \\n     >>> backtrack(16, 2, 1, 0, 0) \\n     (0, 1) \\n     >>> backtrack(20, 1, 1, 0, 0) \\n     (0, 64) \\n     \"\"\"\nif current_sum==needed_sum:\n#If the sum of the powers is equal to needed_sum,then we have a solution.\nsolutions_count+=1\nreturn current_sum,solutions_count\n\ni_to_n=current_number**power\nif current_sum+i_to_n<=needed_sum:\n#If the sum of the powers is less than needed_sum,then continue adding powers.\ncurrent_sum+=i_to_n\ncurrent_sum,solutions_count=backtrack(\nneeded_sum,power,current_number+1,current_sum,solutions_count\n)\ncurrent_sum-=i_to_n\nif i_to_n<needed_sum:\n#If the power of i is less than needed_sum,then try with the next power.\ncurrent_sum,solutions_count=backtrack(\nneeded_sum,power,current_number+1,current_sum,solutions_count\n)\nreturn current_sum,solutions_count\n\n\ndef solve(needed_sum:int,power:int)->int:\n\"\"\" \\n     >>> solve(13, 2) \\n     1 \\n     >>> solve(10, 2) \\n     1 \\n     >>> solve(10, 3) \\n     0 \\n     >>> solve(20, 2) \\n     1 \\n     >>> solve(15, 10) \\n     0 \\n     >>> solve(16, 2) \\n     1 \\n     >>> solve(20, 1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Invalid input \\n     needed_sum must be between 1 and 1000, power between 2 and 10. \\n     >>> solve(-10, 5) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Invalid input \\n     needed_sum must be between 1 and 1000, power between 2 and 10. \\n     \"\"\"\nif not(1<=needed_sum<=1000and2<=power<=10):\nraise ValueError(\n\"Invalid input\\n\"\n\"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n)\n\nreturn backtrack(needed_sum,power,1,0,0)[1]#Return the solutions_count\n\n\nif __name__==\"__main__\":\nimport doctest\n\ndoctest"
}