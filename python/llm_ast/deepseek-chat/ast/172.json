{
    "type": "Program",
    "name": "Global",
    "range": [
        74,
        1282
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "get_pid",
            "range": [
                74,
                155
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        76,
                        77
                    ],
                    "children": [],
                    "content": "get_pid("
                },
                {
                    "type": "ReturnType",
                    "name": "",
                    "range": [
                        78,
                        80
                    ],
                    "children": [],
                    "content": ")->"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        83,
                        155
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "file_path",
                            "range": [
                                85,
                                90
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "",
                                    "range": [
                                        86,
                                        90
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_pid_path",
                                            "range": [
                                                87,
                                                89
                                            ],
                                            "children": [],
                                            "content": "=get_pid_path("
                                        }
                                    ],
                                    "content": "file_path=get_pid_path()"
                                }
                            ],
                            "content": "\nfile_path=get_pid_path()"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                91,
                                102
                            ],
                            "children": [
                                {
                                    "type": "UnaryExpression",
                                    "name": "",
                                    "range": [
                                        92,
                                        97
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "",
                                            "range": [
                                                93,
                                                97
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "file_path",
                                                    "range": [
                                                        93,
                                                        93
                                                    ],
                                                    "children": [],
                                                    "content": "not"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "exists",
                                                    "range": [
                                                        95,
                                                        95
                                                    ],
                                                    "children": [],
                                                    "content": "."
                                                }
                                            ],
                                            "content": "not file_path.exists("
                                        }
                                    ],
                                    "content": "if not file_path.exists("
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        98,
                                        102
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "",
                                            "range": [
                                                100,
                                                101
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "None",
                                                    "range": [
                                                        101,
                                                        101
                                                    ],
                                                    "children": [],
                                                    "content": "return"
                                                }
                                            ],
                                            "content": "\nreturn"
                                        }
                                    ],
                                    "content": "):\nreturn None"
                                }
                            ],
                            "content": "\nif not file_path.exists():\nreturn None"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                104,
                                116
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "makedirs",
                                    "range": [
                                        106,
                                        115
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "",
                                            "range": [
                                                108,
                                                110
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "file_path",
                                                    "range": [
                                                        108,
                                                        108
                                                    ],
                                                    "children": [],
                                                    "content": "("
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "parent",
                                                    "range": [
                                                        110,
                                                        110
                                                    ],
                                                    "children": [],
                                                    "content": "."
                                                }
                                            ],
                                            "content": "(file_path."
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "",
                                            "range": [
                                                112,
                                                114
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "exist_ok",
                                                    "range": [
                                                        112,
                                                        112
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "True",
                                                    "range": [
                                                        114,
                                                        114
                                                    ],
                                                    "children": [],
                                                    "content": "="
                                                }
                                            ],
                                            "content": ",exist_ok="
                                        }
                                    ],
                                    "content": ".makedirs(file_path.parent,exist_ok=True"
                                }
                            ],
                            "content": "\nos.makedirs(file_path.parent,exist_ok=True)"
                        },
                        {
                            "type": "WithStatement",
                            "name": "",
                            "range": [
                                117,
                                139
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "open",
                                    "range": [
                                        118,
                                        127
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "file_path",
                                            "range": [
                                                120,
                                                120
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "",
                                            "range": [
                                                122,
                                                122
                                            ],
                                            "children": [],
                                            "content": ","
                                        },
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "",
                                            "range": [
                                                124,
                                                126
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "encoding",
                                                    "range": [
                                                        124,
                                                        124
                                                    ],
                                                    "children": [],
                                                    "content": ","
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "",
                                                    "range": [
                                                        126,
                                                        126
                                                    ],
                                                    "children": [],
                                                    "content": "="
                                                }
                                            ],
                                            "content": ",encoding="
                                        }
                                    ],
                                    "content": "with open(file_path,\"r\",encoding=\"utf-8\""
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        130,
                                        139
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "name": "pid",
                                            "range": [
                                                132,
                                                139
                                            ],
                                            "children": [
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "",
                                                    "range": [
                                                        133,
                                                        139
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "read",
                                                            "range": [
                                                                136,
                                                                138
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "file",
                                                                    "range": [
                                                                        134,
                                                                        134
                                                                    ],
                                                                    "children": [],
                                                                    "content": "="
                                                                }
                                                            ],
                                                            "content": ".read("
                                                        }
                                                    ],
                                                    "content": "pid=file.read()"
                                                }
                                            ],
                                            "content": "\npid=file.read()"
                                        }
                                    ],
                                    "content": "file:\npid=file.read()"
                                }
                            ],
                            "content": "\nwith open(file_path,\"r\",encoding=\"utf-8\")as file:\npid=file.read()"
                        },
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                140,
                                155
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        142,
                                        148
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "",
                                            "range": [
                                                143,
                                                148
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "int",
                                                    "range": [
                                                        144,
                                                        147
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "pid",
                                                            "range": [
                                                                146,
                                                                146
                                                            ],
                                                            "children": [],
                                                            "content": "("
                                                        }
                                                    ],
                                                    "content": "return int(pid"
                                                }
                                            ],
                                            "content": "\nreturn int(pid)"
                                        }
                                    ],
                                    "content": ":\nreturn int(pid)"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "",
                                    "range": [
                                        149,
                                        155
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "ValueError",
                                            "range": [
                                                150,
                                                150
                                            ],
                                            "children": [],
                                            "content": "except"
                                        },
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                152,
                                                155
                                            ],
                                            "children": [
                                                {
                                                    "type": "ReturnStatement",
                                                    "name": "",
                                                    "range": [
                                                        153,
                                                        154
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "None",
                                                            "range": [
                                                                154,
                                                                154
                                                            ],
                                                            "children": [],
                                                            "content": "return"
                                                        }
                                                    ],
                                                    "content": "\nreturn"
                                                }
                                            ],
                                            "content": ":\nreturn None"
                                        }
                                    ],
                                    "content": "\nexcept ValueError:\nreturn None"
                                }
                            ],
                            "content": "\ntry:\nreturn int(pid)\nexcept ValueError:\nreturn None"
                        }
                    ],
                    "content": "None:\nfile_path=get_pid_path()\nif not file_path.exists():\nreturn None\n\nos.makedirs(file_path.parent,exist_ok=True)\nwith open(file_path,\"r\",encoding=\"utf-8\")as file:\npid=file.read()\ntry:\nreturn int(pid)\nexcept ValueError:\nreturn None"
                }
            ],
            "content": "\ndef get_pid()->int|None:\nfile_path=get_pid_path()\nif not file_path.exists():\nreturn None\n\nos.makedirs(file_path.parent,exist_ok=True)\nwith open(file_path,\"r\",encoding=\"utf-8\")as file:\npid=file.read()\ntry:\nreturn int(pid)\nexcept ValueError:\nreturn None"
        },
        {
            "type": "FunctionDecl",
            "name": "write_pid",
            "range": [
                157,
                209
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "pid",
                    "range": [
                        160,
                        162
                    ],
                    "children": [],
                    "content": "write_pid(pid"
                },
                {
                    "type": "TypeAnnotation",
                    "name": "int",
                    "range": [
                        162,
                        162
                    ],
                    "children": [],
                    "content": "pid"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        165,
                        209
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "file_path",
                            "range": [
                                166,
                                170
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "get_pid_path",
                                    "range": [
                                        168,
                                        170
                                    ],
                                    "children": [],
                                    "content": "file_path=get_pid_path"
                                }
                            ],
                            "content": ":\nfile_path=get_pid_path"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                172,
                                183
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "os.makedirs",
                                    "range": [
                                        172,
                                        183
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "file_path.parent",
                                            "range": [
                                                176,
                                                178
                                            ],
                                            "children": [],
                                            "content": "makedirs(file_path"
                                        },
                                        {
                                            "type": "Keyword",
                                            "name": "exist_ok",
                                            "range": [
                                                180,
                                                182
                                            ],
                                            "children": [],
                                            "content": "parent,exist_ok"
                                        }
                                    ],
                                    "content": ")\nos.makedirs(file_path.parent,exist_ok="
                                }
                            ],
                            "content": ")\nos.makedirs(file_path.parent,exist_ok="
                        },
                        {
                            "type": "WithStatement",
                            "name": "",
                            "range": [
                                185,
                                209
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "file",
                                    "range": [
                                        186,
                                        195
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "open",
                                            "range": [
                                                186,
                                                195
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "file_path",
                                                    "range": [
                                                        188,
                                                        188
                                                    ],
                                                    "children": [],
                                                    "content": "open"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "\"w\"",
                                                    "range": [
                                                        190,
                                                        190
                                                    ],
                                                    "children": [],
                                                    "content": "file_path"
                                                },
                                                {
                                                    "type": "Keyword",
                                                    "name": "encoding",
                                                    "range": [
                                                        192,
                                                        194
                                                    ],
                                                    "children": [],
                                                    "content": "\"w\",encoding"
                                                }
                                            ],
                                            "content": "\nwith open(file_path,\"w\",encoding="
                                        }
                                    ],
                                    "content": "\nwith open(file_path,\"w\",encoding="
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        198,
                                        209
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                200,
                                                208
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "file.write",
                                                    "range": [
                                                        200,
                                                        208
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "str",
                                                            "range": [
                                                                204,
                                                                207
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "pid",
                                                                    "range": [
                                                                        206,
                                                                        206
                                                                    ],
                                                                    "children": [],
                                                                    "content": "str"
                                                                }
                                                            ],
                                                            "content": "write(str("
                                                        }
                                                    ],
                                                    "content": ":\nfile.write(str(pid"
                                                }
                                            ],
                                            "content": ":\nfile.write(str(pid"
                                        }
                                    ],
                                    "content": "as file:\nfile.write(str(pid)"
                                }
                            ],
                            "content": ")\nwith open(file_path,\"w\",encoding=\"utf-8\")as file:\nfile.write(str(pid)"
                        }
                    ],
                    "content": "):\nfile_path=get_pid_path()\nos.makedirs(file_path.parent,exist_ok=True)\nwith open(file_path,\"w\",encoding=\"utf-8\")as file:\nfile.write(str(pid)"
                }
            ],
            "content": "\n\ndef write_pid(pid:int):\nfile_path=get_pid_path()\nos.makedirs(file_path.parent,exist_ok=True)\nwith open(file_path,\"w\",encoding=\"utf-8\")as file:\nfile.write(str(pid)"
        },
        {
            "type": "ClassDecl",
            "name": "MainApp",
            "range": [
                212,
                218
            ],
            "children": [
                {
                    "type": "FunctionDecl",
                    "name": "run",
                    "range": [
                        219,
                        234
                    ],
                    "children": [
                        {
                            "type": "ParameterList",
                            "name": "",
                            "range": [
                                221,
                                223
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "self",
                                    "range": [
                                        222,
                                        222
                                    ],
                                    "children": [],
                                    "content": "run"
                                }
                            ],
                            "content": "def run("
                        },
                        {
                            "type": "Block",
                            "name": "",
                            "range": [
                                224,
                                234
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "",
                                    "range": [
                                        226,
                                        233
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "main",
                                            "range": [
                                                226,
                                                233
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "app",
                                                    "range": [
                                                        226,
                                                        227
                                                    ],
                                                    "children": [],
                                                    "content": ":\n"
                                                },
                                                {
                                                    "type": "ArgumentList",
                                                    "name": "",
                                                    "range": [
                                                        229,
                                                        233
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "NamedArgument",
                                                            "name": "silent",
                                                            "range": [
                                                                230,
                                                                232
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "True",
                                                                    "range": [
                                                                        232,
                                                                        232
                                                                    ],
                                                                    "children": [],
                                                                    "content": "silent"
                                                                }
                                                            ],
                                                            "content": "main(silent"
                                                        }
                                                    ],
                                                    "content": ".main(silent="
                                                }
                                            ],
                                            "content": ":\napp.main(silent="
                                        }
                                    ],
                                    "content": ":\napp.main(silent="
                                }
                            ],
                            "content": "self):\napp.main(silent=True"
                        }
                    ],
                    "content": ":\ndef run(self):\napp.main(silent=True"
                }
            ],
            "content": "\n\nclass MainApp(AppProcess)"
        },
        {
            "type": "FunctionDecl",
            "name": "main",
            "range": [
                244,
                255
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        244,
                        248
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                244,
                                247
                            ],
                            "children": [],
                            "content": ")\ndef main"
                        },
                        {
                            "type": "Identifier",
                            "name": "main",
                            "range": [
                                245,
                                249
                            ],
                            "children": [],
                            "content": "\ndef main()"
                        }
                    ],
                    "content": ")\ndef main("
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        249,
                        255
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"AutoGPT Server CLI Tool\"",
                            "range": [
                                250,
                                252
                            ],
                            "children": [],
                            "content": ":\n\"\""
                        },
                        {
                            "type": "Keyword",
                            "name": "pass",
                            "range": [
                                254,
                                258
                            ],
                            "children": [],
                            "content": "\"\"\npass\n\n"
                        }
                    ],
                    "content": "):\n\"\"\"AutoGPT Server CLI Tool\"\"\"\n"
                }
            ],
            "content": ")\ndef main():\n\"\"\"AutoGPT Server CLI Tool\"\"\"\n"
        },
        {
            "type": "FunctionDecl",
            "name": "main.command",
            "range": [
                258,
                263
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        258,
                        263
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "@",
                            "range": [
                                258,
                                258
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "main",
                            "range": [
                                259,
                                259
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Identifier",
                            "name": ".",
                            "range": [
                                260,
                                260
                            ],
                            "children": [],
                            "content": "@"
                        },
                        {
                            "type": "Identifier",
                            "name": "command",
                            "range": [
                                261,
                                261
                            ],
                            "children": [],
                            "content": "main"
                        }
                    ],
                    "content": "\n\n@main.command"
                }
            ],
            "content": "\n\n@main.command"
        },
        {
            "type": "FunctionDecl",
            "name": "start",
            "range": [
                265,
                269
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        265,
                        269
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "def",
                            "range": [
                                265,
                                265
                            ],
                            "children": [],
                            "content": ")"
                        },
                        {
                            "type": "Identifier",
                            "name": "start",
                            "range": [
                                266,
                                266
                            ],
                            "children": [],
                            "content": "\n"
                        }
                    ],
                    "content": ")\ndef start("
                }
            ],
            "content": ")\ndef start("
        },
        {
            "type": "VariableDecl",
            "name": "pid",
            "range": [
                286,
                290
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        286,
                        290
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "pid",
                            "range": [
                                286,
                                286
                            ],
                            "children": [],
                            "content": "file"
                        },
                        {
                            "type": "CallExpression",
                            "name": "get_pid",
                            "range": [
                                288,
                                290
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "get_pid",
                                    "range": [
                                        288,
                                        288
                                    ],
                                    "children": [],
                                    "content": "pid"
                                }
                            ],
                            "content": "pid=get_pid"
                        }
                    ],
                    "content": "file\npid=get_pid"
                }
            ],
            "content": "file\npid=get_pid"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                292,
                301
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "",
                    "range": [
                        292,
                        301
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "if",
                            "range": [
                                292,
                                292
                            ],
                            "children": [],
                            "content": ")"
                        },
                        {
                            "type": "LogicalExpression",
                            "name": "",
                            "range": [
                                293,
                                300
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "pid",
                                    "range": [
                                        293,
                                        293
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "psutil.pid_exists",
                                    "range": [
                                        295,
                                        300
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "psutil",
                                            "range": [
                                                295,
                                                295
                                            ],
                                            "children": [],
                                            "content": "pid"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": ".",
                                            "range": [
                                                296,
                                                296
                                            ],
                                            "children": [],
                                            "content": "and"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "pid_exists",
                                            "range": [
                                                297,
                                                297
                                            ],
                                            "children": [],
                                            "content": "psutil"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "pid",
                                            "range": [
                                                299,
                                                299
                                            ],
                                            "children": [],
                                            "content": "pid_exists"
                                        }
                                    ],
                                    "content": "pid and psutil.pid_exists("
                                }
                            ],
                            "content": "\nif pid and psutil.pid_exists("
                        }
                    ],
                    "content": ")\nif pid and psutil.pid_exists(pid"
                }
            ],
            "content": ")\nif pid and psutil.pid_exists(pid"
        },
        {
            "type": "CallExpression",
            "name": "print",
            "range": [
                303,
                306
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "print",
                    "range": [
                        303,
                        303
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "Literal",
                    "name": "\"Server is already running\"",
                    "range": [
                        305,
                        305
                    ],
                    "children": [],
                    "content": "print"
                }
            ],
            "content": ":\nprint("
        },
        {
            "type": "CallExpression",
            "name": "exit",
            "range": [
                308,
                311
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "exit",
                    "range": [
                        308,
                        308
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Literal",
                    "name": "1",
                    "range": [
                        310,
                        310
                    ],
                    "children": [],
                    "content": "exit"
                }
            ],
            "content": ")\nexit("
        },
        {
            "type": "ElifStatement",
            "name": "",
            "range": [
                313,
                315
            ],
            "children": [
                {
                    "type": "Condition",
                    "name": "",
                    "range": [
                        313,
                        315
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "elif",
                            "range": [
                                313,
                                313
                            ],
                            "children": [],
                            "content": ")"
                        },
                        {
                            "type": "Identifier",
                            "name": "pid",
                            "range": [
                                314,
                                314
                            ],
                            "children": [],
                            "content": "\n"
                        }
                    ],
                    "content": ")\nelif"
                }
            ],
            "content": ")\nelif"
        },
        {
            "type": "CallExpression",
            "name": "print",
            "range": [
                317,
                320
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "print",
                    "range": [
                        317,
                        317
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "Literal",
                    "name": "\"PID does not exist deleting file\"",
                    "range": [
                        319,
                        319
                    ],
                    "children": [],
                    "content": "print"
                }
            ],
            "content": ":\nprint("
        },
        {
            "type": "CallExpression",
            "name": "os.remove",
            "range": [
                322,
                329
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "os",
                    "range": [
                        322,
                        322
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Identifier",
                    "name": ".",
                    "range": [
                        323,
                        323
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Identifier",
                    "name": "remove",
                    "range": [
                        324,
                        324
                    ],
                    "children": [],
                    "content": "os"
                },
                {
                    "type": "CallExpression",
                    "name": "get_pid_path",
                    "range": [
                        326,
                        329
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "get_pid_path",
                            "range": [
                                326,
                                326
                            ],
                            "children": [],
                            "content": "remove"
                        }
                    ],
                    "content": "remove(get_pid_path("
                }
            ],
            "content": ")\nos.remove(get_pid_path("
        },
        {
            "type": "CallExpression",
            "name": "print",
            "range": [
                332,
                335
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "print",
                    "range": [
                        332,
                        332
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Literal",
                    "name": "\"Starting server\"",
                    "range": [
                        334,
                        334
                    ],
                    "children": [],
                    "content": "print"
                }
            ],
            "content": "\n\nprint("
        },
        {
            "type": "VariableDecl",
            "name": "pid",
            "range": [
                337,
                352
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        337,
                        352
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "pid",
                            "range": [
                                337,
                                337
                            ],
                            "children": [],
                            "content": ")"
                        },
                        {
                            "type": "CallExpression",
                            "name": "MainApp.start",
                            "range": [
                                339,
                                352
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "MainApp",
                                    "range": [
                                        339,
                                        339
                                    ],
                                    "children": [],
                                    "content": "pid"
                                },
                                {
                                    "type": "Identifier",
                                    "name": ".",
                                    "range": [
                                        342,
                                        342
                                    ],
                                    "children": [],
                                    "content": "("
                                },
                                {
                                    "type": "Identifier",
                                    "name": "start",
                                    "range": [
                                        343,
                                        343
                                    ],
                                    "children": [],
                                    "content": ")"
                                },
                                {
                                    "type": "NamedArgument",
                                    "name": "background",
                                    "range": [
                                        345,
                                        347
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "background",
                                            "range": [
                                                345,
                                                345
                                            ],
                                            "children": [],
                                            "content": "start"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "True",
                                            "range": [
                                                347,
                                                347
                                            ],
                                            "children": [],
                                            "content": "background"
                                        }
                                    ],
                                    "content": "start(background"
                                },
                                {
                                    "type": "NamedArgument",
                                    "name": "silent",
                                    "range": [
                                        349,
                                        351
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "silent",
                                            "range": [
                                                349,
                                                349
                                            ],
                                            "children": [],
                                            "content": "True"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "True",
                                            "range": [
                                                351,
                                                351
                                            ],
                                            "children": [],
                                            "content": "silent"
                                        }
                                    ],
                                    "content": "True,silent"
                                }
                            ],
                            "content": "pid=MainApp().start(background=True,silent="
                        }
                    ],
                    "content": ")\npid=MainApp().start(background=True,silent="
                }
            ],
            "content": ")\npid=MainApp().start(background=True,silent="
        },
        {
            "type": "CallExpression",
            "name": "print",
            "range": [
                354,
                358
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "print",
                    "range": [
                        354,
                        354
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Literal",
                    "name": "f\"Server running in process: {pid}\"",
                    "range": [
                        356,
                        357
                    ],
                    "children": [],
                    "content": "print("
                }
            ],
            "content": ")\nprint(f"
        },
        {
            "type": "CallExpression",
            "name": "write_pid",
            "range": [
                361,
                364
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "write_pid",
                    "range": [
                        361,
                        361
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Identifier",
                    "name": "pid",
                    "range": [
                        363,
                        363
                    ],
                    "children": [],
                    "content": "write_pid"
                }
            ],
            "content": "\n\nwrite_pid("
        },
        {
            "type": "CallExpression",
            "name": "print",
            "range": [
                366,
                369
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "print",
                    "range": [
                        366,
                        366
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Literal",
                    "name": "\"done\"",
                    "range": [
                        368,
                        368
                    ],
                    "children": [],
                    "content": "print"
                }
            ],
            "content": ")\nprint("
        },
        {
            "type": "CallExpression",
            "name": "os._exit",
            "range": [
                371,
                378
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "os",
                    "range": [
                        371,
                        371
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "Identifier",
                    "name": ".",
                    "range": [
                        372,
                        372
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Identifier",
                    "name": "_exit",
                    "range": [
                        373,
                        373
                    ],
                    "children": [],
                    "content": "os"
                },
                {
                    "type": "NamedArgument",
                    "name": "status",
                    "range": [
                        375,
                        377
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "status",
                            "range": [
                                375,
                                375
                            ],
                            "children": [],
                            "content": "_exit"
                        },
                        {
                            "type": "Literal",
                            "name": "0",
                            "range": [
                                377,
                                377
                            ],
                            "children": [],
                            "content": "status"
                        }
                    ],
                    "content": "_exit(status"
                }
            ],
            "content": ")\nos._exit(status="
        },
        {
            "type": "FunctionDecl",
            "name": "main.command",
            "range": [
                381,
                387
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        381,
                        386
                    ],
                    "children": [
                        {
                            "type": "FunctionName",
                            "name": "main.command",
                            "range": [
                                381,
                                384
                            ],
                            "children": [],
                            "content": "\n\n\n@"
                        }
                    ],
                    "content": "\n\n\n@main."
                }
            ],
            "content": "\n\n\n@main.command"
        },
        {
            "type": "FunctionDecl",
            "name": "stop",
            "range": [
                388,
                469
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        388,
                        392
                    ],
                    "children": [
                        {
                            "type": "FunctionName",
                            "name": "stop",
                            "range": [
                                388,
                                391
                            ],
                            "children": [],
                            "content": "()\ndef"
                        }
                    ],
                    "content": "()\ndef stop"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        393,
                        469
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "",
                            "range": [
                                394,
                                396
                            ],
                            "children": [],
                            "content": "):\n"
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "pid",
                            "range": [
                                398,
                                403
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "",
                                    "range": [
                                        398,
                                        403
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "pid",
                                            "range": [
                                                398,
                                                401
                                            ],
                                            "children": [],
                                            "content": "\" \\n     Stops the server \\n     \"\"\"\npid"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "get_pid",
                                            "range": [
                                                400,
                                                403
                                            ],
                                            "children": [],
                                            "content": "\npid=get_pid"
                                        }
                                    ],
                                    "content": "\" \\n     Stops the server \\n     \"\"\"\npid=get_pid"
                                }
                            ],
                            "content": "\" \\n     Stops the server \\n     \"\"\"\npid=get_pid"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                404,
                                415
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        404,
                                        407
                                    ],
                                    "children": [
                                        {
                                            "type": "UnaryExpression",
                                            "name": "not",
                                            "range": [
                                                405,
                                                407
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "pid",
                                                    "range": [
                                                        406,
                                                        407
                                                    ],
                                                    "children": [],
                                                    "content": "\nif"
                                                }
                                            ],
                                            "content": ")\nif"
                                        }
                                    ],
                                    "content": "()\nif"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        408,
                                        415
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                409,
                                                413
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "print",
                                                    "range": [
                                                        409,
                                                        413
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "StringLiteral",
                                                            "name": "\"Server is not running\"",
                                                            "range": [
                                                                411,
                                                                413
                                                            ],
                                                            "children": [],
                                                            "content": "\nprint("
                                                        }
                                                    ],
                                                    "content": "pid:\nprint("
                                                }
                                            ],
                                            "content": "pid:\nprint("
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "",
                                            "range": [
                                                414,
                                                415
                                            ],
                                            "children": [],
                                            "content": "\"Server is not running\")"
                                        }
                                    ],
                                    "content": "not pid:\nprint(\"Server is not running\")"
                                }
                            ],
                            "content": "()\nif not pid:\nprint(\"Server is not running\")"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                417,
                                425
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "os.remove",
                                    "range": [
                                        417,
                                        425
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_pid_path",
                                            "range": [
                                                421,
                                                424
                                            ],
                                            "children": [],
                                            "content": ".remove(get_pid_path"
                                        }
                                    ],
                                    "content": "return\n\nos.remove(get_pid_path("
                                }
                            ],
                            "content": "return\n\nos.remove(get_pid_path("
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "process",
                            "range": [
                                426,
                                437
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "",
                                    "range": [
                                        426,
                                        437
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "process",
                                            "range": [
                                                426,
                                                433
                                            ],
                                            "children": [],
                                            "content": "))\nprocess=psutil.Process"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "psutil.Process",
                                            "range": [
                                                428,
                                                437
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "int",
                                                    "range": [
                                                        432,
                                                        436
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "pid",
                                                            "range": [
                                                                434,
                                                                436
                                                            ],
                                                            "children": [],
                                                            "content": "(int("
                                                        }
                                                    ],
                                                    "content": ".Process(int("
                                                }
                                            ],
                                            "content": "\nprocess=psutil.Process(int(pid"
                                        }
                                    ],
                                    "content": "))\nprocess=psutil.Process(int(pid"
                                }
                            ],
                            "content": "))\nprocess=psutil.Process(int(pid"
                        },
                        {
                            "type": "ForStatement",
                            "name": "",
                            "range": [
                                438,
                                456
                            ],
                            "children": [
                                {
                                    "type": "Initialization",
                                    "name": "",
                                    "range": [
                                        438,
                                        441
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "child",
                                            "range": [
                                                439,
                                                441
                                            ],
                                            "children": [],
                                            "content": ")\nfor"
                                        }
                                    ],
                                    "content": "))\nfor"
                                },
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        442,
                                        448
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "process.children",
                                            "range": [
                                                442,
                                                448
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "process",
                                                    "range": [
                                                        441,
                                                        442
                                                    ],
                                                    "children": [],
                                                    "content": "for child"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "children",
                                                    "range": [
                                                        443,
                                                        448
                                                    ],
                                                    "children": [],
                                                    "content": "in process.children(recursive"
                                                }
                                            ],
                                            "content": "child in process.children(recursive"
                                        }
                                    ],
                                    "content": "child in process.children(recursive"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        449,
                                        456
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                451,
                                                455
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "child.terminate",
                                                    "range": [
                                                        451,
                                                        455
                                                    ],
                                                    "children": [],
                                                    "content": "):\nchild."
                                                }
                                            ],
                                            "content": "):\nchild."
                                        }
                                    ],
                                    "content": "=True):\nchild.terminate"
                                }
                            ],
                            "content": "))\nfor child in process.children(recursive=True):\nchild.terminate"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                457,
                                462
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "process.terminate",
                                    "range": [
                                        457,
                                        462
                                    ],
                                    "children": [],
                                    "content": "()\nprocess.terminate"
                                }
                            ],
                            "content": "()\nprocess.terminate"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                464,
                                468
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "print",
                                    "range": [
                                        464,
                                        468
                                    ],
                                    "children": [
                                        {
                                            "type": "StringLiteral",
                                            "name": "\"Server Stopped\"",
                                            "range": [
                                                466,
                                                468
                                            ],
                                            "children": [],
                                            "content": "\nprint("
                                        }
                                    ],
                                    "content": ")\n\nprint("
                                }
                            ],
                            "content": ")\n\nprint("
                        }
                    ],
                    "content": "():\n\"\"\" \\n     Stops the server \\n     \"\"\"\npid=get_pid()\nif not pid:\nprint(\"Server is not running\")\nreturn\n\nos.remove(get_pid_path())\nprocess=psutil.Process(int(pid))\nfor child in process.children(recursive=True):\nchild.terminate()\nprocess.terminate()\n\nprint(\"Server Stopped\""
                }
            ],
            "content": "()\ndef stop():\n\"\"\" \\n     Stops the server \\n     \"\"\"\npid=get_pid()\nif not pid:\nprint(\"Server is not running\")\nreturn\n\nos.remove(get_pid_path())\nprocess=psutil.Process(int(pid))\nfor child in process.children(recursive=True):\nchild.terminate()\nprocess.terminate()\n\nprint(\"Server Stopped\""
        },
        {
            "type": "FunctionDecl",
            "name": "main.command",
            "range": [
                470,
                476
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        470,
                        475
                    ],
                    "children": [
                        {
                            "type": "Decorator",
                            "name": "@",
                            "range": [
                                470,
                                470
                            ],
                            "children": [],
                            "content": ")"
                        },
                        {
                            "type": "Identifier",
                            "name": "main.command",
                            "range": [
                                471,
                                473
                            ],
                            "children": [],
                            "content": "\n\n\n"
                        }
                    ],
                    "content": ")\n\n\n@main"
                }
            ],
            "content": ")\n\n\n@main."
        },
        {
            "type": "FunctionDecl",
            "name": "gen_encrypt_key",
            "range": [
                477,
                507
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        477,
                        481
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                477,
                                477
                            ],
                            "children": [],
                            "content": "command"
                        },
                        {
                            "type": "Identifier",
                            "name": "gen_encrypt_key",
                            "range": [
                                478,
                                478
                            ],
                            "children": [],
                            "content": "("
                        }
                    ],
                    "content": "command()\ndef"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        483,
                        485
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\" \\n     Generate a new encryption key \\n     \"",
                            "range": [
                                484,
                                484
                            ],
                            "children": [],
                            "content": ")"
                        }
                    ],
                    "content": "():"
                },
                {
                    "type": "ImportStatement",
                    "name": "",
                    "range": [
                        487,
                        493
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "from",
                            "range": [
                                487,
                                487
                            ],
                            "children": [],
                            "content": "\"\""
                        },
                        {
                            "type": "Identifier",
                            "name": "cryptography.fernet",
                            "range": [
                                488,
                                490
                            ],
                            "children": [],
                            "content": "\" \\n     Generate a new encryption key \\n     \"\"\"\n"
                        },
                        {
                            "type": "Keyword",
                            "name": "import",
                            "range": [
                                491,
                                491
                            ],
                            "children": [],
                            "content": "from"
                        },
                        {
                            "type": "Identifier",
                            "name": "Fernet",
                            "range": [
                                492,
                                492
                            ],
                            "children": [],
                            "content": "cryptography"
                        }
                    ],
                    "content": "\"\"\" \\n     Generate a new encryption key \\n     \"\"\"\nfrom cryptography."
                },
                {
                    "type": "ExpressionStatement",
                    "name": "",
                    "range": [
                        495,
                        507
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "print",
                            "range": [
                                495,
                                506
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "print",
                                    "range": [
                                        495,
                                        495
                                    ],
                                    "children": [],
                                    "content": "import"
                                },
                                {
                                    "type": "Arguments",
                                    "name": "",
                                    "range": [
                                        496,
                                        506
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "Fernet.generate_key",
                                            "range": [
                                                497,
                                                505
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "Fernet",
                                                    "range": [
                                                        497,
                                                        497
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "generate_key",
                                                    "range": [
                                                        498,
                                                        499
                                                    ],
                                                    "children": [],
                                                    "content": "\nprint"
                                                }
                                            ],
                                            "content": "\n\nprint(Fernet.generate_key()"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "decode",
                                            "range": [
                                                502,
                                                505
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "decode",
                                                    "range": [
                                                        503,
                                                        503
                                                    ],
                                                    "children": [],
                                                    "content": "generate_key"
                                                }
                                            ],
                                            "content": ".generate_key()"
                                        }
                                    ],
                                    "content": "Fernet\n\nprint(Fernet.generate_key()."
                                }
                            ],
                            "content": "import Fernet\n\nprint(Fernet.generate_key()."
                        }
                    ],
                    "content": "import Fernet\n\nprint(Fernet.generate_key().decode"
                }
            ],
            "content": "command()\ndef gen_encrypt_key():\n\"\"\" \\n     Generate a new encryption key \\n     \"\"\"\nfrom cryptography.fernet import Fernet\n\nprint(Fernet.generate_key().decode"
        },
        {
            "type": "FunctionDecl",
            "name": "test",
            "range": [
                517,
                528
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "",
                    "range": [
                        517,
                        521
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                517,
                                520
                            ],
                            "children": [],
                            "content": "group()\n"
                        },
                        {
                            "type": "Identifier",
                            "name": "test",
                            "range": [
                                518,
                                522
                            ],
                            "children": [],
                            "content": "()\ndef test"
                        }
                    ],
                    "content": "group()\ndef"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        522,
                        528
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "",
                            "range": [
                                523,
                                525
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        523,
                                        525
                                    ],
                                    "children": [],
                                    "content": "():"
                                }
                            ],
                            "content": "():"
                        },
                        {
                            "type": "Statement",
                            "name": "pass",
                            "range": [
                                527,
                                528
                            ],
                            "children": [],
                            "content": "\"\"\" \\n     Group for test commands \\n     \""
                        }
                    ],
                    "content": "test():\n\"\"\" \\n     Group for test commands \\n     \""
                }
            ],
            "content": "group()\ndef test():\n\"\"\" \\n     Group for test commands \\n     \""
        },
        {
            "type": "FunctionDecl",
            "name": "populate_db",
            "range": [
                653,
                834
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "server_address",
                    "range": [
                        656,
                        658
                    ],
                    "children": [],
                    "content": "\ndef populate_db"
                },
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        658,
                        659
                    ],
                    "children": [],
                    "content": "populate_db("
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        660,
                        834
                    ],
                    "children": [
                        {
                            "type": "ImportStatement",
                            "name": "requests",
                            "range": [
                                666,
                                668
                            ],
                            "children": [],
                            "content": "\"\"\" \\n     Create an event graph \\n     \"\"\""
                        },
                        {
                            "type": "ImportStatement",
                            "name": "create_test_graph",
                            "range": [
                                670,
                                678
                            ],
                            "children": [],
                            "content": "import requests\n\nfrom backend.usecases."
                        },
                        {
                            "type": "VariableDecl",
                            "name": "test_graph",
                            "range": [
                                680,
                                685
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "create_test_graph",
                                    "range": [
                                        682,
                                        684
                                    ],
                                    "children": [],
                                    "content": "\n\ntest_graph"
                                }
                            ],
                            "content": "import create_test_graph\n\ntest_graph="
                        },
                        {
                            "type": "VariableDecl",
                            "name": "url",
                            "range": [
                                686,
                                690
                            ],
                            "children": [
                                {
                                    "type": "TemplateLiteral",
                                    "name": "",
                                    "range": [
                                        688,
                                        689
                                    ],
                                    "children": [],
                                    "content": ")\n"
                                }
                            ],
                            "content": "create_test_graph()\nurl"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "headers",
                            "range": [
                                691,
                                698
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        693,
                                        697
                                    ],
                                    "children": [],
                                    "content": "\"{server_address}/graphs\"\nheaders={"
                                }
                            ],
                            "content": "=f \"{server_address}/graphs\"\nheaders={\"Content-Type\""
                        },
                        {
                            "type": "VariableDecl",
                            "name": "data",
                            "range": [
                                699,
                                706
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "model_dump_json",
                                    "range": [
                                        703,
                                        705
                                    ],
                                    "children": [],
                                    "content": "data=test_graph"
                                }
                            ],
                            "content": ":\"application/json\"}\ndata=test_graph."
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                708,
                                724
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "post",
                                    "range": [
                                        712,
                                        723
                                    ],
                                    "children": [],
                                    "content": "response=requests.post(url,headers=headers,"
                                }
                            ],
                            "content": "()\n\nresponse=requests.post(url,headers=headers,data"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "graph_id",
                            "range": [
                                726,
                                736
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "json",
                                    "range": [
                                        730,
                                        735
                                    ],
                                    "children": [],
                                    "content": "graph_id=response.json("
                                }
                            ],
                            "content": "data)\n\ngraph_id=response.json()"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                738,
                                780
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        742,
                                        744
                                    ],
                                    "children": [],
                                    "content": "if response."
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        746,
                                        780
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "name": "execute_url",
                                            "range": [
                                                747,
                                                751
                                            ],
                                            "children": [
                                                {
                                                    "type": "TemplateLiteral",
                                                    "name": "",
                                                    "range": [
                                                        749,
                                                        750
                                                    ],
                                                    "children": [],
                                                    "content": ":\n"
                                                }
                                            ],
                                            "content": "=200:\nexecute_url"
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "text",
                                            "range": [
                                                752,
                                                755
                                            ],
                                            "children": [],
                                            "content": "=f \"{server_address}/graphs/{response.json()['id']}/execute\"\n"
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "input_data",
                                            "range": [
                                                756,
                                                763
                                            ],
                                            "children": [
                                                {
                                                    "type": "ObjectExpression",
                                                    "name": "",
                                                    "range": [
                                                        758,
                                                        762
                                                    ],
                                                    "children": [],
                                                    "content": "\"Hello, World!\"\ninput_data={"
                                                }
                                            ],
                                            "content": "text=\"Hello, World!\"\ninput_data={\"input\""
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                764,
                                                780
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "post",
                                                    "range": [
                                                        768,
                                                        779
                                                    ],
                                                    "children": [],
                                                    "content": "response=requests.post(execute_url,headers=headers,"
                                                }
                                            ],
                                            "content": ":text}\nresponse=requests.post(execute_url,headers=headers,json"
                                        }
                                    ],
                                    "content": "==200:\nexecute_url=f \"{server_address}/graphs/{response.json()['id']}/execute\"\ntext=\"Hello, World!\"\ninput_data={\"input\":text}\nresponse=requests.post(execute_url,headers=headers,json"
                                }
                            ],
                            "content": "\"id\"]\n\nif response.status_code==200:\nexecute_url=f \"{server_address}/graphs/{response.json()['id']}/execute\"\ntext=\"Hello, World!\"\ninput_data={\"input\":text}\nresponse=requests.post(execute_url,headers=headers,json"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "schedule_url",
                            "range": [
                                782,
                                786
                            ],
                            "children": [
                                {
                                    "type": "TemplateLiteral",
                                    "name": "",
                                    "range": [
                                        784,
                                        785
                                    ],
                                    "children": [],
                                    "content": "\n\n"
                                }
                            ],
                            "content": "input_data)\n\nschedule_url"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "data",
                            "range": [
                                787,
                                811
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        789,
                                        810
                                    ],
                                    "children": [],
                                    "content": "\"{server_address}/graphs/{graph_id}/schedules\"\ndata={\n\"graph_id\":graph_id,\n\"cron\":\"*/5 * * * *\",\n\"input_data\":{\"input\":\"Hello, World!\""
                                }
                            ],
                            "content": "=f \"{server_address}/graphs/{graph_id}/schedules\"\ndata={\n\"graph_id\":graph_id,\n\"cron\":\"*/5 * * * *\",\n\"input_data\":{\"input\":\"Hello, World!\"}"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                812,
                                828
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "post",
                                    "range": [
                                        816,
                                        827
                                    ],
                                    "children": [],
                                    "content": "response=requests.post(schedule_url,headers=headers,"
                                }
                            ],
                            "content": ",\n}\nresponse=requests.post(schedule_url,headers=headers,json"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                830,
                                834
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "print",
                                    "range": [
                                        831,
                                        833
                                    ],
                                    "children": [],
                                    "content": ")\n\n"
                                }
                            ],
                            "content": "data)\n\nprint"
                        }
                    ],
                    "content": "server_address:str):\n\"\"\" \\n     Create an event graph \\n     \"\"\"\nimport requests\n\nfrom backend.usecases.sample import create_test_graph\n\ntest_graph=create_test_graph()\nurl=f \"{server_address}/graphs\"\nheaders={\"Content-Type\":\"application/json\"}\ndata=test_graph.model_dump_json()\n\nresponse=requests.post(url,headers=headers,data=data)\n\ngraph_id=response.json()[\"id\"]\n\nif response.status_code==200:\nexecute_url=f \"{server_address}/graphs/{response.json()['id']}/execute\"\ntext=\"Hello, World!\"\ninput_data={\"input\":text}\nresponse=requests.post(execute_url,headers=headers,json=input_data)\n\nschedule_url=f \"{server_address}/graphs/{graph_id}/schedules\"\ndata={\n\"graph_id\":graph_id,\n\"cron\":\"*/5 * * * *\",\n\"input_data\":{\"input\":\"Hello, World!\"},\n}\nresponse=requests.post(schedule_url,headers=headers,json=data)\n\nprint"
                }
            ],
            "content": "(\"server_address\")\ndef populate_db(server_address:str):\n\"\"\" \\n     Create an event graph \\n     \"\"\"\nimport requests\n\nfrom backend.usecases.sample import create_test_graph\n\ntest_graph=create_test_graph()\nurl=f \"{server_address}/graphs\"\nheaders={\"Content-Type\":\"application/json\"}\ndata=test_graph.model_dump_json()\n\nresponse=requests.post(url,headers=headers,data=data)\n\ngraph_id=response.json()[\"id\"]\n\nif response.status_code==200:\nexecute_url=f \"{server_address}/graphs/{response.json()['id']}/execute\"\ntext=\"Hello, World!\"\ninput_data={\"input\":text}\nresponse=requests.post(execute_url,headers=headers,json=input_data)\n\nschedule_url=f \"{server_address}/graphs/{graph_id}/schedules\"\ndata={\n\"graph_id\":graph_id,\n\"cron\":\"*/5 * * * *\",\n\"input_data\":{\"input\":\"Hello, World!\"},\n}\nresponse=requests.post(schedule_url,headers=headers,json=data)\n\nprint"
        },
        {
            "type": "FunctionDecl",
            "name": "graph",
            "range": [
                852,
                919
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "server_address",
                    "range": [
                        855,
                        857
                    ],
                    "children": [],
                    "content": "\ndef graph"
                },
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        857,
                        858
                    ],
                    "children": [],
                    "content": "graph("
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        860,
                        919
                    ],
                    "children": [
                        {
                            "type": "ImportDeclaration",
                            "name": "requests",
                            "range": [
                                865,
                                867
                            ],
                            "children": [],
                            "content": "\"\"\" \\n     Create an event graph \\n     \"\"\""
                        },
                        {
                            "type": "ImportDeclaration",
                            "name": "create_test_graph",
                            "range": [
                                869,
                                877
                            ],
                            "children": [],
                            "content": "import requests\n\nfrom backend.usecases."
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "url",
                            "range": [
                                879,
                                883
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"{server_address}/graphs\"",
                                    "range": [
                                        882,
                                        883
                                    ],
                                    "children": [],
                                    "content": "\nurl"
                                }
                            ],
                            "content": "import create_test_graph\n\nurl"
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "headers",
                            "range": [
                                884,
                                891
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        886,
                                        890
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "Content-Type",
                                            "range": [
                                                887,
                                                889
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"application/json\"",
                                                    "range": [
                                                        889,
                                                        889
                                                    ],
                                                    "children": [],
                                                    "content": "="
                                                }
                                            ],
                                            "content": "\nheaders="
                                        }
                                    ],
                                    "content": "\"{server_address}/graphs\"\nheaders={"
                                }
                            ],
                            "content": "=f \"{server_address}/graphs\"\nheaders={\"Content-Type\""
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "data",
                            "range": [
                                892,
                                901
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "create_test_graph",
                                    "range": [
                                        894,
                                        900
                                    ],
                                    "children": [],
                                    "content": "}\ndata=create_test_graph()"
                                }
                            ],
                            "content": ":\"application/json\"}\ndata=create_test_graph()."
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "response",
                            "range": [
                                902,
                                918
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "requests.post",
                                    "range": [
                                        904,
                                        917
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "url",
                                            "range": [
                                                908,
                                                908
                                            ],
                                            "children": [],
                                            "content": "requests"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "headers",
                                            "range": [
                                                910,
                                                912
                                            ],
                                            "children": [],
                                            "content": "post(url"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "data",
                                            "range": [
                                                914,
                                                916
                                            ],
                                            "children": [],
                                            "content": "headers=headers"
                                        }
                                    ],
                                    "content": ")\nresponse=requests.post(url,headers=headers,"
                                }
                            ],
                            "content": "model_dump_json()\nresponse=requests.post(url,headers=headers,data"
                        }
                    ],
                    "content": ":str):\n\"\"\" \\n     Create an event graph \\n     \"\"\"\nimport requests\n\nfrom backend.usecases.sample import create_test_graph\n\nurl=f \"{server_address}/graphs\"\nheaders={\"Content-Type\":\"application/json\"}\ndata=create_test_graph().model_dump_json()\nresponse=requests.post(url,headers=headers,data="
                }
            ],
            "content": "(\"server_address\")\ndef graph(server_address:str):\n\"\"\" \\n     Create an event graph \\n     \"\"\"\nimport requests\n\nfrom backend.usecases.sample import create_test_graph\n\nurl=f \"{server_address}/graphs\"\nheaders={\"Content-Type\":\"application/json\"}\ndata=create_test_graph().model_dump_json()\nresponse=requests.post(url,headers=headers,data="
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                920,
                940
            ],
            "children": [
                {
                    "type": "BinaryExpression",
                    "name": "==",
                    "range": [
                        924,
                        926
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "response.status_code",
                            "range": [
                                921,
                                923
                            ],
                            "children": [],
                            "content": ")\n\n"
                        },
                        {
                            "type": "Literal",
                            "name": "200",
                            "range": [
                                926,
                                926
                            ],
                            "children": [],
                            "content": "."
                        }
                    ],
                    "content": "if response."
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        928,
                        940
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                929,
                                939
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "print",
                                    "range": [
                                        929,
                                        939
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "response.json",
                                            "range": [
                                                931,
                                                935
                                            ],
                                            "children": [],
                                            "content": ":\nprint(response"
                                        }
                                    ],
                                    "content": "=200:\nprint(response.json()"
                                }
                            ],
                            "content": "=200:\nprint(response.json()"
                        }
                    ],
                    "content": "==200:\nprint(response.json()["
                }
            ],
            "content": "data)\n\nif response.status_code==200:\nprint(response.json()["
        },
        {
            "type": "VariableDeclaration",
            "name": "execute_url",
            "range": [
                941,
                945
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\"{server_address}/graphs/{response.json()['id']}/execute\"",
                    "range": [
                        944,
                        945
                    ],
                    "children": [],
                    "content": "\nexecute_url"
                }
            ],
            "content": "\"id\"])\nexecute_url"
        },
        {
            "type": "VariableDeclaration",
            "name": "text",
            "range": [
                946,
                949
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "\"Hello, World!\"",
                    "range": [
                        948,
                        949
                    ],
                    "children": [],
                    "content": "\"{server_address}/graphs/{response.json()['id']}/execute\"\n"
                }
            ],
            "content": "=f \"{server_address}/graphs/{response.json()['id']}/execute\"\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "input_data",
            "range": [
                950,
                957
            ],
            "children": [
                {
                    "type": "ObjectExpression",
                    "name": "",
                    "range": [
                        952,
                        956
                    ],
                    "children": [
                        {
                            "type": "Property",
                            "name": "input",
                            "range": [
                                953,
                                955
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "text",
                                    "range": [
                                        955,
                                        955
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": "\ninput_data="
                        }
                    ],
                    "content": "\"Hello, World!\"\ninput_data={"
                }
            ],
            "content": "text=\"Hello, World!\"\ninput_data={\"input\""
        },
        {
            "type": "VariableDeclaration",
            "name": "response",
            "range": [
                958,
                974
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "requests.post",
                    "range": [
                        960,
                        973
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "execute_url",
                            "range": [
                                964,
                                964
                            ],
                            "children": [],
                            "content": "requests"
                        },
                        {
                            "type": "Identifier",
                            "name": "headers",
                            "range": [
                                966,
                                968
                            ],
                            "children": [],
                            "content": "post(execute_url"
                        },
                        {
                            "type": "Identifier",
                            "name": "input_data",
                            "range": [
                                970,
                                972
                            ],
                            "children": [],
                            "content": "headers=headers"
                        }
                    ],
                    "content": "}\nresponse=requests.post(execute_url,headers=headers,"
                }
            ],
            "content": ":text}\nresponse=requests.post(execute_url,headers=headers,json"
        },
        {
            "type": "ElseStatement",
            "name": "",
            "range": [
                976,
                983
            ],
            "children": [
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        978,
                        983
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                979,
                                982
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "print",
                                    "range": [
                                        979,
                                        982
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"Failed to send graph\"",
                                            "range": [
                                                981,
                                                982
                                            ],
                                            "children": [],
                                            "content": ":\n"
                                        }
                                    ],
                                    "content": "\nelse:\n"
                                }
                            ],
                            "content": "\nelse:\n"
                        }
                    ],
                    "content": "\n\nelse:\nprint"
                }
            ],
            "content": "input_data)\n\nelse:\nprint"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                984,
                989
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "print",
                    "range": [
                        984,
                        988
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"Response: {response.text}\"",
                            "range": [
                                987,
                                988
                            ],
                            "children": [],
                            "content": "\nprint"
                        }
                    ],
                    "content": "(\"Failed to send graph\")\nprint"
                }
            ],
            "content": "(\"Failed to send graph\")\nprint("
        },
        {
            "type": "FunctionDecl",
            "name": "execute",
            "range": [
                1015,
                1064
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "graph_id",
                    "range": [
                        1018,
                        1020
                    ],
                    "children": [],
                    "content": "\ndef execute"
                },
                {
                    "type": "Parameter",
                    "name": "content",
                    "range": [
                        1022,
                        1024
                    ],
                    "children": [],
                    "content": "graph_id:str"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1027,
                        1064
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "",
                            "range": [
                                1028,
                                1030
                            ],
                            "children": [],
                            "content": "dict):"
                        },
                        {
                            "type": "ImportDecl",
                            "name": "requests",
                            "range": [
                                1032,
                                1034
                            ],
                            "children": [],
                            "content": "\"\"\" \\n     Create an event graph \\n     \"\"\""
                        },
                        {
                            "type": "VariableDecl",
                            "name": "headers",
                            "range": [
                                1036,
                                1042
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        1038,
                                        1042
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "Content-Type",
                                            "range": [
                                                1039,
                                                1041
                                            ],
                                            "children": [],
                                            "content": "\nheaders="
                                        }
                                    ],
                                    "content": "\n\nheaders={"
                                }
                            ],
                            "content": "import requests\n\nheaders={"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "execute_url",
                            "range": [
                                1045,
                                1049
                            ],
                            "children": [
                                {
                                    "type": "TemplateLiteral",
                                    "name": "",
                                    "range": [
                                        1047,
                                        1049
                                    ],
                                    "children": [],
                                    "content": "\n\nexecute_url"
                                }
                            ],
                            "content": "\"application/json\"}\n\nexecute_url"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                1050,
                                1063
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "post",
                                    "range": [
                                        1050,
                                        1063
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "execute_url",
                                            "range": [
                                                1054,
                                                1055
                                            ],
                                            "children": [],
                                            "content": "requests."
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "headers",
                                            "range": [
                                                1056,
                                                1058
                                            ],
                                            "children": [],
                                            "content": "post(execute_url"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "content",
                                            "range": [
                                                1060,
                                                1062
                                            ],
                                            "children": [],
                                            "content": "headers=headers"
                                        }
                                    ],
                                    "content": "=f \"http://0.0.0.0:8000/graphs/{graph_id}/execute\"\nrequests.post(execute_url,headers=headers,"
                                }
                            ],
                            "content": "=f \"http://0.0.0.0:8000/graphs/{graph_id}/execute\"\nrequests.post(execute_url,headers=headers,"
                        }
                    ],
                    "content": ":dict):\n\"\"\" \\n     Create an event graph \\n     \"\"\"\nimport requests\n\nheaders={\"Content-Type\":\"application/json\"}\n\nexecute_url=f \"http://0.0.0.0:8000/graphs/{graph_id}/execute\"\nrequests.post(execute_url,headers=headers,json"
                }
            ],
            "content": "(\"content\")\ndef execute(graph_id:str,content:dict):\n\"\"\" \\n     Create an event graph \\n     \"\"\"\nimport requests\n\nheaders={\"Content-Type\":\"application/json\"}\n\nexecute_url=f \"http://0.0.0.0:8000/graphs/{graph_id}/execute\"\nrequests.post(execute_url,headers=headers,json"
        },
        {
            "type": "FunctionDecl",
            "name": "websocket",
            "range": [
                1114,
                1129
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "server_address",
                    "range": [
                        1117,
                        1119
                    ],
                    "children": [],
                    "content": "\ndef websocket"
                },
                {
                    "type": "Parameter",
                    "name": "graph_id",
                    "range": [
                        1121,
                        1123
                    ],
                    "children": [],
                    "content": "server_address:str"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        1127,
                        1129
                    ],
                    "children": [],
                    "content": "str):"
                }
            ],
            "content": "(\"graph_id\")\ndef websocket(server_address:str,graph_id:str):"
        },
        {
            "type": "ImportDecl",
            "name": "",
            "range": [
                1131,
                1133
            ],
            "children": [
                {
                    "type": "ImportedModule",
                    "name": "asyncio",
                    "range": [
                        1132,
                        1133
                    ],
                    "children": [],
                    "content": "\" \\n     Tests the websocket connection. \\n     \"\"\""
                }
            ],
            "content": "\"\"\" \\n     Tests the websocket connection. \\n     \"\"\""
        },
        {
            "type": "ImportDecl",
            "name": "",
            "range": [
                1135,
                1141
            ],
            "children": [
                {
                    "type": "ImportedModule",
                    "name": "websockets.asyncio.client",
                    "range": [
                        1136,
                        1141
                    ],
                    "children": [],
                    "content": "asyncio\n\nimport websockets."
                }
            ],
            "content": "import asyncio\n\nimport websockets."
        },
        {
            "type": "ImportDecl",
            "name": "",
            "range": [
                1143,
                1155
            ],
            "children": [
                {
                    "type": "ImportedModule",
                    "name": "backend.server.ws_api",
                    "range": [
                        1144,
                        1155
                    ],
                    "children": [
                        {
                            "type": "ImportedEntity",
                            "name": "ExecutionSubscription",
                            "range": [
                                1150,
                                1151
                            ],
                            "children": [],
                            "content": "server."
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "Methods",
                            "range": [
                                1152,
                                1153
                            ],
                            "children": [],
                            "content": "ws_api import"
                        },
                        {
                            "type": "ImportedEntity",
                            "name": "WsMessage",
                            "range": [
                                1154,
                                1155
                            ],
                            "children": [],
                            "content": "ExecutionSubscription,"
                        }
                    ],
                    "content": "client\n\nfrom backend.server.ws_api import ExecutionSubscription,"
                }
            ],
            "content": ".client\n\nfrom backend.server.ws_api import ExecutionSubscription,"
        },
        {
            "type": "FunctionDecl",
            "name": "send_message",
            "range": [
                1157,
                1264
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "server_address",
                    "range": [
                        1161,
                        1163
                    ],
                    "children": [],
                    "content": "async def send_message"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1166,
                        1264
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "uri",
                            "range": [
                                1167,
                                1171
                            ],
                            "children": [],
                            "content": "str):\nuri"
                        },
                        {
                            "type": "TryStatement",
                            "name": "",
                            "range": [
                                1188,
                                1264
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        1190,
                                        1256
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "name": "msg",
                                            "range": [
                                                1191,
                                                1222
                                            ],
                                            "children": [],
                                            "content": "\ntry:\nmsg=WsMessage(\nmethod=Methods.SUBSCRIBE,\ndata=ExecutionSubscription(graph_id=graph_id).model_dump(),\n)."
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                1223,
                                                1230
                                            ],
                                            "children": [],
                                            "content": "model_dump_json()\nawait websocket.send"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "",
                                            "range": [
                                                1231,
                                                1236
                                            ],
                                            "children": [],
                                            "content": "(msg)\nprint("
                                        },
                                        {
                                            "type": "WhileStatement",
                                            "name": "",
                                            "range": [
                                                1237,
                                                1255
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "",
                                                    "range": [
                                                        1240,
                                                        1255
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "VariableDecl",
                                                            "name": "response",
                                                            "range": [
                                                                1241,
                                                                1249
                                                            ],
                                                            "children": [],
                                                            "content": "while True:\nresponse=await websocket."
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "",
                                                            "range": [
                                                                1250,
                                                                1255
                                                            ],
                                                            "children": [],
                                                            "content": "recv()\nprint("
                                                        }
                                                    ],
                                                    "content": "\nwhile True:\nresponse=await websocket.recv()\nprint("
                                                }
                                            ],
                                            "content": "f \"Sending: {msg}\")\nwhile True:\nresponse=await websocket.recv()\nprint("
                                        }
                                    ],
                                    "content": ":\ntry:\nmsg=WsMessage(\nmethod=Methods.SUBSCRIBE,\ndata=ExecutionSubscription(graph_id=graph_id).model_dump(),\n).model_dump_json()\nawait websocket.send(msg)\nprint(f \"Sending: {msg}\")\nwhile True:\nresponse=await websocket.recv()\nprint(f"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "InterruptedError",
                                    "range": [
                                        1256,
                                        1264
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                1259,
                                                1264
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        1260,
                                                        1263
                                                    ],
                                                    "children": [],
                                                    "content": "except InterruptedError:\n"
                                                }
                                            ],
                                            "content": "\nexcept InterruptedError:\nexit"
                                        }
                                    ],
                                    "content": "f \"Response from server: {response}\")\nexcept InterruptedError:\nexit"
                                }
                            ],
                            "content": "as websocket:\ntry:\nmsg=WsMessage(\nmethod=Methods.SUBSCRIBE,\ndata=ExecutionSubscription(graph_id=graph_id).model_dump(),\n).model_dump_json()\nawait websocket.send(msg)\nprint(f \"Sending: {msg}\")\nwhile True:\nresponse=await websocket.recv()\nprint(f \"Response from server: {response}\")\nexcept InterruptedError:\nexit"
                        }
                    ],
                    "content": ":str):\nuri=f \"ws://{server_address}\"\nasync with websockets.asyncio.client.connect(uri)as websocket:\ntry:\nmsg=WsMessage(\nmethod=Methods.SUBSCRIBE,\ndata=ExecutionSubscription(graph_id=graph_id).model_dump(),\n).model_dump_json()\nawait websocket.send(msg)\nprint(f \"Sending: {msg}\")\nwhile True:\nresponse=await websocket.recv()\nprint(f \"Response from server: {response}\")\nexcept InterruptedError:\nexit"
                }
            ],
            "content": ",WsMessage\n\nasync def send_message(server_address:str):\nuri=f \"ws://{server_address}\"\nasync with websockets.asyncio.client.connect(uri)as websocket:\ntry:\nmsg=WsMessage(\nmethod=Methods.SUBSCRIBE,\ndata=ExecutionSubscription(graph_id=graph_id).model_dump(),\n).model_dump_json()\nawait websocket.send(msg)\nprint(f \"Sending: {msg}\")\nwhile True:\nresponse=await websocket.recv()\nprint(f \"Response from server: {response}\")\nexcept InterruptedError:\nexit"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                1266,
                1275
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "asyncio.run",
                    "range": [
                        1266,
                        1275
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "send_message",
                            "range": [
                                1270,
                                1274
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "server_address",
                                    "range": [
                                        1272,
                                        1273
                                    ],
                                    "children": [],
                                    "content": "run("
                                }
                            ],
                            "content": "asyncio.run(send_message"
                        }
                    ],
                    "content": "0)\n\nasyncio.run(send_message("
                }
            ],
            "content": "0)\n\nasyncio.run(send_message("
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                1276,
                1280
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "print",
                    "range": [
                        1276,
                        1280
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"Testing WS\"",
                            "range": [
                                1278,
                                1279
                            ],
                            "children": [],
                            "content": ")\n"
                        }
                    ],
                    "content": "server_address))\nprint"
                }
            ],
            "content": "server_address))\nprint"
        }
    ],
    "content": "\ndef get_pid()->int|None:\nfile_path=get_pid_path()\nif not file_path.exists():\nreturn None\n\nos.makedirs(file_path.parent,exist_ok=True)\nwith open(file_path,\"r\",encoding=\"utf-8\")as file:\npid=file.read()\ntry:\nreturn int(pid)\nexcept ValueError:\nreturn None\n\n\ndef write_pid(pid:int):\nfile_path=get_pid_path()\nos.makedirs(file_path.parent,exist_ok=True)\nwith open(file_path,\"w\",encoding=\"utf-8\")as file:\nfile.write(str(pid))\n\n\nclass MainApp(AppProcess):\ndef run(self):\napp.main(silent=True)\n\n\n@click.group()\ndef main():\n\"\"\"AutoGPT Server CLI Tool\"\"\"\npass\n\n\n@main.command()\ndef start():\n\"\"\" \\n     Starts the server in the background and saves the PID \\n     \"\"\"\n#Define the path for the new directory and file\npid=get_pid()\nif pid and psutil.pid_exists(pid):\nprint(\"Server is already running\")\nexit(1)\nelif pid:\nprint(\"PID does not exist deleting file\")\nos.remove(get_pid_path())\n\nprint(\"Starting server\")\npid=MainApp().start(background=True,silent=True)\nprint(f \"Server running in process: {pid}\")\n\nwrite_pid(pid)\nprint(\"done\")\nos._exit(status=0)\n\n\n@main.command()\ndef stop():\n\"\"\" \\n     Stops the server \\n     \"\"\"\npid=get_pid()\nif not pid:\nprint(\"Server is not running\")\nreturn\n\nos.remove(get_pid_path())\nprocess=psutil.Process(int(pid))\nfor child in process.children(recursive=True):\nchild.terminate()\nprocess.terminate()\n\nprint(\"Server Stopped\")\n\n\n@main.command()\ndef gen_encrypt_key():\n\"\"\" \\n     Generate a new encryption key \\n     \"\"\"\nfrom cryptography.fernet import Fernet\n\nprint(Fernet.generate_key().decode())\n\n\n@click.group()\ndef test():\n\"\"\" \\n     Group for test commands \\n     \"\"\"\npass\n\n\n@test.command()\n@click.argument(\"server_address\")\ndef reddit(server_address:str):\n\"\"\" \\n     Create an event graph \\n     \"\"\"\nimport requests\n\nfrom backend.usecases.reddit_marketing import create_test_graph\n\ntest_graph=create_test_graph()\nurl=f \"{server_address}/graphs\"\nheaders={\"Content-Type\":\"application/json\"}\ndata=test_graph.model_dump_json()\n\nresponse=requests.post(url,headers=headers,data=data)\n\ngraph_id=response.json()[\"id\"]\nprint(f \"Graph created with ID: {graph_id}\")\n\n\n@test.command()\n@click.argument(\"server_address\")\ndef populate_db(server_address:str):\n\"\"\" \\n     Create an event graph \\n     \"\"\"\nimport requests\n\nfrom backend.usecases.sample import create_test_graph\n\ntest_graph=create_test_graph()\nurl=f \"{server_address}/graphs\"\nheaders={\"Content-Type\":\"application/json\"}\ndata=test_graph.model_dump_json()\n\nresponse=requests.post(url,headers=headers,data=data)\n\ngraph_id=response.json()[\"id\"]\n\nif response.status_code==200:\nexecute_url=f \"{server_address}/graphs/{response.json()['id']}/execute\"\ntext=\"Hello, World!\"\ninput_data={\"input\":text}\nresponse=requests.post(execute_url,headers=headers,json=input_data)\n\nschedule_url=f \"{server_address}/graphs/{graph_id}/schedules\"\ndata={\n\"graph_id\":graph_id,\n\"cron\":\"*/5 * * * *\",\n\"input_data\":{\"input\":\"Hello, World!\"},\n}\nresponse=requests.post(schedule_url,headers=headers,json=data)\n\nprint(\"Database populated with: \\n- graph\\n- execution\\n- schedule\")\n\n\n@test.command()\n@click.argument(\"server_address\")\ndef graph(server_address:str):\n\"\"\" \\n     Create an event graph \\n     \"\"\"\nimport requests\n\nfrom backend.usecases.sample import create_test_graph\n\nurl=f \"{server_address}/graphs\"\nheaders={\"Content-Type\":\"application/json\"}\ndata=create_test_graph().model_dump_json()\nresponse=requests.post(url,headers=headers,data=data)\n\nif response.status_code==200:\nprint(response.json()[\"id\"])\nexecute_url=f \"{server_address}/graphs/{response.json()['id']}/execute\"\ntext=\"Hello, World!\"\ninput_data={\"input\":text}\nresponse=requests.post(execute_url,headers=headers,json=input_data)\n\nelse:\nprint(\"Failed to send graph\")\nprint(f \"Response: {response.text}\")\n\n\n@test.command()\n@click.argument(\"graph_id\")\n@click.argument(\"content\")\ndef execute(graph_id:str,content:dict):\n\"\"\" \\n     Create an event graph \\n     \"\"\"\nimport requests\n\nheaders={\"Content-Type\":\"application/json\"}\n\nexecute_url=f \"http://0.0.0.0:8000/graphs/{graph_id}/execute\"\nrequests.post(execute_url,headers=headers,json=content)\n\n\n@test.command()\ndef event():\n\"\"\" \\n     Send an event to the running server \\n     \"\"\"\nprint(\"Event sent\")\n\n\n@test.command()\n@click.argument(\"server_address\")\n@click.argument(\"graph_id\")\ndef websocket(server_address:str,graph_id:str):\n\"\"\" \\n     Tests the websocket connection. \\n     \"\"\"\nimport asyncio\n\nimport websockets.asyncio.client\n\nfrom backend.server.ws_api import ExecutionSubscription,Methods,WsMessage\n\nasync def send_message(server_address:str):\nuri=f \"ws://{server_address}\"\nasync with websockets.asyncio.client.connect(uri)as websocket:\ntry:\nmsg=WsMessage(\nmethod=Methods.SUBSCRIBE,\ndata=ExecutionSubscription(graph_id=graph_id).model_dump(),\n).model_dump_json()\nawait websocket.send(msg)\nprint(f \"Sending: {msg}\")\nwhile True:\nresponse=await websocket.recv()\nprint(f \"Response from server: {response}\")\nexcept InterruptedError:\nexit(0)\n\nasyncio.run(send_message(server_address))\nprint(\"Testing WS\""
}