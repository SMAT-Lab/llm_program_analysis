{
    "type": "Program",
    "name": "Global",
    "range": [
        14,
        519
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "test_validate_url",
            "range": [
                14,
                519
            ],
            "children": [
                {
                    "type": "Comment",
                    "name": "# Rejected IP ranges",
                    "range": [
                        20,
                        24
                    ],
                    "children": [],
                    "content": "\n#Rejected IP ranges"
                },
                {
                    "type": "WithStatement",
                    "name": "with pytest.raises ValueError",
                    "range": [
                        25,
                        41
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "validate_url localhost",
                            "range": [
                                34,
                                40
                            ],
                            "children": [],
                            "content": "\nvalidate_url(\"localhost\",[]"
                        }
                    ],
                    "content": "\nwith pytest.raises(ValueError):\nvalidate_url(\"localhost\",[])"
                },
                {
                    "type": "WithStatement",
                    "name": "with pytest.raises ValueError",
                    "range": [
                        43,
                        59
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "validate_url 192.168.1.1",
                            "range": [
                                52,
                                58
                            ],
                            "children": [],
                            "content": "\nvalidate_url(\"192.168.1.1\",[]"
                        }
                    ],
                    "content": "\nwith pytest.raises(ValueError):\nvalidate_url(\"192.168.1.1\",[])"
                },
                {
                    "type": "WithStatement",
                    "name": "with pytest.raises ValueError",
                    "range": [
                        61,
                        77
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "validate_url 127.0.0.1",
                            "range": [
                                70,
                                76
                            ],
                            "children": [],
                            "content": "\nvalidate_url(\"127.0.0.1\",[]"
                        }
                    ],
                    "content": "\nwith pytest.raises(ValueError):\nvalidate_url(\"127.0.0.1\",[])"
                },
                {
                    "type": "WithStatement",
                    "name": "with pytest.raises ValueError",
                    "range": [
                        79,
                        95
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "validate_url 0.0.0.0",
                            "range": [
                                88,
                                94
                            ],
                            "children": [],
                            "content": "\nvalidate_url(\"0.0.0.0\",[]"
                        }
                    ],
                    "content": "\nwith pytest.raises(ValueError):\nvalidate_url(\"0.0.0.0\",[])"
                },
                {
                    "type": "Comment",
                    "name": "# Normal URLs",
                    "range": [
                        97,
                        100
                    ],
                    "children": [],
                    "content": "\n#Normal URLs"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert validate_url google.com/a?b=c == http://google.com/a?b=c",
                    "range": [
                        101,
                        112
                    ],
                    "children": [],
                    "content": "\nassert validate_url(\"google.com/a?b=c\",[])==\"http://google.com/a?b=c\""
                },
                {
                    "type": "AssertStatement",
                    "name": "assert validate_url github.com?key=!@!@ == http://github.com?key=!@!@",
                    "range": [
                        113,
                        124
                    ],
                    "children": [],
                    "content": "\nassert validate_url(\"github.com?key=!@!@\",[])==\"http://github.com?key=!@!@\""
                },
                {
                    "type": "Comment",
                    "name": "# Scheme Enforcement",
                    "range": [
                        126,
                        129
                    ],
                    "children": [],
                    "content": "\n#Scheme Enforcement"
                },
                {
                    "type": "WithStatement",
                    "name": "with pytest.raises ValueError",
                    "range": [
                        130,
                        146
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "validate_url ftp://example.com",
                            "range": [
                                139,
                                145
                            ],
                            "children": [],
                            "content": "\nvalidate_url(\"ftp://example.com\",[]"
                        }
                    ],
                    "content": "\nwith pytest.raises(ValueError):\nvalidate_url(\"ftp://example.com\",[])"
                },
                {
                    "type": "WithStatement",
                    "name": "with pytest.raises ValueError",
                    "range": [
                        147,
                        163
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "validate_url file://example.com",
                            "range": [
                                156,
                                162
                            ],
                            "children": [],
                            "content": "\nvalidate_url(\"file://example.com\",[]"
                        }
                    ],
                    "content": "\nwith pytest.raises(ValueError):\nvalidate_url(\"file://example.com\",[])"
                },
                {
                    "type": "Comment",
                    "name": "# International domain that converts to punycode - should be allowed if public",
                    "range": [
                        165,
                        178
                    ],
                    "children": [],
                    "content": "\n#International domain that converts to punycode-should be allowed if public"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert validate_url http://xn--exmple-cua.com == http://xn--exmple-cua.com",
                    "range": [
                        179,
                        190
                    ],
                    "children": [],
                    "content": "\nassert validate_url(\"http://xn--exmple-cua.com\",[])==\"http://xn--exmple-cua.com\""
                },
                {
                    "type": "Comment",
                    "name": "# If the domain fails IDNA encoding or is invalid, it should raise an error",
                    "range": [
                        191,
                        207
                    ],
                    "children": [],
                    "content": "\n#If the domain fails IDNA encoding or is invalid,it should raise an error"
                },
                {
                    "type": "WithStatement",
                    "name": "with pytest.raises ValueError",
                    "range": [
                        208,
                        224
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "validate_url http://exa◌mple.com",
                            "range": [
                                217,
                                223
                            ],
                            "children": [],
                            "content": "\nvalidate_url(\"http://exa◌mple.com\",[]"
                        }
                    ],
                    "content": "\nwith pytest.raises(ValueError):\nvalidate_url(\"http://exa◌mple.com\",[])"
                },
                {
                    "type": "Comment",
                    "name": "# IPv6 Addresses",
                    "range": [
                        226,
                        229
                    ],
                    "children": [],
                    "content": "\n#IPv6 Addresses"
                },
                {
                    "type": "WithStatement",
                    "name": "with pytest.raises ValueError",
                    "range": [
                        230,
                        246
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "validate_url ::1",
                            "range": [
                                239,
                                245
                            ],
                            "children": [],
                            "content": "\nvalidate_url(\"::1\",[]"
                        }
                    ],
                    "content": "\nwith pytest.raises(ValueError):\nvalidate_url(\"::1\",[])"
                },
                {
                    "type": "WithStatement",
                    "name": "with pytest.raises ValueError",
                    "range": [
                        253,
                        269
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "validate_url http://[::1]",
                            "range": [
                                262,
                                268
                            ],
                            "children": [],
                            "content": "\nvalidate_url(\"http://[::1]\",[]"
                        }
                    ],
                    "content": "\nwith pytest.raises(ValueError):\nvalidate_url(\"http://[::1]\",[])"
                },
                {
                    "type": "Comment",
                    "name": "# Suspicious Characters in Hostname",
                    "range": [
                        278,
                        282
                    ],
                    "children": [],
                    "content": "#Suspicious Characters in Hostname"
                },
                {
                    "type": "WithStatement",
                    "name": "with pytest.raises ValueError",
                    "range": [
                        283,
                        299
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "validate_url http://example_underscore.com",
                            "range": [
                                292,
                                298
                            ],
                            "children": [],
                            "content": "\nvalidate_url(\"http://example_underscore.com\",[]"
                        }
                    ],
                    "content": "\nwith pytest.raises(ValueError):\nvalidate_url(\"http://example_underscore.com\",[])"
                },
                {
                    "type": "WithStatement",
                    "name": "with pytest.raises ValueError",
                    "range": [
                        300,
                        316
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "validate_url http://exa mple.com",
                            "range": [
                                309,
                                315
                            ],
                            "children": [],
                            "content": "\nvalidate_url(\"http://exa mple.com\",[]"
                        }
                    ],
                    "content": "\nwith pytest.raises(ValueError):\nvalidate_url(\"http://exa mple.com\",[])"
                },
                {
                    "type": "Comment",
                    "name": "# Malformed URLs",
                    "range": [
                        322,
                        325
                    ],
                    "children": [],
                    "content": "\n#Malformed URLs"
                },
                {
                    "type": "WithStatement",
                    "name": "with pytest.raises ValueError",
                    "range": [
                        326,
                        342
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "validate_url http://",
                            "range": [
                                335,
                                341
                            ],
                            "children": [],
                            "content": "\nvalidate_url(\"http://\",[]"
                        }
                    ],
                    "content": "\nwith pytest.raises(ValueError):\nvalidate_url(\"http://\",[])"
                },
                {
                    "type": "WithStatement",
                    "name": "with pytest.raises ValueError",
                    "range": [
                        346,
                        362
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "validate_url ://missing-scheme",
                            "range": [
                                355,
                                361
                            ],
                            "children": [],
                            "content": "\nvalidate_url(\"://missing-scheme\",[]"
                        }
                    ],
                    "content": "\nwith pytest.raises(ValueError):\nvalidate_url(\"://missing-scheme\",[])"
                },
                {
                    "type": "Comment",
                    "name": "# Trusted Origins",
                    "range": [
                        368,
                        371
                    ],
                    "children": [],
                    "content": "\n#Trusted Origins"
                },
                {
                    "type": "VariableDecl",
                    "name": "trusted = internal-api.company.com 10.0.0.5",
                    "range": [
                        372,
                        379
                    ],
                    "children": [],
                    "content": "\ntrusted=[\"internal-api.company.com\",\"10.0.0.5\"]"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert validate_url internal-api.company.com trusted == http://internal-api.company.com",
                    "range": [
                        380,
                        395
                    ],
                    "children": [],
                    "content": "\nassert(\nvalidate_url(\"internal-api.company.com\",trusted)\n==\"http://internal-api.company.com\"\n)"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert validate_url 10.0.0.5 10.0.0.5 == http://10.0.0.5",
                    "range": [
                        396,
                        408
                    ],
                    "children": [],
                    "content": "\nassert validate_url(\"10.0.0.5\",[\"10.0.0.5\"])==\"http://10.0.0.5\""
                },
                {
                    "type": "Comment",
                    "name": "# Special Characters in Path or Query",
                    "range": [
                        410,
                        417
                    ],
                    "children": [],
                    "content": "\n#Special Characters in Path or Query"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert validate_url example.com/path%20with%20spaces == http://example.com/path%20with%20spaces",
                    "range": [
                        418,
                        434
                    ],
                    "children": [],
                    "content": "\nassert(\nvalidate_url(\"example.com/path%20with%20spaces\",[])\n==\"http://example.com/path%20with%20spaces\"\n)"
                },
                {
                    "type": "Comment",
                    "name": "# Backslashes should be replaced with forward slashes",
                    "range": [
                        436,
                        444
                    ],
                    "children": [],
                    "content": "\n#Backslashes should be replaced with forward slashes"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert validate_url http://example.com\\\\backslash == http://example.com/backslash",
                    "range": [
                        445,
                        461
                    ],
                    "children": [],
                    "content": "\nassert(\nvalidate_url(\"http://example.com\\\\backslash\",[])\n==\"http://example.com/backslash\"\n)"
                },
                {
                    "type": "Comment",
                    "name": "# Check defaulting scheme behavior for valid domains",
                    "range": [
                        463,
                        471
                    ],
                    "children": [],
                    "content": "\n#Check defaulting scheme behavior for valid domains"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert validate_url example.com == http://example.com",
                    "range": [
                        472,
                        483
                    ],
                    "children": [],
                    "content": "\nassert validate_url(\"example.com\",[])==\"http://example.com\""
                },
                {
                    "type": "AssertStatement",
                    "name": "assert validate_url https://secure.com == https://secure.com",
                    "range": [
                        484,
                        495
                    ],
                    "children": [],
                    "content": "\nassert validate_url(\"https://secure.com\",[])==\"https://secure.com\""
                },
                {
                    "type": "Comment",
                    "name": "# Non-ASCII Characters in Query/Fragment",
                    "range": [
                        497,
                        506
                    ],
                    "children": [],
                    "content": "\n#Non-ASCII Characters in Query/Fragment"
                },
                {
                    "type": "AssertStatement",
                    "name": "assert validate_url example.com?param=äöü == http://example.com?param=äöü",
                    "range": [
                        507,
                        519
                    ],
                    "children": [],
                    "content": "\nassert validate_url(\"example.com?param=äöü\",[])==\"http://example.com?param=äöü\"\n"
                }
            ],
            "content": "\ndef test_validate_url():\n#Rejected IP ranges\nwith pytest.raises(ValueError):\nvalidate_url(\"localhost\",[])\n\nwith pytest.raises(ValueError):\nvalidate_url(\"192.168.1.1\",[])\n\nwith pytest.raises(ValueError):\nvalidate_url(\"127.0.0.1\",[])\n\nwith pytest.raises(ValueError):\nvalidate_url(\"0.0.0.0\",[])\n\n#Normal URLs\nassert validate_url(\"google.com/a?b=c\",[])==\"http://google.com/a?b=c\"\nassert validate_url(\"github.com?key=!@!@\",[])==\"http://github.com?key=!@!@\"\n\n#Scheme Enforcement\nwith pytest.raises(ValueError):\nvalidate_url(\"ftp://example.com\",[])\nwith pytest.raises(ValueError):\nvalidate_url(\"file://example.com\",[])\n\n#International domain that converts to punycode-should be allowed if public\nassert validate_url(\"http://xn--exmple-cua.com\",[])==\"http://xn--exmple-cua.com\"\n#If the domain fails IDNA encoding or is invalid,it should raise an error\nwith pytest.raises(ValueError):\nvalidate_url(\"http://exa◌mple.com\",[])\n\n#IPv6 Addresses\nwith pytest.raises(ValueError):\nvalidate_url(\"::1\",[])#IPv6 loopback should be blocked\nwith pytest.raises(ValueError):\nvalidate_url(\"http://[::1]\",[])#IPv6 loopback in URL form\n\n#Suspicious Characters in Hostname\nwith pytest.raises(ValueError):\nvalidate_url(\"http://example_underscore.com\",[])\nwith pytest.raises(ValueError):\nvalidate_url(\"http://exa mple.com\",[])#Space in hostname\n\n#Malformed URLs\nwith pytest.raises(ValueError):\nvalidate_url(\"http://\",[])#No hostname\nwith pytest.raises(ValueError):\nvalidate_url(\"://missing-scheme\",[])#Missing proper scheme\n\n#Trusted Origins\ntrusted=[\"internal-api.company.com\",\"10.0.0.5\"]\nassert(\nvalidate_url(\"internal-api.company.com\",trusted)\n==\"http://internal-api.company.com\"\n)\nassert validate_url(\"10.0.0.5\",[\"10.0.0.5\"])==\"http://10.0.0.5\"\n\n#Special Characters in Path or Query\nassert(\nvalidate_url(\"example.com/path%20with%20spaces\",[])\n==\"http://example.com/path%20with%20spaces\"\n)\n\n#Backslashes should be replaced with forward slashes\nassert(\nvalidate_url(\"http://example.com\\\\backslash\",[])\n==\"http://example.com/backslash\"\n)\n\n#Check defaulting scheme behavior for valid domains\nassert validate_url(\"example.com\",[])==\"http://example.com\"\nassert validate_url(\"https://secure.com\",[])==\"https://secure.com\"\n\n#Non-ASCII Characters in Query/Fragment\nassert validate_url(\"example.com?param=äöü\",[])==\"http://example.com?param=äöü\"\n"
        }
    ],
    "content": "\ndef test_validate_url():\n#Rejected IP ranges\nwith pytest.raises(ValueError):\nvalidate_url(\"localhost\",[])\n\nwith pytest.raises(ValueError):\nvalidate_url(\"192.168.1.1\",[])\n\nwith pytest.raises(ValueError):\nvalidate_url(\"127.0.0.1\",[])\n\nwith pytest.raises(ValueError):\nvalidate_url(\"0.0.0.0\",[])\n\n#Normal URLs\nassert validate_url(\"google.com/a?b=c\",[])==\"http://google.com/a?b=c\"\nassert validate_url(\"github.com?key=!@!@\",[])==\"http://github.com?key=!@!@\"\n\n#Scheme Enforcement\nwith pytest.raises(ValueError):\nvalidate_url(\"ftp://example.com\",[])\nwith pytest.raises(ValueError):\nvalidate_url(\"file://example.com\",[])\n\n#International domain that converts to punycode-should be allowed if public\nassert validate_url(\"http://xn--exmple-cua.com\",[])==\"http://xn--exmple-cua.com\"\n#If the domain fails IDNA encoding or is invalid,it should raise an error\nwith pytest.raises(ValueError):\nvalidate_url(\"http://exa◌mple.com\",[])\n\n#IPv6 Addresses\nwith pytest.raises(ValueError):\nvalidate_url(\"::1\",[])#IPv6 loopback should be blocked\nwith pytest.raises(ValueError):\nvalidate_url(\"http://[::1]\",[])#IPv6 loopback in URL form\n\n#Suspicious Characters in Hostname\nwith pytest.raises(ValueError):\nvalidate_url(\"http://example_underscore.com\",[])\nwith pytest.raises(ValueError):\nvalidate_url(\"http://exa mple.com\",[])#Space in hostname\n\n#Malformed URLs\nwith pytest.raises(ValueError):\nvalidate_url(\"http://\",[])#No hostname\nwith pytest.raises(ValueError):\nvalidate_url(\"://missing-scheme\",[])#Missing proper scheme\n\n#Trusted Origins\ntrusted=[\"internal-api.company.com\",\"10.0.0.5\"]\nassert(\nvalidate_url(\"internal-api.company.com\",trusted)\n==\"http://internal-api.company.com\"\n)\nassert validate_url(\"10.0.0.5\",[\"10.0.0.5\"])==\"http://10.0.0.5\"\n\n#Special Characters in Path or Query\nassert(\nvalidate_url(\"example.com/path%20with%20spaces\",[])\n==\"http://example.com/path%20with%20spaces\"\n)\n\n#Backslashes should be replaced with forward slashes\nassert(\nvalidate_url(\"http://example.com\\\\backslash\",[])\n==\"http://example.com/backslash\"\n)\n\n#Check defaulting scheme behavior for valid domains\nassert validate_url(\"example.com\",[])==\"http://example.com\"\nassert validate_url(\"https://secure.com\",[])==\"https://secure.com\"\n\n#Non-ASCII Characters in Query/Fragment\nassert validate_url(\"example.com?param=äöü\",[])==\"http://example.com?param=äöü\"\n"
}