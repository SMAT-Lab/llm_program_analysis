{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        542
    ],
    "children": [
        {
            "type": "Literal",
            "name": "https://www.geeksforgeeks.org/solve-crossword-puzzle/",
            "range": [
                0,
                16
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "https",
                    "range": [
                        1,
                        1
                    ],
                    "children": [],
                    "content": "https"
                },
                {
                    "type": "Literal",
                    "name": "www.geeksforgeeks.org",
                    "range": [
                        2,
                        9
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "www",
                            "range": [
                                5,
                                5
                            ],
                            "children": [],
                            "content": "www"
                        },
                        {
                            "type": "Literal",
                            "name": "geeksforgeeks.org",
                            "range": [
                                6,
                                9
                            ],
                            "children": [],
                            "content": ".geeksforgeeks.org"
                        }
                    ],
                    "content": "://www.geeksforgeeks.org"
                },
                {
                    "type": "Literal",
                    "name": "/solve-crossword-puzzle/",
                    "range": [
                        10,
                        16
                    ],
                    "children": [],
                    "content": "/solve-crossword-puzzle/"
                }
            ],
            "content": "#https://www.geeksforgeeks.org/solve-crossword-puzzle/"
        },
        {
            "type": "Literal",
            "name": "\\n",
            "range": [
                17,
                19
            ],
            "children": [],
            "content": "\n\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "is_valid",
            "range": [
                20,
                137
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        22,
                        50
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "puzzle",
                            "range": [
                                24,
                                32
                            ],
                            "children": [],
                            "content": "puzzle:list[list[str]]"
                        },
                        {
                            "type": "Parameter",
                            "name": "word",
                            "range": [
                                34,
                                36
                            ],
                            "children": [],
                            "content": "word:str"
                        },
                        {
                            "type": "Parameter",
                            "name": "row",
                            "range": [
                                38,
                                40
                            ],
                            "children": [],
                            "content": "row:int"
                        },
                        {
                            "type": "Parameter",
                            "name": "col",
                            "range": [
                                42,
                                44
                            ],
                            "children": [],
                            "content": "col:int"
                        },
                        {
                            "type": "Parameter",
                            "name": "vertical",
                            "range": [
                                46,
                                48
                            ],
                            "children": [],
                            "content": "vertical:bool"
                        }
                    ],
                    "content": "(\npuzzle:list[list[str]],word:str,row:int,col:int,vertical:bool\n)"
                },
                {
                    "type": "ReturnType",
                    "name": "bool",
                    "range": [
                        51,
                        53
                    ],
                    "children": [],
                    "content": "->bool"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        56,
                        58
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Check if a word can be placed at the given position. \\n  \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n     >>> is_valid(puzzle, 'word', 0, 0, True) \\n     True \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n     >>> is_valid(puzzle, 'word', 0, 0, False) \\n     True \\n     \"\"\""
                },
                {
                    "type": "ForStatement",
                    "name": "for_loop",
                    "range": [
                        60,
                        137
                    ],
                    "children": [
                        {
                            "type": "Initialization",
                            "name": "initialization",
                            "range": [
                                61,
                                69
                            ],
                            "children": [],
                            "content": "i in range(len(word))"
                        },
                        {
                            "type": "Condition",
                            "name": "condition",
                            "range": [
                                72,
                                130
                            ],
                            "children": [
                                {
                                    "type": "IfStatement",
                                    "name": "if_statement",
                                    "range": [
                                        72,
                                        103
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "condition",
                                            "range": [
                                                73,
                                                99
                                            ],
                                            "children": [],
                                            "content": "vertical:\nif row+i>=len(puzzle)or puzzle[row+i][col]!=\"\":"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return_statement",
                                            "range": [
                                                101,
                                                102
                                            ],
                                            "children": [],
                                            "content": "return False"
                                        }
                                    ],
                                    "content": "if vertical:\nif row+i>=len(puzzle)or puzzle[row+i][col]!=\"\":\nreturn False\n"
                                },
                                {
                                    "type": "ElifStatement",
                                    "name": "elif_statement",
                                    "range": [
                                        104,
                                        133
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "condition",
                                            "range": [
                                                105,
                                                130
                                            ],
                                            "children": [],
                                            "content": "col+i>=len(puzzle[0])or puzzle[row][col+i]!=\"\":"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return_statement",
                                            "range": [
                                                132,
                                                133
                                            ],
                                            "children": [],
                                            "content": "return False"
                                        }
                                    ],
                                    "content": "elif col+i>=len(puzzle[0])or puzzle[row][col+i]!=\"\":\nreturn False"
                                }
                            ],
                            "content": "if vertical:\nif row+i>=len(puzzle)or puzzle[row+i][col]!=\"\":\nreturn False\nelif col+i>=len(puzzle[0])or puzzle[row][col+i]!=\"\":"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_statement",
                            "range": [
                                135,
                                136
                            ],
                            "children": [],
                            "content": "return True"
                        }
                    ],
                    "content": "for i in range(len(word)):\nif vertical:\nif row+i>=len(puzzle)or puzzle[row+i][col]!=\"\":\nreturn False\nelif col+i>=len(puzzle[0])or puzzle[row][col+i]!=\"\":\nreturn False\nreturn True\n"
                }
            ],
            "content": "def is_valid(\npuzzle:list[list[str]],word:str,row:int,col:int,vertical:bool\n)->bool:\n\"\"\" \\n     Check if a word can be placed at the given position. \\n  \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n     >>> is_valid(puzzle, 'word', 0, 0, True) \\n     True \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n     >>> is_valid(puzzle, 'word', 0, 0, False) \\n     True \\n     \"\"\"\nfor i in range(len(word)):\nif vertical:\nif row+i>=len(puzzle)or puzzle[row+i][col]!=\"\":\nreturn False\nelif col+i>=len(puzzle[0])or puzzle[row][col+i]!=\"\":\nreturn False\nreturn True\n"
        },
        {
            "type": "FunctionDecl",
            "name": "place_word",
            "range": [
                140,
                222
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        142,
                        169
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "puzzle",
                            "range": [
                                144,
                                152
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "list[list[str]]",
                                    "range": [
                                        146,
                                        152
                                    ],
                                    "children": [],
                                    "content": "list[list[str]]"
                                }
                            ],
                            "content": "puzzle:list[list[str]]"
                        },
                        {
                            "type": "Parameter",
                            "name": "word",
                            "range": [
                                154,
                                156
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        156,
                                        156
                                    ],
                                    "children": [],
                                    "content": "str"
                                }
                            ],
                            "content": "word:str"
                        },
                        {
                            "type": "Parameter",
                            "name": "row",
                            "range": [
                                158,
                                160
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        160,
                                        160
                                    ],
                                    "children": [],
                                    "content": "int"
                                }
                            ],
                            "content": "row:int"
                        },
                        {
                            "type": "Parameter",
                            "name": "col",
                            "range": [
                                162,
                                164
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        164,
                                        164
                                    ],
                                    "children": [],
                                    "content": "int"
                                }
                            ],
                            "content": "col:int"
                        },
                        {
                            "type": "Parameter",
                            "name": "vertical",
                            "range": [
                                166,
                                168
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "bool",
                                    "range": [
                                        168,
                                        168
                                    ],
                                    "children": [],
                                    "content": "bool"
                                }
                            ],
                            "content": "vertical:bool"
                        }
                    ],
                    "content": "(\npuzzle:list[list[str]],word:str,row:int,col:int,vertical:bool\n"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        171,
                        173
                    ],
                    "children": [],
                    "content": "->None"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        176,
                        178
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Place a word at the given position. \\n  \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n     >>> place_word(puzzle, 'word', 0, 0, True) \\n     >>> puzzle \\n     [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']] \\n     \"\"\""
                },
                {
                    "type": "ForStatement",
                    "name": "for_loop",
                    "range": [
                        180,
                        221
                    ],
                    "children": [
                        {
                            "type": "Iteration",
                            "name": "i, char in enumerate(word)",
                            "range": [
                                181,
                                188
                            ],
                            "children": [],
                            "content": "i,char in enumerate(word)"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_vertical",
                            "range": [
                                191,
                                206
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "vertical",
                                    "range": [
                                        192,
                                        192
                                    ],
                                    "children": [],
                                    "content": "vertical"
                                },
                                {
                                    "type": "Assignment",
                                    "name": "puzzle[row + i][col] = char",
                                    "range": [
                                        195,
                                        205
                                    ],
                                    "children": [],
                                    "content": "puzzle[row+i][col]=char"
                                }
                            ],
                            "content": "if vertical:\npuzzle[row+i][col]=char\n"
                        },
                        {
                            "type": "ElseStatement",
                            "name": "else",
                            "range": [
                                207,
                                221
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "puzzle[row][col + i] = char",
                                    "range": [
                                        210,
                                        220
                                    ],
                                    "children": [],
                                    "content": "puzzle[row][col+i]=char"
                                }
                            ],
                            "content": "else:\npuzzle[row][col+i]=char\n"
                        }
                    ],
                    "content": "for i,char in enumerate(word):\nif vertical:\npuzzle[row+i][col]=char\nelse:\npuzzle[row][col+i]=char\n"
                }
            ],
            "content": "def place_word(\npuzzle:list[list[str]],word:str,row:int,col:int,vertical:bool\n)->None:\n\"\"\" \\n     Place a word at the given position. \\n  \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n     >>> place_word(puzzle, 'word', 0, 0, True) \\n     >>> puzzle \\n     [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']] \\n     \"\"\"\nfor i,char in enumerate(word):\nif vertical:\npuzzle[row+i][col]=char\nelse:\npuzzle[row][col+i]=char\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "remove_word",
            "range": [
                224,
                227
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "remove_word",
                    "range": [
                        225,
                        225
                    ],
                    "children": [],
                    "content": "remove_word"
                }
            ],
            "content": "def remove_word(\n"
        },
        {
            "type": "FunctionDecl",
            "name": "remove_word",
            "range": [
                228,
                306
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "puzzle",
                    "range": [
                        228,
                        230
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "list",
                            "range": [
                                230,
                                236
                            ],
                            "children": [
                                {
                                    "type": "ListType",
                                    "name": "list",
                                    "range": [
                                        232,
                                        236
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeAnnotation",
                                            "name": "str",
                                            "range": [
                                                234,
                                                235
                                            ],
                                            "content": "str]"
                                        }
                                    ],
                                    "content": "list[str]]"
                                }
                            ],
                            "content": "list[list[str]]"
                        }
                    ],
                    "content": "puzzle:list"
                },
                {
                    "type": "Parameter",
                    "name": "word",
                    "range": [
                        238,
                        240
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                240,
                                240
                            ],
                            "content": "str"
                        }
                    ],
                    "content": "word:str"
                },
                {
                    "type": "Parameter",
                    "name": "row",
                    "range": [
                        242,
                        244
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                244,
                                244
                            ],
                            "content": "int"
                        }
                    ],
                    "content": "row:int"
                },
                {
                    "type": "Parameter",
                    "name": "col",
                    "range": [
                        246,
                        248
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                248,
                                248
                            ],
                            "content": "int"
                        }
                    ],
                    "content": "col:int"
                },
                {
                    "type": "Parameter",
                    "name": "vertical",
                    "range": [
                        250,
                        252
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "bool",
                            "range": [
                                252,
                                252
                            ],
                            "content": "bool"
                        }
                    ],
                    "content": "vertical:bool"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        257,
                        258
                    ],
                    "content": "None:"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        259,
                        306
                    ],
                    "children": [
                        {
                            "type": "ForStatement",
                            "name": "",
                            "range": [
                                264,
                                306
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclaration",
                                    "name": "i",
                                    "range": [
                                        265,
                                        265
                                    ],
                                    "content": "i"
                                },
                                {
                                    "type": "RangeExpression",
                                    "name": "",
                                    "range": [
                                        267,
                                        273
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "range",
                                            "range": [
                                                267,
                                                273
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "len",
                                                    "range": [
                                                        269,
                                                        272
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "word",
                                                            "range": [
                                                                271,
                                                                271
                                                            ],
                                                            "content": "word"
                                                        }
                                                    ],
                                                    "content": "len(word)"
                                                }
                                            ],
                                            "content": "range(len(word))"
                                        }
                                    ],
                                    "content": "range(len(word))"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        275,
                                        306
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "",
                                            "range": [
                                                276,
                                                306
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "vertical",
                                                    "range": [
                                                        277,
                                                        277
                                                    ],
                                                    "content": "vertical"
                                                },
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "",
                                                    "range": [
                                                        279,
                                                        291
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "",
                                                            "range": [
                                                                280,
                                                                290
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "puzzle",
                                                                    "range": [
                                                                        280,
                                                                        288
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "BinaryExpression",
                                                                            "name": "+",
                                                                            "range": [
                                                                                282,
                                                                                284
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "row",
                                                                                    "range": [
                                                                                        282,
                                                                                        282
                                                                                    ],
                                                                                    "content": "row"
                                                                                },
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "i",
                                                                                    "range": [
                                                                                        284,
                                                                                        284
                                                                                    ],
                                                                                    "content": "i"
                                                                                }
                                                                            ],
                                                                            "content": "row+i"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "col",
                                                                            "range": [
                                                                                287,
                                                                                287
                                                                            ],
                                                                            "content": "col"
                                                                        }
                                                                    ],
                                                                    "content": "puzzle[row+i][col]"
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "\"\"",
                                                                    "range": [
                                                                        290,
                                                                        290
                                                                    ],
                                                                    "content": "\"\""
                                                                }
                                                            ],
                                                            "content": "puzzle[row+i][col]=\"\""
                                                        }
                                                    ],
                                                    "content": "\npuzzle[row+i][col]=\"\"\n"
                                                },
                                                {
                                                    "type": "ElseStatement",
                                                    "name": "",
                                                    "range": [
                                                        292,
                                                        306
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "BlockStatement",
                                                            "name": "",
                                                            "range": [
                                                                294,
                                                                306
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "AssignmentExpression",
                                                                    "name": "",
                                                                    "range": [
                                                                        295,
                                                                        305
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "name": "puzzle",
                                                                            "range": [
                                                                                295,
                                                                                303
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Identifier",
                                                                                    "name": "row",
                                                                                    "range": [
                                                                                        297,
                                                                                        297
                                                                                    ],
                                                                                    "content": "row"
                                                                                },
                                                                                {
                                                                                    "type": "BinaryExpression",
                                                                                    "name": "+",
                                                                                    "range": [
                                                                                        299,
                                                                                        301
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "col",
                                                                                            "range": [
                                                                                                299,
                                                                                                299
                                                                                            ],
                                                                                            "content": "["
                                                                                        },
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "i",
                                                                                            "range": [
                                                                                                301,
                                                                                                301
                                                                                            ],
                                                                                            "content": "+"
                                                                                        }
                                                                                    ],
                                                                                    "content": "[col+"
                                                                                }
                                                                            ],
                                                                            "content": "puzzle[row][col+i]"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "\"\"",
                                                                            "range": [
                                                                                305,
                                                                                305
                                                                            ],
                                                                            "content": "\"\""
                                                                        }
                                                                    ],
                                                                    "content": "puzzle[row][col+i]=\"\""
                                                                }
                                                            ],
                                                            "content": "\npuzzle[row][col+i]=\"\"\n"
                                                        }
                                                    ],
                                                    "content": "else:\npuzzle[row][col+i]=\"\"\n"
                                                }
                                            ],
                                            "content": "if vertical:\npuzzle[row+i][col]=\"\"\nelse:\npuzzle[row][col+i]=\"\"\n"
                                        }
                                    ],
                                    "content": "\nif vertical:\npuzzle[row+i][col]=\"\"\nelse:\npuzzle[row][col+i]=\"\"\n"
                                }
                            ],
                            "content": "for i in range(len(word)):\nif vertical:\npuzzle[row+i][col]=\"\"\nelse:\npuzzle[row][col+i]=\"\"\n"
                        }
                    ],
                    "content": "\n\"\"\" \\n     Remove a word from the given position. \\n  \\n     >>> puzzle = [ \\n     ...     ['w', '', '', ''], \\n     ...     ['o', '', '', ''], \\n     ...     ['r', '', '', ''], \\n     ...     ['d', '', '', ''] \\n     ... ] \\n     >>> remove_word(puzzle, 'word', 0, 0, True) \\n     >>> puzzle \\n     [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']] \\n     \"\"\"\nfor i in range(len(word)):\nif vertical:\npuzzle[row+i][col]=\"\"\nelse:\npuzzle[row][col+i]=\"\"\n"
                }
            ],
            "content": "puzzle:list[list[str]],word:str,row:int,col:int,vertical:bool\n)->None:\n\"\"\" \\n     Remove a word from the given position. \\n  \\n     >>> puzzle = [ \\n     ...     ['w', '', '', ''], \\n     ...     ['o', '', '', ''], \\n     ...     ['r', '', '', ''], \\n     ...     ['d', '', '', ''] \\n     ... ] \\n     >>> remove_word(puzzle, 'word', 0, 0, True) \\n     >>> puzzle \\n     [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']] \\n     \"\"\"\nfor i in range(len(word)):\nif vertical:\npuzzle[row+i][col]=\"\"\nelse:\npuzzle[row][col+i]=\"\"\n"
        },
        {
            "type": "FunctionDecl",
            "name": "solve_crossword",
            "range": [
                309,
                466
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "range": [
                        311,
                        328
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "puzzle",
                            "range": [
                                312,
                                320
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "range": [
                                        313,
                                        320
                                    ],
                                    "children": [
                                        {
                                            "type": "ListType",
                                            "range": [
                                                314,
                                                320
                                            ],
                                            "children": [
                                                {
                                                    "type": "ListType",
                                                    "range": [
                                                        316,
                                                        320
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "SimpleType",
                                                            "name": "str",
                                                            "range": [
                                                                318,
                                                                320
                                                            ],
                                                            "content": "str]]"
                                                        }
                                                    ],
                                                    "content": "list[str]]"
                                                }
                                            ],
                                            "content": "list[list[str]]"
                                        }
                                    ],
                                    "content": ":list[list[str]]"
                                }
                            ],
                            "content": "puzzle:list[list[str]]"
                        },
                        {
                            "type": "Parameter",
                            "name": "words",
                            "range": [
                                322,
                                328
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "range": [
                                        323,
                                        328
                                    ],
                                    "children": [
                                        {
                                            "type": "ListType",
                                            "range": [
                                                324,
                                                328
                                            ],
                                            "children": [
                                                {
                                                    "type": "SimpleType",
                                                    "name": "str",
                                                    "range": [
                                                        326,
                                                        328
                                                    ],
                                                    "content": "str])"
                                                }
                                            ],
                                            "content": "list[str])"
                                        }
                                    ],
                                    "content": ":list[str])"
                                }
                            ],
                            "content": "words:list[str])"
                        }
                    ],
                    "content": "(puzzle:list[list[str]],words:list[str])"
                },
                {
                    "type": "ReturnType",
                    "range": [
                        329,
                        331
                    ],
                    "children": [
                        {
                            "type": "SimpleType",
                            "name": "bool",
                            "range": [
                                331,
                                331
                            ],
                            "content": "bool"
                        }
                    ],
                    "content": "->bool"
                },
                {
                    "type": "FunctionBody",
                    "range": [
                        332,
                        466
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "range": [
                                334,
                                336
                            ],
                            "content": "\"\"\" \\n     Solve the crossword puzzle using backtracking. \\n  \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n  \\n     >>> words = ['word', 'four', 'more', 'last'] \\n     >>> solve_crossword(puzzle, words) \\n     True \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n     >>> words = ['word', 'four', 'more', 'paragraphs'] \\n     >>> solve_crossword(puzzle, words) \\n     False \\n     \"\"\""
                        },
                        {
                            "type": "ForStatement",
                            "range": [
                                338,
                                363
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclaration",
                                    "name": "row",
                                    "range": [
                                        339,
                                        339
                                    ],
                                    "content": "row"
                                },
                                {
                                    "type": "RangeExpression",
                                    "range": [
                                        341,
                                        347
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "len",
                                            "range": [
                                                343,
                                                347
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "puzzle",
                                                    "range": [
                                                        345,
                                                        345
                                                    ],
                                                    "content": "puzzle"
                                                }
                                            ],
                                            "content": "len(puzzle))"
                                        }
                                    ],
                                    "content": "range(len(puzzle))"
                                }
                            ],
                            "content": "for row in range(len(puzzle)):\nfor col in range(len(puzzle[0])):"
                        },
                        {
                            "type": "ForStatement",
                            "range": [
                                350,
                                363
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclaration",
                                    "name": "col",
                                    "range": [
                                        351,
                                        351
                                    ],
                                    "content": "col"
                                },
                                {
                                    "type": "RangeExpression",
                                    "range": [
                                        353,
                                        362
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "len",
                                            "range": [
                                                355,
                                                362
                                            ],
                                            "children": [
                                                {
                                                    "type": "IndexExpression",
                                                    "range": [
                                                        357,
                                                        360
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "puzzle",
                                                            "range": [
                                                                357,
                                                                357
                                                            ],
                                                            "content": "puzzle"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "0",
                                                            "range": [
                                                                359,
                                                                359
                                                            ],
                                                            "content": "0"
                                                        }
                                                    ],
                                                    "content": "puzzle[0]"
                                                }
                                            ],
                                            "content": "len(puzzle[0]))"
                                        }
                                    ],
                                    "content": "range(len(puzzle[0]))"
                                }
                            ],
                            "content": "for col in range(len(puzzle[0])):"
                        },
                        {
                            "type": "IfStatement",
                            "range": [
                                365,
                                376
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "operator": "==",
                                    "range": [
                                        373,
                                        375
                                    ],
                                    "children": [
                                        {
                                            "type": "IndexExpression",
                                            "range": [
                                                366,
                                                372
                                            ],
                                            "children": [
                                                {
                                                    "type": "IndexExpression",
                                                    "range": [
                                                        366,
                                                        369
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "puzzle",
                                                            "range": [
                                                                366,
                                                                366
                                                            ],
                                                            "content": "puzzle"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "row",
                                                            "range": [
                                                                368,
                                                                368
                                                            ],
                                                            "content": "row"
                                                        }
                                                    ],
                                                    "content": "puzzle[row]"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "col",
                                                    "range": [
                                                        371,
                                                        371
                                                    ],
                                                    "content": "col"
                                                }
                                            ],
                                            "content": "puzzle[row][col]"
                                        },
                                        {
                                            "type": "Literal",
                                            "value": "",
                                            "range": [
                                                375,
                                                375
                                            ],
                                            "content": "\"\""
                                        }
                                    ],
                                    "content": "==\"\""
                                }
                            ],
                            "content": "if puzzle[row][col]==\"\":"
                        },
                        {
                            "type": "ForStatement",
                            "range": [
                                378,
                                382
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclaration",
                                    "name": "word",
                                    "range": [
                                        379,
                                        379
                                    ],
                                    "content": "word"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "words",
                                    "range": [
                                        381,
                                        381
                                    ],
                                    "content": "words"
                                }
                            ],
                            "content": "for word in words:"
                        },
                        {
                            "type": "ForStatement",
                            "range": [
                                384,
                                392
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclaration",
                                    "name": "vertical",
                                    "range": [
                                        385,
                                        385
                                    ],
                                    "content": "vertical"
                                },
                                {
                                    "type": "ListLiteral",
                                    "range": [
                                        387,
                                        391
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "value": "True",
                                            "range": [
                                                388,
                                                388
                                            ],
                                            "content": "True"
                                        },
                                        {
                                            "type": "Literal",
                                            "value": "False",
                                            "range": [
                                                390,
                                                390
                                            ],
                                            "content": "False"
                                        }
                                    ],
                                    "content": "[True,False]"
                                }
                            ],
                            "content": "for vertical in[True,False]:"
                        },
                        {
                            "type": "IfStatement",
                            "range": [
                                394,
                                407
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "is_valid",
                                    "range": [
                                        395,
                                        406
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "puzzle",
                                            "range": [
                                                397,
                                                397
                                            ],
                                            "content": "puzzle"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "word",
                                            "range": [
                                                399,
                                                399
                                            ],
                                            "content": "word"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "row",
                                            "range": [
                                                401,
                                                401
                                            ],
                                            "content": "row"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "col",
                                            "range": [
                                                403,
                                                403
                                            ],
                                            "content": "col"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "vertical",
                                            "range": [
                                                405,
                                                405
                                            ],
                                            "content": "vertical"
                                        }
                                    ],
                                    "content": "is_valid(puzzle,word,row,col,vertical)"
                                }
                            ],
                            "content": "if is_valid(puzzle,word,row,col,vertical):"
                        },
                        {
                            "type": "CallExpression",
                            "name": "place_word",
                            "range": [
                                409,
                                420
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "puzzle",
                                    "range": [
                                        411,
                                        411
                                    ],
                                    "content": "puzzle"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "word",
                                    "range": [
                                        413,
                                        413
                                    ],
                                    "content": "word"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "row",
                                    "range": [
                                        415,
                                        415
                                    ],
                                    "content": "row"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "col",
                                    "range": [
                                        417,
                                        417
                                    ],
                                    "content": "col"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "vertical",
                                    "range": [
                                        419,
                                        419
                                    ],
                                    "content": "vertical"
                                }
                            ],
                            "content": "place_word(puzzle,word,row,col,vertical)"
                        },
                        {
                            "type": "ExpressionStatement",
                            "range": [
                                422,
                                428
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "remove",
                                    "range": [
                                        424,
                                        427
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "word",
                                            "range": [
                                                426,
                                                426
                                            ],
                                            "content": "word"
                                        }
                                    ],
                                    "content": "remove(word)"
                                }
                            ],
                            "content": "words.remove(word)\n"
                        },
                        {
                            "type": "IfStatement",
                            "range": [
                                429,
                                436
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "solve_crossword",
                                    "range": [
                                        430,
                                        435
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "puzzle",
                                            "range": [
                                                432,
                                                432
                                            ],
                                            "content": "puzzle"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "words",
                                            "range": [
                                                434,
                                                434
                                            ],
                                            "content": "words"
                                        }
                                    ],
                                    "content": "solve_crossword(puzzle,words)"
                                }
                            ],
                            "content": "if solve_crossword(puzzle,words):"
                        },
                        {
                            "type": "ReturnStatement",
                            "range": [
                                438,
                                440
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "value": "True",
                                    "range": [
                                        439,
                                        439
                                    ],
                                    "content": "True"
                                }
                            ],
                            "content": "return True\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "range": [
                                441,
                                447
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "append",
                                    "range": [
                                        443,
                                        446
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "word",
                                            "range": [
                                                445,
                                                445
                                            ],
                                            "content": "word"
                                        }
                                    ],
                                    "content": "append(word)"
                                }
                            ],
                            "content": "words.append(word)\n"
                        },
                        {
                            "type": "CallExpression",
                            "name": "remove_word",
                            "range": [
                                448,
                                459
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "puzzle",
                                    "range": [
                                        450,
                                        450
                                    ],
                                    "content": "puzzle"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "word",
                                    "range": [
                                        452,
                                        452
                                    ],
                                    "content": "word"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "row",
                                    "range": [
                                        454,
                                        454
                                    ],
                                    "content": "row"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "col",
                                    "range": [
                                        456,
                                        456
                                    ],
                                    "content": "col"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "vertical",
                                    "range": [
                                        458,
                                        458
                                    ],
                                    "content": "vertical"
                                }
                            ],
                            "content": "remove_word(puzzle,word,row,col,vertical)"
                        },
                        {
                            "type": "ReturnStatement",
                            "range": [
                                461,
                                463
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "value": "False",
                                    "range": [
                                        462,
                                        462
                                    ],
                                    "content": "False"
                                }
                            ],
                            "content": "return False\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "range": [
                                464,
                                466
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "value": "True",
                                    "range": [
                                        465,
                                        465
                                    ],
                                    "content": "True"
                                }
                            ],
                            "content": "return True\n"
                        }
                    ],
                    "content": ":\n\"\"\" \\n     Solve the crossword puzzle using backtracking. \\n  \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n  \\n     >>> words = ['word', 'four', 'more', 'last'] \\n     >>> solve_crossword(puzzle, words) \\n     True \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n     >>> words = ['word', 'four', 'more', 'paragraphs'] \\n     >>> solve_crossword(puzzle, words) \\n     False \\n     \"\"\"\nfor row in range(len(puzzle)):\nfor col in range(len(puzzle[0])):\nif puzzle[row][col]==\"\":\nfor word in words:\nfor vertical in[True,False]:\nif is_valid(puzzle,word,row,col,vertical):\nplace_word(puzzle,word,row,col,vertical)\nwords.remove(word)\nif solve_crossword(puzzle,words):\nreturn True\nwords.append(word)\nremove_word(puzzle,word,row,col,vertical)\nreturn False\nreturn True\n"
                }
            ],
            "content": "def solve_crossword(puzzle:list[list[str]],words:list[str])->bool:\n\"\"\" \\n     Solve the crossword puzzle using backtracking. \\n  \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n  \\n     >>> words = ['word', 'four', 'more', 'last'] \\n     >>> solve_crossword(puzzle, words) \\n     True \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n     >>> words = ['word', 'four', 'more', 'paragraphs'] \\n     >>> solve_crossword(puzzle, words) \\n     False \\n     \"\"\"\nfor row in range(len(puzzle)):\nfor col in range(len(puzzle[0])):\nif puzzle[row][col]==\"\":\nfor word in words:\nfor vertical in[True,False]:\nif is_valid(puzzle,word,row,col,vertical):\nplace_word(puzzle,word,row,col,vertical)\nwords.remove(word)\nif solve_crossword(puzzle,words):\nreturn True\nwords.append(word)\nremove_word(puzzle,word,row,col,vertical)\nreturn False\nreturn True\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "PUZZLE",
            "range": [
                476,
                491
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        477,
                        491
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "",
                            "range": [
                                478,
                                491
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "",
                                    "range": [
                                        479,
                                        481
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"\"",
                                            "range": [
                                                480,
                                                480
                                            ],
                                            "children": [],
                                            "content": "\"\""
                                        }
                                    ],
                                    "content": "[\"\"]"
                                },
                                {
                                    "type": "BinaryExpression",
                                    "name": "*",
                                    "range": [
                                        482,
                                        483
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "3",
                                            "range": [
                                                483,
                                                483
                                            ],
                                            "children": [],
                                            "content": "3"
                                        }
                                    ],
                                    "content": "*3"
                                },
                                {
                                    "type": "ForStatement",
                                    "name": "",
                                    "range": [
                                        484,
                                        490
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDeclaration",
                                            "name": "_",
                                            "range": [
                                                485,
                                                485
                                            ],
                                            "children": [],
                                            "content": "_"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "range",
                                            "range": [
                                                487,
                                                490
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "3",
                                                    "range": [
                                                        489,
                                                        489
                                                    ],
                                                    "children": [],
                                                    "content": "3"
                                                }
                                            ],
                                            "content": "range(3)"
                                        }
                                    ],
                                    "content": "for _ in range(3)"
                                }
                            ],
                            "content": "[[\"\"]*3for _ in range(3)]"
                        }
                    ],
                    "content": "=[[\"\"]*3for _ in range(3)]"
                }
            ],
            "content": "PUZZLE=[[\"\"]*3for _ in range(3)]"
        },
        {
            "type": "VariableDeclaration",
            "name": "WORDS",
            "range": [
                493,
                501
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        494,
                        501
                    ],
                    "children": [
                        {
                            "type": "ArrayExpression",
                            "name": "",
                            "range": [
                                495,
                                501
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"cat\"",
                                    "range": [
                                        496,
                                        496
                                    ],
                                    "children": [],
                                    "content": "\"cat\""
                                },
                                {
                                    "type": "Literal",
                                    "name": "\"dog\"",
                                    "range": [
                                        498,
                                        498
                                    ],
                                    "children": [],
                                    "content": "\"dog\""
                                },
                                {
                                    "type": "Literal",
                                    "name": "\"car\"",
                                    "range": [
                                        500,
                                        500
                                    ],
                                    "children": [],
                                    "content": "\"car\""
                                }
                            ],
                            "content": "[\"cat\",\"dog\",\"car\"]"
                        }
                    ],
                    "content": "=[\"cat\",\"dog\",\"car\"]"
                }
            ],
            "content": "WORDS=[\"cat\",\"dog\",\"car\"]"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                504,
                541
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "solve_crossword",
                    "range": [
                        505,
                        510
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "PUZZLE",
                            "range": [
                                507,
                                507
                            ],
                            "children": [],
                            "content": "PUZZLE"
                        },
                        {
                            "type": "Identifier",
                            "name": "WORDS",
                            "range": [
                                509,
                                509
                            ],
                            "children": [],
                            "content": "WORDS"
                        }
                    ],
                    "content": "solve_crossword(PUZZLE,WORDS)"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        511,
                        533
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "print",
                            "range": [
                                513,
                                516
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"Solution found:\"",
                                    "range": [
                                        515,
                                        515
                                    ],
                                    "children": [],
                                    "content": "\"Solution found:\""
                                }
                            ],
                            "content": "print(\"Solution found:\")"
                        },
                        {
                            "type": "ForStatement",
                            "name": "",
                            "range": [
                                518,
                                532
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclaration",
                                    "name": "row",
                                    "range": [
                                        519,
                                        519
                                    ],
                                    "children": [],
                                    "content": "row"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "PUZZLE",
                                    "range": [
                                        521,
                                        521
                                    ],
                                    "children": [],
                                    "content": "PUZZLE"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        522,
                                        532
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "print",
                                            "range": [
                                                524,
                                                532
                                            ],
                                            "children": [
                                                {
                                                    "type": "BinaryExpression",
                                                    "name": ".",
                                                    "range": [
                                                        527,
                                                        528
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "\" \"",
                                                            "range": [
                                                                526,
                                                                526
                                                            ],
                                                            "children": [],
                                                            "content": "\" \""
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "join",
                                                            "range": [
                                                                528,
                                                                531
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "row",
                                                                    "range": [
                                                                        530,
                                                                        530
                                                                    ],
                                                                    "children": [],
                                                                    "content": "row"
                                                                }
                                                            ],
                                                            "content": "join(row)"
                                                        }
                                                    ],
                                                    "content": ".join"
                                                }
                                            ],
                                            "content": "print(\" \".join(row))"
                                        }
                                    ],
                                    "content": ":\nprint(\" \".join(row))"
                                }
                            ],
                            "content": "for row in PUZZLE:\nprint(\" \".join(row))"
                        }
                    ],
                    "content": ":\nprint(\"Solution found:\")\nfor row in PUZZLE:\nprint(\" \".join(row))\n"
                },
                {
                    "type": "ElseStatement",
                    "name": "",
                    "range": [
                        534,
                        541
                    ],
                    "children": [
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                535,
                                541
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "print",
                                    "range": [
                                        537,
                                        540
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"No solution found:\"",
                                            "range": [
                                                539,
                                                539
                                            ],
                                            "children": [],
                                            "content": "\"No solution found:\""
                                        }
                                    ],
                                    "content": "print(\"No solution found:\")"
                                }
                            ],
                            "content": ":\nprint(\"No solution found:\")\n"
                        }
                    ],
                    "content": "else:\nprint(\"No solution found:\")\n"
                }
            ],
            "content": "if solve_crossword(PUZZLE,WORDS):\nprint(\"Solution found:\")\nfor row in PUZZLE:\nprint(\" \".join(row))\nelse:\nprint(\"No solution found:\")\n"
        }
    ],
    "content": "#https://www.geeksforgeeks.org/solve-crossword-puzzle/\n\n\ndef is_valid(\npuzzle:list[list[str]],word:str,row:int,col:int,vertical:bool\n)->bool:\n\"\"\" \\n     Check if a word can be placed at the given position. \\n  \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n     >>> is_valid(puzzle, 'word', 0, 0, True) \\n     True \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n     >>> is_valid(puzzle, 'word', 0, 0, False) \\n     True \\n     \"\"\"\nfor i in range(len(word)):\nif vertical:\nif row+i>=len(puzzle)or puzzle[row+i][col]!=\"\":\nreturn False\nelif col+i>=len(puzzle[0])or puzzle[row][col+i]!=\"\":\nreturn False\nreturn True\n\n\ndef place_word(\npuzzle:list[list[str]],word:str,row:int,col:int,vertical:bool\n)->None:\n\"\"\" \\n     Place a word at the given position. \\n  \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n     >>> place_word(puzzle, 'word', 0, 0, True) \\n     >>> puzzle \\n     [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']] \\n     \"\"\"\nfor i,char in enumerate(word):\nif vertical:\npuzzle[row+i][col]=char\nelse:\npuzzle[row][col+i]=char\n\n\ndef remove_word(\npuzzle:list[list[str]],word:str,row:int,col:int,vertical:bool\n)->None:\n\"\"\" \\n     Remove a word from the given position. \\n  \\n     >>> puzzle = [ \\n     ...     ['w', '', '', ''], \\n     ...     ['o', '', '', ''], \\n     ...     ['r', '', '', ''], \\n     ...     ['d', '', '', ''] \\n     ... ] \\n     >>> remove_word(puzzle, 'word', 0, 0, True) \\n     >>> puzzle \\n     [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']] \\n     \"\"\"\nfor i in range(len(word)):\nif vertical:\npuzzle[row+i][col]=\"\"\nelse:\npuzzle[row][col+i]=\"\"\n\n\ndef solve_crossword(puzzle:list[list[str]],words:list[str])->bool:\n\"\"\" \\n     Solve the crossword puzzle using backtracking. \\n  \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n  \\n     >>> words = ['word', 'four', 'more', 'last'] \\n     >>> solve_crossword(puzzle, words) \\n     True \\n     >>> puzzle = [ \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''], \\n     ...     ['', '', '', ''] \\n     ... ] \\n     >>> words = ['word', 'four', 'more', 'paragraphs'] \\n     >>> solve_crossword(puzzle, words) \\n     False \\n     \"\"\"\nfor row in range(len(puzzle)):\nfor col in range(len(puzzle[0])):\nif puzzle[row][col]==\"\":\nfor word in words:\nfor vertical in[True,False]:\nif is_valid(puzzle,word,row,col,vertical):\nplace_word(puzzle,word,row,col,vertical)\nwords.remove(word)\nif solve_crossword(puzzle,words):\nreturn True\nwords.append(word)\nremove_word(puzzle,word,row,col,vertical)\nreturn False\nreturn True\n\n\nif __name__==\"__main__\":\nPUZZLE=[[\"\"]*3for _ in range(3)]\nWORDS=[\"cat\",\"dog\",\"car\"]\n\nif solve_crossword(PUZZLE,WORDS):\nprint(\"Solution found:\")\nfor row in PUZZLE:\nprint(\" \".join(row))\nelse:\nprint(\"No solution found:\")\n"
}