{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        242
    ],
    "children": [
        {
            "type": "Comment",
            "name": "coding",
            "range": [
                0,
                12
            ],
            "children": [],
            "content": "#-*-coding:utf-8-*-\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "from mrjob.job import MRJob",
            "range": [
                14,
                20
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "from mrjob.job",
                    "range": [
                        14,
                        17
                    ],
                    "children": [],
                    "content": "from mrjob.job"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "MRJob",
                    "range": [
                        19,
                        19
                    ],
                    "children": [],
                    "content": "MRJob"
                }
            ],
            "content": "from mrjob.job import MRJob\n"
        },
        {
            "type": "FunctionDecl",
            "name": "within_past_week",
            "range": [
                31,
                47
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        33,
                        37
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                34,
                                34
                            ],
                            "children": [],
                            "content": "self"
                        },
                        {
                            "type": "Parameter",
                            "name": "timestamp",
                            "range": [
                                36,
                                36
                            ],
                            "children": [],
                            "content": "timestamp"
                        }
                    ],
                    "content": "(self,timestamp)"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        38,
                        47
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                40,
                                42
                            ],
                            "children": [],
                            "content": "\"\"\"Return True if timestamp is within past week, False otherwise.\"\"\""
                        }
                    ],
                    "content": ":\n\"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n...\n"
                }
            ],
            "content": "def within_past_week(self,timestamp):\n\"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n...\n"
        },
        {
            "type": "FunctionDecl",
            "name": "mapper",
            "range": [
                49,
                96
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        51,
                        57
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                52,
                                52
                            ],
                            "children": [],
                            "content": "self"
                        },
                        {
                            "type": "Parameter",
                            "name": "_",
                            "range": [
                                54,
                                54
                            ],
                            "children": [],
                            "content": "_"
                        },
                        {
                            "type": "Parameter",
                            "name": "line",
                            "range": [
                                56,
                                56
                            ],
                            "children": [],
                            "content": "line"
                        }
                    ],
                    "content": "(self,_,line)"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        58,
                        96
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "variables",
                            "range": [
                                60,
                                78
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclarator",
                                    "name": "timestamp",
                                    "range": [
                                        64,
                                        64
                                    ],
                                    "children": [],
                                    "content": "timestamp"
                                },
                                {
                                    "type": "VariableDeclarator",
                                    "name": "product_id",
                                    "range": [
                                        66,
                                        66
                                    ],
                                    "children": [],
                                    "content": "product_id"
                                },
                                {
                                    "type": "VariableDeclarator",
                                    "name": "category",
                                    "range": [
                                        68,
                                        68
                                    ],
                                    "children": [],
                                    "content": "category"
                                },
                                {
                                    "type": "VariableDeclarator",
                                    "name": "quantity",
                                    "range": [
                                        70,
                                        70
                                    ],
                                    "children": [],
                                    "content": "quantity"
                                }
                            ],
                            "content": "\"\"\"Parse each log line, extract and transform relevant lines. \\n  \\n         Emit key value pairs of the form: \\n  \\n         (foo, p1), 2 \\n         (bar, p1), 2 \\n         (bar, p1), 1 \\n         (foo, p2), 3 \\n         (bar, p3), 10 \\n         (foo, p4), 1 \\n         \"\"\"\ntimestamp,product_id,category,quantity=line.split('\\t')\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                79,
                                96
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "within_past_week",
                                    "range": [
                                        80,
                                        85
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "self",
                                            "range": [
                                                80,
                                                80
                                            ],
                                            "children": [],
                                            "content": "self"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "timestamp",
                                            "range": [
                                                84,
                                                84
                                            ],
                                            "children": [],
                                            "content": "timestamp"
                                        }
                                    ],
                                    "content": "self.within_past_week(timestamp)"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "consequent",
                                    "range": [
                                        86,
                                        96
                                    ],
                                    "children": [
                                        {
                                            "type": "YieldExpression",
                                            "name": "yield",
                                            "range": [
                                                88,
                                                95
                                            ],
                                            "children": [
                                                {
                                                    "type": "ArrayExpression",
                                                    "name": "array",
                                                    "range": [
                                                        89,
                                                        93
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "category",
                                                            "range": [
                                                                90,
                                                                90
                                                            ],
                                                            "children": [],
                                                            "content": "category"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "product_id",
                                                            "range": [
                                                                92,
                                                                92
                                                            ],
                                                            "children": [],
                                                            "content": "product_id"
                                                        }
                                                    ],
                                                    "content": "(category,product_id)"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "quantity",
                                                    "range": [
                                                        95,
                                                        95
                                                    ],
                                                    "children": [],
                                                    "content": "quantity"
                                                }
                                            ],
                                            "content": "yield(category,product_id),quantity"
                                        }
                                    ],
                                    "content": ":\nyield(category,product_id),quantity\n"
                                }
                            ],
                            "content": "if self.within_past_week(timestamp):\nyield(category,product_id),quantity\n"
                        }
                    ],
                    "content": ":\n\"\"\"Parse each log line, extract and transform relevant lines. \\n  \\n         Emit key value pairs of the form: \\n  \\n         (foo, p1), 2 \\n         (bar, p1), 2 \\n         (bar, p1), 1 \\n         (foo, p2), 3 \\n         (bar, p3), 10 \\n         (foo, p4), 1 \\n         \"\"\"\ntimestamp,product_id,category,quantity=line.split('\\t')\nif self.within_past_week(timestamp):\nyield(category,product_id),quantity\n"
                }
            ],
            "content": "def mapper(self,_,line):\n\"\"\"Parse each log line, extract and transform relevant lines. \\n  \\n         Emit key value pairs of the form: \\n  \\n         (foo, p1), 2 \\n         (bar, p1), 2 \\n         (bar, p1), 1 \\n         (foo, p2), 3 \\n         (bar, p3), 10 \\n         (foo, p4), 1 \\n         \"\"\"\ntimestamp,product_id,category,quantity=line.split('\\t')\nif self.within_past_week(timestamp):\nyield(category,product_id),quantity\n"
        },
        {
            "type": "FunctionDecl",
            "name": "reducer",
            "range": [
                98,
                120
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        100,
                        106
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                101,
                                101
                            ],
                            "children": [],
                            "content": "self"
                        },
                        {
                            "type": "Parameter",
                            "name": "key",
                            "range": [
                                103,
                                103
                            ],
                            "children": [],
                            "content": "key"
                        },
                        {
                            "type": "Parameter",
                            "name": "values",
                            "range": [
                                105,
                                105
                            ],
                            "children": [],
                            "content": "values"
                        }
                    ],
                    "content": "(self,key,values)"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        107,
                        120
                    ],
                    "children": [
                        {
                            "type": "YieldExpression",
                            "name": "yield",
                            "range": [
                                113,
                                119
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "key",
                                    "range": [
                                        114,
                                        114
                                    ],
                                    "children": [],
                                    "content": "key"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "sum",
                                    "range": [
                                        116,
                                        119
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "values",
                                            "range": [
                                                118,
                                                118
                                            ],
                                            "children": [],
                                            "content": "values"
                                        }
                                    ],
                                    "content": "sum(values)"
                                }
                            ],
                            "content": "yield key,sum(values)"
                        }
                    ],
                    "content": ":\n\"\"\"Sum values for each key. \\n  \\n         (foo, p1), 2 \\n         (bar, p1), 3 \\n         (foo, p2), 3 \\n         (bar, p3), 10 \\n         (foo, p4), 1 \\n         \"\"\"\nyield key,sum(values)\n"
                }
            ],
            "content": "def reducer(self,key,values):\n\"\"\"Sum values for each key. \\n  \\n         (foo, p1), 2 \\n         (bar, p1), 3 \\n         (foo, p2), 3 \\n         (bar, p3), 10 \\n         (foo, p4), 1 \\n         \"\"\"\nyield key,sum(values)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "mapper_sort",
            "range": [
                122,
                155
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        124,
                        130
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                125,
                                125
                            ],
                            "children": [],
                            "content": "self"
                        },
                        {
                            "type": "Parameter",
                            "name": "key",
                            "range": [
                                127,
                                127
                            ],
                            "children": [],
                            "content": "key"
                        },
                        {
                            "type": "Parameter",
                            "name": "value",
                            "range": [
                                129,
                                129
                            ],
                            "children": [],
                            "content": "value"
                        }
                    ],
                    "content": "(self,key,value)"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        131,
                        155
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "variables",
                            "range": [
                                133,
                                146
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclarator",
                                    "name": "category",
                                    "range": [
                                        137,
                                        137
                                    ],
                                    "children": [],
                                    "content": "category"
                                },
                                {
                                    "type": "VariableDeclarator",
                                    "name": "product_id",
                                    "range": [
                                        139,
                                        139
                                    ],
                                    "children": [],
                                    "content": "product_id"
                                },
                                {
                                    "type": "VariableDeclarator",
                                    "name": "quantity",
                                    "range": [
                                        143,
                                        143
                                    ],
                                    "children": [],
                                    "content": "quantity"
                                }
                            ],
                            "content": "\"\"\"Construct key to ensure proper sorting. \\n  \\n         Transform key and value to the form: \\n  \\n         (foo, 2), p1 \\n         (bar, 3), p1 \\n         (foo, 3), p2 \\n         (bar, 10), p3 \\n         (foo, 1), p4 \\n  \\n         The shuffle/sort step of MapReduce will then do a \\n         distributed sort on the keys, resulting in: \\n  \\n         (category1, 1), product4 \\n         (category1, 2), product1 \\n         (category1, 3), product2 \\n         (category2, 3), product1 \\n         (category2, 7), product3 \\n         \"\"\"\ncategory,product_id=key\nquantity=value\n"
                        },
                        {
                            "type": "YieldExpression",
                            "name": "yield",
                            "range": [
                                147,
                                154
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "array",
                                    "range": [
                                        148,
                                        152
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "category",
                                            "range": [
                                                149,
                                                149
                                            ],
                                            "children": [],
                                            "content": "category"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "quantity",
                                            "range": [
                                                151,
                                                151
                                            ],
                                            "children": [],
                                            "content": "quantity"
                                        }
                                    ],
                                    "content": "(category,quantity)"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "product_id",
                                    "range": [
                                        154,
                                        154
                                    ],
                                    "children": [],
                                    "content": "product_id"
                                }
                            ],
                            "content": "yield(category,quantity),product_id"
                        }
                    ],
                    "content": ":\n\"\"\"Construct key to ensure proper sorting. \\n  \\n         Transform key and value to the form: \\n  \\n         (foo, 2), p1 \\n         (bar, 3), p1 \\n         (foo, 3), p2 \\n         (bar, 10), p3 \\n         (foo, 1), p4 \\n  \\n         The shuffle/sort step of MapReduce will then do a \\n         distributed sort on the keys, resulting in: \\n  \\n         (category1, 1), product4 \\n         (category1, 2), product1 \\n         (category1, 3), product2 \\n         (category2, 3), product1 \\n         (category2, 7), product3 \\n         \"\"\"\ncategory,product_id=key\nquantity=value\nyield(category,quantity),product_id\n"
                }
            ],
            "content": "def mapper_sort(self,key,value):\n\"\"\"Construct key to ensure proper sorting. \\n  \\n         Transform key and value to the form: \\n  \\n         (foo, 2), p1 \\n         (bar, 3), p1 \\n         (foo, 3), p2 \\n         (bar, 10), p3 \\n         (foo, 1), p4 \\n  \\n         The shuffle/sort step of MapReduce will then do a \\n         distributed sort on the keys, resulting in: \\n  \\n         (category1, 1), product4 \\n         (category1, 2), product1 \\n         (category1, 3), product2 \\n         (category2, 3), product1 \\n         (category2, 7), product3 \\n         \"\"\"\ncategory,product_id=key\nquantity=value\nyield(category,quantity),product_id\n"
        },
        {
            "type": "FunctionDecl",
            "name": "reducer_identity",
            "range": [
                157,
                172
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        159,
                        165
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                160,
                                160
                            ],
                            "children": [],
                            "content": "self"
                        },
                        {
                            "type": "Parameter",
                            "name": "key",
                            "range": [
                                162,
                                162
                            ],
                            "children": [],
                            "content": "key"
                        },
                        {
                            "type": "Parameter",
                            "name": "value",
                            "range": [
                                164,
                                164
                            ],
                            "children": [],
                            "content": "value"
                        }
                    ],
                    "content": "(self,key,value)"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        166,
                        172
                    ],
                    "children": [
                        {
                            "type": "YieldExpression",
                            "name": "yield",
                            "range": [
                                168,
                                171
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "key",
                                    "range": [
                                        169,
                                        169
                                    ],
                                    "children": [],
                                    "content": "key"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "value",
                                    "range": [
                                        171,
                                        171
                                    ],
                                    "children": [],
                                    "content": "value"
                                }
                            ],
                            "content": "yield key,value"
                        }
                    ],
                    "content": ":\nyield key,value\n"
                }
            ],
            "content": "def reducer_identity(self,key,value):\nyield key,value\n"
        },
        {
            "type": "FunctionDecl",
            "name": "steps",
            "range": [
                174,
                227
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        176,
                        178
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "self",
                            "range": [
                                177,
                                177
                            ],
                            "children": [],
                            "content": "self"
                        }
                    ],
                    "content": "(self)"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        179,
                        227
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                185,
                                226
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "array",
                                    "range": [
                                        186,
                                        226
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "mr",
                                            "range": [
                                                188,
                                                204
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "self",
                                                    "range": [
                                                        188,
                                                        188
                                                    ],
                                                    "children": [],
                                                    "content": "self"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "mapper",
                                                    "range": [
                                                        192,
                                                        192
                                                    ],
                                                    "children": [],
                                                    "content": "mapper"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "self",
                                                    "range": [
                                                        194,
                                                        194
                                                    ],
                                                    "children": [],
                                                    "content": "self"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "reducer",
                                                    "range": [
                                                        199,
                                                        199
                                                    ],
                                                    "children": [],
                                                    "content": "reducer"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "self",
                                                    "range": [
                                                        201,
                                                        201
                                                    ],
                                                    "children": [],
                                                    "content": "self"
                                                }
                                            ],
                                            "content": "self.mr(mapper=self.mapper,\nreducer=self.reducer)"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "mr",
                                            "range": [
                                                207,
                                                223
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "self",
                                                    "range": [
                                                        207,
                                                        207
                                                    ],
                                                    "children": [],
                                                    "content": "self"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "mapper_sort",
                                                    "range": [
                                                        211,
                                                        211
                                                    ],
                                                    "children": [],
                                                    "content": "mapper"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "self",
                                                    "range": [
                                                        213,
                                                        213
                                                    ],
                                                    "children": [],
                                                    "content": "self"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "reducer_identity",
                                                    "range": [
                                                        218,
                                                        218
                                                    ],
                                                    "children": [],
                                                    "content": "reducer"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "self",
                                                    "range": [
                                                        220,
                                                        220
                                                    ],
                                                    "children": [],
                                                    "content": "self"
                                                }
                                            ],
                                            "content": "self.mr(mapper=self.mapper_sort,\nreducer=self.reducer_identity)"
                                        }
                                    ],
                                    "content": "[\nself.mr(mapper=self.mapper,\nreducer=self.reducer),\nself.mr(mapper=self.mapper_sort,\nreducer=self.reducer_identity),\n]"
                                }
                            ],
                            "content": "return[\nself.mr(mapper=self.mapper,\nreducer=self.reducer),\nself.mr(mapper=self.mapper_sort,\nreducer=self.reducer_identity),\n]"
                        }
                    ],
                    "content": ":\n\"\"\"Run the map and reduce steps.\"\"\"\nreturn[\nself.mr(mapper=self.mapper,\nreducer=self.reducer),\nself.mr(mapper=self.mapper_sort,\nreducer=self.reducer_identity),\n]\n"
                }
            ],
            "content": "def steps(self):\n\"\"\"Run the map and reduce steps.\"\"\"\nreturn[\nself.mr(mapper=self.mapper,\nreducer=self.reducer),\nself.mr(mapper=self.mapper_sort,\nreducer=self.reducer_identity),\n]\n"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                229,
                235
            ],
            "children": [
                {
                    "type": "BinaryExpression",
                    "name": "",
                    "range": [
                        230,
                        233
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "__name__",
                            "range": [
                                230,
                                230
                            ],
                            "children": [],
                            "content": "if"
                        },
                        {
                            "type": "Literal",
                            "name": "'__main__'",
                            "range": [
                                233,
                                233
                            ],
                            "children": [],
                            "content": "="
                        }
                    ],
                    "content": "if __name__=="
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        234,
                        235
                    ],
                    "children": [],
                    "content": "'__main__':"
                }
            ],
            "content": "\nif __name__=='__main__':"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                236,
                241
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "",
                    "range": [
                        236,
                        240
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "",
                            "range": [
                                236,
                                238
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "SalesRanker",
                                    "range": [
                                        236,
                                        236
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "run",
                                    "range": [
                                        238,
                                        238
                                    ],
                                    "children": [],
                                    "content": "."
                                }
                            ],
                            "content": "\nSalesRanker."
                        }
                    ],
                    "content": "\nSalesRanker.run("
                }
            ],
            "content": "\nSalesRanker.run()"
        }
    ],
    "content": "#-*-coding:utf-8-*-\n\nfrom mrjob.job import MRJob\n\n\nclass SalesRanker(MRJob):\n\ndef within_past_week(self,timestamp):\n\"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n...\n\ndef mapper(self,_,line):\n\"\"\"Parse each log line, extract and transform relevant lines. \\n  \\n         Emit key value pairs of the form: \\n  \\n         (foo, p1), 2 \\n         (bar, p1), 2 \\n         (bar, p1), 1 \\n         (foo, p2), 3 \\n         (bar, p3), 10 \\n         (foo, p4), 1 \\n         \"\"\"\ntimestamp,product_id,category,quantity=line.split('\\t')\nif self.within_past_week(timestamp):\nyield(category,product_id),quantity\n\ndef reducer(self,key,values):\n\"\"\"Sum values for each key. \\n  \\n         (foo, p1), 2 \\n         (bar, p1), 3 \\n         (foo, p2), 3 \\n         (bar, p3), 10 \\n         (foo, p4), 1 \\n         \"\"\"\nyield key,sum(values)\n\ndef mapper_sort(self,key,value):\n\"\"\"Construct key to ensure proper sorting. \\n  \\n         Transform key and value to the form: \\n  \\n         (foo, 2), p1 \\n         (bar, 3), p1 \\n         (foo, 3), p2 \\n         (bar, 10), p3 \\n         (foo, 1), p4 \\n  \\n         The shuffle/sort step of MapReduce will then do a \\n         distributed sort on the keys, resulting in: \\n  \\n         (category1, 1), product4 \\n         (category1, 2), product1 \\n         (category1, 3), product2 \\n         (category2, 3), product1 \\n         (category2, 7), product3 \\n         \"\"\"\ncategory,product_id=key\nquantity=value\nyield(category,quantity),product_id\n\ndef reducer_identity(self,key,value):\nyield key,value\n\ndef steps(self):\n\"\"\"Run the map and reduce steps.\"\"\"\nreturn[\nself.mr(mapper=self.mapper,\nreducer=self.reducer),\nself.mr(mapper=self.mapper_sort,\nreducer=self.reducer_identity),\n]\n\n\nif __name__=='__main__':\nSalesRanker.run()\n"
}