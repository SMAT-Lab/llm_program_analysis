{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        98
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "find_previous_power_of_two",
            "range": [
                0,
                80
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "number",
                    "range": [
                        3,
                        5
                    ],
                    "children": [],
                    "content": "number:int"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        9,
                        9
                    ],
                    "children": [],
                    "content": "int"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        12,
                        14
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Find the largest power of two that is less than or equal to a given integer. \\n     https://stackoverflow.com/questions/1322510 \\n  \\n     >>> [find_previous_power_of_two(i) for i in range(18)] \\n     [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16] \\n     >>> find_previous_power_of_two(-5) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> find_previous_power_of_two(10.5) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     \"\"\""
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        16,
                        35
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                17,
                                28
                            ],
                            "children": [
                                {
                                    "type": "LogicalExpression",
                                    "name": "or",
                                    "range": [
                                        24,
                                        28
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "isinstance",
                                            "range": [
                                                18,
                                                23
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "number",
                                                    "range": [
                                                        20,
                                                        20
                                                    ],
                                                    "children": [],
                                                    "content": "number"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "int",
                                                    "range": [
                                                        22,
                                                        22
                                                    ],
                                                    "children": [],
                                                    "content": "int"
                                                }
                                            ],
                                            "content": "isinstance(number,int)"
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "<",
                                            "range": [
                                                25,
                                                27
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "number",
                                                    "range": [
                                                        25,
                                                        25
                                                    ],
                                                    "children": [],
                                                    "content": "number"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "0",
                                                    "range": [
                                                        27,
                                                        27
                                                    ],
                                                    "children": [],
                                                    "content": "0"
                                                }
                                            ],
                                            "content": "number<0"
                                        }
                                    ],
                                    "content": "or number<0:"
                                }
                            ],
                            "content": "not isinstance(number,int)or number<0:"
                        },
                        {
                            "type": "Block",
                            "name": "",
                            "range": [
                                29,
                                35
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "",
                                    "range": [
                                        30,
                                        34
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "ValueError",
                                            "range": [
                                                31,
                                                34
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "\"Input must be a non-negative integer\"",
                                                    "range": [
                                                        33,
                                                        33
                                                    ],
                                                    "children": [],
                                                    "content": "\"Input must be a non-negative integer\""
                                                }
                                            ],
                                            "content": "ValueError(\"Input must be a non-negative integer\")"
                                        }
                                    ],
                                    "content": "raise ValueError(\"Input must be a non-negative integer\")"
                                }
                            ],
                            "content": "\nraise ValueError(\"Input must be a non-negative integer\")\n"
                        }
                    ],
                    "content": "if not isinstance(number,int)or number<0:\nraise ValueError(\"Input must be a non-negative integer\")\n"
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        36,
                        45
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                37,
                                41
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "==",
                                    "range": [
                                        38,
                                        40
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "number",
                                            "range": [
                                                37,
                                                37
                                            ],
                                            "children": [],
                                            "content": "number"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "0",
                                            "range": [
                                                40,
                                                40
                                            ],
                                            "children": [],
                                            "content": "0"
                                        }
                                    ],
                                    "content": "==0"
                                }
                            ],
                            "content": "number==0:"
                        },
                        {
                            "type": "Block",
                            "name": "",
                            "range": [
                                42,
                                45
                            ],
                            "children": [
                                {
                                    "type": "ReturnStatement",
                                    "name": "",
                                    "range": [
                                        43,
                                        44
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "0",
                                            "range": [
                                                44,
                                                44
                                            ],
                                            "children": [],
                                            "content": "0"
                                        }
                                    ],
                                    "content": "return0"
                                }
                            ],
                            "content": "\nreturn0\n"
                        }
                    ],
                    "content": "if number==0:\nreturn0\n"
                },
                {
                    "type": "VariableDeclaration",
                    "name": "power",
                    "range": [
                        46,
                        49
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "1",
                            "range": [
                                48,
                                48
                            ],
                            "children": [],
                            "content": "1"
                        }
                    ],
                    "content": "power=1\n"
                },
                {
                    "type": "WhileStatement",
                    "name": "",
                    "range": [
                        50,
                        68
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                51,
                                55
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "<=",
                                    "range": [
                                        52,
                                        54
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "power",
                                            "range": [
                                                51,
                                                51
                                            ],
                                            "children": [],
                                            "content": "power"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "number",
                                            "range": [
                                                54,
                                                54
                                            ],
                                            "children": [],
                                            "content": "number"
                                        }
                                    ],
                                    "content": "<=number"
                                }
                            ],
                            "content": "power<=number:"
                        },
                        {
                            "type": "Block",
                            "name": "",
                            "range": [
                                56,
                                68
                            ],
                            "children": [
                                {
                                    "type": "ExpressionStatement",
                                    "name": "",
                                    "range": [
                                        57,
                                        61
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "<<=",
                                            "range": [
                                                58,
                                                60
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "power",
                                                    "range": [
                                                        57,
                                                        57
                                                    ],
                                                    "children": [],
                                                    "content": "power"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "1",
                                                    "range": [
                                                        60,
                                                        60
                                                    ],
                                                    "children": [],
                                                    "content": "="
                                                }
                                            ],
                                            "content": "<<="
                                        }
                                    ],
                                    "content": "power<<=1"
                                }
                            ],
                            "content": "\npower<<=1#Equivalent to multiplying by2\n"
                        }
                    ],
                    "content": "while power<=number:\npower<<=1#Equivalent to multiplying by2\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        69,
                        80
                    ],
                    "children": [
                        {
                            "type": "ConditionalExpression",
                            "name": "",
                            "range": [
                                70,
                                79
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        75,
                                        77
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": ">",
                                            "range": [
                                                76,
                                                76
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "number",
                                                    "range": [
                                                        75,
                                                        75
                                                    ],
                                                    "children": [],
                                                    "content": "number"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "1",
                                                    "range": [
                                                        77,
                                                        77
                                                    ],
                                                    "children": [],
                                                    "content": "1"
                                                }
                                            ],
                                            "content": ">"
                                        }
                                    ],
                                    "content": "number>1"
                                },
                                {
                                    "type": "Consequent",
                                    "name": "",
                                    "range": [
                                        70,
                                        73
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": ">>",
                                            "range": [
                                                71,
                                                72
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "power",
                                                    "range": [
                                                        70,
                                                        70
                                                    ],
                                                    "children": [],
                                                    "content": "power"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "1",
                                                    "range": [
                                                        73,
                                                        73
                                                    ],
                                                    "children": [],
                                                    "content": "1"
                                                }
                                            ],
                                            "content": ">>"
                                        }
                                    ],
                                    "content": "power>>1"
                                },
                                {
                                    "type": "Alternate",
                                    "name": "",
                                    "range": [
                                        79,
                                        79
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "1",
                                            "range": [
                                                79,
                                                79
                                            ],
                                            "children": [],
                                            "content": "1"
                                        }
                                    ],
                                    "content": "1"
                                }
                            ],
                            "content": "power>>1if number>1else1"
                        }
                    ],
                    "content": "return power>>1if number>1else1\n"
                }
            ],
            "content": "def find_previous_power_of_two(number:int)->int:\n\"\"\" \\n     Find the largest power of two that is less than or equal to a given integer. \\n     https://stackoverflow.com/questions/1322510 \\n  \\n     >>> [find_previous_power_of_two(i) for i in range(18)] \\n     [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16] \\n     >>> find_previous_power_of_two(-5) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> find_previous_power_of_two(10.5) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     \"\"\"\nif not isinstance(number,int)or number<0:\nraise ValueError(\"Input must be a non-negative integer\")\nif number==0:\nreturn0\npower=1\nwhile power<=number:\npower<<=1#Equivalent to multiplying by2\nreturn power>>1if number>1else1\n"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                83,
                88
            ],
            "children": [
                {
                    "type": "BinaryExpression",
                    "name": "",
                    "range": [
                        84,
                        87
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "__name__",
                            "range": [
                                84,
                                84
                            ],
                            "children": [],
                            "content": "__name__"
                        },
                        {
                            "type": "Operator",
                            "name": "==",
                            "range": [
                                85,
                                86
                            ],
                            "children": [],
                            "content": "=="
                        },
                        {
                            "type": "Literal",
                            "name": "\"__main__\"",
                            "range": [
                                87,
                                87
                            ],
                            "children": [],
                            "content": "\"__main__\""
                        }
                    ],
                    "content": "__name__==\"__main__\""
                }
            ],
            "content": "if __name__==\"__main__\":"
        },
        {
            "type": "ImportStatement",
            "name": "doctest",
            "range": [
                90,
                92
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "doctest",
                    "range": [
                        91,
                        91
                    ],
                    "children": [],
                    "content": "doctest"
                }
            ],
            "content": "import doctest\n"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                94,
                98
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "",
                    "range": [
                        94,
                        98
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "",
                            "range": [
                                94,
                                96
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "doctest",
                                    "range": [
                                        94,
                                        94
                                    ],
                                    "children": [],
                                    "content": "doctest"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "testmod",
                                    "range": [
                                        96,
                                        96
                                    ],
                                    "children": [],
                                    "content": "testmod"
                                }
                            ],
                            "content": "doctest.testmod"
                        }
                    ],
                    "content": "doctest.testmod()"
                }
            ],
            "content": "doctest.testmod()"
        }
    ],
    "content": "def find_previous_power_of_two(number:int)->int:\n\"\"\" \\n     Find the largest power of two that is less than or equal to a given integer. \\n     https://stackoverflow.com/questions/1322510 \\n  \\n     >>> [find_previous_power_of_two(i) for i in range(18)] \\n     [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16] \\n     >>> find_previous_power_of_two(-5) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     >>> find_previous_power_of_two(10.5) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input must be a non-negative integer \\n     \"\"\"\nif not isinstance(number,int)or number<0:\nraise ValueError(\"Input must be a non-negative integer\")\nif number==0:\nreturn0\npower=1\nwhile power<=number:\npower<<=1#Equivalent to multiplying by2\nreturn power>>1if number>1else1\n\n\nif __name__==\"__main__\":\nimport doctest\n\ndoctest.testmod()"
}