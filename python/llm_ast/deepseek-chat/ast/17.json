{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        656
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                0,
                1
            ],
            "children": [],
            "content": "\"\"\" \\n Author  : Alexander Pantyukhin \\n Date    : November 24, 2022 \\n  \\n Task: \\n Given an m x n grid of characters board and a string word, \\n return true if word exists in the grid. \\n  \\n The word can be constructed from letters of sequentially adjacent cells, \\n where adjacent cells are horizontally or vertically neighboring. \\n The same letter cell may not be used more than once. \\n  \\n Example: \\n  \\n Matrix: \\n --------- \\n |A|B|C|E| \\n |S|F|C|S| \\n |A|D|E|E| \\n --------- \\n  \\n Word: \\n \""
        },
        {
            "type": "Literal",
            "name": "",
            "range": [
                1,
                2
            ],
            "children": [],
            "content": "\" \\n Author  : Alexander Pantyukhin \\n Date    : November 24, 2022 \\n  \\n Task: \\n Given an m x n grid of characters board and a string word, \\n return true if word exists in the grid. \\n  \\n The word can be constructed from letters of sequentially adjacent cells, \\n where adjacent cells are horizontally or vertically neighboring. \\n The same letter cell may not be used more than once. \\n  \\n Example: \\n  \\n Matrix: \\n --------- \\n |A|B|C|E| \\n |S|F|C|S| \\n |A|D|E|E| \\n --------- \\n  \\n Word: \\n \" ABCCED"
        },
        {
            "type": "Literal",
            "name": "",
            "range": [
                2,
                3
            ],
            "children": [],
            "content": "ABCCED \" \\n  \\n Result: \\n True \\n  \\n Implementation notes: Use backtracking approach. \\n At each point, check all neighbors to try to find the next letter of the word. \\n  \\n leetcode: https://leetcode.com/problems/word-search/ \\n  \\n \""
        },
        {
            "type": "Literal",
            "name": "",
            "range": [
                3,
                4
            ],
            "children": [],
            "content": "\" \\n  \\n Result: \\n True \\n  \\n Implementation notes: Use backtracking approach. \\n At each point, check all neighbors to try to find the next letter of the word. \\n  \\n leetcode: https://leetcode.com/problems/word-search/ \\n  \\n \"\"\""
        },
        {
            "type": "Comment",
            "name": "",
            "range": [
                4,
                5
            ],
            "children": [],
            "content": "\"\"\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_point_key",
            "range": [
                6,
                43
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        8,
                        24
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "len_board",
                            "range": [
                                9,
                                11
                            ],
                            "children": [],
                            "content": "get_point_key(len_board"
                        },
                        {
                            "type": "Parameter",
                            "name": "len_board_column",
                            "range": [
                                13,
                                15
                            ],
                            "children": [],
                            "content": "int,len_board_column"
                        },
                        {
                            "type": "Parameter",
                            "name": "row",
                            "range": [
                                17,
                                19
                            ],
                            "children": [],
                            "content": "int,row"
                        },
                        {
                            "type": "Parameter",
                            "name": "column",
                            "range": [
                                21,
                                23
                            ],
                            "children": [],
                            "content": "int,column"
                        }
                    ],
                    "content": "def get_point_key(len_board:int,len_board_column:int,row:int,column:"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        25,
                        27
                    ],
                    "children": [],
                    "content": "int)-"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        28,
                        43
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                30,
                                32
                            ],
                            "children": [],
                            "content": ":\n\"\""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                35,
                                43
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "expression",
                                    "range": [
                                        36,
                                        42
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "name": "left",
                                            "range": [
                                                36,
                                                40
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "len_board",
                                                    "range": [
                                                        36,
                                                        36
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "len_board_column",
                                                    "range": [
                                                        38,
                                                        38
                                                    ],
                                                    "children": [],
                                                    "content": "len_board"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "row",
                                                    "range": [
                                                        40,
                                                        40
                                                    ],
                                                    "children": [],
                                                    "content": "len_board_column"
                                                }
                                            ],
                                            "content": "\nreturn len_board*len_board_column"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "column",
                                            "range": [
                                                42,
                                                42
                                            ],
                                            "children": [],
                                            "content": "row"
                                        }
                                    ],
                                    "content": "\nreturn len_board*len_board_column*row"
                                }
                            ],
                            "content": "\n\nreturn len_board*len_board_column*row+"
                        }
                    ],
                    "content": ">int:\n\"\"\" \\n     Returns the hash key of matrix indexes. \\n  \\n     >>> get_point_key(10, 20, 1, 0) \\n     200 \\n     \"\"\"\n\nreturn len_board*len_board_column*row+"
                }
            ],
            "content": "\n\ndef get_point_key(len_board:int,len_board_column:int,row:int,column:int)->int:\n\"\"\" \\n     Returns the hash key of matrix indexes. \\n  \\n     >>> get_point_key(10, 20, 1, 0) \\n     200 \\n     \"\"\"\n\nreturn len_board*len_board_column*row+"
        },
        {
            "type": "FunctionDecl",
            "name": "exits_word",
            "range": [
                44,
                293
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        46,
                        86
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "board",
                            "range": [
                                48,
                                56
                            ],
                            "children": [],
                            "content": "def exits_word(\nboard:list[list"
                        },
                        {
                            "type": "Parameter",
                            "name": "word",
                            "range": [
                                59,
                                61
                            ],
                            "children": [],
                            "content": "]],"
                        },
                        {
                            "type": "Parameter",
                            "name": "row",
                            "range": [
                                64,
                                66
                            ],
                            "children": [],
                            "content": ":str,"
                        },
                        {
                            "type": "Parameter",
                            "name": "column",
                            "range": [
                                69,
                                71
                            ],
                            "children": [],
                            "content": ":int,"
                        },
                        {
                            "type": "Parameter",
                            "name": "word_index",
                            "range": [
                                74,
                                76
                            ],
                            "children": [],
                            "content": ":int,"
                        },
                        {
                            "type": "Parameter",
                            "name": "visited_points_set",
                            "range": [
                                79,
                                84
                            ],
                            "children": [],
                            "content": ":int,\nvisited_points_set:"
                        }
                    ],
                    "content": "\n\ndef exits_word(\nboard:list[list[str]],\nword:str,\nrow:int,\ncolumn:int,\nword_index:int,\nvisited_points_set:set["
                },
                {
                    "type": "ReturnType",
                    "name": "bool",
                    "range": [
                        88,
                        90
                    ],
                    "children": [],
                    "content": "],\n"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        92,
                        293
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                93,
                                99
                            ],
                            "children": [],
                            "content": ">bool:\n\"\"\" \\n     Return True if it's possible to search the word suffix \\n     starting from the word_index. \\n  \\n     >>> exits_word([[\" A"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                102,
                                120
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        103,
                                        116
                                    ],
                                    "children": [],
                                    "content": "\"\"\n\nif board[row][column]!=word"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return_false",
                                    "range": [
                                        118,
                                        119
                                    ],
                                    "children": [],
                                    "content": "word_index]"
                                }
                            ],
                            "content": "\", 0, 0, 0, set()) \\n     False \\n     \"\"\"\n\nif board[row][column]!=word[word_index]:"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                122,
                                136
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        123,
                                        132
                                    ],
                                    "children": [],
                                    "content": "False\n\nif word_index==len(word"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return_true",
                                    "range": [
                                        134,
                                        135
                                    ],
                                    "children": [],
                                    "content": "-1"
                                }
                            ],
                            "content": "return False\n\nif word_index==len(word)-1:"
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "traverts_directions",
                            "range": [
                                138,
                                166
                            ],
                            "children": [],
                            "content": "return True\n\ntraverts_directions=[(0,1),(0,-1),(-1,0),(1"
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "len_board",
                            "range": [
                                168,
                                174
                            ],
                            "children": [],
                            "content": "0)]\nlen_board=len"
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "len_board_column",
                            "range": [
                                175,
                                184
                            ],
                            "children": [],
                            "content": "(board)\nlen_board_column=len(board["
                        },
                        {
                            "type": "ForStatement",
                            "name": "for_loop",
                            "range": [
                                185,
                                289
                            ],
                            "children": [
                                {
                                    "type": "Initialization",
                                    "name": "initialization",
                                    "range": [
                                        186,
                                        188
                                    ],
                                    "children": [],
                                    "content": "])\n"
                                },
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        189,
                                        225
                                    ],
                                    "children": [],
                                    "content": "for direction in traverts_directions:\nnext_i=row+direction[0]\nnext_j=column+direction[1]\nif not(0<=next_i<len_board and0<="
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "block",
                                    "range": [
                                        230,
                                        289
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDeclaration",
                                            "name": "key",
                                            "range": [
                                                231,
                                                242
                                            ],
                                            "children": [],
                                            "content": "\ncontinue\n\nkey=get_point_key(len_board,len_board_column,"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_statement",
                                            "range": [
                                                244,
                                                251
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "condition",
                                                    "range": [
                                                        245,
                                                        248
                                                    ],
                                                    "children": [],
                                                    "content": "next_j)\nif"
                                                },
                                                {
                                                    "type": "ContinueStatement",
                                                    "name": "continue",
                                                    "range": [
                                                        250,
                                                        250
                                                    ],
                                                    "children": [],
                                                    "content": "in"
                                                }
                                            ],
                                            "content": ",next_j)\nif key in visited_points_set"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "add_to_visited",
                                            "range": [
                                                253,
                                                259
                                            ],
                                            "children": [],
                                            "content": "\ncontinue\n\nvisited_points_set.add"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_statement",
                                            "range": [
                                                260,
                                                281
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "condition",
                                                    "range": [
                                                        261,
                                                        277
                                                    ],
                                                    "children": [],
                                                    "content": "key)\nif exits_word(board,word,next_i,next_j,word_index+1"
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "name": "return_true",
                                                    "range": [
                                                        279,
                                                        280
                                                    ],
                                                    "children": [],
                                                    "content": "visited_points_set)"
                                                }
                                            ],
                                            "content": "(key)\nif exits_word(board,word,next_i,next_j,word_index+1,visited_points_set):"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "remove_from_visited",
                                            "range": [
                                                283,
                                                289
                                            ],
                                            "children": [],
                                            "content": "return True\n\nvisited_points_set.remove"
                                        }
                                    ],
                                    "content": ":\ncontinue\n\nkey=get_point_key(len_board,len_board_column,next_i,next_j)\nif key in visited_points_set:\ncontinue\n\nvisited_points_set.add(key)\nif exits_word(board,word,next_i,next_j,word_index+1,visited_points_set):\nreturn True\n\nvisited_points_set.remove"
                                }
                            ],
                            "content": "0])\nfor direction in traverts_directions:\nnext_i=row+direction[0]\nnext_j=column+direction[1]\nif not(0<=next_i<len_board and0<=next_j<len_board_column):\ncontinue\n\nkey=get_point_key(len_board,len_board_column,next_i,next_j)\nif key in visited_points_set:\ncontinue\n\nvisited_points_set.add(key)\nif exits_word(board,word,next_i,next_j,word_index+1,visited_points_set):\nreturn True\n\nvisited_points_set.remove"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_false",
                            "range": [
                                291,
                                292
                            ],
                            "children": [],
                            "content": "key)"
                        }
                    ],
                    "content": "->bool:\n\"\"\" \\n     Return True if it's possible to search the word suffix \\n     starting from the word_index. \\n  \\n     >>> exits_word([[\" A\"]], \"B \", 0, 0, 0, set()) \\n     False \\n     \"\"\"\n\nif board[row][column]!=word[word_index]:\nreturn False\n\nif word_index==len(word)-1:\nreturn True\n\ntraverts_directions=[(0,1),(0,-1),(-1,0),(1,0)]\nlen_board=len(board)\nlen_board_column=len(board[0])\nfor direction in traverts_directions:\nnext_i=row+direction[0]\nnext_j=column+direction[1]\nif not(0<=next_i<len_board and0<=next_j<len_board_column):\ncontinue\n\nkey=get_point_key(len_board,len_board_column,next_i,next_j)\nif key in visited_points_set:\ncontinue\n\nvisited_points_set.add(key)\nif exits_word(board,word,next_i,next_j,word_index+1,visited_points_set):\nreturn True\n\nvisited_points_set.remove(key)\n"
                }
            ],
            "content": "column\n\n\ndef exits_word(\nboard:list[list[str]],\nword:str,\nrow:int,\ncolumn:int,\nword_index:int,\nvisited_points_set:set[int],\n)->bool:\n\"\"\" \\n     Return True if it's possible to search the word suffix \\n     starting from the word_index. \\n  \\n     >>> exits_word([[\" A\"]], \"B \", 0, 0, 0, set()) \\n     False \\n     \"\"\"\n\nif board[row][column]!=word[word_index]:\nreturn False\n\nif word_index==len(word)-1:\nreturn True\n\ntraverts_directions=[(0,1),(0,-1),(-1,0),(1,0)]\nlen_board=len(board)\nlen_board_column=len(board[0])\nfor direction in traverts_directions:\nnext_i=row+direction[0]\nnext_j=column+direction[1]\nif not(0<=next_i<len_board and0<=next_j<len_board_column):\ncontinue\n\nkey=get_point_key(len_board,len_board_column,next_i,next_j)\nif key in visited_points_set:\ncontinue\n\nvisited_points_set.add(key)\nif exits_word(board,word,next_i,next_j,word_index+1,visited_points_set):\nreturn True\n\nvisited_points_set.remove(key)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "word_exists",
            "range": [
                294,
                638
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        296,
                        310
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "board",
                            "range": [
                                297,
                                305
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "list[list[str]]",
                                    "range": [
                                        298,
                                        305
                                    ],
                                    "children": [],
                                    "content": "\n\ndef word_exists(board:list"
                                }
                            ],
                            "content": "\n\n\ndef word_exists(board:list"
                        },
                        {
                            "type": "Parameter",
                            "name": "word",
                            "range": [
                                307,
                                309
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        308,
                                        309
                                    ],
                                    "children": [],
                                    "content": "[str"
                                }
                            ],
                            "content": "list[str"
                        }
                    ],
                    "content": "False\n\n\ndef word_exists(board:list[list[str]"
                },
                {
                    "type": "ReturnType",
                    "name": "bool",
                    "range": [
                        311,
                        313
                    ],
                    "children": [],
                    "content": "],word"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        314,
                        638
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                316,
                                433
                            ],
                            "children": [],
                            "content": ")->bool:\n\"\"\" \\n     >>> word_exists([[\" A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED \") \\n     True \\n     >>> word_exists([[\" A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE \") \\n     True \\n     >>> word_exists([[\" A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB \") \\n     False \\n     >>> word_exists([[\" A\"]], \"A \") \\n     True \\n     >>> word_exists([[\" B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB \") \\n     False \\n     >>> word_exists([[\" A \"]], 123) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The word parameter should be a string of length greater than 0. \\n     >>> word_exists([[\" A\"]], \"\") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The word parameter should be a string of length greater than 0. \\n     >>> word_exists([[]], \" AB \") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The board should be a non empty matrix of single chars strings. \\n     >>> word_exists([], \" AB"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "board_error_message",
                            "range": [
                                440,
                                446
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "The board should be a non empty matrix of single chars strings.",
                                    "range": [
                                        444,
                                        445
                                    ],
                                    "children": [],
                                    "content": "board\n"
                                }
                            ],
                            "content": "\n\n#Validate board\nboard_error_message"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "len_board",
                            "range": [
                                449,
                                455
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "len",
                                    "range": [
                                        451,
                                        454
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "board",
                                            "range": [
                                                453,
                                                454
                                            ],
                                            "children": [],
                                            "content": "\n\n"
                                        }
                                    ],
                                    "content": "\n)\n\n"
                                }
                            ],
                            "content": "\n\"The board should be a non empty matrix of single chars strings.\"\n)\n\nlen_board"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                456,
                                479
                            ],
                            "children": [
                                {
                                    "type": "LogicalExpression",
                                    "name": "or",
                                    "range": [
                                        457,
                                        471
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "isinstance",
                                            "range": [
                                                458,
                                                463
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "board",
                                                    "range": [
                                                        460,
                                                        461
                                                    ],
                                                    "children": [],
                                                    "content": ")\n"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "list",
                                                    "range": [
                                                        462,
                                                        463
                                                    ],
                                                    "children": [],
                                                    "content": "if not"
                                                }
                                            ],
                                            "content": "(board)\nif not"
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "==",
                                            "range": [
                                                465,
                                                471
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "len",
                                                    "range": [
                                                        465,
                                                        468
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "board",
                                                            "range": [
                                                                467,
                                                                468
                                                            ],
                                                            "children": [],
                                                            "content": ",list"
                                                        }
                                                    ],
                                                    "content": "(board,list"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "0",
                                                    "range": [
                                                        470,
                                                        471
                                                    ],
                                                    "children": [],
                                                    "content": "or len"
                                                }
                                            ],
                                            "content": "(board,list)or len"
                                        }
                                    ],
                                    "content": "len(board)\nif not isinstance(board,list)or len"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "block",
                                    "range": [
                                        472,
                                        479
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                474,
                                                478
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "ValueError",
                                                    "range": [
                                                        475,
                                                        476
                                                    ],
                                                    "children": [],
                                                    "content": "=="
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "board_error_message",
                                                    "range": [
                                                        477,
                                                        478
                                                    ],
                                                    "children": [],
                                                    "content": "0:"
                                                }
                                            ],
                                            "content": ")==0:"
                                        }
                                    ],
                                    "content": "(board)==0:\n"
                                }
                            ],
                            "content": "=len(board)\nif not isinstance(board,list)or len(board)==0:\n"
                        },
                        {
                            "type": "ForStatement",
                            "name": "for",
                            "range": [
                                481,
                                510
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "row",
                                    "range": [
                                        482,
                                        484
                                    ],
                                    "children": [],
                                    "content": "(board_error_message)"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "board",
                                    "range": [
                                        484,
                                        485
                                    ],
                                    "children": [],
                                    "content": ")\n"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "block",
                                    "range": [
                                        485,
                                        510
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "if",
                                            "range": [
                                                487,
                                                509
                                            ],
                                            "children": [
                                                {
                                                    "type": "LogicalExpression",
                                                    "name": "or",
                                                    "range": [
                                                        488,
                                                        502
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "isinstance",
                                                            "range": [
                                                                489,
                                                                494
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "row",
                                                                    "range": [
                                                                        491,
                                                                        492
                                                                    ],
                                                                    "children": [],
                                                                    "content": ":\n"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "list",
                                                                    "range": [
                                                                        493,
                                                                        494
                                                                    ],
                                                                    "children": [],
                                                                    "content": "if not"
                                                                }
                                                            ],
                                                            "content": "in board:\nif not"
                                                        },
                                                        {
                                                            "type": "BinaryExpression",
                                                            "name": "==",
                                                            "range": [
                                                                496,
                                                                502
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "len",
                                                                    "range": [
                                                                        496,
                                                                        499
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "row",
                                                                            "range": [
                                                                                498,
                                                                                499
                                                                            ],
                                                                            "children": [],
                                                                            "content": ",list"
                                                                        }
                                                                    ],
                                                                    "content": "(row,list"
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "0",
                                                                    "range": [
                                                                        501,
                                                                        502
                                                                    ],
                                                                    "children": [],
                                                                    "content": "or len"
                                                                }
                                                            ],
                                                            "content": "(row,list)or len"
                                                        }
                                                    ],
                                                    "content": "row in board:\nif not isinstance(row,list)or len"
                                                },
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "block",
                                                    "range": [
                                                        503,
                                                        509
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "RaiseStatement",
                                                            "name": "raise",
                                                            "range": [
                                                                505,
                                                                509
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "ValueError",
                                                                    "range": [
                                                                        506,
                                                                        507
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=="
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "board_error_message",
                                                                    "range": [
                                                                        508,
                                                                        509
                                                                    ],
                                                                    "children": [],
                                                                    "content": "0:"
                                                                }
                                                            ],
                                                            "content": ")==0:"
                                                        }
                                                    ],
                                                    "content": "(row)==0:"
                                                }
                                            ],
                                            "content": "for row in board:\nif not isinstance(row,list)or len(row)==0:"
                                        }
                                    ],
                                    "content": "\n\nfor row in board:\nif not isinstance(row,list)or len(row)==0:\n"
                                }
                            ],
                            "content": "ValueError(board_error_message)\n\nfor row in board:\nif not isinstance(row,list)or len(row)==0:\n"
                        },
                        {
                            "type": "ForStatement",
                            "name": "for",
                            "range": [
                                512,
                                540
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "item",
                                    "range": [
                                        513,
                                        515
                                    ],
                                    "children": [],
                                    "content": "(board_error_message)"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "row",
                                    "range": [
                                        515,
                                        516
                                    ],
                                    "children": [],
                                    "content": ")\n"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "block",
                                    "range": [
                                        516,
                                        540
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "if",
                                            "range": [
                                                518,
                                                540
                                            ],
                                            "children": [
                                                {
                                                    "type": "LogicalExpression",
                                                    "name": "or",
                                                    "range": [
                                                        519,
                                                        533
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "isinstance",
                                                            "range": [
                                                                520,
                                                                525
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "item",
                                                                    "range": [
                                                                        522,
                                                                        523
                                                                    ],
                                                                    "children": [],
                                                                    "content": ":\n"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "str",
                                                                    "range": [
                                                                        524,
                                                                        525
                                                                    ],
                                                                    "children": [],
                                                                    "content": "if not"
                                                                }
                                                            ],
                                                            "content": "in row:\nif not"
                                                        },
                                                        {
                                                            "type": "BinaryExpression",
                                                            "name": "!=",
                                                            "range": [
                                                                527,
                                                                533
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "len",
                                                                    "range": [
                                                                        527,
                                                                        530
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "item",
                                                                            "range": [
                                                                                529,
                                                                                530
                                                                            ],
                                                                            "children": [],
                                                                            "content": ",str"
                                                                        }
                                                                    ],
                                                                    "content": "(item,str"
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "name": "1",
                                                                    "range": [
                                                                        532,
                                                                        533
                                                                    ],
                                                                    "children": [],
                                                                    "content": "or len"
                                                                }
                                                            ],
                                                            "content": "(item,str)or len"
                                                        }
                                                    ],
                                                    "content": "item in row:\nif not isinstance(item,str)or len"
                                                },
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "block",
                                                    "range": [
                                                        534,
                                                        540
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "RaiseStatement",
                                                            "name": "raise",
                                                            "range": [
                                                                536,
                                                                540
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "ValueError",
                                                                    "range": [
                                                                        537,
                                                                        538
                                                                    ],
                                                                    "children": [],
                                                                    "content": "!="
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "board_error_message",
                                                                    "range": [
                                                                        539,
                                                                        540
                                                                    ],
                                                                    "children": [],
                                                                    "content": "1:"
                                                                }
                                                            ],
                                                            "content": ")!=1:"
                                                        }
                                                    ],
                                                    "content": "(item)!=1:"
                                                }
                                            ],
                                            "content": "for item in row:\nif not isinstance(item,str)or len(item)!=1:"
                                        }
                                    ],
                                    "content": "\n\nfor item in row:\nif not isinstance(item,str)or len(item)!=1:"
                                }
                            ],
                            "content": "ValueError(board_error_message)\n\nfor item in row:\nif not isinstance(item,str)or len(item)!=1:"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                547,
                                572
                            ],
                            "children": [
                                {
                                    "type": "LogicalExpression",
                                    "name": "or",
                                    "range": [
                                        548,
                                        562
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "isinstance",
                                            "range": [
                                                549,
                                                554
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "word",
                                                    "range": [
                                                        551,
                                                        552
                                                    ],
                                                    "children": [],
                                                    "content": "word\n"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "str",
                                                    "range": [
                                                        553,
                                                        554
                                                    ],
                                                    "children": [],
                                                    "content": "if not"
                                                }
                                            ],
                                            "content": "#Validate word\nif not"
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "==",
                                            "range": [
                                                556,
                                                562
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "len",
                                                    "range": [
                                                        556,
                                                        559
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "word",
                                                            "range": [
                                                                558,
                                                                559
                                                            ],
                                                            "children": [],
                                                            "content": ",str"
                                                        }
                                                    ],
                                                    "content": "(word,str"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "0",
                                                    "range": [
                                                        561,
                                                        562
                                                    ],
                                                    "children": [],
                                                    "content": "or len"
                                                }
                                            ],
                                            "content": "(word,str)or len"
                                        }
                                    ],
                                    "content": "\n#Validate word\nif not isinstance(word,str)or len"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "block",
                                    "range": [
                                        563,
                                        572
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                565,
                                                571
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "ValueError",
                                                    "range": [
                                                        566,
                                                        567
                                                    ],
                                                    "children": [],
                                                    "content": "=="
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "The word parameter should be a string of length greater than 0.",
                                                    "range": [
                                                        569,
                                                        570
                                                    ],
                                                    "children": [],
                                                    "content": ":\n"
                                                }
                                            ],
                                            "content": ")==0:\nraise"
                                        }
                                    ],
                                    "content": "(word)==0:\nraise ValueError"
                                }
                            ],
                            "content": "\n\n#Validate word\nif not isinstance(word,str)or len(word)==0:\nraise ValueError"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "len_board_column",
                            "range": [
                                574,
                                583
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "len",
                                    "range": [
                                        576,
                                        582
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "board[0]",
                                            "range": [
                                                578,
                                                581
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "board",
                                                    "range": [
                                                        578,
                                                        579
                                                    ],
                                                    "children": [],
                                                    "content": "\n\n"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "name": "0",
                                                    "range": [
                                                        580,
                                                        581
                                                    ],
                                                    "children": [],
                                                    "content": "len_board_column="
                                                }
                                            ],
                                            "content": "\n\nlen_board_column="
                                        }
                                    ],
                                    "content": "\n)\n\nlen_board_column=len"
                                }
                            ],
                            "content": "\n\"The word parameter should be a string of length greater than 0.\"\n)\n\nlen_board_column=len("
                        },
                        {
                            "type": "ForStatement",
                            "name": "for",
                            "range": [
                                584,
                                634
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "i",
                                    "range": [
                                        585,
                                        587
                                    ],
                                    "children": [],
                                    "content": "[0]"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "range",
                                    "range": [
                                        587,
                                        590
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "len_board",
                                            "range": [
                                                589,
                                                590
                                            ],
                                            "children": [],
                                            "content": "\nfor"
                                        }
                                    ],
                                    "content": "])\nfor"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "block",
                                    "range": [
                                        591,
                                        634
                                    ],
                                    "children": [
                                        {
                                            "type": "ForStatement",
                                            "name": "for",
                                            "range": [
                                                593,
                                                634
                                            ],
                                            "children": [
                                                {
                                                    "type": "VariableDecl",
                                                    "name": "j",
                                                    "range": [
                                                        594,
                                                        596
                                                    ],
                                                    "children": [],
                                                    "content": "(len_board)"
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "range",
                                                    "range": [
                                                        596,
                                                        599
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "len_board_column",
                                                            "range": [
                                                                598,
                                                                599
                                                            ],
                                                            "children": [],
                                                            "content": "\nfor"
                                                        }
                                                    ],
                                                    "content": "):\nfor"
                                                },
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "block",
                                                    "range": [
                                                        600,
                                                        634
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "IfStatement",
                                                            "name": "if",
                                                            "range": [
                                                                602,
                                                                634
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "exits_word",
                                                                    "range": [
                                                                        603,
                                                                        629
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "board",
                                                                            "range": [
                                                                                606,
                                                                                607
                                                                            ],
                                                                            "children": [],
                                                                            "content": ":\n"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "word",
                                                                            "range": [
                                                                                608,
                                                                                609
                                                                            ],
                                                                            "children": [],
                                                                            "content": "if exits_word"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "i",
                                                                            "range": [
                                                                                610,
                                                                                611
                                                                            ],
                                                                            "children": [],
                                                                            "content": "(\n"
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "j",
                                                                            "range": [
                                                                                612,
                                                                                613
                                                                            ],
                                                                            "children": [],
                                                                            "content": "board,"
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "0",
                                                                            "range": [
                                                                                614,
                                                                                615
                                                                            ],
                                                                            "children": [],
                                                                            "content": "word,"
                                                                        },
                                                                        {
                                                                            "type": "ObjectExpression",
                                                                            "name": "{}",
                                                                            "range": [
                                                                                616,
                                                                                627
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "CallExpression",
                                                                                    "name": "get_point_key",
                                                                                    "range": [
                                                                                        617,
                                                                                        626
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "len_board",
                                                                                            "range": [
                                                                                                619,
                                                                                                620
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": ",0"
                                                                                        },
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "len_board_column",
                                                                                            "range": [
                                                                                                621,
                                                                                                622
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": ",{"
                                                                                        },
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "i",
                                                                                            "range": [
                                                                                                623,
                                                                                                624
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "get_point_key("
                                                                                        },
                                                                                        {
                                                                                            "type": "Identifier",
                                                                                            "name": "j",
                                                                                            "range": [
                                                                                                625,
                                                                                                626
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "len_board,"
                                                                                        }
                                                                                    ],
                                                                                    "content": ",j,0,{get_point_key(len_board,"
                                                                                }
                                                                            ],
                                                                            "content": "i,j,0,{get_point_key(len_board,len_board_column"
                                                                        }
                                                                    ],
                                                                    "content": "(len_board_column):\nif exits_word(\nboard,word,i,j,0,{get_point_key(len_board,len_board_column,i"
                                                                },
                                                                {
                                                                    "type": "BlockStatement",
                                                                    "name": "block",
                                                                    "range": [
                                                                        630,
                                                                        634
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "ReturnStatement",
                                                                            "name": "return",
                                                                            "range": [
                                                                                632,
                                                                                633
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Literal",
                                                                                    "name": "True",
                                                                                    "range": [
                                                                                        633,
                                                                                        634
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "}\n"
                                                                                }
                                                                            ],
                                                                            "content": ")}"
                                                                        }
                                                                    ],
                                                                    "content": ",j)}\n"
                                                                }
                                                            ],
                                                            "content": "range(len_board_column):\nif exits_word(\nboard,word,i,j,0,{get_point_key(len_board,len_board_column,i,j)}\n"
                                                        }
                                                    ],
                                                    "content": "j in range(len_board_column):\nif exits_word(\nboard,word,i,j,0,{get_point_key(len_board,len_board_column,i,j)}\n"
                                                }
                                            ],
                                            "content": "range(len_board):\nfor j in range(len_board_column):\nif exits_word(\nboard,word,i,j,0,{get_point_key(len_board,len_board_column,i,j)}\n"
                                        }
                                    ],
                                    "content": "i in range(len_board):\nfor j in range(len_board_column):\nif exits_word(\nboard,word,i,j,0,{get_point_key(len_board,len_board_column,i,j)}\n"
                                }
                            ],
                            "content": "board[0])\nfor i in range(len_board):\nfor j in range(len_board_column):\nif exits_word(\nboard,word,i,j,0,{get_point_key(len_board,len_board_column,i,j)}\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                636,
                                637
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "False",
                                    "range": [
                                        637,
                                        638
                                    ],
                                    "children": [],
                                    "content": "\nreturn"
                                }
                            ],
                            "content": ":\n"
                        }
                    ],
                    "content": ":str)->bool:\n\"\"\" \\n     >>> word_exists([[\" A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED \") \\n     True \\n     >>> word_exists([[\" A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE \") \\n     True \\n     >>> word_exists([[\" A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB \") \\n     False \\n     >>> word_exists([[\" A\"]], \"A \") \\n     True \\n     >>> word_exists([[\" B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB \") \\n     False \\n     >>> word_exists([[\" A \"]], 123) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The word parameter should be a string of length greater than 0. \\n     >>> word_exists([[\" A\"]], \"\") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The word parameter should be a string of length greater than 0. \\n     >>> word_exists([[]], \" AB \") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The board should be a non empty matrix of single chars strings. \\n     >>> word_exists([], \" AB \") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The board should be a non empty matrix of single chars strings. \\n     >>> word_exists([[\" A\"], [21]], \"AB \") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The board should be a non empty matrix of single chars strings. \\n     \"\"\"\n\n#Validate board\nboard_error_message=(\n\"The board should be a non empty matrix of single chars strings.\"\n)\n\nlen_board=len(board)\nif not isinstance(board,list)or len(board)==0:\nraise ValueError(board_error_message)\n\nfor row in board:\nif not isinstance(row,list)or len(row)==0:\nraise ValueError(board_error_message)\n\nfor item in row:\nif not isinstance(item,str)or len(item)!=1:\nraise ValueError(board_error_message)\n\n#Validate word\nif not isinstance(word,str)or len(word)==0:\nraise ValueError(\n\"The word parameter should be a string of length greater than 0.\"\n)\n\nlen_board_column=len(board[0])\nfor i in range(len_board):\nfor j in range(len_board_column):\nif exits_word(\nboard,word,i,j,0,{get_point_key(len_board,len_board_column,i,j)}\n):\nreturn"
                }
            ],
            "content": "\nreturn False\n\n\ndef word_exists(board:list[list[str]],word:str)->bool:\n\"\"\" \\n     >>> word_exists([[\" A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED \") \\n     True \\n     >>> word_exists([[\" A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE \") \\n     True \\n     >>> word_exists([[\" A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB \") \\n     False \\n     >>> word_exists([[\" A\"]], \"A \") \\n     True \\n     >>> word_exists([[\" B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB \") \\n     False \\n     >>> word_exists([[\" A \"]], 123) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The word parameter should be a string of length greater than 0. \\n     >>> word_exists([[\" A\"]], \"\") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The word parameter should be a string of length greater than 0. \\n     >>> word_exists([[]], \" AB \") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The board should be a non empty matrix of single chars strings. \\n     >>> word_exists([], \" AB \") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The board should be a non empty matrix of single chars strings. \\n     >>> word_exists([[\" A\"], [21]], \"AB \") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The board should be a non empty matrix of single chars strings. \\n     \"\"\"\n\n#Validate board\nboard_error_message=(\n\"The board should be a non empty matrix of single chars strings.\"\n)\n\nlen_board=len(board)\nif not isinstance(board,list)or len(board)==0:\nraise ValueError(board_error_message)\n\nfor row in board:\nif not isinstance(row,list)or len(row)==0:\nraise ValueError(board_error_message)\n\nfor item in row:\nif not isinstance(item,str)or len(item)!=1:\nraise ValueError(board_error_message)\n\n#Validate word\nif not isinstance(word,str)or len(word)==0:\nraise ValueError(\n\"The word parameter should be a string of length greater than 0.\"\n)\n\nlen_board_column=len(board[0])\nfor i in range(len_board):\nfor j in range(len_board_column):\nif exits_word(\nboard,word,i,j,0,{get_point_key(len_board,len_board_column,i,j)}\n):\nreturn"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                639,
                645
            ],
            "children": [
                {
                    "type": "BinaryExpression",
                    "name": "",
                    "range": [
                        640,
                        643
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "__name__",
                            "range": [
                                640,
                                640
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "Operator",
                            "name": "==",
                            "range": [
                                641,
                                642
                            ],
                            "children": [],
                            "content": "\nreturn"
                        },
                        {
                            "type": "Literal",
                            "name": "\"__main__\"",
                            "range": [
                                643,
                                643
                            ],
                            "children": [],
                            "content": "False"
                        }
                    ],
                    "content": "\n\nreturn False"
                }
            ],
            "content": "True\n\nreturn False\n\n"
        },
        {
            "type": "ImportStatement",
            "name": "doctest",
            "range": [
                646,
                648
            ],
            "children": [
                {
                    "type": "Module",
                    "name": "doctest",
                    "range": [
                        647,
                        647
                    ],
                    "children": [],
                    "content": "if"
                }
            ],
            "content": "\nif __name__"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                650,
                655
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "",
                    "range": [
                        650,
                        654
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "",
                            "range": [
                                650,
                                652
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "doctest",
                                    "range": [
                                        650,
                                        650
                                    ],
                                    "children": [],
                                    "content": "="
                                },
                                {
                                    "type": "Identifier",
                                    "name": "testmod",
                                    "range": [
                                        652,
                                        652
                                    ],
                                    "children": [],
                                    "content": ":"
                                }
                            ],
                            "content": "=\"__main__\":"
                        }
                    ],
                    "content": "=\"__main__\":\nimport"
                }
            ],
            "content": "=\"__main__\":\nimport doctest"
        }
    ],
    "content": "\"\"\" \\n Author  : Alexander Pantyukhin \\n Date    : November 24, 2022 \\n  \\n Task: \\n Given an m x n grid of characters board and a string word, \\n return true if word exists in the grid. \\n  \\n The word can be constructed from letters of sequentially adjacent cells, \\n where adjacent cells are horizontally or vertically neighboring. \\n The same letter cell may not be used more than once. \\n  \\n Example: \\n  \\n Matrix: \\n --------- \\n |A|B|C|E| \\n |S|F|C|S| \\n |A|D|E|E| \\n --------- \\n  \\n Word: \\n \" ABCCED \" \\n  \\n Result: \\n True \\n  \\n Implementation notes: Use backtracking approach. \\n At each point, check all neighbors to try to find the next letter of the word. \\n  \\n leetcode: https://leetcode.com/problems/word-search/ \\n  \\n \"\"\"\n\n\ndef get_point_key(len_board:int,len_board_column:int,row:int,column:int)->int:\n\"\"\" \\n     Returns the hash key of matrix indexes. \\n  \\n     >>> get_point_key(10, 20, 1, 0) \\n     200 \\n     \"\"\"\n\nreturn len_board*len_board_column*row+column\n\n\ndef exits_word(\nboard:list[list[str]],\nword:str,\nrow:int,\ncolumn:int,\nword_index:int,\nvisited_points_set:set[int],\n)->bool:\n\"\"\" \\n     Return True if it's possible to search the word suffix \\n     starting from the word_index. \\n  \\n     >>> exits_word([[\" A\"]], \"B \", 0, 0, 0, set()) \\n     False \\n     \"\"\"\n\nif board[row][column]!=word[word_index]:\nreturn False\n\nif word_index==len(word)-1:\nreturn True\n\ntraverts_directions=[(0,1),(0,-1),(-1,0),(1,0)]\nlen_board=len(board)\nlen_board_column=len(board[0])\nfor direction in traverts_directions:\nnext_i=row+direction[0]\nnext_j=column+direction[1]\nif not(0<=next_i<len_board and0<=next_j<len_board_column):\ncontinue\n\nkey=get_point_key(len_board,len_board_column,next_i,next_j)\nif key in visited_points_set:\ncontinue\n\nvisited_points_set.add(key)\nif exits_word(board,word,next_i,next_j,word_index+1,visited_points_set):\nreturn True\n\nvisited_points_set.remove(key)\n\nreturn False\n\n\ndef word_exists(board:list[list[str]],word:str)->bool:\n\"\"\" \\n     >>> word_exists([[\" A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED \") \\n     True \\n     >>> word_exists([[\" A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE \") \\n     True \\n     >>> word_exists([[\" A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB \") \\n     False \\n     >>> word_exists([[\" A\"]], \"A \") \\n     True \\n     >>> word_exists([[\" B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB \") \\n     False \\n     >>> word_exists([[\" A \"]], 123) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The word parameter should be a string of length greater than 0. \\n     >>> word_exists([[\" A\"]], \"\") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The word parameter should be a string of length greater than 0. \\n     >>> word_exists([[]], \" AB \") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The board should be a non empty matrix of single chars strings. \\n     >>> word_exists([], \" AB \") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The board should be a non empty matrix of single chars strings. \\n     >>> word_exists([[\" A\"], [21]], \"AB \") \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: The board should be a non empty matrix of single chars strings. \\n     \"\"\"\n\n#Validate board\nboard_error_message=(\n\"The board should be a non empty matrix of single chars strings.\"\n)\n\nlen_board=len(board)\nif not isinstance(board,list)or len(board)==0:\nraise ValueError(board_error_message)\n\nfor row in board:\nif not isinstance(row,list)or len(row)==0:\nraise ValueError(board_error_message)\n\nfor item in row:\nif not isinstance(item,str)or len(item)!=1:\nraise ValueError(board_error_message)\n\n#Validate word\nif not isinstance(word,str)or len(word)==0:\nraise ValueError(\n\"The word parameter should be a string of length greater than 0.\"\n)\n\nlen_board_column=len(board[0])\nfor i in range(len_board):\nfor j in range(len_board_column):\nif exits_word(\nboard,word,i,j,0,{get_point_key(len_board,len_board_column,i,j)}\n):\nreturn True\n\nreturn False\n\n\nif __name__==\"__main__\":\nimport doctest\n"
}