{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        965
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                4
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "",
                    "range": [
                        0,
                        4
                    ],
                    "children": [
                        {
                            "type": "Module",
                            "name": "enum",
                            "range": [
                                1,
                                1
                            ],
                            "children": [],
                            "content": "enum"
                        },
                        {
                            "type": "ImportedItem",
                            "name": "Enum",
                            "range": [
                                3,
                                3
                            ],
                            "children": [],
                            "content": "Enum"
                        }
                    ],
                    "content": "from enum import Enum\n"
                }
            ],
            "content": "from enum import Enum\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                5,
                9
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "",
                    "range": [
                        5,
                        9
                    ],
                    "children": [
                        {
                            "type": "Module",
                            "name": "typing",
                            "range": [
                                6,
                                6
                            ],
                            "children": [],
                            "content": "typing"
                        },
                        {
                            "type": "ImportedItem",
                            "name": "Literal",
                            "range": [
                                8,
                                8
                            ],
                            "children": [],
                            "content": "Literal"
                        }
                    ],
                    "content": "from typing import Literal\n"
                }
            ],
            "content": "from typing import Literal\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                11,
                15
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "",
                    "range": [
                        11,
                        15
                    ],
                    "children": [
                        {
                            "type": "Module",
                            "name": "e2b_code_interpreter",
                            "range": [
                                12,
                                12
                            ],
                            "children": [],
                            "content": "e2b_code_interpreter"
                        },
                        {
                            "type": "ImportedItem",
                            "name": "Sandbox",
                            "range": [
                                14,
                                14
                            ],
                            "children": [],
                            "content": "Sandbox"
                        }
                    ],
                    "content": "from e2b_code_interpreter import Sandbox\n"
                }
            ],
            "content": "from e2b_code_interpreter import Sandbox\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                16,
                20
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "",
                    "range": [
                        16,
                        20
                    ],
                    "children": [
                        {
                            "type": "Module",
                            "name": "pydantic",
                            "range": [
                                17,
                                17
                            ],
                            "children": [],
                            "content": "pydantic"
                        },
                        {
                            "type": "ImportedItem",
                            "name": "SecretStr",
                            "range": [
                                19,
                                19
                            ],
                            "children": [],
                            "content": "SecretStr"
                        }
                    ],
                    "content": "from pydantic import SecretStr\n"
                }
            ],
            "content": "from pydantic import SecretStr\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                22,
                36
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "",
                    "range": [
                        22,
                        36
                    ],
                    "children": [
                        {
                            "type": "Module",
                            "name": "backend.data.block",
                            "range": [
                                23,
                                27
                            ],
                            "children": [],
                            "content": "backend.data.block"
                        },
                        {
                            "type": "ImportedItem",
                            "name": "Block",
                            "range": [
                                29,
                                29
                            ],
                            "children": [],
                            "content": "Block"
                        },
                        {
                            "type": "ImportedItem",
                            "name": "BlockCategory",
                            "range": [
                                31,
                                31
                            ],
                            "children": [],
                            "content": "BlockCategory"
                        },
                        {
                            "type": "ImportedItem",
                            "name": "BlockOutput",
                            "range": [
                                33,
                                33
                            ],
                            "children": [],
                            "content": "BlockOutput"
                        },
                        {
                            "type": "ImportedItem",
                            "name": "BlockSchema",
                            "range": [
                                35,
                                35
                            ],
                            "children": [],
                            "content": "BlockSchema"
                        }
                    ],
                    "content": "from backend.data.block import Block,BlockCategory,BlockOutput,BlockSchema\n"
                }
            ],
            "content": "from backend.data.block import Block,BlockCategory,BlockOutput,BlockSchema\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                37,
                59
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "",
                    "range": [
                        37,
                        59
                    ],
                    "children": [
                        {
                            "type": "Module",
                            "name": "backend.data.model",
                            "range": [
                                38,
                                42
                            ],
                            "children": [],
                            "content": "backend.data.model"
                        },
                        {
                            "type": "ImportedItem",
                            "name": "APIKeyCredentials",
                            "range": [
                                46,
                                46
                            ],
                            "children": [],
                            "content": "APIKeyCredentials"
                        },
                        {
                            "type": "ImportedItem",
                            "name": "CredentialsField",
                            "range": [
                                49,
                                49
                            ],
                            "children": [],
                            "content": "CredentialsField"
                        },
                        {
                            "type": "ImportedItem",
                            "name": "CredentialsMetaInput",
                            "range": [
                                52,
                                52
                            ],
                            "children": [],
                            "content": "CredentialsMetaInput"
                        },
                        {
                            "type": "ImportedItem",
                            "name": "SchemaField",
                            "range": [
                                55,
                                55
                            ],
                            "children": [],
                            "content": "SchemaField"
                        }
                    ],
                    "content": "from backend.data.model import(\nAPIKeyCredentials,\nCredentialsField,\nCredentialsMetaInput,\nSchemaField,\n)\n"
                }
            ],
            "content": "from backend.data.model import(\nAPIKeyCredentials,\nCredentialsField,\nCredentialsMetaInput,\nSchemaField,\n)\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                60,
                68
            ],
            "children": [
                {
                    "type": "FromImport",
                    "name": "",
                    "range": [
                        60,
                        68
                    ],
                    "children": [
                        {
                            "type": "Module",
                            "name": "backend.integrations.providers",
                            "range": [
                                61,
                                65
                            ],
                            "children": [],
                            "content": "backend.integrations.providers"
                        },
                        {
                            "type": "ImportedItem",
                            "name": "ProviderName",
                            "range": [
                                67,
                                67
                            ],
                            "children": [],
                            "content": "ProviderName"
                        }
                    ],
                    "content": "from backend.integrations.providers import ProviderName\n"
                }
            ],
            "content": "from backend.integrations.providers import ProviderName\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "TEST_CREDENTIALS",
            "range": [
                70,
                104
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        71,
                        103
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "APIKeyCredentials",
                            "range": [
                                72,
                                103
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        73,
                                        103
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "id",
                                            "range": [
                                                75,
                                                77
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"01234567-89ab-cdef-0123-456789abcdef\"",
                                                    "range": [
                                                        77,
                                                        77
                                                    ],
                                                    "children": [],
                                                    "content": "\"01234567-89ab-cdef-0123-456789abcdef\""
                                                }
                                            ],
                                            "content": "id=\"01234567-89ab-cdef-0123-456789abcdef\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "provider",
                                            "range": [
                                                80,
                                                82
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"e2b\"",
                                                    "range": [
                                                        82,
                                                        82
                                                    ],
                                                    "children": [],
                                                    "content": "\"e2b\""
                                                }
                                            ],
                                            "content": "provider=\"e2b\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "api_key",
                                            "range": [
                                                85,
                                                90
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "SecretStr",
                                                    "range": [
                                                        87,
                                                        90
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "\"mock-e2b-api-key\"",
                                                            "range": [
                                                                89,
                                                                89
                                                            ],
                                                            "children": [],
                                                            "content": "\"mock-e2b-api-key\""
                                                        }
                                                    ],
                                                    "content": "SecretStr(\"mock-e2b-api-key\")"
                                                }
                                            ],
                                            "content": "api_key=SecretStr(\"mock-e2b-api-key\")"
                                        },
                                        {
                                            "type": "Property",
                                            "name": "title",
                                            "range": [
                                                93,
                                                95
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"Mock E2B API key\"",
                                                    "range": [
                                                        95,
                                                        95
                                                    ],
                                                    "children": [],
                                                    "content": "\"Mock E2B API key\""
                                                }
                                            ],
                                            "content": "title=\"Mock E2B API key\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "expires_at",
                                            "range": [
                                                98,
                                                100
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "None",
                                                    "range": [
                                                        100,
                                                        100
                                                    ],
                                                    "children": [],
                                                    "content": "None"
                                                }
                                            ],
                                            "content": "expires_at=None"
                                        }
                                    ],
                                    "content": "(\nid=\"01234567-89ab-cdef-0123-456789abcdef\",\nprovider=\"e2b\",\napi_key=SecretStr(\"mock-e2b-api-key\"),\ntitle=\"Mock E2B API key\",\nexpires_at=None,\n)"
                                }
                            ],
                            "content": "APIKeyCredentials(\nid=\"01234567-89ab-cdef-0123-456789abcdef\",\nprovider=\"e2b\",\napi_key=SecretStr(\"mock-e2b-api-key\"),\ntitle=\"Mock E2B API key\",\nexpires_at=None,\n)"
                        }
                    ],
                    "content": "=APIKeyCredentials(\nid=\"01234567-89ab-cdef-0123-456789abcdef\",\nprovider=\"e2b\",\napi_key=SecretStr(\"mock-e2b-api-key\"),\ntitle=\"Mock E2B API key\",\nexpires_at=None,\n)"
                }
            ],
            "content": "TEST_CREDENTIALS=APIKeyCredentials(\nid=\"01234567-89ab-cdef-0123-456789abcdef\",\nprovider=\"e2b\",\napi_key=SecretStr(\"mock-e2b-api-key\"),\ntitle=\"Mock E2B API key\",\nexpires_at=None,\n)\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "TEST_CREDENTIALS_INPUT",
            "range": [
                105,
                137
            ],
            "children": [
                {
                    "type": "ObjectExpression",
                    "name": "",
                    "range": [
                        107,
                        137
                    ],
                    "children": [
                        {
                            "type": "Property",
                            "name": "provider",
                            "range": [
                                109,
                                113
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"provider\"",
                                    "range": [
                                        109,
                                        109
                                    ],
                                    "children": [],
                                    "content": "\"provider\""
                                },
                                {
                                    "type": "Identifier",
                                    "name": "TEST_CREDENTIALS",
                                    "range": [
                                        111,
                                        111
                                    ],
                                    "children": [],
                                    "content": "TEST_CREDENTIALS"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "provider",
                                    "range": [
                                        113,
                                        113
                                    ],
                                    "children": [],
                                    "content": "provider"
                                }
                            ],
                            "content": "\"provider\":TEST_CREDENTIALS.provider"
                        },
                        {
                            "type": "Property",
                            "name": "id",
                            "range": [
                                116,
                                120
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"id\"",
                                    "range": [
                                        116,
                                        116
                                    ],
                                    "children": [],
                                    "content": "\"id\""
                                },
                                {
                                    "type": "Identifier",
                                    "name": "TEST_CREDENTIALS",
                                    "range": [
                                        118,
                                        118
                                    ],
                                    "children": [],
                                    "content": "TEST_CREDENTIALS"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "id",
                                    "range": [
                                        120,
                                        120
                                    ],
                                    "children": [],
                                    "content": "id"
                                }
                            ],
                            "content": "\"id\":TEST_CREDENTIALS.id"
                        },
                        {
                            "type": "Property",
                            "name": "type",
                            "range": [
                                123,
                                127
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"type\"",
                                    "range": [
                                        123,
                                        123
                                    ],
                                    "children": [],
                                    "content": "\"type\""
                                },
                                {
                                    "type": "Identifier",
                                    "name": "TEST_CREDENTIALS",
                                    "range": [
                                        125,
                                        125
                                    ],
                                    "children": [],
                                    "content": "TEST_CREDENTIALS"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "type",
                                    "range": [
                                        127,
                                        127
                                    ],
                                    "children": [],
                                    "content": "type"
                                }
                            ],
                            "content": "\"type\":TEST_CREDENTIALS.type"
                        },
                        {
                            "type": "Property",
                            "name": "title",
                            "range": [
                                130,
                                134
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"title\"",
                                    "range": [
                                        130,
                                        130
                                    ],
                                    "children": [],
                                    "content": "\"title\""
                                },
                                {
                                    "type": "Identifier",
                                    "name": "TEST_CREDENTIALS",
                                    "range": [
                                        132,
                                        132
                                    ],
                                    "children": [],
                                    "content": "TEST_CREDENTIALS"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "type",
                                    "range": [
                                        134,
                                        134
                                    ],
                                    "children": [],
                                    "content": "type"
                                }
                            ],
                            "content": "\"title\":TEST_CREDENTIALS.type"
                        }
                    ],
                    "content": "{\n\"provider\":TEST_CREDENTIALS.provider,\n\"id\":TEST_CREDENTIALS.id,\n\"type\":TEST_CREDENTIALS.type,\n\"title\":TEST_CREDENTIALS.type,\n}"
                }
            ],
            "content": "TEST_CREDENTIALS_INPUT={\n\"provider\":TEST_CREDENTIALS.provider,\n\"id\":TEST_CREDENTIALS.id,\n\"type\":TEST_CREDENTIALS.type,\n\"title\":TEST_CREDENTIALS.type,\n}"
        },
        {
            "type": "ClassDecl",
            "name": "CodeExecutionBlock",
            "range": [
                167,
                204
            ],
            "children": [
                {
                    "type": "Comment",
                    "name": "",
                    "range": [
                        174,
                        184
                    ],
                    "children": [],
                    "content": "):\n#TODO:Add support to upload and"
                },
                {
                    "type": "Comment",
                    "name": "",
                    "range": [
                        185,
                        204
                    ],
                    "children": [],
                    "content": "download files\n#Currently,You can customized the CPU and Memory,only by creating a pre customized"
                }
            ],
            "content": "\n\n\nclass CodeExecutionBlock(Block):\n#TODO:Add support to upload and download files\n#Currently,You can customized the CPU and Memory,only by creating a pre customized"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                205,
                240
            ],
            "children": [
                {
                    "type": "FieldDecl",
                    "name": "credentials",
                    "range": [
                        212,
                        239
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "CredentialsMetaInput",
                            "range": [
                                214,
                                229
                            ],
                            "children": [],
                            "content": "\ncredentials:CredentialsMetaInput[\nLiteral[ProviderName.E2B],Literal[\"api_key\""
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                230,
                                239
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "CredentialsField",
                                    "range": [
                                        231,
                                        239
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                234,
                                                236
                                            ],
                                            "children": [],
                                            "content": "CredentialsField(\n"
                                        }
                                    ],
                                    "content": "\n]=CredentialsField(\ndescription=\"Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs\""
                                }
                            ],
                            "content": "]\n]=CredentialsField(\ndescription=\"Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs\""
                        }
                    ],
                    "content": "):\ncredentials:CredentialsMetaInput[\nLiteral[ProviderName.E2B],Literal[\"api_key\"]\n]=CredentialsField(\ndescription=\"Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs\""
                }
            ],
            "content": "sandbox template\nclass Input(BlockSchema):\ncredentials:CredentialsMetaInput[\nLiteral[ProviderName.E2B],Literal[\"api_key\"]\n]=CredentialsField(\ndescription=\"Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs\","
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                404,
                456
            ],
            "children": [
                {
                    "type": "FieldDecl",
                    "name": "response",
                    "range": [
                        411,
                        420
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                413,
                                414
                            ],
                            "children": [],
                            "content": "\nresponse"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                415,
                                420
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SchemaField",
                                    "range": [
                                        416,
                                        420
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                417,
                                                419
                                            ],
                                            "children": [],
                                            "content": "=SchemaField("
                                        }
                                    ],
                                    "content": "str=SchemaField(description"
                                }
                            ],
                            "content": ":str=SchemaField(description"
                        }
                    ],
                    "content": "):\nresponse:str=SchemaField(description"
                },
                {
                    "type": "FieldDecl",
                    "name": "stdout_logs",
                    "range": [
                        422,
                        433
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                424,
                                425
                            ],
                            "children": [],
                            "content": "\nstdout_logs"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                426,
                                433
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SchemaField",
                                    "range": [
                                        427,
                                        433
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                429,
                                                431
                                            ],
                                            "children": [],
                                            "content": "SchemaField(\n"
                                        }
                                    ],
                                    "content": "str=SchemaField(\ndescription="
                                }
                            ],
                            "content": ":str=SchemaField(\ndescription="
                        }
                    ],
                    "content": "\"Response from code execution\")\nstdout_logs:str=SchemaField(\ndescription="
                },
                {
                    "type": "FieldDecl",
                    "name": "stderr_logs",
                    "range": [
                        435,
                        444
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                437,
                                438
                            ],
                            "children": [],
                            "content": "\nstderr_logs"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                439,
                                444
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SchemaField",
                                    "range": [
                                        440,
                                        444
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                441,
                                                443
                                            ],
                                            "children": [],
                                            "content": "=SchemaField("
                                        }
                                    ],
                                    "content": "str=SchemaField(description"
                                }
                            ],
                            "content": ":str=SchemaField(description"
                        }
                    ],
                    "content": "\n)\nstderr_logs:str=SchemaField(description"
                },
                {
                    "type": "FieldDecl",
                    "name": "error",
                    "range": [
                        446,
                        455
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                448,
                                449
                            ],
                            "children": [],
                            "content": "\nerror"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                450,
                                455
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "SchemaField",
                                    "range": [
                                        451,
                                        455
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                452,
                                                454
                                            ],
                                            "children": [],
                                            "content": "=SchemaField("
                                        }
                                    ],
                                    "content": "str=SchemaField(description"
                                }
                            ],
                            "content": ":str=SchemaField(description"
                        }
                    ],
                    "content": "\"Standard error logs from execution\")\nerror:str=SchemaField(description"
                }
            ],
            "content": ")\n\nclass Output(BlockSchema):\nresponse:str=SchemaField(description=\"Response from code execution\")\nstdout_logs:str=SchemaField(\ndescription=\"Standard output logs from execution\"\n)\nstderr_logs:str=SchemaField(description=\"Standard error logs from execution\")\nerror:str=SchemaField(description="
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                458,
                610
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "super",
                    "range": [
                        465,
                        469
                    ],
                    "children": [],
                    "content": "):\nsuper("
                },
                {
                    "type": "CallExpression",
                    "name": "__init__",
                    "range": [
                        469,
                        609
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "id",
                            "range": [
                                472,
                                474
                            ],
                            "children": [],
                            "content": "__init__(\n"
                        },
                        {
                            "type": "Argument",
                            "name": "description",
                            "range": [
                                477,
                                479
                            ],
                            "children": [],
                            "content": "\"0b02b072-abe7-11ef-8372-fb5d162dd712\",\n"
                        },
                        {
                            "type": "Argument",
                            "name": "categories",
                            "range": [
                                482,
                                488
                            ],
                            "children": [],
                            "content": "\"Executes code in an isolated sandbox environment with internet access.\",\ncategories={BlockCategory"
                        },
                        {
                            "type": "Argument",
                            "name": "input_schema",
                            "range": [
                                491,
                                496
                            ],
                            "children": [],
                            "content": "},\ninput_schema=CodeExecutionBlock"
                        },
                        {
                            "type": "Argument",
                            "name": "output_schema",
                            "range": [
                                498,
                                503
                            ],
                            "children": [],
                            "content": "Input,\noutput_schema=CodeExecutionBlock"
                        },
                        {
                            "type": "Argument",
                            "name": "test_credentials",
                            "range": [
                                505,
                                507
                            ],
                            "children": [],
                            "content": "Output,\n"
                        },
                        {
                            "type": "Argument",
                            "name": "test_input",
                            "range": [
                                510,
                                549
                            ],
                            "children": [],
                            "content": "TEST_CREDENTIALS,\ntest_input={\n\"credentials\":TEST_CREDENTIALS_INPUT,\n\"code\":\"print('Hello World')\",\n\"language\":ProgrammingLanguage.PYTHON.value,\n\"setup_commands\":[],\n\"timeout\":300,\n\"template_id\":\"\""
                        },
                        {
                            "type": "Argument",
                            "name": "test_output",
                            "range": [
                                552,
                                570
                            ],
                            "children": [],
                            "content": "},\ntest_output=[\n(\"response\",\"Hello World\"),\n(\"stdout_logs\",\"Hello World\\n\")"
                        },
                        {
                            "type": "Argument",
                            "name": "test_mock",
                            "range": [
                                573,
                                606
                            ],
                            "children": [],
                            "content": "],\ntest_mock={\n\"execute_code\":lambda code,language,setup_commands,timeout,api_key,template_id:(\n\"Hello World\",\n\"Hello World\\n\",\n\"\",\n)"
                        }
                    ],
                    "content": "().__init__(\nid=\"0b02b072-abe7-11ef-8372-fb5d162dd712\",\ndescription=\"Executes code in an isolated sandbox environment with internet access.\",\ncategories={BlockCategory.DEVELOPER_TOOLS},\ninput_schema=CodeExecutionBlock.Input,\noutput_schema=CodeExecutionBlock.Output,\ntest_credentials=TEST_CREDENTIALS,\ntest_input={\n\"credentials\":TEST_CREDENTIALS_INPUT,\n\"code\":\"print('Hello World')\",\n\"language\":ProgrammingLanguage.PYTHON.value,\n\"setup_commands\":[],\n\"timeout\":300,\n\"template_id\":\"\",\n},\ntest_output=[\n(\"response\",\"Hello World\"),\n(\"stdout_logs\",\"Hello World\\n\"),\n],\ntest_mock={\n\"execute_code\":lambda code,language,setup_commands,timeout,api_key,template_id:(\n\"Hello World\",\n\"Hello World\\n\",\n\"\",\n),\n}"
                }
            ],
            "content": ")\n\ndef __init__(self):\nsuper().__init__(\nid=\"0b02b072-abe7-11ef-8372-fb5d162dd712\",\ndescription=\"Executes code in an isolated sandbox environment with internet access.\",\ncategories={BlockCategory.DEVELOPER_TOOLS},\ninput_schema=CodeExecutionBlock.Input,\noutput_schema=CodeExecutionBlock.Output,\ntest_credentials=TEST_CREDENTIALS,\ntest_input={\n\"credentials\":TEST_CREDENTIALS_INPUT,\n\"code\":\"print('Hello World')\",\n\"language\":ProgrammingLanguage.PYTHON.value,\n\"setup_commands\":[],\n\"timeout\":300,\n\"template_id\":\"\",\n},\ntest_output=[\n(\"response\",\"Hello World\"),\n(\"stdout_logs\",\"Hello World\\n\"),\n],\ntest_mock={\n\"execute_code\":lambda code,language,setup_commands,timeout,api_key,template_id:(\n\"Hello World\",\n\"Hello World\\n\",\n\"\",\n),\n},"
        },
        {
            "type": "FunctionDecl",
            "name": "execute_code",
            "range": [
                612,
                845
            ],
            "children": [
                {
                    "type": "TryStatement",
                    "name": "",
                    "range": [
                        655,
                        845
                    ],
                    "children": [
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                657,
                                836
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "sandbox",
                                    "range": [
                                        658,
                                        660
                                    ],
                                    "children": [],
                                    "content": "try:\n"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        662,
                                        700
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                665,
                                                684
                                            ],
                                            "children": [
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "=",
                                                    "range": [
                                                        666,
                                                        683
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "Sandbox",
                                                            "range": [
                                                                668,
                                                                683
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "template",
                                                                    "range": [
                                                                        671,
                                                                        673
                                                                    ],
                                                                    "children": [],
                                                                    "content": "Sandbox(\n"
                                                                },
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "api_key",
                                                                    "range": [
                                                                        675,
                                                                        677
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=template_id,"
                                                                },
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "timeout",
                                                                    "range": [
                                                                        679,
                                                                        681
                                                                    ],
                                                                    "children": [],
                                                                    "content": "=api_key,"
                                                                }
                                                            ],
                                                            "content": "\nsandbox=Sandbox(\ntemplate=template_id,api_key=api_key,timeout="
                                                        }
                                                    ],
                                                    "content": "template_id:\nsandbox=Sandbox(\ntemplate=template_id,api_key=api_key,timeout="
                                                }
                                            ],
                                            "content": "if template_id:\nsandbox=Sandbox(\ntemplate=template_id,api_key=api_key,timeout=timeout"
                                        },
                                        {
                                            "type": "ElseStatement",
                                            "name": "",
                                            "range": [
                                                685,
                                                700
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "",
                                                    "range": [
                                                        687,
                                                        699
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AssignmentExpression",
                                                            "name": "=",
                                                            "range": [
                                                                688,
                                                                699
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "Sandbox",
                                                                    "range": [
                                                                        690,
                                                                        699
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "api_key",
                                                                            "range": [
                                                                                692,
                                                                                694
                                                                            ],
                                                                            "children": [],
                                                                            "content": "=Sandbox("
                                                                        },
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "timeout",
                                                                            "range": [
                                                                                696,
                                                                                698
                                                                            ],
                                                                            "children": [],
                                                                            "content": "=api_key,"
                                                                        }
                                                                    ],
                                                                    "content": "\nsandbox=Sandbox(api_key=api_key,timeout"
                                                                }
                                                            ],
                                                            "content": "else:\nsandbox=Sandbox(api_key=api_key,timeout"
                                                        }
                                                    ],
                                                    "content": "\nelse:\nsandbox=Sandbox(api_key=api_key,timeout"
                                                }
                                            ],
                                            "content": "\n)\nelse:\nsandbox=Sandbox(api_key=api_key,timeout="
                                        }
                                    ],
                                    "content": "=None\nif template_id:\nsandbox=Sandbox(\ntemplate=template_id,api_key=api_key,timeout=timeout\n)\nelse:\nsandbox=Sandbox(api_key=api_key,timeout="
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        702,
                                        712
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                705,
                                                711
                                            ],
                                            "children": [
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "",
                                                    "range": [
                                                        707,
                                                        711
                                                    ],
                                                    "children": [],
                                                    "content": "sandbox:\nraise Exception"
                                                }
                                            ],
                                            "content": "if not sandbox:\nraise Exception"
                                        }
                                    ],
                                    "content": ")\n\nif not sandbox:\nraise Exception("
                                },
                                {
                                    "type": "Comment",
                                    "name": "",
                                    "range": [
                                        714,
                                        718
                                    ],
                                    "children": [],
                                    "content": ")\n\n#Running"
                                },
                                {
                                    "type": "ForStatement",
                                    "name": "",
                                    "range": [
                                        719,
                                        733
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                723,
                                                733
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "",
                                                    "range": [
                                                        725,
                                                        733
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "run",
                                                            "range": [
                                                                729,
                                                                733
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "cmd",
                                                                    "range": [
                                                                        731,
                                                                        732
                                                                    ],
                                                                    "children": [],
                                                                    "content": ".run"
                                                                }
                                                            ],
                                                            "content": ".commands.run("
                                                        }
                                                    ],
                                                    "content": "setup_commands:\nsandbox.commands.run("
                                                }
                                            ],
                                            "content": "cmd in setup_commands:\nsandbox.commands.run("
                                        }
                                    ],
                                    "content": "setup commands\nfor cmd in setup_commands:\nsandbox.commands.run("
                                },
                                {
                                    "type": "Comment",
                                    "name": "",
                                    "range": [
                                        735,
                                        739
                                    ],
                                    "children": [],
                                    "content": ")\n\n#Executing"
                                },
                                {
                                    "type": "VariableDecl",
                                    "name": "execution",
                                    "range": [
                                        740,
                                        742
                                    ],
                                    "children": [],
                                    "content": "the code\n"
                                },
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        741,
                                        778
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "run_code",
                                            "range": [
                                                744,
                                                778
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "code",
                                                    "range": [
                                                        747,
                                                        748
                                                    ],
                                                    "children": [],
                                                    "content": "run_code("
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "language",
                                                    "range": [
                                                        750,
                                                        755
                                                    ],
                                                    "children": [],
                                                    "content": "code,\nlanguage=language"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "on_error",
                                                    "range": [
                                                        757,
                                                        777
                                                    ],
                                                    "children": [],
                                                    "content": "value,\non_error=lambda e:sandbox.kill(),#Kill the sandbox if there is"
                                                }
                                            ],
                                            "content": "=sandbox.run_code(\ncode,\nlanguage=language.value,\non_error=lambda e:sandbox.kill(),#Kill the sandbox if there is an"
                                        }
                                    ],
                                    "content": "code\nexecution=sandbox.run_code(\ncode,\nlanguage=language.value,\non_error=lambda e:sandbox.kill(),#Kill the sandbox if there is an"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        781,
                                        794
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                785,
                                                793
                                            ],
                                            "children": [
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "",
                                                    "range": [
                                                        787,
                                                        793
                                                    ],
                                                    "children": [],
                                                    "content": "error:\nraise Exception(execution"
                                                }
                                            ],
                                            "content": "execution.error:\nraise Exception(execution"
                                        }
                                    ],
                                    "content": ")\n\nif execution.error:\nraise Exception(execution."
                                },
                                {
                                    "type": "VariableDecl",
                                    "name": "response",
                                    "range": [
                                        796,
                                        798
                                    ],
                                    "children": [],
                                    "content": ")\n\n"
                                },
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        797,
                                        801
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "text",
                                            "range": [
                                                799,
                                                801
                                            ],
                                            "children": [],
                                            "content": "response=execution"
                                        }
                                    ],
                                    "content": "\n\nresponse=execution"
                                },
                                {
                                    "type": "VariableDecl",
                                    "name": "stdout_logs",
                                    "range": [
                                        802,
                                        804
                                    ],
                                    "children": [],
                                    "content": ".text\n"
                                },
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        803,
                                        814
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "join",
                                            "range": [
                                                806,
                                                814
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "stdout",
                                                    "range": [
                                                        812,
                                                        813
                                                    ],
                                                    "children": [],
                                                    "content": ".logs"
                                                }
                                            ],
                                            "content": "=\"\".join(execution.logs."
                                        }
                                    ],
                                    "content": "text\nstdout_logs=\"\".join(execution.logs."
                                },
                                {
                                    "type": "VariableDecl",
                                    "name": "stderr_logs",
                                    "range": [
                                        815,
                                        817
                                    ],
                                    "children": [],
                                    "content": "stdout)\n"
                                },
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        816,
                                        827
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "join",
                                            "range": [
                                                819,
                                                827
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "stderr",
                                                    "range": [
                                                        825,
                                                        826
                                                    ],
                                                    "children": [],
                                                    "content": ".logs"
                                                }
                                            ],
                                            "content": "=\"\".join(execution.logs."
                                        }
                                    ],
                                    "content": ")\nstderr_logs=\"\".join(execution.logs."
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "",
                                    "range": [
                                        829,
                                        835
                                    ],
                                    "children": [],
                                    "content": ")\n\nreturn response,stdout_logs"
                                }
                            ],
                            "content": "\ntry:\nsandbox=None\nif template_id:\nsandbox=Sandbox(\ntemplate=template_id,api_key=api_key,timeout=timeout\n)\nelse:\nsandbox=Sandbox(api_key=api_key,timeout=timeout)\n\nif not sandbox:\nraise Exception(\"Sandbox not created\")\n\n#Running setup commands\nfor cmd in setup_commands:\nsandbox.commands.run(cmd)\n\n#Executing the code\nexecution=sandbox.run_code(\ncode,\nlanguage=language.value,\non_error=lambda e:sandbox.kill(),#Kill the sandbox if there is an error\n)\n\nif execution.error:\nraise Exception(execution.error)\n\nresponse=execution.text\nstdout_logs=\"\".join(execution.logs.stdout)\nstderr_logs=\"\".join(execution.logs.stderr)\n\nreturn response,stdout_logs,"
                        },
                        {
                            "type": "CatchClause",
                            "name": "",
                            "range": [
                                837,
                                845
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        841,
                                        845
                                    ],
                                    "children": [
                                        {
                                            "type": "ThrowStatement",
                                            "name": "",
                                            "range": [
                                                843,
                                                845
                                            ],
                                            "children": [],
                                            "content": "e:\n"
                                        }
                                    ],
                                    "content": "Exception as e:\n"
                                }
                            ],
                            "content": "stderr_logs\n\nexcept Exception as e:\n"
                        }
                    ],
                    "content": "):\ntry:\nsandbox=None\nif template_id:\nsandbox=Sandbox(\ntemplate=template_id,api_key=api_key,timeout=timeout\n)\nelse:\nsandbox=Sandbox(api_key=api_key,timeout=timeout)\n\nif not sandbox:\nraise Exception(\"Sandbox not created\")\n\n#Running setup commands\nfor cmd in setup_commands:\nsandbox.commands.run(cmd)\n\n#Executing the code\nexecution=sandbox.run_code(\ncode,\nlanguage=language.value,\non_error=lambda e:sandbox.kill(),#Kill the sandbox if there is an error\n)\n\nif execution.error:\nraise Exception(execution.error)\n\nresponse=execution.text\nstdout_logs=\"\".join(execution.logs.stdout)\nstderr_logs=\"\".join(execution.logs.stderr)\n\nreturn response,stdout_logs,stderr_logs\n\nexcept Exception as e:\n"
                }
            ],
            "content": ")\n\ndef execute_code(\nself,\ncode:str,\nlanguage:ProgrammingLanguage,\nsetup_commands:list[str],\ntimeout:int,\napi_key:str,\ntemplate_id:str,\n):\ntry:\nsandbox=None\nif template_id:\nsandbox=Sandbox(\ntemplate=template_id,api_key=api_key,timeout=timeout\n)\nelse:\nsandbox=Sandbox(api_key=api_key,timeout=timeout)\n\nif not sandbox:\nraise Exception(\"Sandbox not created\")\n\n#Running setup commands\nfor cmd in setup_commands:\nsandbox.commands.run(cmd)\n\n#Executing the code\nexecution=sandbox.run_code(\ncode,\nlanguage=language.value,\non_error=lambda e:sandbox.kill(),#Kill the sandbox if there is an error\n)\n\nif execution.error:\nraise Exception(execution.error)\n\nresponse=execution.text\nstdout_logs=\"\".join(execution.logs.stdout)\nstderr_logs=\"\".join(execution.logs.stderr)\n\nreturn response,stdout_logs,stderr_logs\n\nexcept Exception as e:\n"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                847,
                965
            ],
            "children": [
                {
                    "type": "TryStatement",
                    "name": "",
                    "range": [
                        873,
                        965
                    ],
                    "children": [
                        {
                            "type": "BlockStatement",
                            "name": "",
                            "range": [
                                875,
                                951
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "response",
                                    "range": [
                                        876,
                                        878
                                    ],
                                    "children": [],
                                    "content": "try:\n"
                                },
                                {
                                    "type": "VariableDecl",
                                    "name": "stdout_logs",
                                    "range": [
                                        879,
                                        881
                                    ],
                                    "children": [],
                                    "content": "response,stdout_logs"
                                },
                                {
                                    "type": "VariableDecl",
                                    "name": "stderr_logs",
                                    "range": [
                                        880,
                                        882
                                    ],
                                    "children": [],
                                    "content": ",stdout_logs,"
                                },
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        881,
                                        921
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "execute_code",
                                            "range": [
                                                884,
                                                921
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "code",
                                                    "range": [
                                                        887,
                                                        890
                                                    ],
                                                    "children": [],
                                                    "content": "execute_code(\ninput_data"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "language",
                                                    "range": [
                                                        892,
                                                        895
                                                    ],
                                                    "children": [],
                                                    "content": "code,\ninput_data"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "setup_commands",
                                                    "range": [
                                                        897,
                                                        900
                                                    ],
                                                    "children": [],
                                                    "content": "language,\ninput_data"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "timeout",
                                                    "range": [
                                                        902,
                                                        905
                                                    ],
                                                    "children": [],
                                                    "content": "setup_commands,\ninput_data"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "api_key",
                                                    "range": [
                                                        907,
                                                        914
                                                    ],
                                                    "children": [],
                                                    "content": "timeout,\ncredentials.api_key.get_secret_value"
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "template_id",
                                                    "range": [
                                                        916,
                                                        919
                                                    ],
                                                    "children": [],
                                                    "content": "),\ninput_data"
                                                }
                                            ],
                                            "content": "=self.execute_code(\ninput_data.code,\ninput_data.language,\ninput_data.setup_commands,\ninput_data.timeout,\ncredentials.api_key.get_secret_value(),\ninput_data.template_id"
                                        }
                                    ],
                                    "content": "stdout_logs,stderr_logs=self.execute_code(\ninput_data.code,\ninput_data.language,\ninput_data.setup_commands,\ninput_data.timeout,\ncredentials.api_key.get_secret_value(),\ninput_data.template_id"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        924,
                                        932
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                927,
                                                932
                                            ],
                                            "children": [
                                                {
                                                    "type": "YieldExpression",
                                                    "name": "",
                                                    "range": [
                                                        928,
                                                        932
                                                    ],
                                                    "children": [],
                                                    "content": "response:\nyield \"response\""
                                                }
                                            ],
                                            "content": "if response:\nyield \"response\""
                                        }
                                    ],
                                    "content": ")\n\nif response:\nyield \"response\""
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        933,
                                        941
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                936,
                                                941
                                            ],
                                            "children": [
                                                {
                                                    "type": "YieldExpression",
                                                    "name": "",
                                                    "range": [
                                                        937,
                                                        941
                                                    ],
                                                    "children": [],
                                                    "content": "stdout_logs:\nyield \"stdout_logs\""
                                                }
                                            ],
                                            "content": "if stdout_logs:\nyield \"stdout_logs\""
                                        }
                                    ],
                                    "content": ",response\nif stdout_logs:\nyield \"stdout_logs\""
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        942,
                                        950
                                    ],
                                    "children": [
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                945,
                                                950
                                            ],
                                            "children": [
                                                {
                                                    "type": "YieldExpression",
                                                    "name": "",
                                                    "range": [
                                                        946,
                                                        950
                                                    ],
                                                    "children": [],
                                                    "content": "stderr_logs:\nyield \"stderr_logs\""
                                                }
                                            ],
                                            "content": "if stderr_logs:\nyield \"stderr_logs\""
                                        }
                                    ],
                                    "content": ",stdout_logs\nif stderr_logs:\nyield \"stderr_logs\""
                                }
                            ],
                            "content": "\ntry:\nresponse,stdout_logs,stderr_logs=self.execute_code(\ninput_data.code,\ninput_data.language,\ninput_data.setup_commands,\ninput_data.timeout,\ncredentials.api_key.get_secret_value(),\ninput_data.template_id,\n)\n\nif response:\nyield \"response\",response\nif stdout_logs:\nyield \"stdout_logs\",stdout_logs\nif stderr_logs:\nyield \"stderr_logs\","
                        },
                        {
                            "type": "CatchClause",
                            "name": "",
                            "range": [
                                952,
                                965
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        955,
                                        965
                                    ],
                                    "children": [
                                        {
                                            "type": "YieldExpression",
                                            "name": "",
                                            "range": [
                                                957,
                                                964
                                            ],
                                            "children": [],
                                            "content": "e:\nyield \"error\",str("
                                        }
                                    ],
                                    "content": "Exception as e:\nyield \"error\",str(e"
                                }
                            ],
                            "content": "stderr_logs\nexcept Exception as e:\nyield \"error\",str(e"
                        }
                    ],
                    "content": "BlockOutput:\ntry:\nresponse,stdout_logs,stderr_logs=self.execute_code(\ninput_data.code,\ninput_data.language,\ninput_data.setup_commands,\ninput_data.timeout,\ncredentials.api_key.get_secret_value(),\ninput_data.template_id,\n)\n\nif response:\nyield \"response\",response\nif stdout_logs:\nyield \"stdout_logs\",stdout_logs\nif stderr_logs:\nyield \"stderr_logs\",stderr_logs\nexcept Exception as e:\nyield \"error\",str(e"
                }
            ],
            "content": "e\n\ndef run(\nself,input_data:Input,*,credentials:APIKeyCredentials,**kwargs\n)->BlockOutput:\ntry:\nresponse,stdout_logs,stderr_logs=self.execute_code(\ninput_data.code,\ninput_data.language,\ninput_data.setup_commands,\ninput_data.timeout,\ncredentials.api_key.get_secret_value(),\ninput_data.template_id,\n)\n\nif response:\nyield \"response\",response\nif stdout_logs:\nyield \"stdout_logs\",stdout_logs\nif stderr_logs:\nyield \"stderr_logs\",stderr_logs\nexcept Exception as e:\nyield \"error\",str(e"
        }
    ],
    "content": "from enum import Enum\nfrom typing import Literal\n\nfrom e2b_code_interpreter import Sandbox\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block,BlockCategory,BlockOutput,BlockSchema\nfrom backend.data.model import(\nAPIKeyCredentials,\nCredentialsField,\nCredentialsMetaInput,\nSchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nTEST_CREDENTIALS=APIKeyCredentials(\nid=\"01234567-89ab-cdef-0123-456789abcdef\",\nprovider=\"e2b\",\napi_key=SecretStr(\"mock-e2b-api-key\"),\ntitle=\"Mock E2B API key\",\nexpires_at=None,\n)\nTEST_CREDENTIALS_INPUT={\n\"provider\":TEST_CREDENTIALS.provider,\n\"id\":TEST_CREDENTIALS.id,\n\"type\":TEST_CREDENTIALS.type,\n\"title\":TEST_CREDENTIALS.type,\n}\n\n\nclass ProgrammingLanguage(Enum):\nPYTHON=\"python\"\nJAVASCRIPT=\"js\"\nBASH=\"bash\"\nR=\"r\"\nJAVA=\"java\"\n\n\nclass CodeExecutionBlock(Block):\n#TODO:Add support to upload and download files\n#Currently,You can customized the CPU and Memory,only by creating a pre customized sandbox template\nclass Input(BlockSchema):\ncredentials:CredentialsMetaInput[\nLiteral[ProviderName.E2B],Literal[\"api_key\"]\n]=CredentialsField(\ndescription=\"Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs\",\n)\n\n#Todo:Option to run commond in background\nsetup_commands:list[str]=SchemaField(\ndescription=(\n\"Shell commands to set up the sandbox before running the code. \"\n\"You can use `curl` or `git` to install your desired Debian based \"\n\"package manager. `pip` and `npm` are pre-installed.\\n\\n\"\n\"These commands are executed with `sh`, in the foreground.\"\n),\nplaceholder=\"pip install cowsay\",\ndefault=[],\nadvanced=False,\n)\n\ncode:str=SchemaField(\ndescription=\"Code to execute in the sandbox\",\nplaceholder=\"print('Hello, World!')\",\ndefault=\"\",\nadvanced=False,\n)\n\nlanguage:ProgrammingLanguage=SchemaField(\ndescription=\"Programming language to execute\",\ndefault=ProgrammingLanguage.PYTHON,\nadvanced=False,\n)\n\ntimeout:int=SchemaField(\ndescription=\"Execution timeout in seconds\",default=300\n)\n\ntemplate_id:str=SchemaField(\ndescription=(\n\"You can use an E2B sandbox template by entering its ID here. \"\n\"Check out the E2B docs for more details: \"\n\"[E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)\"\n),\ndefault=\"\",\nadvanced=True,\n)\n\nclass Output(BlockSchema):\nresponse:str=SchemaField(description=\"Response from code execution\")\nstdout_logs:str=SchemaField(\ndescription=\"Standard output logs from execution\"\n)\nstderr_logs:str=SchemaField(description=\"Standard error logs from execution\")\nerror:str=SchemaField(description=\"Error message if execution failed\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"0b02b072-abe7-11ef-8372-fb5d162dd712\",\ndescription=\"Executes code in an isolated sandbox environment with internet access.\",\ncategories={BlockCategory.DEVELOPER_TOOLS},\ninput_schema=CodeExecutionBlock.Input,\noutput_schema=CodeExecutionBlock.Output,\ntest_credentials=TEST_CREDENTIALS,\ntest_input={\n\"credentials\":TEST_CREDENTIALS_INPUT,\n\"code\":\"print('Hello World')\",\n\"language\":ProgrammingLanguage.PYTHON.value,\n\"setup_commands\":[],\n\"timeout\":300,\n\"template_id\":\"\",\n},\ntest_output=[\n(\"response\",\"Hello World\"),\n(\"stdout_logs\",\"Hello World\\n\"),\n],\ntest_mock={\n\"execute_code\":lambda code,language,setup_commands,timeout,api_key,template_id:(\n\"Hello World\",\n\"Hello World\\n\",\n\"\",\n),\n},\n)\n\ndef execute_code(\nself,\ncode:str,\nlanguage:ProgrammingLanguage,\nsetup_commands:list[str],\ntimeout:int,\napi_key:str,\ntemplate_id:str,\n):\ntry:\nsandbox=None\nif template_id:\nsandbox=Sandbox(\ntemplate=template_id,api_key=api_key,timeout=timeout\n)\nelse:\nsandbox=Sandbox(api_key=api_key,timeout=timeout)\n\nif not sandbox:\nraise Exception(\"Sandbox not created\")\n\n#Running setup commands\nfor cmd in setup_commands:\nsandbox.commands.run(cmd)\n\n#Executing the code\nexecution=sandbox.run_code(\ncode,\nlanguage=language.value,\non_error=lambda e:sandbox.kill(),#Kill the sandbox if there is an error\n)\n\nif execution.error:\nraise Exception(execution.error)\n\nresponse=execution.text\nstdout_logs=\"\".join(execution.logs.stdout)\nstderr_logs=\"\".join(execution.logs.stderr)\n\nreturn response,stdout_logs,stderr_logs\n\nexcept Exception as e:\nraise e\n\ndef run(\nself,input_data:Input,*,credentials:APIKeyCredentials,**kwargs\n)->BlockOutput:\ntry:\nresponse,stdout_logs,stderr_logs=self.execute_code(\ninput_data.code,\ninput_data.language,\ninput_data.setup_commands,\ninput_data.timeout,\ncredentials.api_key.get_secret_value(),\ninput_data.template_id,\n)\n\nif response:\nyield \"response\",response\nif stdout_logs:\nyield \"stdout_logs\",stdout_logs\nif stderr_logs:\nyield \"stderr_logs\",stderr_logs\nexcept Exception as e:\nyield \"error\",str(e"
}