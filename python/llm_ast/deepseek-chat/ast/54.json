{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        1593
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "re",
            "range": [
                14,
                16
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "re",
                    "range": [
                        14,
                        16
                    ],
                    "children": [],
                    "content": "import re\n"
                }
            ],
            "content": "import re\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "sys",
            "range": [
                17,
                19
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "sys",
                    "range": [
                        17,
                        19
                    ],
                    "children": [],
                    "content": "import sys\n"
                }
            ],
            "content": "import sys\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "punctuation",
            "range": [
                20,
                24
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "punctuation",
                    "range": [
                        20,
                        24
                    ],
                    "children": [],
                    "content": "from string import punctuation\n"
                }
            ],
            "content": "from string import punctuation\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "List, Tuple, Dict",
            "range": [
                25,
                33
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "List",
                    "range": [
                        25,
                        29
                    ],
                    "children": [],
                    "content": "from typing import List,"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Tuple",
                    "range": [
                        29,
                        31
                    ],
                    "children": [],
                    "content": ",Tuple,"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Dict",
                    "range": [
                        31,
                        33
                    ],
                    "children": [],
                    "content": ",Dict\n"
                }
            ],
            "content": "from typing import List,Tuple,Dict\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "punctuation",
            "range": [
                57,
                67
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        58,
                        67
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "punctuation",
                            "range": [
                                57,
                                67
                            ],
                            "children": [],
                            "content": "punctuation=punctuation.replace('()','')\n"
                        },
                        {
                            "type": "CallExpression",
                            "name": "replace",
                            "range": [
                                61,
                                67
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "punctuation",
                                    "range": [
                                        59,
                                        67
                                    ],
                                    "children": [],
                                    "content": "punctuation.replace('()','')\n"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "'()'",
                                    "range": [
                                        63,
                                        67
                                    ],
                                    "children": [],
                                    "content": "'()','')\n"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "''",
                                    "range": [
                                        65,
                                        67
                                    ],
                                    "children": [],
                                    "content": "'')\n"
                                }
                            ],
                            "content": "replace('()','')\n"
                        }
                    ],
                    "content": "=punctuation.replace('()','')\n"
                }
            ],
            "content": "punctuation=punctuation.replace('()','')\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "anchor",
            "range": [
                69,
                72
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        70,
                        72
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "anchor",
                            "range": [
                                69,
                                72
                            ],
                            "children": [],
                            "content": "anchor='###'\n"
                        },
                        {
                            "type": "StringLiteral",
                            "name": "'###'",
                            "range": [
                                71,
                                72
                            ],
                            "children": [],
                            "content": "'###'\n"
                        }
                    ],
                    "content": "='###'\n"
                }
            ],
            "content": "anchor='###'\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "auth_keys",
            "range": [
                73,
                86
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        74,
                        86
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "auth_keys",
                            "range": [
                                73,
                                86
                            ],
                            "children": [],
                            "content": "auth_keys=['apiKey','OAuth','X-Mashape-Key','User-Agent','No']\n"
                        },
                        {
                            "type": "ArrayExpression",
                            "name": "[]",
                            "range": [
                                75,
                                86
                            ],
                            "children": [
                                {
                                    "type": "StringLiteral",
                                    "name": "'apiKey'",
                                    "range": [
                                        76,
                                        86
                                    ],
                                    "children": [],
                                    "content": "'apiKey','OAuth','X-Mashape-Key','User-Agent','No']\n"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "'OAuth'",
                                    "range": [
                                        78,
                                        86
                                    ],
                                    "children": [],
                                    "content": "'OAuth','X-Mashape-Key','User-Agent','No']\n"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "'X-Mashape-Key'",
                                    "range": [
                                        80,
                                        86
                                    ],
                                    "children": [],
                                    "content": "'X-Mashape-Key','User-Agent','No']\n"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "'User-Agent'",
                                    "range": [
                                        82,
                                        86
                                    ],
                                    "children": [],
                                    "content": "'User-Agent','No']\n"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "'No'",
                                    "range": [
                                        84,
                                        86
                                    ],
                                    "children": [],
                                    "content": "'No']\n"
                                }
                            ],
                            "content": "['apiKey','OAuth','X-Mashape-Key','User-Agent','No']\n"
                        }
                    ],
                    "content": "=['apiKey','OAuth','X-Mashape-Key','User-Agent','No']\n"
                }
            ],
            "content": "auth_keys=['apiKey','OAuth','X-Mashape-Key','User-Agent','No']\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "https_keys",
            "range": [
                87,
                94
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        88,
                        94
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "https_keys",
                            "range": [
                                87,
                                94
                            ],
                            "children": [],
                            "content": "https_keys=['Yes','No']\n"
                        },
                        {
                            "type": "ArrayExpression",
                            "name": "[]",
                            "range": [
                                89,
                                94
                            ],
                            "children": [
                                {
                                    "type": "StringLiteral",
                                    "name": "'Yes'",
                                    "range": [
                                        90,
                                        94
                                    ],
                                    "children": [],
                                    "content": "'Yes','No']\n"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "'No'",
                                    "range": [
                                        92,
                                        94
                                    ],
                                    "children": [],
                                    "content": "'No']\n"
                                }
                            ],
                            "content": "['Yes','No']\n"
                        }
                    ],
                    "content": "=['Yes','No']\n"
                }
            ],
            "content": "https_keys=['Yes','No']\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "cors_keys",
            "range": [
                95,
                104
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        96,
                        104
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "cors_keys",
                            "range": [
                                95,
                                104
                            ],
                            "children": [],
                            "content": "cors_keys=['Yes','No','Unknown']\n"
                        },
                        {
                            "type": "ArrayExpression",
                            "name": "[]",
                            "range": [
                                97,
                                104
                            ],
                            "children": [
                                {
                                    "type": "StringLiteral",
                                    "name": "'Yes'",
                                    "range": [
                                        98,
                                        104
                                    ],
                                    "children": [],
                                    "content": "'Yes','No','Unknown']\n"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "'No'",
                                    "range": [
                                        100,
                                        104
                                    ],
                                    "children": [],
                                    "content": "'No','Unknown']\n"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "'Unknown'",
                                    "range": [
                                        102,
                                        104
                                    ],
                                    "children": [],
                                    "content": "'Unknown']\n"
                                }
                            ],
                            "content": "['Yes','No','Unknown']\n"
                        }
                    ],
                    "content": "=['Yes','No','Unknown']\n"
                }
            ],
            "content": "cors_keys=['Yes','No','Unknown']\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "index_title",
            "range": [
                106,
                109
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        107,
                        109
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "index_title",
                            "range": [
                                106,
                                109
                            ],
                            "children": [],
                            "content": "index_title=0\n"
                        },
                        {
                            "type": "NumericLiteral",
                            "name": "0",
                            "range": [
                                108,
                                109
                            ],
                            "children": [],
                            "content": "0\n"
                        }
                    ],
                    "content": "=0\n"
                }
            ],
            "content": "index_title=0\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "index_desc",
            "range": [
                110,
                113
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        111,
                        113
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "index_desc",
                            "range": [
                                110,
                                113
                            ],
                            "children": [],
                            "content": "index_desc=1\n"
                        },
                        {
                            "type": "NumericLiteral",
                            "name": "1",
                            "range": [
                                112,
                                113
                            ],
                            "children": [],
                            "content": "1\n"
                        }
                    ],
                    "content": "=1\n"
                }
            ],
            "content": "index_desc=1\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "index_auth",
            "range": [
                114,
                117
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        115,
                        117
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "index_auth",
                            "range": [
                                114,
                                117
                            ],
                            "children": [],
                            "content": "index_auth=2\n"
                        },
                        {
                            "type": "NumericLiteral",
                            "name": "2",
                            "range": [
                                116,
                                117
                            ],
                            "children": [],
                            "content": "2\n"
                        }
                    ],
                    "content": "=2\n"
                }
            ],
            "content": "index_auth=2\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "index_https",
            "range": [
                118,
                121
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        119,
                        121
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "index_https",
                            "range": [
                                118,
                                121
                            ],
                            "children": [],
                            "content": "index_https=3\n"
                        },
                        {
                            "type": "NumericLiteral",
                            "name": "3",
                            "range": [
                                120,
                                121
                            ],
                            "children": [],
                            "content": "3\n"
                        }
                    ],
                    "content": "=3\n"
                }
            ],
            "content": "index_https=3\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "index_cors",
            "range": [
                122,
                125
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        123,
                        125
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "index_cors",
                            "range": [
                                122,
                                125
                            ],
                            "children": [],
                            "content": "index_cors=4\n"
                        },
                        {
                            "type": "NumericLiteral",
                            "name": "4",
                            "range": [
                                124,
                                125
                            ],
                            "children": [],
                            "content": "4\n"
                        }
                    ],
                    "content": "=4\n"
                }
            ],
            "content": "index_cors=4\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "num_segments",
            "range": [
                127,
                130
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        128,
                        130
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "num_segments",
                            "range": [
                                127,
                                130
                            ],
                            "children": [],
                            "content": "num_segments=5\n"
                        },
                        {
                            "type": "NumericLiteral",
                            "name": "5",
                            "range": [
                                129,
                                130
                            ],
                            "children": [],
                            "content": "5\n"
                        }
                    ],
                    "content": "=5\n"
                }
            ],
            "content": "num_segments=5\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "min_entries_per_category",
            "range": [
                131,
                134
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        132,
                        134
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "min_entries_per_category",
                            "range": [
                                131,
                                134
                            ],
                            "children": [],
                            "content": "min_entries_per_category=3\n"
                        },
                        {
                            "type": "NumericLiteral",
                            "name": "3",
                            "range": [
                                133,
                                134
                            ],
                            "children": [],
                            "content": "3\n"
                        }
                    ],
                    "content": "=3\n"
                }
            ],
            "content": "min_entries_per_category=3\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "max_description_length",
            "range": [
                135,
                138
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        136,
                        138
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "max_description_length",
                            "range": [
                                135,
                                138
                            ],
                            "children": [],
                            "content": "max_description_length=100\n"
                        },
                        {
                            "type": "NumericLiteral",
                            "name": "100",
                            "range": [
                                137,
                                138
                            ],
                            "children": [],
                            "content": "100\n"
                        }
                    ],
                    "content": "=100\n"
                }
            ],
            "content": "max_description_length=100\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "anchor_re",
            "range": [
                140,
                150
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        141,
                        150
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "anchor_re",
                            "range": [
                                140,
                                150
                            ],
                            "children": [],
                            "content": "anchor_re=re.compile(anchor+'\\s(.+)')\n"
                        },
                        {
                            "type": "CallExpression",
                            "name": "compile",
                            "range": [
                                144,
                                150
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "re",
                                    "range": [
                                        142,
                                        150
                                    ],
                                    "children": [],
                                    "content": "re.compile(anchor+'\\s(.+)')\n"
                                },
                                {
                                    "type": "BinaryExpression",
                                    "name": "+",
                                    "range": [
                                        147,
                                        150
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "anchor",
                                            "range": [
                                                146,
                                                150
                                            ],
                                            "children": [],
                                            "content": "anchor+'\\s(.+)')\n"
                                        },
                                        {
                                            "type": "StringLiteral",
                                            "name": "'\\s(.+)'",
                                            "range": [
                                                148,
                                                150
                                            ],
                                            "children": [],
                                            "content": "'\\s(.+)')\n"
                                        }
                                    ],
                                    "content": "+'\\s(.+)')\n"
                                }
                            ],
                            "content": "compile(anchor+'\\s(.+)')\n"
                        }
                    ],
                    "content": "=re.compile(anchor+'\\s(.+)')\n"
                }
            ],
            "content": "anchor_re=re.compile(anchor+'\\s(.+)')\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "category_title_in_index_re",
            "range": [
                151,
                159
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        152,
                        159
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "category_title_in_index_re",
                            "range": [
                                151,
                                159
                            ],
                            "children": [],
                            "content": "category_title_in_index_re=re.compile('\\*\\s\\[(.*)\\]')\n"
                        },
                        {
                            "type": "CallExpression",
                            "name": "compile",
                            "range": [
                                155,
                                159
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "re",
                                    "range": [
                                        153,
                                        159
                                    ],
                                    "children": [],
                                    "content": "re.compile('\\*\\s\\[(.*)\\]')\n"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "'\\*\\s\\[(.*)\\]'",
                                    "range": [
                                        157,
                                        159
                                    ],
                                    "children": [],
                                    "content": "'\\*\\s\\[(.*)\\]')\n"
                                }
                            ],
                            "content": "compile('\\*\\s\\[(.*)\\]')\n"
                        }
                    ],
                    "content": "=re.compile('\\*\\s\\[(.*)\\]')\n"
                }
            ],
            "content": "category_title_in_index_re=re.compile('\\*\\s\\[(.*)\\]')\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "link_re",
            "range": [
                160,
                168
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "=",
                    "range": [
                        161,
                        168
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "link_re",
                            "range": [
                                160,
                                168
                            ],
                            "children": [],
                            "content": "link_re=re.compile('\\[(.+)\\]\\((http.*)\\)')\n"
                        },
                        {
                            "type": "CallExpression",
                            "name": "compile",
                            "range": [
                                164,
                                168
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "re",
                                    "range": [
                                        162,
                                        168
                                    ],
                                    "children": [],
                                    "content": "re.compile('\\[(.+)\\]\\((http.*)\\)')\n"
                                },
                                {
                                    "type": "StringLiteral",
                                    "name": "'\\[(.+)\\]\\((http.*)\\)'",
                                    "range": [
                                        166,
                                        168
                                    ],
                                    "children": [],
                                    "content": "'\\[(.+)\\]\\((http.*)\\)')\n"
                                }
                            ],
                            "content": "compile('\\[(.+)\\]\\((http.*)\\)')\n"
                        }
                    ],
                    "content": "=re.compile('\\[(.+)\\]\\((http.*)\\)')\n"
                }
            ],
            "content": "link_re=re.compile('\\[(.+)\\]\\((http.*)\\)')\n"
        },
        {
            "type": "TypeAliasDeclaration",
            "name": "APIList",
            "range": [
                174,
                180
            ],
            "children": [
                {
                    "type": "TypeReference",
                    "name": "List",
                    "range": [
                        176,
                        180
                    ],
                    "children": [
                        {
                            "type": "TypeReference",
                            "name": "str",
                            "range": [
                                178,
                                180
                            ],
                            "children": [],
                            "content": "str]\n"
                        }
                    ],
                    "content": "List[str]\n"
                }
            ],
            "content": "APIList=List[str]\n"
        },
        {
            "type": "TypeAliasDeclaration",
            "name": "Categories",
            "range": [
                181,
                189
            ],
            "children": [
                {
                    "type": "TypeReference",
                    "name": "Dict",
                    "range": [
                        183,
                        189
                    ],
                    "children": [
                        {
                            "type": "TypeReference",
                            "name": "str",
                            "range": [
                                185,
                                189
                            ],
                            "children": [],
                            "content": "str,APIList]\n"
                        },
                        {
                            "type": "TypeReference",
                            "name": "APIList",
                            "range": [
                                187,
                                189
                            ],
                            "children": [],
                            "content": "APIList]\n"
                        }
                    ],
                    "content": "Dict[str,APIList]\n"
                }
            ],
            "content": "Categories=Dict[str,APIList]\n"
        },
        {
            "type": "TypeAliasDeclaration",
            "name": "CategoriesLineNumber",
            "range": [
                190,
                198
            ],
            "children": [
                {
                    "type": "TypeReference",
                    "name": "Dict",
                    "range": [
                        192,
                        198
                    ],
                    "children": [
                        {
                            "type": "TypeReference",
                            "name": "str",
                            "range": [
                                194,
                                198
                            ],
                            "children": [],
                            "content": "str,int]\n"
                        },
                        {
                            "type": "TypeReference",
                            "name": "int",
                            "range": [
                                196,
                                198
                            ],
                            "children": [],
                            "content": "int]\n"
                        }
                    ],
                    "content": "Dict[str,int]\n"
                }
            ],
            "content": "CategoriesLineNumber=Dict[str,int]\n"
        },
        {
            "type": "FunctionDecl",
            "name": "error_message",
            "range": [
                201,
                227
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "",
                    "range": [
                        203,
                        211
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "line_number",
                            "range": [
                                204,
                                206
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "int",
                                    "range": [
                                        206,
                                        206
                                    ],
                                    "children": [],
                                    "content": "int"
                                }
                            ],
                            "content": "line_number:int"
                        },
                        {
                            "type": "Parameter",
                            "name": "message",
                            "range": [
                                208,
                                210
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        210,
                                        210
                                    ],
                                    "children": [],
                                    "content": "str"
                                }
                            ],
                            "content": "message:str"
                        }
                    ],
                    "content": "(line_number:int,message:str)"
                },
                {
                    "type": "ReturnType",
                    "name": "str",
                    "range": [
                        212,
                        214
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                214,
                                214
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "->str"
                },
                {
                    "type": "Body",
                    "name": "",
                    "range": [
                        216,
                        226
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "line",
                            "range": [
                                217,
                                221
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "+",
                                    "range": [
                                        219,
                                        221
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "line_number",
                                            "range": [
                                                219,
                                                219
                                            ],
                                            "children": [],
                                            "content": "line_number"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "1",
                                            "range": [
                                                221,
                                                221
                                            ],
                                            "children": [],
                                            "content": "1"
                                        }
                                    ],
                                    "content": "line_number+1"
                                }
                            ],
                            "content": "line=line_number+1"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                223,
                                225
                            ],
                            "children": [
                                {
                                    "type": "TemplateLiteral",
                                    "name": "f'(L{line:03d}) {message}'",
                                    "range": [
                                        224,
                                        225
                                    ],
                                    "children": [],
                                    "content": "f '(L{line:03d}) {message}'"
                                }
                            ],
                            "content": "return f '(L{line:03d}) {message}'"
                        }
                    ],
                    "content": "\nline=line_number+1\nreturn f '(L{line:03d}) {message}'\n"
                }
            ],
            "content": "def error_message(line_number:int,message:str)->str:\nline=line_number+1\nreturn f '(L{line:03d}) {message}'\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "get_categories_content",
            "range": [
                228,
                408
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "contents",
                    "range": [
                        231,
                        236
                    ],
                    "children": [],
                    "content": "(contents:List[str"
                },
                {
                    "type": "ReturnType",
                    "name": "Tuple[Categories, CategoriesLineNumber]",
                    "range": [
                        240,
                        245
                    ],
                    "children": [],
                    "content": ">Tuple[Categories,CategoriesLineNumber"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        247,
                        408
                    ],
                    "children": [
                        {
                            "type": "VariableDeclarator",
                            "name": "categories",
                            "range": [
                                249,
                                252
                            ],
                            "children": [],
                            "content": "\ncategories={"
                        },
                        {
                            "type": "VariableDeclarator",
                            "name": "category_line_num",
                            "range": [
                                254,
                                257
                            ],
                            "children": [],
                            "content": "\ncategory_line_num={"
                        },
                        {
                            "type": "ForStatement",
                            "name": "",
                            "range": [
                                260,
                                333
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclarator",
                                    "name": "line_num",
                                    "range": [
                                        261,
                                        261
                                    ],
                                    "children": [],
                                    "content": "for"
                                },
                                {
                                    "type": "VariableDeclarator",
                                    "name": "line_content",
                                    "range": [
                                        263,
                                        263
                                    ],
                                    "children": [],
                                    "content": ","
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "enumerate",
                                    "range": [
                                        265,
                                        268
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "contents",
                                            "range": [
                                                267,
                                                267
                                            ],
                                            "children": [],
                                            "content": "("
                                        }
                                    ],
                                    "content": "in enumerate(contents"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        272,
                                        313
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "line_content.startswith(anchor)",
                                            "range": [
                                                273,
                                                278
                                            ],
                                            "children": [],
                                            "content": "if line_content.startswith(anchor"
                                        },
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                280,
                                                313
                                            ],
                                            "children": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "name": "category",
                                                    "range": [
                                                        281,
                                                        295
                                                    ],
                                                    "children": [],
                                                    "content": "\ncategory=line_content.split(anchor)[1].strip("
                                                },
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "categories[category] = []",
                                                    "range": [
                                                        297,
                                                        304
                                                    ],
                                                    "children": [],
                                                    "content": "\ncategories[category]=[]"
                                                },
                                                {
                                                    "type": "AssignmentExpression",
                                                    "name": "category_line_num[category] = line_num",
                                                    "range": [
                                                        305,
                                                        311
                                                    ],
                                                    "children": [],
                                                    "content": "\ncategory_line_num[category]=line_num"
                                                },
                                                {
                                                    "type": "ContinueStatement",
                                                    "name": "",
                                                    "range": [
                                                        312,
                                                        312
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": ":\ncategory=line_content.split(anchor)[1].strip()\ncategories[category]=[]\ncategory_line_num[category]=line_num\ncontinue"
                                        }
                                    ],
                                    "content": "\nif line_content.startswith(anchor):\ncategory=line_content.split(anchor)[1].strip()\ncategories[category]=[]\ncategory_line_num[category]=line_num\ncontinue"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        315,
                                        332
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "not line_content.startswith('|') or line_content.startswith('|---')",
                                            "range": [
                                                316,
                                                329
                                            ],
                                            "children": [],
                                            "content": "if not line_content.startswith('|')or line_content.startswith('|---'"
                                        },
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                331,
                                                332
                                            ],
                                            "children": [
                                                {
                                                    "type": "ContinueStatement",
                                                    "name": "",
                                                    "range": [
                                                        332,
                                                        332
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": ":\n"
                                        }
                                    ],
                                    "content": "\nif not line_content.startswith('|')or line_content.startswith('|---'):\n"
                                },
                                {
                                    "type": "VariableDeclarator",
                                    "name": "raw_title",
                                    "range": [
                                        335,
                                        363
                                    ],
                                    "children": [],
                                    "content": "\nraw_title=[\nraw_content.strip()for raw_content in line_content.split('|')[1:-1]\n][0"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "link_re.match",
                                    "range": [
                                        366,
                                        373
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "raw_title",
                                            "range": [
                                                372,
                                                372
                                            ],
                                            "children": [],
                                            "content": "("
                                        }
                                    ],
                                    "content": "\ntitle_match=link_re.match(raw_title"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "",
                                    "range": [
                                        375,
                                        401
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "title_match",
                                            "range": [
                                                376,
                                                376
                                            ],
                                            "children": [],
                                            "content": "if"
                                        },
                                        {
                                            "type": "BlockStatement",
                                            "name": "",
                                            "range": [
                                                378,
                                                401
                                            ],
                                            "children": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "name": "title",
                                                    "range": [
                                                        379,
                                                        390
                                                    ],
                                                    "children": [],
                                                    "content": "\ntitle=title_match.group(1).upper("
                                                },
                                                {
                                                    "type": "CallExpression",
                                                    "name": "categories[category].append",
                                                    "range": [
                                                        392,
                                                        400
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "title",
                                                            "range": [
                                                                399,
                                                                399
                                                            ],
                                                            "children": [],
                                                            "content": "("
                                                        }
                                                    ],
                                                    "content": "\ncategories[category].append(title"
                                                }
                                            ],
                                            "content": ":\ntitle=title_match.group(1).upper()\ncategories[category].append(title)"
                                        }
                                    ],
                                    "content": "\nif title_match:\ntitle=title_match.group(1).upper()\ncategories[category].append(title)"
                                }
                            ],
                            "content": "\nfor line_num,line_content in enumerate(contents):\n\nif line_content.startswith(anchor):\ncategory=line_content.split(anchor)[1].strip()\ncategories[category]=[]\ncategory_line_num[category]=line_num\ncontinue\n\nif not line_content.startswith('|')or line_content.startswith('|---'):\ncontinue"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                403,
                                408
                            ],
                            "children": [
                                {
                                    "type": "ReturnValue",
                                    "name": "(categories, category_line_num)",
                                    "range": [
                                        404,
                                        407
                                    ],
                                    "children": [],
                                    "content": "return(categories,"
                                }
                            ],
                            "content": "\nreturn(categories,category_line_num"
                        }
                    ],
                    "content": ":\n\ncategories={}\ncategory_line_num={}\n\nfor line_num,line_content in enumerate(contents):\n\nif line_content.startswith(anchor):\ncategory=line_content.split(anchor)[1].strip()\ncategories[category]=[]\ncategory_line_num[category]=line_num\ncontinue\n\nif not line_content.startswith('|')or line_content.startswith('|---'):\ncontinue\n\nraw_title=[\nraw_content.strip()for raw_content in line_content.split('|')[1:-1]\n][0]\n\ntitle_match=link_re.match(raw_title)\nif title_match:\ntitle=title_match.group(1).upper()\ncategories[category].append(title)\n\nreturn(categories,category_line_num"
                }
            ],
            "content": "\ndef get_categories_content(contents:List[str])->Tuple[Categories,CategoriesLineNumber]:\n\ncategories={}\ncategory_line_num={}\n\nfor line_num,line_content in enumerate(contents):\n\nif line_content.startswith(anchor):\ncategory=line_content.split(anchor)[1].strip()\ncategories[category]=[]\ncategory_line_num[category]=line_num\ncontinue\n\nif not line_content.startswith('|')or line_content.startswith('|---'):\ncontinue\n\nraw_title=[\nraw_content.strip()for raw_content in line_content.split('|')[1:-1]\n][0]\n\ntitle_match=link_re.match(raw_title)\nif title_match:\ntitle=title_match.group(1).upper()\ncategories[category].append(title)\n\nreturn(categories,category_line_num"
        },
        {
            "type": "FunctionDecl",
            "name": "check_alphabetical_order",
            "range": [
                411,
                427
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "lines",
                    "range": [
                        414,
                        419
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "List[str]",
                            "range": [
                                416,
                                419
                            ],
                            "children": [],
                            "content": "lines:List["
                        }
                    ],
                    "content": "check_alphabetical_order(lines:List["
                },
                {
                    "type": "ReturnType",
                    "name": "List[str]",
                    "range": [
                        423,
                        426
                    ],
                    "children": [],
                    "content": "->List["
                }
            ],
            "content": "\n\ndef check_alphabetical_order(lines:List[str])->List[str"
        },
        {
            "type": "VariableDecl",
            "name": "err_msgs",
            "range": [
                430,
                433
            ],
            "children": [],
            "content": "\n\nerr_msgs="
        },
        {
            "type": "Assignment",
            "name": "categories, category_line_num",
            "range": [
                436,
                445
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "get_categories_content",
                    "range": [
                        440,
                        445
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "contents",
                            "range": [
                                442,
                                444
                            ],
                            "children": [],
                            "content": "get_categories_content(contents"
                        }
                    ],
                    "content": "category_line_num=get_categories_content(contents="
                }
            ],
            "content": "\n\ncategories,category_line_num=get_categories_content(contents="
        },
        {
            "type": "ForStatement",
            "name": "for category, api_list in categories.items",
            "range": [
                448,
                492
            ],
            "children": [
                {
                    "type": "IfStatement",
                    "name": "if sorted(api_list) != api_list",
                    "range": [
                        460,
                        492
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "error_message",
                            "range": [
                                472,
                                484
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "category_line_num[category]",
                                    "range": [
                                        475,
                                        478
                                    ],
                                    "children": [],
                                    "content": "(\ncategory_line_num["
                                },
                                {
                                    "type": "Argument",
                                    "name": "f'{category} category is not alphabetical order'",
                                    "range": [
                                        481,
                                        482
                                    ],
                                    "children": [],
                                    "content": ",\n"
                                }
                            ],
                            "content": "err_msg=error_message(\ncategory_line_num[category],\nf '{category} category is not alphabetical order'"
                        },
                        {
                            "type": "CallExpression",
                            "name": "err_msgs.append",
                            "range": [
                                486,
                                491
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "err_msg",
                                    "range": [
                                        490,
                                        490
                                    ],
                                    "children": [],
                                    "content": "append"
                                }
                            ],
                            "content": ")\nerr_msgs.append("
                        }
                    ],
                    "content": ":\nif sorted(api_list)!=api_list:\nerr_msg=error_message(\ncategory_line_num[category],\nf '{category} category is not alphabetical order'\n)\nerr_msgs.append(err_msg"
                }
            ],
            "content": "\n\nfor category,api_list in categories.items():\nif sorted(api_list)!=api_list:\nerr_msg=error_message(\ncategory_line_num[category],\nf '{category} category is not alphabetical order'\n)\nerr_msgs.append(err_msg"
        },
        {
            "type": "ReturnStatement",
            "name": "return err_msgs",
            "range": [
                494,
                495
            ],
            "children": [],
            "content": "\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "check_title",
            "range": [
                498,
                619
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        500,
                        508
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "line_num",
                            "range": [
                                501,
                                503
                            ],
                            "children": [],
                            "content": "def check_title("
                        },
                        {
                            "type": "Parameter",
                            "name": "raw_title",
                            "range": [
                                505,
                                507
                            ],
                            "children": [],
                            "content": ":int,"
                        }
                    ],
                    "content": "\ndef check_title(line_num:int,raw_title"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        509,
                        514
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "List",
                            "range": [
                                511,
                                514
                            ],
                            "children": [],
                            "content": ")->List"
                        }
                    ],
                    "content": ":str)->List"
                },
                {
                    "type": "Block",
                    "name": "body",
                    "range": [
                        516,
                        619
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "err_msgs",
                            "range": [
                                518,
                                521
                            ],
                            "children": [],
                            "content": ":\n\nerr_msgs"
                        },
                        {
                            "type": "Assignment",
                            "name": "title_match",
                            "range": [
                                524,
                                531
                            ],
                            "children": [],
                            "content": "]\n\ntitle_match=link_re.match"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_not_title_match",
                            "range": [
                                544,
                                564
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        545,
                                        546
                                    ],
                                    "children": [],
                                    "content": "syntax\n"
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        548,
                                        564
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "err_msg",
                                            "range": [
                                                549,
                                                556
                                            ],
                                            "children": [],
                                            "content": "title_match:\nerr_msg=error_message(line_num"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "append",
                                            "range": [
                                                558,
                                                563
                                            ],
                                            "children": [],
                                            "content": "'Title syntax should be \"[TITLE](LINK)\"')\nerr_msgs.append"
                                        }
                                    ],
                                    "content": "not title_match:\nerr_msg=error_message(line_num,'Title syntax should be \"[TITLE](LINK)\"')\nerr_msgs.append("
                                }
                            ],
                            "content": "Markdown syntax\nif not title_match:\nerr_msg=error_message(line_num,'Title syntax should be \"[TITLE](LINK)\"')\nerr_msgs.append("
                        },
                        {
                            "type": "ElseStatement",
                            "name": "else",
                            "range": [
                                565,
                                615
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "else_block",
                                    "range": [
                                        567,
                                        615
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "title",
                                            "range": [
                                                578,
                                                585
                                            ],
                                            "children": [],
                                            "content": "entry title\ntitle=title_match.group"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_title_ends_with_API",
                                            "range": [
                                                587,
                                                615
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "condition",
                                                    "range": [
                                                        588,
                                                        597
                                                    ],
                                                    "children": [],
                                                    "content": ")\nif title.upper().endswith"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "then",
                                                    "range": [
                                                        599,
                                                        615
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Assignment",
                                                            "name": "err_msg",
                                                            "range": [
                                                                600,
                                                                607
                                                            ],
                                                            "children": [],
                                                            "content": "):\nerr_msg=error_message(line_num"
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "append",
                                                            "range": [
                                                                609,
                                                                614
                                                            ],
                                                            "children": [],
                                                            "content": "'Title should not end with \"... API\". Every entry is an API here!')\nerr_msgs.append"
                                                        }
                                                    ],
                                                    "content": "' API'):\nerr_msg=error_message(line_num,'Title should not end with \"... API\". Every entry is an API here!')\nerr_msgs.append("
                                                }
                                            ],
                                            "content": "1)\nif title.upper().endswith(' API'):\nerr_msg=error_message(line_num,'Title should not end with \"... API\". Every entry is an API here!')\nerr_msgs.append("
                                        }
                                    ],
                                    "content": "\nelse:\n#do not allow \"... API\" in the entry title\ntitle=title_match.group(1)\nif title.upper().endswith(' API'):\nerr_msg=error_message(line_num,'Title should not end with \"... API\". Every entry is an API here!')\nerr_msgs.append("
                                }
                            ],
                            "content": "err_msg)\nelse:\n#do not allow \"... API\" in the entry title\ntitle=title_match.group(1)\nif title.upper().endswith(' API'):\nerr_msg=error_message(line_num,'Title should not end with \"... API\". Every entry is an API here!')\nerr_msgs.append("
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                617,
                                618
                            ],
                            "children": [],
                            "content": ")\n"
                        }
                    ],
                    "content": "str]:\n\nerr_msgs=[]\n\ntitle_match=link_re.match(raw_title)\n\n#url should be wrapped in \"[TITLE](LINK)\" Markdown syntax\nif not title_match:\nerr_msg=error_message(line_num,'Title syntax should be \"[TITLE](LINK)\"')\nerr_msgs.append(err_msg)\nelse:\n#do not allow \"... API\" in the entry title\ntitle=title_match.group(1)\nif title.upper().endswith(' API'):\nerr_msg=error_message(line_num,'Title should not end with \"... API\". Every entry is an API here!')\nerr_msgs.append(err_msg)\n\n"
                }
            ],
            "content": "\n\n\ndef check_title(line_num:int,raw_title:str)->List[str]:\n\nerr_msgs=[]\n\ntitle_match=link_re.match(raw_title)\n\n#url should be wrapped in \"[TITLE](LINK)\" Markdown syntax\nif not title_match:\nerr_msg=error_message(line_num,'Title syntax should be \"[TITLE](LINK)\"')\nerr_msgs.append(err_msg)\nelse:\n#do not allow \"... API\" in the entry title\ntitle=title_match.group(1)\nif title.upper().endswith(' API'):\nerr_msg=error_message(line_num,'Title should not end with \"... API\". Every entry is an API here!')\nerr_msgs.append(err_msg)\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "check_description",
            "range": [
                622,
                748
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        624,
                        632
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "line_num",
                            "range": [
                                625,
                                627
                            ],
                            "children": [],
                            "content": "def check_description("
                        },
                        {
                            "type": "Parameter",
                            "name": "description",
                            "range": [
                                629,
                                631
                            ],
                            "children": [],
                            "content": ":int,"
                        }
                    ],
                    "content": "\ndef check_description(line_num:int,description"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        633,
                        638
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "List",
                            "range": [
                                635,
                                638
                            ],
                            "children": [],
                            "content": ")->List"
                        }
                    ],
                    "content": ":str)->List"
                },
                {
                    "type": "Block",
                    "name": "body",
                    "range": [
                        640,
                        748
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "err_msgs",
                            "range": [
                                642,
                                645
                            ],
                            "children": [],
                            "content": ":\n\nerr_msgs"
                        },
                        {
                            "type": "Assignment",
                            "name": "first_char",
                            "range": [
                                648,
                                653
                            ],
                            "children": [],
                            "content": "]\n\nfirst_char=description"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_first_char_not_capitalized",
                            "range": [
                                655,
                                681
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        656,
                                        663
                                    ],
                                    "children": [],
                                    "content": "]\nif first_char.upper()"
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        665,
                                        681
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "err_msg",
                                            "range": [
                                                666,
                                                673
                                            ],
                                            "children": [],
                                            "content": "first_char:\nerr_msg=error_message(line_num"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "append",
                                            "range": [
                                                675,
                                                680
                                            ],
                                            "children": [],
                                            "content": "'first character of description is not capitalized')\nerr_msgs.append"
                                        }
                                    ],
                                    "content": "=first_char:\nerr_msg=error_message(line_num,'first character of description is not capitalized')\nerr_msgs.append("
                                }
                            ],
                            "content": "0]\nif first_char.upper()!=first_char:\nerr_msg=error_message(line_num,'first character of description is not capitalized')\nerr_msgs.append("
                        },
                        {
                            "type": "Assignment",
                            "name": "last_char",
                            "range": [
                                683,
                                689
                            ],
                            "children": [],
                            "content": ")\n\nlast_char=description["
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_last_char_in_punctuation",
                            "range": [
                                691,
                                712
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        692,
                                        694
                                    ],
                                    "children": [],
                                    "content": "]\nif"
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        696,
                                        712
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "err_msg",
                                            "range": [
                                                697,
                                                705
                                            ],
                                            "children": [],
                                            "content": "punctuation:\nerr_msg=error_message(line_num,"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "append",
                                            "range": [
                                                707,
                                                711
                                            ],
                                            "children": [],
                                            "content": "'description should not end with {last_char}')\nerr_msgs."
                                        }
                                    ],
                                    "content": "in punctuation:\nerr_msg=error_message(line_num,f 'description should not end with {last_char}')\nerr_msgs.append"
                                }
                            ],
                            "content": "1]\nif last_char in punctuation:\nerr_msg=error_message(line_num,f 'description should not end with {last_char}')\nerr_msgs.append"
                        },
                        {
                            "type": "Assignment",
                            "name": "desc_length",
                            "range": [
                                715,
                                720
                            ],
                            "children": [],
                            "content": ")\n\ndesc_length=len"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_desc_length_exceeds_max",
                            "range": [
                                722,
                                743
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        723,
                                        725
                                    ],
                                    "children": [],
                                    "content": ")\nif"
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        727,
                                        743
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "err_msg",
                                            "range": [
                                                728,
                                                736
                                            ],
                                            "children": [],
                                            "content": "max_description_length:\nerr_msg=error_message(line_num,"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "append",
                                            "range": [
                                                738,
                                                742
                                            ],
                                            "children": [],
                                            "content": "'description should not exceed {max_description_length} characters (currently {desc_length})')\nerr_msgs."
                                        }
                                    ],
                                    "content": ">max_description_length:\nerr_msg=error_message(line_num,f 'description should not exceed {max_description_length} characters (currently {desc_length})')\nerr_msgs.append"
                                }
                            ],
                            "content": "description)\nif desc_length>max_description_length:\nerr_msg=error_message(line_num,f 'description should not exceed {max_description_length} characters (currently {desc_length})')\nerr_msgs.append"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                746,
                                747
                            ],
                            "children": [],
                            "content": ")\n"
                        }
                    ],
                    "content": "str]:\n\nerr_msgs=[]\n\nfirst_char=description[0]\nif first_char.upper()!=first_char:\nerr_msg=error_message(line_num,'first character of description is not capitalized')\nerr_msgs.append(err_msg)\n\nlast_char=description[-1]\nif last_char in punctuation:\nerr_msg=error_message(line_num,f 'description should not end with {last_char}')\nerr_msgs.append(err_msg)\n\ndesc_length=len(description)\nif desc_length>max_description_length:\nerr_msg=error_message(line_num,f 'description should not exceed {max_description_length} characters (currently {desc_length})')\nerr_msgs.append(err_msg)\n\n"
                }
            ],
            "content": "\n\n\ndef check_description(line_num:int,description:str)->List[str]:\n\nerr_msgs=[]\n\nfirst_char=description[0]\nif first_char.upper()!=first_char:\nerr_msg=error_message(line_num,'first character of description is not capitalized')\nerr_msgs.append(err_msg)\n\nlast_char=description[-1]\nif last_char in punctuation:\nerr_msg=error_message(line_num,f 'description should not end with {last_char}')\nerr_msgs.append(err_msg)\n\ndesc_length=len(description)\nif desc_length>max_description_length:\nerr_msg=error_message(line_num,f 'description should not exceed {max_description_length} characters (currently {desc_length})')\nerr_msgs.append(err_msg)\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "check_auth",
            "range": [
                750,
                857
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "range": [
                        752,
                        760
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "line_num",
                            "range": [
                                753,
                                755
                            ],
                            "children": [],
                            "content": "\ndef check_auth"
                        },
                        {
                            "type": "Parameter",
                            "name": "auth",
                            "range": [
                                757,
                                759
                            ],
                            "children": [],
                            "content": "line_num:int"
                        }
                    ],
                    "content": "\n\ndef check_auth(line_num:int,"
                },
                {
                    "type": "ReturnType",
                    "range": [
                        761,
                        766
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "List",
                            "range": [
                                763,
                                766
                            ],
                            "children": [],
                            "content": "str)->"
                        }
                    ],
                    "content": "auth:str)->"
                },
                {
                    "type": "Block",
                    "range": [
                        768,
                        857
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "err_msgs",
                            "range": [
                                770,
                                773
                            ],
                            "children": [],
                            "content": "]:\n\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "backtick",
                            "range": [
                                776,
                                778
                            ],
                            "children": [],
                            "content": "[]\n"
                        },
                        {
                            "type": "IfStatement",
                            "range": [
                                780,
                                820
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "range": [
                                        781,
                                        802
                                    ],
                                    "children": [
                                        {
                                            "type": "BinaryExpression",
                                            "operator": "!=",
                                            "range": [
                                                781,
                                                784
                                            ],
                                            "children": [],
                                            "content": "='`'\nif"
                                        },
                                        {
                                            "type": "LogicalExpression",
                                            "operator": "and",
                                            "range": [
                                                785,
                                                802
                                            ],
                                            "children": [
                                                {
                                                    "type": "UnaryExpression",
                                                    "operator": "not",
                                                    "range": [
                                                        787,
                                                        793
                                                    ],
                                                    "children": [],
                                                    "content": "='No' and(not auth."
                                                },
                                                {
                                                    "type": "UnaryExpression",
                                                    "operator": "not",
                                                    "range": [
                                                        795,
                                                        801
                                                    ],
                                                    "children": [],
                                                    "content": "(backtick)or not auth."
                                                }
                                            ],
                                            "content": "auth!='No' and(not auth.startswith(backtick)or not auth.endswith"
                                        }
                                    ],
                                    "content": "='`'\nif auth!='No' and(not auth.startswith(backtick)or not auth.endswith"
                                },
                                {
                                    "type": "Block",
                                    "range": [
                                        804,
                                        820
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "name": "err_msg",
                                            "range": [
                                                805,
                                                812
                                            ],
                                            "children": [],
                                            "content": ")):\nerr_msg=error_message("
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "range": [
                                                814,
                                                819
                                            ],
                                            "children": [],
                                            "content": ",'auth value is not enclosed with `backticks`')\nerr_msgs."
                                        }
                                    ],
                                    "content": "backtick)):\nerr_msg=error_message(line_num,'auth value is not enclosed with `backticks`')\nerr_msgs.append"
                                }
                            ],
                            "content": "backtick='`'\nif auth!='No' and(not auth.startswith(backtick)or not auth.endswith(backtick)):\nerr_msg=error_message(line_num,'auth value is not enclosed with `backticks`')\nerr_msgs.append"
                        },
                        {
                            "type": "IfStatement",
                            "range": [
                                822,
                                852
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "range": [
                                        823,
                                        833
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "range": [
                                                824,
                                                830
                                            ],
                                            "children": [],
                                            "content": "\n\nif auth.replace("
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "operator": "not in",
                                            "range": [
                                                831,
                                                833
                                            ],
                                            "children": [],
                                            "content": "backtick,''"
                                        }
                                    ],
                                    "content": ")\n\nif auth.replace(backtick,''"
                                },
                                {
                                    "type": "Block",
                                    "range": [
                                        835,
                                        852
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "name": "err_msg",
                                            "range": [
                                                836,
                                                844
                                            ],
                                            "children": [],
                                            "content": "in auth_keys:\nerr_msg=error_message(line_num"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "range": [
                                                846,
                                                851
                                            ],
                                            "children": [],
                                            "content": "f '{auth} is not a valid Auth option')\nerr_msgs."
                                        }
                                    ],
                                    "content": "not in auth_keys:\nerr_msg=error_message(line_num,f '{auth} is not a valid Auth option')\nerr_msgs.append"
                                }
                            ],
                            "content": "err_msg)\n\nif auth.replace(backtick,'')not in auth_keys:\nerr_msg=error_message(line_num,f '{auth} is not a valid Auth option')\nerr_msgs.append"
                        },
                        {
                            "type": "ReturnStatement",
                            "range": [
                                854,
                                855
                            ],
                            "children": [],
                            "content": "err_msg)"
                        }
                    ],
                    "content": "[str]:\n\nerr_msgs=[]\n\nbacktick='`'\nif auth!='No' and(not auth.startswith(backtick)or not auth.endswith(backtick)):\nerr_msg=error_message(line_num,'auth value is not enclosed with `backticks`')\nerr_msgs.append(err_msg)\n\nif auth.replace(backtick,'')not in auth_keys:\nerr_msg=error_message(line_num,f '{auth} is not a valid Auth option')\nerr_msgs.append(err_msg)\n\n"
                }
            ],
            "content": "err_msgs\n\n\ndef check_auth(line_num:int,auth:str)->List[str]:\n\nerr_msgs=[]\n\nbacktick='`'\nif auth!='No' and(not auth.startswith(backtick)or not auth.endswith(backtick)):\nerr_msg=error_message(line_num,'auth value is not enclosed with `backticks`')\nerr_msgs.append(err_msg)\n\nif auth.replace(backtick,'')not in auth_keys:\nerr_msg=error_message(line_num,f '{auth} is not a valid Auth option')\nerr_msgs.append(err_msg)\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "check_https",
            "range": [
                858,
                912
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "line_num",
                    "range": [
                        861,
                        863
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "int",
                            "range": [
                                863,
                                863
                            ],
                            "content": "def"
                        }
                    ],
                    "content": "\n\ndef"
                },
                {
                    "type": "Parameter",
                    "name": "https",
                    "range": [
                        865,
                        867
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                867,
                                867
                            ],
                            "content": ":"
                        }
                    ],
                    "content": "(line_num:"
                },
                {
                    "type": "ReturnType",
                    "name": "List[str]",
                    "range": [
                        871,
                        874
                    ],
                    "content": ":str)-"
                },
                {
                    "type": "VariableDecl",
                    "name": "err_msgs",
                    "range": [
                        878,
                        881
                    ],
                    "children": [
                        {
                            "type": "ArrayLiteral",
                            "range": [
                                880,
                                881
                            ],
                            "content": ":\n"
                        }
                    ],
                    "content": "str]:\n"
                },
                {
                    "type": "IfStatement",
                    "range": [
                        884,
                        907
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "range": [
                                885,
                                888
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "operator": "not in",
                                    "range": [
                                        885,
                                        888
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "https",
                                            "range": [
                                                885,
                                                885
                                            ],
                                            "content": "["
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "https_keys",
                                            "range": [
                                                888,
                                                888
                                            ],
                                            "content": "\n"
                                        }
                                    ],
                                    "content": "[]\n\n"
                                }
                            ],
                            "content": "[]\n\n"
                        },
                        {
                            "type": "Block",
                            "range": [
                                889,
                                907
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "err_msg",
                                    "range": [
                                        891,
                                        899
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "error_message",
                                            "range": [
                                                893,
                                                899
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "line_num",
                                                    "range": [
                                                        895,
                                                        895
                                                    ],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "TemplateLiteral",
                                                    "range": [
                                                        897,
                                                        898
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "https",
                                                            "range": [
                                                                898,
                                                                898
                                                            ],
                                                            "content": "error_message"
                                                        }
                                                    ],
                                                    "content": "=error_message"
                                                }
                                            ],
                                            "content": "https_keys:\nerr_msg=error_message("
                                        }
                                    ],
                                    "content": "not in https_keys:\nerr_msg=error_message("
                                },
                                {
                                    "type": "ExpressionStatement",
                                    "range": [
                                        901,
                                        906
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "append",
                                            "range": [
                                                903,
                                                906
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "err_msg",
                                                    "range": [
                                                        905,
                                                        905
                                                    ],
                                                    "content": "\n"
                                                }
                                            ],
                                            "content": "'{https} is not a valid HTTPS option')\nerr_msgs"
                                        }
                                    ],
                                    "content": ",f '{https} is not a valid HTTPS option')\nerr_msgs"
                                }
                            ],
                            "content": "if https not in https_keys:\nerr_msg=error_message(line_num,f '{https} is not a valid HTTPS option')\nerr_msgs."
                        }
                    ],
                    "content": "=[]\n\nif https not in https_keys:\nerr_msg=error_message(line_num,f '{https} is not a valid HTTPS option')\nerr_msgs."
                },
                {
                    "type": "ReturnStatement",
                    "range": [
                        909,
                        910
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "err_msgs",
                            "range": [
                                910,
                                910
                            ],
                            "content": "err_msg"
                        }
                    ],
                    "content": "(err_msg"
                }
            ],
            "content": "return err_msgs\n\n\ndef check_https(line_num:int,https:str)->List[str]:\n\nerr_msgs=[]\n\nif https not in https_keys:\nerr_msg=error_message(line_num,f '{https} is not a valid HTTPS option')\nerr_msgs.append(err_msg)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "check_cors",
            "range": [
                913,
                967
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        915,
                        923
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "line_num",
                            "range": [
                                916,
                                918
                            ],
                            "children": [],
                            "content": "\n\n\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "cors",
                            "range": [
                                920,
                                922
                            ],
                            "children": [],
                            "content": "check_cors(line_num"
                        }
                    ],
                    "content": "err_msgs\n\n\ndef check_cors(line_num:"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        924,
                        929
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "List[str]",
                            "range": [
                                926,
                                929
                            ],
                            "children": [],
                            "content": "cors:str)"
                        }
                    ],
                    "content": "int,cors:str)"
                },
                {
                    "type": "Block",
                    "name": "body",
                    "range": [
                        931,
                        967
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "err_msgs",
                            "range": [
                                933,
                                936
                            ],
                            "children": [],
                            "content": "[str]:"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                939,
                                962
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        940,
                                        943
                                    ],
                                    "children": [],
                                    "content": "=[]\n"
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        945,
                                        962
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "name": "err_msg",
                                            "range": [
                                                946,
                                                954
                                            ],
                                            "children": [],
                                            "content": "cors not in cors_keys:\nerr_msg=error_message"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "append_err_msg",
                                            "range": [
                                                956,
                                                961
                                            ],
                                            "children": [],
                                            "content": "line_num,f '{cors} is not a valid CORS option')\n"
                                        }
                                    ],
                                    "content": "if cors not in cors_keys:\nerr_msg=error_message(line_num,f '{cors} is not a valid CORS option')\nerr_msgs"
                                }
                            ],
                            "content": "err_msgs=[]\n\nif cors not in cors_keys:\nerr_msg=error_message(line_num,f '{cors} is not a valid CORS option')\nerr_msgs"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_statement",
                            "range": [
                                964,
                                965
                            ],
                            "children": [],
                            "content": "append("
                        }
                    ],
                    "content": ">List[str]:\n\nerr_msgs=[]\n\nif cors not in cors_keys:\nerr_msg=error_message(line_num,f '{cors} is not a valid CORS option')\nerr_msgs.append(err_msg)"
                }
            ],
            "content": "\nreturn err_msgs\n\n\ndef check_cors(line_num:int,cors:str)->List[str]:\n\nerr_msgs=[]\n\nif cors not in cors_keys:\nerr_msg=error_message(line_num,f '{cors} is not a valid CORS option')\nerr_msgs.append(err_msg)"
        },
        {
            "type": "FunctionDecl",
            "name": "check_entry",
            "range": [
                968,
                1102
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        970,
                        981
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "line_num",
                            "range": [
                                971,
                                973
                            ],
                            "children": [],
                            "content": "err_msgs\n\n"
                        },
                        {
                            "type": "Parameter",
                            "name": "segments",
                            "range": [
                                975,
                                980
                            ],
                            "children": [],
                            "content": "def check_entry(line_num:int"
                        }
                    ],
                    "content": "return err_msgs\n\n\ndef check_entry(line_num:int,"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        982,
                        987
                    ],
                    "children": [],
                    "content": "segments:List[str]"
                },
                {
                    "type": "Block",
                    "name": "body",
                    "range": [
                        989,
                        1102
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "raw_title",
                            "range": [
                                991,
                                996
                            ],
                            "children": [],
                            "content": "List[str]:\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "description",
                            "range": [
                                998,
                                1003
                            ],
                            "children": [],
                            "content": "raw_title=segments[index_title]"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "auth",
                            "range": [
                                1005,
                                1010
                            ],
                            "children": [],
                            "content": "description=segments[index_desc]"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "https",
                            "range": [
                                1012,
                                1017
                            ],
                            "children": [],
                            "content": "auth=segments[index_auth]"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "cors",
                            "range": [
                                1019,
                                1024
                            ],
                            "children": [],
                            "content": "https=segments[index_https]"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "title_err_msgs",
                            "range": [
                                1027,
                                1034
                            ],
                            "children": [],
                            "content": "=segments[index_cors]\n\ntitle_err_msgs"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "desc_err_msgs",
                            "range": [
                                1036,
                                1043
                            ],
                            "children": [],
                            "content": "check_title(line_num,raw_title)\ndesc_err_msgs"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "auth_err_msgs",
                            "range": [
                                1045,
                                1052
                            ],
                            "children": [],
                            "content": "check_description(line_num,description)\nauth_err_msgs"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "https_err_msgs",
                            "range": [
                                1054,
                                1061
                            ],
                            "children": [],
                            "content": "check_auth(line_num,auth)\nhttps_err_msgs"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "cors_err_msgs",
                            "range": [
                                1063,
                                1070
                            ],
                            "children": [],
                            "content": "check_https(line_num,https)\ncors_err_msgs"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "err_msgs",
                            "range": [
                                1073,
                                1096
                            ],
                            "children": [],
                            "content": "(line_num,cors)\n\nerr_msgs=[\n*title_err_msgs,\n*desc_err_msgs,\n*auth_err_msgs,\n*"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                1099,
                                1100
                            ],
                            "children": [],
                            "content": "\n*"
                        }
                    ],
                    "content": "->List[str]:\n\nraw_title=segments[index_title]\ndescription=segments[index_desc]\nauth=segments[index_auth]\nhttps=segments[index_https]\ncors=segments[index_cors]\n\ntitle_err_msgs=check_title(line_num,raw_title)\ndesc_err_msgs=check_description(line_num,description)\nauth_err_msgs=check_auth(line_num,auth)\nhttps_err_msgs=check_https(line_num,https)\ncors_err_msgs=check_cors(line_num,cors)\n\nerr_msgs=[\n*title_err_msgs,\n*desc_err_msgs,\n*auth_err_msgs,\n*https_err_msgs,\n*cors_err_msgs\n"
                }
            ],
            "content": "\n\nreturn err_msgs\n\n\ndef check_entry(line_num:int,segments:List[str])->List[str]:\n\nraw_title=segments[index_title]\ndescription=segments[index_desc]\nauth=segments[index_auth]\nhttps=segments[index_https]\ncors=segments[index_cors]\n\ntitle_err_msgs=check_title(line_num,raw_title)\ndesc_err_msgs=check_description(line_num,description)\nauth_err_msgs=check_auth(line_num,auth)\nhttps_err_msgs=check_https(line_num,https)\ncors_err_msgs=check_cors(line_num,cors)\n\nerr_msgs=[\n*title_err_msgs,\n*desc_err_msgs,\n*auth_err_msgs,\n*https_err_msgs,\n*cors_err_msgs\n"
        },
        {
            "type": "FunctionDecl",
            "name": "check_file_format",
            "range": [
                1103,
                1515
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "lines",
                    "range": [
                        1105,
                        1112
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "lines",
                            "range": [
                                1106,
                                1111
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "List[str]",
                                    "range": [
                                        1107,
                                        1111
                                    ],
                                    "children": [],
                                    "content": "err_msgs\n\n\ndef"
                                }
                            ],
                            "content": "return err_msgs\n\n\ndef"
                        }
                    ],
                    "content": "\nreturn err_msgs\n\n\ndef check_file_format"
                },
                {
                    "type": "ReturnType",
                    "name": "List[str]",
                    "range": [
                        1113,
                        1118
                    ],
                    "children": [],
                    "content": "(lines:List[str"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1119,
                        1515
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "err_msgs",
                            "range": [
                                1122,
                                1125
                            ],
                            "children": [],
                            "content": ">List[str"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "category_title_in_index",
                            "range": [
                                1127,
                                1130
                            ],
                            "children": [],
                            "content": ":\n\nerr_msgs"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "alphabetical_err_msgs",
                            "range": [
                                1133,
                                1138
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "check_alphabetical_order",
                                    "range": [
                                        1135,
                                        1138
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "lines",
                                            "range": [
                                                1136,
                                                1138
                                            ],
                                            "children": [],
                                            "content": "=[]"
                                        }
                                    ],
                                    "content": "category_title_in_index=[]"
                                }
                            ],
                            "content": "]\ncategory_title_in_index=[]"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "err_msgs.extend(alphabetical_err_msgs)",
                            "range": [
                                1140,
                                1145
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "extend",
                                    "range": [
                                        1141,
                                        1145
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "alphabetical_err_msgs",
                                            "range": [
                                                1143,
                                                1145
                                            ],
                                            "children": [],
                                            "content": "check_alphabetical_order(lines"
                                        }
                                    ],
                                    "content": "alphabetical_err_msgs=check_alphabetical_order(lines"
                                }
                            ],
                            "content": "\nalphabetical_err_msgs=check_alphabetical_order(lines"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "num_in_category",
                            "range": [
                                1148,
                                1153
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "min_entries_per_category + 1",
                                    "range": [
                                        1150,
                                        1152
                                    ],
                                    "children": [],
                                    "content": "extend(alphabetical_err_msgs"
                                }
                            ],
                            "content": "err_msgs.extend(alphabetical_err_msgs)"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "category",
                            "range": [
                                1154,
                                1157
                            ],
                            "children": [],
                            "content": "\n\nnum_in_category="
                        },
                        {
                            "type": "VariableDecl",
                            "name": "category_line",
                            "range": [
                                1158,
                                1161
                            ],
                            "children": [],
                            "content": "min_entries_per_category+1\n"
                        },
                        {
                            "type": "ForStatement",
                            "name": "for line_num, line_content in enumerate(lines):",
                            "range": [
                                1163,
                                1511
                            ],
                            "children": [
                                {
                                    "type": "VariableDecl",
                                    "name": "line_num, line_content",
                                    "range": [
                                        1164,
                                        1171
                                    ],
                                    "children": [],
                                    "content": "''\ncategory_line=0\n\nfor"
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "enumerate",
                                    "range": [
                                        1168,
                                        1171
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "lines",
                                            "range": [
                                                1169,
                                                1171
                                            ],
                                            "children": [],
                                            "content": "\n\nfor"
                                        }
                                    ],
                                    "content": "0\n\nfor"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        1172,
                                        1511
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDecl",
                                            "name": "category_title_match",
                                            "range": [
                                                1175,
                                                1183
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "match",
                                                    "range": [
                                                        1177,
                                                        1183
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "line_content",
                                                            "range": [
                                                                1180,
                                                                1182
                                                            ],
                                                            "children": [],
                                                            "content": ":\n\n"
                                                        }
                                                    ],
                                                    "content": "(lines):\n\ncategory_title_match"
                                                }
                                            ],
                                            "content": "in enumerate(lines):\n\ncategory_title_match"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if category_title_match:",
                                            "range": [
                                                1184,
                                                1199
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "category_title_in_index.append(category_title_match.group(1))",
                                                    "range": [
                                                        1188,
                                                        1198
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "append",
                                                            "range": [
                                                                1189,
                                                                1198
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "category_title_match.group(1)",
                                                                    "range": [
                                                                        1191,
                                                                        1197
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nif category_title_match:\ncategory_title_in_index."
                                                                }
                                                            ],
                                                            "content": "line_content)\nif category_title_match:\ncategory_title_in_index.append"
                                                        }
                                                    ],
                                                    "content": "(line_content)\nif category_title_match:\ncategory_title_in_index.append"
                                                }
                                            ],
                                            "content": "=category_title_in_index_re.match(line_content)\nif category_title_match:\ncategory_title_in_index.append("
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if line_content.startswith(anchor):",
                                            "range": [
                                                1212,
                                                1281
                                            ],
                                            "children": [
                                                {
                                                    "type": "VariableDecl",
                                                    "name": "category_match",
                                                    "range": [
                                                        1221,
                                                        1229
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "match",
                                                            "range": [
                                                                1223,
                                                                1229
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "line_content",
                                                                    "range": [
                                                                        1226,
                                                                        1228
                                                                    ],
                                                                    "children": [],
                                                                    "content": "):\n"
                                                                }
                                                            ],
                                                            "content": "startswith(anchor):\ncategory_match"
                                                        }
                                                    ],
                                                    "content": "line_content.startswith(anchor):\ncategory_match"
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "name": "if category_match:",
                                                    "range": [
                                                        1230,
                                                        1281
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "IfStatement",
                                                            "name": "if category_match.group(1) not in category_title_in_index:",
                                                            "range": [
                                                                1234,
                                                                1262
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "VariableDecl",
                                                                    "name": "err_msg",
                                                                    "range": [
                                                                        1246,
                                                                        1255
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "error_message",
                                                                            "range": [
                                                                                1248,
                                                                                1255
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ArgumentList",
                                                                                    "name": "line_num, f'category header ({category_match.group(1)}) not added to Index section'",
                                                                                    "range": [
                                                                                        1249,
                                                                                        1254
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "not in category_title_in_index:\nerr_msg"
                                                                                }
                                                                            ],
                                                                            "content": ")not in category_title_in_index:\nerr_msg="
                                                                        }
                                                                    ],
                                                                    "content": "(1)not in category_title_in_index:\nerr_msg="
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "name": "err_msgs.append(err_msg)",
                                                                    "range": [
                                                                        1256,
                                                                        1261
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "append",
                                                                            "range": [
                                                                                1257,
                                                                                1261
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ArgumentList",
                                                                                    "name": "err_msg",
                                                                                    "range": [
                                                                                        1259,
                                                                                        1261
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": ",f 'category header ({category_match.group(1)}) not added to Index section'"
                                                                                }
                                                                            ],
                                                                            "content": "(line_num,f 'category header ({category_match.group(1)}) not added to Index section'"
                                                                        }
                                                                    ],
                                                                    "content": "error_message(line_num,f 'category header ({category_match.group(1)}) not added to Index section'"
                                                                }
                                                            ],
                                                            "content": "(line_content)\nif category_match:\nif category_match.group(1)not in category_title_in_index:\nerr_msg=error_message(line_num,f 'category header ({category_match.group(1)}) not added to Index section')"
                                                        },
                                                        {
                                                            "type": "ElseStatement",
                                                            "name": "else:",
                                                            "range": [
                                                                1263,
                                                                1281
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "VariableDecl",
                                                                    "name": "err_msg",
                                                                    "range": [
                                                                        1266,
                                                                        1274
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "error_message",
                                                                            "range": [
                                                                                1268,
                                                                                1274
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ArgumentList",
                                                                                    "name": "line_num, 'category header is not formatted correctly'",
                                                                                    "range": [
                                                                                        1269,
                                                                                        1273
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": ")\nelse:\n"
                                                                                }
                                                                            ],
                                                                            "content": "err_msg)\nelse:\nerr_msg"
                                                                        }
                                                                    ],
                                                                    "content": "append(err_msg)\nelse:\nerr_msg"
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "name": "err_msgs.append(err_msg)",
                                                                    "range": [
                                                                        1275,
                                                                        1280
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "append",
                                                                            "range": [
                                                                                1276,
                                                                                1280
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ArgumentList",
                                                                                    "name": "err_msg",
                                                                                    "range": [
                                                                                        1278,
                                                                                        1280
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "line_num,'category header is not formatted correctly'"
                                                                                }
                                                                            ],
                                                                            "content": "error_message(line_num,'category header is not formatted correctly'"
                                                                        }
                                                                    ],
                                                                    "content": "=error_message(line_num,'category header is not formatted correctly'"
                                                                }
                                                            ],
                                                            "content": "\nerr_msgs.append(err_msg)\nelse:\nerr_msg=error_message(line_num,'category header is not formatted correctly')"
                                                        }
                                                    ],
                                                    "content": "=anchor_re.match(line_content)\nif category_match:\nif category_match.group(1)not in category_title_in_index:\nerr_msg=error_message(line_num,f 'category header ({category_match.group(1)}) not added to Index section')\nerr_msgs.append(err_msg)\nelse:\nerr_msg=error_message(line_num,'category header is not formatted correctly')"
                                                }
                                            ],
                                            "content": "category for the minimum number of entries\nif line_content.startswith(anchor):\ncategory_match=anchor_re.match(line_content)\nif category_match:\nif category_match.group(1)not in category_title_in_index:\nerr_msg=error_message(line_num,f 'category header ({category_match.group(1)}) not added to Index section')\nerr_msgs.append(err_msg)\nelse:\nerr_msg=error_message(line_num,'category header is not formatted correctly')"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if num_in_category < min_entries_per_category:",
                                            "range": [
                                                1283,
                                                1305
                                            ],
                                            "children": [
                                                {
                                                    "type": "VariableDecl",
                                                    "name": "err_msg",
                                                    "range": [
                                                        1289,
                                                        1298
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "error_message",
                                                            "range": [
                                                                1291,
                                                                1298
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "category_line, f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'",
                                                                    "range": [
                                                                        1292,
                                                                        1297
                                                                    ],
                                                                    "children": [],
                                                                    "content": "num_in_category<min_entries_per_category:\nerr_msg"
                                                                }
                                                            ],
                                                            "content": "if num_in_category<min_entries_per_category:\nerr_msg="
                                                        }
                                                    ],
                                                    "content": "\n\nif num_in_category<min_entries_per_category:\nerr_msg="
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "err_msgs.append(err_msg)",
                                                    "range": [
                                                        1299,
                                                        1304
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "append",
                                                            "range": [
                                                                1300,
                                                                1304
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "err_msg",
                                                                    "range": [
                                                                        1302,
                                                                        1304
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",f '{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'"
                                                                }
                                                            ],
                                                            "content": "(category_line,f '{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'"
                                                        }
                                                    ],
                                                    "content": "error_message(category_line,f '{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'"
                                                }
                                            ],
                                            "content": "err_msgs.append(err_msg)\n\nif num_in_category<min_entries_per_category:\nerr_msg=error_message(category_line,f '{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "category = line_content.split(' ')[1]",
                                            "range": [
                                                1307,
                                                1318
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "split",
                                                    "range": [
                                                        1311,
                                                        1317
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "' '",
                                                            "range": [
                                                                1312,
                                                                1314
                                                            ],
                                                            "children": [],
                                                            "content": ")\n\n"
                                                        }
                                                    ],
                                                    "content": "err_msg)\n\ncategory=line_content"
                                                }
                                            ],
                                            "content": "err_msgs.append(err_msg)\n\ncategory=line_content."
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "category_line = line_num",
                                            "range": [
                                                1319,
                                                1322
                                            ],
                                            "children": [],
                                            "content": "split(' ')"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "num_in_category = 0",
                                            "range": [
                                                1323,
                                                1326
                                            ],
                                            "children": [],
                                            "content": "[1]\n"
                                        },
                                        {
                                            "type": "ContinueStatement",
                                            "name": "continue",
                                            "range": [
                                                1327,
                                                1328
                                            ],
                                            "children": [],
                                            "content": "category_line="
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if not line_content.startswith('|') or line_content.startswith('|---'):",
                                            "range": [
                                                1340,
                                                1358
                                            ],
                                            "children": [
                                                {
                                                    "type": "ContinueStatement",
                                                    "name": "continue",
                                                    "range": [
                                                        1357,
                                                        1358
                                                    ],
                                                    "children": [],
                                                    "content": "line_content."
                                                }
                                            ],
                                            "content": "lines that we do not care about\nif not line_content.startswith('|')or line_content."
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "num_in_category += 1",
                                            "range": [
                                                1360,
                                                1364
                                            ],
                                            "children": [],
                                            "content": "('|---'):\n"
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "segments",
                                            "range": [
                                                1365,
                                                1378
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "split",
                                                    "range": [
                                                        1369,
                                                        1377
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "'|'",
                                                            "range": [
                                                                1370,
                                                                1372
                                                            ],
                                                            "children": [],
                                                            "content": "=1\n"
                                                        }
                                                    ],
                                                    "content": "+=1\nsegments=line_content.split"
                                                }
                                            ],
                                            "content": "continue\n\nnum_in_category+=1\nsegments=line_content.split("
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if len(segments) < num_segments:",
                                            "range": [
                                                1380,
                                                1407
                                            ],
                                            "children": [
                                                {
                                                    "type": "VariableDecl",
                                                    "name": "err_msg",
                                                    "range": [
                                                        1389,
                                                        1398
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "error_message",
                                                            "range": [
                                                                1391,
                                                                1398
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "line_num, f'entry does not have all the required columns (have {len(segments)}, need {num_segments})'",
                                                                    "range": [
                                                                        1392,
                                                                        1397
                                                                    ],
                                                                    "children": [],
                                                                    "content": ")<num_segments:\nerr_msg"
                                                                }
                                                            ],
                                                            "content": "segments)<num_segments:\nerr_msg="
                                                        }
                                                    ],
                                                    "content": "len(segments)<num_segments:\nerr_msg="
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "err_msgs.append(err_msg)",
                                                    "range": [
                                                        1399,
                                                        1404
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "append",
                                                            "range": [
                                                                1400,
                                                                1404
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ArgumentList",
                                                                    "name": "err_msg",
                                                                    "range": [
                                                                        1402,
                                                                        1404
                                                                    ],
                                                                    "children": [],
                                                                    "content": ",f 'entry does not have all the required columns (have {len(segments)}, need {num_segments})'"
                                                                }
                                                            ],
                                                            "content": "(line_num,f 'entry does not have all the required columns (have {len(segments)}, need {num_segments})'"
                                                        }
                                                    ],
                                                    "content": "error_message(line_num,f 'entry does not have all the required columns (have {len(segments)}, need {num_segments})'"
                                                },
                                                {
                                                    "type": "ContinueStatement",
                                                    "name": "continue",
                                                    "range": [
                                                        1405,
                                                        1407
                                                    ],
                                                    "children": [],
                                                    "content": ")\nerr_msgs"
                                                }
                                            ],
                                            "content": ")[1:-1]\nif len(segments)<num_segments:\nerr_msg=error_message(line_num,f 'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\nerr_msgs"
                                        },
                                        {
                                            "type": "ForStatement",
                                            "name": "for segment in segments:",
                                            "range": [
                                                1409,
                                                1480
                                            ],
                                            "children": [
                                                {
                                                    "type": "VariableDecl",
                                                    "name": "segment",
                                                    "range": [
                                                        1410,
                                                        1413
                                                    ],
                                                    "children": [],
                                                    "content": "(err_msg)\n"
                                                },
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "",
                                                    "range": [
                                                        1414,
                                                        1480
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "IfStatement",
                                                            "name": "if len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.rstrip()) != 1:",
                                                            "range": [
                                                                1428,
                                                                1479
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "VariableDecl",
                                                                    "name": "err_msg",
                                                                    "range": [
                                                                        1464,
                                                                        1471
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "error_message",
                                                                            "range": [
                                                                                1466,
                                                                                1471
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ArgumentList",
                                                                                    "name": "line_num, 'each segment must start and end with exactly 1 space'",
                                                                                    "range": [
                                                                                        1467,
                                                                                        1470
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "!=1:"
                                                                                }
                                                                            ],
                                                                            "content": ")!=1:\n"
                                                                        }
                                                                    ],
                                                                    "content": "())!=1:\n"
                                                                },
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "name": "err_msgs.append(err_msg)",
                                                                    "range": [
                                                                        1472,
                                                                        1478
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "CallExpression",
                                                                            "name": "append",
                                                                            "range": [
                                                                                1473,
                                                                                1478
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "ArgumentList",
                                                                                    "name": "err_msg",
                                                                                    "range": [
                                                                                        1475,
                                                                                        1477
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "(line_num,"
                                                                                }
                                                                            ],
                                                                            "content": "=error_message(line_num,'each segment must start and end with exactly 1 space'"
                                                                        }
                                                                    ],
                                                                    "content": "err_msg=error_message(line_num,'each segment must start and end with exactly 1 space'"
                                                                }
                                                            ],
                                                            "content": "start and end with exactly1space\nif len(segment)-len(segment.lstrip())!=1or len(segment)-len(segment.rstrip())!=1:\nerr_msg=error_message(line_num,'each segment must start and end with exactly 1 space')"
                                                        }
                                                    ],
                                                    "content": "continue\n\nfor segment in segments:\n#every line segment should start and end with exactly1space\nif len(segment)-len(segment.lstrip())!=1or len(segment)-len(segment.rstrip())!=1:\nerr_msg=error_message(line_num,'each segment must start and end with exactly 1 space')\n"
                                                }
                                            ],
                                            "content": "append(err_msg)\ncontinue\n\nfor segment in segments:\n#every line segment should start and end with exactly1space\nif len(segment)-len(segment.lstrip())!=1or len(segment)-len(segment.rstrip())!=1:\nerr_msg=error_message(line_num,'each segment must start and end with exactly 1 space')\n"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "segments = [segment.strip() for segment in segments]",
                                            "range": [
                                                1481,
                                                1494
                                            ],
                                            "children": [
                                                {
                                                    "type": "ListComprehension",
                                                    "name": "segment.strip() for segment in segments",
                                                    "range": [
                                                        1484,
                                                        1493
                                                    ],
                                                    "children": [],
                                                    "content": "(err_msg)\n\nsegments=[segment."
                                                }
                                            ],
                                            "content": "err_msgs.append(err_msg)\n\nsegments=[segment.strip"
                                        },
                                        {
                                            "type": "VariableDecl",
                                            "name": "entry_err_msgs",
                                            "range": [
                                                1495,
                                                1503
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "check_entry",
                                                    "range": [
                                                        1497,
                                                        1503
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "line_num, segments",
                                                            "range": [
                                                                1498,
                                                                1502
                                                            ],
                                                            "children": [],
                                                            "content": "segment in segments]\n"
                                                        }
                                                    ],
                                                    "content": "for segment in segments]\nentry_err_msgs"
                                                }
                                            ],
                                            "content": "()for segment in segments]\nentry_err_msgs"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "err_msgs.extend(entry_err_msgs)",
                                            "range": [
                                                1504,
                                                1509
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "extend",
                                                    "range": [
                                                        1505,
                                                        1509
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "entry_err_msgs",
                                                            "range": [
                                                                1507,
                                                                1509
                                                            ],
                                                            "children": [],
                                                            "content": "line_num,segments"
                                                        }
                                                    ],
                                                    "content": "check_entry(line_num,segments"
                                                }
                                            ],
                                            "content": "=check_entry(line_num,segments"
                                        }
                                    ],
                                    "content": "line_num,line_content in enumerate(lines):\n\ncategory_title_match=category_title_in_index_re.match(line_content)\nif category_title_match:\ncategory_title_in_index.append(category_title_match.group(1))\n\n#check each category for the minimum number of entries\nif line_content.startswith(anchor):\ncategory_match=anchor_re.match(line_content)\nif category_match:\nif category_match.group(1)not in category_title_in_index:\nerr_msg=error_message(line_num,f 'category header ({category_match.group(1)}) not added to Index section')\nerr_msgs.append(err_msg)\nelse:\nerr_msg=error_message(line_num,'category header is not formatted correctly')\nerr_msgs.append(err_msg)\n\nif num_in_category<min_entries_per_category:\nerr_msg=error_message(category_line,f '{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\nerr_msgs.append(err_msg)\n\ncategory=line_content.split(' ')[1]\ncategory_line=line_num\nnum_in_category=0\ncontinue\n\n#skips lines that we do not care about\nif not line_content.startswith('|')or line_content.startswith('|---'):\ncontinue\n\nnum_in_category+=1\nsegments=line_content.split('|')[1:-1]\nif len(segments)<num_segments:\nerr_msg=error_message(line_num,f 'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\nerr_msgs.append(err_msg)\ncontinue\n\nfor segment in segments:\n#every line segment should start and end with exactly1space\nif len(segment)-len(segment.lstrip())!=1or len(segment)-len(segment.rstrip())!=1:\nerr_msg=error_message(line_num,'each segment must start and end with exactly 1 space')\nerr_msgs.append(err_msg)\n\nsegments=[segment.strip()for segment in segments]\nentry_err_msgs=check_entry(line_num,segments)\n"
                                }
                            ],
                            "content": "=''\ncategory_line=0\n\nfor line_num,line_content in enumerate(lines):\n\ncategory_title_match=category_title_in_index_re.match(line_content)\nif category_title_match:\ncategory_title_in_index.append(category_title_match.group(1))\n\n#check each category for the minimum number of entries\nif line_content.startswith(anchor):\ncategory_match=anchor_re.match(line_content)\nif category_match:\nif category_match.group(1)not in category_title_in_index:\nerr_msg=error_message(line_num,f 'category header ({category_match.group(1)}) not added to Index section')\nerr_msgs.append(err_msg)\nelse:\nerr_msg=error_message(line_num,'category header is not formatted correctly')\nerr_msgs.append(err_msg)\n\nif num_in_category<min_entries_per_category:\nerr_msg=error_message(category_line,f '{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\nerr_msgs.append(err_msg)\n\ncategory=line_content.split(' ')[1]\ncategory_line=line_num\nnum_in_category=0\ncontinue\n\n#skips lines that we do not care about\nif not line_content.startswith('|')or line_content.startswith('|---'):\ncontinue\n\nnum_in_category+=1\nsegments=line_content.split('|')[1:-1]\nif len(segments)<num_segments:\nerr_msg=error_message(line_num,f 'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\nerr_msgs.append(err_msg)\ncontinue\n\nfor segment in segments:\n#every line segment should start and end with exactly1space\nif len(segment)-len(segment.lstrip())!=1or len(segment)-len(segment.rstrip())!=1:\nerr_msg=error_message(line_num,'each segment must start and end with exactly 1 space')\nerr_msgs.append(err_msg)\n\nsegments=[segment.strip()for segment in segments]\nentry_err_msgs=check_entry(line_num,segments)\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return err_msgs",
                            "range": [
                                1512,
                                1514
                            ],
                            "children": [],
                            "content": "err_msgs.extend"
                        }
                    ],
                    "content": "])->List[str]:\n\nerr_msgs=[]\ncategory_title_in_index=[]\n\nalphabetical_err_msgs=check_alphabetical_order(lines)\nerr_msgs.extend(alphabetical_err_msgs)\n\nnum_in_category=min_entries_per_category+1\ncategory=''\ncategory_line=0\n\nfor line_num,line_content in enumerate(lines):\n\ncategory_title_match=category_title_in_index_re.match(line_content)\nif category_title_match:\ncategory_title_in_index.append(category_title_match.group(1))\n\n#check each category for the minimum number of entries\nif line_content.startswith(anchor):\ncategory_match=anchor_re.match(line_content)\nif category_match:\nif category_match.group(1)not in category_title_in_index:\nerr_msg=error_message(line_num,f 'category header ({category_match.group(1)}) not added to Index section')\nerr_msgs.append(err_msg)\nelse:\nerr_msg=error_message(line_num,'category header is not formatted correctly')\nerr_msgs.append(err_msg)\n\nif num_in_category<min_entries_per_category:\nerr_msg=error_message(category_line,f '{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\nerr_msgs.append(err_msg)\n\ncategory=line_content.split(' ')[1]\ncategory_line=line_num\nnum_in_category=0\ncontinue\n\n#skips lines that we do not care about\nif not line_content.startswith('|')or line_content.startswith('|---'):\ncontinue\n\nnum_in_category+=1\nsegments=line_content.split('|')[1:-1]\nif len(segments)<num_segments:\nerr_msg=error_message(line_num,f 'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\nerr_msgs.append(err_msg)\ncontinue\n\nfor segment in segments:\n#every line segment should start and end with exactly1space\nif len(segment)-len(segment.lstrip())!=1or len(segment)-len(segment.rstrip())!=1:\nerr_msg=error_message(line_num,'each segment must start and end with exactly 1 space')\nerr_msgs.append(err_msg)\n\nsegments=[segment.strip()for segment in segments]\nentry_err_msgs=check_entry(line_num,segments)\nerr_msgs.extend("
                }
            ],
            "content": "]\n\nreturn err_msgs\n\n\ndef check_file_format(lines:List[str])->List[str]:\n\nerr_msgs=[]\ncategory_title_in_index=[]\n\nalphabetical_err_msgs=check_alphabetical_order(lines)\nerr_msgs.extend(alphabetical_err_msgs)\n\nnum_in_category=min_entries_per_category+1\ncategory=''\ncategory_line=0\n\nfor line_num,line_content in enumerate(lines):\n\ncategory_title_match=category_title_in_index_re.match(line_content)\nif category_title_match:\ncategory_title_in_index.append(category_title_match.group(1))\n\n#check each category for the minimum number of entries\nif line_content.startswith(anchor):\ncategory_match=anchor_re.match(line_content)\nif category_match:\nif category_match.group(1)not in category_title_in_index:\nerr_msg=error_message(line_num,f 'category header ({category_match.group(1)}) not added to Index section')\nerr_msgs.append(err_msg)\nelse:\nerr_msg=error_message(line_num,'category header is not formatted correctly')\nerr_msgs.append(err_msg)\n\nif num_in_category<min_entries_per_category:\nerr_msg=error_message(category_line,f '{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\nerr_msgs.append(err_msg)\n\ncategory=line_content.split(' ')[1]\ncategory_line=line_num\nnum_in_category=0\ncontinue\n\n#skips lines that we do not care about\nif not line_content.startswith('|')or line_content.startswith('|---'):\ncontinue\n\nnum_in_category+=1\nsegments=line_content.split('|')[1:-1]\nif len(segments)<num_segments:\nerr_msg=error_message(line_num,f 'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\nerr_msgs.append(err_msg)\ncontinue\n\nfor segment in segments:\n#every line segment should start and end with exactly1space\nif len(segment)-len(segment.lstrip())!=1or len(segment)-len(segment.rstrip())!=1:\nerr_msg=error_message(line_num,'each segment must start and end with exactly 1 space')\nerr_msgs.append(err_msg)\n\nsegments=[segment.strip()for segment in segments]\nentry_err_msgs=check_entry(line_num,segments)\nerr_msgs.extend("
        },
        {
            "type": "FunctionDecl",
            "name": "main",
            "range": [
                1516,
                1593
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "filename",
                    "range": [
                        1519,
                        1521
                    ],
                    "children": [],
                    "content": "\nreturn err_msgs"
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        1525,
                        1525
                    ],
                    "children": [],
                    "content": "def"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        1527,
                        1593
                    ],
                    "children": [
                        {
                            "type": "WithStatement",
                            "name": "",
                            "range": [
                                1529,
                                1560
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "open",
                                    "range": [
                                        1530,
                                        1541
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "filename",
                                            "range": [
                                                1532,
                                                1532
                                            ],
                                            "children": [],
                                            "content": "-"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "mode",
                                            "range": [
                                                1534,
                                                1536
                                            ],
                                            "children": [],
                                            "content": "None:\n"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "encoding",
                                            "range": [
                                                1538,
                                                1540
                                            ],
                                            "children": [],
                                            "content": "with open("
                                        }
                                    ],
                                    "content": "str)->None:\n\nwith open(filename"
                                },
                                {
                                    "type": "VariableDecl",
                                    "name": "lines",
                                    "range": [
                                        1546,
                                        1559
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "list",
                                            "range": [
                                                1548,
                                                1559
                                            ],
                                            "children": [
                                                {
                                                    "type": "GeneratorExpression",
                                                    "name": "",
                                                    "range": [
                                                        1550,
                                                        1558
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "rstrip",
                                                            "range": [
                                                                1552,
                                                                1554
                                                            ],
                                                            "children": [],
                                                            "content": "file:\n"
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "line",
                                                            "range": [
                                                                1556,
                                                                1556
                                                            ],
                                                            "children": [],
                                                            "content": "="
                                                        },
                                                        {
                                                            "type": "Identifier",
                                                            "name": "file",
                                                            "range": [
                                                                1558,
                                                                1558
                                                            ],
                                                            "children": [],
                                                            "content": "("
                                                        }
                                                    ],
                                                    "content": ")as file:\nlines=list("
                                                }
                                            ],
                                            "content": "='utf-8')as file:\nlines=list(line"
                                        }
                                    ],
                                    "content": ",encoding='utf-8')as file:\nlines=list(line"
                                }
                            ],
                            "content": ":str)->None:\n\nwith open(filename,mode='r',encoding='utf-8')as file:\nlines=list(line."
                        },
                        {
                            "type": "VariableDecl",
                            "name": "file_format_err_msgs",
                            "range": [
                                1562,
                                1567
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "check_file_format",
                                    "range": [
                                        1564,
                                        1567
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "lines",
                                            "range": [
                                                1566,
                                                1566
                                            ],
                                            "children": [],
                                            "content": "in"
                                        }
                                    ],
                                    "content": "for line in file"
                                }
                            ],
                            "content": "()for line in file"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                1570,
                                1591
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "file_format_err_msgs",
                                    "range": [
                                        1571,
                                        1571
                                    ],
                                    "children": [],
                                    "content": "file_format_err_msgs"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        1573,
                                        1591
                                    ],
                                    "children": [
                                        {
                                            "type": "ForStatement",
                                            "name": "",
                                            "range": [
                                                1574,
                                                1584
                                            ],
                                            "children": [
                                                {
                                                    "type": "VariableDecl",
                                                    "name": "err_msg",
                                                    "range": [
                                                        1575,
                                                        1575
                                                    ],
                                                    "children": [],
                                                    "content": "lines"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "file_format_err_msgs",
                                                    "range": [
                                                        1577,
                                                        1577
                                                    ],
                                                    "children": [],
                                                    "content": "\n"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "",
                                                    "range": [
                                                        1579,
                                                        1584
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "print",
                                                            "range": [
                                                                1580,
                                                                1583
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "err_msg",
                                                                    "range": [
                                                                        1582,
                                                                        1582
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\n"
                                                                }
                                                            ],
                                                            "content": "file_format_err_msgs:\nfor"
                                                        }
                                                    ],
                                                    "content": "if file_format_err_msgs:\nfor err_msg"
                                                }
                                            ],
                                            "content": "(lines)\n\nif file_format_err_msgs:\nfor err_msg"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "sys.exit",
                                            "range": [
                                                1585,
                                                1590
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "1",
                                                    "range": [
                                                        1589,
                                                        1589
                                                    ],
                                                    "children": [],
                                                    "content": "print"
                                                }
                                            ],
                                            "content": "in file_format_err_msgs:\nprint("
                                        }
                                    ],
                                    "content": "check_file_format(lines)\n\nif file_format_err_msgs:\nfor err_msg in file_format_err_msgs:\nprint(err_msg"
                                }
                            ],
                            "content": "\nfile_format_err_msgs=check_file_format(lines)\n\nif file_format_err_msgs:\nfor err_msg in file_format_err_msgs:\nprint(err_msg"
                        }
                    ],
                    "content": "(filename:str)->None:\n\nwith open(filename,mode='r',encoding='utf-8')as file:\nlines=list(line.rstrip()for line in file)\n\nfile_format_err_msgs=check_file_format(lines)\n\nif file_format_err_msgs:\nfor err_msg in file_format_err_msgs:\nprint(err_msg)\n"
                }
            ],
            "content": "entry_err_msgs)\n\nreturn err_msgs\n\n\ndef main(filename:str)->None:\n\nwith open(filename,mode='r',encoding='utf-8')as file:\nlines=list(line.rstrip()for line in file)\n\nfile_format_err_msgs=check_file_format(lines)\n\nif file_format_err_msgs:\nfor err_msg in file_format_err_msgs:\nprint(err_msg)\n"
        }
    ],
    "content": "#-*-coding:utf-8-*-\n\nimport re\nimport sys\nfrom string import punctuation\nfrom typing import List,Tuple,Dict\n\n#Temporary replacement\n#The descriptions that contain()at the end must adapt to the new policy later\npunctuation=punctuation.replace('()','')\n\nanchor='###'\nauth_keys=['apiKey','OAuth','X-Mashape-Key','User-Agent','No']\nhttps_keys=['Yes','No']\ncors_keys=['Yes','No','Unknown']\n\nindex_title=0\nindex_desc=1\nindex_auth=2\nindex_https=3\nindex_cors=4\n\nnum_segments=5\nmin_entries_per_category=3\nmax_description_length=100\n\nanchor_re=re.compile(anchor+'\\s(.+)')\ncategory_title_in_index_re=re.compile('\\*\\s\\[(.*)\\]')\nlink_re=re.compile('\\[(.+)\\]\\((http.*)\\)')\n\n#Type aliases\nAPIList=List[str]\nCategories=Dict[str,APIList]\nCategoriesLineNumber=Dict[str,int]\n\n\ndef error_message(line_number:int,message:str)->str:\nline=line_number+1\nreturn f '(L{line:03d}) {message}'\n\n\ndef get_categories_content(contents:List[str])->Tuple[Categories,CategoriesLineNumber]:\n\ncategories={}\ncategory_line_num={}\n\nfor line_num,line_content in enumerate(contents):\n\nif line_content.startswith(anchor):\ncategory=line_content.split(anchor)[1].strip()\ncategories[category]=[]\ncategory_line_num[category]=line_num\ncontinue\n\nif not line_content.startswith('|')or line_content.startswith('|---'):\ncontinue\n\nraw_title=[\nraw_content.strip()for raw_content in line_content.split('|')[1:-1]\n][0]\n\ntitle_match=link_re.match(raw_title)\nif title_match:\ntitle=title_match.group(1).upper()\ncategories[category].append(title)\n\nreturn(categories,category_line_num)\n\n\ndef check_alphabetical_order(lines:List[str])->List[str]:\n\nerr_msgs=[]\n\ncategories,category_line_num=get_categories_content(contents=lines)\n\nfor category,api_list in categories.items():\nif sorted(api_list)!=api_list:\nerr_msg=error_message(\ncategory_line_num[category],\nf '{category} category is not alphabetical order'\n)\nerr_msgs.append(err_msg)\n\nreturn err_msgs\n\n\ndef check_title(line_num:int,raw_title:str)->List[str]:\n\nerr_msgs=[]\n\ntitle_match=link_re.match(raw_title)\n\n#url should be wrapped in \"[TITLE](LINK)\" Markdown syntax\nif not title_match:\nerr_msg=error_message(line_num,'Title syntax should be \"[TITLE](LINK)\"')\nerr_msgs.append(err_msg)\nelse:\n#do not allow \"... API\" in the entry title\ntitle=title_match.group(1)\nif title.upper().endswith(' API'):\nerr_msg=error_message(line_num,'Title should not end with \"... API\". Every entry is an API here!')\nerr_msgs.append(err_msg)\n\nreturn err_msgs\n\n\ndef check_description(line_num:int,description:str)->List[str]:\n\nerr_msgs=[]\n\nfirst_char=description[0]\nif first_char.upper()!=first_char:\nerr_msg=error_message(line_num,'first character of description is not capitalized')\nerr_msgs.append(err_msg)\n\nlast_char=description[-1]\nif last_char in punctuation:\nerr_msg=error_message(line_num,f 'description should not end with {last_char}')\nerr_msgs.append(err_msg)\n\ndesc_length=len(description)\nif desc_length>max_description_length:\nerr_msg=error_message(line_num,f 'description should not exceed {max_description_length} characters (currently {desc_length})')\nerr_msgs.append(err_msg)\n\nreturn err_msgs\n\n\ndef check_auth(line_num:int,auth:str)->List[str]:\n\nerr_msgs=[]\n\nbacktick='`'\nif auth!='No' and(not auth.startswith(backtick)or not auth.endswith(backtick)):\nerr_msg=error_message(line_num,'auth value is not enclosed with `backticks`')\nerr_msgs.append(err_msg)\n\nif auth.replace(backtick,'')not in auth_keys:\nerr_msg=error_message(line_num,f '{auth} is not a valid Auth option')\nerr_msgs.append(err_msg)\n\nreturn err_msgs\n\n\ndef check_https(line_num:int,https:str)->List[str]:\n\nerr_msgs=[]\n\nif https not in https_keys:\nerr_msg=error_message(line_num,f '{https} is not a valid HTTPS option')\nerr_msgs.append(err_msg)\n\nreturn err_msgs\n\n\ndef check_cors(line_num:int,cors:str)->List[str]:\n\nerr_msgs=[]\n\nif cors not in cors_keys:\nerr_msg=error_message(line_num,f '{cors} is not a valid CORS option')\nerr_msgs.append(err_msg)\n\nreturn err_msgs\n\n\ndef check_entry(line_num:int,segments:List[str])->List[str]:\n\nraw_title=segments[index_title]\ndescription=segments[index_desc]\nauth=segments[index_auth]\nhttps=segments[index_https]\ncors=segments[index_cors]\n\ntitle_err_msgs=check_title(line_num,raw_title)\ndesc_err_msgs=check_description(line_num,description)\nauth_err_msgs=check_auth(line_num,auth)\nhttps_err_msgs=check_https(line_num,https)\ncors_err_msgs=check_cors(line_num,cors)\n\nerr_msgs=[\n*title_err_msgs,\n*desc_err_msgs,\n*auth_err_msgs,\n*https_err_msgs,\n*cors_err_msgs\n]\n\nreturn err_msgs\n\n\ndef check_file_format(lines:List[str])->List[str]:\n\nerr_msgs=[]\ncategory_title_in_index=[]\n\nalphabetical_err_msgs=check_alphabetical_order(lines)\nerr_msgs.extend(alphabetical_err_msgs)\n\nnum_in_category=min_entries_per_category+1\ncategory=''\ncategory_line=0\n\nfor line_num,line_content in enumerate(lines):\n\ncategory_title_match=category_title_in_index_re.match(line_content)\nif category_title_match:\ncategory_title_in_index.append(category_title_match.group(1))\n\n#check each category for the minimum number of entries\nif line_content.startswith(anchor):\ncategory_match=anchor_re.match(line_content)\nif category_match:\nif category_match.group(1)not in category_title_in_index:\nerr_msg=error_message(line_num,f 'category header ({category_match.group(1)}) not added to Index section')\nerr_msgs.append(err_msg)\nelse:\nerr_msg=error_message(line_num,'category header is not formatted correctly')\nerr_msgs.append(err_msg)\n\nif num_in_category<min_entries_per_category:\nerr_msg=error_message(category_line,f '{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\nerr_msgs.append(err_msg)\n\ncategory=line_content.split(' ')[1]\ncategory_line=line_num\nnum_in_category=0\ncontinue\n\n#skips lines that we do not care about\nif not line_content.startswith('|')or line_content.startswith('|---'):\ncontinue\n\nnum_in_category+=1\nsegments=line_content.split('|')[1:-1]\nif len(segments)<num_segments:\nerr_msg=error_message(line_num,f 'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\nerr_msgs.append(err_msg)\ncontinue\n\nfor segment in segments:\n#every line segment should start and end with exactly1space\nif len(segment)-len(segment.lstrip())!=1or len(segment)-len(segment.rstrip())!=1:\nerr_msg=error_message(line_num,'each segment must start and end with exactly 1 space')\nerr_msgs.append(err_msg)\n\nsegments=[segment.strip()for segment in segments]\nentry_err_msgs=check_entry(line_num,segments)\nerr_msgs.extend(entry_err_msgs)\n\nreturn err_msgs\n\n\ndef main(filename:str)->None:\n\nwith open(filename,mode='r',encoding='utf-8')as file:\nlines=list(line.rstrip()for line in file)\n\nfile_format_err_msgs=check_file_format(lines)\n\nif file_format_err_msgs:\nfor err_msg in file_format_err_msgs:\nprint(err_msg)\n"
}