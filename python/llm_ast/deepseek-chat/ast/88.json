{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        55
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "binary_count_setbits",
            "range": [
                0,
                55
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "a",
                    "range": [
                        3,
                        5
                    ],
                    "children": [],
                    "content": "a:int"
                },
                {
                    "type": "ReturnType",
                    "name": "int",
                    "range": [
                        9,
                        9
                    ],
                    "children": [],
                    "content": "int"
                },
                {
                    "type": "Docstring",
                    "name": "",
                    "range": [
                        12,
                        16
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Take in 1 integer, return a number that is \\n     the number of 1's in binary representation of that number. \\n  \\n     >>> binary_count_setbits(25) \\n     3 \\n     >>> binary_count_setbits(36) \\n     2 \\n     >>> binary_count_setbits(16) \\n     1 \\n     >>> binary_count_setbits(58) \\n     4 \\n     >>> binary_count_setbits(4294967295) \\n     32 \\n     >>> binary_count_setbits(0) \\n     0 \\n     >>> binary_count_setbits(-10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input value must be a positive integer \\n     >>> binary_count_setbits(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be a 'int' type \\n     >>> binary_count_setbits(\"0\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\""
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        18,
                        29
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "a < 0",
                            "range": [
                                19,
                                21
                            ],
                            "children": [],
                            "content": "a<0"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "ValueError",
                            "range": [
                                24,
                                28
                            ],
                            "children": [
                                {
                                    "type": "Message",
                                    "name": "Input value must be a positive integer",
                                    "range": [
                                        27,
                                        27
                                    ],
                                    "children": [],
                                    "content": "\"Input value must be a positive integer\""
                                }
                            ],
                            "content": "raise ValueError(\"Input value must be a positive integer\")"
                        }
                    ],
                    "content": "if a<0:\nraise ValueError(\"Input value must be a positive integer\")\n"
                },
                {
                    "type": "ElifStatement",
                    "name": "",
                    "range": [
                        30,
                        44
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "isinstance(a, float)",
                            "range": [
                                31,
                                36
                            ],
                            "children": [],
                            "content": "isinstance(a,float)"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "TypeError",
                            "range": [
                                39,
                                43
                            ],
                            "children": [
                                {
                                    "type": "Message",
                                    "name": "Input value must be a 'int' type",
                                    "range": [
                                        42,
                                        42
                                    ],
                                    "children": [],
                                    "content": "\"Input value must be a 'int' type\""
                                }
                            ],
                            "content": "raise TypeError(\"Input value must be a 'int' type\")"
                        }
                    ],
                    "content": "elif isinstance(a,float):\nraise TypeError(\"Input value must be a 'int' type\")\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "",
                    "range": [
                        45,
                        55
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "bin(a).count(\"1\")",
                            "range": [
                                46,
                                54
                            ],
                            "children": [],
                            "content": "bin(a).count(\"1\")"
                        }
                    ],
                    "content": "return bin(a).count(\"1\")\n"
                }
            ],
            "content": "def binary_count_setbits(a:int)->int:\n\"\"\" \\n     Take in 1 integer, return a number that is \\n     the number of 1's in binary representation of that number. \\n  \\n     >>> binary_count_setbits(25) \\n     3 \\n     >>> binary_count_setbits(36) \\n     2 \\n     >>> binary_count_setbits(16) \\n     1 \\n     >>> binary_count_setbits(58) \\n     4 \\n     >>> binary_count_setbits(4294967295) \\n     32 \\n     >>> binary_count_setbits(0) \\n     0 \\n     >>> binary_count_setbits(-10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input value must be a positive integer \\n     >>> binary_count_setbits(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be a 'int' type \\n     >>> binary_count_setbits(\"0\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\"\nif a<0:\nraise ValueError(\"Input value must be a positive integer\")\nelif isinstance(a,float):\nraise TypeError(\"Input value must be a 'int' type\")\nreturn bin(a).count(\"1\")\n"
        }
    ],
    "content": "def binary_count_setbits(a:int)->int:\n\"\"\" \\n     Take in 1 integer, return a number that is \\n     the number of 1's in binary representation of that number. \\n  \\n     >>> binary_count_setbits(25) \\n     3 \\n     >>> binary_count_setbits(36) \\n     2 \\n     >>> binary_count_setbits(16) \\n     1 \\n     >>> binary_count_setbits(58) \\n     4 \\n     >>> binary_count_setbits(4294967295) \\n     32 \\n     >>> binary_count_setbits(0) \\n     0 \\n     >>> binary_count_setbits(-10) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: Input value must be a positive integer \\n     >>> binary_count_setbits(0.8) \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: Input value must be a 'int' type \\n     >>> binary_count_setbits(\"0\") \\n     Traceback (most recent call last): \\n         ... \\n     TypeError: '<' not supported between instances of 'str' and 'int' \\n     \"\"\"\nif a<0:\nraise ValueError(\"Input value must be a positive integer\")\nelif isinstance(a,float):\nraise TypeError(\"Input value must be a 'int' type\")\nreturn bin(a).count(\"1\")\n"
}