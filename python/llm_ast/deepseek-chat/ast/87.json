{
    "type": "Program",
    "name": "Global",
    "range": [
        76,
        668
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "create_test_graph",
            "range": [
                76,
                526
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "create_test_graph",
                    "range": [
                        76,
                        83
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                76,
                                79
                            ],
                            "children": [],
                            "content": "def create_test_graph()"
                        },
                        {
                            "type": "FunctionName",
                            "name": "create_test_graph",
                            "range": [
                                77,
                                78
                            ],
                            "children": [],
                            "content": "create_test_graph("
                        },
                        {
                            "type": "Parameters",
                            "name": "()",
                            "range": [
                                78,
                                80
                            ],
                            "children": [],
                            "content": "()-"
                        },
                        {
                            "type": "ReturnType",
                            "name": "-> Graph",
                            "range": [
                                80,
                                83
                            ],
                            "children": [],
                            "content": "->Graph:"
                        }
                    ],
                    "content": "def create_test_graph()->Graph:"
                },
                {
                    "type": "FunctionBody",
                    "name": "create_test_graph",
                    "range": [
                        84,
                        526
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "Docstring",
                            "range": [
                                84,
                                87
                            ],
                            "children": [],
                            "content": "\n\"\"\" \\n                     subreddit \\n                        || \\n                         v \\n         GetRedditPostsBlock (post_id, post_title, post_body) \\n                   //     ||     \\\\ \\n               post_id  post_title  post_body \\n                  ||       ||        || \\n                  v        v         v \\n               FillTextTemplateBlock (format) \\n                       || \\n                       v \\n             AIStructuredResponseBlock / TextRelevancy \\n                  ||       ||       || \\n             post_id  is_relevant  marketing_text \\n                ||       ||        || \\n                v        v         v \\n                  MatchTextPatternBlock \\n                  ||       || \\n               positive  negative \\n                 || \\n                 v \\n         PostRedditCommentBlock \\n     \"\"\""
                        },
                        {
                            "type": "Comment",
                            "name": "Hardcoded inputs",
                            "range": [
                                89,
                                92
                            ],
                            "children": [],
                            "content": "#Hardcoded inputs\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "reddit_get_post_input",
                            "range": [
                                93,
                                103
                            ],
                            "children": [],
                            "content": "reddit_get_post_input={\n\"post_limit\":3,\n}\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "text_formatter_input",
                            "range": [
                                104,
                                120
                            ],
                            "children": [],
                            "content": "text_formatter_input={\n\"format\":\"\"\" \\n Based on the following post, write your marketing comment: \\n * Post ID: {id} \\n * Post Subreddit: {subreddit} \\n * Post Title: {title} \\n * Post Body: {body}\"\"\".strip(),\n}\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "llm_call_input",
                            "range": [
                                121,
                                155
                            ],
                            "children": [],
                            "content": "llm_call_input={\n\"sys_prompt\":\"\"\" \\n You are an expert at marketing. \\n You have been tasked with picking Reddit posts that are relevant to your product. \\n The product you are marketing is: Auto-GPT an autonomous AI agent utilizing GPT model. \\n You reply the post that you find it relevant to be replied with marketing text. \\n Make sure to only comment on a relevant post. \\n \"\"\",\n\"expected_format\":{\n\"post_id\":\"str, the reddit post id\",\n\"is_relevant\":\"bool, whether the post is relevant for marketing\",\n\"marketing_text\":\"str, marketing text, this is empty on irrelevant posts\",\n},\n}\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "text_matcher_input",
                            "range": [
                                156,
                                167
                            ],
                            "children": [],
                            "content": "text_matcher_input={\"match\":\"true\",\"case_sensitive\":False}\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "reddit_comment_input",
                            "range": [
                                168,
                                172
                            ],
                            "children": [],
                            "content": "reddit_comment_input={}\n"
                        },
                        {
                            "type": "Comment",
                            "name": "Nodes",
                            "range": [
                                174,
                                176
                            ],
                            "children": [],
                            "content": "#Nodes\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "reddit_get_post_node",
                            "range": [
                                177,
                                197
                            ],
                            "children": [],
                            "content": "reddit_get_post_node=Node(\nblock_id=GetRedditPostsBlock().id,\ninput_default=reddit_get_post_input,\n)\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "text_formatter_node",
                            "range": [
                                198,
                                218
                            ],
                            "children": [],
                            "content": "text_formatter_node=Node(\nblock_id=FillTextTemplateBlock().id,\ninput_default=text_formatter_input,\n)\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "llm_call_node",
                            "range": [
                                219,
                                237
                            ],
                            "children": [],
                            "content": "llm_call_node=Node(\nblock_id=AIStructuredResponseGeneratorBlock().id,input_default=llm_call_input\n)\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "text_matcher_node",
                            "range": [
                                238,
                                258
                            ],
                            "children": [],
                            "content": "text_matcher_node=Node(\nblock_id=MatchTextPatternBlock().id,\ninput_default=text_matcher_input,\n)\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "reddit_comment_node",
                            "range": [
                                259,
                                279
                            ],
                            "children": [],
                            "content": "reddit_comment_node=Node(\nblock_id=PostRedditCommentBlock().id,\ninput_default=reddit_comment_input,\n)\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "nodes",
                            "range": [
                                281,
                                301
                            ],
                            "children": [],
                            "content": "nodes=[\nreddit_get_post_node,\ntext_formatter_node,\nllm_call_node,\ntext_matcher_node,\nreddit_comment_node,\n]\n"
                        },
                        {
                            "type": "Comment",
                            "name": "Links",
                            "range": [
                                303,
                                305
                            ],
                            "children": [],
                            "content": "#Links\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "links",
                            "range": [
                                306,
                                490
                            ],
                            "children": [],
                            "content": "links=[\nLink(\nsource_id=reddit_get_post_node.id,\nsink_id=text_formatter_node.id,\nsource_name=\"post\",\nsink_name=\"values\",\n),\nLink(\nsource_id=text_formatter_node.id,\nsink_id=llm_call_node.id,\nsource_name=\"output\",\nsink_name=\"prompt\",\n),\nLink(\nsource_id=llm_call_node.id,\nsink_id=text_matcher_node.id,\nsource_name=\"response\",\nsink_name=\"data\",\n),\nLink(\nsource_id=llm_call_node.id,\nsink_id=text_matcher_node.id,\nsource_name=\"response_#_is_relevant\",\nsink_name=\"text\",\n),\nLink(\nsource_id=text_matcher_node.id,\nsink_id=reddit_comment_node.id,\nsource_name=\"positive_#_post_id\",\nsink_name=\"data_#_post_id\",\n),\nLink(\nsource_id=text_matcher_node.id,\nsink_id=reddit_comment_node.id,\nsource_name=\"positive_#_marketing_text\",\nsink_name=\"data_#_comment\",\n),\n]"
                        },
                        {
                            "type": "Comment",
                            "name": "Create graph",
                            "range": [
                                493,
                                496
                            ],
                            "children": [],
                            "content": "#Create graph\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "test_graph",
                            "range": [
                                497,
                                523
                            ],
                            "children": [],
                            "content": "test_graph=Graph(\nname=\"RedditMarketingAgent\",\ndescription=\"Reddit marketing agent\",\nnodes=nodes,\nlinks=links,\n)\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return test_graph",
                            "range": [
                                524,
                                526
                            ],
                            "children": [],
                            "content": "return test_graph\n"
                        }
                    ],
                    "content": "\n\"\"\" \\n                     subreddit \\n                        || \\n                         v \\n         GetRedditPostsBlock (post_id, post_title, post_body) \\n                   //     ||     \\\\ \\n               post_id  post_title  post_body \\n                  ||       ||        || \\n                  v        v         v \\n               FillTextTemplateBlock (format) \\n                       || \\n                       v \\n             AIStructuredResponseBlock / TextRelevancy \\n                  ||       ||       || \\n             post_id  is_relevant  marketing_text \\n                ||       ||        || \\n                v        v         v \\n                  MatchTextPatternBlock \\n                  ||       || \\n               positive  negative \\n                 || \\n                 v \\n         PostRedditCommentBlock \\n     \"\"\"\n#Hardcoded inputs\nreddit_get_post_input={\n\"post_limit\":3,\n}\ntext_formatter_input={\n\"format\":\"\"\" \\n Based on the following post, write your marketing comment: \\n * Post ID: {id} \\n * Post Subreddit: {subreddit} \\n * Post Title: {title} \\n * Post Body: {body}\"\"\".strip(),\n}\nllm_call_input={\n\"sys_prompt\":\"\"\" \\n You are an expert at marketing. \\n You have been tasked with picking Reddit posts that are relevant to your product. \\n The product you are marketing is: Auto-GPT an autonomous AI agent utilizing GPT model. \\n You reply the post that you find it relevant to be replied with marketing text. \\n Make sure to only comment on a relevant post. \\n \"\"\",\n\"expected_format\":{\n\"post_id\":\"str, the reddit post id\",\n\"is_relevant\":\"bool, whether the post is relevant for marketing\",\n\"marketing_text\":\"str, marketing text, this is empty on irrelevant posts\",\n},\n}\ntext_matcher_input={\"match\":\"true\",\"case_sensitive\":False}\nreddit_comment_input={}\n\n#Nodes\nreddit_get_post_node=Node(\nblock_id=GetRedditPostsBlock().id,\ninput_default=reddit_get_post_input,\n)\ntext_formatter_node=Node(\nblock_id=FillTextTemplateBlock().id,\ninput_default=text_formatter_input,\n)\nllm_call_node=Node(\nblock_id=AIStructuredResponseGeneratorBlock().id,input_default=llm_call_input\n)\ntext_matcher_node=Node(\nblock_id=MatchTextPatternBlock().id,\ninput_default=text_matcher_input,\n)\nreddit_comment_node=Node(\nblock_id=PostRedditCommentBlock().id,\ninput_default=reddit_comment_input,\n)\n\nnodes=[\nreddit_get_post_node,\ntext_formatter_node,\nllm_call_node,\ntext_matcher_node,\nreddit_comment_node,\n]\n\n#Links\nlinks=[\nLink(\nsource_id=reddit_get_post_node.id,\nsink_id=text_formatter_node.id,\nsource_name=\"post\",\nsink_name=\"values\",\n),\nLink(\nsource_id=text_formatter_node.id,\nsink_id=llm_call_node.id,\nsource_name=\"output\",\nsink_name=\"prompt\",\n),\nLink(\nsource_id=llm_call_node.id,\nsink_id=text_matcher_node.id,\nsource_name=\"response\",\nsink_name=\"data\",\n),\nLink(\nsource_id=llm_call_node.id,\nsink_id=text_matcher_node.id,\nsource_name=\"response_#_is_relevant\",\nsink_name=\"text\",\n),\nLink(\nsource_id=text_matcher_node.id,\nsink_id=reddit_comment_node.id,\nsource_name=\"positive_#_post_id\",\nsink_name=\"data_#_post_id\",\n),\nLink(\nsource_id=text_matcher_node.id,\nsink_id=reddit_comment_node.id,\nsource_name=\"positive_#_marketing_text\",\nsink_name=\"data_#_comment\",\n),\n]\n\n#Create graph\ntest_graph=Graph(\nname=\"RedditMarketingAgent\",\ndescription=\"Reddit marketing agent\",\nnodes=nodes,\nlinks=links,\n)\nreturn test_graph\n"
                }
            ],
            "content": "def create_test_graph()->Graph:\n\"\"\" \\n                     subreddit \\n                        || \\n                         v \\n         GetRedditPostsBlock (post_id, post_title, post_body) \\n                   //     ||     \\\\ \\n               post_id  post_title  post_body \\n                  ||       ||        || \\n                  v        v         v \\n               FillTextTemplateBlock (format) \\n                       || \\n                       v \\n             AIStructuredResponseBlock / TextRelevancy \\n                  ||       ||       || \\n             post_id  is_relevant  marketing_text \\n                ||       ||        || \\n                v        v         v \\n                  MatchTextPatternBlock \\n                  ||       || \\n               positive  negative \\n                 || \\n                 v \\n         PostRedditCommentBlock \\n     \"\"\"\n#Hardcoded inputs\nreddit_get_post_input={\n\"post_limit\":3,\n}\ntext_formatter_input={\n\"format\":\"\"\" \\n Based on the following post, write your marketing comment: \\n * Post ID: {id} \\n * Post Subreddit: {subreddit} \\n * Post Title: {title} \\n * Post Body: {body}\"\"\".strip(),\n}\nllm_call_input={\n\"sys_prompt\":\"\"\" \\n You are an expert at marketing. \\n You have been tasked with picking Reddit posts that are relevant to your product. \\n The product you are marketing is: Auto-GPT an autonomous AI agent utilizing GPT model. \\n You reply the post that you find it relevant to be replied with marketing text. \\n Make sure to only comment on a relevant post. \\n \"\"\",\n\"expected_format\":{\n\"post_id\":\"str, the reddit post id\",\n\"is_relevant\":\"bool, whether the post is relevant for marketing\",\n\"marketing_text\":\"str, marketing text, this is empty on irrelevant posts\",\n},\n}\ntext_matcher_input={\"match\":\"true\",\"case_sensitive\":False}\nreddit_comment_input={}\n\n#Nodes\nreddit_get_post_node=Node(\nblock_id=GetRedditPostsBlock().id,\ninput_default=reddit_get_post_input,\n)\ntext_formatter_node=Node(\nblock_id=FillTextTemplateBlock().id,\ninput_default=text_formatter_input,\n)\nllm_call_node=Node(\nblock_id=AIStructuredResponseGeneratorBlock().id,input_default=llm_call_input\n)\ntext_matcher_node=Node(\nblock_id=MatchTextPatternBlock().id,\ninput_default=text_matcher_input,\n)\nreddit_comment_node=Node(\nblock_id=PostRedditCommentBlock().id,\ninput_default=reddit_comment_input,\n)\n\nnodes=[\nreddit_get_post_node,\ntext_formatter_node,\nllm_call_node,\ntext_matcher_node,\nreddit_comment_node,\n]\n\n#Links\nlinks=[\nLink(\nsource_id=reddit_get_post_node.id,\nsink_id=text_formatter_node.id,\nsource_name=\"post\",\nsink_name=\"values\",\n),\nLink(\nsource_id=text_formatter_node.id,\nsink_id=llm_call_node.id,\nsource_name=\"output\",\nsink_name=\"prompt\",\n),\nLink(\nsource_id=llm_call_node.id,\nsink_id=text_matcher_node.id,\nsource_name=\"response\",\nsink_name=\"data\",\n),\nLink(\nsource_id=llm_call_node.id,\nsink_id=text_matcher_node.id,\nsource_name=\"response_#_is_relevant\",\nsink_name=\"text\",\n),\nLink(\nsource_id=text_matcher_node.id,\nsink_id=reddit_comment_node.id,\nsource_name=\"positive_#_post_id\",\nsink_name=\"data_#_post_id\",\n),\nLink(\nsource_id=text_matcher_node.id,\nsink_id=reddit_comment_node.id,\nsource_name=\"positive_#_marketing_text\",\nsink_name=\"data_#_comment\",\n),\n]\n\n#Create graph\ntest_graph=Graph(\nname=\"RedditMarketingAgent\",\ndescription=\"Reddit marketing agent\",\nnodes=nodes,\nlinks=links,\n)\nreturn test_graph\n"
        },
        {
            "type": "FunctionDecl",
            "name": "create_test_user",
            "range": [
                527,
                568
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        527,
                        531
                    ],
                    "children": [],
                    "content": "\n\nasync def create_test_user"
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        528,
                        531
                    ],
                    "children": [],
                    "content": "\nasync def create_test_user"
                },
                {
                    "type": "Identifier",
                    "name": "create_test_user",
                    "range": [
                        529,
                        545
                    ],
                    "children": [],
                    "content": "async def create_test_user()->User:\ntest_user_data={\n\"sub\":\"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\""
                },
                {
                    "type": "ReturnType",
                    "name": "User",
                    "range": [
                        532,
                        535
                    ],
                    "children": [],
                    "content": "()->"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        536,
                        568
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "test_user_data",
                            "range": [
                                537,
                                556
                            ],
                            "children": [
                                {
                                    "type": "ObjectLiteral",
                                    "name": "",
                                    "range": [
                                        539,
                                        556
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "sub",
                                            "range": [
                                                541,
                                                543
                                            ],
                                            "children": [],
                                            "content": "{\n\"sub\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "email",
                                            "range": [
                                                546,
                                                548
                                            ],
                                            "children": [],
                                            "content": ",\n\"email\""
                                        },
                                        {
                                            "type": "Property",
                                            "name": "name",
                                            "range": [
                                                551,
                                                553
                                            ],
                                            "children": [],
                                            "content": ",\n\"name\""
                                        }
                                    ],
                                    "content": "test_user_data={\n\"sub\":\"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\",\n\"email\":\"testuser@example.com\",\n\"name\":\"Test User\","
                                }
                            ],
                            "content": ":\ntest_user_data={\n\"sub\":\"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\",\n\"email\":\"testuser@example.com\",\n\"name\":\"Test User\","
                        },
                        {
                            "type": "VariableDecl",
                            "name": "user",
                            "range": [
                                558,
                                564
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        560,
                                        564
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_or_create_user",
                                            "range": [
                                                561,
                                                564
                                            ],
                                            "children": [],
                                            "content": "=await get_or_create_user("
                                        }
                                    ],
                                    "content": "user=await get_or_create_user("
                                }
                            ],
                            "content": "}\nuser=await get_or_create_user("
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                566,
                                568
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "user",
                                    "range": [
                                        567,
                                        568
                                    ],
                                    "children": [],
                                    "content": "\nreturn"
                                }
                            ],
                            "content": ")\nreturn"
                        }
                    ],
                    "content": "User:\ntest_user_data={\n\"sub\":\"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\",\n\"email\":\"testuser@example.com\",\n\"name\":\"Test User\",\n}\nuser=await get_or_create_user(test_user_data)\nreturn"
                }
            ],
            "content": "\n\nasync def create_test_user()->User:\ntest_user_data={\n\"sub\":\"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\",\n\"email\":\"testuser@example.com\",\n\"name\":\"Test User\",\n}\nuser=await get_or_create_user(test_user_data)\nreturn"
        },
        {
            "type": "FunctionDecl",
            "name": "reddit_marketing_agent",
            "range": [
                569,
                575
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "async",
                    "range": [
                        569,
                        569
                    ],
                    "children": [],
                    "content": "user"
                },
                {
                    "type": "Keyword",
                    "name": "def",
                    "range": [
                        570,
                        570
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Identifier",
                    "name": "reddit_marketing_agent",
                    "range": [
                        571,
                        571
                    ],
                    "children": [],
                    "content": "\n"
                }
            ],
            "content": "user\n\n\nasync def reddit_marketing_agent"
        },
        {
            "type": "AsyncWithStatement",
            "name": "",
            "range": [
                576,
                584
            ],
            "children": [
                {
                    "type": "Keyword",
                    "name": "async",
                    "range": [
                        576,
                        576
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Keyword",
                    "name": "with",
                    "range": [
                        577,
                        577
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "CallExpression",
                    "name": "SpinTestServer",
                    "range": [
                        578,
                        580
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "SpinTestServer",
                            "range": [
                                578,
                                578
                            ],
                            "children": [],
                            "content": ":"
                        }
                    ],
                    "content": ":\nasync"
                },
                {
                    "type": "Keyword",
                    "name": "as",
                    "range": [
                        581,
                        581
                    ],
                    "children": [],
                    "content": "with"
                },
                {
                    "type": "VariableDecl",
                    "name": "server",
                    "range": [
                        582,
                        582
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "server",
                            "range": [
                                582,
                                582
                            ],
                            "children": [],
                            "content": "SpinTestServer"
                        }
                    ],
                    "content": "SpinTestServer"
                }
            ],
            "content": "():\nasync with SpinTestServer()"
        },
        {
            "type": "VariableDecl",
            "name": "test_user",
            "range": [
                585,
                591
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "test_user",
                    "range": [
                        585,
                        585
                    ],
                    "children": [],
                    "content": "as"
                },
                {
                    "type": "Keyword",
                    "name": "await",
                    "range": [
                        587,
                        587
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "CallExpression",
                    "name": "create_test_user",
                    "range": [
                        588,
                        590
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "create_test_user",
                            "range": [
                                588,
                                588
                            ],
                            "children": [],
                            "content": "\n"
                        }
                    ],
                    "content": "\ntest_user="
                }
            ],
            "content": "as server:\ntest_user=await"
        },
        {
            "type": "VariableDecl",
            "name": "test_graph",
            "range": [
                592,
                607
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "test_graph",
                    "range": [
                        592,
                        592
                    ],
                    "children": [],
                    "content": "create_test_user"
                },
                {
                    "type": "Keyword",
                    "name": "await",
                    "range": [
                        594,
                        594
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "CallExpression",
                    "name": "create_graph",
                    "range": [
                        595,
                        606
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "create_graph",
                            "range": [
                                595,
                                595
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "CallExpression",
                            "name": "create_test_graph",
                            "range": [
                                597,
                                599
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "create_test_graph",
                                    "range": [
                                        597,
                                        597
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": "=await create_graph"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "user_id",
                            "range": [
                                601,
                                605
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "user_id",
                                    "range": [
                                        601,
                                        601
                                    ],
                                    "children": [],
                                    "content": "create_test_graph"
                                },
                                {
                                    "type": "MemberExpression",
                                    "name": "id",
                                    "range": [
                                        603,
                                        605
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "test_user",
                                            "range": [
                                                603,
                                                603
                                            ],
                                            "children": [],
                                            "content": ")"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "id",
                                            "range": [
                                                605,
                                                605
                                            ],
                                            "children": [],
                                            "content": "user_id"
                                        }
                                    ],
                                    "content": "),user_id"
                                }
                            ],
                            "content": "create_test_graph(),user_id"
                        }
                    ],
                    "content": "\ntest_graph=await create_graph(create_test_graph(),user_id="
                }
            ],
            "content": "create_test_user()\ntest_graph=await create_graph(create_test_graph(),user_id=test_user"
        },
        {
            "type": "VariableDecl",
            "name": "input_data",
            "range": [
                608,
                615
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "input_data",
                    "range": [
                        608,
                        608
                    ],
                    "children": [],
                    "content": "."
                },
                {
                    "type": "ObjectExpression",
                    "name": "",
                    "range": [
                        610,
                        614
                    ],
                    "children": [
                        {
                            "type": "Property",
                            "name": "subreddit",
                            "range": [
                                611,
                                613
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"subreddit\"",
                                    "range": [
                                        611,
                                        611
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Literal",
                                    "name": "\"AutoGPT\"",
                                    "range": [
                                        613,
                                        613
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": "\ninput_data="
                        }
                    ],
                    "content": ")\ninput_data={"
                }
            ],
            "content": ".id)\ninput_data={\"subreddit\""
        },
        {
            "type": "VariableDecl",
            "name": "response",
            "range": [
                616,
                637
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "response",
                    "range": [
                        616,
                        616
                    ],
                    "children": [],
                    "content": ":"
                },
                {
                    "type": "Keyword",
                    "name": "await",
                    "range": [
                        618,
                        618
                    ],
                    "children": [],
                    "content": "}"
                },
                {
                    "type": "CallExpression",
                    "name": "test_execute_graph",
                    "range": [
                        623,
                        636
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "agent_server",
                            "range": [
                                619,
                                622
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "server",
                                    "range": [
                                        619,
                                        619
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "agent_server",
                                    "range": [
                                        621,
                                        621
                                    ],
                                    "children": [],
                                    "content": "="
                                }
                            ],
                            "content": "\nresponse=await"
                        },
                        {
                            "type": "Identifier",
                            "name": "test_execute_graph",
                            "range": [
                                623,
                                623
                            ],
                            "children": [],
                            "content": "server"
                        },
                        {
                            "type": "MemberExpression",
                            "name": "id",
                            "range": [
                                626,
                                628
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "test_graph",
                                    "range": [
                                        626,
                                        626
                                    ],
                                    "children": [],
                                    "content": "."
                                },
                                {
                                    "type": "Identifier",
                                    "name": "id",
                                    "range": [
                                        628,
                                        628
                                    ],
                                    "children": [],
                                    "content": "("
                                }
                            ],
                            "content": ".test_execute_graph("
                        },
                        {
                            "type": "Identifier",
                            "name": "input_data",
                            "range": [
                                630,
                                630
                            ],
                            "children": [],
                            "content": "test_graph"
                        },
                        {
                            "type": "MemberExpression",
                            "name": "id",
                            "range": [
                                632,
                                634
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "test_user",
                                    "range": [
                                        632,
                                        632
                                    ],
                                    "children": [],
                                    "content": "id"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "id",
                                    "range": [
                                        634,
                                        634
                                    ],
                                    "children": [],
                                    "content": "input_data"
                                }
                            ],
                            "content": "id,input_data"
                        }
                    ],
                    "content": "server.agent_server.test_execute_graph(\ntest_graph.id,input_data,test_user"
                }
            ],
            "content": ":\"AutoGPT\"}\nresponse=await server.agent_server.test_execute_graph(\ntest_graph.id,input_data,test_user."
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                638,
                642
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "print",
                    "range": [
                        638,
                        641
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "print",
                            "range": [
                                638,
                                638
                            ],
                            "children": [],
                            "content": "id"
                        },
                        {
                            "type": "Identifier",
                            "name": "response",
                            "range": [
                                640,
                                640
                            ],
                            "children": [],
                            "content": ")"
                        }
                    ],
                    "content": "id\n)\n"
                }
            ],
            "content": "id\n)\nprint"
        },
        {
            "type": "VariableDecl",
            "name": "result",
            "range": [
                643,
                663
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "result",
                    "range": [
                        643,
                        643
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Keyword",
                    "name": "await",
                    "range": [
                        645,
                        645
                    ],
                    "children": [],
                    "content": ")"
                },
                {
                    "type": "CallExpression",
                    "name": "wait_execution",
                    "range": [
                        646,
                        662
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "wait_execution",
                            "range": [
                                646,
                                646
                            ],
                            "children": [],
                            "content": "\n"
                        },
                        {
                            "type": "MemberExpression",
                            "name": "id",
                            "range": [
                                648,
                                650
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "test_user",
                                    "range": [
                                        648,
                                        648
                                    ],
                                    "children": [],
                                    "content": "="
                                },
                                {
                                    "type": "Identifier",
                                    "name": "id",
                                    "range": [
                                        650,
                                        650
                                    ],
                                    "children": [],
                                    "content": "wait_execution"
                                }
                            ],
                            "content": "=await wait_execution"
                        },
                        {
                            "type": "MemberExpression",
                            "name": "id",
                            "range": [
                                652,
                                654
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "test_graph",
                                    "range": [
                                        652,
                                        652
                                    ],
                                    "children": [],
                                    "content": "test_user"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "id",
                                    "range": [
                                        654,
                                        654
                                    ],
                                    "children": [],
                                    "content": "id"
                                }
                            ],
                            "content": "test_user.id"
                        },
                        {
                            "type": "MemberExpression",
                            "name": "id",
                            "range": [
                                656,
                                659
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "response",
                                    "range": [
                                        656,
                                        656
                                    ],
                                    "children": [],
                                    "content": "test_graph"
                                },
                                {
                                    "type": "Literal",
                                    "name": "\"id\"",
                                    "range": [
                                        658,
                                        658
                                    ],
                                    "children": [],
                                    "content": "id"
                                }
                            ],
                            "content": "test_graph.id,"
                        },
                        {
                            "type": "Literal",
                            "name": "120",
                            "range": [
                                661,
                                661
                            ],
                            "children": [],
                            "content": "["
                        }
                    ],
                    "content": "\nresult=await wait_execution(test_user.id,test_graph.id,response[\"id\""
                }
            ],
            "content": "(response)\nresult=await wait_execution(test_user.id,test_graph.id,response[\"id\"]"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                664,
                668
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "print",
                    "range": [
                        664,
                        667
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "print",
                            "range": [
                                664,
                                664
                            ],
                            "children": [],
                            "content": ","
                        },
                        {
                            "type": "Identifier",
                            "name": "result",
                            "range": [
                                666,
                                666
                            ],
                            "children": [],
                            "content": ")"
                        }
                    ],
                    "content": ",120)\n"
                }
            ],
            "content": ",120)\nprint"
        }
    ],
    "content": "def create_test_graph()->Graph:\n\"\"\" \\n                     subreddit \\n                        || \\n                         v \\n         GetRedditPostsBlock (post_id, post_title, post_body) \\n                   //     ||     \\\\ \\n               post_id  post_title  post_body \\n                  ||       ||        || \\n                  v        v         v \\n               FillTextTemplateBlock (format) \\n                       || \\n                       v \\n             AIStructuredResponseBlock / TextRelevancy \\n                  ||       ||       || \\n             post_id  is_relevant  marketing_text \\n                ||       ||        || \\n                v        v         v \\n                  MatchTextPatternBlock \\n                  ||       || \\n               positive  negative \\n                 || \\n                 v \\n         PostRedditCommentBlock \\n     \"\"\"\n#Hardcoded inputs\nreddit_get_post_input={\n\"post_limit\":3,\n}\ntext_formatter_input={\n\"format\":\"\"\" \\n Based on the following post, write your marketing comment: \\n * Post ID: {id} \\n * Post Subreddit: {subreddit} \\n * Post Title: {title} \\n * Post Body: {body}\"\"\".strip(),\n}\nllm_call_input={\n\"sys_prompt\":\"\"\" \\n You are an expert at marketing. \\n You have been tasked with picking Reddit posts that are relevant to your product. \\n The product you are marketing is: Auto-GPT an autonomous AI agent utilizing GPT model. \\n You reply the post that you find it relevant to be replied with marketing text. \\n Make sure to only comment on a relevant post. \\n \"\"\",\n\"expected_format\":{\n\"post_id\":\"str, the reddit post id\",\n\"is_relevant\":\"bool, whether the post is relevant for marketing\",\n\"marketing_text\":\"str, marketing text, this is empty on irrelevant posts\",\n},\n}\ntext_matcher_input={\"match\":\"true\",\"case_sensitive\":False}\nreddit_comment_input={}\n\n#Nodes\nreddit_get_post_node=Node(\nblock_id=GetRedditPostsBlock().id,\ninput_default=reddit_get_post_input,\n)\ntext_formatter_node=Node(\nblock_id=FillTextTemplateBlock().id,\ninput_default=text_formatter_input,\n)\nllm_call_node=Node(\nblock_id=AIStructuredResponseGeneratorBlock().id,input_default=llm_call_input\n)\ntext_matcher_node=Node(\nblock_id=MatchTextPatternBlock().id,\ninput_default=text_matcher_input,\n)\nreddit_comment_node=Node(\nblock_id=PostRedditCommentBlock().id,\ninput_default=reddit_comment_input,\n)\n\nnodes=[\nreddit_get_post_node,\ntext_formatter_node,\nllm_call_node,\ntext_matcher_node,\nreddit_comment_node,\n]\n\n#Links\nlinks=[\nLink(\nsource_id=reddit_get_post_node.id,\nsink_id=text_formatter_node.id,\nsource_name=\"post\",\nsink_name=\"values\",\n),\nLink(\nsource_id=text_formatter_node.id,\nsink_id=llm_call_node.id,\nsource_name=\"output\",\nsink_name=\"prompt\",\n),\nLink(\nsource_id=llm_call_node.id,\nsink_id=text_matcher_node.id,\nsource_name=\"response\",\nsink_name=\"data\",\n),\nLink(\nsource_id=llm_call_node.id,\nsink_id=text_matcher_node.id,\nsource_name=\"response_#_is_relevant\",\nsink_name=\"text\",\n),\nLink(\nsource_id=text_matcher_node.id,\nsink_id=reddit_comment_node.id,\nsource_name=\"positive_#_post_id\",\nsink_name=\"data_#_post_id\",\n),\nLink(\nsource_id=text_matcher_node.id,\nsink_id=reddit_comment_node.id,\nsource_name=\"positive_#_marketing_text\",\nsink_name=\"data_#_comment\",\n),\n]\n\n#Create graph\ntest_graph=Graph(\nname=\"RedditMarketingAgent\",\ndescription=\"Reddit marketing agent\",\nnodes=nodes,\nlinks=links,\n)\nreturn test_graph\n\n\nasync def create_test_user()->User:\ntest_user_data={\n\"sub\":\"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\",\n\"email\":\"testuser@example.com\",\n\"name\":\"Test User\",\n}\nuser=await get_or_create_user(test_user_data)\nreturn user\n\n\nasync def reddit_marketing_agent():\nasync with SpinTestServer()as server:\ntest_user=await create_test_user()\ntest_graph=await create_graph(create_test_graph(),user_id=test_user.id)\ninput_data={\"subreddit\":\"AutoGPT\"}\nresponse=await server.agent_server.test_execute_graph(\ntest_graph.id,input_data,test_user.id\n)\nprint(response)\nresult=await wait_execution(test_user.id,test_graph.id,response[\"id\"],120)\nprint"
}