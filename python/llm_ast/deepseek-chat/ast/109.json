{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        360
    ],
    "children": [
        {
            "type": "Comment",
            "name": "Information on binary shifts",
            "range": [
                0,
                6
            ],
            "children": [],
            "content": "#Information on binary shifts:\n"
        },
        {
            "type": "Url",
            "name": "https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types",
            "range": [
                7,
                35
            ],
            "children": [],
            "content": "#https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types\n"
        },
        {
            "type": "Comment",
            "name": "https://www.interviewcake.com/concept/java/bit-shift",
            "range": [
                36,
                54
            ],
            "children": [],
            "content": "#https://www.interviewcake.com/concept/java/bit-shift\n"
        },
        {
            "type": "Whitespace",
            "name": "newlines",
            "range": [
                55,
                56
            ],
            "children": [],
            "content": "\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "logical_left_shift",
            "range": [
                57,
                113
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        59,
                        67
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "number",
                            "range": [
                                60,
                                62
                            ],
                            "children": [],
                            "content": "number:int"
                        },
                        {
                            "type": "Parameter",
                            "name": "shift_amount",
                            "range": [
                                64,
                                66
                            ],
                            "children": [],
                            "content": "shift_amount:int"
                        }
                    ],
                    "content": "(number:int,shift_amount:int)"
                },
                {
                    "type": "ReturnType",
                    "name": "str",
                    "range": [
                        68,
                        70
                    ],
                    "children": [],
                    "content": "->str"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        73,
                        75
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Take in 2 positive integers. \\n     'number' is the integer to be logically left shifted 'shift_amount' times. \\n     i.e. (number << shift_amount) \\n     Return the shifted binary representation. \\n  \\n     >>> logical_left_shift(0, 1) \\n     '0b00' \\n     >>> logical_left_shift(1, 1) \\n     '0b10' \\n     >>> logical_left_shift(1, 5) \\n     '0b100000' \\n     >>> logical_left_shift(17, 2) \\n     '0b1000100' \\n     >>> logical_left_shift(1983, 4) \\n     '0b111101111110000' \\n     >>> logical_left_shift(1, -1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: both inputs must be positive integers \\n     \"\"\""
                },
                {
                    "type": "IfStatement",
                    "name": "if",
                    "range": [
                        77,
                        92
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "condition",
                            "range": [
                                78,
                                84
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "<",
                                    "range": [
                                        79,
                                        80
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "number",
                                            "range": [
                                                78,
                                                78
                                            ],
                                            "children": [],
                                            "content": "number"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "0",
                                            "range": [
                                                80,
                                                80
                                            ],
                                            "children": [],
                                            "content": "0"
                                        }
                                    ],
                                    "content": "<0"
                                },
                                {
                                    "type": "BinaryExpression",
                                    "name": "<",
                                    "range": [
                                        83,
                                        84
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "shift_amount",
                                            "range": [
                                                82,
                                                82
                                            ],
                                            "children": [],
                                            "content": "shift_amount"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "0",
                                            "range": [
                                                84,
                                                84
                                            ],
                                            "children": [],
                                            "content": "0"
                                        }
                                    ],
                                    "content": "<0"
                                }
                            ],
                            "content": "number<0or shift_amount<0"
                        },
                        {
                            "type": "Block",
                            "name": "block",
                            "range": [
                                85,
                                92
                            ],
                            "children": [
                                {
                                    "type": "RaiseStatement",
                                    "name": "raise",
                                    "range": [
                                        87,
                                        91
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "ValueError",
                                            "range": [
                                                88,
                                                91
                                            ],
                                            "children": [
                                                {
                                                    "type": "Literal",
                                                    "name": "\"both inputs must be positive integers\"",
                                                    "range": [
                                                        90,
                                                        90
                                                    ],
                                                    "children": [],
                                                    "content": "\"both inputs must be positive integers\""
                                                }
                                            ],
                                            "content": "ValueError(\"both inputs must be positive integers\")"
                                        }
                                    ],
                                    "content": "raise ValueError(\"both inputs must be positive integers\")"
                                }
                            ],
                            "content": ":\nraise ValueError(\"both inputs must be positive integers\")\n"
                        }
                    ],
                    "content": "if number<0or shift_amount<0:\nraise ValueError(\"both inputs must be positive integers\")\n"
                },
                {
                    "type": "AssignmentExpression",
                    "name": "binary_number",
                    "range": [
                        94,
                        110
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "str",
                            "range": [
                                96,
                                102
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "bin",
                                    "range": [
                                        98,
                                        101
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "number",
                                            "range": [
                                                100,
                                                100
                                            ],
                                            "children": [],
                                            "content": "number"
                                        }
                                    ],
                                    "content": "bin(number)"
                                }
                            ],
                            "content": "str(bin(number))"
                        },
                        {
                            "type": "BinaryExpression",
                            "name": "+=",
                            "range": [
                                105,
                                109
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "\"0\"",
                                    "range": [
                                        107,
                                        107
                                    ],
                                    "children": [],
                                    "content": "\"0\""
                                },
                                {
                                    "type": "Identifier",
                                    "name": "shift_amount",
                                    "range": [
                                        109,
                                        109
                                    ],
                                    "children": [],
                                    "content": "shift_amount"
                                }
                            ],
                            "content": "+=\"0\"*shift_amount"
                        }
                    ],
                    "content": "binary_number=str(bin(number))\nbinary_number+=\"0\"*shift_amount\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        111,
                        113
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "binary_number",
                            "range": [
                                112,
                                112
                            ],
                            "children": [],
                            "content": "binary_number"
                        }
                    ],
                    "content": "return binary_number\n"
                }
            ],
            "content": "def logical_left_shift(number:int,shift_amount:int)->str:\n\"\"\" \\n     Take in 2 positive integers. \\n     'number' is the integer to be logically left shifted 'shift_amount' times. \\n     i.e. (number << shift_amount) \\n     Return the shifted binary representation. \\n  \\n     >>> logical_left_shift(0, 1) \\n     '0b00' \\n     >>> logical_left_shift(1, 1) \\n     '0b10' \\n     >>> logical_left_shift(1, 5) \\n     '0b100000' \\n     >>> logical_left_shift(17, 2) \\n     '0b1000100' \\n     >>> logical_left_shift(1983, 4) \\n     '0b111101111110000' \\n     >>> logical_left_shift(1, -1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: both inputs must be positive integers \\n     \"\"\"\nif number<0or shift_amount<0:\nraise ValueError(\"both inputs must be positive integers\")\n\nbinary_number=str(bin(number))\nbinary_number+=\"0\"*shift_amount\nreturn binary_number\n"
        },
        {
            "type": "FunctionDecl",
            "name": "logical_right_shift",
            "range": [
                116,
                197
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        118,
                        126
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "number",
                            "range": [
                                119,
                                121
                            ],
                            "children": [],
                            "content": "number:int"
                        },
                        {
                            "type": "Parameter",
                            "name": "shift_amount",
                            "range": [
                                123,
                                125
                            ],
                            "children": [],
                            "content": "shift_amount:int"
                        }
                    ],
                    "content": "(number:int,shift_amount:int)"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        127,
                        129
                    ],
                    "children": [],
                    "content": "->str"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        132,
                        134
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Take in positive 2 integers. \\n     'number' is the integer to be logically right shifted 'shift_amount' times. \\n     i.e. (number >>> shift_amount) \\n     Return the shifted binary representation. \\n  \\n     >>> logical_right_shift(0, 1) \\n     '0b0' \\n     >>> logical_right_shift(1, 1) \\n     '0b0' \\n     >>> logical_right_shift(1, 5) \\n     '0b0' \\n     >>> logical_right_shift(17, 2) \\n     '0b100' \\n     >>> logical_right_shift(1983, 4) \\n     '0b1111011' \\n     >>> logical_right_shift(1, -1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: both inputs must be positive integers \\n     \"\"\""
                },
                {
                    "type": "IfStatement",
                    "name": "if_statement",
                    "range": [
                        136,
                        150
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "condition",
                            "range": [
                                137,
                                143
                            ],
                            "children": [],
                            "content": "number<0or shift_amount<0"
                        },
                        {
                            "type": "RaiseStatement",
                            "name": "raise_statement",
                            "range": [
                                146,
                                150
                            ],
                            "children": [],
                            "content": "raise ValueError(\"both inputs must be positive integers\")"
                        }
                    ],
                    "content": "if number<0or shift_amount<0:\nraise ValueError(\"both inputs must be positive integers\")"
                },
                {
                    "type": "VariableDecl",
                    "name": "binary_number",
                    "range": [
                        153,
                        165
                    ],
                    "children": [],
                    "content": "binary_number=str(bin(number))[2:]"
                },
                {
                    "type": "IfStatement",
                    "name": "if_statement",
                    "range": [
                        167,
                        179
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "condition",
                            "range": [
                                168,
                                175
                            ],
                            "children": [],
                            "content": "shift_amount>=len(binary_number):"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_statement",
                            "range": [
                                177,
                                179
                            ],
                            "children": [],
                            "content": "return \"0b0\"\n"
                        }
                    ],
                    "content": "if shift_amount>=len(binary_number):\nreturn \"0b0\"\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "shifted_binary_number",
                    "range": [
                        180,
                        191
                    ],
                    "children": [],
                    "content": "shifted_binary_number=binary_number[:len(binary_number)-shift_amount]"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return_statement",
                    "range": [
                        193,
                        197
                    ],
                    "children": [],
                    "content": "return \"0b\"+shifted_binary_number\n"
                }
            ],
            "content": "def logical_right_shift(number:int,shift_amount:int)->str:\n\"\"\" \\n     Take in positive 2 integers. \\n     'number' is the integer to be logically right shifted 'shift_amount' times. \\n     i.e. (number >>> shift_amount) \\n     Return the shifted binary representation. \\n  \\n     >>> logical_right_shift(0, 1) \\n     '0b0' \\n     >>> logical_right_shift(1, 1) \\n     '0b0' \\n     >>> logical_right_shift(1, 5) \\n     '0b0' \\n     >>> logical_right_shift(17, 2) \\n     '0b100' \\n     >>> logical_right_shift(1983, 4) \\n     '0b1111011' \\n     >>> logical_right_shift(1, -1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: both inputs must be positive integers \\n     \"\"\"\nif number<0or shift_amount<0:\nraise ValueError(\"both inputs must be positive integers\")\n\nbinary_number=str(bin(number))[2:]\nif shift_amount>=len(binary_number):\nreturn \"0b0\"\nshifted_binary_number=binary_number[:len(binary_number)-shift_amount]\nreturn \"0b\"+shifted_binary_number\n"
        },
        {
            "type": "FunctionDecl",
            "name": "arithmetic_right_shift",
            "range": [
                200,
                360
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        202,
                        210
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "number",
                            "range": [
                                203,
                                205
                            ],
                            "children": [],
                            "content": "number:int"
                        },
                        {
                            "type": "Parameter",
                            "name": "shift_amount",
                            "range": [
                                207,
                                209
                            ],
                            "children": [],
                            "content": "shift_amount:int"
                        }
                    ],
                    "content": "(number:int,shift_amount:int)"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        211,
                        213
                    ],
                    "children": [],
                    "content": "->str"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        216,
                        218
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Take in 2 integers. \\n     'number' is the integer to be arithmetically right shifted 'shift_amount' times. \\n     i.e. (number >> shift_amount) \\n     Return the shifted binary representation. \\n  \\n     >>> arithmetic_right_shift(0, 1) \\n     '0b00' \\n     >>> arithmetic_right_shift(1, 1) \\n     '0b00' \\n     >>> arithmetic_right_shift(-1, 1) \\n     '0b11' \\n     >>> arithmetic_right_shift(17, 2) \\n     '0b000100' \\n     >>> arithmetic_right_shift(-17, 2) \\n     '0b111011' \\n     >>> arithmetic_right_shift(-1983, 4) \\n     '0b111110000100' \\n     \"\"\""
                },
                {
                    "type": "IfStatement",
                    "name": "if_statement",
                    "range": [
                        220,
                        254
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "condition",
                            "range": [
                                221,
                                224
                            ],
                            "children": [],
                            "content": "number>=0"
                        },
                        {
                            "type": "Block",
                            "name": "then_block",
                            "range": [
                                225,
                                254
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "assignment",
                                    "range": [
                                        234,
                                        253
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "binary_number",
                                            "range": [
                                                234,
                                                234
                                            ],
                                            "children": [],
                                            "content": "binary_number"
                                        },
                                        {
                                            "type": "Expression",
                                            "name": "expression",
                                            "range": [
                                                235,
                                                253
                                            ],
                                            "children": [],
                                            "content": "=\"0\"+str(bin(number)).strip(\"-\")[2:]"
                                        }
                                    ],
                                    "content": "binary_number=\"0\"+str(bin(number)).strip(\"-\")[2:]"
                                }
                            ],
                            "content": ":#Get binary representation of positive number\nbinary_number=\"0\"+str(bin(number)).strip(\"-\")[2:]\n"
                        }
                    ],
                    "content": "if number>=0:#Get binary representation of positive number\nbinary_number=\"0\"+str(bin(number)).strip(\"-\")[2:]\n"
                },
                {
                    "type": "ElseStatement",
                    "name": "else_statement",
                    "range": [
                        255,
                        309
                    ],
                    "children": [
                        {
                            "type": "Block",
                            "name": "else_block",
                            "range": [
                                256,
                                309
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "assignment",
                                    "range": [
                                        268,
                                        287
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "binary_number",
                                            "range": [
                                                268,
                                                268
                                            ],
                                            "children": [],
                                            "content": "binary_number"
                                        },
                                        {
                                            "type": "Expression",
                                            "name": "expression",
                                            "range": [
                                                269,
                                                287
                                            ],
                                            "children": [],
                                            "content": "=bin(abs(number)-(1<<binary_number_length))[3:]"
                                        }
                                    ],
                                    "content": "binary_number=bin(abs(number)-(1<<binary_number_length))[3:]"
                                },
                                {
                                    "type": "Assignment",
                                    "name": "assignment",
                                    "range": [
                                        289,
                                        308
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "binary_number",
                                            "range": [
                                                289,
                                                289
                                            ],
                                            "children": [],
                                            "content": "binary_number"
                                        },
                                        {
                                            "type": "Expression",
                                            "name": "expression",
                                            "range": [
                                                290,
                                                308
                                            ],
                                            "children": [],
                                            "content": "=(\n\"1\"+\"0\"*(binary_number_length-len(binary_number))+binary_number\n)"
                                        }
                                    ],
                                    "content": "binary_number=(\n\"1\"+\"0\"*(binary_number_length-len(binary_number))+binary_number\n)"
                                }
                            ],
                            "content": ":#Get binary(2's complement) representation of negative number \\n         binary_number_length = len(bin(number)[3:])  # Find 2' s complement of number\nbinary_number=bin(abs(number)-(1<<binary_number_length))[3:]\nbinary_number=(\n\"1\"+\"0\"*(binary_number_length-len(binary_number))+binary_number\n)\n"
                        }
                    ],
                    "content": "else:#Get binary(2's complement) representation of negative number \\n         binary_number_length = len(bin(number)[3:])  # Find 2' s complement of number\nbinary_number=bin(abs(number)-(1<<binary_number_length))[3:]\nbinary_number=(\n\"1\"+\"0\"*(binary_number_length-len(binary_number))+binary_number\n)\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if_statement",
                    "range": [
                        311,
                        333
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "condition",
                            "range": [
                                312,
                                319
                            ],
                            "children": [],
                            "content": "shift_amount>=len(binary_number):"
                        },
                        {
                            "type": "Block",
                            "name": "then_block",
                            "range": [
                                320,
                                333
                            ],
                            "children": [
                                {
                                    "type": "ReturnStatement",
                                    "name": "return_statement",
                                    "range": [
                                        321,
                                        333
                                    ],
                                    "children": [
                                        {
                                            "type": "Expression",
                                            "name": "expression",
                                            "range": [
                                                322,
                                                333
                                            ],
                                            "children": [],
                                            "content": "\"0b\"+binary_number[0]*len(binary_number)\n"
                                        }
                                    ],
                                    "content": "return \"0b\"+binary_number[0]*len(binary_number)\n"
                                }
                            ],
                            "content": "\nreturn \"0b\"+binary_number[0]*len(binary_number)\n"
                        }
                    ],
                    "content": "if shift_amount>=len(binary_number):\nreturn \"0b\"+binary_number[0]*len(binary_number)\n"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return_statement",
                    "range": [
                        334,
                        359
                    ],
                    "children": [
                        {
                            "type": "Expression",
                            "name": "expression",
                            "range": [
                                335,
                                359
                            ],
                            "children": [],
                            "content": "(\n\"0b\"\n+binary_number[0]*shift_amount\n+binary_number[:len(binary_number)-shift_amount]\n)"
                        }
                    ],
                    "content": "return(\n\"0b\"\n+binary_number[0]*shift_amount\n+binary_number[:len(binary_number)-shift_amount]\n)"
                }
            ],
            "content": "def arithmetic_right_shift(number:int,shift_amount:int)->str:\n\"\"\" \\n     Take in 2 integers. \\n     'number' is the integer to be arithmetically right shifted 'shift_amount' times. \\n     i.e. (number >> shift_amount) \\n     Return the shifted binary representation. \\n  \\n     >>> arithmetic_right_shift(0, 1) \\n     '0b00' \\n     >>> arithmetic_right_shift(1, 1) \\n     '0b00' \\n     >>> arithmetic_right_shift(-1, 1) \\n     '0b11' \\n     >>> arithmetic_right_shift(17, 2) \\n     '0b000100' \\n     >>> arithmetic_right_shift(-17, 2) \\n     '0b111011' \\n     >>> arithmetic_right_shift(-1983, 4) \\n     '0b111110000100' \\n     \"\"\"\nif number>=0:#Get binary representation of positive number\nbinary_number=\"0\"+str(bin(number)).strip(\"-\")[2:]\nelse:#Get binary(2's complement) representation of negative number \\n         binary_number_length = len(bin(number)[3:])  # Find 2' s complement of number\nbinary_number=bin(abs(number)-(1<<binary_number_length))[3:]\nbinary_number=(\n\"1\"+\"0\"*(binary_number_length-len(binary_number))+binary_number\n)\n\nif shift_amount>=len(binary_number):\nreturn \"0b\"+binary_number[0]*len(binary_number)\nreturn(\n\"0b\"\n+binary_number[0]*shift_amount\n+binary_number[:len(binary_number)-shift_amount]\n)\n"
        }
    ],
    "content": "#Information on binary shifts:\n#https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types\n#https://www.interviewcake.com/concept/java/bit-shift\n\n\ndef logical_left_shift(number:int,shift_amount:int)->str:\n\"\"\" \\n     Take in 2 positive integers. \\n     'number' is the integer to be logically left shifted 'shift_amount' times. \\n     i.e. (number << shift_amount) \\n     Return the shifted binary representation. \\n  \\n     >>> logical_left_shift(0, 1) \\n     '0b00' \\n     >>> logical_left_shift(1, 1) \\n     '0b10' \\n     >>> logical_left_shift(1, 5) \\n     '0b100000' \\n     >>> logical_left_shift(17, 2) \\n     '0b1000100' \\n     >>> logical_left_shift(1983, 4) \\n     '0b111101111110000' \\n     >>> logical_left_shift(1, -1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: both inputs must be positive integers \\n     \"\"\"\nif number<0or shift_amount<0:\nraise ValueError(\"both inputs must be positive integers\")\n\nbinary_number=str(bin(number))\nbinary_number+=\"0\"*shift_amount\nreturn binary_number\n\n\ndef logical_right_shift(number:int,shift_amount:int)->str:\n\"\"\" \\n     Take in positive 2 integers. \\n     'number' is the integer to be logically right shifted 'shift_amount' times. \\n     i.e. (number >>> shift_amount) \\n     Return the shifted binary representation. \\n  \\n     >>> logical_right_shift(0, 1) \\n     '0b0' \\n     >>> logical_right_shift(1, 1) \\n     '0b0' \\n     >>> logical_right_shift(1, 5) \\n     '0b0' \\n     >>> logical_right_shift(17, 2) \\n     '0b100' \\n     >>> logical_right_shift(1983, 4) \\n     '0b1111011' \\n     >>> logical_right_shift(1, -1) \\n     Traceback (most recent call last): \\n         ... \\n     ValueError: both inputs must be positive integers \\n     \"\"\"\nif number<0or shift_amount<0:\nraise ValueError(\"both inputs must be positive integers\")\n\nbinary_number=str(bin(number))[2:]\nif shift_amount>=len(binary_number):\nreturn \"0b0\"\nshifted_binary_number=binary_number[:len(binary_number)-shift_amount]\nreturn \"0b\"+shifted_binary_number\n\n\ndef arithmetic_right_shift(number:int,shift_amount:int)->str:\n\"\"\" \\n     Take in 2 integers. \\n     'number' is the integer to be arithmetically right shifted 'shift_amount' times. \\n     i.e. (number >> shift_amount) \\n     Return the shifted binary representation. \\n  \\n     >>> arithmetic_right_shift(0, 1) \\n     '0b00' \\n     >>> arithmetic_right_shift(1, 1) \\n     '0b00' \\n     >>> arithmetic_right_shift(-1, 1) \\n     '0b11' \\n     >>> arithmetic_right_shift(17, 2) \\n     '0b000100' \\n     >>> arithmetic_right_shift(-17, 2) \\n     '0b111011' \\n     >>> arithmetic_right_shift(-1983, 4) \\n     '0b111110000100' \\n     \"\"\"\nif number>=0:#Get binary representation of positive number\nbinary_number=\"0\"+str(bin(number)).strip(\"-\")[2:]\nelse:#Get binary(2's complement) representation of negative number \\n         binary_number_length = len(bin(number)[3:])  # Find 2' s complement of number\nbinary_number=bin(abs(number)-(1<<binary_number_length))[3:]\nbinary_number=(\n\"1\"+\"0\"*(binary_number_length-len(binary_number))+binary_number\n)\n\nif shift_amount>=len(binary_number):\nreturn \"0b\"+binary_number[0]*len(binary_number)\nreturn(\n\"0b\"\n+binary_number[0]*shift_amount\n+binary_number[:len(binary_number)-shift_amount]\n)\n"
}