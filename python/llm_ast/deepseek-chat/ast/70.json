{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        2360
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                2
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "logging",
                    "range": [
                        1,
                        1
                    ],
                    "children": [],
                    "content": "logging"
                }
            ],
            "content": "import logging\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                3,
                11
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "typing",
                    "range": [
                        4,
                        4
                    ],
                    "children": [],
                    "content": "typing"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "TYPE_CHECKING",
                    "range": [
                        6,
                        6
                    ],
                    "children": [],
                    "content": "TYPE_CHECKING"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Annotated",
                    "range": [
                        8,
                        8
                    ],
                    "children": [],
                    "content": "Annotated"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Literal",
                    "range": [
                        10,
                        10
                    ],
                    "children": [],
                    "content": "Literal"
                }
            ],
            "content": "from typing import TYPE_CHECKING,Annotated,Literal\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                13,
                29
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "fastapi",
                    "range": [
                        14,
                        14
                    ],
                    "children": [],
                    "content": "fastapi"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "APIRouter",
                    "range": [
                        16,
                        16
                    ],
                    "children": [],
                    "content": "APIRouter"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Body",
                    "range": [
                        18,
                        18
                    ],
                    "children": [],
                    "content": "Body"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Depends",
                    "range": [
                        20,
                        20
                    ],
                    "children": [],
                    "content": "Depends"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "HTTPException",
                    "range": [
                        22,
                        22
                    ],
                    "children": [],
                    "content": "HTTPException"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Path",
                    "range": [
                        24,
                        24
                    ],
                    "children": [],
                    "content": "Path"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Query",
                    "range": [
                        26,
                        26
                    ],
                    "children": [],
                    "content": "Query"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Request",
                    "range": [
                        28,
                        28
                    ],
                    "children": [],
                    "content": "Request"
                }
            ],
            "content": "from fastapi import APIRouter,Body,Depends,HTTPException,Path,Query,Request\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                30,
                38
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "pydantic",
                    "range": [
                        31,
                        31
                    ],
                    "children": [],
                    "content": "pydantic"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "BaseModel",
                    "range": [
                        33,
                        33
                    ],
                    "children": [],
                    "content": "BaseModel"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Field",
                    "range": [
                        35,
                        35
                    ],
                    "children": [],
                    "content": "Field"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "SecretStr",
                    "range": [
                        37,
                        37
                    ],
                    "children": [],
                    "content": "SecretStr"
                }
            ],
            "content": "from pydantic import BaseModel,Field,SecretStr\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                40,
                48
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend.data.graph",
                    "range": [
                        41,
                        45
                    ],
                    "children": [],
                    "content": "backend.data.graph"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "set_node_webhook",
                    "range": [
                        47,
                        47
                    ],
                    "children": [],
                    "content": "set_node_webhook"
                }
            ],
            "content": "from backend.data.graph import set_node_webhook\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                49,
                74
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend.data.integrations",
                    "range": [
                        50,
                        54
                    ],
                    "children": [],
                    "content": "backend.data.integrations"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "WebhookEvent",
                    "range": [
                        58,
                        58
                    ],
                    "children": [],
                    "content": "WebhookEvent"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "get_all_webhooks_by_creds",
                    "range": [
                        61,
                        61
                    ],
                    "children": [],
                    "content": "get_all_webhooks_by_creds"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "get_webhook",
                    "range": [
                        64,
                        64
                    ],
                    "children": [],
                    "content": "get_webhook"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "publish_webhook_event",
                    "range": [
                        67,
                        67
                    ],
                    "children": [],
                    "content": "publish_webhook_event"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "wait_for_webhook_event",
                    "range": [
                        70,
                        70
                    ],
                    "children": [],
                    "content": "wait_for_webhook_event"
                }
            ],
            "content": "from backend.data.integrations import(\nWebhookEvent,\nget_all_webhooks_by_creds,\nget_webhook,\npublish_webhook_event,\nwait_for_webhook_event,\n)\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                75,
                97
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend.data.model",
                    "range": [
                        76,
                        80
                    ],
                    "children": [],
                    "content": "backend.data.model"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "APIKeyCredentials",
                    "range": [
                        84,
                        84
                    ],
                    "children": [],
                    "content": "APIKeyCredentials"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Credentials",
                    "range": [
                        87,
                        87
                    ],
                    "children": [],
                    "content": "Credentials"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "CredentialsType",
                    "range": [
                        90,
                        90
                    ],
                    "children": [],
                    "content": "CredentialsType"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "OAuth2Credentials",
                    "range": [
                        93,
                        93
                    ],
                    "children": [],
                    "content": "OAuth2Credentials"
                }
            ],
            "content": "from backend.data.model import(\nAPIKeyCredentials,\nCredentials,\nCredentialsType,\nOAuth2Credentials,\n)\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                98,
                106
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend.executor.manager",
                    "range": [
                        99,
                        103
                    ],
                    "children": [],
                    "content": "backend.executor.manager"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "ExecutionManager",
                    "range": [
                        105,
                        105
                    ],
                    "children": [],
                    "content": "ExecutionManager"
                }
            ],
            "content": "from backend.executor.manager import ExecutionManager\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                107,
                115
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend.integrations.creds_manager",
                    "range": [
                        108,
                        112
                    ],
                    "children": [],
                    "content": "backend.integrations.creds_manager"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "IntegrationCredentialsManager",
                    "range": [
                        114,
                        114
                    ],
                    "children": [],
                    "content": "IntegrationCredentialsManager"
                }
            ],
            "content": "from backend.integrations.creds_manager import IntegrationCredentialsManager\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                116,
                124
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend.integrations.oauth",
                    "range": [
                        117,
                        121
                    ],
                    "children": [],
                    "content": "backend.integrations.oauth"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "HANDLERS_BY_NAME",
                    "range": [
                        123,
                        123
                    ],
                    "children": [],
                    "content": "HANDLERS_BY_NAME"
                }
            ],
            "content": "from backend.integrations.oauth import HANDLERS_BY_NAME\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                125,
                133
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend.integrations.providers",
                    "range": [
                        126,
                        130
                    ],
                    "children": [],
                    "content": "backend.integrations.providers"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "ProviderName",
                    "range": [
                        132,
                        132
                    ],
                    "children": [],
                    "content": "ProviderName"
                }
            ],
            "content": "from backend.integrations.providers import ProviderName\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                134,
                142
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend.integrations.webhooks",
                    "range": [
                        135,
                        139
                    ],
                    "children": [],
                    "content": "backend.integrations.webhooks"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "WEBHOOK_MANAGERS_BY_NAME",
                    "range": [
                        141,
                        141
                    ],
                    "children": [],
                    "content": "WEBHOOK_MANAGERS_BY_NAME"
                }
            ],
            "content": "from backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                143,
                151
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend.util.exceptions",
                    "range": [
                        144,
                        148
                    ],
                    "children": [],
                    "content": "backend.util.exceptions"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "NeedConfirmation",
                    "range": [
                        150,
                        150
                    ],
                    "children": [],
                    "content": "NeedConfirmation"
                }
            ],
            "content": "from backend.util.exceptions import NeedConfirmation\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                152,
                160
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend.util.service",
                    "range": [
                        153,
                        157
                    ],
                    "children": [],
                    "content": "backend.util.service"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "get_service_client",
                    "range": [
                        159,
                        159
                    ],
                    "children": [],
                    "content": "get_service_client"
                }
            ],
            "content": "from backend.util.service import get_service_client\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                161,
                169
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "backend.util.settings",
                    "range": [
                        162,
                        166
                    ],
                    "children": [],
                    "content": "backend.util.settings"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "Settings",
                    "range": [
                        168,
                        168
                    ],
                    "children": [],
                    "content": "Settings"
                }
            ],
            "content": "from backend.util.settings import Settings\n"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                171,
                174
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "TYPE_CHECKING",
                    "range": [
                        172,
                        172
                    ],
                    "children": [],
                    "content": "TYPE_CHECKING"
                }
            ],
            "content": "if TYPE_CHECKING:\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                175,
                183
            ],
            "children": [
                {
                    "type": "FromClause",
                    "name": "",
                    "range": [
                        175,
                        180
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "backend",
                            "range": [
                                176,
                                176
                            ],
                            "children": [],
                            "content": "backend"
                        },
                        {
                            "type": "Identifier",
                            "name": "integrations",
                            "range": [
                                178,
                                178
                            ],
                            "children": [],
                            "content": "integrations"
                        },
                        {
                            "type": "Identifier",
                            "name": "oauth",
                            "range": [
                                180,
                                180
                            ],
                            "children": [],
                            "content": "oauth"
                        }
                    ],
                    "content": "from backend.integrations.oauth"
                },
                {
                    "type": "ImportSpecifier",
                    "name": "",
                    "range": [
                        181,
                        182
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "BaseOAuthHandler",
                            "range": [
                                182,
                                182
                            ],
                            "children": [],
                            "content": "BaseOAuthHandler"
                        }
                    ],
                    "content": "import BaseOAuthHandler"
                }
            ],
            "content": "from backend.integrations.oauth import BaseOAuthHandler\n"
        },
        {
            "type": "ClassDecl",
            "name": "LoginResponse",
            "range": [
                223,
                238
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BaseModel",
                    "range": [
                        225,
                        227
                    ],
                    "children": [],
                    "content": "(BaseModel)"
                },
                {
                    "type": "ClassBody",
                    "name": "",
                    "range": [
                        228,
                        238
                    ],
                    "children": [
                        {
                            "type": "PropertyDecl",
                            "name": "login_url",
                            "range": [
                                230,
                                233
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        232,
                                        233
                                    ],
                                    "children": [],
                                    "content": "str\n"
                                }
                            ],
                            "content": "login_url:str\n"
                        },
                        {
                            "type": "PropertyDecl",
                            "name": "state_token",
                            "range": [
                                234,
                                237
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        236,
                                        237
                                    ],
                                    "children": [],
                                    "content": "str\n"
                                }
                            ],
                            "content": "state_token:str\n"
                        }
                    ],
                    "content": ":\nlogin_url:str\nstate_token:str\n\n"
                }
            ],
            "content": "class LoginResponse(BaseModel):\nlogin_url:str\nstate_token:str\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "login",
            "range": [
                247,
                391
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "provider",
                    "range": [
                        251,
                        265
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated",
                            "range": [
                                253,
                                265
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "ProviderName",
                                    "range": [
                                        256,
                                        256
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Type",
                                    "name": "Path",
                                    "range": [
                                        258,
                                        263
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "title",
                                            "range": [
                                                260,
                                                262
                                            ],
                                            "children": [],
                                            "content": "(title="
                                        }
                                    ],
                                    "content": ",Path(title=\"The provider to initiate an OAuth flow for\""
                                }
                            ],
                            "content": ":Annotated[\nProviderName,Path(title=\"The provider to initiate an OAuth flow for\")\n"
                        }
                    ],
                    "content": "\nprovider:Annotated[\nProviderName,Path(title=\"The provider to initiate an OAuth flow for\")\n"
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        268,
                        278
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated",
                            "range": [
                                270,
                                278
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "str",
                                    "range": [
                                        272,
                                        272
                                    ],
                                    "children": [],
                                    "content": "["
                                },
                                {
                                    "type": "Type",
                                    "name": "Depends",
                                    "range": [
                                        274,
                                        277
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "get_user_id",
                                            "range": [
                                                276,
                                                276
                                            ],
                                            "children": [],
                                            "content": "("
                                        }
                                    ],
                                    "content": ",Depends(get_user_id"
                                }
                            ],
                            "content": ":Annotated[str,Depends(get_user_id)"
                        }
                    ],
                    "content": "\nuser_id:Annotated[str,Depends(get_user_id)"
                },
                {
                    "type": "Parameter",
                    "name": "request",
                    "range": [
                        281,
                        284
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "Request",
                            "range": [
                                283,
                                283
                            ],
                            "children": [],
                            "content": ":"
                        }
                    ],
                    "content": "\nrequest:Request"
                },
                {
                    "type": "Parameter",
                    "name": "scopes",
                    "range": [
                        286,
                        302
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated",
                            "range": [
                                288,
                                302
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "str",
                                    "range": [
                                        291,
                                        291
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Type",
                                    "name": "Query",
                                    "range": [
                                        293,
                                        298
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "title",
                                            "range": [
                                                295,
                                                297
                                            ],
                                            "children": [],
                                            "content": "(title="
                                        }
                                    ],
                                    "content": ",Query(title=\"Comma-separated list of authorization scopes\""
                                }
                            ],
                            "content": ":Annotated[\nstr,Query(title=\"Comma-separated list of authorization scopes\")\n]="
                        }
                    ],
                    "content": "\nscopes:Annotated[\nstr,Query(title=\"Comma-separated list of authorization scopes\")\n]="
                },
                {
                    "type": "ReturnType",
                    "name": "LoginResponse",
                    "range": [
                        308,
                        309
                    ],
                    "children": [],
                    "content": ">LoginResponse"
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        310,
                        391
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "handler",
                            "range": [
                                311,
                                318
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "_get_provider_oauth_handler",
                                    "range": [
                                        313,
                                        318
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "request",
                                            "range": [
                                                315,
                                                315
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "provider",
                                            "range": [
                                                317,
                                                317
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": "=_get_provider_oauth_handler(request,provider"
                                }
                            ],
                            "content": "\nhandler=_get_provider_oauth_handler(request,provider"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "requested_scopes",
                            "range": [
                                321,
                                334
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "split",
                                    "range": [
                                        325,
                                        328
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "\",\"",
                                            "range": [
                                                327,
                                                327
                                            ],
                                            "children": [],
                                            "content": "("
                                        }
                                    ],
                                    "content": ".split(\",\""
                                },
                                {
                                    "type": "ConditionalExpression",
                                    "name": "",
                                    "range": [
                                        329,
                                        334
                                    ],
                                    "children": [
                                        {
                                            "type": "Test",
                                            "name": "scopes",
                                            "range": [
                                                330,
                                                330
                                            ],
                                            "children": [],
                                            "content": "if"
                                        },
                                        {
                                            "type": "Consequent",
                                            "name": "",
                                            "range": [
                                                332,
                                                333
                                            ],
                                            "children": [],
                                            "content": "else["
                                        }
                                    ],
                                    "content": ")if scopes else[]"
                                }
                            ],
                            "content": "\nrequested_scopes=scopes.split(\",\")if scopes else[]"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "state_token",
                            "range": [
                                350,
                                365
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "store_state_token",
                                    "range": [
                                        356,
                                        365
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "user_id",
                                            "range": [
                                                359,
                                                359
                                            ],
                                            "children": [],
                                            "content": "\n"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "provider",
                                            "range": [
                                                361,
                                                361
                                            ],
                                            "children": [],
                                            "content": ","
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "requested_scopes",
                                            "range": [
                                                363,
                                                363
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": ".store_state_token(\nuser_id,provider,requested_scopes\n"
                                }
                            ],
                            "content": "\nstate_token=creds_manager.store.store_state_token(\nuser_id,provider,requested_scopes\n"
                        },
                        {
                            "type": "VariableDecl",
                            "name": "login_url",
                            "range": [
                                368,
                                377
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "get_login_url",
                                    "range": [
                                        372,
                                        377
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "requested_scopes",
                                            "range": [
                                                374,
                                                374
                                            ],
                                            "children": [],
                                            "content": "("
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "state_token",
                                            "range": [
                                                376,
                                                376
                                            ],
                                            "children": [],
                                            "content": ","
                                        }
                                    ],
                                    "content": ".get_login_url(requested_scopes,state_token"
                                }
                            ],
                            "content": "\nlogin_url=handler.get_login_url(requested_scopes,state_token"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                380,
                                391
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "LoginResponse",
                                    "range": [
                                        382,
                                        390
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "login_url",
                                            "range": [
                                                384,
                                                385
                                            ],
                                            "children": [],
                                            "content": "login_url="
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "state_token",
                                            "range": [
                                                387,
                                                389
                                            ],
                                            "children": [],
                                            "content": ",state_token="
                                        }
                                    ],
                                    "content": "LoginResponse(login_url=login_url,state_token=state_token"
                                }
                            ],
                            "content": "\nreturn LoginResponse(login_url=login_url,state_token=state_token)"
                        }
                    ],
                    "content": ":\nhandler=_get_provider_oauth_handler(request,provider)\n\nrequested_scopes=scopes.split(\",\")if scopes else[]\n\n#Generate and store a secure random state token along with the scopes\nstate_token=creds_manager.store.store_state_token(\nuser_id,provider,requested_scopes\n)\n\nlogin_url=handler.get_login_url(requested_scopes,state_token)\n\nreturn LoginResponse(login_url=login_url,state_token=state_token)"
                }
            ],
            "content": "\ndef login(\nprovider:Annotated[\nProviderName,Path(title=\"The provider to initiate an OAuth flow for\")\n],\nuser_id:Annotated[str,Depends(get_user_id)],\nrequest:Request,\nscopes:Annotated[\nstr,Query(title=\"Comma-separated list of authorization scopes\")\n]=\"\",\n)->LoginResponse:\nhandler=_get_provider_oauth_handler(request,provider)\n\nrequested_scopes=scopes.split(\",\")if scopes else[]\n\n#Generate and store a secure random state token along with the scopes\nstate_token=creds_manager.store.store_state_token(\nuser_id,provider,requested_scopes\n)\n\nlogin_url=handler.get_login_url(requested_scopes,state_token)\n\nreturn LoginResponse(login_url=login_url,state_token=state_token)"
        },
        {
            "type": "ClassDecl",
            "name": "CredentialsMetaResponse",
            "range": [
                392,
                432
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BaseModel",
                    "range": [
                        394,
                        396
                    ],
                    "children": [],
                    "content": "\nclass CredentialsMetaResponse"
                },
                {
                    "type": "ClassBody",
                    "name": "",
                    "range": [
                        397,
                        432
                    ],
                    "children": [
                        {
                            "type": "FieldDecl",
                            "name": "id",
                            "range": [
                                399,
                                401
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        401,
                                        401
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": "):\n"
                        },
                        {
                            "type": "FieldDecl",
                            "name": "provider",
                            "range": [
                                403,
                                405
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str",
                                    "range": [
                                        405,
                                        405
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": ":str\n"
                        },
                        {
                            "type": "FieldDecl",
                            "name": "type",
                            "range": [
                                407,
                                409
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "CredentialsType",
                                    "range": [
                                        409,
                                        409
                                    ],
                                    "children": [],
                                    "content": "\n"
                                }
                            ],
                            "content": ":str\n"
                        },
                        {
                            "type": "FieldDecl",
                            "name": "title",
                            "range": [
                                411,
                                415
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str | None",
                                    "range": [
                                        413,
                                        415
                                    ],
                                    "children": [],
                                    "content": "\ntitle:"
                                }
                            ],
                            "content": ":CredentialsType\ntitle:"
                        },
                        {
                            "type": "FieldDecl",
                            "name": "scopes",
                            "range": [
                                417,
                                424
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "list[str] | None",
                                    "range": [
                                        419,
                                        424
                                    ],
                                    "children": [],
                                    "content": "\nscopes:list[str"
                                }
                            ],
                            "content": "|None\nscopes:list[str"
                        },
                        {
                            "type": "FieldDecl",
                            "name": "username",
                            "range": [
                                426,
                                430
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "str | None",
                                    "range": [
                                        428,
                                        430
                                    ],
                                    "children": [],
                                    "content": "\nusername:"
                                }
                            ],
                            "content": "|None\nusername:"
                        }
                    ],
                    "content": "(BaseModel):\nid:str\nprovider:str\ntype:CredentialsType\ntitle:str|None\nscopes:list[str]|None\nusername:str|"
                }
            ],
            "content": "\n\n\nclass CredentialsMetaResponse(BaseModel):\nid:str\nprovider:str\ntype:CredentialsType\ntitle:str|None\nscopes:list[str]|None\nusername:str|"
        },
        {
            "type": "FunctionDecl",
            "name": "callback",
            "range": [
                441,
                810
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@router.post",
                    "range": [
                        433,
                        440
                    ],
                    "children": [],
                    "content": "None\n\n\n@router.post"
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        443,
                        510
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "provider",
                            "range": [
                                445,
                                459
                            ],
                            "children": [],
                            "content": "def callback(\nprovider:Annotated[\nProviderName,Path(title="
                        },
                        {
                            "type": "Parameter",
                            "name": "code",
                            "range": [
                                462,
                                474
                            ],
                            "children": [],
                            "content": "\n],\ncode:Annotated[str,Body(title"
                        },
                        {
                            "type": "Parameter",
                            "name": "state_token",
                            "range": [
                                477,
                                489
                            ],
                            "children": [],
                            "content": ")],\nstate_token:Annotated[str,Body(title"
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                492,
                                502
                            ],
                            "children": [],
                            "content": ")],\nuser_id:Annotated[str,Depends"
                        },
                        {
                            "type": "Parameter",
                            "name": "request",
                            "range": [
                                505,
                                508
                            ],
                            "children": [],
                            "content": ")],\n"
                        }
                    ],
                    "content": ")\ndef callback(\nprovider:Annotated[\nProviderName,Path(title=\"The target provider for this OAuth exchange\")\n],\ncode:Annotated[str,Body(title=\"Authorization code acquired by user login\")],\nstate_token:Annotated[str,Body(title=\"Anti-CSRF nonce\")],\nuser_id:Annotated[str,Depends(get_user_id)],\nrequest:"
                },
                {
                    "type": "ReturnType",
                    "name": "CredentialsMetaResponse",
                    "range": [
                        511,
                        514
                    ],
                    "children": [],
                    "content": "Request,\n)"
                },
                {
                    "type": "Block",
                    "name": "function_body",
                    "range": [
                        515,
                        810
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.debug",
                            "range": [
                                516,
                                523
                            ],
                            "children": [],
                            "content": ">CredentialsMetaResponse:\nlogger.debug("
                        },
                        {
                            "type": "Assignment",
                            "name": "handler",
                            "range": [
                                524,
                                532
                            ],
                            "children": [],
                            "content": "f \"Received OAuth callback for provider: {provider}\")\nhandler=_get_provider_oauth_handler(request"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_not_creds_manager.store.verify_state_token",
                            "range": [
                                540,
                                575
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "if_body",
                                    "range": [
                                        555,
                                        575
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "logger.warning",
                                            "range": [
                                                556,
                                                563
                                            ],
                                            "children": [],
                                            "content": "provider):\nlogger.warning("
                                        },
                                        {
                                            "type": "ThrowStatement",
                                            "name": "raise_HTTPException",
                                            "range": [
                                                564,
                                                575
                                            ],
                                            "children": [],
                                            "content": "f \"Invalid or expired state token for user {user_id}\")\nraise HTTPException(status_code=400,detail"
                                        }
                                    ],
                                    "content": ",provider):\nlogger.warning(f \"Invalid or expired state token for user {user_id}\")\nraise HTTPException(status_code=400,detail"
                                }
                            ],
                            "content": "the state token\nif not creds_manager.store.verify_state_token(user_id,state_token,provider):\nlogger.warning(f \"Invalid or expired state token for user {user_id}\")\nraise HTTPException(status_code=400,detail"
                        },
                        {
                            "type": "TryStatement",
                            "name": "try",
                            "range": [
                                577,
                                723
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "try_body",
                                    "range": [
                                        579,
                                        694
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "scopes",
                                            "range": [
                                                580,
                                                596
                                            ],
                                            "children": [],
                                            "content": "\ntry:\nscopes=creds_manager.store.get_any_valid_scopes_from_state_token(\nuser_id,state_token,"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "logger.debug",
                                            "range": [
                                                597,
                                                604
                                            ],
                                            "children": [],
                                            "content": "provider\n)\nlogger.debug("
                                        },
                                        {
                                            "type": "Assignment",
                                            "name": "scopes",
                                            "range": [
                                                606,
                                                614
                                            ],
                                            "children": [],
                                            "content": "\"Retrieved scopes from state token: {scopes}\")\n\nscopes=handler.handle_default_scopes"
                                        },
                                        {
                                            "type": "Assignment",
                                            "name": "credentials",
                                            "range": [
                                                616,
                                                626
                                            ],
                                            "children": [],
                                            "content": "scopes)\n\ncredentials=handler.exchange_code_for_tokens(code"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "logger.debug",
                                            "range": [
                                                627,
                                                634
                                            ],
                                            "children": [],
                                            "content": ",scopes)\nlogger.debug("
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if_not_set(scopes).issubset(set(credentials.scopes))",
                                            "range": [
                                                649,
                                                694
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "if_body",
                                                    "range": [
                                                        666,
                                                        694
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "logger.warning",
                                                            "range": [
                                                                681,
                                                                693
                                                            ],
                                                            "children": [],
                                                            "content": "{event_type}\") \\n             continue \\n         logger.debug(f\" Executing graph#{node.graph_id}node"
                                                        }
                                                    ],
                                                    "content": "scopes)):\n#For now,we 'll just log the warning and continue \\n             logger.warning( \\n                 f\"Granted scopes {credentials.scopes} for provider {provider.value} \" \\n                 f\"do not include all requested scopes {scopes}\" \\n             ) \\n  \\n     except Exception as e: \\n         logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\") \\n         raise HTTPException( \\n             status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\" \\n         ) \\n  \\n     # TODO: Allow specifying `title` to set on `credentials` \\n     creds_manager.create(user_id, credentials) \\n  \\n     logger.debug( \\n         f\"Successfully processed OAuth callback for user {user_id} \" \\n         f\"and provider {provider.value}\" \\n     ) \\n     return CredentialsMetaResponse( \\n         id=credentials.id, \\n         provider=credentials.provider, \\n         type=credentials.type, \\n         title=credentials.title, \\n         scopes=credentials.scopes, \\n         username=credentials.username, \\n     ) \\n  \\n  \\n @router.get(\"/credentials\") \\n def list_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_all_creds(user_id) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials\") \\n def list_credentials_by_provider( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to list credentials for\") \\n     ], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_creds_by_provider(user_id, provider) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials/{cred_id}\") \\n def get_credential( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to retrieve credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> Credentials: \\n     credential = creds_manager.get(user_id, cred_id) \\n     if not credential: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if credential.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n     return credential \\n  \\n  \\n @router.post(\"/{provider}/credentials\", status_code=201) \\n def create_api_key_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to create credentials for\") \\n     ], \\n     api_key: Annotated[str, Body(title=\"The API key to store\")], \\n     title: Annotated[str, Body(title=\"Optional title for the credentials\")], \\n     expires_at: Annotated[ \\n         int | None, Body(title=\"Unix timestamp when the key expires\") \\n     ] = None, \\n ) -> APIKeyCredentials: \\n     new_credentials = APIKeyCredentials( \\n         provider=provider, \\n         api_key=SecretStr(api_key), \\n         title=title, \\n         expires_at=expires_at, \\n     ) \\n  \\n     try: \\n         creds_manager.create(user_id, new_credentials) \\n     except Exception as e: \\n         raise HTTPException( \\n             status_code=500, detail=f\"Failed to store credentials: {str(e)}\" \\n         ) \\n     return new_credentials \\n  \\n  \\n class CredentialsDeletionResponse(BaseModel): \\n     deleted: Literal[True] = True \\n     revoked: bool | None = Field( \\n         description=\"Indicates whether the credentials were also revoked by their \" \\n         \"provider. `None`/`null` if not applicable, e.g. when deleting \" \\n         \"non-revocable credentials such as API keys.\" \\n     ) \\n  \\n  \\n class CredentialsDeletionNeedsConfirmationResponse(BaseModel): \\n     deleted: Literal[False] = False \\n     need_confirmation: Literal[True] = True \\n     message: str \\n  \\n  \\n @router.delete(\"/{provider}/credentials/{cred_id}\") \\n async def delete_credentials( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to delete credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     force: Annotated[ \\n         bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\") \\n     ] = False, \\n ) -> CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse: \\n     creds = creds_manager.store.get_creds_by_id(user_id, cred_id) \\n     if not creds: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if creds.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n  \\n     try: \\n         await remove_all_webhooks_for_credentials(creds, force) \\n     except NeedConfirmation as e: \\n         return CredentialsDeletionNeedsConfirmationResponse(message=str(e)) \\n  \\n     creds_manager.delete(user_id, cred_id) \\n  \\n     tokens_revoked = None \\n     if isinstance(creds, OAuth2Credentials): \\n         handler = _get_provider_oauth_handler(request, provider) \\n         tokens_revoked = handler.revoke_tokens(creds) \\n  \\n     return CredentialsDeletionResponse(revoked=tokens_revoked) \\n  \\n  \\n # ------------------------- WEBHOOK STUFF -------------------------- # \\n  \\n  \\n # ⚠️ Note \\n # No user auth check because this endpoint is for webhook ingress and relies on \\n # validation by the provider-specific `WebhooksManager`. \\n @router.post(\"/{provider}/webhooks/{webhook_id}/ingress\") \\n async def webhook_ingress_generic( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"Provider where the webhook was registered\") \\n     ], \\n     webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")], \\n ): \\n     logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\") \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]() \\n     webhook = await get_webhook(webhook_id) \\n     logger.debug(f\"Webhook #{webhook_id}: {webhook}\") \\n     payload, event_type = await webhook_manager.validate_payload(webhook, request) \\n     logger.debug( \\n         f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \" \\n         f\"with payload {payload}\" \\n     ) \\n  \\n     webhook_event = WebhookEvent( \\n         provider=provider, \\n         webhook_id=webhook_id, \\n         event_type=event_type, \\n         payload=payload, \\n     ) \\n     await publish_webhook_event(webhook_event) \\n     logger.debug(f\"Webhook event published: {webhook_event}\") \\n  \\n     if not webhook.attached_nodes: \\n         return \\n  \\n     executor = get_service_client(ExecutionManager) \\n     for node in webhook.attached_nodes: \\n         logger.debug(f\"Webhook-attached node: {node}\") \\n         if not node.is_triggered_by_event_type(event_type): \\n             logger.debug(f\"Node #{node.id} doesn' t trigger on event{event_type}\") \\n             continue \\n         logger.debug(f\" Executing graph#{node.graph_id}node#"
                                                }
                                            ],
                                            "content": "the requested scopes\nif not set(scopes).issubset(set(credentials.scopes)):\n#For now,we 'll just log the warning and continue \\n             logger.warning( \\n                 f\"Granted scopes {credentials.scopes} for provider {provider.value} \" \\n                 f\"do not include all requested scopes {scopes}\" \\n             ) \\n  \\n     except Exception as e: \\n         logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\") \\n         raise HTTPException( \\n             status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\" \\n         ) \\n  \\n     # TODO: Allow specifying `title` to set on `credentials` \\n     creds_manager.create(user_id, credentials) \\n  \\n     logger.debug( \\n         f\"Successfully processed OAuth callback for user {user_id} \" \\n         f\"and provider {provider.value}\" \\n     ) \\n     return CredentialsMetaResponse( \\n         id=credentials.id, \\n         provider=credentials.provider, \\n         type=credentials.type, \\n         title=credentials.title, \\n         scopes=credentials.scopes, \\n         username=credentials.username, \\n     ) \\n  \\n  \\n @router.get(\"/credentials\") \\n def list_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_all_creds(user_id) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials\") \\n def list_credentials_by_provider( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to list credentials for\") \\n     ], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_creds_by_provider(user_id, provider) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials/{cred_id}\") \\n def get_credential( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to retrieve credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> Credentials: \\n     credential = creds_manager.get(user_id, cred_id) \\n     if not credential: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if credential.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n     return credential \\n  \\n  \\n @router.post(\"/{provider}/credentials\", status_code=201) \\n def create_api_key_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to create credentials for\") \\n     ], \\n     api_key: Annotated[str, Body(title=\"The API key to store\")], \\n     title: Annotated[str, Body(title=\"Optional title for the credentials\")], \\n     expires_at: Annotated[ \\n         int | None, Body(title=\"Unix timestamp when the key expires\") \\n     ] = None, \\n ) -> APIKeyCredentials: \\n     new_credentials = APIKeyCredentials( \\n         provider=provider, \\n         api_key=SecretStr(api_key), \\n         title=title, \\n         expires_at=expires_at, \\n     ) \\n  \\n     try: \\n         creds_manager.create(user_id, new_credentials) \\n     except Exception as e: \\n         raise HTTPException( \\n             status_code=500, detail=f\"Failed to store credentials: {str(e)}\" \\n         ) \\n     return new_credentials \\n  \\n  \\n class CredentialsDeletionResponse(BaseModel): \\n     deleted: Literal[True] = True \\n     revoked: bool | None = Field( \\n         description=\"Indicates whether the credentials were also revoked by their \" \\n         \"provider. `None`/`null` if not applicable, e.g. when deleting \" \\n         \"non-revocable credentials such as API keys.\" \\n     ) \\n  \\n  \\n class CredentialsDeletionNeedsConfirmationResponse(BaseModel): \\n     deleted: Literal[False] = False \\n     need_confirmation: Literal[True] = True \\n     message: str \\n  \\n  \\n @router.delete(\"/{provider}/credentials/{cred_id}\") \\n async def delete_credentials( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to delete credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     force: Annotated[ \\n         bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\") \\n     ] = False, \\n ) -> CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse: \\n     creds = creds_manager.store.get_creds_by_id(user_id, cred_id) \\n     if not creds: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if creds.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n  \\n     try: \\n         await remove_all_webhooks_for_credentials(creds, force) \\n     except NeedConfirmation as e: \\n         return CredentialsDeletionNeedsConfirmationResponse(message=str(e)) \\n  \\n     creds_manager.delete(user_id, cred_id) \\n  \\n     tokens_revoked = None \\n     if isinstance(creds, OAuth2Credentials): \\n         handler = _get_provider_oauth_handler(request, provider) \\n         tokens_revoked = handler.revoke_tokens(creds) \\n  \\n     return CredentialsDeletionResponse(revoked=tokens_revoked) \\n  \\n  \\n # ------------------------- WEBHOOK STUFF -------------------------- # \\n  \\n  \\n # ⚠️ Note \\n # No user auth check because this endpoint is for webhook ingress and relies on \\n # validation by the provider-specific `WebhooksManager`. \\n @router.post(\"/{provider}/webhooks/{webhook_id}/ingress\") \\n async def webhook_ingress_generic( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"Provider where the webhook was registered\") \\n     ], \\n     webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")], \\n ): \\n     logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\") \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]() \\n     webhook = await get_webhook(webhook_id) \\n     logger.debug(f\"Webhook #{webhook_id}: {webhook}\") \\n     payload, event_type = await webhook_manager.validate_payload(webhook, request) \\n     logger.debug( \\n         f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \" \\n         f\"with payload {payload}\" \\n     ) \\n  \\n     webhook_event = WebhookEvent( \\n         provider=provider, \\n         webhook_id=webhook_id, \\n         event_type=event_type, \\n         payload=payload, \\n     ) \\n     await publish_webhook_event(webhook_event) \\n     logger.debug(f\"Webhook event published: {webhook_event}\") \\n  \\n     if not webhook.attached_nodes: \\n         return \\n  \\n     executor = get_service_client(ExecutionManager) \\n     for node in webhook.attached_nodes: \\n         logger.debug(f\"Webhook-attached node: {node}\") \\n         if not node.is_triggered_by_event_type(event_type): \\n             logger.debug(f\"Node #{node.id} doesn' t trigger on event{event_type}\") \\n             continue \\n         logger.debug(f\" Executing graph#{node.graph_id}node#"
                                        }
                                    ],
                                    "content": "\n\ntry:\nscopes=creds_manager.store.get_any_valid_scopes_from_state_token(\nuser_id,state_token,provider\n)\nlogger.debug(f \"Retrieved scopes from state token: {scopes}\")\n\nscopes=handler.handle_default_scopes(scopes)\n\ncredentials=handler.exchange_code_for_tokens(code,scopes)\nlogger.debug(f \"Received credentials with final scopes: {credentials.scopes}\")\n\n#Check if the granted scopes are sufficient for the requested scopes\nif not set(scopes).issubset(set(credentials.scopes)):\n#For now,we 'll just log the warning and continue \\n             logger.warning( \\n                 f\"Granted scopes {credentials.scopes} for provider {provider.value} \" \\n                 f\"do not include all requested scopes {scopes}\" \\n             ) \\n  \\n     except Exception as e: \\n         logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\") \\n         raise HTTPException( \\n             status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\" \\n         ) \\n  \\n     # TODO: Allow specifying `title` to set on `credentials` \\n     creds_manager.create(user_id, credentials) \\n  \\n     logger.debug( \\n         f\"Successfully processed OAuth callback for user {user_id} \" \\n         f\"and provider {provider.value}\" \\n     ) \\n     return CredentialsMetaResponse( \\n         id=credentials.id, \\n         provider=credentials.provider, \\n         type=credentials.type, \\n         title=credentials.title, \\n         scopes=credentials.scopes, \\n         username=credentials.username, \\n     ) \\n  \\n  \\n @router.get(\"/credentials\") \\n def list_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_all_creds(user_id) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials\") \\n def list_credentials_by_provider( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to list credentials for\") \\n     ], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_creds_by_provider(user_id, provider) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials/{cred_id}\") \\n def get_credential( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to retrieve credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> Credentials: \\n     credential = creds_manager.get(user_id, cred_id) \\n     if not credential: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if credential.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n     return credential \\n  \\n  \\n @router.post(\"/{provider}/credentials\", status_code=201) \\n def create_api_key_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to create credentials for\") \\n     ], \\n     api_key: Annotated[str, Body(title=\"The API key to store\")], \\n     title: Annotated[str, Body(title=\"Optional title for the credentials\")], \\n     expires_at: Annotated[ \\n         int | None, Body(title=\"Unix timestamp when the key expires\") \\n     ] = None, \\n ) -> APIKeyCredentials: \\n     new_credentials = APIKeyCredentials( \\n         provider=provider, \\n         api_key=SecretStr(api_key), \\n         title=title, \\n         expires_at=expires_at, \\n     ) \\n  \\n     try: \\n         creds_manager.create(user_id, new_credentials) \\n     except Exception as e: \\n         raise HTTPException( \\n             status_code=500, detail=f\"Failed to store credentials: {str(e)}\" \\n         ) \\n     return new_credentials \\n  \\n  \\n class CredentialsDeletionResponse(BaseModel): \\n     deleted: Literal[True] = True \\n     revoked: bool | None = Field( \\n         description=\"Indicates whether the credentials were also revoked by their \" \\n         \"provider. `None`/`null` if not applicable, e.g. when deleting \" \\n         \"non-revocable credentials such as API keys.\" \\n     ) \\n  \\n  \\n class CredentialsDeletionNeedsConfirmationResponse(BaseModel): \\n     deleted: Literal[False] = False \\n     need_confirmation: Literal[True] = True \\n     message: str \\n  \\n  \\n @router.delete(\"/{provider}/credentials/{cred_id}\") \\n async def delete_credentials( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to delete credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     force: Annotated[ \\n         bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\") \\n     ] = False, \\n ) -> CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse: \\n     creds = creds_manager.store.get_creds_by_id(user_id, cred_id) \\n     if not creds: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if creds.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n  \\n     try: \\n         await remove_all_webhooks_for_credentials(creds, force) \\n     except NeedConfirmation as e: \\n         return CredentialsDeletionNeedsConfirmationResponse(message=str(e)) \\n  \\n     creds_manager.delete(user_id, cred_id) \\n  \\n     tokens_revoked = None \\n     if isinstance(creds, OAuth2Credentials): \\n         handler = _get_provider_oauth_handler(request, provider) \\n         tokens_revoked = handler.revoke_tokens(creds) \\n  \\n     return CredentialsDeletionResponse(revoked=tokens_revoked) \\n  \\n  \\n # ------------------------- WEBHOOK STUFF -------------------------- # \\n  \\n  \\n # ⚠️ Note \\n # No user auth check because this endpoint is for webhook ingress and relies on \\n # validation by the provider-specific `WebhooksManager`. \\n @router.post(\"/{provider}/webhooks/{webhook_id}/ingress\") \\n async def webhook_ingress_generic( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"Provider where the webhook was registered\") \\n     ], \\n     webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")], \\n ): \\n     logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\") \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]() \\n     webhook = await get_webhook(webhook_id) \\n     logger.debug(f\"Webhook #{webhook_id}: {webhook}\") \\n     payload, event_type = await webhook_manager.validate_payload(webhook, request) \\n     logger.debug( \\n         f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \" \\n         f\"with payload {payload}\" \\n     ) \\n  \\n     webhook_event = WebhookEvent( \\n         provider=provider, \\n         webhook_id=webhook_id, \\n         event_type=event_type, \\n         payload=payload, \\n     ) \\n     await publish_webhook_event(webhook_event) \\n     logger.debug(f\"Webhook event published: {webhook_event}\") \\n  \\n     if not webhook.attached_nodes: \\n         return \\n  \\n     executor = get_service_client(ExecutionManager) \\n     for node in webhook.attached_nodes: \\n         logger.debug(f\"Webhook-attached node: {node}\") \\n         if not node.is_triggered_by_event_type(event_type): \\n             logger.debug(f\"Node #{node.id} doesn' t trigger on event{event_type}\") \\n             continue \\n         logger.debug(f\" Executing graph#{node.graph_id}node#"
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except_Exception_as_e",
                                    "range": [
                                        695,
                                        723
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "catch_body",
                                            "range": [
                                                700,
                                                723
                                            ],
                                            "children": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "name": "logger.error",
                                                    "range": [
                                                        701,
                                                        708
                                                    ],
                                                    "children": [],
                                                    "content": "webhook_{webhook_id}_payload \": payload}, \\n             user_id=webhook.user_id, \\n         ) \\n  \\n  \\n @router.post(\"/webhooks"
                                                },
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "raise_HTTPException",
                                                    "range": [
                                                        709,
                                                        723
                                                    ],
                                                    "children": [],
                                                    "content": "/{webhook_id}/ping \") \\n async def webhook_ping( \\n     webhook_id: Annotated[str, Path(title=\" Our ID for the webhook \")], \\n     user_id: Annotated[str, Depends(get_user_id)],  # require auth \\n ): \\n     webhook = await get_webhook(webhook_id) \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]() \\n  \\n     credentials = ( \\n         creds_manager.get(user_id, webhook.credentials_id) \\n         if webhook.credentials_id \\n         else None \\n     ) \\n     try: \\n         await webhook_manager.trigger_ping(webhook, credentials) \\n     except NotImplementedError: \\n         return False \\n  \\n     if not await wait_for_webhook_event(webhook_id, event_type=\" ping \", timeout=10): \\n         raise HTTPException(status_code=504, detail=\""
                                                }
                                            ],
                                            "content": "\") \\n         executor.add_execution( \\n             node.graph_id, \\n             data={f\" webhook_{webhook_id}_payload \": payload}, \\n             user_id=webhook.user_id, \\n         ) \\n  \\n  \\n @router.post(\"/webhooks/{webhook_id}/ping \") \\n async def webhook_ping( \\n     webhook_id: Annotated[str, Path(title=\" Our ID for the webhook \")], \\n     user_id: Annotated[str, Depends(get_user_id)],  # require auth \\n ): \\n     webhook = await get_webhook(webhook_id) \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]() \\n  \\n     credentials = ( \\n         creds_manager.get(user_id, webhook.credentials_id) \\n         if webhook.credentials_id \\n         else None \\n     ) \\n     try: \\n         await webhook_manager.trigger_ping(webhook, credentials) \\n     except NotImplementedError: \\n         return False \\n  \\n     if not await wait_for_webhook_event(webhook_id, event_type=\" ping \", timeout=10): \\n         raise HTTPException(status_code=504, detail=\""
                                        }
                                    ],
                                    "content": "{node.id}\") \\n         executor.add_execution( \\n             node.graph_id, \\n             data={f\" webhook_{webhook_id}_payload \": payload}, \\n             user_id=webhook.user_id, \\n         ) \\n  \\n  \\n @router.post(\"/webhooks/{webhook_id}/ping \") \\n async def webhook_ping( \\n     webhook_id: Annotated[str, Path(title=\" Our ID for the webhook \")], \\n     user_id: Annotated[str, Depends(get_user_id)],  # require auth \\n ): \\n     webhook = await get_webhook(webhook_id) \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]() \\n  \\n     credentials = ( \\n         creds_manager.get(user_id, webhook.credentials_id) \\n         if webhook.credentials_id \\n         else None \\n     ) \\n     try: \\n         await webhook_manager.trigger_ping(webhook, credentials) \\n     except NotImplementedError: \\n         return False \\n  \\n     if not await wait_for_webhook_event(webhook_id, event_type=\" ping \", timeout=10): \\n         raise HTTPException(status_code=504, detail=\""
                                }
                            ],
                            "content": "\"Invalid or expired state token\")\n\ntry:\nscopes=creds_manager.store.get_any_valid_scopes_from_state_token(\nuser_id,state_token,provider\n)\nlogger.debug(f \"Retrieved scopes from state token: {scopes}\")\n\nscopes=handler.handle_default_scopes(scopes)\n\ncredentials=handler.exchange_code_for_tokens(code,scopes)\nlogger.debug(f \"Received credentials with final scopes: {credentials.scopes}\")\n\n#Check if the granted scopes are sufficient for the requested scopes\nif not set(scopes).issubset(set(credentials.scopes)):\n#For now,we 'll just log the warning and continue \\n             logger.warning( \\n                 f\"Granted scopes {credentials.scopes} for provider {provider.value} \" \\n                 f\"do not include all requested scopes {scopes}\" \\n             ) \\n  \\n     except Exception as e: \\n         logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\") \\n         raise HTTPException( \\n             status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\" \\n         ) \\n  \\n     # TODO: Allow specifying `title` to set on `credentials` \\n     creds_manager.create(user_id, credentials) \\n  \\n     logger.debug( \\n         f\"Successfully processed OAuth callback for user {user_id} \" \\n         f\"and provider {provider.value}\" \\n     ) \\n     return CredentialsMetaResponse( \\n         id=credentials.id, \\n         provider=credentials.provider, \\n         type=credentials.type, \\n         title=credentials.title, \\n         scopes=credentials.scopes, \\n         username=credentials.username, \\n     ) \\n  \\n  \\n @router.get(\"/credentials\") \\n def list_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_all_creds(user_id) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials\") \\n def list_credentials_by_provider( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to list credentials for\") \\n     ], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_creds_by_provider(user_id, provider) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials/{cred_id}\") \\n def get_credential( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to retrieve credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> Credentials: \\n     credential = creds_manager.get(user_id, cred_id) \\n     if not credential: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if credential.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n     return credential \\n  \\n  \\n @router.post(\"/{provider}/credentials\", status_code=201) \\n def create_api_key_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to create credentials for\") \\n     ], \\n     api_key: Annotated[str, Body(title=\"The API key to store\")], \\n     title: Annotated[str, Body(title=\"Optional title for the credentials\")], \\n     expires_at: Annotated[ \\n         int | None, Body(title=\"Unix timestamp when the key expires\") \\n     ] = None, \\n ) -> APIKeyCredentials: \\n     new_credentials = APIKeyCredentials( \\n         provider=provider, \\n         api_key=SecretStr(api_key), \\n         title=title, \\n         expires_at=expires_at, \\n     ) \\n  \\n     try: \\n         creds_manager.create(user_id, new_credentials) \\n     except Exception as e: \\n         raise HTTPException( \\n             status_code=500, detail=f\"Failed to store credentials: {str(e)}\" \\n         ) \\n     return new_credentials \\n  \\n  \\n class CredentialsDeletionResponse(BaseModel): \\n     deleted: Literal[True] = True \\n     revoked: bool | None = Field( \\n         description=\"Indicates whether the credentials were also revoked by their \" \\n         \"provider. `None`/`null` if not applicable, e.g. when deleting \" \\n         \"non-revocable credentials such as API keys.\" \\n     ) \\n  \\n  \\n class CredentialsDeletionNeedsConfirmationResponse(BaseModel): \\n     deleted: Literal[False] = False \\n     need_confirmation: Literal[True] = True \\n     message: str \\n  \\n  \\n @router.delete(\"/{provider}/credentials/{cred_id}\") \\n async def delete_credentials( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to delete credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     force: Annotated[ \\n         bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\") \\n     ] = False, \\n ) -> CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse: \\n     creds = creds_manager.store.get_creds_by_id(user_id, cred_id) \\n     if not creds: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if creds.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n  \\n     try: \\n         await remove_all_webhooks_for_credentials(creds, force) \\n     except NeedConfirmation as e: \\n         return CredentialsDeletionNeedsConfirmationResponse(message=str(e)) \\n  \\n     creds_manager.delete(user_id, cred_id) \\n  \\n     tokens_revoked = None \\n     if isinstance(creds, OAuth2Credentials): \\n         handler = _get_provider_oauth_handler(request, provider) \\n         tokens_revoked = handler.revoke_tokens(creds) \\n  \\n     return CredentialsDeletionResponse(revoked=tokens_revoked) \\n  \\n  \\n # ------------------------- WEBHOOK STUFF -------------------------- # \\n  \\n  \\n # ⚠️ Note \\n # No user auth check because this endpoint is for webhook ingress and relies on \\n # validation by the provider-specific `WebhooksManager`. \\n @router.post(\"/{provider}/webhooks/{webhook_id}/ingress\") \\n async def webhook_ingress_generic( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"Provider where the webhook was registered\") \\n     ], \\n     webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")], \\n ): \\n     logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\") \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]() \\n     webhook = await get_webhook(webhook_id) \\n     logger.debug(f\"Webhook #{webhook_id}: {webhook}\") \\n     payload, event_type = await webhook_manager.validate_payload(webhook, request) \\n     logger.debug( \\n         f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \" \\n         f\"with payload {payload}\" \\n     ) \\n  \\n     webhook_event = WebhookEvent( \\n         provider=provider, \\n         webhook_id=webhook_id, \\n         event_type=event_type, \\n         payload=payload, \\n     ) \\n     await publish_webhook_event(webhook_event) \\n     logger.debug(f\"Webhook event published: {webhook_event}\") \\n  \\n     if not webhook.attached_nodes: \\n         return \\n  \\n     executor = get_service_client(ExecutionManager) \\n     for node in webhook.attached_nodes: \\n         logger.debug(f\"Webhook-attached node: {node}\") \\n         if not node.is_triggered_by_event_type(event_type): \\n             logger.debug(f\"Node #{node.id} doesn' t trigger on event{event_type}\") \\n             continue \\n         logger.debug(f\" Executing graph#{node.graph_id}node#{node.id}\") \\n         executor.add_execution( \\n             node.graph_id, \\n             data={f\" webhook_{webhook_id}_payload \": payload}, \\n             user_id=webhook.user_id, \\n         ) \\n  \\n  \\n @router.post(\"/webhooks/{webhook_id}/ping \") \\n async def webhook_ping( \\n     webhook_id: Annotated[str, Path(title=\" Our ID for the webhook \")], \\n     user_id: Annotated[str, Depends(get_user_id)],  # require auth \\n ): \\n     webhook = await get_webhook(webhook_id) \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]() \\n  \\n     credentials = ( \\n         creds_manager.get(user_id, webhook.credentials_id) \\n         if webhook.credentials_id \\n         else None \\n     ) \\n     try: \\n         await webhook_manager.trigger_ping(webhook, credentials) \\n     except NotImplementedError: \\n         return False \\n  \\n     if not await wait_for_webhook_event(webhook_id, event_type=\" ping \", timeout=10): \\n         raise HTTPException(status_code=504, detail=\""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "creds_manager.create",
                            "range": [
                                740,
                                748
                            ],
                            "children": [],
                            "content": "the given credentials.\n\nParams:\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.debug",
                            "range": [
                                750,
                                762
                            ],
                            "children": [],
                            "content": ":The credentials for which to remove the associated webhooks.\nforce"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_CredentialsMetaResponse",
                            "range": [
                                763,
                                810
                            ],
                            "children": [],
                            "content": ":Whether to proceed if any of the webhooks are still in use.\n\nRaises:\nNeedConfirmation:If any of the webhooks are still in use and`force`is`False`\n\"\"\" \\n     webhooks = await get_all_webhooks_by_creds(credentials.id) \\n     if credentials.provider not in WEBHOOK_MANAGERS_BY_NAME: \\n         if webhooks: \\n             logger.error( \\n                 f\" Credentials#{credentials.id}"
                        }
                    ],
                    "content": "->CredentialsMetaResponse:\nlogger.debug(f \"Received OAuth callback for provider: {provider}\")\nhandler=_get_provider_oauth_handler(request,provider)\n\n#Verify the state token\nif not creds_manager.store.verify_state_token(user_id,state_token,provider):\nlogger.warning(f \"Invalid or expired state token for user {user_id}\")\nraise HTTPException(status_code=400,detail=\"Invalid or expired state token\")\n\ntry:\nscopes=creds_manager.store.get_any_valid_scopes_from_state_token(\nuser_id,state_token,provider\n)\nlogger.debug(f \"Retrieved scopes from state token: {scopes}\")\n\nscopes=handler.handle_default_scopes(scopes)\n\ncredentials=handler.exchange_code_for_tokens(code,scopes)\nlogger.debug(f \"Received credentials with final scopes: {credentials.scopes}\")\n\n#Check if the granted scopes are sufficient for the requested scopes\nif not set(scopes).issubset(set(credentials.scopes)):\n#For now,we 'll just log the warning and continue \\n             logger.warning( \\n                 f\"Granted scopes {credentials.scopes} for provider {provider.value} \" \\n                 f\"do not include all requested scopes {scopes}\" \\n             ) \\n  \\n     except Exception as e: \\n         logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\") \\n         raise HTTPException( \\n             status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\" \\n         ) \\n  \\n     # TODO: Allow specifying `title` to set on `credentials` \\n     creds_manager.create(user_id, credentials) \\n  \\n     logger.debug( \\n         f\"Successfully processed OAuth callback for user {user_id} \" \\n         f\"and provider {provider.value}\" \\n     ) \\n     return CredentialsMetaResponse( \\n         id=credentials.id, \\n         provider=credentials.provider, \\n         type=credentials.type, \\n         title=credentials.title, \\n         scopes=credentials.scopes, \\n         username=credentials.username, \\n     ) \\n  \\n  \\n @router.get(\"/credentials\") \\n def list_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_all_creds(user_id) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials\") \\n def list_credentials_by_provider( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to list credentials for\") \\n     ], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_creds_by_provider(user_id, provider) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials/{cred_id}\") \\n def get_credential( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to retrieve credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> Credentials: \\n     credential = creds_manager.get(user_id, cred_id) \\n     if not credential: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if credential.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n     return credential \\n  \\n  \\n @router.post(\"/{provider}/credentials\", status_code=201) \\n def create_api_key_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to create credentials for\") \\n     ], \\n     api_key: Annotated[str, Body(title=\"The API key to store\")], \\n     title: Annotated[str, Body(title=\"Optional title for the credentials\")], \\n     expires_at: Annotated[ \\n         int | None, Body(title=\"Unix timestamp when the key expires\") \\n     ] = None, \\n ) -> APIKeyCredentials: \\n     new_credentials = APIKeyCredentials( \\n         provider=provider, \\n         api_key=SecretStr(api_key), \\n         title=title, \\n         expires_at=expires_at, \\n     ) \\n  \\n     try: \\n         creds_manager.create(user_id, new_credentials) \\n     except Exception as e: \\n         raise HTTPException( \\n             status_code=500, detail=f\"Failed to store credentials: {str(e)}\" \\n         ) \\n     return new_credentials \\n  \\n  \\n class CredentialsDeletionResponse(BaseModel): \\n     deleted: Literal[True] = True \\n     revoked: bool | None = Field( \\n         description=\"Indicates whether the credentials were also revoked by their \" \\n         \"provider. `None`/`null` if not applicable, e.g. when deleting \" \\n         \"non-revocable credentials such as API keys.\" \\n     ) \\n  \\n  \\n class CredentialsDeletionNeedsConfirmationResponse(BaseModel): \\n     deleted: Literal[False] = False \\n     need_confirmation: Literal[True] = True \\n     message: str \\n  \\n  \\n @router.delete(\"/{provider}/credentials/{cred_id}\") \\n async def delete_credentials( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to delete credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     force: Annotated[ \\n         bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\") \\n     ] = False, \\n ) -> CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse: \\n     creds = creds_manager.store.get_creds_by_id(user_id, cred_id) \\n     if not creds: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if creds.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n  \\n     try: \\n         await remove_all_webhooks_for_credentials(creds, force) \\n     except NeedConfirmation as e: \\n         return CredentialsDeletionNeedsConfirmationResponse(message=str(e)) \\n  \\n     creds_manager.delete(user_id, cred_id) \\n  \\n     tokens_revoked = None \\n     if isinstance(creds, OAuth2Credentials): \\n         handler = _get_provider_oauth_handler(request, provider) \\n         tokens_revoked = handler.revoke_tokens(creds) \\n  \\n     return CredentialsDeletionResponse(revoked=tokens_revoked) \\n  \\n  \\n # ------------------------- WEBHOOK STUFF -------------------------- # \\n  \\n  \\n # ⚠️ Note \\n # No user auth check because this endpoint is for webhook ingress and relies on \\n # validation by the provider-specific `WebhooksManager`. \\n @router.post(\"/{provider}/webhooks/{webhook_id}/ingress\") \\n async def webhook_ingress_generic( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"Provider where the webhook was registered\") \\n     ], \\n     webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")], \\n ): \\n     logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\") \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]() \\n     webhook = await get_webhook(webhook_id) \\n     logger.debug(f\"Webhook #{webhook_id}: {webhook}\") \\n     payload, event_type = await webhook_manager.validate_payload(webhook, request) \\n     logger.debug( \\n         f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \" \\n         f\"with payload {payload}\" \\n     ) \\n  \\n     webhook_event = WebhookEvent( \\n         provider=provider, \\n         webhook_id=webhook_id, \\n         event_type=event_type, \\n         payload=payload, \\n     ) \\n     await publish_webhook_event(webhook_event) \\n     logger.debug(f\"Webhook event published: {webhook_event}\") \\n  \\n     if not webhook.attached_nodes: \\n         return \\n  \\n     executor = get_service_client(ExecutionManager) \\n     for node in webhook.attached_nodes: \\n         logger.debug(f\"Webhook-attached node: {node}\") \\n         if not node.is_triggered_by_event_type(event_type): \\n             logger.debug(f\"Node #{node.id} doesn' t trigger on event{event_type}\") \\n             continue \\n         logger.debug(f\" Executing graph#{node.graph_id}node#{node.id}\") \\n         executor.add_execution( \\n             node.graph_id, \\n             data={f\" webhook_{webhook_id}_payload \": payload}, \\n             user_id=webhook.user_id, \\n         ) \\n  \\n  \\n @router.post(\"/webhooks/{webhook_id}/ping \") \\n async def webhook_ping( \\n     webhook_id: Annotated[str, Path(title=\" Our ID for the webhook \")], \\n     user_id: Annotated[str, Depends(get_user_id)],  # require auth \\n ): \\n     webhook = await get_webhook(webhook_id) \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]() \\n  \\n     credentials = ( \\n         creds_manager.get(user_id, webhook.credentials_id) \\n         if webhook.credentials_id \\n         else None \\n     ) \\n     try: \\n         await webhook_manager.trigger_ping(webhook, credentials) \\n     except NotImplementedError: \\n         return False \\n  \\n     if not await wait_for_webhook_event(webhook_id, event_type=\" ping \", timeout=10): \\n         raise HTTPException(status_code=504, detail=\" Webhook ping timed out \") \\n  \\n     return True \\n  \\n  \\n # --------------------------- UTILITIES ---------------------------- # \\n  \\n  \\n async def remove_all_webhooks_for_credentials( \\n     credentials: Credentials, force: bool = False \\n ) -> None: \\n     \"\"\"\nRemove and deregister all webhooks that were registered using the given credentials.\n\nParams:\ncredentials:The credentials for which to remove the associated webhooks.\nforce:Whether to proceed if any of the webhooks are still in use.\n\nRaises:\nNeedConfirmation:If any of the webhooks are still in use and`force`is`False`\n\"\"\" \\n     webhooks = await get_all_webhooks_by_creds(credentials.id) \\n     if credentials.provider not in WEBHOOK_MANAGERS_BY_NAME: \\n         if webhooks: \\n             logger.error( \\n                 f\" Credentials#{credentials.id}"
                }
            ],
            "content": "(\"/{provider}/callback\")\ndef callback(\nprovider:Annotated[\nProviderName,Path(title=\"The target provider for this OAuth exchange\")\n],\ncode:Annotated[str,Body(title=\"Authorization code acquired by user login\")],\nstate_token:Annotated[str,Body(title=\"Anti-CSRF nonce\")],\nuser_id:Annotated[str,Depends(get_user_id)],\nrequest:Request,\n)->CredentialsMetaResponse:\nlogger.debug(f \"Received OAuth callback for provider: {provider}\")\nhandler=_get_provider_oauth_handler(request,provider)\n\n#Verify the state token\nif not creds_manager.store.verify_state_token(user_id,state_token,provider):\nlogger.warning(f \"Invalid or expired state token for user {user_id}\")\nraise HTTPException(status_code=400,detail=\"Invalid or expired state token\")\n\ntry:\nscopes=creds_manager.store.get_any_valid_scopes_from_state_token(\nuser_id,state_token,provider\n)\nlogger.debug(f \"Retrieved scopes from state token: {scopes}\")\n\nscopes=handler.handle_default_scopes(scopes)\n\ncredentials=handler.exchange_code_for_tokens(code,scopes)\nlogger.debug(f \"Received credentials with final scopes: {credentials.scopes}\")\n\n#Check if the granted scopes are sufficient for the requested scopes\nif not set(scopes).issubset(set(credentials.scopes)):\n#For now,we 'll just log the warning and continue \\n             logger.warning( \\n                 f\"Granted scopes {credentials.scopes} for provider {provider.value} \" \\n                 f\"do not include all requested scopes {scopes}\" \\n             ) \\n  \\n     except Exception as e: \\n         logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\") \\n         raise HTTPException( \\n             status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\" \\n         ) \\n  \\n     # TODO: Allow specifying `title` to set on `credentials` \\n     creds_manager.create(user_id, credentials) \\n  \\n     logger.debug( \\n         f\"Successfully processed OAuth callback for user {user_id} \" \\n         f\"and provider {provider.value}\" \\n     ) \\n     return CredentialsMetaResponse( \\n         id=credentials.id, \\n         provider=credentials.provider, \\n         type=credentials.type, \\n         title=credentials.title, \\n         scopes=credentials.scopes, \\n         username=credentials.username, \\n     ) \\n  \\n  \\n @router.get(\"/credentials\") \\n def list_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_all_creds(user_id) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials\") \\n def list_credentials_by_provider( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to list credentials for\") \\n     ], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_creds_by_provider(user_id, provider) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials/{cred_id}\") \\n def get_credential( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to retrieve credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> Credentials: \\n     credential = creds_manager.get(user_id, cred_id) \\n     if not credential: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if credential.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n     return credential \\n  \\n  \\n @router.post(\"/{provider}/credentials\", status_code=201) \\n def create_api_key_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to create credentials for\") \\n     ], \\n     api_key: Annotated[str, Body(title=\"The API key to store\")], \\n     title: Annotated[str, Body(title=\"Optional title for the credentials\")], \\n     expires_at: Annotated[ \\n         int | None, Body(title=\"Unix timestamp when the key expires\") \\n     ] = None, \\n ) -> APIKeyCredentials: \\n     new_credentials = APIKeyCredentials( \\n         provider=provider, \\n         api_key=SecretStr(api_key), \\n         title=title, \\n         expires_at=expires_at, \\n     ) \\n  \\n     try: \\n         creds_manager.create(user_id, new_credentials) \\n     except Exception as e: \\n         raise HTTPException( \\n             status_code=500, detail=f\"Failed to store credentials: {str(e)}\" \\n         ) \\n     return new_credentials \\n  \\n  \\n class CredentialsDeletionResponse(BaseModel): \\n     deleted: Literal[True] = True \\n     revoked: bool | None = Field( \\n         description=\"Indicates whether the credentials were also revoked by their \" \\n         \"provider. `None`/`null` if not applicable, e.g. when deleting \" \\n         \"non-revocable credentials such as API keys.\" \\n     ) \\n  \\n  \\n class CredentialsDeletionNeedsConfirmationResponse(BaseModel): \\n     deleted: Literal[False] = False \\n     need_confirmation: Literal[True] = True \\n     message: str \\n  \\n  \\n @router.delete(\"/{provider}/credentials/{cred_id}\") \\n async def delete_credentials( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to delete credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     force: Annotated[ \\n         bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\") \\n     ] = False, \\n ) -> CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse: \\n     creds = creds_manager.store.get_creds_by_id(user_id, cred_id) \\n     if not creds: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if creds.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n  \\n     try: \\n         await remove_all_webhooks_for_credentials(creds, force) \\n     except NeedConfirmation as e: \\n         return CredentialsDeletionNeedsConfirmationResponse(message=str(e)) \\n  \\n     creds_manager.delete(user_id, cred_id) \\n  \\n     tokens_revoked = None \\n     if isinstance(creds, OAuth2Credentials): \\n         handler = _get_provider_oauth_handler(request, provider) \\n         tokens_revoked = handler.revoke_tokens(creds) \\n  \\n     return CredentialsDeletionResponse(revoked=tokens_revoked) \\n  \\n  \\n # ------------------------- WEBHOOK STUFF -------------------------- # \\n  \\n  \\n # ⚠️ Note \\n # No user auth check because this endpoint is for webhook ingress and relies on \\n # validation by the provider-specific `WebhooksManager`. \\n @router.post(\"/{provider}/webhooks/{webhook_id}/ingress\") \\n async def webhook_ingress_generic( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"Provider where the webhook was registered\") \\n     ], \\n     webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")], \\n ): \\n     logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\") \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]() \\n     webhook = await get_webhook(webhook_id) \\n     logger.debug(f\"Webhook #{webhook_id}: {webhook}\") \\n     payload, event_type = await webhook_manager.validate_payload(webhook, request) \\n     logger.debug( \\n         f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \" \\n         f\"with payload {payload}\" \\n     ) \\n  \\n     webhook_event = WebhookEvent( \\n         provider=provider, \\n         webhook_id=webhook_id, \\n         event_type=event_type, \\n         payload=payload, \\n     ) \\n     await publish_webhook_event(webhook_event) \\n     logger.debug(f\"Webhook event published: {webhook_event}\") \\n  \\n     if not webhook.attached_nodes: \\n         return \\n  \\n     executor = get_service_client(ExecutionManager) \\n     for node in webhook.attached_nodes: \\n         logger.debug(f\"Webhook-attached node: {node}\") \\n         if not node.is_triggered_by_event_type(event_type): \\n             logger.debug(f\"Node #{node.id} doesn' t trigger on event{event_type}\") \\n             continue \\n         logger.debug(f\" Executing graph#{node.graph_id}node#{node.id}\") \\n         executor.add_execution( \\n             node.graph_id, \\n             data={f\" webhook_{webhook_id}_payload \": payload}, \\n             user_id=webhook.user_id, \\n         ) \\n  \\n  \\n @router.post(\"/webhooks/{webhook_id}/ping \") \\n async def webhook_ping( \\n     webhook_id: Annotated[str, Path(title=\" Our ID for the webhook \")], \\n     user_id: Annotated[str, Depends(get_user_id)],  # require auth \\n ): \\n     webhook = await get_webhook(webhook_id) \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]() \\n  \\n     credentials = ( \\n         creds_manager.get(user_id, webhook.credentials_id) \\n         if webhook.credentials_id \\n         else None \\n     ) \\n     try: \\n         await webhook_manager.trigger_ping(webhook, credentials) \\n     except NotImplementedError: \\n         return False \\n  \\n     if not await wait_for_webhook_event(webhook_id, event_type=\" ping \", timeout=10): \\n         raise HTTPException(status_code=504, detail=\" Webhook ping timed out \") \\n  \\n     return True \\n  \\n  \\n # --------------------------- UTILITIES ---------------------------- # \\n  \\n  \\n async def remove_all_webhooks_for_credentials( \\n     credentials: Credentials, force: bool = False \\n ) -> None: \\n     \"\"\"\nRemove and deregister all webhooks that were registered using the given credentials.\n\nParams:\ncredentials:The credentials for which to remove the associated webhooks.\nforce:Whether to proceed if any of the webhooks are still in use.\n\nRaises:\nNeedConfirmation:If any of the webhooks are still in use and`force`is`False`\n\"\"\" \\n     webhooks = await get_all_webhooks_by_creds(credentials.id) \\n     if credentials.provider not in WEBHOOK_MANAGERS_BY_NAME: \\n         if webhooks: \\n             logger.error( \\n                 f\" Credentials#{credentials.id}"
        },
        {
            "type": "FunctionDecl",
            "name": "list_credentials",
            "range": [
                819,
                930
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        823,
                        833
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated[str, Depends(get_user_id)]",
                            "range": [
                                825,
                                833
                            ],
                            "children": [],
                            "content": "webhooks)}webhooks,\" \\n                 f\" but there is"
                        }
                    ],
                    "content": "len(webhooks)}webhooks,\" \\n                 f\" but there is"
                },
                {
                    "type": "ReturnType",
                    "name": "list[CredentialsMetaResponse]",
                    "range": [
                        837,
                        842
                    ],
                    "children": [],
                    "content": "for{credentials.provider}"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        843,
                        930
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "credentials",
                            "range": [
                                845,
                                854
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        846,
                                        854
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "creds_manager.store.get_all_creds",
                                            "range": [
                                                847,
                                                854
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "user_id",
                                                    "range": [
                                                        853,
                                                        854
                                                    ],
                                                    "children": [],
                                                    "content": "use by"
                                                }
                                            ],
                                            "content": "to these credentials are still in use by"
                                        }
                                    ],
                                    "content": "linked to these credentials are still in use by"
                                }
                            ],
                            "content": "webhooks linked to these credentials are still in use by"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                856,
                                929
                            ],
                            "children": [
                                {
                                    "type": "ArrayExpression",
                                    "name": "",
                                    "range": [
                                        857,
                                        929
                                    ],
                                    "children": [
                                        {
                                            "type": "ObjectExpression",
                                            "name": "CredentialsMetaResponse",
                                            "range": [
                                                859,
                                                922
                                            ],
                                            "children": [
                                                {
                                                    "type": "Property",
                                                    "name": "id",
                                                    "range": [
                                                        862,
                                                        867
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "cred.id",
                                                            "range": [
                                                                864,
                                                                867
                                                            ],
                                                            "children": [],
                                                            "content": "}failed to prune"
                                                        }
                                                    ],
                                                    "content": ".id}failed to prune"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "provider",
                                                    "range": [
                                                        869,
                                                        874
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "cred.provider",
                                                            "range": [
                                                                871,
                                                                874
                                                            ],
                                                            "children": [],
                                                            "content": "Provider '{provider_name.value}' does not"
                                                        }
                                                    ],
                                                    "content": "BaseOAuthHandler \": \\n     if provider_name not in HANDLERS_BY_NAME: \\n         raise HTTPException( \\n             status_code=404, \\n             detail=f\" Provider '{provider_name.value}' does not"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "type",
                                                    "range": [
                                                        876,
                                                        881
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "cred.type",
                                                            "range": [
                                                                878,
                                                                881
                                                            ],
                                                            "children": [],
                                                            "content": "{provider_name.value"
                                                        }
                                                    ],
                                                    "content": "OAuth \", \\n         ) \\n  \\n     client_id = getattr(settings.secrets, f\"{provider_name.value"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "title",
                                                    "range": [
                                                        883,
                                                        888
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "cred.title",
                                                            "range": [
                                                                885,
                                                                888
                                                            ],
                                                            "children": [],
                                                            "content": "{provider_name.value"
                                                        }
                                                    ],
                                                    "content": "_client_id \") \\n     client_secret = getattr(settings.secrets, f\"{provider_name.value"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "scopes",
                                                    "range": [
                                                        890,
                                                        904
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ConditionalExpression",
                                                            "name": "if isinstance(cred, OAuth2Credentials) else None",
                                                            "range": [
                                                                895,
                                                                904
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "isinstance",
                                                                    "range": [
                                                                        896,
                                                                        901
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "cred",
                                                                            "range": [
                                                                                898,
                                                                                899
                                                                            ],
                                                                            "children": [],
                                                                            "content": "configured \" \\n             ), \\n         ) \\n  \\n     handler_class = HANDLERS_BY_NAME[provider_name] \\n     frontend_base_url = ( \\n         settings.config.frontend_base_url \\n         or settings.config.platform_base_url \\n         or str(req.base_url) \\n     ) \\n     return handler_class( \\n         client_id=client_id, \\n         client_secret=client_secret, \\n         redirect_uri=f\""
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "OAuth2Credentials",
                                                                            "range": [
                                                                                900,
                                                                                901
                                                                            ],
                                                                            "children": [],
                                                                            "content": "{frontend_base_url"
                                                                        }
                                                                    ],
                                                                    "content": "is not configured \" \\n             ), \\n         ) \\n  \\n     handler_class = HANDLERS_BY_NAME[provider_name] \\n     frontend_base_url = ( \\n         settings.config.frontend_base_url \\n         or settings.config.platform_base_url \\n         or str(req.base_url) \\n     ) \\n     return handler_class( \\n         client_id=client_id, \\n         client_secret=client_secret, \\n         redirect_uri=f\"{frontend_base_url"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "None",
                                                                    "range": [
                                                                        903,
                                                                        904
                                                                    ],
                                                                    "children": [],
                                                                    "content": "/auth"
                                                                }
                                                            ],
                                                            "content": "'{provider_name.value}' is not configured \" \\n             ), \\n         ) \\n  \\n     handler_class = HANDLERS_BY_NAME[provider_name] \\n     frontend_base_url = ( \\n         settings.config.frontend_base_url \\n         or settings.config.platform_base_url \\n         or str(req.base_url) \\n     ) \\n     return handler_class( \\n         client_id=client_id, \\n         client_secret=client_secret, \\n         redirect_uri=f\"{frontend_base_url}/auth"
                                                        }
                                                    ],
                                                    "content": "_client_secret \") \\n     if not (client_id and client_secret): \\n         raise HTTPException( \\n             status_code=501, \\n             detail=( \\n                 f\" Integration with provider '{provider_name.value}' is not configured \" \\n             ), \\n         ) \\n  \\n     handler_class = HANDLERS_BY_NAME[provider_name] \\n     frontend_base_url = ( \\n         settings.config.frontend_base_url \\n         or settings.config.platform_base_url \\n         or str(req.base_url) \\n     ) \\n     return handler_class( \\n         client_id=client_id, \\n         client_secret=client_secret, \\n         redirect_uri=f\"{frontend_base_url}/auth"
                                                },
                                                {
                                                    "type": "Property",
                                                    "name": "username",
                                                    "range": [
                                                        906,
                                                        920
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ConditionalExpression",
                                                            "name": "if isinstance(cred, OAuth2Credentials) else None",
                                                            "range": [
                                                                911,
                                                                920
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "isinstance",
                                                                    "range": [
                                                                        912,
                                                                        917
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "cred",
                                                                            "range": [
                                                                                914,
                                                                                915
                                                                            ],
                                                                            "children": [],
                                                                            "content": ""
                                                                        },
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "OAuth2Credentials",
                                                                            "range": [
                                                                                916,
                                                                                917
                                                                            ],
                                                                            "children": [],
                                                                            "content": ""
                                                                        }
                                                                    ],
                                                                    "content": ")\n"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "None",
                                                                    "range": [
                                                                        919,
                                                                        920
                                                                    ],
                                                                    "children": [],
                                                                    "content": ""
                                                                }
                                                            ],
                                                            "content": "\n)\n"
                                                        }
                                                    ],
                                                    "content": "integrations/oauth_callback\",\n)\n"
                                                }
                                            ],
                                            "content": "#{webhook.id}failed to prune \") \\n  \\n  \\n def _get_provider_oauth_handler( \\n     req: Request, provider_name: ProviderName \\n ) -> \" BaseOAuthHandler \": \\n     if provider_name not in HANDLERS_BY_NAME: \\n         raise HTTPException( \\n             status_code=404, \\n             detail=f\" Provider '{provider_name.value}' does not support OAuth \", \\n         ) \\n  \\n     client_id = getattr(settings.secrets, f\"{provider_name.value}_client_id \") \\n     client_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret \") \\n     if not (client_id and client_secret): \\n         raise HTTPException( \\n             status_code=501, \\n             detail=( \\n                 f\" Integration with provider '{provider_name.value}' is not configured \" \\n             ), \\n         ) \\n  \\n     handler_class = HANDLERS_BY_NAME[provider_name] \\n     frontend_base_url = ( \\n         settings.config.frontend_base_url \\n         or settings.config.platform_base_url \\n         or str(req.base_url) \\n     ) \\n     return handler_class( \\n         client_id=client_id, \\n         client_secret=client_secret, \\n         redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n)\n"
                                        }
                                    ],
                                    "content": "\" \\n         ) \\n     for webhook in webhooks: \\n         # Unlink all nodes \\n         for node in webhook.attached_nodes or []: \\n             await set_node_webhook(node.id, None) \\n  \\n         # Prune the webhook \\n         webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]() \\n         success = await webhook_manager.prune_webhook_if_dangling( \\n             webhook.id, credentials \\n         ) \\n         if not success: \\n             logger.warning(f\" Webhook#{webhook.id}failed to prune \") \\n  \\n  \\n def _get_provider_oauth_handler( \\n     req: Request, provider_name: ProviderName \\n ) -> \" BaseOAuthHandler \": \\n     if provider_name not in HANDLERS_BY_NAME: \\n         raise HTTPException( \\n             status_code=404, \\n             detail=f\" Provider '{provider_name.value}' does not support OAuth \", \\n         ) \\n  \\n     client_id = getattr(settings.secrets, f\"{provider_name.value}_client_id \") \\n     client_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret \") \\n     if not (client_id and client_secret): \\n         raise HTTPException( \\n             status_code=501, \\n             detail=( \\n                 f\" Integration with provider '{provider_name.value}' is not configured \" \\n             ), \\n         ) \\n  \\n     handler_class = HANDLERS_BY_NAME[provider_name] \\n     frontend_base_url = ( \\n         settings.config.frontend_base_url \\n         or settings.config.platform_base_url \\n         or str(req.base_url) \\n     ) \\n     return handler_class( \\n         client_id=client_id, \\n         client_secret=client_secret, \\n         redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n)\n"
                                }
                            ],
                            "content": "agent \" \\n         ) \\n     for webhook in webhooks: \\n         # Unlink all nodes \\n         for node in webhook.attached_nodes or []: \\n             await set_node_webhook(node.id, None) \\n  \\n         # Prune the webhook \\n         webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]() \\n         success = await webhook_manager.prune_webhook_if_dangling( \\n             webhook.id, credentials \\n         ) \\n         if not success: \\n             logger.warning(f\" Webhook#{webhook.id}failed to prune \") \\n  \\n  \\n def _get_provider_oauth_handler( \\n     req: Request, provider_name: ProviderName \\n ) -> \" BaseOAuthHandler \": \\n     if provider_name not in HANDLERS_BY_NAME: \\n         raise HTTPException( \\n             status_code=404, \\n             detail=f\" Provider '{provider_name.value}' does not support OAuth \", \\n         ) \\n  \\n     client_id = getattr(settings.secrets, f\"{provider_name.value}_client_id \") \\n     client_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret \") \\n     if not (client_id and client_secret): \\n         raise HTTPException( \\n             status_code=501, \\n             detail=( \\n                 f\" Integration with provider '{provider_name.value}' is not configured \" \\n             ), \\n         ) \\n  \\n     handler_class = HANDLERS_BY_NAME[provider_name] \\n     frontend_base_url = ( \\n         settings.config.frontend_base_url \\n         or settings.config.platform_base_url \\n         or str(req.base_url) \\n     ) \\n     return handler_class( \\n         client_id=client_id, \\n         client_secret=client_secret, \\n         redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n)\n"
                        }
                    ],
                    "content": "\" \\n             ) \\n         return \\n     if any(w.attached_nodes for w in webhooks) and not force: \\n         raise NeedConfirmation( \\n             \" Some webhooks linked to these credentials are still in use by an agent \" \\n         ) \\n     for webhook in webhooks: \\n         # Unlink all nodes \\n         for node in webhook.attached_nodes or []: \\n             await set_node_webhook(node.id, None) \\n  \\n         # Prune the webhook \\n         webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]() \\n         success = await webhook_manager.prune_webhook_if_dangling( \\n             webhook.id, credentials \\n         ) \\n         if not success: \\n             logger.warning(f\" Webhook#{webhook.id}failed to prune \") \\n  \\n  \\n def _get_provider_oauth_handler( \\n     req: Request, provider_name: ProviderName \\n ) -> \" BaseOAuthHandler \": \\n     if provider_name not in HANDLERS_BY_NAME: \\n         raise HTTPException( \\n             status_code=404, \\n             detail=f\" Provider '{provider_name.value}' does not support OAuth \", \\n         ) \\n  \\n     client_id = getattr(settings.secrets, f\"{provider_name.value}_client_id \") \\n     client_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret \") \\n     if not (client_id and client_secret): \\n         raise HTTPException( \\n             status_code=501, \\n             detail=( \\n                 f\" Integration with provider '{provider_name.value}' is not configured \" \\n             ), \\n         ) \\n  \\n     handler_class = HANDLERS_BY_NAME[provider_name] \\n     frontend_base_url = ( \\n         settings.config.frontend_base_url \\n         or settings.config.platform_base_url \\n         or str(req.base_url) \\n     ) \\n     return handler_class( \\n         client_id=client_id, \\n         client_secret=client_secret, \\n         redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n)\n"
                }
            ],
            "content": "are attached to{len(webhooks)}webhooks,\" \\n                 f\" but there is no available WebhooksHandler for{credentials.provider}\" \\n             ) \\n         return \\n     if any(w.attached_nodes for w in webhooks) and not force: \\n         raise NeedConfirmation( \\n             \" Some webhooks linked to these credentials are still in use by an agent \" \\n         ) \\n     for webhook in webhooks: \\n         # Unlink all nodes \\n         for node in webhook.attached_nodes or []: \\n             await set_node_webhook(node.id, None) \\n  \\n         # Prune the webhook \\n         webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]() \\n         success = await webhook_manager.prune_webhook_if_dangling( \\n             webhook.id, credentials \\n         ) \\n         if not success: \\n             logger.warning(f\" Webhook#{webhook.id}failed to prune \") \\n  \\n  \\n def _get_provider_oauth_handler( \\n     req: Request, provider_name: ProviderName \\n ) -> \" BaseOAuthHandler \": \\n     if provider_name not in HANDLERS_BY_NAME: \\n         raise HTTPException( \\n             status_code=404, \\n             detail=f\" Provider '{provider_name.value}' does not support OAuth \", \\n         ) \\n  \\n     client_id = getattr(settings.secrets, f\"{provider_name.value}_client_id \") \\n     client_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret \") \\n     if not (client_id and client_secret): \\n         raise HTTPException( \\n             status_code=501, \\n             detail=( \\n                 f\" Integration with provider '{provider_name.value}' is not configured \" \\n             ), \\n         ) \\n  \\n     handler_class = HANDLERS_BY_NAME[provider_name] \\n     frontend_base_url = ( \\n         settings.config.frontend_base_url \\n         or settings.config.platform_base_url \\n         or str(req.base_url) \\n     ) \\n     return handler_class( \\n         client_id=client_id, \\n         client_secret=client_secret, \\n         redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "list_credentials_by_provider",
            "range": [
                939,
                1069
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "provider",
                    "range": [
                        943,
                        957
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated",
                            "range": [
                                945,
                                957
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "ProviderName",
                                    "range": [
                                        948,
                                        948
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Type",
                                    "name": "Path",
                                    "range": [
                                        950,
                                        955
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "title",
                                            "range": [
                                                952,
                                                954
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        960,
                        970
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated",
                            "range": [
                                962,
                                970
                            ],
                            "children": [
                                {
                                    "type": "Type",
                                    "name": "str",
                                    "range": [
                                        964,
                                        964
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Dependency",
                                    "name": "Depends",
                                    "range": [
                                        966,
                                        969
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_user_id",
                                            "range": [
                                                968,
                                                968
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "ReturnType",
                    "name": "list",
                    "range": [
                        976,
                        979
                    ],
                    "children": [
                        {
                            "type": "Type",
                            "name": "CredentialsMetaResponse",
                            "range": [
                                978,
                                978
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "FunctionBody",
                    "name": "",
                    "range": [
                        982,
                        1068
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "credentials",
                            "range": [
                                982,
                                993
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "get_creds_by_provider",
                                    "range": [
                                        988,
                                        993
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "user_id",
                                            "range": [
                                                990,
                                                990
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "provider",
                                            "range": [
                                                992,
                                                992
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                995,
                                1068
                            ],
                            "children": [
                                {
                                    "type": "ListComprehension",
                                    "name": "",
                                    "range": [
                                        996,
                                        1068
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "CredentialsMetaResponse",
                                            "range": [
                                                998,
                                                1061
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "id",
                                                    "range": [
                                                        1001,
                                                        1006
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "provider",
                                                    "range": [
                                                        1008,
                                                        1013
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "type",
                                                    "range": [
                                                        1015,
                                                        1020
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "title",
                                                    "range": [
                                                        1022,
                                                        1027
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "scopes",
                                                    "range": [
                                                        1029,
                                                        1043
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "username",
                                                    "range": [
                                                        1045,
                                                        1059
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        },
                                        {
                                            "type": "ForStatement",
                                            "name": "",
                                            "range": [
                                                1063,
                                                1067
                                            ],
                                            "children": [
                                                {
                                                    "type": "Variable",
                                                    "name": "cred",
                                                    "range": [
                                                        1064,
                                                        1064
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Iterable",
                                                    "name": "credentials",
                                                    "range": [
                                                        1066,
                                                        1066
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "FunctionDecl",
            "name": "get_credential",
            "range": [
                1078,
                1186
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "get_credential",
                    "range": [
                        1078,
                        1132
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "provider",
                            "range": [
                                1082,
                                1096
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "Annotated",
                                    "range": [
                                        1084,
                                        1096
                                    ],
                                    "children": [
                                        {
                                            "type": "Type",
                                            "name": "ProviderName",
                                            "range": [
                                                1087,
                                                1087
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "Type",
                                            "name": "Path",
                                            "range": [
                                                1089,
                                                1094
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Parameter",
                            "name": "cred_id",
                            "range": [
                                1099,
                                1111
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "Annotated",
                                    "range": [
                                        1101,
                                        1111
                                    ],
                                    "children": [
                                        {
                                            "type": "Type",
                                            "name": "str",
                                            "range": [
                                                1103,
                                                1103
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "Type",
                                            "name": "Path",
                                            "range": [
                                                1105,
                                                1110
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                1114,
                                1124
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "Annotated",
                                    "range": [
                                        1116,
                                        1124
                                    ],
                                    "children": [
                                        {
                                            "type": "Type",
                                            "name": "str",
                                            "range": [
                                                1118,
                                                1118
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "Type",
                                            "name": "Depends",
                                            "range": [
                                                1120,
                                                1123
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ReturnType",
                            "name": "Credentials",
                            "range": [
                                1130,
                                1130
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "FunctionBody",
                    "name": "get_credential",
                    "range": [
                        1133,
                        1186
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "credential",
                            "range": [
                                1133,
                                1142
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "=",
                                    "range": [
                                        1134,
                                        1134
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "creds_manager.get",
                                    "range": [
                                        1135,
                                        1142
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "user_id",
                                            "range": [
                                                1139,
                                                1139
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "cred_id",
                                            "range": [
                                                1141,
                                                1141
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                1144,
                                1159
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "not credential",
                                    "range": [
                                        1145,
                                        1146
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        1147,
                                        1159
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                1149,
                                                1159
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "HTTPException",
                                                    "range": [
                                                        1150,
                                                        1159
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "status_code",
                                                            "range": [
                                                                1152,
                                                                1154
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "detail",
                                                            "range": [
                                                                1156,
                                                                1158
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                1161,
                                1182
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "credential.provider != provider",
                                    "range": [
                                        1162,
                                        1167
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        1168,
                                        1182
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                1170,
                                                1182
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "HTTPException",
                                                    "range": [
                                                        1171,
                                                        1182
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "status_code",
                                                            "range": [
                                                                1174,
                                                                1176
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "detail",
                                                            "range": [
                                                                1178,
                                                                1180
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                1184,
                                1185
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "Decorator",
            "name": "@router.post",
            "range": [
                1187,
                1197
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "\"/{provider}/credentials\"",
                    "range": [
                        1192,
                        1192
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "Argument",
                    "name": "status_code=201",
                    "range": [
                        1194,
                        1196
                    ],
                    "children": [],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "FunctionDecl",
            "name": "create_api_key_credentials",
            "range": [
                1199,
                1356
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        1203,
                        1213
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated[str, Depends(get_user_id)]",
                            "range": [
                                1205,
                                1213
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "Parameter",
                    "name": "provider",
                    "range": [
                        1216,
                        1230
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated[ProviderName, Path(title=\"The provider to create credentials for\")]",
                            "range": [
                                1218,
                                1230
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "Parameter",
                    "name": "api_key",
                    "range": [
                        1233,
                        1245
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated[str, Body(title=\"The API key to store\")]",
                            "range": [
                                1235,
                                1245
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "Parameter",
                    "name": "title",
                    "range": [
                        1248,
                        1260
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated[str, Body(title=\"Optional title for the credentials\")]",
                            "range": [
                                1250,
                                1260
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "Parameter",
                    "name": "expires_at",
                    "range": [
                        1263,
                        1281
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated[int | None, Body(title=\"Unix timestamp when the key expires\")]",
                            "range": [
                                1265,
                                1278
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "ReturnType",
                    "name": "APIKeyCredentials",
                    "range": [
                        1287,
                        1287
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "Block",
                    "name": "FunctionBody",
                    "range": [
                        1290,
                        1356
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "new_credentials = APIKeyCredentials",
                            "range": [
                                1290,
                                1318
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "APIKeyCredentials",
                                    "range": [
                                        1292,
                                        1318
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "provider=provider",
                                            "range": [
                                                1295,
                                                1297
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "api_key=SecretStr(api_key)",
                                            "range": [
                                                1300,
                                                1305
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "title=title",
                                            "range": [
                                                1308,
                                                1310
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "expires_at=expires_at",
                                            "range": [
                                                1313,
                                                1315
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "TryStatement",
                            "name": "try",
                            "range": [
                                1321,
                                1353
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "TryBody",
                                    "range": [
                                        1324,
                                        1332
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "creds_manager.create",
                                            "range": [
                                                1324,
                                                1331
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "user_id",
                                                    "range": [
                                                        1328,
                                                        1328
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "new_credentials",
                                                    "range": [
                                                        1330,
                                                        1330
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except Exception as e",
                                    "range": [
                                        1333,
                                        1353
                                    ],
                                    "children": [
                                        {
                                            "type": "Block",
                                            "name": "ExceptBody",
                                            "range": [
                                                1339,
                                                1352
                                            ],
                                            "children": [
                                                {
                                                    "type": "ThrowStatement",
                                                    "name": "raise HTTPException",
                                                    "range": [
                                                        1339,
                                                        1352
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "HTTPException",
                                                            "range": [
                                                                1340,
                                                                1352
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "status_code=500",
                                                                    "range": [
                                                                        1343,
                                                                        1345
                                                                    ],
                                                                    "children": [],
                                                                    "content": ""
                                                                },
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "detail=f\"Failed to store credentials: {str(e)}\"",
                                                                    "range": [
                                                                        1347,
                                                                        1350
                                                                    ],
                                                                    "children": [],
                                                                    "content": ""
                                                                }
                                                            ],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return new_credentials",
                            "range": [
                                1354,
                                1355
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "ClassDecl",
            "name": "CredentialsDeletionResponse",
            "range": [
                1357,
                1391
            ],
            "children": [
                {
                    "type": "PropertyDecl",
                    "name": "deleted",
                    "range": [
                        1364,
                        1371
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Literal",
                            "range": [
                                1366,
                                1369
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                1370,
                                1371
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "True",
                                    "range": [
                                        1371,
                                        1371
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "PropertyDecl",
                    "name": "revoked",
                    "range": [
                        1373,
                        1390
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "bool | None",
                            "range": [
                                1375,
                                1377
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "=",
                            "range": [
                                1378,
                                1390
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "Field",
                                    "range": [
                                        1379,
                                        1390
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "description",
                                            "range": [
                                                1382,
                                                1388
                                            ],
                                            "children": [
                                                {
                                                    "type": "StringLiteral",
                                                    "name": "\"Indicates whether the credentials were also revoked by their \"\n\"provider. `None`/`null` if not applicable, e.g. when deleting \"\n\"non-revocable credentials such as API keys.\"",
                                                    "range": [
                                                        1384,
                                                        1388
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "ClassDecl",
            "name": "CredentialsDeletionNeedsConfirmationResponse",
            "range": [
                1392,
                1421
            ],
            "children": [
                {
                    "type": "PropertyDecl",
                    "name": "deleted",
                    "range": [
                        1399,
                        1406
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Literal",
                            "range": [
                                1401,
                                1404
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                1405,
                                1406
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "PropertyDecl",
                    "name": "need_confirmation",
                    "range": [
                        1408,
                        1415
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Literal",
                            "range": [
                                1410,
                                1413
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "=",
                            "range": [
                                1414,
                                1415
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "PropertyDecl",
                    "name": "message",
                    "range": [
                        1417,
                        1420
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                1419,
                                1420
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "FunctionDecl",
            "name": "delete_credentials",
            "range": [
                1422,
                1644
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@router.delete",
                    "range": [
                        1422,
                        1428
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "FunctionSignature",
                    "name": "delete_credentials",
                    "range": [
                        1430,
                        1510
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "request",
                            "range": [
                                1435,
                                1437
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Parameter",
                            "name": "provider",
                            "range": [
                                1440,
                                1454
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Parameter",
                            "name": "cred_id",
                            "range": [
                                1457,
                                1469
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Parameter",
                            "name": "user_id",
                            "range": [
                                1472,
                                1482
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Parameter",
                            "name": "force",
                            "range": [
                                1485,
                                1501
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "ReturnType",
                            "name": "CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse",
                            "range": [
                                1505,
                                1509
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "FunctionBody",
                    "name": "delete_credentials",
                    "range": [
                        1511,
                        1644
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "creds",
                            "range": [
                                1512,
                                1523
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if not creds",
                            "range": [
                                1525,
                                1540
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if creds.provider != provider",
                            "range": [
                                1542,
                                1563
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "TryStatement",
                            "name": "try",
                            "range": [
                                1566,
                                1593
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await remove_all_webhooks_for_credentials",
                                    "range": [
                                        1569,
                                        1575
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "CatchClause",
                                    "name": "except NeedConfirmation as e",
                                    "range": [
                                        1577,
                                        1593
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "creds_manager.delete",
                            "range": [
                                1595,
                                1602
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "VariableDecl",
                            "name": "tokens_revoked",
                            "range": [
                                1605,
                                1607
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if isinstance(creds, OAuth2Credentials)",
                            "range": [
                                1609,
                                1635
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return CredentialsDeletionResponse",
                            "range": [
                                1637,
                                1643
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "FunctionDecl",
            "name": "webhook_ingress_generic",
            "range": [
                1645,
                1891
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@router.post",
                    "range": [
                        1645,
                        1651
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "\"/{provider}/webhooks/{webhook_id}/ingress\"",
                            "range": [
                                1650,
                                1650
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "FunctionSignature",
                    "name": "webhook_ingress_generic",
                    "range": [
                        1653,
                        1697
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "request",
                            "range": [
                                1658,
                                1660
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Parameter",
                            "name": "provider",
                            "range": [
                                1663,
                                1677
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "Annotated",
                                    "range": [
                                        1665,
                                        1677
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeArgument",
                                            "name": "ProviderName",
                                            "range": [
                                                1668,
                                                1668
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "TypeArgument",
                                            "name": "Path",
                                            "range": [
                                                1670,
                                                1675
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "title",
                                                    "range": [
                                                        1672,
                                                        1674
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Parameter",
                            "name": "webhook_id",
                            "range": [
                                1680,
                                1692
                            ],
                            "children": [
                                {
                                    "type": "TypeAnnotation",
                                    "name": "Annotated",
                                    "range": [
                                        1682,
                                        1692
                                    ],
                                    "children": [
                                        {
                                            "type": "TypeArgument",
                                            "name": "str",
                                            "range": [
                                                1684,
                                                1684
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "TypeArgument",
                                            "name": "Path",
                                            "range": [
                                                1686,
                                                1691
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "title",
                                                    "range": [
                                                        1688,
                                                        1690
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "FunctionBody",
                    "name": "webhook_ingress_generic",
                    "range": [
                        1698,
                        1891
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.debug",
                            "range": [
                                1698,
                                1705
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "logger.debug",
                                    "range": [
                                        1698,
                                        1704
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "f\"Received {provider.value} webhook ingress for ID {webhook_id}\"",
                                            "range": [
                                                1702,
                                                1703
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "webhook_manager",
                            "range": [
                                1706,
                                1714
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1707,
                                        1713
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "WEBHOOK_MANAGERS_BY_NAME",
                                            "range": [
                                                1708,
                                                1708
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "[]",
                                            "range": [
                                                1709,
                                                1711
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "provider",
                                                    "range": [
                                                        1710,
                                                        1710
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "webhook",
                            "range": [
                                1715,
                                1722
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1717,
                                        1721
                                    ],
                                    "children": [
                                        {
                                            "type": "AwaitExpression",
                                            "name": "await",
                                            "range": [
                                                1717,
                                                1717
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "get_webhook",
                                                    "range": [
                                                        1718,
                                                        1721
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "webhook_id",
                                                            "range": [
                                                                1720,
                                                                1720
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.debug",
                            "range": [
                                1723,
                                1730
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "logger.debug",
                                    "range": [
                                        1723,
                                        1729
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "f\"Webhook #{webhook_id}: {webhook}\"",
                                            "range": [
                                                1727,
                                                1728
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "payload, event_type",
                            "range": [
                                1731,
                                1744
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1734,
                                        1743
                                    ],
                                    "children": [
                                        {
                                            "type": "AwaitExpression",
                                            "name": "await",
                                            "range": [
                                                1735,
                                                1735
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "webhook_manager.validate_payload",
                                                    "range": [
                                                        1736,
                                                        1743
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "webhook",
                                                            "range": [
                                                                1740,
                                                                1740
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "request",
                                                            "range": [
                                                                1742,
                                                                1742
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.debug",
                            "range": [
                                1745,
                                1756
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "logger.debug",
                                    "range": [
                                        1745,
                                        1755
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \"",
                                            "range": [
                                                1750,
                                                1751
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "f\"with payload {payload}\"",
                                            "range": [
                                                1753,
                                                1754
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "webhook_event",
                            "range": [
                                1759,
                                1785
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1761,
                                        1784
                                    ],
                                    "children": [
                                        {
                                            "type": "NewExpression",
                                            "name": "WebhookEvent",
                                            "range": [
                                                1761,
                                                1784
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "provider=provider",
                                                    "range": [
                                                        1764,
                                                        1766
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "webhook_id=webhook_id",
                                                    "range": [
                                                        1769,
                                                        1771
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "event_type=event_type",
                                                    "range": [
                                                        1774,
                                                        1776
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "payload=payload",
                                                    "range": [
                                                        1779,
                                                        1781
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "await publish_webhook_event",
                            "range": [
                                1786,
                                1791
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        1786,
                                        1786
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "publish_webhook_event",
                                            "range": [
                                                1787,
                                                1790
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "webhook_event",
                                                    "range": [
                                                        1789,
                                                        1789
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "logger.debug",
                            "range": [
                                1792,
                                1799
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "logger.debug",
                                    "range": [
                                        1792,
                                        1798
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "f\"Webhook event published: {webhook_event}\"",
                                            "range": [
                                                1796,
                                                1797
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if not webhook.attached_nodes",
                            "range": [
                                1801,
                                1809
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "not webhook.attached_nodes",
                                    "range": [
                                        1802,
                                        1806
                                    ],
                                    "children": [
                                        {
                                            "type": "UnaryExpression",
                                            "name": "not",
                                            "range": [
                                                1802,
                                                1802
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "webhook.attached_nodes",
                                                    "range": [
                                                        1803,
                                                        1805
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "return",
                                    "range": [
                                        1807,
                                        1809
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                1808,
                                                1808
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "VariableDeclaration",
                            "name": "executor",
                            "range": [
                                1811,
                                1817
                            ],
                            "children": [
                                {
                                    "type": "AssignmentExpression",
                                    "name": "=",
                                    "range": [
                                        1812,
                                        1816
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_service_client",
                                            "range": [
                                                1813,
                                                1816
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "ExecutionManager",
                                                    "range": [
                                                        1815,
                                                        1815
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ForStatement",
                            "name": "for node in webhook.attached_nodes",
                            "range": [
                                1818,
                                1891
                            ],
                            "children": [
                                {
                                    "type": "Initialization",
                                    "name": "node in webhook.attached_nodes",
                                    "range": [
                                        1819,
                                        1824
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDeclaration",
                                            "name": "node",
                                            "range": [
                                                1819,
                                                1819
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "MemberExpression",
                                            "name": "webhook.attached_nodes",
                                            "range": [
                                                1821,
                                                1823
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "for block",
                                    "range": [
                                        1825,
                                        1891
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "logger.debug",
                                            "range": [
                                                1826,
                                                1833
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "logger.debug",
                                                    "range": [
                                                        1826,
                                                        1832
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "f\"Webhook-attached node: {node}\"",
                                                            "range": [
                                                                1830,
                                                                1831
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if not node.is_triggered_by_event_type",
                                            "range": [
                                                1834,
                                                1853
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "not node.is_triggered_by_event_type",
                                                    "range": [
                                                        1835,
                                                        1842
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "UnaryExpression",
                                                            "name": "not",
                                                            "range": [
                                                                1835,
                                                                1835
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "node.is_triggered_by_event_type",
                                                                    "range": [
                                                                        1836,
                                                                        1841
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "event_type",
                                                                            "range": [
                                                                                1840,
                                                                                1840
                                                                            ],
                                                                            "children": [],
                                                                            "content": ""
                                                                        }
                                                                    ],
                                                                    "content": ""
                                                                }
                                                            ],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "continue",
                                                    "range": [
                                                        1843,
                                                        1853
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ContinueStatement",
                                                            "name": "continue",
                                                            "range": [
                                                                1852,
                                                                1852
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "logger.debug",
                                            "range": [
                                                1854,
                                                1861
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "logger.debug",
                                                    "range": [
                                                        1854,
                                                        1860
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "f\"Executing graph #{node.graph_id} node #{node.id}\"",
                                                            "range": [
                                                                1858,
                                                                1859
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "executor.add_execution",
                                            "range": [
                                                1862,
                                                1890
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "executor.add_execution",
                                                    "range": [
                                                        1862,
                                                        1889
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "node.graph_id",
                                                            "range": [
                                                                1867,
                                                                1869
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "data={f\"webhook_{webhook_id}_payload\":payload}",
                                                            "range": [
                                                                1872,
                                                                1879
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "user_id=webhook.user_id",
                                                            "range": [
                                                                1882,
                                                                1886
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "Decorator",
            "name": "@router.post",
            "range": [
                1892,
                1898
            ],
            "children": [
                {
                    "type": "Argument",
                    "name": "\"/webhooks/{webhook_id}/ping\"",
                    "range": [
                        1897,
                        1897
                    ],
                    "children": [],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "FunctionDecl",
            "name": "webhook_ping",
            "range": [
                1900,
                2037
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "webhook_id",
                    "range": [
                        1905,
                        1917
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated[str, Path]",
                            "range": [
                                1907,
                                1917
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "title=\"Our ID for the webhook\"",
                                    "range": [
                                        1913,
                                        1915
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        1920,
                        1930
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Annotated[str, Depends]",
                            "range": [
                                1922,
                                1930
                            ],
                            "children": [
                                {
                                    "type": "Argument",
                                    "name": "get_user_id",
                                    "range": [
                                        1928,
                                        1928
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "Comment",
                    "name": "# require auth",
                    "range": [
                        1932,
                        1934
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "Assignment",
                    "name": "webhook = await get_webhook(webhook_id)",
                    "range": [
                        1939,
                        1945
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "Assignment",
                    "name": "webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]()",
                    "range": [
                        1947,
                        1956
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "Assignment",
                    "name": "credentials = (creds_manager.get(user_id, webhook.credentials_id) if webhook.credentials_id else None)",
                    "range": [
                        1959,
                        1981
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        1984,
                        2003
                    ],
                    "children": [
                        {
                            "type": "AwaitExpression",
                            "name": "await webhook_manager.trigger_ping(webhook, credentials)",
                            "range": [
                                1987,
                                1995
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "CatchClause",
                            "name": "except NotImplementedError",
                            "range": [
                                1997,
                                2003
                            ],
                            "children": [
                                {
                                    "type": "ReturnStatement",
                                    "name": "return False",
                                    "range": [
                                        2001,
                                        2002
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "IfStatement",
                    "name": "if not await wait_for_webhook_event(webhook_id, event_type=\"ping\", timeout=10)",
                    "range": [
                        2005,
                        2020
                    ],
                    "children": [
                        {
                            "type": "ThrowStatement",
                            "name": "raise HTTPException(status_code=504, detail=\"Webhook ping timed out\")",
                            "range": [
                                2022,
                                2032
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "ReturnStatement",
                    "name": "return True",
                    "range": [
                        2035,
                        2036
                    ],
                    "children": [],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "FunctionDecl",
            "name": "remove_all_webhooks_for_credentials",
            "range": [
                2038,
                2206
            ],
            "children": [
                {
                    "type": "AsyncKeyword",
                    "name": "async",
                    "range": [
                        2038,
                        2042
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "DefKeyword",
                    "name": "def",
                    "range": [
                        2039,
                        2042
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "FunctionName",
                    "name": "remove_all_webhooks_for_credentials",
                    "range": [
                        2040,
                        2072
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        2041,
                        2053
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "credentials",
                            "range": [
                                2043,
                                2045
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "Credentials",
                            "range": [
                                2045,
                                2046
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Parameter",
                            "name": "force",
                            "range": [
                                2047,
                                2049
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "TypeAnnotation",
                            "name": "bool",
                            "range": [
                                2049,
                                2050
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "DefaultValue",
                            "name": "False",
                            "range": [
                                2051,
                                2052
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "ReturnType",
                    "name": "None",
                    "range": [
                        2054,
                        2056
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        2057,
                        2206
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                2059,
                                2061
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "webhooks",
                            "range": [
                                2063,
                                2072
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        2065,
                                        2071
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "get_all_webhooks_by_creds",
                                            "range": [
                                                2066,
                                                2071
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "credentials.id",
                                                    "range": [
                                                        2068,
                                                        2070
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                2073,
                                2103
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        2074,
                                        2080
                                    ],
                                    "children": [
                                        {
                                            "type": "MemberExpression",
                                            "name": "credentials.provider",
                                            "range": [
                                                2075,
                                                2076
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "BinaryExpression",
                                            "name": "not in",
                                            "range": [
                                                2077,
                                                2079
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "WEBHOOK_MANAGERS_BY_NAME",
                                            "range": [
                                                2079,
                                                2080
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                },
                                {
                                    "type": "IfBody",
                                    "name": "body",
                                    "range": [
                                        2081,
                                        2103
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "if",
                                            "range": [
                                                2082,
                                                2103
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "webhooks",
                                                    "range": [
                                                        2083,
                                                        2084
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "IfBody",
                                                    "name": "body",
                                                    "range": [
                                                        2085,
                                                        2103
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "logger.error",
                                                            "range": [
                                                                2086,
                                                                2100
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "name": "logger.error",
                                                                    "range": [
                                                                        2087,
                                                                        2088
                                                                    ],
                                                                    "children": [],
                                                                    "content": ""
                                                                },
                                                                {
                                                                    "type": "Arguments",
                                                                    "name": "arguments",
                                                                    "range": [
                                                                        2089,
                                                                        2100
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "f-string",
                                                                            "range": [
                                                                                2091,
                                                                                2092
                                                                            ],
                                                                            "children": [],
                                                                            "content": ""
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "f-string",
                                                                            "range": [
                                                                                2094,
                                                                                2095
                                                                            ],
                                                                            "children": [],
                                                                            "content": ""
                                                                        },
                                                                        {
                                                                            "type": "Literal",
                                                                            "name": "f-string",
                                                                            "range": [
                                                                                2097,
                                                                                2098
                                                                            ],
                                                                            "children": [],
                                                                            "content": ""
                                                                        }
                                                                    ],
                                                                    "content": ""
                                                                }
                                                            ],
                                                            "content": ""
                                                        },
                                                        {
                                                            "type": "ReturnStatement",
                                                            "name": "return",
                                                            "range": [
                                                                2102,
                                                                2103
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                2104,
                                2127
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        2105,
                                        2118
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "any",
                                            "range": [
                                                2106,
                                                2114
                                            ],
                                            "children": [
                                                {
                                                    "type": "GeneratorExpression",
                                                    "name": "generator",
                                                    "range": [
                                                        2107,
                                                        2113
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "name": "w.attached_nodes",
                                                            "range": [
                                                                2108,
                                                                2109
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        },
                                                        {
                                                            "type": "ForStatement",
                                                            "name": "for",
                                                            "range": [
                                                                2110,
                                                                2113
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "VariableDeclaration",
                                                                    "name": "w",
                                                                    "range": [
                                                                        2111,
                                                                        2112
                                                                    ],
                                                                    "children": [],
                                                                    "content": ""
                                                                },
                                                                {
                                                                    "type": "InKeyword",
                                                                    "name": "in",
                                                                    "range": [
                                                                        2112,
                                                                        2113
                                                                    ],
                                                                    "children": [],
                                                                    "content": ""
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "webhooks",
                                                                    "range": [
                                                                        2113,
                                                                        2114
                                                                    ],
                                                                    "children": [],
                                                                    "content": ""
                                                                }
                                                            ],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        },
                                        {
                                            "type": "LogicalExpression",
                                            "name": "and",
                                            "range": [
                                                2115,
                                                2116
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "UnaryExpression",
                                            "name": "not",
                                            "range": [
                                                2117,
                                                2118
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "force",
                                            "range": [
                                                2118,
                                                2119
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                },
                                {
                                    "type": "IfBody",
                                    "name": "body",
                                    "range": [
                                        2119,
                                        2127
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise",
                                            "range": [
                                                2120,
                                                2126
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "NeedConfirmation",
                                                    "range": [
                                                        2121,
                                                        2122
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Arguments",
                                                    "name": "arguments",
                                                    "range": [
                                                        2122,
                                                        2126
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "string",
                                                            "range": [
                                                                2124,
                                                                2125
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ForStatement",
                            "name": "for",
                            "range": [
                                2128,
                                2160
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclaration",
                                    "name": "webhook",
                                    "range": [
                                        2129,
                                        2130
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "InKeyword",
                                    "name": "in",
                                    "range": [
                                        2130,
                                        2131
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Identifier",
                                    "name": "webhooks",
                                    "range": [
                                        2131,
                                        2132
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "ForBody",
                                    "name": "body",
                                    "range": [
                                        2133,
                                        2160
                                    ],
                                    "children": [
                                        {
                                            "type": "Comment",
                                            "name": "comment",
                                            "range": [
                                                2134,
                                                2138
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "ForStatement",
                                            "name": "for",
                                            "range": [
                                                2139,
                                                2159
                                            ],
                                            "children": [
                                                {
                                                    "type": "VariableDeclaration",
                                                    "name": "node",
                                                    "range": [
                                                        2140,
                                                        2141
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "InKeyword",
                                                    "name": "in",
                                                    "range": [
                                                        2141,
                                                        2142
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "webhook.attached_nodes",
                                                    "range": [
                                                        2142,
                                                        2144
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "LogicalExpression",
                                                    "name": "or",
                                                    "range": [
                                                        2145,
                                                        2146
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "ArrayLiteral",
                                                    "name": "[]",
                                                    "range": [
                                                        2146,
                                                        2147
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "ForBody",
                                                    "name": "body",
                                                    "range": [
                                                        2148,
                                                        2159
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "AwaitExpression",
                                                            "name": "await",
                                                            "range": [
                                                                2150,
                                                                2158
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "name": "set_node_webhook",
                                                                    "range": [
                                                                        2151,
                                                                        2158
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "node.id",
                                                                            "range": [
                                                                                2153,
                                                                                2155
                                                                            ],
                                                                            "children": [],
                                                                            "content": ""
                                                                        },
                                                                        {
                                                                            "type": "Argument",
                                                                            "name": "None",
                                                                            "range": [
                                                                                2157,
                                                                                2158
                                                                            ],
                                                                            "children": [],
                                                                            "content": ""
                                                                        }
                                                                    ],
                                                                    "content": ""
                                                                }
                                                            ],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Comment",
                            "name": "comment",
                            "range": [
                                2161,
                                2165
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "webhook_manager",
                            "range": [
                                2166,
                                2176
                            ],
                            "children": [
                                {
                                    "type": "MemberExpression",
                                    "name": "WEBHOOK_MANAGERS_BY_NAME[credentials.provider]",
                                    "range": [
                                        2168,
                                        2173
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "success",
                            "range": [
                                2177,
                                2192
                            ],
                            "children": [
                                {
                                    "type": "AwaitExpression",
                                    "name": "await",
                                    "range": [
                                        2179,
                                        2191
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "webhook_manager.prune_webhook_if_dangling",
                                            "range": [
                                                2180,
                                                2191
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "webhook.id",
                                                    "range": [
                                                        2185,
                                                        2187
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "credentials",
                                                    "range": [
                                                        2189,
                                                        2190
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                2193,
                                2205
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "not success",
                                    "range": [
                                        2194,
                                        2196
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "IfBody",
                                    "name": "body",
                                    "range": [
                                        2197,
                                        2205
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "logger.warning",
                                            "range": [
                                                2198,
                                                2204
                                            ],
                                            "children": [
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "logger.warning",
                                                    "range": [
                                                        2199,
                                                        2200
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Arguments",
                                                    "name": "arguments",
                                                    "range": [
                                                        2201,
                                                        2204
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "name": "f-string",
                                                            "range": [
                                                                2202,
                                                                2203
                                                            ],
                                                            "children": [],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        },
        {
            "type": "FunctionDecl",
            "name": "_get_provider_oauth_handler",
            "range": [
                2207,
                2360
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        2209,
                        2218
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "req",
                            "range": [
                                2211,
                                2213
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Parameter",
                            "name": "provider_name",
                            "range": [
                                2215,
                                2217
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        2220,
                        2222
                    ],
                    "children": [],
                    "content": ""
                },
                {
                    "type": "Block",
                    "name": "body",
                    "range": [
                        2224,
                        2360
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if_provider_not_in_handlers",
                            "range": [
                                2225,
                                2248
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        2226,
                                        2229
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        2230,
                                        2248
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise_http_exception",
                                            "range": [
                                                2232,
                                                2247
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "HTTPException",
                                                    "range": [
                                                        2233,
                                                        2247
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "arguments",
                                                            "range": [
                                                                2234,
                                                                2247
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "status_code",
                                                                    "range": [
                                                                        2236,
                                                                        2238
                                                                    ],
                                                                    "children": [],
                                                                    "content": ""
                                                                },
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "detail",
                                                                    "range": [
                                                                        2241,
                                                                        2244
                                                                    ],
                                                                    "children": [],
                                                                    "content": ""
                                                                }
                                                            ],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "client_id_assignment",
                            "range": [
                                2250,
                                2261
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "getattr",
                                    "range": [
                                        2252,
                                        2260
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "arguments",
                                            "range": [
                                                2253,
                                                2260
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "settings.secrets",
                                                    "range": [
                                                        2254,
                                                        2257
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "f\"{provider_name.value}_client_id\"",
                                                    "range": [
                                                        2258,
                                                        2259
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "client_secret_assignment",
                            "range": [
                                2262,
                                2273
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "getattr",
                                    "range": [
                                        2264,
                                        2272
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "arguments",
                                            "range": [
                                                2265,
                                                2272
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "settings.secrets",
                                                    "range": [
                                                        2266,
                                                        2269
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "f\"{provider_name.value}_client_secret\"",
                                                    "range": [
                                                        2270,
                                                        2271
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_not_client_id_and_secret",
                            "range": [
                                2274,
                                2303
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        2275,
                                        2280
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        2281,
                                        2303
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "raise_http_exception",
                                            "range": [
                                                2283,
                                                2302
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "HTTPException",
                                                    "range": [
                                                        2284,
                                                        2302
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ArgumentList",
                                                            "name": "arguments",
                                                            "range": [
                                                                2285,
                                                                2302
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "status_code",
                                                                    "range": [
                                                                        2287,
                                                                        2289
                                                                    ],
                                                                    "children": [],
                                                                    "content": ""
                                                                },
                                                                {
                                                                    "type": "Argument",
                                                                    "name": "detail",
                                                                    "range": [
                                                                        2292,
                                                                        2297
                                                                    ],
                                                                    "children": [],
                                                                    "content": ""
                                                                }
                                                            ],
                                                            "content": ""
                                                        }
                                                    ],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "handler_class_assignment",
                            "range": [
                                2305,
                                2311
                            ],
                            "children": [
                                {
                                    "type": "SubscriptExpression",
                                    "name": "HANDLERS_BY_NAME[provider_name]",
                                    "range": [
                                        2307,
                                        2310
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "frontend_base_url_assignment",
                            "range": [
                                2312,
                                2338
                            ],
                            "children": [
                                {
                                    "type": "ConditionalExpression",
                                    "name": "conditional_expression",
                                    "range": [
                                        2314,
                                        2337
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "settings.config.frontend_base_url",
                                            "range": [
                                                2316,
                                                2321
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "Condition",
                                            "name": "settings.config.platform_base_url",
                                            "range": [
                                                2323,
                                                2328
                                            ],
                                            "children": [],
                                            "content": ""
                                        },
                                        {
                                            "type": "Condition",
                                            "name": "str(req.base_url)",
                                            "range": [
                                                2330,
                                                2336
                                            ],
                                            "children": [],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_handler_class",
                            "range": [
                                2339,
                                2360
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "handler_class",
                                    "range": [
                                        2340,
                                        2359
                                    ],
                                    "children": [
                                        {
                                            "type": "ArgumentList",
                                            "name": "arguments",
                                            "range": [
                                                2341,
                                                2359
                                            ],
                                            "children": [
                                                {
                                                    "type": "Argument",
                                                    "name": "client_id",
                                                    "range": [
                                                        2343,
                                                        2345
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "client_secret",
                                                    "range": [
                                                        2348,
                                                        2350
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                },
                                                {
                                                    "type": "Argument",
                                                    "name": "redirect_uri",
                                                    "range": [
                                                        2353,
                                                        2356
                                                    ],
                                                    "children": [],
                                                    "content": ""
                                                }
                                            ],
                                            "content": ""
                                        }
                                    ],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                }
            ],
            "content": ""
        }
    ],
    "content": "import logging\nfrom typing import TYPE_CHECKING,Annotated,Literal\n\nfrom fastapi import APIRouter,Body,Depends,HTTPException,Path,Query,Request\nfrom pydantic import BaseModel,Field,SecretStr\n\nfrom backend.data.graph import set_node_webhook\nfrom backend.data.integrations import(\nWebhookEvent,\nget_all_webhooks_by_creds,\nget_webhook,\npublish_webhook_event,\nwait_for_webhook_event,\n)\nfrom backend.data.model import(\nAPIKeyCredentials,\nCredentials,\nCredentialsType,\nOAuth2Credentials,\n)\nfrom backend.executor.manager import ExecutionManager\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.oauth import HANDLERS_BY_NAME\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME\nfrom backend.util.exceptions import NeedConfirmation\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\n\nif TYPE_CHECKING:\nfrom backend.integrations.oauth import BaseOAuthHandler\n\nfrom..utils import get_user_id\n\nlogger=logging.getLogger(__name__)\nsettings=Settings()\nrouter=APIRouter()\n\ncreds_manager=IntegrationCredentialsManager()\n\n\nclass LoginResponse(BaseModel):\nlogin_url:str\nstate_token:str\n\n\n@router.get(\"/{provider}/login\")\ndef login(\nprovider:Annotated[\nProviderName,Path(title=\"The provider to initiate an OAuth flow for\")\n],\nuser_id:Annotated[str,Depends(get_user_id)],\nrequest:Request,\nscopes:Annotated[\nstr,Query(title=\"Comma-separated list of authorization scopes\")\n]=\"\",\n)->LoginResponse:\nhandler=_get_provider_oauth_handler(request,provider)\n\nrequested_scopes=scopes.split(\",\")if scopes else[]\n\n#Generate and store a secure random state token along with the scopes\nstate_token=creds_manager.store.store_state_token(\nuser_id,provider,requested_scopes\n)\n\nlogin_url=handler.get_login_url(requested_scopes,state_token)\n\nreturn LoginResponse(login_url=login_url,state_token=state_token)\n\n\nclass CredentialsMetaResponse(BaseModel):\nid:str\nprovider:str\ntype:CredentialsType\ntitle:str|None\nscopes:list[str]|None\nusername:str|None\n\n\n@router.post(\"/{provider}/callback\")\ndef callback(\nprovider:Annotated[\nProviderName,Path(title=\"The target provider for this OAuth exchange\")\n],\ncode:Annotated[str,Body(title=\"Authorization code acquired by user login\")],\nstate_token:Annotated[str,Body(title=\"Anti-CSRF nonce\")],\nuser_id:Annotated[str,Depends(get_user_id)],\nrequest:Request,\n)->CredentialsMetaResponse:\nlogger.debug(f \"Received OAuth callback for provider: {provider}\")\nhandler=_get_provider_oauth_handler(request,provider)\n\n#Verify the state token\nif not creds_manager.store.verify_state_token(user_id,state_token,provider):\nlogger.warning(f \"Invalid or expired state token for user {user_id}\")\nraise HTTPException(status_code=400,detail=\"Invalid or expired state token\")\n\ntry:\nscopes=creds_manager.store.get_any_valid_scopes_from_state_token(\nuser_id,state_token,provider\n)\nlogger.debug(f \"Retrieved scopes from state token: {scopes}\")\n\nscopes=handler.handle_default_scopes(scopes)\n\ncredentials=handler.exchange_code_for_tokens(code,scopes)\nlogger.debug(f \"Received credentials with final scopes: {credentials.scopes}\")\n\n#Check if the granted scopes are sufficient for the requested scopes\nif not set(scopes).issubset(set(credentials.scopes)):\n#For now,we 'll just log the warning and continue \\n             logger.warning( \\n                 f\"Granted scopes {credentials.scopes} for provider {provider.value} \" \\n                 f\"do not include all requested scopes {scopes}\" \\n             ) \\n  \\n     except Exception as e: \\n         logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\") \\n         raise HTTPException( \\n             status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\" \\n         ) \\n  \\n     # TODO: Allow specifying `title` to set on `credentials` \\n     creds_manager.create(user_id, credentials) \\n  \\n     logger.debug( \\n         f\"Successfully processed OAuth callback for user {user_id} \" \\n         f\"and provider {provider.value}\" \\n     ) \\n     return CredentialsMetaResponse( \\n         id=credentials.id, \\n         provider=credentials.provider, \\n         type=credentials.type, \\n         title=credentials.title, \\n         scopes=credentials.scopes, \\n         username=credentials.username, \\n     ) \\n  \\n  \\n @router.get(\"/credentials\") \\n def list_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_all_creds(user_id) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials\") \\n def list_credentials_by_provider( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to list credentials for\") \\n     ], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> list[CredentialsMetaResponse]: \\n     credentials = creds_manager.store.get_creds_by_provider(user_id, provider) \\n     return [ \\n         CredentialsMetaResponse( \\n             id=cred.id, \\n             provider=cred.provider, \\n             type=cred.type, \\n             title=cred.title, \\n             scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, \\n             username=cred.username if isinstance(cred, OAuth2Credentials) else None, \\n         ) \\n         for cred in credentials \\n     ] \\n  \\n  \\n @router.get(\"/{provider}/credentials/{cred_id}\") \\n def get_credential( \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to retrieve credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n ) -> Credentials: \\n     credential = creds_manager.get(user_id, cred_id) \\n     if not credential: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if credential.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n     return credential \\n  \\n  \\n @router.post(\"/{provider}/credentials\", status_code=201) \\n def create_api_key_credentials( \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to create credentials for\") \\n     ], \\n     api_key: Annotated[str, Body(title=\"The API key to store\")], \\n     title: Annotated[str, Body(title=\"Optional title for the credentials\")], \\n     expires_at: Annotated[ \\n         int | None, Body(title=\"Unix timestamp when the key expires\") \\n     ] = None, \\n ) -> APIKeyCredentials: \\n     new_credentials = APIKeyCredentials( \\n         provider=provider, \\n         api_key=SecretStr(api_key), \\n         title=title, \\n         expires_at=expires_at, \\n     ) \\n  \\n     try: \\n         creds_manager.create(user_id, new_credentials) \\n     except Exception as e: \\n         raise HTTPException( \\n             status_code=500, detail=f\"Failed to store credentials: {str(e)}\" \\n         ) \\n     return new_credentials \\n  \\n  \\n class CredentialsDeletionResponse(BaseModel): \\n     deleted: Literal[True] = True \\n     revoked: bool | None = Field( \\n         description=\"Indicates whether the credentials were also revoked by their \" \\n         \"provider. `None`/`null` if not applicable, e.g. when deleting \" \\n         \"non-revocable credentials such as API keys.\" \\n     ) \\n  \\n  \\n class CredentialsDeletionNeedsConfirmationResponse(BaseModel): \\n     deleted: Literal[False] = False \\n     need_confirmation: Literal[True] = True \\n     message: str \\n  \\n  \\n @router.delete(\"/{provider}/credentials/{cred_id}\") \\n async def delete_credentials( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"The provider to delete credentials for\") \\n     ], \\n     cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")], \\n     user_id: Annotated[str, Depends(get_user_id)], \\n     force: Annotated[ \\n         bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\") \\n     ] = False, \\n ) -> CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse: \\n     creds = creds_manager.store.get_creds_by_id(user_id, cred_id) \\n     if not creds: \\n         raise HTTPException(status_code=404, detail=\"Credentials not found\") \\n     if creds.provider != provider: \\n         raise HTTPException( \\n             status_code=404, detail=\"Credentials do not match the specified provider\" \\n         ) \\n  \\n     try: \\n         await remove_all_webhooks_for_credentials(creds, force) \\n     except NeedConfirmation as e: \\n         return CredentialsDeletionNeedsConfirmationResponse(message=str(e)) \\n  \\n     creds_manager.delete(user_id, cred_id) \\n  \\n     tokens_revoked = None \\n     if isinstance(creds, OAuth2Credentials): \\n         handler = _get_provider_oauth_handler(request, provider) \\n         tokens_revoked = handler.revoke_tokens(creds) \\n  \\n     return CredentialsDeletionResponse(revoked=tokens_revoked) \\n  \\n  \\n # ------------------------- WEBHOOK STUFF -------------------------- # \\n  \\n  \\n # ⚠️ Note \\n # No user auth check because this endpoint is for webhook ingress and relies on \\n # validation by the provider-specific `WebhooksManager`. \\n @router.post(\"/{provider}/webhooks/{webhook_id}/ingress\") \\n async def webhook_ingress_generic( \\n     request: Request, \\n     provider: Annotated[ \\n         ProviderName, Path(title=\"Provider where the webhook was registered\") \\n     ], \\n     webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")], \\n ): \\n     logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\") \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]() \\n     webhook = await get_webhook(webhook_id) \\n     logger.debug(f\"Webhook #{webhook_id}: {webhook}\") \\n     payload, event_type = await webhook_manager.validate_payload(webhook, request) \\n     logger.debug( \\n         f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \" \\n         f\"with payload {payload}\" \\n     ) \\n  \\n     webhook_event = WebhookEvent( \\n         provider=provider, \\n         webhook_id=webhook_id, \\n         event_type=event_type, \\n         payload=payload, \\n     ) \\n     await publish_webhook_event(webhook_event) \\n     logger.debug(f\"Webhook event published: {webhook_event}\") \\n  \\n     if not webhook.attached_nodes: \\n         return \\n  \\n     executor = get_service_client(ExecutionManager) \\n     for node in webhook.attached_nodes: \\n         logger.debug(f\"Webhook-attached node: {node}\") \\n         if not node.is_triggered_by_event_type(event_type): \\n             logger.debug(f\"Node #{node.id} doesn' t trigger on event{event_type}\") \\n             continue \\n         logger.debug(f\" Executing graph#{node.graph_id}node#{node.id}\") \\n         executor.add_execution( \\n             node.graph_id, \\n             data={f\" webhook_{webhook_id}_payload \": payload}, \\n             user_id=webhook.user_id, \\n         ) \\n  \\n  \\n @router.post(\"/webhooks/{webhook_id}/ping \") \\n async def webhook_ping( \\n     webhook_id: Annotated[str, Path(title=\" Our ID for the webhook \")], \\n     user_id: Annotated[str, Depends(get_user_id)],  # require auth \\n ): \\n     webhook = await get_webhook(webhook_id) \\n     webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]() \\n  \\n     credentials = ( \\n         creds_manager.get(user_id, webhook.credentials_id) \\n         if webhook.credentials_id \\n         else None \\n     ) \\n     try: \\n         await webhook_manager.trigger_ping(webhook, credentials) \\n     except NotImplementedError: \\n         return False \\n  \\n     if not await wait_for_webhook_event(webhook_id, event_type=\" ping \", timeout=10): \\n         raise HTTPException(status_code=504, detail=\" Webhook ping timed out \") \\n  \\n     return True \\n  \\n  \\n # --------------------------- UTILITIES ---------------------------- # \\n  \\n  \\n async def remove_all_webhooks_for_credentials( \\n     credentials: Credentials, force: bool = False \\n ) -> None: \\n     \"\"\"\nRemove and deregister all webhooks that were registered using the given credentials.\n\nParams:\ncredentials:The credentials for which to remove the associated webhooks.\nforce:Whether to proceed if any of the webhooks are still in use.\n\nRaises:\nNeedConfirmation:If any of the webhooks are still in use and`force`is`False`\n\"\"\" \\n     webhooks = await get_all_webhooks_by_creds(credentials.id) \\n     if credentials.provider not in WEBHOOK_MANAGERS_BY_NAME: \\n         if webhooks: \\n             logger.error( \\n                 f\" Credentials#{credentials.id}for provider{credentials.provider}\" \\n                 f\" are attached to{len(webhooks)}webhooks,\" \\n                 f\" but there is no available WebhooksHandler for{credentials.provider}\" \\n             ) \\n         return \\n     if any(w.attached_nodes for w in webhooks) and not force: \\n         raise NeedConfirmation( \\n             \" Some webhooks linked to these credentials are still in use by an agent \" \\n         ) \\n     for webhook in webhooks: \\n         # Unlink all nodes \\n         for node in webhook.attached_nodes or []: \\n             await set_node_webhook(node.id, None) \\n  \\n         # Prune the webhook \\n         webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]() \\n         success = await webhook_manager.prune_webhook_if_dangling( \\n             webhook.id, credentials \\n         ) \\n         if not success: \\n             logger.warning(f\" Webhook#{webhook.id}failed to prune \") \\n  \\n  \\n def _get_provider_oauth_handler( \\n     req: Request, provider_name: ProviderName \\n ) -> \" BaseOAuthHandler \": \\n     if provider_name not in HANDLERS_BY_NAME: \\n         raise HTTPException( \\n             status_code=404, \\n             detail=f\" Provider '{provider_name.value}' does not support OAuth \", \\n         ) \\n  \\n     client_id = getattr(settings.secrets, f\"{provider_name.value}_client_id \") \\n     client_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret \") \\n     if not (client_id and client_secret): \\n         raise HTTPException( \\n             status_code=501, \\n             detail=( \\n                 f\" Integration with provider '{provider_name.value}' is not configured \" \\n             ), \\n         ) \\n  \\n     handler_class = HANDLERS_BY_NAME[provider_name] \\n     frontend_base_url = ( \\n         settings.config.frontend_base_url \\n         or settings.config.platform_base_url \\n         or str(req.base_url) \\n     ) \\n     return handler_class( \\n         client_id=client_id, \\n         client_secret=client_secret, \\n         redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n)\n"
}