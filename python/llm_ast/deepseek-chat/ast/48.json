{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        449
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "match_word_pattern",
            "range": [
                0,
                31
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        2,
                        10
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "pattern",
                            "range": [
                                3,
                                5
                            ],
                            "children": [],
                            "content": "pattern:str"
                        },
                        {
                            "type": "Parameter",
                            "name": "input_string",
                            "range": [
                                7,
                                9
                            ],
                            "children": [],
                            "content": "input_string:str"
                        }
                    ],
                    "content": "(pattern:str,input_string:str)"
                },
                {
                    "type": "ReturnType",
                    "name": "returnType",
                    "range": [
                        11,
                        13
                    ],
                    "children": [],
                    "content": "->bool"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        14,
                        31
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                16,
                                30
                            ],
                            "children": [],
                            "content": "\"\"\" \\n     Determine if a given pattern matches a string using backtracking. \\n  \\n     pattern: The pattern to match. \\n     input_string: The string to match against the pattern. \\n     return: True if the pattern matches the string, False otherwise. \\n  \\n     >>> match_word_pattern(\" aba\", \"GraphTreesGraph \") \\n     True \\n  \\n     >>> match_word_pattern(\" xyx\", \"PythonRubyPython \") \\n     True \\n  \\n     >>> match_word_pattern(\" GG\", \"PythonJavaPython \") \\n     False \\n     \"\"\""
                        }
                    ],
                    "content": ":\n\"\"\" \\n     Determine if a given pattern matches a string using backtracking. \\n  \\n     pattern: The pattern to match. \\n     input_string: The string to match against the pattern. \\n     return: True if the pattern matches the string, False otherwise. \\n  \\n     >>> match_word_pattern(\" aba\", \"GraphTreesGraph \") \\n     True \\n  \\n     >>> match_word_pattern(\" xyx\", \"PythonRubyPython \") \\n     True \\n  \\n     >>> match_word_pattern(\" GG\", \"PythonJavaPython \") \\n     False \\n     \"\"\"\n"
                }
            ],
            "content": "def match_word_pattern(pattern:str,input_string:str)->bool:\n\"\"\" \\n     Determine if a given pattern matches a string using backtracking. \\n  \\n     pattern: The pattern to match. \\n     input_string: The string to match against the pattern. \\n     return: True if the pattern matches the string, False otherwise. \\n  \\n     >>> match_word_pattern(\" aba\", \"GraphTreesGraph \") \\n     True \\n  \\n     >>> match_word_pattern(\" xyx\", \"PythonRubyPython \") \\n     True \\n  \\n     >>> match_word_pattern(\" GG\", \"PythonJavaPython \") \\n     False \\n     \"\"\"\n"
        },
        {
            "type": "FunctionDecl",
            "name": "backtrack",
            "range": [
                33,
                257
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        35,
                        43
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "pattern_index",
                            "range": [
                                36,
                                38
                            ],
                            "children": [],
                            "content": "pattern_index:int"
                        },
                        {
                            "type": "Parameter",
                            "name": "str_index",
                            "range": [
                                40,
                                42
                            ],
                            "children": [],
                            "content": "str_index:int"
                        }
                    ],
                    "content": "(pattern_index:int,str_index:int)"
                },
                {
                    "type": "ReturnType",
                    "name": "returnType",
                    "range": [
                        44,
                        46
                    ],
                    "children": [],
                    "content": "->bool"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        47,
                        257
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                49,
                                51
                            ],
                            "children": [],
                            "content": "\"\"\" \\n         >>> backtrack(0, 0) \\n         True \\n  \\n         >>> backtrack(0, 1) \\n         True \\n  \\n         >>> backtrack(0, 4) \\n         False \\n         \"\"\""
                        },
                        {
                            "type": "IfStatement",
                            "name": "ifStatement",
                            "range": [
                                53,
                                73
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        54,
                                        68
                                    ],
                                    "children": [],
                                    "content": "pattern_index==len(pattern)and str_index==len(input_string)"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "returnStatement",
                                    "range": [
                                        71,
                                        72
                                    ],
                                    "children": [],
                                    "content": "return True"
                                }
                            ],
                            "content": "if pattern_index==len(pattern)and str_index==len(input_string):\nreturn True\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "ifStatement",
                            "range": [
                                74,
                                94
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        75,
                                        89
                                    ],
                                    "children": [],
                                    "content": "pattern_index==len(pattern)or str_index==len(input_string)"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "returnStatement",
                                    "range": [
                                        92,
                                        93
                                    ],
                                    "children": [],
                                    "content": "return False"
                                }
                            ],
                            "content": "if pattern_index==len(pattern)or str_index==len(input_string):\nreturn False\n"
                        },
                        {
                            "type": "Assignment",
                            "name": "assignment",
                            "range": [
                                95,
                                101
                            ],
                            "children": [],
                            "content": "char=pattern[pattern_index]\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "ifStatement",
                            "range": [
                                102,
                                146
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        103,
                                        106
                                    ],
                                    "children": [],
                                    "content": "char in pattern_map:"
                                },
                                {
                                    "type": "Assignment",
                                    "name": "assignment",
                                    "range": [
                                        108,
                                        114
                                    ],
                                    "children": [],
                                    "content": "mapped_str=pattern_map[char]\n"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "ifStatement",
                                    "range": [
                                        115,
                                        140
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "condition",
                                            "range": [
                                                116,
                                                124
                                            ],
                                            "children": [],
                                            "content": "input_string.startswith(mapped_str,str_index):"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "returnStatement",
                                            "range": [
                                                126,
                                                139
                                            ],
                                            "children": [],
                                            "content": "return backtrack(pattern_index+1,str_index+len(mapped_str))"
                                        }
                                    ],
                                    "content": "if input_string.startswith(mapped_str,str_index):\nreturn backtrack(pattern_index+1,str_index+len(mapped_str))\n"
                                },
                                {
                                    "type": "ElseStatement",
                                    "name": "elseStatement",
                                    "range": [
                                        141,
                                        146
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "returnStatement",
                                            "range": [
                                                144,
                                                145
                                            ],
                                            "children": [],
                                            "content": "return False"
                                        }
                                    ],
                                    "content": "else:\nreturn False\n"
                                }
                            ],
                            "content": "if char in pattern_map:\nmapped_str=pattern_map[char]\nif input_string.startswith(mapped_str,str_index):\nreturn backtrack(pattern_index+1,str_index+len(mapped_str))\nelse:\nreturn False\n"
                        },
                        {
                            "type": "ForStatement",
                            "name": "forLoop",
                            "range": [
                                147,
                                221
                            ],
                            "children": [
                                {
                                    "type": "Range",
                                    "name": "range",
                                    "range": [
                                        150,
                                        162
                                    ],
                                    "children": [],
                                    "content": "range(str_index+1,len(input_string)+1)"
                                },
                                {
                                    "type": "Assignment",
                                    "name": "assignment",
                                    "range": [
                                        165,
                                        172
                                    ],
                                    "children": [],
                                    "content": "substr=input_string[str_index:end]"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "ifStatement",
                                    "range": [
                                        174,
                                        181
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "condition",
                                            "range": [
                                                175,
                                                178
                                            ],
                                            "children": [],
                                            "content": "substr in str_map:"
                                        },
                                        {
                                            "type": "ContinueStatement",
                                            "name": "continueStatement",
                                            "range": [
                                                180,
                                                180
                                            ],
                                            "children": [],
                                            "content": "continue"
                                        }
                                    ],
                                    "content": "if substr in str_map:\ncontinue\n"
                                },
                                {
                                    "type": "Assignment",
                                    "name": "assignment",
                                    "range": [
                                        182,
                                        195
                                    ],
                                    "children": [],
                                    "content": "pattern_map[char]=substr\nstr_map[substr]=char\n"
                                },
                                {
                                    "type": "IfStatement",
                                    "name": "ifStatement",
                                    "range": [
                                        196,
                                        209
                                    ],
                                    "children": [
                                        {
                                            "type": "Condition",
                                            "name": "condition",
                                            "range": [
                                                197,
                                                205
                                            ],
                                            "children": [],
                                            "content": "backtrack(pattern_index+1,end):"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "returnStatement",
                                            "range": [
                                                207,
                                                208
                                            ],
                                            "children": [],
                                            "content": "return True"
                                        }
                                    ],
                                    "content": "if backtrack(pattern_index+1,end):\nreturn True\n"
                                },
                                {
                                    "type": "DeleteStatement",
                                    "name": "deleteStatement",
                                    "range": [
                                        210,
                                        215
                                    ],
                                    "children": [],
                                    "content": "del pattern_map[char]\n"
                                },
                                {
                                    "type": "DeleteStatement",
                                    "name": "deleteStatement",
                                    "range": [
                                        216,
                                        221
                                    ],
                                    "children": [],
                                    "content": "del str_map[substr]\n"
                                }
                            ],
                            "content": "for end in range(str_index+1,len(input_string)+1):\nsubstr=input_string[str_index:end]\nif substr in str_map:\ncontinue\npattern_map[char]=substr\nstr_map[substr]=char\nif backtrack(pattern_index+1,end):\nreturn True\ndel pattern_map[char]\ndel str_map[substr]\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "returnStatement",
                            "range": [
                                222,
                                223
                            ],
                            "children": [],
                            "content": "return False"
                        },
                        {
                            "type": "Assignment",
                            "name": "assignment",
                            "range": [
                                226,
                                237
                            ],
                            "children": [],
                            "content": "pattern_map:dict[str,str]={}\n"
                        },
                        {
                            "type": "Assignment",
                            "name": "assignment",
                            "range": [
                                238,
                                249
                            ],
                            "children": [],
                            "content": "str_map:dict[str,str]={}\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "returnStatement",
                            "range": [
                                250,
                                257
                            ],
                            "children": [],
                            "content": "return backtrack(0,0)\n"
                        }
                    ],
                    "content": ":\n\"\"\" \\n         >>> backtrack(0, 0) \\n         True \\n  \\n         >>> backtrack(0, 1) \\n         True \\n  \\n         >>> backtrack(0, 4) \\n         False \\n         \"\"\"\nif pattern_index==len(pattern)and str_index==len(input_string):\nreturn True\nif pattern_index==len(pattern)or str_index==len(input_string):\nreturn False\nchar=pattern[pattern_index]\nif char in pattern_map:\nmapped_str=pattern_map[char]\nif input_string.startswith(mapped_str,str_index):\nreturn backtrack(pattern_index+1,str_index+len(mapped_str))\nelse:\nreturn False\nfor end in range(str_index+1,len(input_string)+1):\nsubstr=input_string[str_index:end]\nif substr in str_map:\ncontinue\npattern_map[char]=substr\nstr_map[substr]=char\nif backtrack(pattern_index+1,end):\nreturn True\ndel pattern_map[char]\ndel str_map[substr]\nreturn False\n\npattern_map:dict[str,str]={}\nstr_map:dict[str,str]={}\nreturn backtrack(0,0)\n"
                }
            ],
            "content": "def backtrack(pattern_index:int,str_index:int)->bool:\n\"\"\" \\n         >>> backtrack(0, 0) \\n         True \\n  \\n         >>> backtrack(0, 1) \\n         True \\n  \\n         >>> backtrack(0, 4) \\n         False \\n         \"\"\"\nif pattern_index==len(pattern)and str_index==len(input_string):\nreturn True\nif pattern_index==len(pattern)or str_index==len(input_string):\nreturn False\nchar=pattern[pattern_index]\nif char in pattern_map:\nmapped_str=pattern_map[char]\nif input_string.startswith(mapped_str,str_index):\nreturn backtrack(pattern_index+1,str_index+len(mapped_str))\nelse:\nreturn False\nfor end in range(str_index+1,len(input_string)+1):\nsubstr=input_string[str_index:end]\nif substr in str_map:\ncontinue\npattern_map[char]=substr\nstr_map[substr]=char\nif backtrack(pattern_index+1,end):\nreturn True\ndel pattern_map[char]\ndel str_map[substr]\nreturn False\n\npattern_map:dict[str,str]={}\nstr_map:dict[str,str]={}\nreturn backtrack(0,0)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "backtrack",
            "range": [
                258,
                449
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        260,
                        268
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "pattern_index",
                            "range": [
                                261,
                                263
                            ],
                            "children": [],
                            "content": "__name__=="
                        },
                        {
                            "type": "Parameter",
                            "name": "str_index",
                            "range": [
                                265,
                                267
                            ],
                            "children": [],
                            "content": ":\nimport"
                        }
                    ],
                    "content": "if __name__==\"__main__\":\nimport doctest"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        269,
                        271
                    ],
                    "children": [],
                    "content": "\n\ndoctest"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        274,
                        276
                    ],
                    "children": [],
                    "content": "()\n"
                },
                {
                    "type": "IfStatement",
                    "name": "if_statement",
                    "range": [
                        278,
                        298
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "condition",
                            "range": [
                                279,
                                293
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_statement",
                            "range": [
                                296,
                                297
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "IfStatement",
                    "name": "if_statement",
                    "range": [
                        299,
                        319
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "condition",
                            "range": [
                                300,
                                314
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_statement",
                            "range": [
                                317,
                                318
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "VariableDecl",
                    "name": "variable_declaration",
                    "range": [
                        320,
                        326
                    ],
                    "children": [
                        {
                            "type": "Variable",
                            "name": "char",
                            "range": [
                                320,
                                321
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "assignment",
                            "range": [
                                322,
                                325
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "IfStatement",
                    "name": "if_statement",
                    "range": [
                        327,
                        371
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "condition",
                            "range": [
                                328,
                                331
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "VariableDecl",
                            "name": "variable_declaration",
                            "range": [
                                333,
                                339
                            ],
                            "children": [
                                {
                                    "type": "Variable",
                                    "name": "mapped_str",
                                    "range": [
                                        333,
                                        334
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Assignment",
                                    "name": "assignment",
                                    "range": [
                                        335,
                                        338
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                340,
                                365
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        341,
                                        349
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return_statement",
                                    "range": [
                                        351,
                                        364
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "ElseStatement",
                            "name": "else_statement",
                            "range": [
                                366,
                                371
                            ],
                            "children": [
                                {
                                    "type": "ReturnStatement",
                                    "name": "return_statement",
                                    "range": [
                                        369,
                                        370
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "ForStatement",
                    "name": "for_statement",
                    "range": [
                        372,
                        446
                    ],
                    "children": [
                        {
                            "type": "Initialization",
                            "name": "initialization",
                            "range": [
                                373,
                                387
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "VariableDecl",
                            "name": "variable_declaration",
                            "range": [
                                390,
                                398
                            ],
                            "children": [
                                {
                                    "type": "Variable",
                                    "name": "substr",
                                    "range": [
                                        390,
                                        391
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "Assignment",
                                    "name": "assignment",
                                    "range": [
                                        392,
                                        397
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                399,
                                406
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        400,
                                        403
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "ContinueStatement",
                                    "name": "continue_statement",
                                    "range": [
                                        405,
                                        406
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Assignment",
                            "name": "assignment",
                            "range": [
                                407,
                                420
                            ],
                            "children": [],
                            "content": ""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                421,
                                434
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "condition",
                                    "range": [
                                        422,
                                        430
                                    ],
                                    "children": [],
                                    "content": ""
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return_statement",
                                    "range": [
                                        432,
                                        433
                                    ],
                                    "children": [],
                                    "content": ""
                                }
                            ],
                            "content": ""
                        },
                        {
                            "type": "Deletion",
                            "name": "deletion",
                            "range": [
                                435,
                                446
                            ],
                            "children": [],
                            "content": ""
                        }
                    ],
                    "content": ""
                },
                {
                    "type": "ReturnStatement",
                    "name": "return_statement",
                    "range": [
                        447,
                        448
                    ],
                    "children": [],
                    "content": ""
                }
            ],
            "content": "\n\nif __name__==\"__main__\":\nimport doctest\n\ndoctest.testmod()\n"
        }
    ],
    "content": "def match_word_pattern(pattern:str,input_string:str)->bool:\n\"\"\" \\n     Determine if a given pattern matches a string using backtracking. \\n  \\n     pattern: The pattern to match. \\n     input_string: The string to match against the pattern. \\n     return: True if the pattern matches the string, False otherwise. \\n  \\n     >>> match_word_pattern(\" aba\", \"GraphTreesGraph \") \\n     True \\n  \\n     >>> match_word_pattern(\" xyx\", \"PythonRubyPython \") \\n     True \\n  \\n     >>> match_word_pattern(\" GG\", \"PythonJavaPython \") \\n     False \\n     \"\"\"\n\ndef backtrack(pattern_index:int,str_index:int)->bool:\n\"\"\" \\n         >>> backtrack(0, 0) \\n         True \\n  \\n         >>> backtrack(0, 1) \\n         True \\n  \\n         >>> backtrack(0, 4) \\n         False \\n         \"\"\"\nif pattern_index==len(pattern)and str_index==len(input_string):\nreturn True\nif pattern_index==len(pattern)or str_index==len(input_string):\nreturn False\nchar=pattern[pattern_index]\nif char in pattern_map:\nmapped_str=pattern_map[char]\nif input_string.startswith(mapped_str,str_index):\nreturn backtrack(pattern_index+1,str_index+len(mapped_str))\nelse:\nreturn False\nfor end in range(str_index+1,len(input_string)+1):\nsubstr=input_string[str_index:end]\nif substr in str_map:\ncontinue\npattern_map[char]=substr\nstr_map[substr]=char\nif backtrack(pattern_index+1,end):\nreturn True\ndel pattern_map[char]\ndel str_map[substr]\nreturn False\n\npattern_map:dict[str,str]={}\nstr_map:dict[str,str]={}\nreturn backtrack(0,0)\n\n\nif __name__==\"__main__\":\nimport doctest\n\ndoctest.testmod()\n"
}