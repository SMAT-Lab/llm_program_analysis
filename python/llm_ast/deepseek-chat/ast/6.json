{
    "type": "Program",
    "name": "Global",
    "range": [
        60,
        334
    ],
    "children": [
        {
            "type": "ClassDecl",
            "name": "FactCheckerBlock",
            "range": [
                60,
                66
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "Block",
                    "range": [
                        62,
                        64
                    ],
                    "children": [],
                    "content": "(Block)"
                }
            ],
            "content": "class FactCheckerBlock(Block):\n"
        },
        {
            "type": "ClassDecl",
            "name": "Input",
            "range": [
                67,
                73
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BlockSchema",
                    "range": [
                        69,
                        71
                    ],
                    "children": [],
                    "content": "(BlockSchema)"
                }
            ],
            "content": "class Input(BlockSchema):\n"
        },
        {
            "type": "VariableDecl",
            "name": "statement",
            "range": [
                74,
                86
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        76,
                        76
                    ],
                    "children": [],
                    "content": "str"
                },
                {
                    "type": "Assignment",
                    "name": "SchemaField",
                    "range": [
                        78,
                        85
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "description",
                            "range": [
                                81,
                                83
                            ],
                            "children": [],
                            "content": "description=\"The statement to check for factuality\""
                        }
                    ],
                    "content": "SchemaField(\ndescription=\"The statement to check for factuality\"\n)"
                }
            ],
            "content": "statement:str=SchemaField(\ndescription=\"The statement to check for factuality\"\n)\n"
        },
        {
            "type": "VariableDecl",
            "name": "credentials",
            "range": [
                87,
                94
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "JinaCredentialsInput",
                    "range": [
                        89,
                        89
                    ],
                    "children": [],
                    "content": "JinaCredentialsInput"
                },
                {
                    "type": "Assignment",
                    "name": "JinaCredentialsField",
                    "range": [
                        91,
                        93
                    ],
                    "children": [],
                    "content": "JinaCredentialsField()"
                }
            ],
            "content": "credentials:JinaCredentialsInput=JinaCredentialsField()\n"
        },
        {
            "type": "ClassDecl",
            "name": "Output",
            "range": [
                96,
                102
            ],
            "children": [
                {
                    "type": "Inheritance",
                    "name": "BlockSchema",
                    "range": [
                        98,
                        100
                    ],
                    "children": [],
                    "content": "(BlockSchema)"
                }
            ],
            "content": "class Output(BlockSchema):\n"
        },
        {
            "type": "VariableDecl",
            "name": "factuality",
            "range": [
                103,
                115
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "float",
                    "range": [
                        105,
                        105
                    ],
                    "children": [],
                    "content": "float"
                },
                {
                    "type": "Assignment",
                    "name": "SchemaField",
                    "range": [
                        107,
                        114
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "description",
                            "range": [
                                110,
                                112
                            ],
                            "children": [],
                            "content": "description=\"The factuality score of the statement\""
                        }
                    ],
                    "content": "SchemaField(\ndescription=\"The factuality score of the statement\"\n)"
                }
            ],
            "content": "factuality:float=SchemaField(\ndescription=\"The factuality score of the statement\"\n)\n"
        },
        {
            "type": "VariableDecl",
            "name": "result",
            "range": [
                116,
                126
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "bool",
                    "range": [
                        118,
                        118
                    ],
                    "children": [],
                    "content": "bool"
                },
                {
                    "type": "Assignment",
                    "name": "SchemaField",
                    "range": [
                        120,
                        125
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "description",
                            "range": [
                                122,
                                124
                            ],
                            "children": [],
                            "content": "description=\"The result of the factuality check\""
                        }
                    ],
                    "content": "SchemaField(description=\"The result of the factuality check\")"
                }
            ],
            "content": "result:bool=SchemaField(description=\"The result of the factuality check\")\n"
        },
        {
            "type": "VariableDecl",
            "name": "reason",
            "range": [
                127,
                137
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        129,
                        129
                    ],
                    "children": [],
                    "content": "str"
                },
                {
                    "type": "Assignment",
                    "name": "SchemaField",
                    "range": [
                        131,
                        136
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "description",
                            "range": [
                                133,
                                135
                            ],
                            "children": [],
                            "content": "description=\"The reason for the factuality result\""
                        }
                    ],
                    "content": "SchemaField(description=\"The reason for the factuality result\")"
                }
            ],
            "content": "reason:str=SchemaField(description=\"The reason for the factuality result\")\n"
        },
        {
            "type": "VariableDecl",
            "name": "error",
            "range": [
                138,
                148
            ],
            "children": [
                {
                    "type": "TypeAnnotation",
                    "name": "str",
                    "range": [
                        140,
                        140
                    ],
                    "children": [],
                    "content": "str"
                },
                {
                    "type": "Assignment",
                    "name": "SchemaField",
                    "range": [
                        142,
                        147
                    ],
                    "children": [
                        {
                            "type": "Argument",
                            "name": "description",
                            "range": [
                                144,
                                146
                            ],
                            "children": [],
                            "content": "description=\"Error message if the check fails\""
                        }
                    ],
                    "content": "SchemaField(description=\"Error message if the check fails\")"
                }
            ],
            "content": "error:str=SchemaField(description=\"Error message if the check fails\")\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                150,
                198
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        153,
                        153
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "SuperCall",
                    "name": "super",
                    "range": [
                        157,
                        163
                    ],
                    "children": [],
                    "content": "super().__init__(\n"
                },
                {
                    "type": "Assignment",
                    "name": "id",
                    "range": [
                        164,
                        166
                    ],
                    "children": [],
                    "content": "id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\""
                },
                {
                    "type": "Assignment",
                    "name": "description",
                    "range": [
                        169,
                        171
                    ],
                    "children": [],
                    "content": "description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\""
                },
                {
                    "type": "Assignment",
                    "name": "categories",
                    "range": [
                        174,
                        180
                    ],
                    "children": [],
                    "content": "categories={BlockCategory.SEARCH}"
                },
                {
                    "type": "Assignment",
                    "name": "input_schema",
                    "range": [
                        183,
                        188
                    ],
                    "children": [],
                    "content": "input_schema=FactCheckerBlock.Input,"
                },
                {
                    "type": "Assignment",
                    "name": "output_schema",
                    "range": [
                        190,
                        195
                    ],
                    "children": [],
                    "content": "output_schema=FactCheckerBlock.Output,"
                }
            ],
            "content": "def __init__(self):\nsuper().__init__(\nid=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\ndescription=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\ncategories={BlockCategory.SEARCH},\ninput_schema=FactCheckerBlock.Input,\noutput_schema=FactCheckerBlock.Output,\n)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "run",
            "range": [
                200,
                334
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        204,
                        204
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "Parameter",
                    "name": "input_data",
                    "range": [
                        206,
                        208
                    ],
                    "children": [],
                    "content": "input_data:Input"
                },
                {
                    "type": "Parameter",
                    "name": "credentials",
                    "range": [
                        212,
                        214
                    ],
                    "children": [],
                    "content": "credentials:JinaCredentials"
                },
                {
                    "type": "VariableDecl",
                    "name": "encoded_statement",
                    "range": [
                        226,
                        233
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "quote",
                            "range": [
                                228,
                                230
                            ],
                            "children": [],
                            "content": "quote(input_data"
                        }
                    ],
                    "content": "encoded_statement=quote(input_data.statement)"
                },
                {
                    "type": "VariableDecl",
                    "name": "url",
                    "range": [
                        235,
                        238
                    ],
                    "children": [],
                    "content": "url=f \"https://g.jina.ai/{encoded_statement}\""
                },
                {
                    "type": "VariableDecl",
                    "name": "headers",
                    "range": [
                        241,
                        256
                    ],
                    "children": [
                        {
                            "type": "ObjectLiteral",
                            "name": "",
                            "range": [
                                243,
                                256
                            ],
                            "children": [
                                {
                                    "type": "Property",
                                    "name": "Accept",
                                    "range": [
                                        245,
                                        247
                                    ],
                                    "children": [],
                                    "content": "\"Accept\":\"application/json\""
                                },
                                {
                                    "type": "Property",
                                    "name": "Authorization",
                                    "range": [
                                        250,
                                        253
                                    ],
                                    "children": [],
                                    "content": "\"Authorization\":f \"Bearer {credentials.api_key.get_secret_value()}\""
                                }
                            ],
                            "content": "{\n\"Accept\":\"application/json\",\n\"Authorization\":f \"Bearer {credentials.api_key.get_secret_value()}\",\n}"
                        }
                    ],
                    "content": "headers={\n\"Accept\":\"application/json\",\n\"Authorization\":f \"Bearer {credentials.api_key.get_secret_value()}\",\n}"
                },
                {
                    "type": "VariableDecl",
                    "name": "response",
                    "range": [
                        259,
                        270
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "requests.get",
                            "range": [
                                261,
                                269
                            ],
                            "children": [],
                            "content": "requests.get(url,headers=headers"
                        }
                    ],
                    "content": "response=requests.get(url,headers=headers)"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "response.raise_for_status",
                    "range": [
                        272,
                        276
                    ],
                    "children": [],
                    "content": "response.raise_for_status()"
                },
                {
                    "type": "VariableDecl",
                    "name": "data",
                    "range": [
                        278,
                        284
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "response.json",
                            "range": [
                                280,
                                283
                            ],
                            "children": [],
                            "content": "response.json("
                        }
                    ],
                    "content": "data=response.json()"
                },
                {
                    "type": "IfStatement",
                    "name": "",
                    "range": [
                        287,
                        333
                    ],
                    "children": [
                        {
                            "type": "Condition",
                            "name": "",
                            "range": [
                                288,
                                290
                            ],
                            "children": [],
                            "content": "\"data\" in data"
                        },
                        {
                            "type": "Block",
                            "name": "",
                            "range": [
                                292,
                                323
                            ],
                            "children": [
                                {
                                    "type": "Assignment",
                                    "name": "data",
                                    "range": [
                                        293,
                                        298
                                    ],
                                    "children": [],
                                    "content": "data=data[\"data\"]"
                                },
                                {
                                    "type": "YieldStatement",
                                    "name": "factuality",
                                    "range": [
                                        300,
                                        306
                                    ],
                                    "children": [],
                                    "content": "yield \"factuality\",data[\"factuality\"]"
                                },
                                {
                                    "type": "YieldStatement",
                                    "name": "result",
                                    "range": [
                                        308,
                                        314
                                    ],
                                    "children": [],
                                    "content": "yield \"result\",data[\"result\"]"
                                },
                                {
                                    "type": "YieldStatement",
                                    "name": "reason",
                                    "range": [
                                        316,
                                        322
                                    ],
                                    "children": [],
                                    "content": "yield \"reason\",data[\"reason\"]"
                                }
                            ],
                            "content": "\ndata=data[\"data\"]\nyield \"factuality\",data[\"factuality\"]\nyield \"result\",data[\"result\"]\nyield \"reason\",data[\"reason\"]\n"
                        },
                        {
                            "type": "ElseStatement",
                            "name": "",
                            "range": [
                                324,
                                333
                            ],
                            "children": [
                                {
                                    "type": "ThrowStatement",
                                    "name": "RuntimeError",
                                    "range": [
                                        327,
                                        332
                                    ],
                                    "children": [],
                                    "content": "raise RuntimeError(f \"Expected 'data' key not found in response: {data}\")"
                                }
                            ],
                            "content": "else:\nraise RuntimeError(f \"Expected 'data' key not found in response: {data}\")\n"
                        }
                    ],
                    "content": "if \"data\" in data:\ndata=data[\"data\"]\nyield \"factuality\",data[\"factuality\"]\nyield \"result\",data[\"result\"]\nyield \"reason\",data[\"reason\"]\nelse:\nraise RuntimeError(f \"Expected 'data' key not found in response: {data}\")\n"
                }
            ],
            "content": "def run(\nself,input_data:Input,*,credentials:JinaCredentials,**kwargs\n)->BlockOutput:\nencoded_statement=quote(input_data.statement)\nurl=f \"https://g.jina.ai/{encoded_statement}\"\n\nheaders={\n\"Accept\":\"application/json\",\n\"Authorization\":f \"Bearer {credentials.api_key.get_secret_value()}\",\n}\n\nresponse=requests.get(url,headers=headers)\nresponse.raise_for_status()\ndata=response.json()\n\nif \"data\" in data:\ndata=data[\"data\"]\nyield \"factuality\",data[\"factuality\"]\nyield \"result\",data[\"result\"]\nyield \"reason\",data[\"reason\"]\nelse:\nraise RuntimeError(f \"Expected 'data' key not found in response: {data}\")\n"
        }
    ],
    "content": "class FactCheckerBlock(Block):\nclass Input(BlockSchema):\nstatement:str=SchemaField(\ndescription=\"The statement to check for factuality\"\n)\ncredentials:JinaCredentialsInput=JinaCredentialsField()\n\nclass Output(BlockSchema):\nfactuality:float=SchemaField(\ndescription=\"The factuality score of the statement\"\n)\nresult:bool=SchemaField(description=\"The result of the factuality check\")\nreason:str=SchemaField(description=\"The reason for the factuality result\")\nerror:str=SchemaField(description=\"Error message if the check fails\")\n\ndef __init__(self):\nsuper().__init__(\nid=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\ndescription=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\ncategories={BlockCategory.SEARCH},\ninput_schema=FactCheckerBlock.Input,\noutput_schema=FactCheckerBlock.Output,\n)\n\ndef run(\nself,input_data:Input,*,credentials:JinaCredentials,**kwargs\n)->BlockOutput:\nencoded_statement=quote(input_data.statement)\nurl=f \"https://g.jina.ai/{encoded_statement}\"\n\nheaders={\n\"Accept\":\"application/json\",\n\"Authorization\":f \"Bearer {credentials.api_key.get_secret_value()}\",\n}\n\nresponse=requests.get(url,headers=headers)\nresponse.raise_for_status()\ndata=response.json()\n\nif \"data\" in data:\ndata=data[\"data\"]\nyield \"factuality\",data[\"factuality\"]\nyield \"result\",data[\"result\"]\nyield \"reason\",data[\"reason\"]\nelse:\nraise RuntimeError(f \"Expected 'data' key not found in response: {data}\")\n"
}