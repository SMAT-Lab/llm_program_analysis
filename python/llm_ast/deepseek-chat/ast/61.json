{
    "type": "Program",
    "name": "Global",
    "range": [
        34,
        267
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "to_dict",
            "range": [
                34,
                50
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "to_dict",
                    "range": [
                        34,
                        42
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                34,
                                34
                            ],
                            "children": [],
                            "content": "def"
                        },
                        {
                            "type": "FunctionName",
                            "name": "to_dict",
                            "range": [
                                35,
                                35
                            ],
                            "children": [],
                            "content": "to_dict"
                        },
                        {
                            "type": "ParameterList",
                            "name": "data",
                            "range": [
                                36,
                                38
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "data",
                                    "range": [
                                        37,
                                        37
                                    ],
                                    "children": [],
                                    "content": "data"
                                }
                            ],
                            "content": "(data)"
                        },
                        {
                            "type": "ReturnType",
                            "name": "dict",
                            "range": [
                                39,
                                41
                            ],
                            "children": [],
                            "content": "->dict"
                        }
                    ],
                    "content": "def to_dict(data)->dict:"
                },
                {
                    "type": "FunctionBody",
                    "name": "to_dict",
                    "range": [
                        43,
                        50
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                44,
                                48
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "jsonable_encoder",
                                    "range": [
                                        45,
                                        48
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "data",
                                            "range": [
                                                47,
                                                47
                                            ],
                                            "children": [],
                                            "content": "data"
                                        }
                                    ],
                                    "content": "jsonable_encoder(data)"
                                }
                            ],
                            "content": "return jsonable_encoder(data)"
                        }
                    ],
                    "content": "\nreturn jsonable_encoder(data)\n\n"
                }
            ],
            "content": "def to_dict(data)->dict:\nreturn jsonable_encoder(data)\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "dumps",
            "range": [
                51,
                72
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "data",
                    "range": [
                        54,
                        54
                    ],
                    "content": "("
                },
                {
                    "type": "ReturnType",
                    "name": "str",
                    "range": [
                        58,
                        58
                    ],
                    "content": ">"
                },
                {
                    "type": "BlockStatement",
                    "range": [
                        60,
                        72
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "range": [
                                61,
                                70
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "json.dumps",
                                    "range": [
                                        62,
                                        70
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "jsonable_encoder",
                                            "range": [
                                                66,
                                                69
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "data",
                                                    "range": [
                                                        68,
                                                        68
                                                    ],
                                                    "content": "("
                                                }
                                            ],
                                            "content": "(jsonable_encoder(data"
                                        }
                                    ],
                                    "content": "return json.dumps(jsonable_encoder(data)"
                                }
                            ],
                            "content": "\nreturn json.dumps(jsonable_encoder(data)"
                        }
                    ],
                    "content": ":\nreturn json.dumps(jsonable_encoder(data))\n"
                }
            ],
            "content": "\ndef dumps(data)->str:\nreturn json.dumps(jsonable_encoder(data))\n"
        },
        {
            "type": "TypeVarDeclaration",
            "name": "T",
            "range": [
                74,
                79
            ],
            "children": [
                {
                    "type": "TypeVar",
                    "name": "TypeVar",
                    "range": [
                        76,
                        76
                    ],
                    "children": [
                        {
                            "type": "Literal",
                            "name": "\"T\"",
                            "range": [
                                78,
                                78
                            ],
                            "children": [],
                            "content": "("
                        }
                    ],
                    "content": "="
                }
            ],
            "content": "\nT=TypeVar(\"T\""
        },
        {
            "type": "FunctionDecl",
            "name": "loads",
            "range": [
                86,
                115
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "data",
                    "range": [
                        89,
                        91
                    ],
                    "children": [],
                    "content": "(data:"
                },
                {
                    "type": "Parameter",
                    "name": "args",
                    "range": [
                        93,
                        94
                    ],
                    "children": [],
                    "content": ",*"
                },
                {
                    "type": "Parameter",
                    "name": "target_type",
                    "range": [
                        96,
                        101
                    ],
                    "children": [],
                    "content": ",target_type:Type[T"
                },
                {
                    "type": "Parameter",
                    "name": "kwargs",
                    "range": [
                        103,
                        105
                    ],
                    "children": [],
                    "content": ",**"
                },
                {
                    "type": "ReturnType",
                    "name": "T",
                    "range": [
                        109,
                        109
                    ],
                    "children": [],
                    "content": ">"
                }
            ],
            "content": "\ndef loads(data:str,*args,target_type:Type[T],**kwargs)->T:...\n"
        },
        {
            "type": "FunctionDecl",
            "name": "loads",
            "range": [
                119,
                141
            ],
            "children": [
                {
                    "type": "Decorator",
                    "name": "@overload",
                    "range": [
                        116,
                        118
                    ],
                    "children": [],
                    "content": "\n\n@"
                },
                {
                    "type": "FunctionSignature",
                    "name": "loads",
                    "range": [
                        119,
                        136
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "data",
                            "range": [
                                122,
                                124
                            ],
                            "children": [],
                            "content": "loads(data"
                        },
                        {
                            "type": "Parameter",
                            "name": "*args",
                            "range": [
                                126,
                                128
                            ],
                            "children": [],
                            "content": "str,*"
                        },
                        {
                            "type": "Parameter",
                            "name": "**kwargs",
                            "range": [
                                129,
                                131
                            ],
                            "children": [],
                            "content": "args,*"
                        },
                        {
                            "type": "ReturnType",
                            "name": "Any",
                            "range": [
                                133,
                                135
                            ],
                            "children": [],
                            "content": "kwargs)-"
                        }
                    ],
                    "content": "overload\ndef loads(data:str,*args,**kwargs)->"
                },
                {
                    "type": "FunctionBody",
                    "name": "loads",
                    "range": [
                        137,
                        141
                    ],
                    "children": [
                        {
                            "type": "Ellipsis",
                            "name": "...",
                            "range": [
                                137,
                                139
                            ],
                            "children": [],
                            "content": "Any:."
                        }
                    ],
                    "content": "Any:..."
                }
            ],
            "content": "overload\ndef loads(data:str,*args,**kwargs)->Any:..."
        },
        {
            "type": "FunctionDecl",
            "name": "loads",
            "range": [
                142,
                202
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        144,
                        166
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "data",
                            "range": [
                                145,
                                147
                            ],
                            "children": [],
                            "content": "def loads("
                        },
                        {
                            "type": "Parameter",
                            "name": "args",
                            "range": [
                                149,
                                150
                            ],
                            "children": [],
                            "content": ":str"
                        },
                        {
                            "type": "Parameter",
                            "name": "target_type",
                            "range": [
                                152,
                                161
                            ],
                            "children": [],
                            "content": "*args,target_type:Type[T]|"
                        },
                        {
                            "type": "Parameter",
                            "name": "kwargs",
                            "range": [
                                163,
                                165
                            ],
                            "children": [],
                            "content": "=None,"
                        }
                    ],
                    "content": "\ndef loads(data:str,*args,target_type:Type[T]|None=None,*"
                },
                {
                    "type": "ReturnType",
                    "name": "Any",
                    "range": [
                        167,
                        169
                    ],
                    "children": [],
                    "content": "*kwargs)"
                },
                {
                    "type": "BlockStatement",
                    "name": "body",
                    "range": [
                        171,
                        202
                    ],
                    "children": [
                        {
                            "type": "VariableDeclaration",
                            "name": "parsed",
                            "range": [
                                172,
                                186
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "json.loads",
                                    "range": [
                                        174,
                                        186
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "data",
                                            "range": [
                                                178,
                                                178
                                            ],
                                            "children": [],
                                            "content": "."
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "args",
                                            "range": [
                                                180,
                                                181
                                            ],
                                            "children": [],
                                            "content": "(data"
                                        },
                                        {
                                            "type": "Argument",
                                            "name": "kwargs",
                                            "range": [
                                                183,
                                                185
                                            ],
                                            "children": [],
                                            "content": "*args,"
                                        }
                                    ],
                                    "content": "\nparsed=json.loads(data,*args,*"
                                }
                            ],
                            "content": "Any:\nparsed=json.loads(data,*args,*"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                188,
                                198
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "target_type",
                                    "range": [
                                        189,
                                        189
                                    ],
                                    "children": [],
                                    "content": ")"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "then",
                                    "range": [
                                        191,
                                        198
                                    ],
                                    "children": [
                                        {
                                            "type": "ReturnStatement",
                                            "name": "return",
                                            "range": [
                                                192,
                                                198
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "type_match",
                                                    "range": [
                                                        193,
                                                        198
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Argument",
                                                            "name": "parsed",
                                                            "range": [
                                                                195,
                                                                195
                                                            ],
                                                            "children": [],
                                                            "content": "return"
                                                        },
                                                        {
                                                            "type": "Argument",
                                                            "name": "target_type",
                                                            "range": [
                                                                197,
                                                                197
                                                            ],
                                                            "children": [],
                                                            "content": "("
                                                        }
                                                    ],
                                                    "content": ":\nreturn type_match(parsed"
                                                }
                                            ],
                                            "content": "target_type:\nreturn type_match(parsed"
                                        }
                                    ],
                                    "content": "if target_type:\nreturn type_match(parsed"
                                }
                            ],
                            "content": "kwargs)\nif target_type:\nreturn type_match(parsed"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                200,
                                201
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "parsed",
                                    "range": [
                                        201,
                                        201
                                    ],
                                    "children": [],
                                    "content": ")"
                                }
                            ],
                            "content": "target_type)"
                        }
                    ],
                    "content": ">Any:\nparsed=json.loads(data,*args,**kwargs)\nif target_type:\nreturn type_match(parsed,target_type)\n"
                }
            ],
            "content": "\n\n\ndef loads(data:str,*args,target_type:Type[T]|None=None,**kwargs)->Any:\nparsed=json.loads(data,*args,**kwargs)\nif target_type:\nreturn type_match(parsed,target_type)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "validate_with_jsonschema",
            "range": [
                204,
                267
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        206,
                        226
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "schema",
                            "range": [
                                208,
                                215
                            ],
                            "children": [],
                            "content": "def validate_with_jsonschema(\nschema:dict["
                        },
                        {
                            "type": "Parameter",
                            "name": "data",
                            "range": [
                                217,
                                224
                            ],
                            "children": [],
                            "content": ",Any],data:dict["
                        }
                    ],
                    "content": "\n\ndef validate_with_jsonschema(\nschema:dict[str,Any],data:dict[str,"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        227,
                        231
                    ],
                    "children": [],
                    "content": "Any]\n)-"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        234,
                        236
                    ],
                    "children": [],
                    "content": "|None:"
                },
                {
                    "type": "TryStatement",
                    "name": "try_block",
                    "range": [
                        238,
                        266
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "jsonschema.validate",
                            "range": [
                                241,
                                248
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "data",
                                    "range": [
                                        245,
                                        245
                                    ],
                                    "children": [],
                                    "content": "jsonschema"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "schema",
                                    "range": [
                                        247,
                                        247
                                    ],
                                    "children": [],
                                    "content": "validate"
                                }
                            ],
                            "content": "\ntry:\njsonschema.validate("
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_none",
                            "range": [
                                250,
                                251
                            ],
                            "children": [],
                            "content": ",schema"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except_block",
                            "range": [
                                253,
                                266
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "ValidationError",
                                    "range": [
                                        254,
                                        256
                                    ],
                                    "children": [],
                                    "content": "return None\n"
                                },
                                {
                                    "type": "ReturnStatement",
                                    "name": "return_error_message",
                                    "range": [
                                        261,
                                        265
                                    ],
                                    "children": [],
                                    "content": "as e:\nreturn"
                                }
                            ],
                            "content": "\nreturn None\nexcept jsonschema.ValidationError as e:\nreturn str"
                        }
                    ],
                    "content": "\"\"\" \\n     Validate the data against the schema. \\n     Returns the validation error message if the data does not match the schema. \\n     \"\"\"\ntry:\njsonschema.validate(data,schema)\nreturn None\nexcept jsonschema.ValidationError as e:\nreturn str"
                }
            ],
            "content": "parsed\n\n\ndef validate_with_jsonschema(\nschema:dict[str,Any],data:dict[str,Any]\n)->str|None:\n\"\"\" \\n     Validate the data against the schema. \\n     Returns the validation error message if the data does not match the schema. \\n     \"\"\"\ntry:\njsonschema.validate(data,schema)\nreturn None\nexcept jsonschema.ValidationError as e:\nreturn str("
        }
    ],
    "content": "def to_dict(data)->dict:\nreturn jsonable_encoder(data)\n\n\ndef dumps(data)->str:\nreturn json.dumps(jsonable_encoder(data))\n\n\nT=TypeVar(\"T\")\n\n\n@overload\ndef loads(data:str,*args,target_type:Type[T],**kwargs)->T:...\n\n\n@overload\ndef loads(data:str,*args,**kwargs)->Any:...\n\n\ndef loads(data:str,*args,target_type:Type[T]|None=None,**kwargs)->Any:\nparsed=json.loads(data,*args,**kwargs)\nif target_type:\nreturn type_match(parsed,target_type)\nreturn parsed\n\n\ndef validate_with_jsonschema(\nschema:dict[str,Any],data:dict[str,Any]\n)->str|None:\n\"\"\" \\n     Validate the data against the schema. \\n     Returns the validation error message if the data does not match the schema. \\n     \"\"\"\ntry:\njsonschema.validate(data,schema)\nreturn None\nexcept jsonschema.ValidationError as e:\nreturn str("
}