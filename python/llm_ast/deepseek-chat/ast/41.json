{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        591
    ],
    "children": [
        {
            "type": "Shebang",
            "name": "",
            "range": [
                0,
                8
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "usr",
                    "range": [
                        3,
                        6
                    ],
                    "children": [],
                    "content": "usr/bin/"
                },
                {
                    "type": "Identifier",
                    "name": "bin",
                    "range": [
                        7,
                        10
                    ],
                    "children": [],
                    "content": "env python\n#"
                },
                {
                    "type": "Identifier",
                    "name": "env",
                    "range": [
                        11,
                        14
                    ],
                    "children": [],
                    "content": "coding:utf-"
                },
                {
                    "type": "Identifier",
                    "name": "python",
                    "range": [
                        14,
                        20
                    ],
                    "children": [],
                    "content": "-8\n\n\"\"\" \\n     The approach taken is explained below. I decided to do it simply. \\n     Initially I was considering parsing the data into some sort of \\n     structure and then generating an appropriate README. I am still \\n     considering doing it - but for now this should work. The only issue \\n     I see is that it only sorts the entries at the lowest level, and that \\n     the order of the top-level contents do not match the order of the actual \\n     entries. \\n  \\n     This could be extended by having nested blocks, sorting them recursively \\n     and flattening the end structure into a list of lines. Revision 2 maybe ^.^. \\n \"\"\""
                }
            ],
            "content": "#!/usr/bin/env python"
        },
        {
            "type": "EncodingDeclaration",
            "name": "",
            "range": [
                10,
                16
            ],
            "children": [
                {
                    "type": "Identifier",
                    "name": "coding",
                    "range": [
                        11,
                        17
                    ],
                    "children": [],
                    "content": "coding:utf-8\n\n"
                },
                {
                    "type": "Identifier",
                    "name": "utf",
                    "range": [
                        18,
                        21
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     The approach taken is explained below. I decided to do it simply. \\n     Initially I was considering parsing the data into some sort of \\n     structure and then generating an appropriate README. I am still \\n     considering doing it - but for now this should work. The only issue \\n     I see is that it only sorts the entries at the lowest level, and that \\n     the order of the top-level contents do not match the order of the actual \\n     entries. \\n  \\n     This could be extended by having nested blocks, sorting them recursively \\n     and flattening the end structure into a list of lines. Revision 2 maybe ^.^. \\n \"\"\"\n"
                },
                {
                    "type": "Literal",
                    "name": "8",
                    "range": [
                        22,
                        23
                    ],
                    "children": [],
                    "content": "\ndef"
                }
            ],
            "content": "#coding:utf-8\n"
        },
        {
            "type": "Literal",
            "name": "",
            "range": [
                18,
                20
            ],
            "children": [],
            "content": "\"\"\" \\n     The approach taken is explained below. I decided to do it simply. \\n     Initially I was considering parsing the data into some sort of \\n     structure and then generating an appropriate README. I am still \\n     considering doing it - but for now this should work. The only issue \\n     I see is that it only sorts the entries at the lowest level, and that \\n     the order of the top-level contents do not match the order of the actual \\n     entries. \\n  \\n     This could be extended by having nested blocks, sorting them recursively \\n     and flattening the end structure into a list of lines. Revision 2 maybe ^.^. \\n \"\"\""
        },
        {
            "type": "FunctionDecl",
            "name": "sort_blocks",
            "range": [
                23,
                286
            ],
            "children": [
                {
                    "type": "BlockStatement",
                    "range": [
                        28,
                        286
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "value": "First, we load the current README into memory",
                            "range": [
                                29,
                                39
                            ],
                            "content": "#First,we load the current README into memory\n"
                        },
                        {
                            "type": "WithStatement",
                            "range": [
                                40,
                                58
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "open",
                                        "range": [
                                            41,
                                            45
                                        ],
                                        "content": "open('README.md','r'"
                                    },
                                    "arguments": [
                                        {
                                            "type": "Literal",
                                            "value": "'README.md'",
                                            "range": [
                                                43,
                                                53
                                            ],
                                            "content": "'README.md','r')as read_me_file:\nread_me=read_me_file"
                                        },
                                        {
                                            "type": "Literal",
                                            "value": "'r'",
                                            "range": [
                                                45,
                                                47
                                            ],
                                            "content": "'r')as"
                                        }
                                    ],
                                    "range": [
                                        41,
                                        47
                                    ],
                                    "content": "open('README.md','r')as"
                                },
                                {
                                    "type": "VariableDeclaration",
                                    "kind": "as",
                                    "range": [
                                        47,
                                        58
                                    ],
                                    "declarations": [
                                        {
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "read_me_file",
                                                "range": [
                                                    48,
                                                    60
                                                ],
                                                "content": "read_me_file:\nread_me=read_me_file.read()\n\n#"
                                            },
                                            "init": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "read_me_file",
                                                        "range": [
                                                            53,
                                                            65
                                                        ],
                                                        "content": "read_me_file.read()\n\n#Separating the 'table of contents' from the"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "read",
                                                        "range": [
                                                            55,
                                                            59
                                                        ],
                                                        "content": "read()\n\n"
                                                    },
                                                    "computed": false,
                                                    "range": [
                                                        53,
                                                        59
                                                    ],
                                                    "content": "read_me_file.read()\n\n"
                                                },
                                                "arguments": [],
                                                "range": [
                                                    53,
                                                    61
                                                ],
                                                "content": "read_me_file.read()\n\n#Separating"
                                            },
                                            "range": [
                                                48,
                                                61
                                            ],
                                            "content": "read_me_file:\nread_me=read_me_file.read()\n\n#Separating"
                                        }
                                    ],
                                    "content": "as read_me_file:\nread_me=read_me_file.read()\n"
                                }
                            ],
                            "content": "with open('README.md','r')as read_me_file:\nread_me=read_me_file.read()\n"
                        },
                        {
                            "type": "Comment",
                            "value": "Separating the 'table of contents' from the contents (blocks)",
                            "range": [
                                60,
                                70
                            ],
                            "content": "#Separating the 'table of contents' from the contents(blocks)\n"
                        },
                        {
                            "type": "VariableDeclaration",
                            "kind": "=",
                            "range": [
                                71,
                                87
                            ],
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "table_of_contents",
                                        "range": [
                                            71,
                                            87
                                        ],
                                        "content": "table_of_contents=''.join(read_me.split('- - -')[0])\n"
                                    },
                                    "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "MemberExpression",
                                            "object": {
                                                "type": "Literal",
                                                "value": "''",
                                                "range": [
                                                    73,
                                                    75
                                                ],
                                                "content": "''.join"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "join",
                                                "range": [
                                                    75,
                                                    79
                                                ],
                                                "content": "join(read_me.split"
                                            },
                                            "computed": false,
                                            "range": [
                                                73,
                                                79
                                            ],
                                            "content": "''.join(read_me.split"
                                        },
                                        "arguments": [
                                            {
                                                "type": "MemberExpression",
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "read_me",
                                                    "range": [
                                                        77,
                                                        83
                                                    ],
                                                    "content": "read_me.split('- - -')["
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "split",
                                                    "range": [
                                                        79,
                                                        84
                                                    ],
                                                    "content": "split('- - -')[0"
                                                },
                                                "computed": false,
                                                "range": [
                                                    77,
                                                    84
                                                ],
                                                "content": "read_me.split('- - -')[0"
                                            },
                                            {
                                                "type": "Literal",
                                                "value": "'- - -'",
                                                "range": [
                                                    81,
                                                    87
                                                ],
                                                "content": "'- - -')[0])\n"
                                            }
                                        ],
                                        "range": [
                                            73,
                                            87
                                        ],
                                        "content": "''.join(read_me.split('- - -')[0])\n"
                                    },
                                    "range": [
                                        71,
                                        87
                                    ],
                                    "content": "table_of_contents=''.join(read_me.split('- - -')[0])\n"
                                }
                            ],
                            "content": "table_of_contents=''.join(read_me.split('- - -')[0])\n"
                        },
                        {
                            "type": "VariableDeclaration",
                            "kind": "=",
                            "range": [
                                88,
                                103
                            ],
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "blocks",
                                        "range": [
                                            88,
                                            94
                                        ],
                                        "content": "blocks=''.join(read_me"
                                    },
                                    "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "MemberExpression",
                                            "object": {
                                                "type": "Literal",
                                                "value": "''",
                                                "range": [
                                                    90,
                                                    92
                                                ],
                                                "content": "''.join"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "join",
                                                "range": [
                                                    92,
                                                    96
                                                ],
                                                "content": "join(read_me.split"
                                            },
                                            "computed": false,
                                            "range": [
                                                90,
                                                96
                                            ],
                                            "content": "''.join(read_me.split"
                                        },
                                        "arguments": [
                                            {
                                                "type": "MemberExpression",
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "read_me",
                                                    "range": [
                                                        94,
                                                        100
                                                    ],
                                                    "content": "read_me.split('- - -')["
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "split",
                                                    "range": [
                                                        96,
                                                        101
                                                    ],
                                                    "content": "split('- - -')[1"
                                                },
                                                "computed": false,
                                                "range": [
                                                    94,
                                                    101
                                                ],
                                                "content": "read_me.split('- - -')[1"
                                            },
                                            {
                                                "type": "Literal",
                                                "value": "'- - -'",
                                                "range": [
                                                    98,
                                                    104
                                                ],
                                                "content": "'- - -')[1])."
                                            }
                                        ],
                                        "range": [
                                            90,
                                            104
                                        ],
                                        "content": "''.join(read_me.split('- - -')[1])."
                                    },
                                    "range": [
                                        88,
                                        104
                                    ],
                                    "content": "blocks=''.join(read_me.split('- - -')[1])."
                                }
                            ],
                            "content": "blocks=''.join(read_me.split('- - -')[1])"
                        },
                        {
                            "type": "ForStatement",
                            "range": [
                                110,
                                157
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclaration",
                                    "kind": "in",
                                    "range": [
                                        111,
                                        119
                                    ],
                                    "declarations": [
                                        {
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "i",
                                                "range": [
                                                    111,
                                                    112
                                                ],
                                                "content": "i in"
                                            },
                                            "init": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "Identifier",
                                                    "name": "range",
                                                    "range": [
                                                        113,
                                                        118
                                                    ],
                                                    "content": "range(len(blocks)"
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "len",
                                                            "range": [
                                                                115,
                                                                118
                                                            ],
                                                            "content": "len(blocks)"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "blocks",
                                                                "range": [
                                                                    117,
                                                                    123
                                                                ],
                                                                "content": "blocks)):\nif i"
                                                            }
                                                        ],
                                                        "range": [
                                                            115,
                                                            123
                                                        ],
                                                        "content": "len(blocks)):\nif i"
                                                    }
                                                ],
                                                "range": [
                                                    113,
                                                    123
                                                ],
                                                "content": "range(len(blocks)):\nif i"
                                            },
                                            "range": [
                                                111,
                                                123
                                            ],
                                            "content": "i in range(len(blocks)):\nif i"
                                        }
                                    ],
                                    "content": "i in range(len(blocks))"
                                },
                                {
                                    "type": "BlockStatement",
                                    "range": [
                                        121,
                                        157
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "range": [
                                                122,
                                                140
                                            ],
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "==",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "i",
                                                    "range": [
                                                        123,
                                                        124
                                                    ],
                                                    "content": "i="
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": "0",
                                                    "range": [
                                                        125,
                                                        126
                                                    ],
                                                    "content": "=0"
                                                },
                                                "range": [
                                                    123,
                                                    126
                                                ],
                                                "content": "i==0"
                                            },
                                            "consequent": {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "blocks",
                                                            "range": [
                                                                129,
                                                                135
                                                            ],
                                                            "content": "blocks[i]=blocks["
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "i",
                                                            "range": [
                                                                131,
                                                                132
                                                            ],
                                                            "content": "i]"
                                                        },
                                                        "computed": true,
                                                        "range": [
                                                            129,
                                                            132
                                                        ],
                                                        "content": "blocks[i]"
                                                    },
                                                    "right": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                            "type": "MemberExpression",
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "blocks",
                                                                "range": [
                                                                    134,
                                                                    140
                                                                ],
                                                                "content": "blocks[i]+'\\n'\n"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "i",
                                                                "range": [
                                                                    136,
                                                                    137
                                                                ],
                                                                "content": "i]"
                                                            },
                                                            "computed": true,
                                                            "range": [
                                                                134,
                                                                137
                                                            ],
                                                            "content": "blocks[i]"
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": "'\\n'",
                                                            "range": [
                                                                138,
                                                                142
                                                            ],
                                                            "content": "+'\\n'\nelse:"
                                                        },
                                                        "range": [
                                                            134,
                                                            142
                                                        ],
                                                        "content": "blocks[i]+'\\n'\nelse:"
                                                    },
                                                    "range": [
                                                        129,
                                                        142
                                                    ],
                                                    "content": "blocks[i]=blocks[i]+'\\n'\nelse:"
                                                },
                                                "range": [
                                                    129,
                                                    142
                                                ],
                                                "content": "blocks[i]=blocks[i]+'\\n'\nelse:"
                                            },
                                            "alternate": null,
                                            "content": "if i==0:\nblocks[i]=blocks[i]+'\\n'\n"
                                        },
                                        {
                                            "type": "ElseStatement",
                                            "range": [
                                                141,
                                                157
                                            ],
                                            "consequent": {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "blocks",
                                                            "range": [
                                                                144,
                                                                150
                                                            ],
                                                            "content": "blocks[i]='# '+"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "i",
                                                            "range": [
                                                                146,
                                                                147
                                                            ],
                                                            "content": "i]"
                                                        },
                                                        "computed": true,
                                                        "range": [
                                                            144,
                                                            147
                                                        ],
                                                        "content": "blocks[i]"
                                                    },
                                                    "right": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                            "type": "Literal",
                                                            "value": "'# '",
                                                            "range": [
                                                                149,
                                                                153
                                                            ],
                                                            "content": "'# '+blocks[i"
                                                        },
                                                        "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                                "type": "MemberExpression",
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "blocks",
                                                                    "range": [
                                                                        151,
                                                                        157
                                                                    ],
                                                                    "content": "blocks[i]+'\\n'\n"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "i",
                                                                    "range": [
                                                                        153,
                                                                        154
                                                                    ],
                                                                    "content": "i]"
                                                                },
                                                                "computed": true,
                                                                "range": [
                                                                    151,
                                                                    154
                                                                ],
                                                                "content": "blocks[i]"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "'\\n'",
                                                                "range": [
                                                                    155,
                                                                    159
                                                                ],
                                                                "content": "+'\\n'\n\n#"
                                                            },
                                                            "range": [
                                                                151,
                                                                159
                                                            ],
                                                            "content": "blocks[i]+'\\n'\n\n#"
                                                        },
                                                        "range": [
                                                            149,
                                                            159
                                                        ],
                                                        "content": "'# '+blocks[i]+'\\n'\n\n#"
                                                    },
                                                    "range": [
                                                        144,
                                                        159
                                                    ],
                                                    "content": "blocks[i]='# '+blocks[i]+'\\n'\n\n#"
                                                },
                                                "range": [
                                                    144,
                                                    159
                                                ],
                                                "content": "blocks[i]='# '+blocks[i]+'\\n'\n\n#"
                                            },
                                            "content": "else:\nblocks[i]='# '+blocks[i]+'\\n'\n"
                                        }
                                    ],
                                    "content": "\nif i==0:\nblocks[i]=blocks[i]+'\\n'\nelse:\nblocks[i]='# '+blocks[i]+'\\n'\n"
                                }
                            ],
                            "content": "for i in range(len(blocks)):\nif i==0:\nblocks[i]=blocks[i]+'\\n'\nelse:\nblocks[i]='# '+blocks[i]+'\\n'\n"
                        },
                        {
                            "type": "Comment",
                            "value": "Sorting the libraries",
                            "range": [
                                159,
                                163
                            ],
                            "content": "#Sorting the libraries\n"
                        },
                        {
                            "type": "VariableDeclaration",
                            "kind": "=",
                            "range": [
                                164,
                                178
                            ],
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "inner_blocks",
                                        "range": [
                                            164,
                                            176
                                        ],
                                        "content": "inner_blocks=sorted(blocks[0].split('##')"
                                    },
                                    "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "sorted",
                                            "range": [
                                                166,
                                                172
                                            ],
                                            "content": "sorted(blocks[0]."
                                        },
                                        "arguments": [
                                            {
                                                "type": "MemberExpression",
                                                "object": {
                                                    "type": "MemberExpression",
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "blocks",
                                                        "range": [
                                                            168,
                                                            174
                                                        ],
                                                        "content": "blocks[0].split("
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "0",
                                                        "range": [
                                                            170,
                                                            171
                                                        ],
                                                        "content": "0]"
                                                    },
                                                    "computed": true,
                                                    "range": [
                                                        168,
                                                        171
                                                    ],
                                                    "content": "blocks[0]"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "split",
                                                    "range": [
                                                        172,
                                                        177
                                                    ],
                                                    "content": ".split('##'))"
                                                },
                                                "computed": false,
                                                "range": [
                                                    168,
                                                    177
                                                ],
                                                "content": "blocks[0].split('##'))"
                                            },
                                            {
                                                "type": "Literal",
                                                "value": "'##'",
                                                "range": [
                                                    175,
                                                    179
                                                ],
                                                "content": "'##'))\nfor"
                                            }
                                        ],
                                        "range": [
                                            166,
                                            179
                                        ],
                                        "content": "sorted(blocks[0].split('##'))\nfor"
                                    },
                                    "range": [
                                        164,
                                        179
                                    ],
                                    "content": "inner_blocks=sorted(blocks[0].split('##'))\nfor"
                                }
                            ],
                            "content": "inner_blocks=sorted(blocks[0].split('##'))\n"
                        },
                        {
                            "type": "ForStatement",
                            "range": [
                                179,
                                217
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclaration",
                                    "kind": "in",
                                    "range": [
                                        180,
                                        188
                                    ],
                                    "declarations": [
                                        {
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "i",
                                                "range": [
                                                    180,
                                                    181
                                                ],
                                                "content": "i in"
                                            },
                                            "init": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "Identifier",
                                                    "name": "range",
                                                    "range": [
                                                        182,
                                                        187
                                                    ],
                                                    "content": "range(1,len("
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "1",
                                                        "range": [
                                                            184,
                                                            185
                                                        ],
                                                        "content": "1,"
                                                    },
                                                    {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "len",
                                                            "range": [
                                                                186,
                                                                189
                                                            ],
                                                            "content": "len(inner_blocks)"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "inner_blocks",
                                                                "range": [
                                                                    188,
                                                                    200
                                                                ],
                                                                "content": "inner_blocks)):\nif inner_blocks[i][0]"
                                                            }
                                                        ],
                                                        "range": [
                                                            186,
                                                            200
                                                        ],
                                                        "content": "len(inner_blocks)):\nif inner_blocks[i][0]"
                                                    }
                                                ],
                                                "range": [
                                                    182,
                                                    200
                                                ],
                                                "content": "range(1,len(inner_blocks)):\nif inner_blocks[i][0]"
                                            },
                                            "range": [
                                                180,
                                                200
                                            ],
                                            "content": "i in range(1,len(inner_blocks)):\nif inner_blocks[i][0]"
                                        }
                                    ],
                                    "content": "i in range(1,len(inner_blocks"
                                },
                                {
                                    "type": "BlockStatement",
                                    "range": [
                                        191,
                                        217
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "range": [
                                                193,
                                                205
                                            ],
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "!=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "inner_blocks",
                                                            "range": [
                                                                194,
                                                                206
                                                            ],
                                                            "content": "inner_blocks[i][0]!='#':\ninner_blocks"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "i",
                                                            "range": [
                                                                196,
                                                                197
                                                            ],
                                                            "content": "i]"
                                                        },
                                                        "computed": true,
                                                        "range": [
                                                            194,
                                                            197
                                                        ],
                                                        "content": "inner_blocks[i]"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "0",
                                                        "range": [
                                                            198,
                                                            199
                                                        ],
                                                        "content": "[0"
                                                    },
                                                    "computed": true,
                                                    "range": [
                                                        194,
                                                        199
                                                    ],
                                                    "content": "inner_blocks[i][0"
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": "'#'",
                                                    "range": [
                                                        201,
                                                        204
                                                    ],
                                                    "content": "!='#':"
                                                },
                                                "range": [
                                                    194,
                                                    204
                                                ],
                                                "content": "inner_blocks[i][0]!='#':"
                                            },
                                            "consequent": {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "inner_blocks",
                                                            "range": [
                                                                206,
                                                                218
                                                            ],
                                                            "content": "inner_blocks[i]='##'+inner_blocks[i]\ninner_blocks"
                                                        },
                                                        "property": {
                                                            "type": "Identifier",
                                                            "name": "i",
                                                            "range": [
                                                                208,
                                                                209
                                                            ],
                                                            "content": "i]"
                                                        },
                                                        "computed": true,
                                                        "range": [
                                                            206,
                                                            209
                                                        ],
                                                        "content": "inner_blocks[i]"
                                                    },
                                                    "right": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                            "type": "Literal",
                                                            "value": "'##'",
                                                            "range": [
                                                                211,
                                                                215
                                                            ],
                                                            "content": "'##'+inner_blocks[i"
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "inner_blocks",
                                                                "range": [
                                                                    213,
                                                                    225
                                                                ],
                                                                "content": "inner_blocks[i]\ninner_blocks=''.join(inner_blocks)"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "i",
                                                                "range": [
                                                                    215,
                                                                    216
                                                                ],
                                                                "content": "i]"
                                                            },
                                                            "computed": true,
                                                            "range": [
                                                                213,
                                                                216
                                                            ],
                                                            "content": "inner_blocks[i]"
                                                        },
                                                        "range": [
                                                            211,
                                                            216
                                                        ],
                                                        "content": "'##'+inner_blocks[i]"
                                                    },
                                                    "range": [
                                                        206,
                                                        216
                                                    ],
                                                    "content": "inner_blocks[i]='##'+inner_blocks[i]"
                                                },
                                                "range": [
                                                    206,
                                                    216
                                                ],
                                                "content": "inner_blocks[i]='##'+inner_blocks[i]"
                                            },
                                            "alternate": null,
                                            "content": "if inner_blocks[i][0]!='#':\n"
                                        }
                                    ],
                                    "content": ":\nif inner_blocks[i][0]!='#':\ninner_blocks[i]='##'+inner_blocks[i]\n"
                                }
                            ],
                            "content": "for i in range(1,len(inner_blocks)):\nif inner_blocks[i][0]!='#':\ninner_blocks[i]='##'+inner_blocks[i]\n"
                        },
                        {
                            "type": "VariableDeclaration",
                            "kind": "=",
                            "range": [
                                218,
                                226
                            ],
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "inner_blocks",
                                        "range": [
                                            218,
                                            230
                                        ],
                                        "content": "inner_blocks=''.join(inner_blocks)\n\n#Replacing the"
                                    },
                                    "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "MemberExpression",
                                            "object": {
                                                "type": "Literal",
                                                "value": "''",
                                                "range": [
                                                    220,
                                                    222
                                                ],
                                                "content": "''.join"
                                            },
                                            "property": {
                                                "type": "Identifier",
                                                "name": "join",
                                                "range": [
                                                    222,
                                                    226
                                                ],
                                                "content": "join(inner_blocks)\n"
                                            },
                                            "computed": false,
                                            "range": [
                                                220,
                                                226
                                            ],
                                            "content": "''.join(inner_blocks)\n"
                                        },
                                        "arguments": [
                                            {
                                                "type": "Identifier",
                                                "name": "inner_blocks",
                                                "range": [
                                                    224,
                                                    236
                                                ],
                                                "content": "inner_blocks)\n\n#Replacing the non-sorted libraries by the"
                                            }
                                        ],
                                        "range": [
                                            220,
                                            236
                                        ],
                                        "content": "''.join(inner_blocks)\n\n#Replacing the non-sorted libraries by the"
                                    },
                                    "range": [
                                        218,
                                        236
                                    ],
                                    "content": "inner_blocks=''.join(inner_blocks)\n\n#Replacing the non-sorted libraries by the"
                                }
                            ],
                            "content": "inner_blocks=''.join(inner_blocks)\n"
                        },
                        {
                            "type": "Comment",
                            "value": "Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file",
                            "range": [
                                228,
                                246
                            ],
                            "content": "#Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "MemberExpression",
                                    "object": {
                                        "type": "Identifier",
                                        "name": "blocks",
                                        "range": [
                                            247,
                                            253
                                        ],
                                        "content": "blocks[0]=inner_blocks\n"
                                    },
                                    "property": {
                                        "type": "Literal",
                                        "value": "0",
                                        "range": [
                                            249,
                                            250
                                        ],
                                        "content": "0]"
                                    },
                                    "computed": true,
                                    "range": [
                                        247,
                                        250
                                    ],
                                    "content": "blocks[0]"
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "inner_blocks",
                                    "range": [
                                        252,
                                        264
                                    ],
                                    "content": "inner_blocks\nfinal_README=table_of_contents+'- - -'+''.join(blocks"
                                },
                                "range": [
                                    247,
                                    264
                                ],
                                "content": "blocks[0]=inner_blocks\nfinal_README=table_of_contents+'- - -'+''.join(blocks"
                            },
                            "range": [
                                247,
                                253
                            ],
                            "content": "blocks[0]=inner_blocks\n"
                        },
                        {
                            "type": "VariableDeclaration",
                            "kind": "=",
                            "range": [
                                254,
                                266
                            ],
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "final_README",
                                        "range": [
                                            254,
                                            266
                                        ],
                                        "content": "final_README=table_of_contents+'- - -'+''.join(blocks)\n"
                                    },
                                    "init": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                                "type": "Identifier",
                                                "name": "table_of_contents",
                                                "range": [
                                                    256,
                                                    272
                                                ],
                                                "content": "table_of_contents+'- - -'+''.join(blocks)\n\nwith open('README.md',"
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": "'- - -'",
                                                "range": [
                                                    258,
                                                    266
                                                ],
                                                "content": "'- - -'+''.join(blocks)\n"
                                            },
                                            "range": [
                                                256,
                                                266
                                            ],
                                            "content": "table_of_contents+'- - -'+''.join(blocks)\n"
                                        },
                                        "right": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "object": {
                                                    "type": "Literal",
                                                    "value": "''",
                                                    "range": [
                                                        260,
                                                        262
                                                    ],
                                                    "content": "''.join"
                                                },
                                                "property": {
                                                    "type": "Identifier",
                                                    "name": "join",
                                                    "range": [
                                                        262,
                                                        266
                                                    ],
                                                    "content": "join(blocks)\n"
                                                },
                                                "computed": false,
                                                "range": [
                                                    260,
                                                    266
                                                ],
                                                "content": "''.join(blocks)\n"
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "blocks",
                                                    "range": [
                                                        264,
                                                        270
                                                    ],
                                                    "content": "blocks)\n\nwith open("
                                                }
                                            ],
                                            "range": [
                                                260,
                                                270
                                            ],
                                            "content": "''.join(blocks)\n\nwith open("
                                        },
                                        "range": [
                                            256,
                                            270
                                        ],
                                        "content": "table_of_contents+'- - -'+''.join(blocks)\n\nwith open("
                                    },
                                    "range": [
                                        254,
                                        270
                                    ],
                                    "content": "final_README=table_of_contents+'- - -'+''.join(blocks)\n\nwith open("
                                }
                            ],
                            "content": "final_README=table_of_contents+'- - -'+''.join(blocks)\n"
                        },
                        {
                            "type": "WithStatement",
                            "range": [
                                268,
                                285
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "open",
                                        "range": [
                                            269,
                                            273
                                        ],
                                        "content": "open('README.md','w+'"
                                    },
                                    "arguments": [
                                        {
                                            "type": "Literal",
                                            "value": "'README.md'",
                                            "range": [
                                                271,
                                                281
                                            ],
                                            "content": "'README.md','w+')as sorted_file:\nsorted_file.write"
                                        },
                                        {
                                            "type": "Literal",
                                            "value": "'w+'",
                                            "range": [
                                                273,
                                                277
                                            ],
                                            "content": "'w+')as sorted_file:"
                                        }
                                    ],
                                    "range": [
                                        269,
                                        277
                                    ],
                                    "content": "open('README.md','w+')as sorted_file:"
                                },
                                {
                                    "type": "VariableDeclaration",
                                    "kind": "as",
                                    "range": [
                                        277,
                                        285
                                    ],
                                    "declarations": [
                                        {
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "sorted_file",
                                                "range": [
                                                    276,
                                                    287
                                                ],
                                                "content": "sorted_file:\nsorted_file.write(final_README)\n\ndef"
                                            },
                                            "init": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "sorted_file",
                                                        "range": [
                                                            279,
                                                            291
                                                        ],
                                                        "content": "sorted_file.write(final_README)\n\ndef main():"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "write",
                                                        "range": [
                                                            281,
                                                            286
                                                        ],
                                                        "content": "write(final_README)\n\n"
                                                    },
                                                    "computed": false,
                                                    "range": [
                                                        279,
                                                        286
                                                    ],
                                                    "content": "sorted_file.write(final_README)\n\n"
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "final_README",
                                                        "range": [
                                                            283,
                                                            295
                                                        ],
                                                        "content": "final_README)\n\ndef main():\n#First,"
                                                    }
                                                ],
                                                "range": [
                                                    279,
                                                    295
                                                ],
                                                "content": "sorted_file.write(final_README)\n\ndef main():\n#First,"
                                            },
                                            "range": [
                                                276,
                                                295
                                            ],
                                            "content": "sorted_file:\nsorted_file.write(final_README)\n\ndef main():\n#First,"
                                        }
                                    ],
                                    "content": ":\nsorted_file.write(final_README)\n"
                                }
                            ],
                            "content": "with open('README.md','w+')as sorted_file:\nsorted_file.write(final_README)\n"
                        }
                    ],
                    "content": "\n#First,we load the current README into memory\nwith open('README.md','r')as read_me_file:\nread_me=read_me_file.read()\n\n#Separating the 'table of contents' from the contents(blocks)\ntable_of_contents=''.join(read_me.split('- - -')[0])\nblocks=''.join(read_me.split('- - -')[1]).split('\\n# ')\nfor i in range(len(blocks)):\nif i==0:\nblocks[i]=blocks[i]+'\\n'\nelse:\nblocks[i]='# '+blocks[i]+'\\n'\n\n#Sorting the libraries\ninner_blocks=sorted(blocks[0].split('##'))\nfor i in range(1,len(inner_blocks)):\nif inner_blocks[i][0]!='#':\ninner_blocks[i]='##'+inner_blocks[i]\ninner_blocks=''.join(inner_blocks)\n\n#Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file\nblocks[0]=inner_blocks\nfinal_README=table_of_contents+'- - -'+''.join(blocks)\n\nwith open('README.md','w+')as sorted_file:\nsorted_file.write(final_README)\n\n"
                }
            ],
            "content": "def sort_blocks():\n#First,we load the current README into memory\nwith open('README.md','r')as read_me_file:\nread_me=read_me_file.read()\n\n#Separating the 'table of contents' from the contents(blocks)\ntable_of_contents=''.join(read_me.split('- - -')[0])\nblocks=''.join(read_me.split('- - -')[1]).split('\\n# ')\nfor i in range(len(blocks)):\nif i==0:\nblocks[i]=blocks[i]+'\\n'\nelse:\nblocks[i]='# '+blocks[i]+'\\n'\n\n#Sorting the libraries\ninner_blocks=sorted(blocks[0].split('##'))\nfor i in range(1,len(inner_blocks)):\nif inner_blocks[i][0]!='#':\ninner_blocks[i]='##'+inner_blocks[i]\ninner_blocks=''.join(inner_blocks)\n\n#Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file\nblocks[0]=inner_blocks\nfinal_README=table_of_contents+'- - -'+''.join(blocks)\n\nwith open('README.md','w+')as sorted_file:\nsorted_file.write(final_README)\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "main",
            "range": [
                287,
                577
            ],
            "children": [
                {
                    "type": "BlockStatement",
                    "range": [
                        292,
                        577
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "value": "# First, we load the current README into memory as an array of lines",
                            "range": [
                                293,
                                308
                            ],
                            "content": "#First,we load the current README into memory as an array of lines\n"
                        },
                        {
                            "type": "WithStatement",
                            "range": [
                                309,
                                327
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "open",
                                        "range": [
                                            310,
                                            314
                                        ],
                                        "content": "open('README.md','r'"
                                    },
                                    "arguments": [
                                        {
                                            "type": "Literal",
                                            "value": "'README.md'",
                                            "range": [
                                                312,
                                                322
                                            ],
                                            "content": "'README.md','r')as read_me_file:\nread_me=read_me_file"
                                        },
                                        {
                                            "type": "Literal",
                                            "value": "'r'",
                                            "range": [
                                                314,
                                                316
                                            ],
                                            "content": "'r')as"
                                        }
                                    ],
                                    "range": [
                                        310,
                                        316
                                    ],
                                    "content": "open('README.md','r')as"
                                },
                                {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                        {
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "read_me",
                                                "range": [
                                                    320,
                                                    327
                                                ],
                                                "content": "read_me=read_me_file.readlines()\n"
                                            },
                                            "init": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "read_me_file",
                                                        "range": [
                                                            322,
                                                            333
                                                        ],
                                                        "content": "read_me_file.readlines()\n\n#Then we cluster the"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "readlines",
                                                        "range": [
                                                            324,
                                                            333
                                                        ],
                                                        "content": "readlines()\n\n#Then we cluster the"
                                                    },
                                                    "computed": false,
                                                    "range": [
                                                        322,
                                                        333
                                                    ],
                                                    "content": "read_me_file.readlines()\n\n#Then we cluster the"
                                                },
                                                "arguments": [],
                                                "range": [
                                                    322,
                                                    335
                                                ],
                                                "content": "read_me_file.readlines()\n\n#Then we cluster the lines together"
                                            },
                                            "range": [
                                                320,
                                                335
                                            ],
                                            "content": "read_me=read_me_file.readlines()\n\n#Then we cluster the lines together"
                                        }
                                    ],
                                    "kind": "var",
                                    "range": [
                                        320,
                                        335
                                    ],
                                    "content": "read_me=read_me_file.readlines()\n\n#Then we cluster the lines together"
                                }
                            ],
                            "content": "with open('README.md','r')as read_me_file:\nread_me=read_me_file.readlines()\n"
                        },
                        {
                            "type": "Comment",
                            "value": "# Then we cluster the lines together as blocks",
                            "range": [
                                329,
                                338
                            ],
                            "content": "#Then we cluster the lines together as blocks\n"
                        },
                        {
                            "type": "Comment",
                            "value": "# Each block represents a collection of lines that should be sorted",
                            "range": [
                                339,
                                351
                            ],
                            "content": "#Each block represents a collection of lines that should be sorted\n"
                        },
                        {
                            "type": "Comment",
                            "value": "# This was done by assuming only links ([...](...)) are meant to be sorted",
                            "range": [
                                352,
                                377
                            ],
                            "content": "#This was done by assuming only links([...](...))are meant to be sorted\n"
                        },
                        {
                            "type": "Comment",
                            "value": "# Clustering is done by indentation",
                            "range": [
                                378,
                                384
                            ],
                            "content": "#Clustering is done by indentation\n"
                        },
                        {
                            "type": "VariableDeclaration",
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "blocks",
                                        "range": [
                                            385,
                                            390
                                        ],
                                        "content": "blocks=[]\nlast_indent"
                                    },
                                    "init": {
                                        "type": "ArrayExpression",
                                        "elements": [],
                                        "range": [
                                            387,
                                            389
                                        ],
                                        "content": "[]\n"
                                    },
                                    "range": [
                                        385,
                                        389
                                    ],
                                    "content": "blocks=[]\n"
                                }
                            ],
                            "kind": "var",
                            "range": [
                                385,
                                389
                            ],
                            "content": "blocks=[]\n"
                        },
                        {
                            "type": "VariableDeclaration",
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "last_indent",
                                        "range": [
                                            390,
                                            401
                                        ],
                                        "content": "last_indent=None\nfor line in read_me:\ns_line="
                                    },
                                    "init": {
                                        "type": "Literal",
                                        "value": "None",
                                        "range": [
                                            392,
                                            396
                                        ],
                                        "content": "None\nfor line in"
                                    },
                                    "range": [
                                        390,
                                        396
                                    ],
                                    "content": "last_indent=None\nfor line in"
                                }
                            ],
                            "kind": "var",
                            "range": [
                                390,
                                396
                            ],
                            "content": "last_indent=None\nfor line in"
                        },
                        {
                            "type": "ForStatement",
                            "range": [
                                394,
                                492
                            ],
                            "children": [
                                {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                        {
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "line",
                                                "range": [
                                                    395,
                                                    399
                                                ],
                                                "content": "line in read_me:\n"
                                            },
                                            "init": null,
                                            "range": [
                                                395,
                                                399
                                            ],
                                            "content": "line in read_me:\n"
                                        }
                                    ],
                                    "kind": "var",
                                    "range": [
                                        395,
                                        399
                                    ],
                                    "content": "line in read_me:\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "read_me",
                                    "range": [
                                        397,
                                        404
                                    ],
                                    "content": "read_me:\ns_line=line.lstrip"
                                },
                                {
                                    "type": "BlockStatement",
                                    "range": [
                                        399,
                                        492
                                    ],
                                    "children": [
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "s_line",
                                                        "range": [
                                                            400,
                                                            406
                                                        ],
                                                        "content": "s_line=line.lstrip()"
                                                    },
                                                    "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "line",
                                                                "range": [
                                                                    402,
                                                                    406
                                                                ],
                                                                "content": "line.lstrip()"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "lstrip",
                                                                "range": [
                                                                    404,
                                                                    410
                                                                ],
                                                                "content": "lstrip()\nindent=len"
                                                            },
                                                            "computed": false,
                                                            "range": [
                                                                402,
                                                                410
                                                            ],
                                                            "content": "line.lstrip()\nindent=len"
                                                        },
                                                        "arguments": [],
                                                        "range": [
                                                            402,
                                                            412
                                                        ],
                                                        "content": "line.lstrip()\nindent=len(line"
                                                    },
                                                    "range": [
                                                        400,
                                                        412
                                                    ],
                                                    "content": "s_line=line.lstrip()\nindent=len(line"
                                                }
                                            ],
                                            "kind": "var",
                                            "range": [
                                                400,
                                                412
                                            ],
                                            "content": "s_line=line.lstrip()\nindent=len(line"
                                        },
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "indent",
                                                        "range": [
                                                            408,
                                                            414
                                                        ],
                                                        "content": "indent=len(line)-"
                                                    },
                                                    "init": {
                                                        "type": "BinaryExpression",
                                                        "operator": "-",
                                                        "left": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "len",
                                                                "range": [
                                                                    410,
                                                                    413
                                                                ],
                                                                "content": "len(line)"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "line",
                                                                    "range": [
                                                                        412,
                                                                        416
                                                                    ],
                                                                    "content": "line)-len("
                                                                }
                                                            ],
                                                            "range": [
                                                                410,
                                                                417
                                                            ],
                                                            "content": "len(line)-len(s_line"
                                                        },
                                                        "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "len",
                                                                "range": [
                                                                    415,
                                                                    418
                                                                ],
                                                                "content": "len(s_line)"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "s_line",
                                                                    "range": [
                                                                        417,
                                                                        423
                                                                    ],
                                                                    "content": "s_line)\n\nif any("
                                                                }
                                                            ],
                                                            "range": [
                                                                415,
                                                                424
                                                            ],
                                                            "content": "len(s_line)\n\nif any(["
                                                        },
                                                        "range": [
                                                            410,
                                                            424
                                                        ],
                                                        "content": "len(line)-len(s_line)\n\nif any(["
                                                    },
                                                    "range": [
                                                        408,
                                                        424
                                                    ],
                                                    "content": "indent=len(line)-len(s_line)\n\nif any(["
                                                }
                                            ],
                                            "kind": "var",
                                            "range": [
                                                408,
                                                424
                                            ],
                                            "content": "indent=len(line)-len(s_line)\n\nif any(["
                                        },
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "Identifier",
                                                    "name": "any",
                                                    "range": [
                                                        422,
                                                        425
                                                    ],
                                                    "content": "any([s_line"
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "ArrayExpression",
                                                        "elements": [
                                                            {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "s_line",
                                                                        "range": [
                                                                            425,
                                                                            430
                                                                        ],
                                                                        "content": "s_line.startswith(s)"
                                                                    },
                                                                    "property": {
                                                                        "type": "Identifier",
                                                                        "name": "startswith",
                                                                        "range": [
                                                                            427,
                                                                            437
                                                                        ],
                                                                        "content": "startswith(s)for s in['* [','- ['"
                                                                    },
                                                                    "computed": false,
                                                                    "range": [
                                                                        425,
                                                                        437
                                                                    ],
                                                                    "content": "s_line.startswith(s)for s in['* [','- ['"
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "Identifier",
                                                                        "name": "s",
                                                                        "range": [
                                                                            429,
                                                                            430
                                                                        ],
                                                                        "content": "s)"
                                                                    }
                                                                ],
                                                                "range": [
                                                                    425,
                                                                    431
                                                                ],
                                                                "content": "s_line.startswith(s)for"
                                                            }
                                                        ],
                                                        "range": [
                                                            424,
                                                            439
                                                        ],
                                                        "content": "[s_line.startswith(s)for s in['* [','- [']]"
                                                    }
                                                ],
                                                "range": [
                                                    422,
                                                    440
                                                ],
                                                "content": "any([s_line.startswith(s)for s in['* [','- [']])"
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "range": [
                                                    441,
                                                    472
                                                ],
                                                "children": [
                                                    {
                                                        "type": "IfStatement",
                                                        "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "==",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "indent",
                                                                "range": [
                                                                    444,
                                                                    450
                                                                ],
                                                                "content": "indent==last_indent:\nblocks"
                                                            },
                                                            "right": {
                                                                "type": "Identifier",
                                                                "name": "last_indent",
                                                                "range": [
                                                                    446,
                                                                    456
                                                                ],
                                                                "content": "=last_indent:\nblocks[-1].append"
                                                            },
                                                            "range": [
                                                                444,
                                                                456
                                                            ],
                                                            "content": "indent==last_indent:\nblocks[-1].append"
                                                        },
                                                        "consequent": {
                                                            "type": "BlockStatement",
                                                            "range": [
                                                                448,
                                                                460
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "blocks",
                                                                                    "range": [
                                                                                        450,
                                                                                        455
                                                                                    ],
                                                                                    "content": "blocks[-1]."
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": "-1",
                                                                                    "range": [
                                                                                        452,
                                                                                        454
                                                                                    ],
                                                                                    "content": "-1]"
                                                                                },
                                                                                "computed": true,
                                                                                "range": [
                                                                                    450,
                                                                                    455
                                                                                ],
                                                                                "content": "blocks[-1]."
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "append",
                                                                                "range": [
                                                                                    456,
                                                                                    462
                                                                                ],
                                                                                "content": "append(line)\nelse:"
                                                                            },
                                                                            "computed": false,
                                                                            "range": [
                                                                                450,
                                                                                462
                                                                            ],
                                                                            "content": "blocks[-1].append(line)\nelse:"
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "Identifier",
                                                                                "name": "line",
                                                                                "range": [
                                                                                    458,
                                                                                    462
                                                                                ],
                                                                                "content": "line)\nelse:"
                                                                            }
                                                                        ],
                                                                        "range": [
                                                                            450,
                                                                            463
                                                                        ],
                                                                        "content": "blocks[-1].append(line)\nelse:\n"
                                                                    },
                                                                    "range": [
                                                                        450,
                                                                        463
                                                                    ],
                                                                    "content": "blocks[-1].append(line)\nelse:\n"
                                                                }
                                                            ],
                                                            "content": ":\nblocks[-1].append(line)\n"
                                                        },
                                                        "alternate": {
                                                            "type": "BlockStatement",
                                                            "range": [
                                                                462,
                                                                472
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                            "type": "MemberExpression",
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "blocks",
                                                                                "range": [
                                                                                    464,
                                                                                    469
                                                                                ],
                                                                                "content": "blocks.append([line"
                                                                            },
                                                                            "property": {
                                                                                "type": "Identifier",
                                                                                "name": "append",
                                                                                "range": [
                                                                                    466,
                                                                                    472
                                                                                ],
                                                                                "content": "append([line])\n"
                                                                            },
                                                                            "computed": false,
                                                                            "range": [
                                                                                464,
                                                                                472
                                                                            ],
                                                                            "content": "blocks.append([line])\n"
                                                                        },
                                                                        "arguments": [
                                                                            {
                                                                                "type": "ArrayExpression",
                                                                                "elements": [
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "line",
                                                                                        "range": [
                                                                                            469,
                                                                                            473
                                                                                        ],
                                                                                        "content": "line])\nlast_indent"
                                                                                    }
                                                                                ],
                                                                                "range": [
                                                                                    468,
                                                                                    474
                                                                                ],
                                                                                "content": "[line])\nlast_indent="
                                                                            }
                                                                        ],
                                                                        "range": [
                                                                            464,
                                                                            475
                                                                        ],
                                                                        "content": "blocks.append([line])\nlast_indent=indent"
                                                                    },
                                                                    "range": [
                                                                        464,
                                                                        475
                                                                    ],
                                                                    "content": "blocks.append([line])\nlast_indent=indent"
                                                                }
                                                            ],
                                                            "content": ":\nblocks.append([line])\n"
                                                        },
                                                        "range": [
                                                            444,
                                                            475
                                                        ],
                                                        "content": "indent==last_indent:\nblocks[-1].append(line)\nelse:\nblocks.append([line])\nlast_indent=indent"
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "last_indent",
                                                                "range": [
                                                                    473,
                                                                    483
                                                                ],
                                                                "content": "last_indent=indent\nelse:\nblocks.append("
                                                            },
                                                            "right": {
                                                                "type": "Identifier",
                                                                "name": "indent",
                                                                "range": [
                                                                    475,
                                                                    480
                                                                ],
                                                                "content": "indent\nelse:\nblocks"
                                                            },
                                                            "range": [
                                                                473,
                                                                480
                                                            ],
                                                            "content": "last_indent=indent\nelse:\nblocks"
                                                        },
                                                        "range": [
                                                            473,
                                                            480
                                                        ],
                                                        "content": "last_indent=indent\nelse:\nblocks"
                                                    }
                                                ],
                                                "content": ":\nif indent==last_indent:\nblocks[-1].append(line)\nelse:\nblocks.append([line])\n"
                                            },
                                            "alternate": {
                                                "type": "BlockStatement",
                                                "range": [
                                                    478,
                                                    488
                                                ],
                                                "children": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "blocks",
                                                                    "range": [
                                                                        480,
                                                                        485
                                                                    ],
                                                                    "content": "blocks.append([line"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "append",
                                                                    "range": [
                                                                        482,
                                                                        488
                                                                    ],
                                                                    "content": "append([line])\n"
                                                                },
                                                                "computed": false,
                                                                "range": [
                                                                    480,
                                                                    488
                                                                ],
                                                                "content": "blocks.append([line])\n"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "ArrayExpression",
                                                                    "elements": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "line",
                                                                            "range": [
                                                                                485,
                                                                                489
                                                                            ],
                                                                            "content": "line])\nlast_indent"
                                                                        }
                                                                    ],
                                                                    "range": [
                                                                        484,
                                                                        490
                                                                    ],
                                                                    "content": "[line])\nlast_indent="
                                                                }
                                                            ],
                                                            "range": [
                                                                480,
                                                                491
                                                            ],
                                                            "content": "blocks.append([line])\nlast_indent=None"
                                                        },
                                                        "range": [
                                                            480,
                                                            491
                                                        ],
                                                        "content": "blocks.append([line])\nlast_indent=None"
                                                    },
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "last_indent",
                                                                "range": [
                                                                    489,
                                                                    499
                                                                ],
                                                                "content": "last_indent=None\n\nwith open('README.md','w+'"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": "None",
                                                                "range": [
                                                                    491,
                                                                    495
                                                                ],
                                                                "content": "None\n\nwith open"
                                                            },
                                                            "range": [
                                                                489,
                                                                495
                                                            ],
                                                            "content": "last_indent=None\n\nwith open"
                                                        },
                                                        "range": [
                                                            489,
                                                            495
                                                        ],
                                                        "content": "last_indent=None\n\nwith open"
                                                    }
                                                ],
                                                "content": ":\nblocks.append([line])\n"
                                            },
                                            "range": [
                                                422,
                                                495
                                            ],
                                            "content": "any([s_line.startswith(s)for s in['* [','- [']]):\nif indent==last_indent:\nblocks[-1].append(line)\nelse:\nblocks.append([line])\nlast_indent=indent\nelse:\nblocks.append([line])\nlast_indent=None\n\nwith open"
                                        }
                                    ],
                                    "content": "\ns_line=line.lstrip()\nindent=len(line)-len(s_line)\n\nif any([s_line.startswith(s)for s in['* [','- [']]):\nif indent==last_indent:\nblocks[-1].append(line)\nelse:\nblocks.append([line])\nlast_indent=indent\nelse:\nblocks.append([line])\nlast_indent=None\n"
                                }
                            ],
                            "content": "for line in read_me:\ns_line=line.lstrip()\nindent=len(line)-len(s_line)\n\nif any([s_line.startswith(s)for s in['* [','- [']]):\nif indent==last_indent:\nblocks[-1].append(line)\nelse:\nblocks.append([line])\nlast_indent=indent\nelse:\nblocks.append([line])\nlast_indent=None\n"
                        },
                        {
                            "type": "WithStatement",
                            "range": [
                                494,
                                564
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "open",
                                        "range": [
                                            495,
                                            499
                                        ],
                                        "content": "open('README.md','w+'"
                                    },
                                    "arguments": [
                                        {
                                            "type": "Literal",
                                            "value": "'README.md'",
                                            "range": [
                                                497,
                                                507
                                            ],
                                            "content": "'README.md','w+')as sorted_file:\n#Then all"
                                        },
                                        {
                                            "type": "Literal",
                                            "value": "'w+'",
                                            "range": [
                                                499,
                                                503
                                            ],
                                            "content": "'w+')as sorted_file:"
                                        }
                                    ],
                                    "range": [
                                        495,
                                        503
                                    ],
                                    "content": "open('README.md','w+')as sorted_file:"
                                },
                                {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                        {
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "sorted_file",
                                                "range": [
                                                    502,
                                                    513
                                                ],
                                                "content": "sorted_file:\n#Then all of the blocks are sorted individually"
                                            },
                                            "init": null,
                                            "range": [
                                                502,
                                                513
                                            ],
                                            "content": "sorted_file:\n#Then all of the blocks are sorted individually"
                                        }
                                    ],
                                    "kind": "var",
                                    "range": [
                                        502,
                                        513
                                    ],
                                    "content": "sorted_file:\n#Then all of the blocks are sorted individually"
                                },
                                {
                                    "type": "BlockStatement",
                                    "range": [
                                        504,
                                        564
                                    ],
                                    "children": [
                                        {
                                            "type": "Comment",
                                            "value": "# Then all of the blocks are sorted individually",
                                            "range": [
                                                505,
                                                514
                                            ],
                                            "content": "#Then all of the blocks are sorted individually\n"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "blocks",
                                                    "range": [
                                                        515,
                                                        520
                                                    ],
                                                    "content": "blocks=[\n''."
                                                },
                                                "right": {
                                                    "type": "ArrayExpression",
                                                    "elements": [
                                                        {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "object": {
                                                                    "type": "Literal",
                                                                    "value": "''",
                                                                    "range": [
                                                                        519,
                                                                        521
                                                                    ],
                                                                    "content": "''.join"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "join",
                                                                    "range": [
                                                                        521,
                                                                        525
                                                                    ],
                                                                    "content": "join(sorted(block"
                                                                },
                                                                "computed": false,
                                                                "range": [
                                                                    519,
                                                                    525
                                                                ],
                                                                "content": "''.join(sorted(block"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "Identifier",
                                                                        "name": "sorted",
                                                                        "range": [
                                                                            523,
                                                                            529
                                                                        ],
                                                                        "content": "sorted(block,key=str"
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "block",
                                                                            "range": [
                                                                                525,
                                                                                529
                                                                            ],
                                                                            "content": "block,key=str"
                                                                        },
                                                                        {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "Identifier",
                                                                                "name": "key",
                                                                                "range": [
                                                                                    527,
                                                                                    530
                                                                                ],
                                                                                "content": "key=str."
                                                                            },
                                                                            "right": {
                                                                                "type": "MemberExpression",
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "str",
                                                                                    "range": [
                                                                                        529,
                                                                                        532
                                                                                    ],
                                                                                    "content": "str.lower)"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "lower",
                                                                                    "range": [
                                                                                        531,
                                                                                        536
                                                                                    ],
                                                                                    "content": "lower))for block in"
                                                                                },
                                                                                "computed": false,
                                                                                "range": [
                                                                                    529,
                                                                                    536
                                                                                ],
                                                                                "content": "str.lower))for block in"
                                                                            },
                                                                            "range": [
                                                                                527,
                                                                                536
                                                                            ],
                                                                            "content": "key=str.lower))for block in"
                                                                        }
                                                                    ],
                                                                    "range": [
                                                                        523,
                                                                        537
                                                                    ],
                                                                    "content": "sorted(block,key=str.lower))for block in blocks"
                                                                }
                                                            ],
                                                            "range": [
                                                                519,
                                                                538
                                                            ],
                                                            "content": "''.join(sorted(block,key=str.lower))for block in blocks\n"
                                                        }
                                                    ],
                                                    "range": [
                                                        518,
                                                        539
                                                    ],
                                                    "content": "\n''.join(sorted(block,key=str.lower))for block in blocks\n]"
                                                },
                                                "range": [
                                                    515,
                                                    539
                                                ],
                                                "content": "blocks=[\n''.join(sorted(block,key=str.lower))for block in blocks\n]"
                                            },
                                            "range": [
                                                515,
                                                539
                                            ],
                                            "content": "blocks=[\n''.join(sorted(block,key=str.lower))for block in blocks\n]"
                                        },
                                        {
                                            "type": "Comment",
                                            "value": "# And the result is written back to README.md",
                                            "range": [
                                                541,
                                                552
                                            ],
                                            "content": "#And the result is written back to README.md\n"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "sorted_file",
                                                        "range": [
                                                            553,
                                                            563
                                                        ],
                                                        "content": "sorted_file.write(''.join(blocks))"
                                                    },
                                                    "property": {
                                                        "type": "Identifier",
                                                        "name": "write",
                                                        "range": [
                                                            555,
                                                            560
                                                        ],
                                                        "content": "write(''.join("
                                                    },
                                                    "computed": false,
                                                    "range": [
                                                        553,
                                                        560
                                                    ],
                                                    "content": "sorted_file.write(''.join("
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "object": {
                                                                "type": "Literal",
                                                                "value": "''",
                                                                "range": [
                                                                    557,
                                                                    559
                                                                ],
                                                                "content": "''.join"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "join",
                                                                "range": [
                                                                    559,
                                                                    563
                                                                ],
                                                                "content": "join(blocks))"
                                                            },
                                                            "computed": false,
                                                            "range": [
                                                                557,
                                                                563
                                                            ],
                                                            "content": "''.join(blocks))"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Identifier",
                                                                "name": "blocks",
                                                                "range": [
                                                                    561,
                                                                    566
                                                                ],
                                                                "content": "blocks))\n\n#"
                                                            }
                                                        ],
                                                        "range": [
                                                            557,
                                                            567
                                                        ],
                                                        "content": "''.join(blocks))\n\n#Then"
                                                    }
                                                ],
                                                "range": [
                                                    553,
                                                    567
                                                ],
                                                "content": "sorted_file.write(''.join(blocks))\n\n#Then"
                                            },
                                            "range": [
                                                553,
                                                567
                                            ],
                                            "content": "sorted_file.write(''.join(blocks))\n\n#Then"
                                        }
                                    ],
                                    "content": "\n#Then all of the blocks are sorted individually\nblocks=[\n''.join(sorted(block,key=str.lower))for block in blocks\n]\n#And the result is written back to README.md\nsorted_file.write(''.join(blocks))\n"
                                }
                            ],
                            "content": "with open('README.md','w+')as sorted_file:\n#Then all of the blocks are sorted individually\nblocks=[\n''.join(sorted(block,key=str.lower))for block in blocks\n]\n#And the result is written back to README.md\nsorted_file.write(''.join(blocks))\n"
                        },
                        {
                            "type": "Comment",
                            "value": "# Then we call the sorting method",
                            "range": [
                                566,
                                577
                            ],
                            "content": "#Then we call the sorting method\nsort_blocks()\n"
                        },
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "Identifier",
                                    "name": "sort_blocks",
                                    "range": [
                                        574,
                                        584
                                    ],
                                    "content": "sort_blocks()\n\n\nif __name__==\"__main__\""
                                },
                                "arguments": [],
                                "range": [
                                    574,
                                    586
                                ],
                                "content": "sort_blocks()\n\n\nif __name__==\"__main__\":\n"
                            },
                            "range": [
                                574,
                                586
                            ],
                            "content": "sort_blocks()\n\n\nif __name__==\"__main__\":\n"
                        }
                    ],
                    "content": "\n#First,we load the current README into memory as an array of lines\nwith open('README.md','r')as read_me_file:\nread_me=read_me_file.readlines()\n\n#Then we cluster the lines together as blocks\n#Each block represents a collection of lines that should be sorted\n#This was done by assuming only links([...](...))are meant to be sorted\n#Clustering is done by indentation\nblocks=[]\nlast_indent=None\nfor line in read_me:\ns_line=line.lstrip()\nindent=len(line)-len(s_line)\n\nif any([s_line.startswith(s)for s in['* [','- [']]):\nif indent==last_indent:\nblocks[-1].append(line)\nelse:\nblocks.append([line])\nlast_indent=indent\nelse:\nblocks.append([line])\nlast_indent=None\n\nwith open('README.md','w+')as sorted_file:\n#Then all of the blocks are sorted individually\nblocks=[\n''.join(sorted(block,key=str.lower))for block in blocks\n]\n#And the result is written back to README.md\nsorted_file.write(''.join(blocks))\n\n#Then we call the sorting method\nsort_blocks()\n"
                }
            ],
            "content": "def main():\n#First,we load the current README into memory as an array of lines\nwith open('README.md','r')as read_me_file:\nread_me=read_me_file.readlines()\n\n#Then we cluster the lines together as blocks\n#Each block represents a collection of lines that should be sorted\n#This was done by assuming only links([...](...))are meant to be sorted\n#Clustering is done by indentation\nblocks=[]\nlast_indent=None\nfor line in read_me:\ns_line=line.lstrip()\nindent=len(line)-len(s_line)\n\nif any([s_line.startswith(s)for s in['* [','- [']]):\nif indent==last_indent:\nblocks[-1].append(line)\nelse:\nblocks.append([line])\nlast_indent=indent\nelse:\nblocks.append([line])\nlast_indent=None\n\nwith open('README.md','w+')as sorted_file:\n#Then all of the blocks are sorted individually\nblocks=[\n''.join(sorted(block,key=str.lower))for block in blocks\n]\n#And the result is written back to README.md\nsorted_file.write(''.join(blocks))\n\n#Then we call the sorting method\nsort_blocks()\n"
        },
        {
            "type": "IfStatement",
            "name": "",
            "range": [
                580,
                586
            ],
            "children": [
                {
                    "type": "BinaryExpression",
                    "name": "",
                    "range": [
                        580,
                        584
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "__name__",
                            "range": [
                                581,
                                581
                            ],
                            "children": [],
                            "content": "__name__"
                        },
                        {
                            "type": "Operator",
                            "name": "==",
                            "range": [
                                582,
                                583
                            ],
                            "children": [],
                            "content": "=="
                        },
                        {
                            "type": "Literal",
                            "name": "\"__main__\"",
                            "range": [
                                584,
                                584
                            ],
                            "children": [],
                            "content": "\"__main__\""
                        }
                    ],
                    "content": "if __name__==\"__main__\""
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        585,
                        586
                    ],
                    "children": [],
                    "content": ":\n"
                }
            ],
            "content": "if __name__==\"__main__\":\n"
        },
        {
            "type": "CallExpression",
            "name": "main",
            "range": [
                587,
                589
            ],
            "children": [],
            "content": "main()"
        }
    ],
    "content": "#!/usr/bin/env python\n#coding:utf-8\n\n\"\"\" \\n     The approach taken is explained below. I decided to do it simply. \\n     Initially I was considering parsing the data into some sort of \\n     structure and then generating an appropriate README. I am still \\n     considering doing it - but for now this should work. The only issue \\n     I see is that it only sorts the entries at the lowest level, and that \\n     the order of the top-level contents do not match the order of the actual \\n     entries. \\n  \\n     This could be extended by having nested blocks, sorting them recursively \\n     and flattening the end structure into a list of lines. Revision 2 maybe ^.^. \\n \"\"\"\n\ndef sort_blocks():\n#First,we load the current README into memory\nwith open('README.md','r')as read_me_file:\nread_me=read_me_file.read()\n\n#Separating the 'table of contents' from the contents(blocks)\ntable_of_contents=''.join(read_me.split('- - -')[0])\nblocks=''.join(read_me.split('- - -')[1]).split('\\n# ')\nfor i in range(len(blocks)):\nif i==0:\nblocks[i]=blocks[i]+'\\n'\nelse:\nblocks[i]='# '+blocks[i]+'\\n'\n\n#Sorting the libraries\ninner_blocks=sorted(blocks[0].split('##'))\nfor i in range(1,len(inner_blocks)):\nif inner_blocks[i][0]!='#':\ninner_blocks[i]='##'+inner_blocks[i]\ninner_blocks=''.join(inner_blocks)\n\n#Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file\nblocks[0]=inner_blocks\nfinal_README=table_of_contents+'- - -'+''.join(blocks)\n\nwith open('README.md','w+')as sorted_file:\nsorted_file.write(final_README)\n\ndef main():\n#First,we load the current README into memory as an array of lines\nwith open('README.md','r')as read_me_file:\nread_me=read_me_file.readlines()\n\n#Then we cluster the lines together as blocks\n#Each block represents a collection of lines that should be sorted\n#This was done by assuming only links([...](...))are meant to be sorted\n#Clustering is done by indentation\nblocks=[]\nlast_indent=None\nfor line in read_me:\ns_line=line.lstrip()\nindent=len(line)-len(s_line)\n\nif any([s_line.startswith(s)for s in['* [','- [']]):\nif indent==last_indent:\nblocks[-1].append(line)\nelse:\nblocks.append([line])\nlast_indent=indent\nelse:\nblocks.append([line])\nlast_indent=None\n\nwith open('README.md','w+')as sorted_file:\n#Then all of the blocks are sorted individually\nblocks=[\n''.join(sorted(block,key=str.lower))for block in blocks\n]\n#And the result is written back to README.md\nsorted_file.write(''.join(blocks))\n\n#Then we call the sorting method\nsort_blocks()\n\n\nif __name__==\"__main__\":\nmain()\n"
}