{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        226
    ],
    "children": [
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                0,
                2
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "json",
                    "range": [
                        0,
                        1
                    ],
                    "children": [],
                    "content": "import json"
                }
            ],
            "content": "import json\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                3,
                7
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "Optional",
                    "range": [
                        4,
                        6
                    ],
                    "children": [],
                    "content": "typing import Optional"
                }
            ],
            "content": "from typing import Optional\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                9,
                15
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "Fernet",
                    "range": [
                        10,
                        14
                    ],
                    "children": [],
                    "content": "cryptography.fernet import Fernet"
                }
            ],
            "content": "from cryptography.fernet import Fernet\n"
        },
        {
            "type": "ImportDeclaration",
            "name": "",
            "range": [
                17,
                25
            ],
            "children": [
                {
                    "type": "ImportSpecifier",
                    "name": "Settings",
                    "range": [
                        18,
                        24
                    ],
                    "children": [],
                    "content": "backend.util.settings import Settings"
                }
            ],
            "content": "from backend.util.settings import Settings\n"
        },
        {
            "type": "VariableDeclaration",
            "name": "ENCRYPTION_KEY",
            "range": [
                27,
                36
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        28,
                        36
                    ],
                    "children": [
                        {
                            "type": "MemberExpression",
                            "name": "",
                            "range": [
                                29,
                                35
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "Settings",
                                    "range": [
                                        29,
                                        31
                                    ],
                                    "children": [],
                                    "content": "Settings()"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "secrets",
                                    "range": [
                                        32,
                                        33
                                    ],
                                    "children": [],
                                    "content": ".secrets"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "encryption_key",
                                    "range": [
                                        34,
                                        35
                                    ],
                                    "children": [],
                                    "content": ".encryption_key"
                                }
                            ],
                            "content": "Settings().secrets.encryption_key"
                        }
                    ],
                    "content": "=Settings().secrets.encryption_key\n"
                }
            ],
            "content": "ENCRYPTION_KEY=Settings().secrets.encryption_key\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                43,
                120
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        46,
                        46
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "Parameter",
                    "name": "key",
                    "range": [
                        48,
                        48
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Optional[str]",
                            "range": [
                                50,
                                53
                            ],
                            "children": [],
                            "content": "Optional[str]"
                        }
                    ],
                    "content": "key"
                },
                {
                    "type": "Assignment",
                    "name": "self.key",
                    "range": [
                        68,
                        74
                    ],
                    "children": [
                        {
                            "type": "Identifier",
                            "name": "key",
                            "range": [
                                72,
                                72
                            ],
                            "children": [],
                            "content": "key"
                        },
                        {
                            "type": "Identifier",
                            "name": "ENCRYPTION_KEY",
                            "range": [
                                74,
                                74
                            ],
                            "children": [],
                            "content": "ENCRYPTION_KEY"
                        }
                    ],
                    "content": "self.key=key or ENCRYPTION_KEY"
                },
                {
                    "type": "IfStatement",
                    "name": "if not self.key",
                    "range": [
                        76,
                        89
                    ],
                    "children": [
                        {
                            "type": "RaiseStatement",
                            "name": "raise ValueError",
                            "range": [
                                83,
                                89
                            ],
                            "children": [
                                {
                                    "type": "StringLiteral",
                                    "name": "\"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"",
                                    "range": [
                                        87,
                                        87
                                    ],
                                    "children": [],
                                    "content": "\"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\""
                                }
                            ],
                            "content": "raise ValueError(\n\"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n)"
                        }
                    ],
                    "content": "if not self.key:\nraise ValueError(\n\"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n)"
                },
                {
                    "type": "Assignment",
                    "name": "self.fernet",
                    "range": [
                        91,
                        119
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "Fernet",
                            "range": [
                                95,
                                119
                            ],
                            "children": [
                                {
                                    "type": "ConditionalExpression",
                                    "name": "self.key.encode() if isinstance(self.key, str) else self.key",
                                    "range": [
                                        98,
                                        118
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "self.key.encode",
                                            "range": [
                                                98,
                                                104
                                            ],
                                            "children": [],
                                            "content": "self.key.encode()"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "name": "isinstance",
                                            "range": [
                                                106,
                                                113
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "self.key",
                                                    "range": [
                                                        108,
                                                        108
                                                    ],
                                                    "children": [],
                                                    "content": "self"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "str",
                                                    "range": [
                                                        112,
                                                        112
                                                    ],
                                                    "children": [],
                                                    "content": "str"
                                                }
                                            ],
                                            "content": "isinstance(self.key,str)"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "self.key",
                                            "range": [
                                                115,
                                                115
                                            ],
                                            "children": [],
                                            "content": "self"
                                        }
                                    ],
                                    "content": "self.key.encode()if isinstance(self.key,str)else self.key\n"
                                }
                            ],
                            "content": "Fernet(\nself.key.encode()if isinstance(self.key,str)else self.key\n)"
                        }
                    ],
                    "content": "self.fernet=Fernet(\nself.key.encode()if isinstance(self.key,str)else self.key\n)"
                }
            ],
            "content": "def __init__(self,key:Optional[str]=None):\n#Use provided key or get from environment\nself.key=key or ENCRYPTION_KEY\nif not self.key:\nraise ValueError(\n\"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n)\nself.fernet=Fernet(\nself.key.encode()if isinstance(self.key,str)else self.key\n)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "encrypt",
            "range": [
                122,
                170
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        125,
                        125
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "Parameter",
                    "name": "data",
                    "range": [
                        127,
                        127
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "dict",
                            "range": [
                                129,
                                129
                            ],
                            "children": [],
                            "content": "dict"
                        }
                    ],
                    "content": "data"
                },
                {
                    "type": "ReturnTypeAnnotation",
                    "name": "str",
                    "range": [
                        133,
                        133
                    ],
                    "children": [],
                    "content": "str"
                },
                {
                    "type": "Assignment",
                    "name": "json_str",
                    "range": [
                        140,
                        147
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "json.dumps",
                            "range": [
                                142,
                                147
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "data",
                                    "range": [
                                        146,
                                        146
                                    ],
                                    "children": [],
                                    "content": "data"
                                }
                            ],
                            "content": "json.dumps(data)"
                        }
                    ],
                    "content": "json_str=json.dumps(data)"
                },
                {
                    "type": "Assignment",
                    "name": "encrypted",
                    "range": [
                        149,
                        162
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "self.fernet.encrypt",
                            "range": [
                                151,
                                162
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "json_str.encode",
                                    "range": [
                                        157,
                                        161
                                    ],
                                    "children": [],
                                    "content": "json_str.encode()"
                                }
                            ],
                            "content": "self.fernet.encrypt(json_str.encode())"
                        }
                    ],
                    "content": "encrypted=self.fernet.encrypt(json_str.encode())"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return encrypted.decode()",
                    "range": [
                        164,
                        169
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "encrypted.decode",
                            "range": [
                                166,
                                169
                            ],
                            "children": [],
                            "content": ".decode()"
                        }
                    ],
                    "content": "return encrypted.decode()"
                }
            ],
            "content": "def encrypt(self,data:dict)->str:\n\"\"\"Encrypt dictionary data to string\"\"\"\njson_str=json.dumps(data)\nencrypted=self.fernet.encrypt(json_str.encode())\nreturn encrypted.decode()\n"
        },
        {
            "type": "FunctionDecl",
            "name": "decrypt",
            "range": [
                172,
                225
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        175,
                        175
                    ],
                    "children": [],
                    "content": "self"
                },
                {
                    "type": "Parameter",
                    "name": "encrypted_str",
                    "range": [
                        177,
                        177
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "str",
                            "range": [
                                179,
                                179
                            ],
                            "children": [],
                            "content": "str"
                        }
                    ],
                    "content": "encrypted_str"
                },
                {
                    "type": "ReturnTypeAnnotation",
                    "name": "dict",
                    "range": [
                        183,
                        183
                    ],
                    "children": [],
                    "content": "dict"
                },
                {
                    "type": "IfStatement",
                    "name": "if not encrypted_str",
                    "range": [
                        190,
                        198
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return {}",
                            "range": [
                                195,
                                197
                            ],
                            "children": [],
                            "content": "return{}"
                        }
                    ],
                    "content": "if not encrypted_str:\nreturn{}\n"
                },
                {
                    "type": "Assignment",
                    "name": "decrypted",
                    "range": [
                        199,
                        212
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "self.fernet.decrypt",
                            "range": [
                                201,
                                212
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "encrypted_str.encode",
                                    "range": [
                                        207,
                                        211
                                    ],
                                    "children": [],
                                    "content": "encrypted_str.encode()"
                                }
                            ],
                            "content": "self.fernet.decrypt(encrypted_str.encode())"
                        }
                    ],
                    "content": "decrypted=self.fernet.decrypt(encrypted_str.encode())"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return json.loads(decrypted.decode())",
                    "range": [
                        214,
                        224
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "json.loads",
                            "range": [
                                215,
                                224
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "decrypted.decode",
                                    "range": [
                                        219,
                                        223
                                    ],
                                    "children": [],
                                    "content": "decrypted.decode()"
                                }
                            ],
                            "content": "json.loads(decrypted.decode())"
                        }
                    ],
                    "content": "return json.loads(decrypted.decode())"
                }
            ],
            "content": "def decrypt(self,encrypted_str:str)->dict:\n\"\"\"Decrypt string to dictionary\"\"\"\nif not encrypted_str:\nreturn{}\ndecrypted=self.fernet.decrypt(encrypted_str.encode())\nreturn json.loads(decrypted.decode())\n"
        }
    ],
    "content": "import json\nfrom typing import Optional\n\nfrom cryptography.fernet import Fernet\n\nfrom backend.util.settings import Settings\n\nENCRYPTION_KEY=Settings().secrets.encryption_key\n\n\nclass JSONCryptor:\ndef __init__(self,key:Optional[str]=None):\n#Use provided key or get from environment\nself.key=key or ENCRYPTION_KEY\nif not self.key:\nraise ValueError(\n\"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n)\nself.fernet=Fernet(\nself.key.encode()if isinstance(self.key,str)else self.key\n)\n\ndef encrypt(self,data:dict)->str:\n\"\"\"Encrypt dictionary data to string\"\"\"\njson_str=json.dumps(data)\nencrypted=self.fernet.encrypt(json_str.encode())\nreturn encrypted.decode()\n\ndef decrypt(self,encrypted_str:str)->dict:\n\"\"\"Decrypt string to dictionary\"\"\"\nif not encrypted_str:\nreturn{}\ndecrypted=self.fernet.decrypt(encrypted_str.encode())\nreturn json.loads(decrypted.decode())\n"
}