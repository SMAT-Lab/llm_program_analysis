{
    "type": "Program",
    "name": "Global",
    "range": [
        43,
        1206
    ],
    "children": [
        {
            "type": "VariableDeclaration",
            "name": "BLOCKED_IP_NETWORKS",
            "range": [
                51,
                173
            ],
            "children": [
                {
                    "type": "ArrayExpression",
                    "name": "",
                    "range": [
                        53,
                        172
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "name": "",
                            "range": [
                                55,
                                61
                            ],
                            "children": [],
                            "content": "#--8<--"
                        },
                        {
                            "type": "CallExpression",
                            "name": "ipaddress.ip_network",
                            "range": [
                                68,
                                73
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        72,
                                        72
                                    ],
                                    "children": [],
                                    "content": "\"0.0.0.0/8\""
                                }
                            ],
                            "content": "ipaddress.ip_network(\"0.0.0.0/8\")"
                        },
                        {
                            "type": "Comment",
                            "name": "",
                            "range": [
                                75,
                                77
                            ],
                            "children": [],
                            "content": "#\"This\" Network"
                        },
                        {
                            "type": "CallExpression",
                            "name": "ipaddress.ip_network",
                            "range": [
                                79,
                                84
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        83,
                                        83
                                    ],
                                    "children": [],
                                    "content": "\"10.0.0.0/8\""
                                }
                            ],
                            "content": "ipaddress.ip_network(\"10.0.0.0/8\")"
                        },
                        {
                            "type": "Comment",
                            "name": "",
                            "range": [
                                86,
                                89
                            ],
                            "children": [],
                            "content": "#Private-Use"
                        },
                        {
                            "type": "CallExpression",
                            "name": "ipaddress.ip_network",
                            "range": [
                                91,
                                96
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        95,
                                        95
                                    ],
                                    "children": [],
                                    "content": "\"127.0.0.0/8\""
                                }
                            ],
                            "content": "ipaddress.ip_network(\"127.0.0.0/8\")"
                        },
                        {
                            "type": "Comment",
                            "name": "",
                            "range": [
                                98,
                                99
                            ],
                            "children": [],
                            "content": "#Loopback"
                        },
                        {
                            "type": "CallExpression",
                            "name": "ipaddress.ip_network",
                            "range": [
                                101,
                                106
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        105,
                                        105
                                    ],
                                    "children": [],
                                    "content": "\"169.254.0.0/16\""
                                }
                            ],
                            "content": "ipaddress.ip_network(\"169.254.0.0/16\")"
                        },
                        {
                            "type": "Comment",
                            "name": "",
                            "range": [
                                108,
                                110
                            ],
                            "children": [],
                            "content": "#Link Local"
                        },
                        {
                            "type": "CallExpression",
                            "name": "ipaddress.ip_network",
                            "range": [
                                112,
                                117
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        116,
                                        116
                                    ],
                                    "children": [],
                                    "content": "\"172.16.0.0/12\""
                                }
                            ],
                            "content": "ipaddress.ip_network(\"172.16.0.0/12\")"
                        },
                        {
                            "type": "Comment",
                            "name": "",
                            "range": [
                                119,
                                122
                            ],
                            "children": [],
                            "content": "#Private-Use"
                        },
                        {
                            "type": "CallExpression",
                            "name": "ipaddress.ip_network",
                            "range": [
                                124,
                                129
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        128,
                                        128
                                    ],
                                    "children": [],
                                    "content": "\"192.168.0.0/16\""
                                }
                            ],
                            "content": "ipaddress.ip_network(\"192.168.0.0/16\")"
                        },
                        {
                            "type": "Comment",
                            "name": "",
                            "range": [
                                131,
                                134
                            ],
                            "children": [],
                            "content": "#Private-Use"
                        },
                        {
                            "type": "CallExpression",
                            "name": "ipaddress.ip_network",
                            "range": [
                                136,
                                141
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        140,
                                        140
                                    ],
                                    "children": [],
                                    "content": "\"224.0.0.0/4\""
                                }
                            ],
                            "content": "ipaddress.ip_network(\"224.0.0.0/4\")"
                        },
                        {
                            "type": "Comment",
                            "name": "",
                            "range": [
                                143,
                                144
                            ],
                            "children": [],
                            "content": "#Multicast"
                        },
                        {
                            "type": "CallExpression",
                            "name": "ipaddress.ip_network",
                            "range": [
                                146,
                                151
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "",
                                    "range": [
                                        150,
                                        150
                                    ],
                                    "children": [],
                                    "content": "\"240.0.0.0/4\""
                                }
                            ],
                            "content": "ipaddress.ip_network(\"240.0.0.0/4\")"
                        },
                        {
                            "type": "Comment",
                            "name": "",
                            "range": [
                                153,
                                157
                            ],
                            "children": [],
                            "content": "#Reserved for Future Use"
                        },
                        {
                            "type": "Comment",
                            "name": "",
                            "range": [
                                159,
                                165
                            ],
                            "children": [],
                            "content": "#--8<--"
                        }
                    ],
                    "content": "[\n#--8<--[start:BLOCKED_IP_NETWORKS]\nipaddress.ip_network(\"0.0.0.0/8\"),#\"This\" Network\nipaddress.ip_network(\"10.0.0.0/8\"),#Private-Use\nipaddress.ip_network(\"127.0.0.0/8\"),#Loopback\nipaddress.ip_network(\"169.254.0.0/16\"),#Link Local\nipaddress.ip_network(\"172.16.0.0/12\"),#Private-Use\nipaddress.ip_network(\"192.168.0.0/16\"),#Private-Use\nipaddress.ip_network(\"224.0.0.0/4\"),#Multicast\nipaddress.ip_network(\"240.0.0.0/4\"),#Reserved for Future Use\n#--8<--[end:BLOCKED_IP_NETWORKS]\n]"
                }
            ],
            "content": "BLOCKED_IP_NETWORKS=[\n#--8<--[start:BLOCKED_IP_NETWORKS]\nipaddress.ip_network(\"0.0.0.0/8\"),#\"This\" Network\nipaddress.ip_network(\"10.0.0.0/8\"),#Private-Use\nipaddress.ip_network(\"127.0.0.0/8\"),#Loopback\nipaddress.ip_network(\"169.254.0.0/16\"),#Link Local\nipaddress.ip_network(\"172.16.0.0/12\"),#Private-Use\nipaddress.ip_network(\"192.168.0.0/16\"),#Private-Use\nipaddress.ip_network(\"224.0.0.0/4\"),#Multicast\nipaddress.ip_network(\"240.0.0.0/4\"),#Reserved for Future Use\n#--8<--[end:BLOCKED_IP_NETWORKS]\n]\n"
        },
        {
            "type": "FunctionDecl",
            "name": "_canonicalize_url",
            "range": [
                201,
                294
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "url",
                    "range": [
                        204,
                        206
                    ],
                    "children": [],
                    "content": "(url:"
                },
                {
                    "type": "ReturnType",
                    "name": "str",
                    "range": [
                        210,
                        210
                    ],
                    "children": [],
                    "content": ">"
                },
                {
                    "type": "Block",
                    "name": "",
                    "range": [
                        212,
                        294
                    ],
                    "children": [
                        {
                            "type": "Comment",
                            "name": "# Strip spaces and trailing slashes",
                            "range": [
                                213,
                                219
                            ],
                            "children": [],
                            "content": "\n#Strip spaces and trailing slashes"
                        },
                        {
                            "type": "Assignment",
                            "name": "url",
                            "range": [
                                220,
                                231
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "strip",
                                    "range": [
                                        222,
                                        226
                                    ],
                                    "children": [],
                                    "content": "=url.strip("
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "strip",
                                    "range": [
                                        227,
                                        231
                                    ],
                                    "children": [],
                                    "content": ").strip(\"/\""
                                }
                            ],
                            "content": "\nurl=url.strip().strip(\"/\""
                        },
                        {
                            "type": "Comment",
                            "name": "# Ensure the URL starts with http:// or https://",
                            "range": [
                                233,
                                248
                            ],
                            "children": [],
                            "content": "\n#Ensure the URL starts with http://or https://"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                249,
                                268
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "",
                                    "range": [
                                        251,
                                        260
                                    ],
                                    "children": [
                                        {
                                            "type": "CallExpression",
                                            "name": "startswith",
                                            "range": [
                                                253,
                                                260
                                            ],
                                            "children": [],
                                            "content": ".startswith((\"http://\",\"https://\")"
                                        }
                                    ],
                                    "content": "not url.startswith((\"http://\",\"https://\")"
                                },
                                {
                                    "type": "Block",
                                    "name": "",
                                    "range": [
                                        262,
                                        268
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "url",
                                            "range": [
                                                263,
                                                267
                                            ],
                                            "children": [],
                                            "content": "\nurl=\"http://\"+"
                                        }
                                    ],
                                    "content": ":\nurl=\"http://\"+url"
                                }
                            ],
                            "content": "\nif not url.startswith((\"http://\",\"https://\")):\nurl=\"http://\"+url"
                        },
                        {
                            "type": "Comment",
                            "name": "# Replace backslashes with forward slashes to avoid parsing ambiguities",
                            "range": [
                                270,
                                280
                            ],
                            "children": [],
                            "content": "\n#Replace backslashes with forward slashes to avoid parsing ambiguities"
                        },
                        {
                            "type": "Assignment",
                            "name": "url",
                            "range": [
                                281,
                                290
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "replace",
                                    "range": [
                                        283,
                                        290
                                    ],
                                    "children": [],
                                    "content": "=url.replace(\"\\\\\",\"/\""
                                }
                            ],
                            "content": "\nurl=url.replace(\"\\\\\",\"/\""
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                292,
                                293
                            ],
                            "children": [],
                            "content": "\nreturn"
                        }
                    ],
                    "content": ":\n#Strip spaces and trailing slashes\nurl=url.strip().strip(\"/\")\n#Ensure the URL starts with http://or https://\nif not url.startswith((\"http://\",\"https://\")):\nurl=\"http://\"+url\n\n#Replace backslashes with forward slashes to avoid parsing ambiguities\nurl=url.replace(\"\\\\\",\"/\")\nreturn url"
                }
            ],
            "content": "\ndef _canonicalize_url(url:str)->str:\n#Strip spaces and trailing slashes\nurl=url.strip().strip(\"/\")\n#Ensure the URL starts with http://or https://\nif not url.startswith((\"http://\",\"https://\")):\nurl=\"http://\"+url\n\n#Replace backslashes with forward slashes to avoid parsing ambiguities\nurl=url.replace(\"\\\\\",\"/\")\nreturn url"
        },
        {
            "type": "FunctionDecl",
            "name": "_is_ip_blocked",
            "range": [
                297,
                333
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        299,
                        303
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "ip",
                            "range": [
                                300,
                                302
                            ],
                            "children": [],
                            "content": "(ip:"
                        }
                    ],
                    "content": "_is_ip_blocked(ip:str"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        304,
                        306
                    ],
                    "children": [],
                    "content": ")->"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        309,
                        311
                    ],
                    "children": [],
                    "content": "\n\"\"\" \\n     Checks if the IP address is in a blocked network. \\n     \""
                },
                {
                    "type": "Body",
                    "name": "body",
                    "range": [
                        313,
                        333
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "assignment",
                            "range": [
                                313,
                                320
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "ip_addr",
                                    "range": [
                                        313,
                                        315
                                    ],
                                    "children": [],
                                    "content": "\nip_addr="
                                },
                                {
                                    "type": "CallExpression",
                                    "name": "ipaddress.ip_address",
                                    "range": [
                                        315,
                                        320
                                    ],
                                    "children": [
                                        {
                                            "type": "Argument",
                                            "name": "ip",
                                            "range": [
                                                319,
                                                319
                                            ],
                                            "children": [],
                                            "content": "("
                                        }
                                    ],
                                    "content": "=ipaddress.ip_address(ip"
                                }
                            ],
                            "content": "\nip_addr=ipaddress.ip_address(ip"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                322,
                                332
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "any",
                                    "range": [
                                        323,
                                        332
                                    ],
                                    "children": [
                                        {
                                            "type": "GeneratorExp",
                                            "name": "generator_exp",
                                            "range": [
                                                325,
                                                332
                                            ],
                                            "children": [
                                                {
                                                    "type": "Comprehension",
                                                    "name": "comprehension",
                                                    "range": [
                                                        325,
                                                        332
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Target",
                                                            "name": "ip_addr",
                                                            "range": [
                                                                325,
                                                                325
                                                            ],
                                                            "children": [],
                                                            "content": "("
                                                        },
                                                        {
                                                            "type": "Iter",
                                                            "name": "BLOCKED_IP_NETWORKS",
                                                            "range": [
                                                                331,
                                                                331
                                                            ],
                                                            "children": [],
                                                            "content": "in"
                                                        }
                                                    ],
                                                    "content": "(ip_addr in network for network in BLOCKED_IP_NETWORKS"
                                                }
                                            ],
                                            "content": "(ip_addr in network for network in BLOCKED_IP_NETWORKS"
                                        }
                                    ],
                                    "content": "return any(ip_addr in network for network in BLOCKED_IP_NETWORKS"
                                }
                            ],
                            "content": "\nreturn any(ip_addr in network for network in BLOCKED_IP_NETWORKS"
                        }
                    ],
                    "content": "\nip_addr=ipaddress.ip_address(ip)\nreturn any(ip_addr in network for network in BLOCKED_IP_NETWORKS)"
                }
            ],
            "content": "\ndef _is_ip_blocked(ip:str)->bool:\n\"\"\" \\n     Checks if the IP address is in a blocked network. \\n     \"\"\"\nip_addr=ipaddress.ip_address(ip)\nreturn any(ip_addr in network for network in BLOCKED_IP_NETWORKS)"
        },
        {
            "type": "FunctionDecl",
            "name": "validate_url",
            "range": [
                336,
                639
            ],
            "children": [
                {
                    "type": "Parameters",
                    "name": "parameters",
                    "range": [
                        338,
                        349
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "url",
                            "range": [
                                339,
                                341
                            ],
                            "children": [],
                            "content": "(url:"
                        },
                        {
                            "type": "Parameter",
                            "name": "trusted_origins",
                            "range": [
                                343,
                                348
                            ],
                            "children": [],
                            "content": ",trusted_origins:list[str"
                        }
                    ],
                    "content": "validate_url(url:str,trusted_origins:list[str]"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        350,
                        352
                    ],
                    "children": [],
                    "content": ")->"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        355,
                        357
                    ],
                    "children": [],
                    "content": "\n\"\"\" \\n     Validates the URL to prevent SSRF attacks by ensuring it does not point to a private \\n     or untrusted IP address, unless whitelisted. \\n     \""
                },
                {
                    "type": "Body",
                    "name": "body",
                    "range": [
                        359,
                        638
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "assignment",
                            "range": [
                                359,
                                364
                            ],
                            "children": [],
                            "content": "\nurl=_canonicalize_url(url"
                        },
                        {
                            "type": "Assignment",
                            "name": "assignment",
                            "range": [
                                366,
                                371
                            ],
                            "children": [],
                            "content": "\nparsed=urlparse(url"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                378,
                                394
                            ],
                            "children": [],
                            "content": "\nif parsed.scheme not in ALLOWED_SCHEMES:\nraise ValueError(\nf \"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                405,
                                416
                            ],
                            "children": [],
                            "content": "\nif not parsed.hostname:\nraise ValueError(\"Invalid URL: No hostname found.\""
                        },
                        {
                            "type": "TryStatement",
                            "name": "try_statement",
                            "range": [
                                428,
                                457
                            ],
                            "children": [],
                            "content": "\ntry:\nascii_hostname=idna.encode(parsed.hostname).decode(\"ascii\")\nexcept idna.IDNAError:\nraise ValueError(\"Invalid hostname with unsupported characters.\""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                465,
                                479
                            ],
                            "children": [],
                            "content": "\nif not HOSTNAME_REGEX.match(ascii_hostname):\nraise ValueError(\"Hostname contains invalid characters.\""
                        },
                        {
                            "type": "Assignment",
                            "name": "assignment",
                            "range": [
                                495,
                                504
                            ],
                            "children": [],
                            "content": "\nparsed=parsed._replace(netloc=ascii_hostname"
                        },
                        {
                            "type": "Assignment",
                            "name": "assignment",
                            "range": [
                                506,
                                514
                            ],
                            "children": [],
                            "content": "\nurl=str(urlunparse(parsed)"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                530,
                                538
                            ],
                            "children": [],
                            "content": "\nif ascii_hostname in trusted_origins:\nreturn url"
                        },
                        {
                            "type": "TryStatement",
                            "name": "try_statement",
                            "range": [
                                549,
                                586
                            ],
                            "children": [],
                            "content": "\ntry:\nip_addresses={res[4][0]for res in socket.getaddrinfo(ascii_hostname,None)}\nexcept socket.gaierror:\nraise ValueError(f \"Unable to resolve IP address for hostname {ascii_hostname}\""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if_statement",
                            "range": [
                                589,
                                599
                            ],
                            "children": [],
                            "content": "\nif not ip_addresses:\nraise ValueError(f \"No IP addresses found for {ascii_hostname}\""
                        },
                        {
                            "type": "ForStatement",
                            "name": "for_statement",
                            "range": [
                                614,
                                634
                            ],
                            "children": [],
                            "content": "\nfor ip in ip_addresses:\nif _is_ip_blocked(ip):\nraise ValueError(\nf \"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return_statement",
                            "range": [
                                637,
                                638
                            ],
                            "children": [],
                            "content": "\nreturn"
                        }
                    ],
                    "content": "\nurl=_canonicalize_url(url)\nparsed=urlparse(url)\n\n#Check scheme\nif parsed.scheme not in ALLOWED_SCHEMES:\nraise ValueError(\nf \"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"\n)\n\n#Validate and IDNA encode the hostname\nif not parsed.hostname:\nraise ValueError(\"Invalid URL: No hostname found.\")\n\n#IDNA encode to prevent Unicode domain attacks\ntry:\nascii_hostname=idna.encode(parsed.hostname).decode(\"ascii\")\nexcept idna.IDNAError:\nraise ValueError(\"Invalid hostname with unsupported characters.\")\n\n#Check hostname characters\nif not HOSTNAME_REGEX.match(ascii_hostname):\nraise ValueError(\"Hostname contains invalid characters.\")\n\n#Rebuild the URL with the normalized,IDNA-encoded hostname\nparsed=parsed._replace(netloc=ascii_hostname)\nurl=str(urlunparse(parsed))\n\n#Check if hostname is a trusted origin(exact match)\nif ascii_hostname in trusted_origins:\nreturn url\n\n#Resolve all IP addresses for the hostname\ntry:\nip_addresses={res[4][0]for res in socket.getaddrinfo(ascii_hostname,None)}\nexcept socket.gaierror:\nraise ValueError(f \"Unable to resolve IP address for hostname {ascii_hostname}\")\n\nif not ip_addresses:\nraise ValueError(f \"No IP addresses found for {ascii_hostname}\")\n\n#Check if any resolved IP address falls into blocked ranges\nfor ip in ip_addresses:\nif _is_ip_blocked(ip):\nraise ValueError(\nf \"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n)\n\nreturn"
                }
            ],
            "content": "\ndef validate_url(url:str,trusted_origins:list[str])->str:\n\"\"\" \\n     Validates the URL to prevent SSRF attacks by ensuring it does not point to a private \\n     or untrusted IP address, unless whitelisted. \\n     \"\"\"\nurl=_canonicalize_url(url)\nparsed=urlparse(url)\n\n#Check scheme\nif parsed.scheme not in ALLOWED_SCHEMES:\nraise ValueError(\nf \"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"\n)\n\n#Validate and IDNA encode the hostname\nif not parsed.hostname:\nraise ValueError(\"Invalid URL: No hostname found.\")\n\n#IDNA encode to prevent Unicode domain attacks\ntry:\nascii_hostname=idna.encode(parsed.hostname).decode(\"ascii\")\nexcept idna.IDNAError:\nraise ValueError(\"Invalid hostname with unsupported characters.\")\n\n#Check hostname characters\nif not HOSTNAME_REGEX.match(ascii_hostname):\nraise ValueError(\"Hostname contains invalid characters.\")\n\n#Rebuild the URL with the normalized,IDNA-encoded hostname\nparsed=parsed._replace(netloc=ascii_hostname)\nurl=str(urlunparse(parsed))\n\n#Check if hostname is a trusted origin(exact match)\nif ascii_hostname in trusted_origins:\nreturn url\n\n#Resolve all IP addresses for the hostname\ntry:\nip_addresses={res[4][0]for res in socket.getaddrinfo(ascii_hostname,None)}\nexcept socket.gaierror:\nraise ValueError(f \"Unable to resolve IP address for hostname {ascii_hostname}\")\n\nif not ip_addresses:\nraise ValueError(f \"No IP addresses found for {ascii_hostname}\")\n\n#Check if any resolved IP address falls into blocked ranges\nfor ip in ip_addresses:\nif _is_ip_blocked(ip):\nraise ValueError(\nf \"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n)\n\nreturn url"
        },
        {
            "type": "FunctionDecl",
            "name": "__init__",
            "range": [
                651,
                774
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        655,
                        655
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Parameter",
                    "name": "trusted_origins",
                    "range": [
                        658,
                        667
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "list[str] | None",
                            "range": [
                                660,
                                667
                            ],
                            "children": [],
                            "content": ":list[str]|None="
                        }
                    ],
                    "content": "\ntrusted_origins:list[str]|None="
                },
                {
                    "type": "Parameter",
                    "name": "raise_for_status",
                    "range": [
                        670,
                        674
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "bool",
                            "range": [
                                672,
                                674
                            ],
                            "children": [],
                            "content": ":bool="
                        }
                    ],
                    "content": "\nraise_for_status:bool="
                },
                {
                    "type": "Parameter",
                    "name": "extra_url_validator",
                    "range": [
                        677,
                        690
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "Callable[[str], str] | None",
                            "range": [
                                679,
                                690
                            ],
                            "children": [],
                            "content": ":Callable[[str],str]|None="
                        }
                    ],
                    "content": "\nextra_url_validator:Callable[[str],str]|None="
                },
                {
                    "type": "Parameter",
                    "name": "extra_headers",
                    "range": [
                        693,
                        704
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "dict[str, str] | None",
                            "range": [
                                695,
                                704
                            ],
                            "children": [],
                            "content": ":dict[str,str]|None="
                        }
                    ],
                    "content": "\nextra_headers:dict[str,str]|None="
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        708,
                        774
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "self.trusted_origins = []",
                            "range": [
                                710,
                                716
                            ],
                            "children": [],
                            "content": "\nself.trusted_origins=[]"
                        },
                        {
                            "type": "ForStatement",
                            "name": "for url in trusted_origins or []",
                            "range": [
                                717,
                                755
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        725,
                                        755
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "hostname = urlparse(url).hostname",
                                            "range": [
                                                726,
                                                734
                                            ],
                                            "children": [],
                                            "content": "\nhostname=urlparse(url).hostname"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "if not hostname",
                                            "range": [
                                                735,
                                                746
                                            ],
                                            "children": [
                                                {
                                                    "type": "BlockStatement",
                                                    "name": "",
                                                    "range": [
                                                        739,
                                                        746
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "ThrowStatement",
                                                            "name": "raise ValueError(f\"Invalid URL: Unable to determine hostname of {url}\")",
                                                            "range": [
                                                                740,
                                                                745
                                                            ],
                                                            "children": [],
                                                            "content": "\nraise ValueError(f \"Invalid URL: Unable to determine hostname of {url}\""
                                                        }
                                                    ],
                                                    "content": ":\nraise ValueError(f \"Invalid URL: Unable to determine hostname of {url}\")"
                                                }
                                            ],
                                            "content": "\nif not hostname:\nraise ValueError(f \"Invalid URL: Unable to determine hostname of {url}\")"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "self.trusted_origins.append(hostname)",
                                            "range": [
                                                747,
                                                755
                                            ],
                                            "children": [],
                                            "content": "\nself.trusted_origins.append(hostname)"
                                        }
                                    ],
                                    "content": ":\nhostname=urlparse(url).hostname\nif not hostname:\nraise ValueError(f \"Invalid URL: Unable to determine hostname of {url}\")\nself.trusted_origins.append(hostname)"
                                }
                            ],
                            "content": "\nfor url in trusted_origins or[]:\nhostname=urlparse(url).hostname\nif not hostname:\nraise ValueError(f \"Invalid URL: Unable to determine hostname of {url}\")\nself.trusted_origins.append(hostname)"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "self.raise_for_status = raise_for_status",
                            "range": [
                                757,
                                762
                            ],
                            "children": [],
                            "content": "\nself.raise_for_status=raise_for_status"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "self.extra_url_validator = extra_url_validator",
                            "range": [
                                763,
                                768
                            ],
                            "children": [],
                            "content": "\nself.extra_url_validator=extra_url_validator"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "self.extra_headers = extra_headers",
                            "range": [
                                769,
                                774
                            ],
                            "children": [],
                            "content": "\nself.extra_headers=extra_headers"
                        }
                    ],
                    "content": "):\nself.trusted_origins=[]\nfor url in trusted_origins or[]:\nhostname=urlparse(url).hostname\nif not hostname:\nraise ValueError(f \"Invalid URL: Unable to determine hostname of {url}\")\nself.trusted_origins.append(hostname)\n\nself.raise_for_status=raise_for_status\nself.extra_url_validator=extra_url_validator\nself.extra_headers=extra_headers"
                }
            ],
            "content": "\ndef __init__(\nself,\ntrusted_origins:list[str]|None=None,\nraise_for_status:bool=True,\nextra_url_validator:Callable[[str],str]|None=None,\nextra_headers:dict[str,str]|None=None,\n):\nself.trusted_origins=[]\nfor url in trusted_origins or[]:\nhostname=urlparse(url).hostname\nif not hostname:\nraise ValueError(f \"Invalid URL: Unable to determine hostname of {url}\")\nself.trusted_origins.append(hostname)\n\nself.raise_for_status=raise_for_status\nself.extra_url_validator=extra_url_validator\nself.extra_headers=extra_headers"
        },
        {
            "type": "FunctionDecl",
            "name": "request",
            "range": [
                776,
                917
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        780,
                        780
                    ],
                    "children": [],
                    "content": "\n"
                },
                {
                    "type": "Parameter",
                    "name": "method",
                    "range": [
                        782,
                        782
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "url",
                    "range": [
                        784,
                        784
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "headers",
                    "range": [
                        786,
                        788
                    ],
                    "children": [],
                    "content": ",headers="
                },
                {
                    "type": "Parameter",
                    "name": "allow_redirects",
                    "range": [
                        790,
                        792
                    ],
                    "children": [],
                    "content": ",allow_redirects="
                },
                {
                    "type": "Parameter",
                    "name": "*args",
                    "range": [
                        794,
                        795
                    ],
                    "children": [],
                    "content": ",*"
                },
                {
                    "type": "Parameter",
                    "name": "**kwargs",
                    "range": [
                        797,
                        799
                    ],
                    "children": [],
                    "content": ",**"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        801,
                        917
                    ],
                    "children": [
                        {
                            "type": "IfStatement",
                            "name": "if self.extra_headers is not None",
                            "range": [
                                809,
                                836
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        816,
                                        836
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "headers = {**(headers or {}), **self.extra_headers}",
                                            "range": [
                                                818,
                                                836
                                            ],
                                            "children": [],
                                            "content": "\nheaders={**(headers or{}),**self.extra_headers}"
                                        }
                                    ],
                                    "content": "None:\nheaders={**(headers or{}),**self.extra_headers}"
                                }
                            ],
                            "content": "\nif self.extra_headers is not None:\nheaders={**(headers or{}),**self.extra_headers}"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "url = validate_url(url, self.trusted_origins)",
                            "range": [
                                838,
                                848
                            ],
                            "children": [],
                            "content": "\nurl=validate_url(url,self.trusted_origins)"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if self.extra_url_validator is not None",
                            "range": [
                                849,
                                866
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        856,
                                        866
                                    ],
                                    "children": [
                                        {
                                            "type": "AssignmentExpression",
                                            "name": "url = self.extra_url_validator(url)",
                                            "range": [
                                                858,
                                                866
                                            ],
                                            "children": [],
                                            "content": "\nurl=self.extra_url_validator(url)"
                                        }
                                    ],
                                    "content": "None:\nurl=self.extra_url_validator(url)"
                                }
                            ],
                            "content": "\nif self.extra_url_validator is not None:\nurl=self.extra_url_validator(url)"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "response = req.request(method, url, headers=headers, allow_redirects=allow_redirects, *args, **kwargs)",
                            "range": [
                                868,
                                901
                            ],
                            "children": [],
                            "content": "\nresponse=req.request(\nmethod,\nurl,\nheaders=headers,\nallow_redirects=allow_redirects,\n*args,\n**kwargs,\n)"
                        },
                        {
                            "type": "IfStatement",
                            "name": "if self.raise_for_status",
                            "range": [
                                902,
                                913
                            ],
                            "children": [
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        906,
                                        913
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "response.raise_for_status()",
                                            "range": [
                                                908,
                                                913
                                            ],
                                            "children": [],
                                            "content": "\nresponse.raise_for_status()"
                                        }
                                    ],
                                    "content": "raise_for_status:\nresponse.raise_for_status()"
                                }
                            ],
                            "content": "\nif self.raise_for_status:\nresponse.raise_for_status()"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return response",
                            "range": [
                                915,
                                917
                            ],
                            "children": [],
                            "content": "\nreturn response"
                        }
                    ],
                    "content": "\n)->req.Response:\nif self.extra_headers is not None:\nheaders={**(headers or{}),**self.extra_headers}\n\nurl=validate_url(url,self.trusted_origins)\nif self.extra_url_validator is not None:\nurl=self.extra_url_validator(url)\n\nresponse=req.request(\nmethod,\nurl,\nheaders=headers,\nallow_redirects=allow_redirects,\n*args,\n**kwargs,\n)\nif self.raise_for_status:\nresponse.raise_for_status()\n\nreturn response"
                }
            ],
            "content": "\ndef request(\nself,method,url,headers=None,allow_redirects=False,*args,**kwargs\n)->req.Response:\nif self.extra_headers is not None:\nheaders={**(headers or{}),**self.extra_headers}\n\nurl=validate_url(url,self.trusted_origins)\nif self.extra_url_validator is not None:\nurl=self.extra_url_validator(url)\n\nresponse=req.request(\nmethod,\nurl,\nheaders=headers,\nallow_redirects=allow_redirects,\n*args,\n**kwargs,\n)\nif self.raise_for_status:\nresponse.raise_for_status()\n\nreturn response"
        },
        {
            "type": "FunctionDecl",
            "name": "get",
            "range": [
                919,
                956
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        922,
                        922
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "url",
                    "range": [
                        924,
                        924
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "*args",
                    "range": [
                        926,
                        927
                    ],
                    "children": [],
                    "content": ",*"
                },
                {
                    "type": "Parameter",
                    "name": "**kwargs",
                    "range": [
                        929,
                        931
                    ],
                    "children": [],
                    "content": ",**"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        933,
                        956
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return self.request(\"GET\", url, *args, **kwargs)",
                            "range": [
                                940,
                                956
                            ],
                            "children": [],
                            "content": "\nreturn self.request(\"GET\",url,*args,**kwargs)"
                        }
                    ],
                    "content": ")->req.Response:\nreturn self.request(\"GET\",url,*args,**kwargs)"
                }
            ],
            "content": "\ndef get(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"GET\",url,*args,**kwargs)"
        },
        {
            "type": "FunctionDecl",
            "name": "post",
            "range": [
                958,
                995
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        961,
                        961
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "url",
                    "range": [
                        963,
                        963
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "*args",
                    "range": [
                        965,
                        966
                    ],
                    "children": [],
                    "content": ",*"
                },
                {
                    "type": "Parameter",
                    "name": "**kwargs",
                    "range": [
                        968,
                        970
                    ],
                    "children": [],
                    "content": ",**"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        972,
                        995
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return self.request(\"POST\", url, *args, **kwargs)",
                            "range": [
                                979,
                                995
                            ],
                            "children": [],
                            "content": "\nreturn self.request(\"POST\",url,*args,**kwargs)"
                        }
                    ],
                    "content": ")->req.Response:\nreturn self.request(\"POST\",url,*args,**kwargs)"
                }
            ],
            "content": "\ndef post(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"POST\",url,*args,**kwargs)"
        },
        {
            "type": "FunctionDecl",
            "name": "put",
            "range": [
                997,
                1034
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1000,
                        1000
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "url",
                    "range": [
                        1002,
                        1002
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "*args",
                    "range": [
                        1004,
                        1005
                    ],
                    "children": [],
                    "content": ",*"
                },
                {
                    "type": "Parameter",
                    "name": "**kwargs",
                    "range": [
                        1007,
                        1009
                    ],
                    "children": [],
                    "content": ",**"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1011,
                        1034
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return self.request(\"PUT\", url, *args, **kwargs)",
                            "range": [
                                1018,
                                1034
                            ],
                            "children": [],
                            "content": "\nreturn self.request(\"PUT\",url,*args,**kwargs)"
                        }
                    ],
                    "content": ")->req.Response:\nreturn self.request(\"PUT\",url,*args,**kwargs)"
                }
            ],
            "content": "\ndef put(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"PUT\",url,*args,**kwargs)"
        },
        {
            "type": "FunctionDecl",
            "name": "delete",
            "range": [
                1036,
                1073
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1039,
                        1039
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "url",
                    "range": [
                        1041,
                        1041
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "*args",
                    "range": [
                        1043,
                        1044
                    ],
                    "children": [],
                    "content": ",*"
                },
                {
                    "type": "Parameter",
                    "name": "**kwargs",
                    "range": [
                        1046,
                        1048
                    ],
                    "children": [],
                    "content": ",**"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1050,
                        1073
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return self.request(\"DELETE\", url, *args, **kwargs)",
                            "range": [
                                1057,
                                1073
                            ],
                            "children": [],
                            "content": "\nreturn self.request(\"DELETE\",url,*args,**kwargs)"
                        }
                    ],
                    "content": ")->req.Response:\nreturn self.request(\"DELETE\",url,*args,**kwargs)"
                }
            ],
            "content": "\ndef delete(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"DELETE\",url,*args,**kwargs)"
        },
        {
            "type": "FunctionDecl",
            "name": "head",
            "range": [
                1075,
                1112
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1078,
                        1078
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "url",
                    "range": [
                        1080,
                        1080
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "*args",
                    "range": [
                        1082,
                        1083
                    ],
                    "children": [],
                    "content": ",*"
                },
                {
                    "type": "Parameter",
                    "name": "**kwargs",
                    "range": [
                        1085,
                        1087
                    ],
                    "children": [],
                    "content": ",**"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1089,
                        1112
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return self.request(\"HEAD\", url, *args, **kwargs)",
                            "range": [
                                1096,
                                1112
                            ],
                            "children": [],
                            "content": "\nreturn self.request(\"HEAD\",url,*args,**kwargs)"
                        }
                    ],
                    "content": ")->req.Response:\nreturn self.request(\"HEAD\",url,*args,**kwargs)"
                }
            ],
            "content": "\ndef head(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"HEAD\",url,*args,**kwargs)"
        },
        {
            "type": "FunctionDecl",
            "name": "options",
            "range": [
                1114,
                1151
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1117,
                        1117
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "url",
                    "range": [
                        1119,
                        1119
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "*args",
                    "range": [
                        1121,
                        1122
                    ],
                    "children": [],
                    "content": ",*"
                },
                {
                    "type": "Parameter",
                    "name": "**kwargs",
                    "range": [
                        1124,
                        1126
                    ],
                    "children": [],
                    "content": ",**"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1128,
                        1151
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return self.request(\"OPTIONS\", url, *args, **kwargs)",
                            "range": [
                                1135,
                                1151
                            ],
                            "children": [],
                            "content": "\nreturn self.request(\"OPTIONS\",url,*args,**kwargs)"
                        }
                    ],
                    "content": ")->req.Response:\nreturn self.request(\"OPTIONS\",url,*args,**kwargs)"
                }
            ],
            "content": "\ndef options(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"OPTIONS\",url,*args,**kwargs)"
        },
        {
            "type": "FunctionDecl",
            "name": "patch",
            "range": [
                1153,
                1190
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "self",
                    "range": [
                        1156,
                        1156
                    ],
                    "children": [],
                    "content": "("
                },
                {
                    "type": "Parameter",
                    "name": "url",
                    "range": [
                        1158,
                        1158
                    ],
                    "children": [],
                    "content": ","
                },
                {
                    "type": "Parameter",
                    "name": "*args",
                    "range": [
                        1160,
                        1161
                    ],
                    "children": [],
                    "content": ",*"
                },
                {
                    "type": "Parameter",
                    "name": "**kwargs",
                    "range": [
                        1163,
                        1165
                    ],
                    "children": [],
                    "content": ",**"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        1167,
                        1190
                    ],
                    "children": [
                        {
                            "type": "ReturnStatement",
                            "name": "return self.request(\"PATCH\", url, *args, **kwargs)",
                            "range": [
                                1174,
                                1190
                            ],
                            "children": [],
                            "content": "\nreturn self.request(\"PATCH\",url,*args,**kwargs)"
                        }
                    ],
                    "content": ")->req.Response:\nreturn self.request(\"PATCH\",url,*args,**kwargs)"
                }
            ],
            "content": "\ndef patch(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"PATCH\",url,*args,**kwargs)"
        },
        {
            "type": "VariableDeclaration",
            "name": "requests",
            "range": [
                1193,
                1204
            ],
            "children": [
                {
                    "type": "AssignmentExpression",
                    "name": "",
                    "range": [
                        1194,
                        1204
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "Requests",
                            "range": [
                                1195,
                                1204
                            ],
                            "children": [
                                {
                                    "type": "ObjectExpression",
                                    "name": "",
                                    "range": [
                                        1197,
                                        1203
                                    ],
                                    "children": [
                                        {
                                            "type": "Property",
                                            "name": "trusted_origins",
                                            "range": [
                                                1197,
                                                1203
                                            ],
                                            "children": [
                                                {
                                                    "type": "CallExpression",
                                                    "name": "Config",
                                                    "range": [
                                                        1199,
                                                        1201
                                                    ],
                                                    "children": [],
                                                    "content": "=Config("
                                                },
                                                {
                                                    "type": "MemberExpression",
                                                    "name": "trust_endpoints_for_requests",
                                                    "range": [
                                                        1202,
                                                        1203
                                                    ],
                                                    "children": [],
                                                    "content": ")."
                                                }
                                            ],
                                            "content": "(trusted_origins=Config()."
                                        }
                                    ],
                                    "content": "(trusted_origins=Config()."
                                }
                            ],
                            "content": "=Requests(trusted_origins=Config().trust_endpoints_for_requests"
                        }
                    ],
                    "content": "requests=Requests(trusted_origins=Config().trust_endpoints_for_requests"
                }
            ],
            "content": "\nrequests=Requests(trusted_origins=Config().trust_endpoints_for_requests"
        }
    ],
    "content": "#List of IP networks to block\nBLOCKED_IP_NETWORKS=[\n#--8<--[start:BLOCKED_IP_NETWORKS]\nipaddress.ip_network(\"0.0.0.0/8\"),#\"This\" Network\nipaddress.ip_network(\"10.0.0.0/8\"),#Private-Use\nipaddress.ip_network(\"127.0.0.0/8\"),#Loopback\nipaddress.ip_network(\"169.254.0.0/16\"),#Link Local\nipaddress.ip_network(\"172.16.0.0/12\"),#Private-Use\nipaddress.ip_network(\"192.168.0.0/16\"),#Private-Use\nipaddress.ip_network(\"224.0.0.0/4\"),#Multicast\nipaddress.ip_network(\"240.0.0.0/4\"),#Reserved for Future Use\n#--8<--[end:BLOCKED_IP_NETWORKS]\n]\n\nALLOWED_SCHEMES=[\"http\",\"https\"]\nHOSTNAME_REGEX=re.compile(r \"^[A-Za-z0-9.-]+$\")#Basic DNS-safe hostname pattern\n\n\ndef _canonicalize_url(url:str)->str:\n#Strip spaces and trailing slashes\nurl=url.strip().strip(\"/\")\n#Ensure the URL starts with http://or https://\nif not url.startswith((\"http://\",\"https://\")):\nurl=\"http://\"+url\n\n#Replace backslashes with forward slashes to avoid parsing ambiguities\nurl=url.replace(\"\\\\\",\"/\")\nreturn url\n\n\ndef _is_ip_blocked(ip:str)->bool:\n\"\"\" \\n     Checks if the IP address is in a blocked network. \\n     \"\"\"\nip_addr=ipaddress.ip_address(ip)\nreturn any(ip_addr in network for network in BLOCKED_IP_NETWORKS)\n\n\ndef validate_url(url:str,trusted_origins:list[str])->str:\n\"\"\" \\n     Validates the URL to prevent SSRF attacks by ensuring it does not point to a private \\n     or untrusted IP address, unless whitelisted. \\n     \"\"\"\nurl=_canonicalize_url(url)\nparsed=urlparse(url)\n\n#Check scheme\nif parsed.scheme not in ALLOWED_SCHEMES:\nraise ValueError(\nf \"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"\n)\n\n#Validate and IDNA encode the hostname\nif not parsed.hostname:\nraise ValueError(\"Invalid URL: No hostname found.\")\n\n#IDNA encode to prevent Unicode domain attacks\ntry:\nascii_hostname=idna.encode(parsed.hostname).decode(\"ascii\")\nexcept idna.IDNAError:\nraise ValueError(\"Invalid hostname with unsupported characters.\")\n\n#Check hostname characters\nif not HOSTNAME_REGEX.match(ascii_hostname):\nraise ValueError(\"Hostname contains invalid characters.\")\n\n#Rebuild the URL with the normalized,IDNA-encoded hostname\nparsed=parsed._replace(netloc=ascii_hostname)\nurl=str(urlunparse(parsed))\n\n#Check if hostname is a trusted origin(exact match)\nif ascii_hostname in trusted_origins:\nreturn url\n\n#Resolve all IP addresses for the hostname\ntry:\nip_addresses={res[4][0]for res in socket.getaddrinfo(ascii_hostname,None)}\nexcept socket.gaierror:\nraise ValueError(f \"Unable to resolve IP address for hostname {ascii_hostname}\")\n\nif not ip_addresses:\nraise ValueError(f \"No IP addresses found for {ascii_hostname}\")\n\n#Check if any resolved IP address falls into blocked ranges\nfor ip in ip_addresses:\nif _is_ip_blocked(ip):\nraise ValueError(\nf \"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n)\n\nreturn url\n\n\nclass Requests:\n\"\"\" \\n     A wrapper around the requests library that validates URLs before making requests. \\n     \"\"\"\n\ndef __init__(\nself,\ntrusted_origins:list[str]|None=None,\nraise_for_status:bool=True,\nextra_url_validator:Callable[[str],str]|None=None,\nextra_headers:dict[str,str]|None=None,\n):\nself.trusted_origins=[]\nfor url in trusted_origins or[]:\nhostname=urlparse(url).hostname\nif not hostname:\nraise ValueError(f \"Invalid URL: Unable to determine hostname of {url}\")\nself.trusted_origins.append(hostname)\n\nself.raise_for_status=raise_for_status\nself.extra_url_validator=extra_url_validator\nself.extra_headers=extra_headers\n\ndef request(\nself,method,url,headers=None,allow_redirects=False,*args,**kwargs\n)->req.Response:\nif self.extra_headers is not None:\nheaders={**(headers or{}),**self.extra_headers}\n\nurl=validate_url(url,self.trusted_origins)\nif self.extra_url_validator is not None:\nurl=self.extra_url_validator(url)\n\nresponse=req.request(\nmethod,\nurl,\nheaders=headers,\nallow_redirects=allow_redirects,\n*args,\n**kwargs,\n)\nif self.raise_for_status:\nresponse.raise_for_status()\n\nreturn response\n\ndef get(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"GET\",url,*args,**kwargs)\n\ndef post(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"POST\",url,*args,**kwargs)\n\ndef put(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"PUT\",url,*args,**kwargs)\n\ndef delete(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"DELETE\",url,*args,**kwargs)\n\ndef head(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"HEAD\",url,*args,**kwargs)\n\ndef options(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"OPTIONS\",url,*args,**kwargs)\n\ndef patch(self,url,*args,**kwargs)->req.Response:\nreturn self.request(\"PATCH\",url,*args,**kwargs)\n\n\nrequests=Requests(trusted_origins=Config().trust_endpoints_for_requests)\n"
}