{
    "type": "Program",
    "name": "Global",
    "range": [
        100,
        881
    ],
    "children": [
        {
            "type": "ClassDecl",
            "name": "SpinTestServer",
            "range": [
                100,
                142
            ],
            "children": [
                {
                    "type": "FunctionDecl",
                    "name": "__init__",
                    "range": [
                        104,
                        142
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "db_api",
                            "range": [
                                111,
                                117
                            ],
                            "children": [],
                            "content": "self.db_api=DatabaseManager()"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "exec_manager",
                            "range": [
                                119,
                                125
                            ],
                            "children": [],
                            "content": "self.exec_manager=ExecutionManager()"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "agent_server",
                            "range": [
                                127,
                                133
                            ],
                            "children": [],
                            "content": "self.agent_server=AgentServer()"
                        },
                        {
                            "type": "AssignmentExpression",
                            "name": "scheduler",
                            "range": [
                                135,
                                141
                            ],
                            "children": [],
                            "content": "self.scheduler=ExecutionScheduler()"
                        }
                    ],
                    "content": "def __init__(self):\nself.db_api=DatabaseManager()\nself.exec_manager=ExecutionManager()\nself.agent_server=AgentServer()\nself.scheduler=ExecutionScheduler()\n"
                }
            ],
            "content": "class SpinTestServer:\ndef __init__(self):\nself.db_api=DatabaseManager()\nself.exec_manager=ExecutionManager()\nself.agent_server=AgentServer()\nself.scheduler=ExecutionScheduler()\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_get_user_id",
            "range": [
                144,
                155
            ],
            "children": [
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        153,
                        154
                    ],
                    "children": [],
                    "content": "return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\""
                }
            ],
            "content": "@staticmethod\ndef test_get_user_id():\nreturn \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__aenter__",
            "range": [
                157,
                224
            ],
            "children": [
                {
                    "type": "ExpressionStatement",
                    "name": "setup_dependency_overrides",
                    "range": [
                        165,
                        169
                    ],
                    "children": [],
                    "content": "self.setup_dependency_overrides()"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "db_api.__enter__",
                    "range": [
                        171,
                        177
                    ],
                    "children": [],
                    "content": "self.db_api.__enter__()"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "agent_server.__enter__",
                    "range": [
                        179,
                        185
                    ],
                    "children": [],
                    "content": "self.agent_server.__enter__()"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "exec_manager.__enter__",
                    "range": [
                        187,
                        193
                    ],
                    "children": [],
                    "content": "self.exec_manager.__enter__()"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "scheduler.__enter__",
                    "range": [
                        195,
                        201
                    ],
                    "children": [],
                    "content": "self.scheduler.__enter__()"
                },
                {
                    "type": "AwaitExpression",
                    "name": "db.connect",
                    "range": [
                        204,
                        209
                    ],
                    "children": [],
                    "content": "await db.connect()"
                },
                {
                    "type": "AwaitExpression",
                    "name": "initialize_blocks",
                    "range": [
                        211,
                        214
                    ],
                    "children": [],
                    "content": "await initialize_blocks()"
                },
                {
                    "type": "AwaitExpression",
                    "name": "create_default_user",
                    "range": [
                        216,
                        219
                    ],
                    "children": [],
                    "content": "await create_default_user()"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        222,
                        223
                    ],
                    "children": [],
                    "content": "return self"
                }
            ],
            "content": "async def __aenter__(self):\nself.setup_dependency_overrides()\nself.db_api.__enter__()\nself.agent_server.__enter__()\nself.exec_manager.__enter__()\nself.scheduler.__enter__()\n\nawait db.connect()\nawait initialize_blocks()\nawait create_default_user()\n\nreturn self\n"
        },
        {
            "type": "FunctionDecl",
            "name": "__aexit__",
            "range": [
                226,
                299
            ],
            "children": [
                {
                    "type": "AwaitExpression",
                    "name": "db.disconnect",
                    "range": [
                        240,
                        245
                    ],
                    "children": [],
                    "content": "await db.disconnect()"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "scheduler.__exit__",
                    "range": [
                        248,
                        259
                    ],
                    "children": [],
                    "content": "self.scheduler.__exit__(exc_type,exc_val,exc_tb)"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "exec_manager.__exit__",
                    "range": [
                        261,
                        272
                    ],
                    "children": [],
                    "content": "self.exec_manager.__exit__(exc_type,exc_val,exc_tb)"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "agent_server.__exit__",
                    "range": [
                        274,
                        285
                    ],
                    "children": [],
                    "content": "self.agent_server.__exit__(exc_type,exc_val,exc_tb)"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "db_api.__exit__",
                    "range": [
                        287,
                        298
                    ],
                    "children": [],
                    "content": "self.db_api.__exit__(exc_type,exc_val,exc_tb)"
                }
            ],
            "content": "async def __aexit__(self,exc_type,exc_val,exc_tb):\nawait db.disconnect()\n\nself.scheduler.__exit__(exc_type,exc_val,exc_tb)\nself.exec_manager.__exit__(exc_type,exc_val,exc_tb)\nself.agent_server.__exit__(exc_type,exc_val,exc_tb)\nself.db_api.__exit__(exc_type,exc_val,exc_tb)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "setup_dependency_overrides",
            "range": [
                301,
                331
            ],
            "children": [
                {
                    "type": "ExpressionStatement",
                    "name": "agent_server.set_test_dependency_overrides",
                    "range": [
                        314,
                        329
                    ],
                    "children": [],
                    "content": "self.agent_server.set_test_dependency_overrides(\n{get_user_id:self.test_get_user_id}\n)"
                }
            ],
            "content": "def setup_dependency_overrides(self):\n#Override get_user_id for testing\nself.agent_server.set_test_dependency_overrides(\n{get_user_id:self.test_get_user_id}\n)\n\n"
        },
        {
            "type": "FunctionDecl",
            "name": "wait_execution",
            "range": [
                332,
                359
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "user_id",
                    "range": [
                        337,
                        339
                    ],
                    "content": "\nuser_id:"
                },
                {
                    "type": "Parameter",
                    "name": "graph_id",
                    "range": [
                        342,
                        344
                    ],
                    "content": "\ngraph_id:"
                },
                {
                    "type": "Parameter",
                    "name": "graph_exec_id",
                    "range": [
                        347,
                        349
                    ],
                    "content": "\ngraph_exec_id:"
                },
                {
                    "type": "Parameter",
                    "name": "timeout",
                    "range": [
                        352,
                        356
                    ],
                    "content": "\ntimeout:int="
                },
                {
                    "type": "ReturnType",
                    "name": "Sequence[ExecutionResult]",
                    "range": [
                        362,
                        365
                    ],
                    "content": ">Sequence[ExecutionResult"
                }
            ],
            "content": "\nasync def wait_execution(\nuser_id:str,\ngraph_id:str,\ngraph_exec_id:str,\ntimeout:int=20,\n"
        },
        {
            "type": "FunctionDecl",
            "name": "is_execution_completed",
            "range": [
                368,
                426
            ],
            "children": [
                {
                    "type": "ExpressionStatement",
                    "name": "status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)",
                    "range": [
                        375,
                        387
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "AgentServer().test_get_graph_run_status",
                            "range": [
                                375,
                                387
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "graph_exec_id",
                                    "range": [
                                        375,
                                        387
                                    ],
                                    "content": "\nstatus=await AgentServer().test_get_graph_run_status(graph_exec_id,user_id"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "user_id",
                                    "range": [
                                        375,
                                        387
                                    ],
                                    "content": "\nstatus=await AgentServer().test_get_graph_run_status(graph_exec_id,user_id"
                                }
                            ],
                            "content": "\nstatus=await AgentServer().test_get_graph_run_status(graph_exec_id,user_id"
                        }
                    ],
                    "content": "\nstatus=await AgentServer().test_get_graph_run_status(graph_exec_id,user_id"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "log.info(f\"Execution status: {status}\")",
                    "range": [
                        389,
                        395
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "log.info",
                            "range": [
                                389,
                                395
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "f\"Execution status: {status}\"",
                                    "range": [
                                        389,
                                        395
                                    ],
                                    "content": "\nlog.info(f \"Execution status: {status}\""
                                }
                            ],
                            "content": "\nlog.info(f \"Execution status: {status}\""
                        }
                    ],
                    "content": "\nlog.info(f \"Execution status: {status}\""
                },
                {
                    "type": "IfStatement",
                    "name": "if status == ExecutionStatus.FAILED",
                    "range": [
                        397,
                        404
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "status == ExecutionStatus.FAILED",
                            "range": [
                                397,
                                404
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "status",
                                    "range": [
                                        397,
                                        404
                                    ],
                                    "content": "\nif status==ExecutionStatus.FAILED"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "ExecutionStatus.FAILED",
                                    "range": [
                                        397,
                                        404
                                    ],
                                    "content": "\nif status==ExecutionStatus.FAILED"
                                }
                            ],
                            "content": "\nif status==ExecutionStatus.FAILED"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "log.info(\"Execution failed\")",
                            "range": [
                                406,
                                411
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "log.info",
                                    "range": [
                                        406,
                                        411
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"Execution failed\"",
                                            "range": [
                                                406,
                                                411
                                            ],
                                            "content": "\nlog.info(\"Execution failed\""
                                        }
                                    ],
                                    "content": "\nlog.info(\"Execution failed\""
                                }
                            ],
                            "content": "\nlog.info(\"Execution failed\""
                        },
                        {
                            "type": "ThrowStatement",
                            "name": "raise Exception(\"Execution failed\")",
                            "range": [
                                413,
                                417
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "Exception",
                                    "range": [
                                        413,
                                        417
                                    ],
                                    "children": [
                                        {
                                            "type": "Literal",
                                            "name": "\"Execution failed\"",
                                            "range": [
                                                413,
                                                417
                                            ],
                                            "content": "\nraise Exception(\"Execution failed\""
                                        }
                                    ],
                                    "content": "\nraise Exception(\"Execution failed\""
                                }
                            ],
                            "content": "\nraise Exception(\"Execution failed\""
                        }
                    ],
                    "content": "\nif status==ExecutionStatus.FAILED"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return status == ExecutionStatus.COMPLETED",
                    "range": [
                        419,
                        426
                    ],
                    "children": [
                        {
                            "type": "BinaryExpression",
                            "name": "status == ExecutionStatus.COMPLETED",
                            "range": [
                                419,
                                426
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "status",
                                    "range": [
                                        419,
                                        426
                                    ],
                                    "content": "\nreturn status==ExecutionStatus.COMPLETED"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "ExecutionStatus.COMPLETED",
                                    "range": [
                                        419,
                                        426
                                    ],
                                    "content": "\nreturn status==ExecutionStatus.COMPLETED"
                                }
                            ],
                            "content": "\nreturn status==ExecutionStatus.COMPLETED"
                        }
                    ],
                    "content": "\nreturn status==ExecutionStatus.COMPLETED"
                }
            ],
            "content": "\nasync def is_execution_completed():\nstatus=await AgentServer().test_get_graph_run_status(graph_exec_id,user_id)\nlog.info(f \"Execution status: {status}\")\nif status==ExecutionStatus.FAILED:\nlog.info(\"Execution failed\")\nraise Exception(\"Execution failed\")\nreturn status==ExecutionStatus.COMPLETED"
        },
        {
            "type": "ForStatement",
            "name": "for i in range(timeout)",
            "range": [
                436,
                442
            ],
            "children": [
                {
                    "type": "IfStatement",
                    "name": "if await is_execution_completed()",
                    "range": [
                        445,
                        450
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "is_execution_completed",
                            "range": [
                                445,
                                450
                            ],
                            "content": "\nif await is_execution_completed()"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return await AgentServer().test_get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)",
                            "range": [
                                452,
                                467
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "AgentServer().test_get_graph_run_node_execution_results",
                                    "range": [
                                        452,
                                        467
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "graph_id",
                                            "range": [
                                                452,
                                                467
                                            ],
                                            "content": "\nreturn await AgentServer().test_get_graph_run_node_execution_results(\ngraph_id,graph_exec_id,user_id\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "graph_exec_id",
                                            "range": [
                                                452,
                                                467
                                            ],
                                            "content": "\nreturn await AgentServer().test_get_graph_run_node_execution_results(\ngraph_id,graph_exec_id,user_id\n"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "user_id",
                                            "range": [
                                                452,
                                                467
                                            ],
                                            "content": "\nreturn await AgentServer().test_get_graph_run_node_execution_results(\ngraph_id,graph_exec_id,user_id\n"
                                        }
                                    ],
                                    "content": "\nreturn await AgentServer().test_get_graph_run_node_execution_results(\ngraph_id,graph_exec_id,user_id\n"
                                }
                            ],
                            "content": "\nreturn await AgentServer().test_get_graph_run_node_execution_results(\ngraph_id,graph_exec_id,user_id\n"
                        }
                    ],
                    "content": "\nif await is_execution_completed()"
                },
                {
                    "type": "ExpressionStatement",
                    "name": "time.sleep(1)",
                    "range": [
                        469,
                        474
                    ],
                    "children": [
                        {
                            "type": "CallExpression",
                            "name": "time.sleep",
                            "range": [
                                469,
                                474
                            ],
                            "children": [
                                {
                                    "type": "Literal",
                                    "name": "1",
                                    "range": [
                                        469,
                                        474
                                    ],
                                    "content": "\ntime.sleep(1"
                                }
                            ],
                            "content": "\ntime.sleep(1"
                        }
                    ],
                    "content": "\ntime.sleep(1"
                }
            ],
            "content": "\nfor i in range(timeout"
        },
        {
            "type": "AssertStatement",
            "name": "assert False, \"Execution did not complete in time.\"",
            "range": [
                477,
                481
            ],
            "children": [
                {
                    "type": "Literal",
                    "name": "False",
                    "range": [
                        477,
                        481
                    ],
                    "content": "\nassert False,\"Execution did not complete in time.\""
                },
                {
                    "type": "Literal",
                    "name": "\"Execution did not complete in time.\"",
                    "range": [
                        477,
                        481
                    ],
                    "content": "\nassert False,\"Execution did not complete in time.\""
                }
            ],
            "content": "\nassert False,\"Execution did not complete in time.\""
        },
        {
            "type": "FunctionDecl",
            "name": "execute_block_test",
            "range": [
                483,
                881
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "block",
                    "range": [
                        486,
                        488
                    ],
                    "children": [],
                    "content": "execute_block_test(block"
                },
                {
                    "type": "Block",
                    "name": "FunctionBody",
                    "range": [
                        491,
                        881
                    ],
                    "children": [
                        {
                            "type": "Assignment",
                            "name": "prefix",
                            "range": [
                                492,
                                495
                            ],
                            "children": [],
                            "content": ":\nprefix="
                        },
                        {
                            "type": "IfStatement",
                            "name": "IfNoTestData",
                            "range": [
                                498,
                                519
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "NoTestData",
                                    "range": [
                                        499,
                                        507
                                    ],
                                    "children": [],
                                    "content": "\nif not block.test_input or not block"
                                },
                                {
                                    "type": "Block",
                                    "name": "IfBody",
                                    "range": [
                                        509,
                                        519
                                    ],
                                    "children": [
                                        {
                                            "type": "LogStatement",
                                            "name": "LogNoTestData",
                                            "range": [
                                                510,
                                                516
                                            ],
                                            "children": [],
                                            "content": ":\nlog.info(f"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "name": "Return",
                                            "range": [
                                                518,
                                                519
                                            ],
                                            "children": [],
                                            "content": ")\n"
                                        }
                                    ],
                                    "content": "test_output:\nlog.info(f \"{prefix} No test data provided\")\n"
                                }
                            ],
                            "content": "\n\nif not block.test_input or not block.test_output:\nlog.info(f \"{prefix} No test data provided\")\n"
                        },
                        {
                            "type": "IfStatement",
                            "name": "IfTestInputNotList",
                            "range": [
                                520,
                                541
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "TestInputNotList",
                                    "range": [
                                        521,
                                        529
                                    ],
                                    "children": [],
                                    "content": "\nif not isinstance(block.test_input,"
                                },
                                {
                                    "type": "Block",
                                    "name": "IfBody",
                                    "range": [
                                        531,
                                        541
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "ConvertTestInputToList",
                                            "range": [
                                                532,
                                                540
                                            ],
                                            "children": [],
                                            "content": ":\nblock.test_input=[block."
                                        }
                                    ],
                                    "content": "):\nblock.test_input=[block.test_input"
                                }
                            ],
                            "content": "return\nif not isinstance(block.test_input,list):\nblock.test_input=[block.test_input"
                        },
                        {
                            "type": "IfStatement",
                            "name": "IfTestOutputNotList",
                            "range": [
                                542,
                                563
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "TestOutputNotList",
                                    "range": [
                                        543,
                                        551
                                    ],
                                    "children": [],
                                    "content": "\nif not isinstance(block.test_output,"
                                },
                                {
                                    "type": "Block",
                                    "name": "IfBody",
                                    "range": [
                                        553,
                                        563
                                    ],
                                    "children": [
                                        {
                                            "type": "Assignment",
                                            "name": "ConvertTestOutputToList",
                                            "range": [
                                                554,
                                                562
                                            ],
                                            "children": [],
                                            "content": ":\nblock.test_output=[block."
                                        }
                                    ],
                                    "content": "):\nblock.test_output=[block.test_output"
                                }
                            ],
                            "content": "]\nif not isinstance(block.test_output,list):\nblock.test_output=[block.test_output"
                        },
                        {
                            "type": "Assignment",
                            "name": "output_index",
                            "range": [
                                565,
                                567
                            ],
                            "children": [],
                            "content": "\n\noutput_index"
                        },
                        {
                            "type": "LogStatement",
                            "name": "LogExecutingTests",
                            "range": [
                                569,
                                575
                            ],
                            "children": [],
                            "content": "0\nlog.info(f"
                        },
                        {
                            "type": "Assignment",
                            "name": "prefix",
                            "range": [
                                577,
                                583
                            ],
                            "children": [],
                            "content": ")\nprefix=\" \"*4"
                        },
                        {
                            "type": "ForStatement",
                            "name": "ForMockItems",
                            "range": [
                                586,
                                641
                            ],
                            "children": [
                                {
                                    "type": "Initialization",
                                    "name": "mock_name, mock_obj",
                                    "range": [
                                        587,
                                        589
                                    ],
                                    "children": [],
                                    "content": "\nfor mock_name"
                                },
                                {
                                    "type": "Condition",
                                    "name": "block.test_mock.items()",
                                    "range": [
                                        591,
                                        602
                                    ],
                                    "children": [],
                                    "content": "mock_obj in(block.test_mock or{}).items"
                                },
                                {
                                    "type": "Block",
                                    "name": "ForBody",
                                    "range": [
                                        604,
                                        641
                                    ],
                                    "children": [
                                        {
                                            "type": "LogStatement",
                                            "name": "LogMocking",
                                            "range": [
                                                605,
                                                611
                                            ],
                                            "children": [],
                                            "content": ":\nlog.info(f"
                                        },
                                        {
                                            "type": "IfStatement",
                                            "name": "IfHasAttr",
                                            "range": [
                                                613,
                                                630
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "hasattr(block, mock_name)",
                                                    "range": [
                                                        614,
                                                        619
                                                    ],
                                                    "children": [],
                                                    "content": "\nif hasattr(block,"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "IfBody",
                                                    "range": [
                                                        621,
                                                        630
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "SetAttrStatement",
                                                            "name": "SetMockObj",
                                                            "range": [
                                                                622,
                                                                629
                                                            ],
                                                            "children": [],
                                                            "content": ":\nsetattr(block,mock_name,"
                                                        }
                                                    ],
                                                    "content": "):\nsetattr(block,mock_name,mock_obj"
                                                }
                                            ],
                                            "content": ")\nif hasattr(block,mock_name):\nsetattr(block,mock_name,mock_obj"
                                        },
                                        {
                                            "type": "ElseStatement",
                                            "name": "Else",
                                            "range": [
                                                631,
                                                641
                                            ],
                                            "children": [
                                                {
                                                    "type": "Block",
                                                    "name": "ElseBody",
                                                    "range": [
                                                        633,
                                                        641
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "LogStatement",
                                                            "name": "LogMockNotFound",
                                                            "range": [
                                                                634,
                                                                640
                                                            ],
                                                            "children": [],
                                                            "content": ":\nlog.info(f"
                                                        }
                                                    ],
                                                    "content": "else:\nlog.info(f \"{prefix} mock {mock_name} not found in block\""
                                                }
                                            ],
                                            "content": ")\nelse:\nlog.info(f \"{prefix} mock {mock_name} not found in block\""
                                        }
                                    ],
                                    "content": "):\nlog.info(f \"{prefix} mocking {mock_name}...\")\nif hasattr(block,mock_name):\nsetattr(block,mock_name,mock_obj)\nelse:\nlog.info(f \"{prefix} mock {mock_name} not found in block\""
                                }
                            ],
                            "content": "\n\nfor mock_name,mock_obj in(block.test_mock or{}).items():\nlog.info(f \"{prefix} mocking {mock_name}...\")\nif hasattr(block,mock_name):\nsetattr(block,mock_name,mock_obj)\nelse:\nlog.info(f \"{prefix} mock {mock_name} not found in block\""
                        },
                        {
                            "type": "Assignment",
                            "name": "extra_exec_kwargs",
                            "range": [
                                643,
                                646
                            ],
                            "children": [],
                            "content": "\n\nextra_exec_kwargs="
                        },
                        {
                            "type": "IfStatement",
                            "name": "IfCredentialsRequired",
                            "range": [
                                649,
                                683
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "CREDENTIALS_FIELD_NAME in block.input_schema.model_fields",
                                    "range": [
                                        650,
                                        656
                                    ],
                                    "children": [],
                                    "content": "\nif CREDENTIALS_FIELD_NAME in block.input_schema"
                                },
                                {
                                    "type": "Block",
                                    "name": "IfBody",
                                    "range": [
                                        658,
                                        683
                                    ],
                                    "children": [
                                        {
                                            "type": "IfStatement",
                                            "name": "IfNoTestCredentials",
                                            "range": [
                                                659,
                                                673
                                            ],
                                            "children": [
                                                {
                                                    "type": "Condition",
                                                    "name": "not block.test_credentials",
                                                    "range": [
                                                        660,
                                                        663
                                                    ],
                                                    "children": [],
                                                    "content": "\nif not block"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "IfBody",
                                                    "range": [
                                                        665,
                                                        673
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "RaiseStatement",
                                                            "name": "RaiseValueError",
                                                            "range": [
                                                                666,
                                                                672
                                                            ],
                                                            "children": [],
                                                            "content": ":\nraise ValueError(\nf"
                                                        }
                                                    ],
                                                    "content": "test_credentials:\nraise ValueError(\nf \"{prefix} requires credentials but has no test_credentials\""
                                                }
                                            ],
                                            "content": ":\nif not block.test_credentials:\nraise ValueError(\nf \"{prefix} requires credentials but has no test_credentials\""
                                        },
                                        {
                                            "type": "Assignment",
                                            "name": "SetExtraExecKwargs",
                                            "range": [
                                                675,
                                                682
                                            ],
                                            "children": [],
                                            "content": ")\nextra_exec_kwargs[CREDENTIALS_FIELD_NAME]=block"
                                        }
                                    ],
                                    "content": "model_fields:\nif not block.test_credentials:\nraise ValueError(\nf \"{prefix} requires credentials but has no test_credentials\"\n)\nextra_exec_kwargs[CREDENTIALS_FIELD_NAME]=block."
                                }
                            ],
                            "content": "\n\nif CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\nif not block.test_credentials:\nraise ValueError(\nf \"{prefix} requires credentials but has no test_credentials\"\n)\nextra_exec_kwargs[CREDENTIALS_FIELD_NAME]=block."
                        },
                        {
                            "type": "ForStatement",
                            "name": "ForTestInput",
                            "range": [
                                685,
                                859
                            ],
                            "children": [
                                {
                                    "type": "Initialization",
                                    "name": "input_data",
                                    "range": [
                                        686,
                                        687
                                    ],
                                    "children": [],
                                    "content": "\nfor"
                                },
                                {
                                    "type": "Condition",
                                    "name": "block.test_input",
                                    "range": [
                                        688,
                                        690
                                    ],
                                    "children": [],
                                    "content": "input_data in block"
                                },
                                {
                                    "type": "Block",
                                    "name": "ForBody",
                                    "range": [
                                        692,
                                        859
                                    ],
                                    "children": [
                                        {
                                            "type": "LogStatement",
                                            "name": "LogInputData",
                                            "range": [
                                                693,
                                                699
                                            ],
                                            "children": [],
                                            "content": ":\nlog.info(f"
                                        },
                                        {
                                            "type": "ForStatement",
                                            "name": "ForExecuteOutput",
                                            "range": [
                                                702,
                                                859
                                            ],
                                            "children": [
                                                {
                                                    "type": "Initialization",
                                                    "name": "output_name, output_data",
                                                    "range": [
                                                        703,
                                                        705
                                                    ],
                                                    "children": [],
                                                    "content": "\nfor output_name"
                                                },
                                                {
                                                    "type": "Condition",
                                                    "name": "block.execute(input_data, **extra_exec_kwargs)",
                                                    "range": [
                                                        707,
                                                        716
                                                    ],
                                                    "children": [],
                                                    "content": "output_data in block.execute(input_data,**"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "ForBody",
                                                    "range": [
                                                        718,
                                                        859
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "IfStatement",
                                                            "name": "IfOutputIndexExceeds",
                                                            "range": [
                                                                719,
                                                                737
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Condition",
                                                                    "name": "output_index >= len(block.test_output)",
                                                                    "range": [
                                                                        720,
                                                                        728
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nif output_index>=len(block."
                                                                },
                                                                {
                                                                    "type": "Block",
                                                                    "name": "IfBody",
                                                                    "range": [
                                                                        730,
                                                                        737
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "RaiseStatement",
                                                                            "name": "RaiseValueError",
                                                                            "range": [
                                                                                731,
                                                                                736
                                                                            ],
                                                                            "children": [],
                                                                            "content": ":\nraise ValueError(f"
                                                                        }
                                                                    ],
                                                                    "content": "):\nraise ValueError(f \"{prefix} produced output more than expected\""
                                                                }
                                                            ],
                                                            "content": ":\nif output_index>=len(block.test_output):\nraise ValueError(f \"{prefix} produced output more than expected\""
                                                        },
                                                        {
                                                            "type": "Assignment",
                                                            "name": "ex_output_name, ex_output_data",
                                                            "range": [
                                                                738,
                                                                748
                                                            ],
                                                            "children": [],
                                                            "content": ")\nex_output_name,ex_output_data=block.test_output[output_index"
                                                        },
                                                        {
                                                            "type": "FunctionDecl",
                                                            "name": "compare",
                                                            "range": [
                                                                750,
                                                                839
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Parameter",
                                                                    "name": "data",
                                                                    "range": [
                                                                        753,
                                                                        754
                                                                    ],
                                                                    "children": [],
                                                                    "content": "compare("
                                                                },
                                                                {
                                                                    "type": "Parameter",
                                                                    "name": "expected_data",
                                                                    "range": [
                                                                        755,
                                                                        756
                                                                    ],
                                                                    "children": [],
                                                                    "content": "data,"
                                                                },
                                                                {
                                                                    "type": "Block",
                                                                    "name": "FunctionBody",
                                                                    "range": [
                                                                        758,
                                                                        839
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "IfStatement",
                                                                            "name": "IfDataEqualsExpected",
                                                                            "range": [
                                                                                760,
                                                                                769
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Condition",
                                                                                    "name": "data == expected_data",
                                                                                    "range": [
                                                                                        761,
                                                                                        763
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "if data="
                                                                                },
                                                                                {
                                                                                    "type": "Block",
                                                                                    "name": "IfBody",
                                                                                    "range": [
                                                                                        765,
                                                                                        769
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Assignment",
                                                                                            "name": "is_matching",
                                                                                            "range": [
                                                                                                766,
                                                                                                768
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": ":\nis_matching"
                                                                                        }
                                                                                    ],
                                                                                    "content": "expected_data:\nis_matching="
                                                                                }
                                                                            ],
                                                                            "content": "\nif data==expected_data:\nis_matching="
                                                                        },
                                                                        {
                                                                            "type": "ElseIfStatement",
                                                                            "name": "ElseIfExpectedIsType",
                                                                            "range": [
                                                                                771,
                                                                                787
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Condition",
                                                                                    "name": "isinstance(expected_data, type)",
                                                                                    "range": [
                                                                                        772,
                                                                                        776
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "elif isinstance(expected_data,"
                                                                                },
                                                                                {
                                                                                    "type": "Block",
                                                                                    "name": "ElseIfBody",
                                                                                    "range": [
                                                                                        778,
                                                                                        787
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Assignment",
                                                                                            "name": "is_matching",
                                                                                            "range": [
                                                                                                779,
                                                                                                786
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": ":\nis_matching=isinstance(data,"
                                                                                        }
                                                                                    ],
                                                                                    "content": "):\nis_matching=isinstance(data,expected_data"
                                                                                }
                                                                            ],
                                                                            "content": "\nelif isinstance(expected_data,type):\nis_matching=isinstance(data,expected_data"
                                                                        },
                                                                        {
                                                                            "type": "ElseIfStatement",
                                                                            "name": "ElseIfExpectedIsCallable",
                                                                            "range": [
                                                                                789,
                                                                                801
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Condition",
                                                                                    "name": "callable(expected_data)",
                                                                                    "range": [
                                                                                        790,
                                                                                        792
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "elif callable("
                                                                                },
                                                                                {
                                                                                    "type": "Block",
                                                                                    "name": "ElseIfBody",
                                                                                    "range": [
                                                                                        794,
                                                                                        801
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Assignment",
                                                                                            "name": "is_matching",
                                                                                            "range": [
                                                                                                795,
                                                                                                800
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": ":\nis_matching=expected_data("
                                                                                        }
                                                                                    ],
                                                                                    "content": "):\nis_matching=expected_data(data"
                                                                                }
                                                                            ],
                                                                            "content": "\nelif callable(expected_data):\nis_matching=expected_data(data"
                                                                        },
                                                                        {
                                                                            "type": "ElseStatement",
                                                                            "name": "Else",
                                                                            "range": [
                                                                                803,
                                                                                808
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Block",
                                                                                    "name": "ElseBody",
                                                                                    "range": [
                                                                                        805,
                                                                                        808
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "Assignment",
                                                                                            "name": "is_matching",
                                                                                            "range": [
                                                                                                806,
                                                                                                807
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": "\nis_matching"
                                                                                        }
                                                                                    ],
                                                                                    "content": ":\nis_matching="
                                                                                }
                                                                            ],
                                                                            "content": "\nelse:\nis_matching="
                                                                        },
                                                                        {
                                                                            "type": "Assignment",
                                                                            "name": "mark",
                                                                            "range": [
                                                                                810,
                                                                                816
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\n\nmark=\"✅\"if is_matching"
                                                                        },
                                                                        {
                                                                            "type": "LogStatement",
                                                                            "name": "LogComparison",
                                                                            "range": [
                                                                                818,
                                                                                824
                                                                            ],
                                                                            "children": [],
                                                                            "content": "\"❌\"\nlog.info(f"
                                                                        },
                                                                        {
                                                                            "type": "IfStatement",
                                                                            "name": "IfNotMatching",
                                                                            "range": [
                                                                                826,
                                                                                838
                                                                            ],
                                                                            "children": [
                                                                                {
                                                                                    "type": "Condition",
                                                                                    "name": "not is_matching",
                                                                                    "range": [
                                                                                        827,
                                                                                        828
                                                                                    ],
                                                                                    "children": [],
                                                                                    "content": "\nif"
                                                                                },
                                                                                {
                                                                                    "type": "Block",
                                                                                    "name": "IfBody",
                                                                                    "range": [
                                                                                        830,
                                                                                        838
                                                                                    ],
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "RaiseStatement",
                                                                                            "name": "RaiseValueError",
                                                                                            "range": [
                                                                                                831,
                                                                                                837
                                                                                            ],
                                                                                            "children": [],
                                                                                            "content": ":\nraise ValueError(\nf"
                                                                                        }
                                                                                    ],
                                                                                    "content": "is_matching:\nraise ValueError(\nf \"{prefix}: wrong output {data} vs {expected_data}\""
                                                                                }
                                                                            ],
                                                                            "content": ")\nif not is_matching:\nraise ValueError(\nf \"{prefix}: wrong output {data} vs {expected_data}\""
                                                                        }
                                                                    ],
                                                                    "content": "):\nif data==expected_data:\nis_matching=True\nelif isinstance(expected_data,type):\nis_matching=isinstance(data,expected_data)\nelif callable(expected_data):\nis_matching=expected_data(data)\nelse:\nis_matching=False\n\nmark=\"✅\"if is_matching else\"❌\"\nlog.info(f \"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\nif not is_matching:\nraise ValueError(\nf \"{prefix}: wrong output {data} vs {expected_data}\"\n"
                                                                }
                                                            ],
                                                            "content": "\n\ndef compare(data,expected_data):\nif data==expected_data:\nis_matching=True\nelif isinstance(expected_data,type):\nis_matching=isinstance(data,expected_data)\nelif callable(expected_data):\nis_matching=expected_data(data)\nelse:\nis_matching=False\n\nmark=\"✅\"if is_matching else\"❌\"\nlog.info(f \"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\nif not is_matching:\nraise ValueError(\nf \"{prefix}: wrong output {data} vs {expected_data}\"\n"
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "compare",
                                                            "range": [
                                                                841,
                                                                846
                                                            ],
                                                            "children": [],
                                                            "content": "\n\ncompare(output_data,"
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "name": "compare",
                                                            "range": [
                                                                848,
                                                                853
                                                            ],
                                                            "children": [],
                                                            "content": ")\ncompare(output_name,"
                                                        },
                                                        {
                                                            "type": "Assignment",
                                                            "name": "IncrementOutputIndex",
                                                            "range": [
                                                                855,
                                                                858
                                                            ],
                                                            "children": [],
                                                            "content": ")\noutput_index+"
                                                        }
                                                    ],
                                                    "content": "):\nif output_index>=len(block.test_output):\nraise ValueError(f \"{prefix} produced output more than expected\")\nex_output_name,ex_output_data=block.test_output[output_index]\n\ndef compare(data,expected_data):\nif data==expected_data:\nis_matching=True\nelif isinstance(expected_data,type):\nis_matching=isinstance(data,expected_data)\nelif callable(expected_data):\nis_matching=expected_data(data)\nelse:\nis_matching=False\n\nmark=\"✅\"if is_matching else\"❌\"\nlog.info(f \"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\nif not is_matching:\nraise ValueError(\nf \"{prefix}: wrong output {data} vs {expected_data}\"\n)\n\ncompare(output_data,ex_output_data)\ncompare(output_name,ex_output_name)\noutput_index+="
                                                }
                                            ],
                                            "content": "\n\nfor output_name,output_data in block.execute(input_data,**extra_exec_kwargs):\nif output_index>=len(block.test_output):\nraise ValueError(f \"{prefix} produced output more than expected\")\nex_output_name,ex_output_data=block.test_output[output_index]\n\ndef compare(data,expected_data):\nif data==expected_data:\nis_matching=True\nelif isinstance(expected_data,type):\nis_matching=isinstance(data,expected_data)\nelif callable(expected_data):\nis_matching=expected_data(data)\nelse:\nis_matching=False\n\nmark=\"✅\"if is_matching else\"❌\"\nlog.info(f \"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\nif not is_matching:\nraise ValueError(\nf \"{prefix}: wrong output {data} vs {expected_data}\"\n)\n\ncompare(output_data,ex_output_data)\ncompare(output_name,ex_output_name)\noutput_index+="
                                        }
                                    ],
                                    "content": "test_input:\nlog.info(f \"{prefix} in: {input_data}\")\n\nfor output_name,output_data in block.execute(input_data,**extra_exec_kwargs):\nif output_index>=len(block.test_output):\nraise ValueError(f \"{prefix} produced output more than expected\")\nex_output_name,ex_output_data=block.test_output[output_index]\n\ndef compare(data,expected_data):\nif data==expected_data:\nis_matching=True\nelif isinstance(expected_data,type):\nis_matching=isinstance(data,expected_data)\nelif callable(expected_data):\nis_matching=expected_data(data)\nelse:\nis_matching=False\n\nmark=\"✅\"if is_matching else\"❌\"\nlog.info(f \"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\nif not is_matching:\nraise ValueError(\nf \"{prefix}: wrong output {data} vs {expected_data}\"\n)\n\ncompare(output_data,ex_output_data)\ncompare(output_name,ex_output_name)\noutput_index+="
                                }
                            ],
                            "content": "\n\nfor input_data in block.test_input:\nlog.info(f \"{prefix} in: {input_data}\")\n\nfor output_name,output_data in block.execute(input_data,**extra_exec_kwargs):\nif output_index>=len(block.test_output):\nraise ValueError(f \"{prefix} produced output more than expected\")\nex_output_name,ex_output_data=block.test_output[output_index]\n\ndef compare(data,expected_data):\nif data==expected_data:\nis_matching=True\nelif isinstance(expected_data,type):\nis_matching=isinstance(data,expected_data)\nelif callable(expected_data):\nis_matching=expected_data(data)\nelse:\nis_matching=False\n\nmark=\"✅\"if is_matching else\"❌\"\nlog.info(f \"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\nif not is_matching:\nraise ValueError(\nf \"{prefix}: wrong output {data} vs {expected_data}\"\n)\n\ncompare(output_data,ex_output_data)\ncompare(output_name,ex_output_name)\noutput_index+="
                        },
                        {
                            "type": "IfStatement",
                            "name": "IfOutputIndexLessThanExpected",
                            "range": [
                                861,
                                879
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "output_index < len(block.test_output)",
                                    "range": [
                                        862,
                                        869
                                    ],
                                    "children": [],
                                    "content": "\nif output_index<len(block."
                                },
                                {
                                    "type": "Block",
                                    "name": "IfBody",
                                    "range": [
                                        871,
                                        879
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "RaiseValueError",
                                            "range": [
                                                872,
                                                878
                                            ],
                                            "children": [],
                                            "content": ":\nraise ValueError(\nf"
                                        }
                                    ],
                                    "content": "):\nraise ValueError(\nf \"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\""
                                }
                            ],
                            "content": "\n\nif output_index<len(block.test_output):\nraise ValueError(\nf \"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\""
                        }
                    ],
                    "content": "):\nprefix=f \"[Test-{block.name}]\"\n\nif not block.test_input or not block.test_output:\nlog.info(f \"{prefix} No test data provided\")\nreturn\nif not isinstance(block.test_input,list):\nblock.test_input=[block.test_input]\nif not isinstance(block.test_output,list):\nblock.test_output=[block.test_output]\n\noutput_index=0\nlog.info(f \"{prefix} Executing {len(block.test_input)} tests...\")\nprefix=\" \"*4+prefix\n\nfor mock_name,mock_obj in(block.test_mock or{}).items():\nlog.info(f \"{prefix} mocking {mock_name}...\")\nif hasattr(block,mock_name):\nsetattr(block,mock_name,mock_obj)\nelse:\nlog.info(f \"{prefix} mock {mock_name} not found in block\")\n\nextra_exec_kwargs={}\n\nif CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\nif not block.test_credentials:\nraise ValueError(\nf \"{prefix} requires credentials but has no test_credentials\"\n)\nextra_exec_kwargs[CREDENTIALS_FIELD_NAME]=block.test_credentials\n\nfor input_data in block.test_input:\nlog.info(f \"{prefix} in: {input_data}\")\n\nfor output_name,output_data in block.execute(input_data,**extra_exec_kwargs):\nif output_index>=len(block.test_output):\nraise ValueError(f \"{prefix} produced output more than expected\")\nex_output_name,ex_output_data=block.test_output[output_index]\n\ndef compare(data,expected_data):\nif data==expected_data:\nis_matching=True\nelif isinstance(expected_data,type):\nis_matching=isinstance(data,expected_data)\nelif callable(expected_data):\nis_matching=expected_data(data)\nelse:\nis_matching=False\n\nmark=\"✅\"if is_matching else\"❌\"\nlog.info(f \"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\nif not is_matching:\nraise ValueError(\nf \"{prefix}: wrong output {data} vs {expected_data}\"\n)\n\ncompare(output_data,ex_output_data)\ncompare(output_name,ex_output_name)\noutput_index+=1\n\nif output_index<len(block.test_output):\nraise ValueError(\nf \"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n)"
                }
            ],
            "content": "\n\ndef execute_block_test(block:Block):\nprefix=f \"[Test-{block.name}]\"\n\nif not block.test_input or not block.test_output:\nlog.info(f \"{prefix} No test data provided\")\nreturn\nif not isinstance(block.test_input,list):\nblock.test_input=[block.test_input]\nif not isinstance(block.test_output,list):\nblock.test_output=[block.test_output]\n\noutput_index=0\nlog.info(f \"{prefix} Executing {len(block.test_input)} tests...\")\nprefix=\" \"*4+prefix\n\nfor mock_name,mock_obj in(block.test_mock or{}).items():\nlog.info(f \"{prefix} mocking {mock_name}...\")\nif hasattr(block,mock_name):\nsetattr(block,mock_name,mock_obj)\nelse:\nlog.info(f \"{prefix} mock {mock_name} not found in block\")\n\nextra_exec_kwargs={}\n\nif CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\nif not block.test_credentials:\nraise ValueError(\nf \"{prefix} requires credentials but has no test_credentials\"\n)\nextra_exec_kwargs[CREDENTIALS_FIELD_NAME]=block.test_credentials\n\nfor input_data in block.test_input:\nlog.info(f \"{prefix} in: {input_data}\")\n\nfor output_name,output_data in block.execute(input_data,**extra_exec_kwargs):\nif output_index>=len(block.test_output):\nraise ValueError(f \"{prefix} produced output more than expected\")\nex_output_name,ex_output_data=block.test_output[output_index]\n\ndef compare(data,expected_data):\nif data==expected_data:\nis_matching=True\nelif isinstance(expected_data,type):\nis_matching=isinstance(data,expected_data)\nelif callable(expected_data):\nis_matching=expected_data(data)\nelse:\nis_matching=False\n\nmark=\"✅\"if is_matching else\"❌\"\nlog.info(f \"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\nif not is_matching:\nraise ValueError(\nf \"{prefix}: wrong output {data} vs {expected_data}\"\n)\n\ncompare(output_data,ex_output_data)\ncompare(output_name,ex_output_name)\noutput_index+=1\n\nif output_index<len(block.test_output):\nraise ValueError(\nf \"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n)"
        }
    ],
    "content": "class SpinTestServer:\ndef __init__(self):\nself.db_api=DatabaseManager()\nself.exec_manager=ExecutionManager()\nself.agent_server=AgentServer()\nself.scheduler=ExecutionScheduler()\n\n@staticmethod\ndef test_get_user_id():\nreturn \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n\nasync def __aenter__(self):\nself.setup_dependency_overrides()\nself.db_api.__enter__()\nself.agent_server.__enter__()\nself.exec_manager.__enter__()\nself.scheduler.__enter__()\n\nawait db.connect()\nawait initialize_blocks()\nawait create_default_user()\n\nreturn self\n\nasync def __aexit__(self,exc_type,exc_val,exc_tb):\nawait db.disconnect()\n\nself.scheduler.__exit__(exc_type,exc_val,exc_tb)\nself.exec_manager.__exit__(exc_type,exc_val,exc_tb)\nself.agent_server.__exit__(exc_type,exc_val,exc_tb)\nself.db_api.__exit__(exc_type,exc_val,exc_tb)\n\ndef setup_dependency_overrides(self):\n#Override get_user_id for testing\nself.agent_server.set_test_dependency_overrides(\n{get_user_id:self.test_get_user_id}\n)\n\n\nasync def wait_execution(\nuser_id:str,\ngraph_id:str,\ngraph_exec_id:str,\ntimeout:int=20,\n)->Sequence[ExecutionResult]:\nasync def is_execution_completed():\nstatus=await AgentServer().test_get_graph_run_status(graph_exec_id,user_id)\nlog.info(f \"Execution status: {status}\")\nif status==ExecutionStatus.FAILED:\nlog.info(\"Execution failed\")\nraise Exception(\"Execution failed\")\nreturn status==ExecutionStatus.COMPLETED\n\n#Wait for the executions to complete\nfor i in range(timeout):\nif await is_execution_completed():\nreturn await AgentServer().test_get_graph_run_node_execution_results(\ngraph_id,graph_exec_id,user_id\n)\ntime.sleep(1)\n\nassert False,\"Execution did not complete in time.\"\n\n\ndef execute_block_test(block:Block):\nprefix=f \"[Test-{block.name}]\"\n\nif not block.test_input or not block.test_output:\nlog.info(f \"{prefix} No test data provided\")\nreturn\nif not isinstance(block.test_input,list):\nblock.test_input=[block.test_input]\nif not isinstance(block.test_output,list):\nblock.test_output=[block.test_output]\n\noutput_index=0\nlog.info(f \"{prefix} Executing {len(block.test_input)} tests...\")\nprefix=\" \"*4+prefix\n\nfor mock_name,mock_obj in(block.test_mock or{}).items():\nlog.info(f \"{prefix} mocking {mock_name}...\")\nif hasattr(block,mock_name):\nsetattr(block,mock_name,mock_obj)\nelse:\nlog.info(f \"{prefix} mock {mock_name} not found in block\")\n\nextra_exec_kwargs={}\n\nif CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\nif not block.test_credentials:\nraise ValueError(\nf \"{prefix} requires credentials but has no test_credentials\"\n)\nextra_exec_kwargs[CREDENTIALS_FIELD_NAME]=block.test_credentials\n\nfor input_data in block.test_input:\nlog.info(f \"{prefix} in: {input_data}\")\n\nfor output_name,output_data in block.execute(input_data,**extra_exec_kwargs):\nif output_index>=len(block.test_output):\nraise ValueError(f \"{prefix} produced output more than expected\")\nex_output_name,ex_output_data=block.test_output[output_index]\n\ndef compare(data,expected_data):\nif data==expected_data:\nis_matching=True\nelif isinstance(expected_data,type):\nis_matching=isinstance(data,expected_data)\nelif callable(expected_data):\nis_matching=expected_data(data)\nelse:\nis_matching=False\n\nmark=\"✅\"if is_matching else\"❌\"\nlog.info(f \"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\nif not is_matching:\nraise ValueError(\nf \"{prefix}: wrong output {data} vs {expected_data}\"\n)\n\ncompare(output_data,ex_output_data)\ncompare(output_name,ex_output_name)\noutput_index+=1\n\nif output_index<len(block.test_output):\nraise ValueError(\nf \"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n)"
}