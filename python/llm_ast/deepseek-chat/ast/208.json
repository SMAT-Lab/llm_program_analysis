{
    "type": "Program",
    "name": "Global",
    "range": [
        19,
        131
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "test_conn_retry_sync_function",
            "range": [
                19,
                53
            ],
            "children": [
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        24,
                        53
                    ],
                    "children": [
                        {
                            "type": "VariableDecl",
                            "name": "retry_count",
                            "range": [
                                25,
                                27
                            ],
                            "children": [],
                            "content": "retry_count=0"
                        }
                    ],
                    "content": "\nretry_count=0\n\n@conn_retry(\"Test\",\"Test function\",max_retry=2,max_wait=0.1,min_wait=0.1)\n"
                }
            ],
            "content": "def test_conn_retry_sync_function():\nretry_count=0\n\n@conn_retry(\"Test\",\"Test function\",max_retry=2,max_wait=0.1,min_wait=0.1)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "test_function",
            "range": [
                54,
                82
            ],
            "children": [
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        59,
                        82
                    ],
                    "children": [
                        {
                            "type": "NonLocalStatement",
                            "name": "retry_count",
                            "range": [
                                60,
                                61
                            ],
                            "children": [],
                            "content": "nonlocal retry_count"
                        },
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                63,
                                66
                            ],
                            "children": [],
                            "content": "retry_count-=1"
                        },
                        {
                            "type": "IfStatement",
                            "name": "",
                            "range": [
                                68,
                                78
                            ],
                            "children": [
                                {
                                    "type": "BinaryExpression",
                                    "name": "",
                                    "range": [
                                        69,
                                        71
                                    ],
                                    "children": [],
                                    "content": "retry_count>0"
                                },
                                {
                                    "type": "BlockStatement",
                                    "name": "",
                                    "range": [
                                        73,
                                        78
                                    ],
                                    "children": [
                                        {
                                            "type": "RaiseStatement",
                                            "name": "",
                                            "range": [
                                                74,
                                                78
                                            ],
                                            "children": [],
                                            "content": "raise ValueError(\"Test error\")"
                                        }
                                    ],
                                    "content": "\nraise ValueError(\"Test error\")"
                                }
                            ],
                            "content": "if retry_count>0:\nraise ValueError(\"Test error\")"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "",
                            "range": [
                                80,
                                81
                            ],
                            "children": [],
                            "content": "return \"Success\""
                        }
                    ],
                    "content": "\nnonlocal retry_count\nretry_count-=1\nif retry_count>0:\nraise ValueError(\"Test error\")\nreturn \"Success\"\n"
                }
            ],
            "content": "def test_function():\nnonlocal retry_count\nretry_count-=1\nif retry_count>0:\nraise ValueError(\"Test error\")\nreturn \"Success\"\n"
        },
        {
            "type": "VariableDecl",
            "name": "retry_count",
            "range": [
                84,
                87
            ],
            "children": [],
            "content": "retry_count=2\n"
        },
        {
            "type": "ExpressionStatement",
            "name": "",
            "range": [
                88,
                93
            ],
            "children": [],
            "content": "res=test_function()\n"
        },
        {
            "type": "AssertStatement",
            "name": "",
            "range": [
                94,
                99
            ],
            "children": [],
            "content": "assert res==\"Success\"\n"
        },
        {
            "type": "VariableDecl",
            "name": "retry_count",
            "range": [
                101,
                104
            ],
            "children": [],
            "content": "retry_count=100\n"
        },
        {
            "type": "WithStatement",
            "name": "",
            "range": [
                105,
                119
            ],
            "children": [
                {
                    "type": "CallExpression",
                    "name": "pytest.raises",
                    "range": [
                        106,
                        111
                    ],
                    "children": [],
                    "content": "pytest.raises(ValueError)"
                },
                {
                    "type": "BlockStatement",
                    "name": "",
                    "range": [
                        114,
                        119
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "name": "",
                            "range": [
                                116,
                                118
                            ],
                            "children": [],
                            "content": "test_function()"
                        }
                    ],
                    "content": ":\ntest_function()\n"
                }
            ],
            "content": "with pytest.raises(ValueError)as e:\ntest_function()\n"
        },
        {
            "type": "AssertStatement",
            "name": "",
            "range": [
                120,
                130
            ],
            "children": [],
            "content": "assert str(e.value)==\"Test error\"\n"
        }
    ],
    "content": "def test_conn_retry_sync_function():\nretry_count=0\n\n@conn_retry(\"Test\",\"Test function\",max_retry=2,max_wait=0.1,min_wait=0.1)\ndef test_function():\nnonlocal retry_count\nretry_count-=1\nif retry_count>0:\nraise ValueError(\"Test error\")\nreturn \"Success\"\n\nretry_count=2\nres=test_function()\nassert res==\"Success\"\n\nretry_count=100\nwith pytest.raises(ValueError)as e:\ntest_function()\nassert str(e.value)==\"Test error\"\n\n"
}