{
    "type": "Program",
    "name": "Global",
    "range": [
        0,
        212
    ],
    "children": [
        {
            "type": "Comment",
            "name": "",
            "range": [
                1,
                1
            ],
            "children": [
                {
                    "type": "Text",
                    "name": "",
                    "range": [
                        1,
                        1
                    ],
                    "children": [],
                    "content": "\" \\n In the Combination Sum problem, we are given a list consisting of distinct integers. \\n We need to find all the combinations whose sum equals to target given. \\n We can use an element more than one. \\n  \\n Time complexity(Average Case): O(n!) \\n  \\n Constraints: \\n 1 <= candidates.length <= 30 \\n 2 <= candidates[i] <= 40 \\n All elements of candidates are distinct. \\n 1 <= target <= 40 \\n \""
                }
            ],
            "content": "\" \\n In the Combination Sum problem, we are given a list consisting of distinct integers. \\n We need to find all the combinations whose sum equals to target given. \\n We can use an element more than one. \\n  \\n Time complexity(Average Case): O(n!) \\n  \\n Constraints: \\n 1 <= candidates.length <= 30 \\n 2 <= candidates[i] <= 40 \\n All elements of candidates are distinct. \\n 1 <= target <= 40 \\n \""
        },
        {
            "type": "FunctionDecl",
            "name": "backtrack",
            "range": [
                4,
                123
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "backtrack",
                    "range": [
                        4,
                        33
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "name": "def",
                            "range": [
                                4,
                                7
                            ],
                            "children": [],
                            "content": "\n\ndef backtrack"
                        },
                        {
                            "type": "FunctionName",
                            "name": "backtrack",
                            "range": [
                                5,
                                14
                            ],
                            "children": [],
                            "content": "\ndef backtrack(\ncandidates:list,path"
                        },
                        {
                            "type": "ParameterList",
                            "name": "parameters",
                            "range": [
                                6,
                                27
                            ],
                            "children": [
                                {
                                    "type": "Parameter",
                                    "name": "candidates",
                                    "range": [
                                        8,
                                        14
                                    ],
                                    "children": [],
                                    "content": "(\ncandidates:list,path"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "path",
                                    "range": [
                                        12,
                                        18
                                    ],
                                    "children": [],
                                    "content": "list,path:list,answer"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "answer",
                                    "range": [
                                        16,
                                        22
                                    ],
                                    "children": [],
                                    "content": "list,answer:list,target"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "target",
                                    "range": [
                                        20,
                                        26
                                    ],
                                    "children": [],
                                    "content": "list,target:int,previous_index"
                                },
                                {
                                    "type": "Parameter",
                                    "name": "previous_index",
                                    "range": [
                                        24,
                                        26
                                    ],
                                    "children": [],
                                    "content": "int,previous_index"
                                }
                            ],
                            "content": "def backtrack(\ncandidates:list,path:list,answer:list,target:int,previous_index:"
                        },
                        {
                            "type": "ReturnType",
                            "name": "None",
                            "range": [
                                29,
                                33
                            ],
                            "children": [],
                            "content": "\n)->None"
                        }
                    ],
                    "content": "\n\ndef backtrack(\ncandidates:list,path:list,answer:list,target:int,previous_index:int\n)->None"
                },
                {
                    "type": "FunctionBody",
                    "name": "body",
                    "range": [
                        34,
                        123
                    ],
                    "children": [
                        {
                            "type": "Docstring",
                            "name": "docstring",
                            "range": [
                                34,
                                37
                            ],
                            "children": [],
                            "content": ":\n\"\"\" \\n     A recursive function that searches for possible combinations. Backtracks in case \\n     of a bigger current combination value than the target value. \\n  \\n     Parameters \\n     ---------- \\n     previous_index: Last index from the previous search \\n     target: The value we need to obtain by summing our integers in the path list. \\n     answer: A list of possible combinations \\n     path: Current combination \\n     candidates: A list of integers we can use. \\n     \""
                        },
                        {
                            "type": "IfStatement",
                            "name": "if",
                            "range": [
                                38,
                                55
                            ],
                            "children": [
                                {
                                    "type": "Condition",
                                    "name": "target == 0",
                                    "range": [
                                        39,
                                        43
                                    ],
                                    "children": [],
                                    "content": "\nif target=="
                                },
                                {
                                    "type": "Block",
                                    "name": "then",
                                    "range": [
                                        44,
                                        55
                                    ],
                                    "children": [
                                        {
                                            "type": "ExpressionStatement",
                                            "name": "answer.append(path.copy())",
                                            "range": [
                                                45,
                                                54
                                            ],
                                            "children": [],
                                            "content": ":\nanswer.append(path.copy("
                                        }
                                    ],
                                    "content": "0:\nanswer.append(path.copy()"
                                }
                            ],
                            "content": "\"\"\nif target==0:\nanswer.append(path.copy()"
                        },
                        {
                            "type": "ElseStatement",
                            "name": "else",
                            "range": [
                                56,
                                123
                            ],
                            "children": [
                                {
                                    "type": "Block",
                                    "name": "else",
                                    "range": [
                                        58,
                                        123
                                    ],
                                    "children": [
                                        {
                                            "type": "ForStatement",
                                            "name": "for",
                                            "range": [
                                                59,
                                                122
                                            ],
                                            "children": [
                                                {
                                                    "type": "Initialization",
                                                    "name": "index in range(previous_index, len(candidates))",
                                                    "range": [
                                                        60,
                                                        71
                                                    ],
                                                    "children": [],
                                                    "content": "\nfor index in range(previous_index,len(candidates)"
                                                },
                                                {
                                                    "type": "Block",
                                                    "name": "for",
                                                    "range": [
                                                        72,
                                                        122
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "IfStatement",
                                                            "name": "if",
                                                            "range": [
                                                                73,
                                                                92
                                                            ],
                                                            "children": [
                                                                {
                                                                    "type": "Condition",
                                                                    "name": "target >= candidates[index]",
                                                                    "range": [
                                                                        74,
                                                                        81
                                                                    ],
                                                                    "children": [],
                                                                    "content": "\nif target>=candidates[index"
                                                                },
                                                                {
                                                                    "type": "Block",
                                                                    "name": "then",
                                                                    "range": [
                                                                        82,
                                                                        92
                                                                    ],
                                                                    "children": [
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "name": "path.append(candidates[index])",
                                                                            "range": [
                                                                                83,
                                                                                91
                                                                            ],
                                                                            "children": [],
                                                                            "content": ":\npath.append(candidates[index"
                                                                        }
                                                                    ],
                                                                    "content": "]:\npath.append(candidates[index]"
                                                                }
                                                            ],
                                                            "content": ":\nif target>=candidates[index]:\npath.append(candidates[index]"
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "backtrack(candidates, path, answer, target - candidates[index], index)",
                                                            "range": [
                                                                93,
                                                                109
                                                            ],
                                                            "children": [],
                                                            "content": ")\nbacktrack(candidates,path,answer,target-candidates[index],"
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "name": "path.pop(len(path) - 1)",
                                                            "range": [
                                                                111,
                                                                121
                                                            ],
                                                            "children": [],
                                                            "content": ")\npath.pop(len(path)-"
                                                        }
                                                    ],
                                                    "content": "):\nif target>=candidates[index]:\npath.append(candidates[index])\nbacktrack(candidates,path,answer,target-candidates[index],index)\npath.pop(len(path)-1"
                                                }
                                            ],
                                            "content": ":\nfor index in range(previous_index,len(candidates)):\nif target>=candidates[index]:\npath.append(candidates[index])\nbacktrack(candidates,path,answer,target-candidates[index],index)\npath.pop(len(path)-1"
                                        }
                                    ],
                                    "content": "else:\nfor index in range(previous_index,len(candidates)):\nif target>=candidates[index]:\npath.append(candidates[index])\nbacktrack(candidates,path,answer,target-candidates[index],index)\npath.pop(len(path)-1)"
                                }
                            ],
                            "content": ")\nelse:\nfor index in range(previous_index,len(candidates)):\nif target>=candidates[index]:\npath.append(candidates[index])\nbacktrack(candidates,path,answer,target-candidates[index],index)\npath.pop(len(path)-1)"
                        }
                    ],
                    "content": ":\n\"\"\" \\n     A recursive function that searches for possible combinations. Backtracks in case \\n     of a bigger current combination value than the target value. \\n  \\n     Parameters \\n     ---------- \\n     previous_index: Last index from the previous search \\n     target: The value we need to obtain by summing our integers in the path list. \\n     answer: A list of possible combinations \\n     path: Current combination \\n     candidates: A list of integers we can use. \\n     \"\"\"\nif target==0:\nanswer.append(path.copy())\nelse:\nfor index in range(previous_index,len(candidates)):\nif target>=candidates[index]:\npath.append(candidates[index])\nbacktrack(candidates,path,answer,target-candidates[index],index)\npath.pop(len(path)-1)"
                }
            ],
            "content": "\n\ndef backtrack(\ncandidates:list,path:list,answer:list,target:int,previous_index:int\n)->None:\n\"\"\" \\n     A recursive function that searches for possible combinations. Backtracks in case \\n     of a bigger current combination value than the target value. \\n  \\n     Parameters \\n     ---------- \\n     previous_index: Last index from the previous search \\n     target: The value we need to obtain by summing our integers in the path list. \\n     answer: A list of possible combinations \\n     path: Current combination \\n     candidates: A list of integers we can use. \\n     \"\"\"\nif target==0:\nanswer.append(path.copy())\nelse:\nfor index in range(previous_index,len(candidates)):\nif target>=candidates[index]:\npath.append(candidates[index])\nbacktrack(candidates,path,answer,target-candidates[index],index)\npath.pop(len(path)-1)"
        },
        {
            "type": "FunctionDecl",
            "name": "combination_sum",
            "range": [
                124,
                183
            ],
            "children": [
                {
                    "type": "ParameterList",
                    "name": "parameters",
                    "range": [
                        126,
                        134
                    ],
                    "children": [
                        {
                            "type": "Parameter",
                            "name": "candidates",
                            "range": [
                                127,
                                129
                            ],
                            "children": [],
                            "content": "def combination_sum("
                        },
                        {
                            "type": "Parameter",
                            "name": "target",
                            "range": [
                                131,
                                133
                            ],
                            "children": [],
                            "content": ":list,"
                        }
                    ],
                    "content": "\ndef combination_sum(candidates:list,target"
                },
                {
                    "type": "ReturnType",
                    "name": "return_type",
                    "range": [
                        135,
                        137
                    ],
                    "children": [],
                    "content": ":int)"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        140,
                        142
                    ],
                    "children": [],
                    "content": "list:\n"
                },
                {
                    "type": "VariableDecl",
                    "name": "path",
                    "range": [
                        144,
                        154
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "type_annotation",
                            "range": [
                                148,
                                154
                            ],
                            "children": [],
                            "content": "=[]#type:list"
                        }
                    ],
                    "content": "\" \\n     >>> combination_sum([2, 3, 5], 8) \\n     [[2, 2, 2, 2], [2, 3, 3], [3, 5]] \\n     >>> combination_sum([2, 3, 6, 7], 7) \\n     [[2, 2, 3], [7]] \\n     >>> combination_sum([-8, 2.3, 0], 1) \\n     Traceback (most recent call last): \\n         ... \\n     RecursionError: maximum recursion depth exceeded \\n     \"\"\"\npath=[]#type:list"
                },
                {
                    "type": "VariableDecl",
                    "name": "answer",
                    "range": [
                        156,
                        166
                    ],
                    "children": [
                        {
                            "type": "TypeAnnotation",
                            "name": "type_annotation",
                            "range": [
                                160,
                                166
                            ],
                            "children": [],
                            "content": "=[]#type:list"
                        }
                    ],
                    "content": "int]\nanswer=[]#type:list"
                },
                {
                    "type": "CallExpression",
                    "name": "backtrack",
                    "range": [
                        168,
                        179
                    ],
                    "children": [
                        {
                            "type": "ArgumentList",
                            "name": "arguments",
                            "range": [
                                169,
                                179
                            ],
                            "children": [
                                {
                                    "type": "Identifier",
                                    "name": "candidates",
                                    "range": [
                                        170,
                                        170
                                    ],
                                    "children": [],
                                    "content": "\n"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "path",
                                    "range": [
                                        172,
                                        172
                                    ],
                                    "children": [],
                                    "content": "("
                                },
                                {
                                    "type": "Identifier",
                                    "name": "answer",
                                    "range": [
                                        174,
                                        174
                                    ],
                                    "children": [],
                                    "content": ","
                                },
                                {
                                    "type": "Identifier",
                                    "name": "target",
                                    "range": [
                                        176,
                                        176
                                    ],
                                    "children": [],
                                    "content": ","
                                },
                                {
                                    "type": "Literal",
                                    "name": "0",
                                    "range": [
                                        178,
                                        178
                                    ],
                                    "children": [],
                                    "content": ","
                                }
                            ],
                            "content": "]\nbacktrack(candidates,path,answer,target"
                        }
                    ],
                    "content": "int]\nbacktrack(candidates,path,answer,target"
                },
                {
                    "type": "ReturnStatement",
                    "name": "return",
                    "range": [
                        181,
                        182
                    ],
                    "children": [],
                    "content": "0)"
                }
            ],
            "content": "\n\n\ndef combination_sum(candidates:list,target:int)->list:\n\"\"\" \\n     >>> combination_sum([2, 3, 5], 8) \\n     [[2, 2, 2, 2], [2, 3, 3], [3, 5]] \\n     >>> combination_sum([2, 3, 6, 7], 7) \\n     [[2, 2, 3], [7]] \\n     >>> combination_sum([-8, 2.3, 0], 1) \\n     Traceback (most recent call last): \\n         ... \\n     RecursionError: maximum recursion depth exceeded \\n     \"\"\"\npath=[]#type:list[int]\nanswer=[]#type:list[int]\nbacktrack(candidates,path,answer,target,0)\n"
        },
        {
            "type": "FunctionDecl",
            "name": "main",
            "range": [
                184,
                212
            ],
            "children": [
                {
                    "type": "FunctionSignature",
                    "name": "main",
                    "range": [
                        184,
                        191
                    ],
                    "children": [
                        {
                            "type": "Keyword",
                            "value": "def",
                            "range": [
                                184,
                                184
                            ],
                            "content": "return"
                        },
                        {
                            "type": "Identifier",
                            "value": "main",
                            "range": [
                                185,
                                185
                            ],
                            "content": "answer"
                        },
                        {
                            "type": "Keyword",
                            "value": "None",
                            "range": [
                                190,
                                190
                            ],
                            "content": "main"
                        }
                    ],
                    "content": "return answer\n\n\ndef main("
                },
                {
                    "type": "FunctionBody",
                    "range": [
                        192,
                        212
                    ],
                    "children": [
                        {
                            "type": "ExpressionStatement",
                            "range": [
                                193,
                                211
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "range": [
                                        193,
                                        210
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "value": "print",
                                            "range": [
                                                193,
                                                193
                                            ],
                                            "content": "-"
                                        },
                                        {
                                            "type": "CallExpression",
                                            "range": [
                                                195,
                                                209
                                            ],
                                            "children": [
                                                {
                                                    "type": "Identifier",
                                                    "value": "combination_sum",
                                                    "range": [
                                                        195,
                                                        195
                                                    ],
                                                    "content": "None"
                                                },
                                                {
                                                    "type": "ArrayExpression",
                                                    "range": [
                                                        197,
                                                        206
                                                    ],
                                                    "children": [
                                                        {
                                                            "type": "Literal",
                                                            "value": "-8",
                                                            "range": [
                                                                198,
                                                                199
                                                            ],
                                                            "content": "print("
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "2.3",
                                                            "range": [
                                                                201,
                                                                203
                                                            ],
                                                            "content": "([-"
                                                        },
                                                        {
                                                            "type": "Literal",
                                                            "value": "0",
                                                            "range": [
                                                                205,
                                                                205
                                                            ],
                                                            "content": ","
                                                        }
                                                    ],
                                                    "content": "\nprint(combination_sum([-8,2"
                                                },
                                                {
                                                    "type": "Literal",
                                                    "value": "1",
                                                    "range": [
                                                        208,
                                                        208
                                                    ],
                                                    "content": "3"
                                                }
                                            ],
                                            "content": "None:\nprint(combination_sum([-8,2.3,"
                                        }
                                    ],
                                    "content": "->None:\nprint(combination_sum([-8,2.3,0"
                                }
                            ],
                            "content": "->None:\nprint(combination_sum([-8,2.3,0]"
                        }
                    ],
                    "content": ")->None:\nprint(combination_sum([-8,2.3,0],"
                }
            ],
            "content": "return answer\n\n\ndef main()->None:\nprint(combination_sum([-8,2.3,0],"
        }
    ],
    "content": "\"\"\" \\n In the Combination Sum problem, we are given a list consisting of distinct integers. \\n We need to find all the combinations whose sum equals to target given. \\n We can use an element more than one. \\n  \\n Time complexity(Average Case): O(n!) \\n  \\n Constraints: \\n 1 <= candidates.length <= 30 \\n 2 <= candidates[i] <= 40 \\n All elements of candidates are distinct. \\n 1 <= target <= 40 \\n \"\"\"\n\n\ndef backtrack(\ncandidates:list,path:list,answer:list,target:int,previous_index:int\n)->None:\n\"\"\" \\n     A recursive function that searches for possible combinations. Backtracks in case \\n     of a bigger current combination value than the target value. \\n  \\n     Parameters \\n     ---------- \\n     previous_index: Last index from the previous search \\n     target: The value we need to obtain by summing our integers in the path list. \\n     answer: A list of possible combinations \\n     path: Current combination \\n     candidates: A list of integers we can use. \\n     \"\"\"\nif target==0:\nanswer.append(path.copy())\nelse:\nfor index in range(previous_index,len(candidates)):\nif target>=candidates[index]:\npath.append(candidates[index])\nbacktrack(candidates,path,answer,target-candidates[index],index)\npath.pop(len(path)-1)\n\n\ndef combination_sum(candidates:list,target:int)->list:\n\"\"\" \\n     >>> combination_sum([2, 3, 5], 8) \\n     [[2, 2, 2, 2], [2, 3, 3], [3, 5]] \\n     >>> combination_sum([2, 3, 6, 7], 7) \\n     [[2, 2, 3], [7]] \\n     >>> combination_sum([-8, 2.3, 0], 1) \\n     Traceback (most recent call last): \\n         ... \\n     RecursionError: maximum recursion depth exceeded \\n     \"\"\"\npath=[]#type:list[int]\nanswer=[]#type:list[int]\nbacktrack(candidates,path,answer,target,0)\nreturn answer\n\n\ndef main()->None:\nprint(combination_sum([-8,2.3,0],"
}