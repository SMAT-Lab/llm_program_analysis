{
    "type": "Program",
    "name": "Global",
    "range": [
        20,
        105
    ],
    "children": [
        {
            "type": "FunctionDecl",
            "name": "parse_jwt_token",
            "range": [
                20,
                105
            ],
            "children": [
                {
                    "type": "Parameter",
                    "name": "token",
                    "range": [
                        23,
                        25
                    ],
                    "children": [],
                    "content": "token:str"
                },
                {
                    "type": "ReturnType",
                    "name": "Dict[str, Any]",
                    "range": [
                        29,
                        34
                    ],
                    "children": [],
                    "content": "Dict[str,Any]"
                },
                {
                    "type": "Docstring",
                    "name": "docstring",
                    "range": [
                        37,
                        39
                    ],
                    "children": [],
                    "content": "\"\"\" \\n     Parse and validate a JWT token. \\n  \\n     :param token: The token to parse \\n     :return: The decoded payload \\n     :raises ValueError: If the token is invalid or expired \\n     \"\"\""
                },
                {
                    "type": "TryStatement",
                    "name": "try",
                    "range": [
                        41,
                        104
                    ],
                    "children": [
                        {
                            "type": "AssignmentExpression",
                            "name": "payload",
                            "range": [
                                44,
                                76
                            ],
                            "children": [
                                {
                                    "type": "CallExpression",
                                    "name": "jwt.decode",
                                    "range": [
                                        46,
                                        73
                                    ],
                                    "children": [
                                        {
                                            "type": "Identifier",
                                            "name": "token",
                                            "range": [
                                                51,
                                                51
                                            ],
                                            "children": [],
                                            "content": "token"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "settings.JWT_SECRET_KEY",
                                            "range": [
                                                54,
                                                56
                                            ],
                                            "children": [],
                                            "content": "settings.JWT_SECRET_KEY"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "algorithms=[settings.JWT_ALGORITHM]",
                                            "range": [
                                                59,
                                                65
                                            ],
                                            "children": [],
                                            "content": "algorithms=[settings.JWT_ALGORITHM]"
                                        },
                                        {
                                            "type": "Literal",
                                            "name": "audience=\"authenticated\"",
                                            "range": [
                                                68,
                                                70
                                            ],
                                            "children": [],
                                            "content": "audience=\"authenticated\""
                                        }
                                    ],
                                    "content": "jwt.decode(\ntoken,\nsettings.JWT_SECRET_KEY,\nalgorithms=[settings.JWT_ALGORITHM],\naudience=\"authenticated\",\n)"
                                }
                            ],
                            "content": "payload=jwt.decode(\ntoken,\nsettings.JWT_SECRET_KEY,\nalgorithms=[settings.JWT_ALGORITHM],\naudience=\"authenticated\",\n)\nreturn payload"
                        },
                        {
                            "type": "ReturnStatement",
                            "name": "return",
                            "range": [
                                75,
                                76
                            ],
                            "children": [],
                            "content": "return payload"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except jwt.ExpiredSignatureError",
                            "range": [
                                78,
                                89
                            ],
                            "children": [
                                {
                                    "type": "ThrowStatement",
                                    "name": "raise ValueError",
                                    "range": [
                                        84,
                                        88
                                    ],
                                    "children": [],
                                    "content": "raise ValueError(\"Token has expired\")"
                                }
                            ],
                            "content": "except jwt.ExpiredSignatureError:\nraise ValueError(\"Token has expired\")\n"
                        },
                        {
                            "type": "CatchClause",
                            "name": "except jwt.InvalidTokenError as e",
                            "range": [
                                90,
                                104
                            ],
                            "children": [
                                {
                                    "type": "ThrowStatement",
                                    "name": "raise ValueError",
                                    "range": [
                                        98,
                                        103
                                    ],
                                    "children": [],
                                    "content": "raise ValueError(f \"Invalid token: {str(e)}\")"
                                }
                            ],
                            "content": "except jwt.InvalidTokenError as e:\nraise ValueError(f \"Invalid token: {str(e)}\")\n"
                        }
                    ],
                    "content": "try:\npayload=jwt.decode(\ntoken,\nsettings.JWT_SECRET_KEY,\nalgorithms=[settings.JWT_ALGORITHM],\naudience=\"authenticated\",\n)\nreturn payload\nexcept jwt.ExpiredSignatureError:\nraise ValueError(\"Token has expired\")\nexcept jwt.InvalidTokenError as e:\nraise ValueError(f \"Invalid token: {str(e)}\")\n"
                }
            ],
            "content": "def parse_jwt_token(token:str)->Dict[str,Any]:\n\"\"\" \\n     Parse and validate a JWT token. \\n  \\n     :param token: The token to parse \\n     :return: The decoded payload \\n     :raises ValueError: If the token is invalid or expired \\n     \"\"\"\ntry:\npayload=jwt.decode(\ntoken,\nsettings.JWT_SECRET_KEY,\nalgorithms=[settings.JWT_ALGORITHM],\naudience=\"authenticated\",\n)\nreturn payload\nexcept jwt.ExpiredSignatureError:\nraise ValueError(\"Token has expired\")\nexcept jwt.InvalidTokenError as e:\nraise ValueError(f \"Invalid token: {str(e)}\")\n"
        }
    ],
    "content": "def parse_jwt_token(token:str)->Dict[str,Any]:\n\"\"\" \\n     Parse and validate a JWT token. \\n  \\n     :param token: The token to parse \\n     :return: The decoded payload \\n     :raises ValueError: If the token is invalid or expired \\n     \"\"\"\ntry:\npayload=jwt.decode(\ntoken,\nsettings.JWT_SECRET_KEY,\nalgorithms=[settings.JWT_ALGORITHM],\naudience=\"authenticated\",\n)\nreturn payload\nexcept jwt.ExpiredSignatureError:\nraise ValueError(\"Token has expired\")\nexcept jwt.InvalidTokenError as e:\nraise ValueError(f \"Invalid token: {str(e)}\")\n"
}