从 枚举 导入 枚举
从 类型 导入 字面量

从 e2b_code_interpreter 导入 沙盒
从 pydantic 导入 秘密字符串

从 后端.数据.块 导入 块, 块类别, 块输出, 块模式
从 后端.数据.模型 导入 (
    API密钥凭证,
    凭证字段,
    凭证元输入,
    模式字段,
)
从 后端.集成.提供者 导入 提供者名称

测试凭证 = API密钥凭证(
    id="01234567-89ab-cdef-0123-456789abcdef",
    提供者="e2b",
    api密钥=秘密字符串("mock-e2b-api-key"),
    标题="模拟 E2B API 密钥",
    过期时间=无,
)

测试凭证输入 = {
    "提供者": 测试凭证.提供者,
    "id": 测试凭证.id,
    "类型": 测试凭证.类型,
    "标题": 测试凭证.类型,
}

类 编程语言(枚举):
    PYTHON = "python"
    JAVASCRIPT = "js"
    BASH = "bash"
    R = "r"
    JAVA = "java"

类 代码执行块(块):
    # TODO: 添加支持上传和下载文件
    # 目前，您只能通过创建预定义的沙盒模板来自定义 CPU 和内存
    类 输入(块模式):
        凭证: 凭证元输入[
            字面量[提供者名称.E2B], 字面量["api_key"]
        ] = 凭证字段(
            描述="输入您的 E2B 沙盒 API 密钥。您可以在此处获取：https://e2b.dev/docs",
        )

        # TODO: 选项以在后台运行命令
        设置命令: 列表[字符串] = 模式字段(
            描述=(
                "在运行代码之前设置沙盒的 Shell 命令。"
                "您可以使用 `curl` 或 `git` 来安装您想要的基于 Debian 的包管理器。"
                "`pip` 和 `npm` 已预安装。\n\n"
                "这些命令使用 `sh` 在前台执行。"
            ),
            占位符="pip install cowsay",
            默认=[],
            高级=假,
        )

        代码: 字符串 = 模式字段(
            描述="在沙盒中执行的代码",
            占位符="print('Hello, World!')",
            默认="",
            高级=假,
        )

        语言: 编程语言 = 模式字段(
            描述="要执行的编程语言",
            默认=编程语言.PYTHON,
            高级=假,
        )

        超时: 整数 = 模式字段(
            描述="执行超时时间（秒）", 默认=300
        )

        模板id: 字符串 = 模式字段(
            描述=(
                "您可以在此处输入 E2B 沙盒模板的 ID 来使用它。"
                "查看 E2B 文档以获取更多详细信息："
                "[E2B - 沙盒模板](https://e2b.dev/docs/sandbox-template)"
            ),
            默认="",
            高级=真,
        )

    类 输出(块模式):
        响应: 字符串 = 模式字段(描述="代码执行的响应")
        标准输出日志: 字符串 = 模式字段(
            描述="执行的标准输出日志"
        )
        标准错误日志: 字符串 = 模式字段(描述="执行的标准错误日志")
        错误: 字符串 = 模式字段(描述="执行失败时的错误消息")

    定义 __初始化__(自身):
        超级().__初始化__(
            id="0b02b072-abe7-11ef-8372-fb5d162dd712",
            描述="在具有互联网访问权限的隔离沙盒环境中执行代码。",
            类别={块类别.开发者工具},
            输入模式=代码执行块.输入,
            输出模式=代码执行块.输出,
            测试凭证=测试凭证,
            测试输入={
                "凭证": 测试凭证输入,
                "代码": "print('Hello World')",
                "语言": 编程语言.PYTHON.值,
                "设置命令": [],
                "超时": 300,
                "模板id": "",
            },
            测试输出=[
                ("响应", "Hello World"),
                ("标准输出日志", "Hello World\n"),
            ],
            测试模拟={
                "执行代码": 拉姆达 代码, 语言, 设置命令, 超时, api密钥, 模板id: (
                    "Hello World",
                    "Hello World\n",
                    "",
                ),
            },
        )

    定义 执行代码(
        自身,
        代码: 字符串,
        语言: 编程语言,
        设置命令: 列表[字符串],
        超时: 整数,
        api密钥: 字符串,
        模板id: 字符串,
    ):
        尝试:
            沙盒 = 无
            如果 模板id:
                沙盒 = 沙盒(
                    模板=模板id, api密钥=api密钥, 超时=超时
                )
            否则:
                沙盒 = 沙盒(api密钥=api密钥, 超时=超时)

            如果 不是 沙盒:
                抛出 异常("沙盒未创建")

            # 运行设置命令
            对于 命令 在 设置命令:
                沙盒.命令.运行(命令)

            # 执行代码
            执行 = 沙盒.运行代码(
                代码,
                语言=语言.值,
                出错时=拉姆达 e: 沙盒.终止(),  # 如果出现错误则终止沙盒
            )

            如果 执行.错误:
                抛出 异常(执行.错误)

            响应 = 执行.文本
            标准输出日志 = "".连接(执行.日志.标准输出)
            标准错误日志 = "".连接(执行.日志.标准错误)

            返回 响应, 标准输出日志, 标准错误日志
        捕获 异常 为 e:
            抛出 e

    定义 运行(
        自身, 输入数据: 输入, *, 凭证: API密钥凭证, **kwargs
    ) -> 块输出:
        尝试:
            响应, 标准输出日志, 标准错误日志 = 自身.执行代码(
                输入数据.代码,
                输入数据.语言,
                输入数据.设置命令,
                输入数据.超时,
                凭证.api密钥.获取秘密值(),
                输入数据.模板id,
            )

            如果 响应:
                产出 "响应", 响应
            如果 标准输出日志:
                产出 "标准输出日志", 标准输出日志
            如果 标准错误日志:
                产出 "标准错误日志", 标准错误日志
        捕获 异常 为 e:
            产出 "错误", 字符串(e)