{
  "nodes": [
    {
      "id": "n0",
      "code": "import threading\nfrom typing import Callable, ParamSpec, TypeVar\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\n"
    },
    {
      "id": "n1",
      "code": "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:\n    thread_local = threading.local()\n\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        cache = getattr(thread_local, \"cache\", None)\n\n        if cache is None:\n            cache = thread_local.cache = {}\n\n        key = (args, tuple(sorted(kwargs.items())))\n\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n\n        return cache[key]\n\n    return wrapper\n"
    },
    {
      "id": "n2",
      "code": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        cache = getattr(thread_local, \"cache\", None)\n\n        if cache is None:\n            cache = thread_local.cache = {}\n\n        key = (args, tuple(sorted(kwargs.items())))\n\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n\n        return cache[key]\n"
    }
  ],
  "edges": []
}