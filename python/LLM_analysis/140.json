{
  "nodes": [
    {
      "id": "n0",
      "code": "import json\nfrom typing import Any, Type, TypeVar, cast, get_args, get_origin\n"
    },
    {
      "id": "n1",
      "code": "class ConversionError(ValueError):\n    pass\n"
    },
    {
      "id": "n2",
      "code": "def __convert_list(value: Any) -> list:\n\n    if isinstance(value, (list, tuple, set)):\n        return list(value)\n"
    },
    {
      "id": "n3",
      "code": "    elif isinstance(value, dict):\n        return list(value.items())\n"
    },
    {
      "id": "n4",
      "code": "    elif isinstance(value, str):\n        value = value.strip()\n\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n"
    },
    {
      "id": "n5",
      "code": "            try:\n                return json.loads(value)\n\n            except json.JSONDecodeError:\n                return [value]\n"
    },
    {
      "id": "n6",
      "code": "        else:\n            return [value]\n"
    },
    {
      "id": "n7",
      "code": "    else:\n        return [value]\n"
    },
    {
      "id": "n8",
      "code": "def __convert_dict(value: Any) -> dict:\n\n    if isinstance(value, str):\n"
    },
    {
      "id": "n9",
      "code": "        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion\n"
    },
    {
      "id": "n10",
      "code": "    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n"
    },
    {
      "id": "n11",
      "code": "    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n"
    },
    {
      "id": "n12",
      "code": "    elif isinstance(value, dict):\n        return value\n\n    else:\n        return {\"value\": value}\n"
    },
    {
      "id": "n13",
      "code": "def __convert_tuple(value: Any) -> tuple:\n\n    if isinstance(value, (str, list, set)):\n        return tuple(value)\n"
    },
    {
      "id": "n14",
      "code": "    elif isinstance(value, dict):\n        return tuple(value.items())\n"
    },
    {
      "id": "n15",
      "code": "    elif isinstance(value, (int, float, bool)):\n        return (value,)\n"
    },
    {
      "id": "n16",
      "code": "    elif isinstance(value, tuple):\n        return value\n"
    },
    {
      "id": "n17",
      "code": "    else:\n        return (value,)\n"
    },
    {
      "id": "n18",
      "code": "def __convert_set(value: Any) -> set:\n\n    if isinstance(value, (str, list, tuple)):\n        return set(value)\n"
    },
    {
      "id": "n19",
      "code": "    elif isinstance(value, dict):\n        return set(value.items())\n"
    },
    {
      "id": "n20",
      "code": "    elif isinstance(value, set):\n        return value\n"
    },
    {
      "id": "n21",
      "code": "    else:\n        return {value}\n"
    },
    {
      "id": "n22",
      "code": "def __convert_str(value: Any) -> str:\n\n    if isinstance(value, str):\n        return value\n\n    else:\n        return json.dumps(value)\n"
    },
    {
      "id": "n23",
      "code": "NUM = TypeVar(\"NUM\", int, float)\n"
    },
    {
      "id": "n24",
      "code": "def __convert_num(value: Any, num_type: Type[NUM]) -> NUM:\n\n    if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n"
    },
    {
      "id": "n25",
      "code": "    elif isinstance(value, num_type):\n        return value\n"
    },
    {
      "id": "n26",
      "code": "    else:\n        try:\n"
    },
    {
      "id": "n27",
      "code": "            return num_type(float(value))\n"
    },
    {
      "id": "n28",
      "code": "        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion\n"
    },
    {
      "id": "n29",
      "code": "def __convert_bool(value: Any) -> bool:\n\n    if isinstance(value, bool):\n        return value\n"
    },
    {
      "id": "n30",
      "code": "    elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n\n        else:\n            return False\n"
    },
    {
      "id": "n31",
      "code": "    else:\n        return bool(value)\n"
    },
    {
      "id": "n32",
      "code": "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)\n\n    if origin is None:\n        origin = target_type\n\n    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n"
    },
    {
      "id": "n33",
      "code": "    if isinstance(value, origin):\n        if not args:\n            return value\n"
    },
    {
      "id": "n34",
      "code": "        else:\n            # Need to convert elements\n            if origin is list:\n"
    },
    {
      "id": "n35",
      "code": "                return [convert(v, args[0]) for v in value]\n"
    },
    {
      "id": "n36",
      "code": "            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n"
    },
    {
      "id": "n37",
      "code": "                    return tuple(convert(v, args[0]) for v in value)\n"
    },
    {
      "id": "n38",
      "code": "                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n"
    },
    {
      "id": "n39",
      "code": "            elif origin is dict:\n                key_type, val_type = args\n\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n"
    },
    {
      "id": "n40",
      "code": "            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n"
    },
    {
      "id": "n41",
      "code": "            else:\n                return value\n"
    },
    {
      "id": "n42",
      "code": "    elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")\n\n    else:\n        # Need to convert value to the origin type\n"
    },
    {
      "id": "n43",
      "code": "        if origin is list:\n            value = __convert_list(value)\n"
    },
    {
      "id": "n44",
      "code": "            if args:\n                return [convert(v, args[0]) for v in value]\n"
    },
    {
      "id": "n45",
      "code": "            else:\n                return value\n"
    },
    {
      "id": "n46",
      "code": "        elif origin is dict:\n            value = __convert_dict(value)\n"
    },
    {
      "id": "n47",
      "code": "            if args:\n                key_type, val_type = args\n\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n"
    },
    {
      "id": "n48",
      "code": "            else:\n                return value\n"
    },
    {
      "id": "n49",
      "code": "        elif origin is tuple:\n            value = __convert_tuple(value)\n"
    },
    {
      "id": "n50",
      "code": "            if args:\n                if len(args) == 1:\n"
    },
    {
      "id": "n51",
      "code": "                    return tuple(convert(v, args[0]) for v in value)\n"
    },
    {
      "id": "n52",
      "code": "                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n"
    },
    {
      "id": "n53",
      "code": "            else:\n                return value\n"
    },
    {
      "id": "n54",
      "code": "        elif origin is str:\n            return __convert_str(value)\n"
    },
    {
      "id": "n55",
      "code": "        elif origin is set:\n            value = __convert_set(value)\n"
    },
    {
      "id": "n56",
      "code": "            if args:\n                return {convert(v, args[0]) for v in value}\n"
    },
    {
      "id": "n57",
      "code": "            else:\n                return value\n"
    },
    {
      "id": "n58",
      "code": "        elif origin is int:\n            return __convert_num(value, int)\n"
    },
    {
      "id": "n59",
      "code": "        elif origin is float:\n            return __convert_num(value, float)\n"
    },
    {
      "id": "n60",
      "code": "        elif origin is bool:\n            return __convert_bool(value)\n\n        else:\n            return value\n"
    },
    {
      "id": "n61",
      "code": "T = TypeVar(\"T\")\n"
    },
    {
      "id": "n62",
      "code": "def type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))\n"
    },
    {
      "id": "n63",
      "code": "def convert(value: Any, target_type: Type[T]) -> T:\n\n    try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n\n    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e\n"
    }
  ],
  "edges": [
    {
      "source": "n2",
      "target": "n7"
    },
    {
      "source": "n55",
      "target": "n56"
    },
    {
      "source": "n42",
      "target": "n54"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n14",
      "target": "n17"
    },
    {
      "source": "n50",
      "target": "n51"
    },
    {
      "source": "n34",
      "target": "n35"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n26",
      "target": "n27"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n42",
      "target": "n55"
    },
    {
      "source": "n42",
      "target": "n49"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n19",
      "target": "n20"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n43",
      "target": "n44"
    },
    {
      "source": "n42",
      "target": "n43"
    },
    {
      "source": "n24",
      "target": "n25"
    },
    {
      "source": "n34",
      "target": "n36"
    },
    {
      "source": "n50",
      "target": "n52"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n13",
      "target": "n17"
    },
    {
      "source": "n29",
      "target": "n30"
    },
    {
      "source": "n55",
      "target": "n57"
    },
    {
      "source": "n42",
      "target": "n58"
    },
    {
      "source": "n42",
      "target": "n46"
    },
    {
      "source": "n49",
      "target": "n50"
    },
    {
      "source": "n46",
      "target": "n47"
    },
    {
      "source": "n36",
      "target": "n38"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n32",
      "target": "n33"
    },
    {
      "source": "n46",
      "target": "n48"
    },
    {
      "source": "n42",
      "target": "n60"
    },
    {
      "source": "n18",
      "target": "n21"
    },
    {
      "source": "n32",
      "target": "n42"
    },
    {
      "source": "n34",
      "target": "n40"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n29",
      "target": "n31"
    },
    {
      "source": "n26",
      "target": "n28"
    },
    {
      "source": "n24",
      "target": "n26"
    },
    {
      "source": "n43",
      "target": "n45"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n49",
      "target": "n53"
    },
    {
      "source": "n33",
      "target": "n34"
    },
    {
      "source": "n36",
      "target": "n37"
    },
    {
      "source": "n42",
      "target": "n59"
    },
    {
      "source": "n34",
      "target": "n39"
    },
    {
      "source": "n33",
      "target": "n41"
    },
    {
      "source": "n15",
      "target": "n17"
    }
  ]
}