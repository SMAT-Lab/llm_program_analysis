{
  "nodes": [
    {
      "id": "n0",
      "code": "import asyncio\nimport logging\nfrom contextlib import asynccontextmanager\n\nimport uvicorn\nfrom autogpt_libs.auth import parse_jwt_token\nfrom fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect\nfrom starlette.middleware.cors import CORSMiddleware\n\nfrom backend.data import redis\nfrom backend.data.execution import AsyncRedisExecutionEventBus\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import ExecutionSubscription, Methods, WsMessage\nfrom backend.util.service import AppProcess\nfrom backend.util.settings import AppEnvironment, Config, Settings\n\nlogger = logging.getLogger(__name__)\nsettings = Settings()\n"
    },
    {
      "id": "n1",
      "code": "@asynccontextmanager\nasync def lifespan(app: FastAPI):\n\n    manager = get_connection_manager()\n    fut = asyncio.create_task(event_broadcaster(manager))\n    fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))\n\n    yield\n"
    },
    {
      "id": "n2",
      "code": "docs_url = \"/docs\" if settings.config.app_env == AppEnvironment.LOCAL else None\napp = FastAPI(lifespan=lifespan, docs_url=docs_url)\n\n_connection_manager = None\n"
    },
    {
      "id": "n3",
      "code": "def get_connection_manager():\n    global _connection_manager\n\n    if _connection_manager is None:\n        _connection_manager = ConnectionManager()\n\n    return _connection_manager\n"
    },
    {
      "id": "n4",
      "code": "async def event_broadcaster(manager: ConnectionManager):\n\n    try:\n        redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()\n"
    },
    {
      "id": "n5",
      "code": "        async for event in event_queue.listen():\n            await manager.send_execution_result(event)\n"
    },
    {
      "id": "n6",
      "code": "    except Exception as e:\n        logger.exception(f\"Event broadcaster error: {e}\")\n        raise\n"
    },
    {
      "id": "n7",
      "code": "    finally:\n        redis.disconnect()\n"
    },
    {
      "id": "n8",
      "code": "async def authenticate_websocket(websocket: WebSocket) -> str:\n\n    if not settings.config.enable_auth:\n        return DEFAULT_USER_ID\n"
    },
    {
      "id": "n9",
      "code": "    token = websocket.query_params.get(\"token\")\n\n    if not token:\n        await websocket.close(code=4001, reason=\"Missing authentication token\")\n        return \"\"\n"
    },
    {
      "id": "n10",
      "code": "    try:\n        payload = parse_jwt_token(token)\n\n        user_id = payload.get(\"sub\")\n\n        if not user_id:\n            await websocket.close(code=4002, reason=\"Invalid token\")\n            return \"\"\n"
    },
    {
      "id": "n11",
      "code": "        return user_id\n"
    },
    {
      "id": "n12",
      "code": "    except ValueError:\n        await websocket.close(code=4003, reason=\"Invalid token\")\n        return \"\"\n"
    },
    {
      "id": "n13",
      "code": "async def handle_subscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\n\n    if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n"
    },
    {
      "id": "n14",
      "code": "    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.subscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")\n"
    },
    {
      "id": "n15",
      "code": "        await websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )\n"
    },
    {
      "id": "n16",
      "code": "async def handle_unsubscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\n"
    },
    {
      "id": "n17",
      "code": "    if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n"
    },
    {
      "id": "n18",
      "code": "    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.unsubscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )\n"
    },
    {
      "id": "n19",
      "code": "@app.get(\"/\")\nasync def health():\n    return {\"status\": \"healthy\"}\n"
    },
    {
      "id": "n20",
      "code": "@app.websocket(\"/ws\")\nasync def websocket_router(\n    websocket: WebSocket, manager: ConnectionManager = Depends(get_connection_manager)\n):\n\n    user_id = await authenticate_websocket(websocket)\n\n    if not user_id:\n        return\n\n    await manager.connect(websocket)\n\n    try:\n"
    },
    {
      "id": "n21",
      "code": "        while True:\n\n            data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n"
    },
    {
      "id": "n22",
      "code": "            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue\n"
    },
    {
      "id": "n23",
      "code": "            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n"
    },
    {
      "id": "n24",
      "code": "            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n"
    },
    {
      "id": "n25",
      "code": "            elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")\n"
    },
    {
      "id": "n26",
      "code": "            else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )\n"
    },
    {
      "id": "n27",
      "code": "    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        logger.debug(\"WebSocket client disconnected\")\n"
    },
    {
      "id": "n28",
      "code": "class WebsocketServer(AppProcess):\n    def run(self):\n\n        logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")\n\n        server_app = CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n\n        uvicorn.run(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )\n"
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n21",
      "target": "n22"
    },
    {
      "source": "n21",
      "target": "n24"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n25",
      "target": "n21"
    },
    {
      "source": "n24",
      "target": "n21"
    },
    {
      "source": "n21",
      "target": "n26"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n21",
      "target": "n23"
    },
    {
      "source": "n22",
      "target": "n21"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n26",
      "target": "n21"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n8",
      "target": "n11"
    },
    {
      "source": "n5",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n9",
      "target": "n12"
    },
    {
      "source": "n21",
      "target": "n25"
    },
    {
      "source": "n23",
      "target": "n21"
    }
  ]
}