{
  "nodes": [
    {
      "id": "n0",
      "code": "import re\n\nfrom jinja2 import BaseLoader\nfrom jinja2.sandbox import SandboxedEnvironment\n"
    },
    {
      "id": "n1",
      "code": "class TextFormatter:\n\n    def __init__(self):\n        # Create a sandboxed environment\n        self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)\n\n        # Clear any registered filters, tests, and globals to minimize attack surface\n        self.env.filters.clear()\n        self.env.tests.clear()\n        self.env.globals.clear()\n\n\n    def format_string(self, template_str: str, values=None, **kwargs) -> str:\n        # For python.format compatibility: replace all {...} with {{..}}.\n        # But avoid replacing {{...}} to {{{...}}}.\n        template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)\n        template = self.env.from_string(template_str)\n        return template.render(values or {}, **kwargs)\n"
    },
    {
      "id": "n2",
      "code": "\n"
    },
    {
      "id": "n3",
      "code": "    def __init__(self):\n        # Create a sandboxed environment\n        self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)\n\n        # Clear any registered filters, tests, and globals to minimize attack surface\n        self.env.filters.clear()\n        self.env.tests.clear()\n        self.env.globals.clear()\n"
    },
    {
      "id": "n4",
      "code": "    def format_string(self, template_str: str, values=None, **kwargs) -> str:\n\n        # For python.format compatibility: replace all {...} with {{..}}.\n        # But avoid replacing {{...}} to {{{...}}}.\n\n        template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)\n\n        template = self.env.from_string(template_str)\n\n        return template.render(values or {}, **kwargs)\n"
    }
  ],
  "edges": []
}